import {
  bignumber_default,
  require_bs58,
  require_crypto,
  require_safer,
  require_sha3,
  require_stream,
  require_string_decoder,
  sync
} from "./chunk-4OTWA2VP.js";
import {
  Connection,
  Keypair,
  LAMPORTS_PER_SOL,
  PublicKey,
  SYSVAR_CLOCK_PUBKEY,
  SYSVAR_INSTRUCTIONS_PUBKEY,
  SYSVAR_RENT_PUBKEY,
  SYSVAR_SLOT_HASHES_PUBKEY,
  SystemProgram,
  Transaction,
  TransactionInstruction,
  index_browser_esm_exports,
  init_index_browser_esm,
  init_sha3,
  init_sha512,
  keccak_256,
  require_Layout,
  require_base64_js,
  require_bn,
  require_browser,
  require_buffer,
  require_eventemitter3,
  require_ieee754,
  sendAndConfirmTransaction,
  sha512
} from "./chunk-EBZBBHFD.js";
import {
  __async,
  __commonJS,
  __esm,
  __export,
  __objRest,
  __require,
  __spreadProps,
  __spreadValues,
  __toCommonJS,
  __toESM
} from "./chunk-PQ2ATPLD.js";

// browser-external:http
var require_http = __commonJS({
  "browser-external:http"(exports, module) {
    module.exports = Object.create(new Proxy({}, {
      get(_, key) {
        if (key !== "__esModule" && key !== "__proto__" && key !== "constructor" && key !== "splice") {
          console.warn(`Module "http" has been externalized for browser compatibility. Cannot access "http.${key}" in client code. See http://vitejs.dev/guide/troubleshooting.html#module-externalized-for-browser-compatibility for more details.`);
        }
      }
    }));
  }
});

// browser-external:url
var require_url = __commonJS({
  "browser-external:url"(exports, module) {
    module.exports = Object.create(new Proxy({}, {
      get(_, key) {
        if (key !== "__esModule" && key !== "__proto__" && key !== "constructor" && key !== "splice") {
          console.warn(`Module "url" has been externalized for browser compatibility. Cannot access "url.${key}" in client code. See http://vitejs.dev/guide/troubleshooting.html#module-externalized-for-browser-compatibility for more details.`);
        }
      }
    }));
  }
});

// ../../node_modules/webidl-conversions/lib/index.js
var require_lib = __commonJS({
  "../../node_modules/webidl-conversions/lib/index.js"(exports, module) {
    "use strict";
    var conversions = {};
    module.exports = conversions;
    function sign(x) {
      return x < 0 ? -1 : 1;
    }
    function evenRound(x) {
      if (x % 1 === 0.5 && (x & 1) === 0) {
        return Math.floor(x);
      } else {
        return Math.round(x);
      }
    }
    function createNumberConversion(bitLength, typeOpts) {
      if (!typeOpts.unsigned) {
        --bitLength;
      }
      const lowerBound = typeOpts.unsigned ? 0 : -Math.pow(2, bitLength);
      const upperBound = Math.pow(2, bitLength) - 1;
      const moduloVal = typeOpts.moduloBitLength ? Math.pow(2, typeOpts.moduloBitLength) : Math.pow(2, bitLength);
      const moduloBound = typeOpts.moduloBitLength ? Math.pow(2, typeOpts.moduloBitLength - 1) : Math.pow(2, bitLength - 1);
      return function(V, opts) {
        if (!opts)
          opts = {};
        let x = +V;
        if (opts.enforceRange) {
          if (!Number.isFinite(x)) {
            throw new TypeError("Argument is not a finite number");
          }
          x = sign(x) * Math.floor(Math.abs(x));
          if (x < lowerBound || x > upperBound) {
            throw new TypeError("Argument is not in byte range");
          }
          return x;
        }
        if (!isNaN(x) && opts.clamp) {
          x = evenRound(x);
          if (x < lowerBound)
            x = lowerBound;
          if (x > upperBound)
            x = upperBound;
          return x;
        }
        if (!Number.isFinite(x) || x === 0) {
          return 0;
        }
        x = sign(x) * Math.floor(Math.abs(x));
        x = x % moduloVal;
        if (!typeOpts.unsigned && x >= moduloBound) {
          return x - moduloVal;
        } else if (typeOpts.unsigned) {
          if (x < 0) {
            x += moduloVal;
          } else if (x === -0) {
            return 0;
          }
        }
        return x;
      };
    }
    conversions["void"] = function() {
      return void 0;
    };
    conversions["boolean"] = function(val) {
      return !!val;
    };
    conversions["byte"] = createNumberConversion(8, { unsigned: false });
    conversions["octet"] = createNumberConversion(8, { unsigned: true });
    conversions["short"] = createNumberConversion(16, { unsigned: false });
    conversions["unsigned short"] = createNumberConversion(16, { unsigned: true });
    conversions["long"] = createNumberConversion(32, { unsigned: false });
    conversions["unsigned long"] = createNumberConversion(32, { unsigned: true });
    conversions["long long"] = createNumberConversion(32, { unsigned: false, moduloBitLength: 64 });
    conversions["unsigned long long"] = createNumberConversion(32, { unsigned: true, moduloBitLength: 64 });
    conversions["double"] = function(V) {
      const x = +V;
      if (!Number.isFinite(x)) {
        throw new TypeError("Argument is not a finite floating-point value");
      }
      return x;
    };
    conversions["unrestricted double"] = function(V) {
      const x = +V;
      if (isNaN(x)) {
        throw new TypeError("Argument is NaN");
      }
      return x;
    };
    conversions["float"] = conversions["double"];
    conversions["unrestricted float"] = conversions["unrestricted double"];
    conversions["DOMString"] = function(V, opts) {
      if (!opts)
        opts = {};
      if (opts.treatNullAsEmptyString && V === null) {
        return "";
      }
      return String(V);
    };
    conversions["ByteString"] = function(V, opts) {
      const x = String(V);
      let c = void 0;
      for (let i = 0; (c = x.codePointAt(i)) !== void 0; ++i) {
        if (c > 255) {
          throw new TypeError("Argument is not a valid bytestring");
        }
      }
      return x;
    };
    conversions["USVString"] = function(V) {
      const S = String(V);
      const n = S.length;
      const U = [];
      for (let i = 0; i < n; ++i) {
        const c = S.charCodeAt(i);
        if (c < 55296 || c > 57343) {
          U.push(String.fromCodePoint(c));
        } else if (56320 <= c && c <= 57343) {
          U.push(String.fromCodePoint(65533));
        } else {
          if (i === n - 1) {
            U.push(String.fromCodePoint(65533));
          } else {
            const d = S.charCodeAt(i + 1);
            if (56320 <= d && d <= 57343) {
              const a = c & 1023;
              const b = d & 1023;
              U.push(String.fromCodePoint((2 << 15) + (2 << 9) * a + b));
              ++i;
            } else {
              U.push(String.fromCodePoint(65533));
            }
          }
        }
      }
      return U.join("");
    };
    conversions["Date"] = function(V, opts) {
      if (!(V instanceof Date)) {
        throw new TypeError("Argument is not a Date object");
      }
      if (isNaN(V)) {
        return void 0;
      }
      return V;
    };
    conversions["RegExp"] = function(V, opts) {
      if (!(V instanceof RegExp)) {
        V = new RegExp(V);
      }
      return V;
    };
  }
});

// ../../node_modules/whatwg-url/lib/utils.js
var require_utils = __commonJS({
  "../../node_modules/whatwg-url/lib/utils.js"(exports, module) {
    "use strict";
    module.exports.mixin = function mixin(target, source) {
      const keys = Object.getOwnPropertyNames(source);
      for (let i = 0; i < keys.length; ++i) {
        Object.defineProperty(target, keys[i], Object.getOwnPropertyDescriptor(source, keys[i]));
      }
    };
    module.exports.wrapperSymbol = Symbol("wrapper");
    module.exports.implSymbol = Symbol("impl");
    module.exports.wrapperForImpl = function(impl) {
      return impl[module.exports.wrapperSymbol];
    };
    module.exports.implForWrapper = function(wrapper) {
      return wrapper[module.exports.implSymbol];
    };
  }
});

// ../../node_modules/punycode/punycode.es6.js
var punycode_es6_exports = {};
__export(punycode_es6_exports, {
  decode: () => decode,
  default: () => punycode_es6_default,
  encode: () => encode,
  toASCII: () => toASCII,
  toUnicode: () => toUnicode,
  ucs2decode: () => ucs2decode,
  ucs2encode: () => ucs2encode
});
function error(type) {
  throw new RangeError(errors[type]);
}
function map(array, callback) {
  const result = [];
  let length = array.length;
  while (length--) {
    result[length] = callback(array[length]);
  }
  return result;
}
function mapDomain(domain, callback) {
  const parts = domain.split("@");
  let result = "";
  if (parts.length > 1) {
    result = parts[0] + "@";
    domain = parts[1];
  }
  domain = domain.replace(regexSeparators, ".");
  const labels = domain.split(".");
  const encoded = map(labels, callback).join(".");
  return result + encoded;
}
function ucs2decode(string) {
  const output = [];
  let counter = 0;
  const length = string.length;
  while (counter < length) {
    const value = string.charCodeAt(counter++);
    if (value >= 55296 && value <= 56319 && counter < length) {
      const extra = string.charCodeAt(counter++);
      if ((extra & 64512) == 56320) {
        output.push(((value & 1023) << 10) + (extra & 1023) + 65536);
      } else {
        output.push(value);
        counter--;
      }
    } else {
      output.push(value);
    }
  }
  return output;
}
var maxInt, base, tMin, tMax, skew, damp, initialBias, initialN, delimiter, regexPunycode, regexNonASCII, regexSeparators, errors, baseMinusTMin, floor, stringFromCharCode, ucs2encode, basicToDigit, digitToBasic, adapt, decode, encode, toUnicode, toASCII, punycode, punycode_es6_default;
var init_punycode_es6 = __esm({
  "../../node_modules/punycode/punycode.es6.js"() {
    "use strict";
    maxInt = 2147483647;
    base = 36;
    tMin = 1;
    tMax = 26;
    skew = 38;
    damp = 700;
    initialBias = 72;
    initialN = 128;
    delimiter = "-";
    regexPunycode = /^xn--/;
    regexNonASCII = /[^\0-\x7F]/;
    regexSeparators = /[\x2E\u3002\uFF0E\uFF61]/g;
    errors = {
      "overflow": "Overflow: input needs wider integers to process",
      "not-basic": "Illegal input >= 0x80 (not a basic code point)",
      "invalid-input": "Invalid input"
    };
    baseMinusTMin = base - tMin;
    floor = Math.floor;
    stringFromCharCode = String.fromCharCode;
    ucs2encode = (codePoints) => String.fromCodePoint(...codePoints);
    basicToDigit = function(codePoint) {
      if (codePoint >= 48 && codePoint < 58) {
        return 26 + (codePoint - 48);
      }
      if (codePoint >= 65 && codePoint < 91) {
        return codePoint - 65;
      }
      if (codePoint >= 97 && codePoint < 123) {
        return codePoint - 97;
      }
      return base;
    };
    digitToBasic = function(digit, flag) {
      return digit + 22 + 75 * (digit < 26) - ((flag != 0) << 5);
    };
    adapt = function(delta, numPoints, firstTime) {
      let k = 0;
      delta = firstTime ? floor(delta / damp) : delta >> 1;
      delta += floor(delta / numPoints);
      for (; delta > baseMinusTMin * tMax >> 1; k += base) {
        delta = floor(delta / baseMinusTMin);
      }
      return floor(k + (baseMinusTMin + 1) * delta / (delta + skew));
    };
    decode = function(input) {
      const output = [];
      const inputLength = input.length;
      let i = 0;
      let n = initialN;
      let bias = initialBias;
      let basic = input.lastIndexOf(delimiter);
      if (basic < 0) {
        basic = 0;
      }
      for (let j = 0; j < basic; ++j) {
        if (input.charCodeAt(j) >= 128) {
          error("not-basic");
        }
        output.push(input.charCodeAt(j));
      }
      for (let index = basic > 0 ? basic + 1 : 0; index < inputLength; ) {
        const oldi = i;
        for (let w = 1, k = base; ; k += base) {
          if (index >= inputLength) {
            error("invalid-input");
          }
          const digit = basicToDigit(input.charCodeAt(index++));
          if (digit >= base) {
            error("invalid-input");
          }
          if (digit > floor((maxInt - i) / w)) {
            error("overflow");
          }
          i += digit * w;
          const t = k <= bias ? tMin : k >= bias + tMax ? tMax : k - bias;
          if (digit < t) {
            break;
          }
          const baseMinusT = base - t;
          if (w > floor(maxInt / baseMinusT)) {
            error("overflow");
          }
          w *= baseMinusT;
        }
        const out = output.length + 1;
        bias = adapt(i - oldi, out, oldi == 0);
        if (floor(i / out) > maxInt - n) {
          error("overflow");
        }
        n += floor(i / out);
        i %= out;
        output.splice(i++, 0, n);
      }
      return String.fromCodePoint(...output);
    };
    encode = function(input) {
      const output = [];
      input = ucs2decode(input);
      const inputLength = input.length;
      let n = initialN;
      let delta = 0;
      let bias = initialBias;
      for (const currentValue of input) {
        if (currentValue < 128) {
          output.push(stringFromCharCode(currentValue));
        }
      }
      const basicLength = output.length;
      let handledCPCount = basicLength;
      if (basicLength) {
        output.push(delimiter);
      }
      while (handledCPCount < inputLength) {
        let m = maxInt;
        for (const currentValue of input) {
          if (currentValue >= n && currentValue < m) {
            m = currentValue;
          }
        }
        const handledCPCountPlusOne = handledCPCount + 1;
        if (m - n > floor((maxInt - delta) / handledCPCountPlusOne)) {
          error("overflow");
        }
        delta += (m - n) * handledCPCountPlusOne;
        n = m;
        for (const currentValue of input) {
          if (currentValue < n && ++delta > maxInt) {
            error("overflow");
          }
          if (currentValue === n) {
            let q = delta;
            for (let k = base; ; k += base) {
              const t = k <= bias ? tMin : k >= bias + tMax ? tMax : k - bias;
              if (q < t) {
                break;
              }
              const qMinusT = q - t;
              const baseMinusT = base - t;
              output.push(
                stringFromCharCode(digitToBasic(t + qMinusT % baseMinusT, 0))
              );
              q = floor(qMinusT / baseMinusT);
            }
            output.push(stringFromCharCode(digitToBasic(q, 0)));
            bias = adapt(delta, handledCPCountPlusOne, handledCPCount === basicLength);
            delta = 0;
            ++handledCPCount;
          }
        }
        ++delta;
        ++n;
      }
      return output.join("");
    };
    toUnicode = function(input) {
      return mapDomain(input, function(string) {
        return regexPunycode.test(string) ? decode(string.slice(4).toLowerCase()) : string;
      });
    };
    toASCII = function(input) {
      return mapDomain(input, function(string) {
        return regexNonASCII.test(string) ? "xn--" + encode(string) : string;
      });
    };
    punycode = {
      /**
       * A string representing the current Punycode.js version number.
       * @memberOf punycode
       * @type String
       */
      "version": "2.3.1",
      /**
       * An object of methods to convert from JavaScript's internal character
       * representation (UCS-2) to Unicode code points, and back.
       * @see <https://mathiasbynens.be/notes/javascript-encoding>
       * @memberOf punycode
       * @type Object
       */
      "ucs2": {
        "decode": ucs2decode,
        "encode": ucs2encode
      },
      "decode": decode,
      "encode": encode,
      "toASCII": toASCII,
      "toUnicode": toUnicode
    };
    punycode_es6_default = punycode;
  }
});

// ../../node_modules/tr46/lib/mappingTable.json
var require_mappingTable = __commonJS({
  "../../node_modules/tr46/lib/mappingTable.json"(exports, module) {
    module.exports = [[[0, 44], "disallowed_STD3_valid"], [[45, 46], "valid"], [[47, 47], "disallowed_STD3_valid"], [[48, 57], "valid"], [[58, 64], "disallowed_STD3_valid"], [[65, 65], "mapped", [97]], [[66, 66], "mapped", [98]], [[67, 67], "mapped", [99]], [[68, 68], "mapped", [100]], [[69, 69], "mapped", [101]], [[70, 70], "mapped", [102]], [[71, 71], "mapped", [103]], [[72, 72], "mapped", [104]], [[73, 73], "mapped", [105]], [[74, 74], "mapped", [106]], [[75, 75], "mapped", [107]], [[76, 76], "mapped", [108]], [[77, 77], "mapped", [109]], [[78, 78], "mapped", [110]], [[79, 79], "mapped", [111]], [[80, 80], "mapped", [112]], [[81, 81], "mapped", [113]], [[82, 82], "mapped", [114]], [[83, 83], "mapped", [115]], [[84, 84], "mapped", [116]], [[85, 85], "mapped", [117]], [[86, 86], "mapped", [118]], [[87, 87], "mapped", [119]], [[88, 88], "mapped", [120]], [[89, 89], "mapped", [121]], [[90, 90], "mapped", [122]], [[91, 96], "disallowed_STD3_valid"], [[97, 122], "valid"], [[123, 127], "disallowed_STD3_valid"], [[128, 159], "disallowed"], [[160, 160], "disallowed_STD3_mapped", [32]], [[161, 167], "valid", [], "NV8"], [[168, 168], "disallowed_STD3_mapped", [32, 776]], [[169, 169], "valid", [], "NV8"], [[170, 170], "mapped", [97]], [[171, 172], "valid", [], "NV8"], [[173, 173], "ignored"], [[174, 174], "valid", [], "NV8"], [[175, 175], "disallowed_STD3_mapped", [32, 772]], [[176, 177], "valid", [], "NV8"], [[178, 178], "mapped", [50]], [[179, 179], "mapped", [51]], [[180, 180], "disallowed_STD3_mapped", [32, 769]], [[181, 181], "mapped", [956]], [[182, 182], "valid", [], "NV8"], [[183, 183], "valid"], [[184, 184], "disallowed_STD3_mapped", [32, 807]], [[185, 185], "mapped", [49]], [[186, 186], "mapped", [111]], [[187, 187], "valid", [], "NV8"], [[188, 188], "mapped", [49, 8260, 52]], [[189, 189], "mapped", [49, 8260, 50]], [[190, 190], "mapped", [51, 8260, 52]], [[191, 191], "valid", [], "NV8"], [[192, 192], "mapped", [224]], [[193, 193], "mapped", [225]], [[194, 194], "mapped", [226]], [[195, 195], "mapped", [227]], [[196, 196], "mapped", [228]], [[197, 197], "mapped", [229]], [[198, 198], "mapped", [230]], [[199, 199], "mapped", [231]], [[200, 200], "mapped", [232]], [[201, 201], "mapped", [233]], [[202, 202], "mapped", [234]], [[203, 203], "mapped", [235]], [[204, 204], "mapped", [236]], [[205, 205], "mapped", [237]], [[206, 206], "mapped", [238]], [[207, 207], "mapped", [239]], [[208, 208], "mapped", [240]], [[209, 209], "mapped", [241]], [[210, 210], "mapped", [242]], [[211, 211], "mapped", [243]], [[212, 212], "mapped", [244]], [[213, 213], "mapped", [245]], [[214, 214], "mapped", [246]], [[215, 215], "valid", [], "NV8"], [[216, 216], "mapped", [248]], [[217, 217], "mapped", [249]], [[218, 218], "mapped", [250]], [[219, 219], "mapped", [251]], [[220, 220], "mapped", [252]], [[221, 221], "mapped", [253]], [[222, 222], "mapped", [254]], [[223, 223], "deviation", [115, 115]], [[224, 246], "valid"], [[247, 247], "valid", [], "NV8"], [[248, 255], "valid"], [[256, 256], "mapped", [257]], [[257, 257], "valid"], [[258, 258], "mapped", [259]], [[259, 259], "valid"], [[260, 260], "mapped", [261]], [[261, 261], "valid"], [[262, 262], "mapped", [263]], [[263, 263], "valid"], [[264, 264], "mapped", [265]], [[265, 265], "valid"], [[266, 266], "mapped", [267]], [[267, 267], "valid"], [[268, 268], "mapped", [269]], [[269, 269], "valid"], [[270, 270], "mapped", [271]], [[271, 271], "valid"], [[272, 272], "mapped", [273]], [[273, 273], "valid"], [[274, 274], "mapped", [275]], [[275, 275], "valid"], [[276, 276], "mapped", [277]], [[277, 277], "valid"], [[278, 278], "mapped", [279]], [[279, 279], "valid"], [[280, 280], "mapped", [281]], [[281, 281], "valid"], [[282, 282], "mapped", [283]], [[283, 283], "valid"], [[284, 284], "mapped", [285]], [[285, 285], "valid"], [[286, 286], "mapped", [287]], [[287, 287], "valid"], [[288, 288], "mapped", [289]], [[289, 289], "valid"], [[290, 290], "mapped", [291]], [[291, 291], "valid"], [[292, 292], "mapped", [293]], [[293, 293], "valid"], [[294, 294], "mapped", [295]], [[295, 295], "valid"], [[296, 296], "mapped", [297]], [[297, 297], "valid"], [[298, 298], "mapped", [299]], [[299, 299], "valid"], [[300, 300], "mapped", [301]], [[301, 301], "valid"], [[302, 302], "mapped", [303]], [[303, 303], "valid"], [[304, 304], "mapped", [105, 775]], [[305, 305], "valid"], [[306, 307], "mapped", [105, 106]], [[308, 308], "mapped", [309]], [[309, 309], "valid"], [[310, 310], "mapped", [311]], [[311, 312], "valid"], [[313, 313], "mapped", [314]], [[314, 314], "valid"], [[315, 315], "mapped", [316]], [[316, 316], "valid"], [[317, 317], "mapped", [318]], [[318, 318], "valid"], [[319, 320], "mapped", [108, 183]], [[321, 321], "mapped", [322]], [[322, 322], "valid"], [[323, 323], "mapped", [324]], [[324, 324], "valid"], [[325, 325], "mapped", [326]], [[326, 326], "valid"], [[327, 327], "mapped", [328]], [[328, 328], "valid"], [[329, 329], "mapped", [700, 110]], [[330, 330], "mapped", [331]], [[331, 331], "valid"], [[332, 332], "mapped", [333]], [[333, 333], "valid"], [[334, 334], "mapped", [335]], [[335, 335], "valid"], [[336, 336], "mapped", [337]], [[337, 337], "valid"], [[338, 338], "mapped", [339]], [[339, 339], "valid"], [[340, 340], "mapped", [341]], [[341, 341], "valid"], [[342, 342], "mapped", [343]], [[343, 343], "valid"], [[344, 344], "mapped", [345]], [[345, 345], "valid"], [[346, 346], "mapped", [347]], [[347, 347], "valid"], [[348, 348], "mapped", [349]], [[349, 349], "valid"], [[350, 350], "mapped", [351]], [[351, 351], "valid"], [[352, 352], "mapped", [353]], [[353, 353], "valid"], [[354, 354], "mapped", [355]], [[355, 355], "valid"], [[356, 356], "mapped", [357]], [[357, 357], "valid"], [[358, 358], "mapped", [359]], [[359, 359], "valid"], [[360, 360], "mapped", [361]], [[361, 361], "valid"], [[362, 362], "mapped", [363]], [[363, 363], "valid"], [[364, 364], "mapped", [365]], [[365, 365], "valid"], [[366, 366], "mapped", [367]], [[367, 367], "valid"], [[368, 368], "mapped", [369]], [[369, 369], "valid"], [[370, 370], "mapped", [371]], [[371, 371], "valid"], [[372, 372], "mapped", [373]], [[373, 373], "valid"], [[374, 374], "mapped", [375]], [[375, 375], "valid"], [[376, 376], "mapped", [255]], [[377, 377], "mapped", [378]], [[378, 378], "valid"], [[379, 379], "mapped", [380]], [[380, 380], "valid"], [[381, 381], "mapped", [382]], [[382, 382], "valid"], [[383, 383], "mapped", [115]], [[384, 384], "valid"], [[385, 385], "mapped", [595]], [[386, 386], "mapped", [387]], [[387, 387], "valid"], [[388, 388], "mapped", [389]], [[389, 389], "valid"], [[390, 390], "mapped", [596]], [[391, 391], "mapped", [392]], [[392, 392], "valid"], [[393, 393], "mapped", [598]], [[394, 394], "mapped", [599]], [[395, 395], "mapped", [396]], [[396, 397], "valid"], [[398, 398], "mapped", [477]], [[399, 399], "mapped", [601]], [[400, 400], "mapped", [603]], [[401, 401], "mapped", [402]], [[402, 402], "valid"], [[403, 403], "mapped", [608]], [[404, 404], "mapped", [611]], [[405, 405], "valid"], [[406, 406], "mapped", [617]], [[407, 407], "mapped", [616]], [[408, 408], "mapped", [409]], [[409, 411], "valid"], [[412, 412], "mapped", [623]], [[413, 413], "mapped", [626]], [[414, 414], "valid"], [[415, 415], "mapped", [629]], [[416, 416], "mapped", [417]], [[417, 417], "valid"], [[418, 418], "mapped", [419]], [[419, 419], "valid"], [[420, 420], "mapped", [421]], [[421, 421], "valid"], [[422, 422], "mapped", [640]], [[423, 423], "mapped", [424]], [[424, 424], "valid"], [[425, 425], "mapped", [643]], [[426, 427], "valid"], [[428, 428], "mapped", [429]], [[429, 429], "valid"], [[430, 430], "mapped", [648]], [[431, 431], "mapped", [432]], [[432, 432], "valid"], [[433, 433], "mapped", [650]], [[434, 434], "mapped", [651]], [[435, 435], "mapped", [436]], [[436, 436], "valid"], [[437, 437], "mapped", [438]], [[438, 438], "valid"], [[439, 439], "mapped", [658]], [[440, 440], "mapped", [441]], [[441, 443], "valid"], [[444, 444], "mapped", [445]], [[445, 451], "valid"], [[452, 454], "mapped", [100, 382]], [[455, 457], "mapped", [108, 106]], [[458, 460], "mapped", [110, 106]], [[461, 461], "mapped", [462]], [[462, 462], "valid"], [[463, 463], "mapped", [464]], [[464, 464], "valid"], [[465, 465], "mapped", [466]], [[466, 466], "valid"], [[467, 467], "mapped", [468]], [[468, 468], "valid"], [[469, 469], "mapped", [470]], [[470, 470], "valid"], [[471, 471], "mapped", [472]], [[472, 472], "valid"], [[473, 473], "mapped", [474]], [[474, 474], "valid"], [[475, 475], "mapped", [476]], [[476, 477], "valid"], [[478, 478], "mapped", [479]], [[479, 479], "valid"], [[480, 480], "mapped", [481]], [[481, 481], "valid"], [[482, 482], "mapped", [483]], [[483, 483], "valid"], [[484, 484], "mapped", [485]], [[485, 485], "valid"], [[486, 486], "mapped", [487]], [[487, 487], "valid"], [[488, 488], "mapped", [489]], [[489, 489], "valid"], [[490, 490], "mapped", [491]], [[491, 491], "valid"], [[492, 492], "mapped", [493]], [[493, 493], "valid"], [[494, 494], "mapped", [495]], [[495, 496], "valid"], [[497, 499], "mapped", [100, 122]], [[500, 500], "mapped", [501]], [[501, 501], "valid"], [[502, 502], "mapped", [405]], [[503, 503], "mapped", [447]], [[504, 504], "mapped", [505]], [[505, 505], "valid"], [[506, 506], "mapped", [507]], [[507, 507], "valid"], [[508, 508], "mapped", [509]], [[509, 509], "valid"], [[510, 510], "mapped", [511]], [[511, 511], "valid"], [[512, 512], "mapped", [513]], [[513, 513], "valid"], [[514, 514], "mapped", [515]], [[515, 515], "valid"], [[516, 516], "mapped", [517]], [[517, 517], "valid"], [[518, 518], "mapped", [519]], [[519, 519], "valid"], [[520, 520], "mapped", [521]], [[521, 521], "valid"], [[522, 522], "mapped", [523]], [[523, 523], "valid"], [[524, 524], "mapped", [525]], [[525, 525], "valid"], [[526, 526], "mapped", [527]], [[527, 527], "valid"], [[528, 528], "mapped", [529]], [[529, 529], "valid"], [[530, 530], "mapped", [531]], [[531, 531], "valid"], [[532, 532], "mapped", [533]], [[533, 533], "valid"], [[534, 534], "mapped", [535]], [[535, 535], "valid"], [[536, 536], "mapped", [537]], [[537, 537], "valid"], [[538, 538], "mapped", [539]], [[539, 539], "valid"], [[540, 540], "mapped", [541]], [[541, 541], "valid"], [[542, 542], "mapped", [543]], [[543, 543], "valid"], [[544, 544], "mapped", [414]], [[545, 545], "valid"], [[546, 546], "mapped", [547]], [[547, 547], "valid"], [[548, 548], "mapped", [549]], [[549, 549], "valid"], [[550, 550], "mapped", [551]], [[551, 551], "valid"], [[552, 552], "mapped", [553]], [[553, 553], "valid"], [[554, 554], "mapped", [555]], [[555, 555], "valid"], [[556, 556], "mapped", [557]], [[557, 557], "valid"], [[558, 558], "mapped", [559]], [[559, 559], "valid"], [[560, 560], "mapped", [561]], [[561, 561], "valid"], [[562, 562], "mapped", [563]], [[563, 563], "valid"], [[564, 566], "valid"], [[567, 569], "valid"], [[570, 570], "mapped", [11365]], [[571, 571], "mapped", [572]], [[572, 572], "valid"], [[573, 573], "mapped", [410]], [[574, 574], "mapped", [11366]], [[575, 576], "valid"], [[577, 577], "mapped", [578]], [[578, 578], "valid"], [[579, 579], "mapped", [384]], [[580, 580], "mapped", [649]], [[581, 581], "mapped", [652]], [[582, 582], "mapped", [583]], [[583, 583], "valid"], [[584, 584], "mapped", [585]], [[585, 585], "valid"], [[586, 586], "mapped", [587]], [[587, 587], "valid"], [[588, 588], "mapped", [589]], [[589, 589], "valid"], [[590, 590], "mapped", [591]], [[591, 591], "valid"], [[592, 680], "valid"], [[681, 685], "valid"], [[686, 687], "valid"], [[688, 688], "mapped", [104]], [[689, 689], "mapped", [614]], [[690, 690], "mapped", [106]], [[691, 691], "mapped", [114]], [[692, 692], "mapped", [633]], [[693, 693], "mapped", [635]], [[694, 694], "mapped", [641]], [[695, 695], "mapped", [119]], [[696, 696], "mapped", [121]], [[697, 705], "valid"], [[706, 709], "valid", [], "NV8"], [[710, 721], "valid"], [[722, 727], "valid", [], "NV8"], [[728, 728], "disallowed_STD3_mapped", [32, 774]], [[729, 729], "disallowed_STD3_mapped", [32, 775]], [[730, 730], "disallowed_STD3_mapped", [32, 778]], [[731, 731], "disallowed_STD3_mapped", [32, 808]], [[732, 732], "disallowed_STD3_mapped", [32, 771]], [[733, 733], "disallowed_STD3_mapped", [32, 779]], [[734, 734], "valid", [], "NV8"], [[735, 735], "valid", [], "NV8"], [[736, 736], "mapped", [611]], [[737, 737], "mapped", [108]], [[738, 738], "mapped", [115]], [[739, 739], "mapped", [120]], [[740, 740], "mapped", [661]], [[741, 745], "valid", [], "NV8"], [[746, 747], "valid", [], "NV8"], [[748, 748], "valid"], [[749, 749], "valid", [], "NV8"], [[750, 750], "valid"], [[751, 767], "valid", [], "NV8"], [[768, 831], "valid"], [[832, 832], "mapped", [768]], [[833, 833], "mapped", [769]], [[834, 834], "valid"], [[835, 835], "mapped", [787]], [[836, 836], "mapped", [776, 769]], [[837, 837], "mapped", [953]], [[838, 846], "valid"], [[847, 847], "ignored"], [[848, 855], "valid"], [[856, 860], "valid"], [[861, 863], "valid"], [[864, 865], "valid"], [[866, 866], "valid"], [[867, 879], "valid"], [[880, 880], "mapped", [881]], [[881, 881], "valid"], [[882, 882], "mapped", [883]], [[883, 883], "valid"], [[884, 884], "mapped", [697]], [[885, 885], "valid"], [[886, 886], "mapped", [887]], [[887, 887], "valid"], [[888, 889], "disallowed"], [[890, 890], "disallowed_STD3_mapped", [32, 953]], [[891, 893], "valid"], [[894, 894], "disallowed_STD3_mapped", [59]], [[895, 895], "mapped", [1011]], [[896, 899], "disallowed"], [[900, 900], "disallowed_STD3_mapped", [32, 769]], [[901, 901], "disallowed_STD3_mapped", [32, 776, 769]], [[902, 902], "mapped", [940]], [[903, 903], "mapped", [183]], [[904, 904], "mapped", [941]], [[905, 905], "mapped", [942]], [[906, 906], "mapped", [943]], [[907, 907], "disallowed"], [[908, 908], "mapped", [972]], [[909, 909], "disallowed"], [[910, 910], "mapped", [973]], [[911, 911], "mapped", [974]], [[912, 912], "valid"], [[913, 913], "mapped", [945]], [[914, 914], "mapped", [946]], [[915, 915], "mapped", [947]], [[916, 916], "mapped", [948]], [[917, 917], "mapped", [949]], [[918, 918], "mapped", [950]], [[919, 919], "mapped", [951]], [[920, 920], "mapped", [952]], [[921, 921], "mapped", [953]], [[922, 922], "mapped", [954]], [[923, 923], "mapped", [955]], [[924, 924], "mapped", [956]], [[925, 925], "mapped", [957]], [[926, 926], "mapped", [958]], [[927, 927], "mapped", [959]], [[928, 928], "mapped", [960]], [[929, 929], "mapped", [961]], [[930, 930], "disallowed"], [[931, 931], "mapped", [963]], [[932, 932], "mapped", [964]], [[933, 933], "mapped", [965]], [[934, 934], "mapped", [966]], [[935, 935], "mapped", [967]], [[936, 936], "mapped", [968]], [[937, 937], "mapped", [969]], [[938, 938], "mapped", [970]], [[939, 939], "mapped", [971]], [[940, 961], "valid"], [[962, 962], "deviation", [963]], [[963, 974], "valid"], [[975, 975], "mapped", [983]], [[976, 976], "mapped", [946]], [[977, 977], "mapped", [952]], [[978, 978], "mapped", [965]], [[979, 979], "mapped", [973]], [[980, 980], "mapped", [971]], [[981, 981], "mapped", [966]], [[982, 982], "mapped", [960]], [[983, 983], "valid"], [[984, 984], "mapped", [985]], [[985, 985], "valid"], [[986, 986], "mapped", [987]], [[987, 987], "valid"], [[988, 988], "mapped", [989]], [[989, 989], "valid"], [[990, 990], "mapped", [991]], [[991, 991], "valid"], [[992, 992], "mapped", [993]], [[993, 993], "valid"], [[994, 994], "mapped", [995]], [[995, 995], "valid"], [[996, 996], "mapped", [997]], [[997, 997], "valid"], [[998, 998], "mapped", [999]], [[999, 999], "valid"], [[1e3, 1e3], "mapped", [1001]], [[1001, 1001], "valid"], [[1002, 1002], "mapped", [1003]], [[1003, 1003], "valid"], [[1004, 1004], "mapped", [1005]], [[1005, 1005], "valid"], [[1006, 1006], "mapped", [1007]], [[1007, 1007], "valid"], [[1008, 1008], "mapped", [954]], [[1009, 1009], "mapped", [961]], [[1010, 1010], "mapped", [963]], [[1011, 1011], "valid"], [[1012, 1012], "mapped", [952]], [[1013, 1013], "mapped", [949]], [[1014, 1014], "valid", [], "NV8"], [[1015, 1015], "mapped", [1016]], [[1016, 1016], "valid"], [[1017, 1017], "mapped", [963]], [[1018, 1018], "mapped", [1019]], [[1019, 1019], "valid"], [[1020, 1020], "valid"], [[1021, 1021], "mapped", [891]], [[1022, 1022], "mapped", [892]], [[1023, 1023], "mapped", [893]], [[1024, 1024], "mapped", [1104]], [[1025, 1025], "mapped", [1105]], [[1026, 1026], "mapped", [1106]], [[1027, 1027], "mapped", [1107]], [[1028, 1028], "mapped", [1108]], [[1029, 1029], "mapped", [1109]], [[1030, 1030], "mapped", [1110]], [[1031, 1031], "mapped", [1111]], [[1032, 1032], "mapped", [1112]], [[1033, 1033], "mapped", [1113]], [[1034, 1034], "mapped", [1114]], [[1035, 1035], "mapped", [1115]], [[1036, 1036], "mapped", [1116]], [[1037, 1037], "mapped", [1117]], [[1038, 1038], "mapped", [1118]], [[1039, 1039], "mapped", [1119]], [[1040, 1040], "mapped", [1072]], [[1041, 1041], "mapped", [1073]], [[1042, 1042], "mapped", [1074]], [[1043, 1043], "mapped", [1075]], [[1044, 1044], "mapped", [1076]], [[1045, 1045], "mapped", [1077]], [[1046, 1046], "mapped", [1078]], [[1047, 1047], "mapped", [1079]], [[1048, 1048], "mapped", [1080]], [[1049, 1049], "mapped", [1081]], [[1050, 1050], "mapped", [1082]], [[1051, 1051], "mapped", [1083]], [[1052, 1052], "mapped", [1084]], [[1053, 1053], "mapped", [1085]], [[1054, 1054], "mapped", [1086]], [[1055, 1055], "mapped", [1087]], [[1056, 1056], "mapped", [1088]], [[1057, 1057], "mapped", [1089]], [[1058, 1058], "mapped", [1090]], [[1059, 1059], "mapped", [1091]], [[1060, 1060], "mapped", [1092]], [[1061, 1061], "mapped", [1093]], [[1062, 1062], "mapped", [1094]], [[1063, 1063], "mapped", [1095]], [[1064, 1064], "mapped", [1096]], [[1065, 1065], "mapped", [1097]], [[1066, 1066], "mapped", [1098]], [[1067, 1067], "mapped", [1099]], [[1068, 1068], "mapped", [1100]], [[1069, 1069], "mapped", [1101]], [[1070, 1070], "mapped", [1102]], [[1071, 1071], "mapped", [1103]], [[1072, 1103], "valid"], [[1104, 1104], "valid"], [[1105, 1116], "valid"], [[1117, 1117], "valid"], [[1118, 1119], "valid"], [[1120, 1120], "mapped", [1121]], [[1121, 1121], "valid"], [[1122, 1122], "mapped", [1123]], [[1123, 1123], "valid"], [[1124, 1124], "mapped", [1125]], [[1125, 1125], "valid"], [[1126, 1126], "mapped", [1127]], [[1127, 1127], "valid"], [[1128, 1128], "mapped", [1129]], [[1129, 1129], "valid"], [[1130, 1130], "mapped", [1131]], [[1131, 1131], "valid"], [[1132, 1132], "mapped", [1133]], [[1133, 1133], "valid"], [[1134, 1134], "mapped", [1135]], [[1135, 1135], "valid"], [[1136, 1136], "mapped", [1137]], [[1137, 1137], "valid"], [[1138, 1138], "mapped", [1139]], [[1139, 1139], "valid"], [[1140, 1140], "mapped", [1141]], [[1141, 1141], "valid"], [[1142, 1142], "mapped", [1143]], [[1143, 1143], "valid"], [[1144, 1144], "mapped", [1145]], [[1145, 1145], "valid"], [[1146, 1146], "mapped", [1147]], [[1147, 1147], "valid"], [[1148, 1148], "mapped", [1149]], [[1149, 1149], "valid"], [[1150, 1150], "mapped", [1151]], [[1151, 1151], "valid"], [[1152, 1152], "mapped", [1153]], [[1153, 1153], "valid"], [[1154, 1154], "valid", [], "NV8"], [[1155, 1158], "valid"], [[1159, 1159], "valid"], [[1160, 1161], "valid", [], "NV8"], [[1162, 1162], "mapped", [1163]], [[1163, 1163], "valid"], [[1164, 1164], "mapped", [1165]], [[1165, 1165], "valid"], [[1166, 1166], "mapped", [1167]], [[1167, 1167], "valid"], [[1168, 1168], "mapped", [1169]], [[1169, 1169], "valid"], [[1170, 1170], "mapped", [1171]], [[1171, 1171], "valid"], [[1172, 1172], "mapped", [1173]], [[1173, 1173], "valid"], [[1174, 1174], "mapped", [1175]], [[1175, 1175], "valid"], [[1176, 1176], "mapped", [1177]], [[1177, 1177], "valid"], [[1178, 1178], "mapped", [1179]], [[1179, 1179], "valid"], [[1180, 1180], "mapped", [1181]], [[1181, 1181], "valid"], [[1182, 1182], "mapped", [1183]], [[1183, 1183], "valid"], [[1184, 1184], "mapped", [1185]], [[1185, 1185], "valid"], [[1186, 1186], "mapped", [1187]], [[1187, 1187], "valid"], [[1188, 1188], "mapped", [1189]], [[1189, 1189], "valid"], [[1190, 1190], "mapped", [1191]], [[1191, 1191], "valid"], [[1192, 1192], "mapped", [1193]], [[1193, 1193], "valid"], [[1194, 1194], "mapped", [1195]], [[1195, 1195], "valid"], [[1196, 1196], "mapped", [1197]], [[1197, 1197], "valid"], [[1198, 1198], "mapped", [1199]], [[1199, 1199], "valid"], [[1200, 1200], "mapped", [1201]], [[1201, 1201], "valid"], [[1202, 1202], "mapped", [1203]], [[1203, 1203], "valid"], [[1204, 1204], "mapped", [1205]], [[1205, 1205], "valid"], [[1206, 1206], "mapped", [1207]], [[1207, 1207], "valid"], [[1208, 1208], "mapped", [1209]], [[1209, 1209], "valid"], [[1210, 1210], "mapped", [1211]], [[1211, 1211], "valid"], [[1212, 1212], "mapped", [1213]], [[1213, 1213], "valid"], [[1214, 1214], "mapped", [1215]], [[1215, 1215], "valid"], [[1216, 1216], "disallowed"], [[1217, 1217], "mapped", [1218]], [[1218, 1218], "valid"], [[1219, 1219], "mapped", [1220]], [[1220, 1220], "valid"], [[1221, 1221], "mapped", [1222]], [[1222, 1222], "valid"], [[1223, 1223], "mapped", [1224]], [[1224, 1224], "valid"], [[1225, 1225], "mapped", [1226]], [[1226, 1226], "valid"], [[1227, 1227], "mapped", [1228]], [[1228, 1228], "valid"], [[1229, 1229], "mapped", [1230]], [[1230, 1230], "valid"], [[1231, 1231], "valid"], [[1232, 1232], "mapped", [1233]], [[1233, 1233], "valid"], [[1234, 1234], "mapped", [1235]], [[1235, 1235], "valid"], [[1236, 1236], "mapped", [1237]], [[1237, 1237], "valid"], [[1238, 1238], "mapped", [1239]], [[1239, 1239], "valid"], [[1240, 1240], "mapped", [1241]], [[1241, 1241], "valid"], [[1242, 1242], "mapped", [1243]], [[1243, 1243], "valid"], [[1244, 1244], "mapped", [1245]], [[1245, 1245], "valid"], [[1246, 1246], "mapped", [1247]], [[1247, 1247], "valid"], [[1248, 1248], "mapped", [1249]], [[1249, 1249], "valid"], [[1250, 1250], "mapped", [1251]], [[1251, 1251], "valid"], [[1252, 1252], "mapped", [1253]], [[1253, 1253], "valid"], [[1254, 1254], "mapped", [1255]], [[1255, 1255], "valid"], [[1256, 1256], "mapped", [1257]], [[1257, 1257], "valid"], [[1258, 1258], "mapped", [1259]], [[1259, 1259], "valid"], [[1260, 1260], "mapped", [1261]], [[1261, 1261], "valid"], [[1262, 1262], "mapped", [1263]], [[1263, 1263], "valid"], [[1264, 1264], "mapped", [1265]], [[1265, 1265], "valid"], [[1266, 1266], "mapped", [1267]], [[1267, 1267], "valid"], [[1268, 1268], "mapped", [1269]], [[1269, 1269], "valid"], [[1270, 1270], "mapped", [1271]], [[1271, 1271], "valid"], [[1272, 1272], "mapped", [1273]], [[1273, 1273], "valid"], [[1274, 1274], "mapped", [1275]], [[1275, 1275], "valid"], [[1276, 1276], "mapped", [1277]], [[1277, 1277], "valid"], [[1278, 1278], "mapped", [1279]], [[1279, 1279], "valid"], [[1280, 1280], "mapped", [1281]], [[1281, 1281], "valid"], [[1282, 1282], "mapped", [1283]], [[1283, 1283], "valid"], [[1284, 1284], "mapped", [1285]], [[1285, 1285], "valid"], [[1286, 1286], "mapped", [1287]], [[1287, 1287], "valid"], [[1288, 1288], "mapped", [1289]], [[1289, 1289], "valid"], [[1290, 1290], "mapped", [1291]], [[1291, 1291], "valid"], [[1292, 1292], "mapped", [1293]], [[1293, 1293], "valid"], [[1294, 1294], "mapped", [1295]], [[1295, 1295], "valid"], [[1296, 1296], "mapped", [1297]], [[1297, 1297], "valid"], [[1298, 1298], "mapped", [1299]], [[1299, 1299], "valid"], [[1300, 1300], "mapped", [1301]], [[1301, 1301], "valid"], [[1302, 1302], "mapped", [1303]], [[1303, 1303], "valid"], [[1304, 1304], "mapped", [1305]], [[1305, 1305], "valid"], [[1306, 1306], "mapped", [1307]], [[1307, 1307], "valid"], [[1308, 1308], "mapped", [1309]], [[1309, 1309], "valid"], [[1310, 1310], "mapped", [1311]], [[1311, 1311], "valid"], [[1312, 1312], "mapped", [1313]], [[1313, 1313], "valid"], [[1314, 1314], "mapped", [1315]], [[1315, 1315], "valid"], [[1316, 1316], "mapped", [1317]], [[1317, 1317], "valid"], [[1318, 1318], "mapped", [1319]], [[1319, 1319], "valid"], [[1320, 1320], "mapped", [1321]], [[1321, 1321], "valid"], [[1322, 1322], "mapped", [1323]], [[1323, 1323], "valid"], [[1324, 1324], "mapped", [1325]], [[1325, 1325], "valid"], [[1326, 1326], "mapped", [1327]], [[1327, 1327], "valid"], [[1328, 1328], "disallowed"], [[1329, 1329], "mapped", [1377]], [[1330, 1330], "mapped", [1378]], [[1331, 1331], "mapped", [1379]], [[1332, 1332], "mapped", [1380]], [[1333, 1333], "mapped", [1381]], [[1334, 1334], "mapped", [1382]], [[1335, 1335], "mapped", [1383]], [[1336, 1336], "mapped", [1384]], [[1337, 1337], "mapped", [1385]], [[1338, 1338], "mapped", [1386]], [[1339, 1339], "mapped", [1387]], [[1340, 1340], "mapped", [1388]], [[1341, 1341], "mapped", [1389]], [[1342, 1342], "mapped", [1390]], [[1343, 1343], "mapped", [1391]], [[1344, 1344], "mapped", [1392]], [[1345, 1345], "mapped", [1393]], [[1346, 1346], "mapped", [1394]], [[1347, 1347], "mapped", [1395]], [[1348, 1348], "mapped", [1396]], [[1349, 1349], "mapped", [1397]], [[1350, 1350], "mapped", [1398]], [[1351, 1351], "mapped", [1399]], [[1352, 1352], "mapped", [1400]], [[1353, 1353], "mapped", [1401]], [[1354, 1354], "mapped", [1402]], [[1355, 1355], "mapped", [1403]], [[1356, 1356], "mapped", [1404]], [[1357, 1357], "mapped", [1405]], [[1358, 1358], "mapped", [1406]], [[1359, 1359], "mapped", [1407]], [[1360, 1360], "mapped", [1408]], [[1361, 1361], "mapped", [1409]], [[1362, 1362], "mapped", [1410]], [[1363, 1363], "mapped", [1411]], [[1364, 1364], "mapped", [1412]], [[1365, 1365], "mapped", [1413]], [[1366, 1366], "mapped", [1414]], [[1367, 1368], "disallowed"], [[1369, 1369], "valid"], [[1370, 1375], "valid", [], "NV8"], [[1376, 1376], "disallowed"], [[1377, 1414], "valid"], [[1415, 1415], "mapped", [1381, 1410]], [[1416, 1416], "disallowed"], [[1417, 1417], "valid", [], "NV8"], [[1418, 1418], "valid", [], "NV8"], [[1419, 1420], "disallowed"], [[1421, 1422], "valid", [], "NV8"], [[1423, 1423], "valid", [], "NV8"], [[1424, 1424], "disallowed"], [[1425, 1441], "valid"], [[1442, 1442], "valid"], [[1443, 1455], "valid"], [[1456, 1465], "valid"], [[1466, 1466], "valid"], [[1467, 1469], "valid"], [[1470, 1470], "valid", [], "NV8"], [[1471, 1471], "valid"], [[1472, 1472], "valid", [], "NV8"], [[1473, 1474], "valid"], [[1475, 1475], "valid", [], "NV8"], [[1476, 1476], "valid"], [[1477, 1477], "valid"], [[1478, 1478], "valid", [], "NV8"], [[1479, 1479], "valid"], [[1480, 1487], "disallowed"], [[1488, 1514], "valid"], [[1515, 1519], "disallowed"], [[1520, 1524], "valid"], [[1525, 1535], "disallowed"], [[1536, 1539], "disallowed"], [[1540, 1540], "disallowed"], [[1541, 1541], "disallowed"], [[1542, 1546], "valid", [], "NV8"], [[1547, 1547], "valid", [], "NV8"], [[1548, 1548], "valid", [], "NV8"], [[1549, 1551], "valid", [], "NV8"], [[1552, 1557], "valid"], [[1558, 1562], "valid"], [[1563, 1563], "valid", [], "NV8"], [[1564, 1564], "disallowed"], [[1565, 1565], "disallowed"], [[1566, 1566], "valid", [], "NV8"], [[1567, 1567], "valid", [], "NV8"], [[1568, 1568], "valid"], [[1569, 1594], "valid"], [[1595, 1599], "valid"], [[1600, 1600], "valid", [], "NV8"], [[1601, 1618], "valid"], [[1619, 1621], "valid"], [[1622, 1624], "valid"], [[1625, 1630], "valid"], [[1631, 1631], "valid"], [[1632, 1641], "valid"], [[1642, 1645], "valid", [], "NV8"], [[1646, 1647], "valid"], [[1648, 1652], "valid"], [[1653, 1653], "mapped", [1575, 1652]], [[1654, 1654], "mapped", [1608, 1652]], [[1655, 1655], "mapped", [1735, 1652]], [[1656, 1656], "mapped", [1610, 1652]], [[1657, 1719], "valid"], [[1720, 1721], "valid"], [[1722, 1726], "valid"], [[1727, 1727], "valid"], [[1728, 1742], "valid"], [[1743, 1743], "valid"], [[1744, 1747], "valid"], [[1748, 1748], "valid", [], "NV8"], [[1749, 1756], "valid"], [[1757, 1757], "disallowed"], [[1758, 1758], "valid", [], "NV8"], [[1759, 1768], "valid"], [[1769, 1769], "valid", [], "NV8"], [[1770, 1773], "valid"], [[1774, 1775], "valid"], [[1776, 1785], "valid"], [[1786, 1790], "valid"], [[1791, 1791], "valid"], [[1792, 1805], "valid", [], "NV8"], [[1806, 1806], "disallowed"], [[1807, 1807], "disallowed"], [[1808, 1836], "valid"], [[1837, 1839], "valid"], [[1840, 1866], "valid"], [[1867, 1868], "disallowed"], [[1869, 1871], "valid"], [[1872, 1901], "valid"], [[1902, 1919], "valid"], [[1920, 1968], "valid"], [[1969, 1969], "valid"], [[1970, 1983], "disallowed"], [[1984, 2037], "valid"], [[2038, 2042], "valid", [], "NV8"], [[2043, 2047], "disallowed"], [[2048, 2093], "valid"], [[2094, 2095], "disallowed"], [[2096, 2110], "valid", [], "NV8"], [[2111, 2111], "disallowed"], [[2112, 2139], "valid"], [[2140, 2141], "disallowed"], [[2142, 2142], "valid", [], "NV8"], [[2143, 2207], "disallowed"], [[2208, 2208], "valid"], [[2209, 2209], "valid"], [[2210, 2220], "valid"], [[2221, 2226], "valid"], [[2227, 2228], "valid"], [[2229, 2274], "disallowed"], [[2275, 2275], "valid"], [[2276, 2302], "valid"], [[2303, 2303], "valid"], [[2304, 2304], "valid"], [[2305, 2307], "valid"], [[2308, 2308], "valid"], [[2309, 2361], "valid"], [[2362, 2363], "valid"], [[2364, 2381], "valid"], [[2382, 2382], "valid"], [[2383, 2383], "valid"], [[2384, 2388], "valid"], [[2389, 2389], "valid"], [[2390, 2391], "valid"], [[2392, 2392], "mapped", [2325, 2364]], [[2393, 2393], "mapped", [2326, 2364]], [[2394, 2394], "mapped", [2327, 2364]], [[2395, 2395], "mapped", [2332, 2364]], [[2396, 2396], "mapped", [2337, 2364]], [[2397, 2397], "mapped", [2338, 2364]], [[2398, 2398], "mapped", [2347, 2364]], [[2399, 2399], "mapped", [2351, 2364]], [[2400, 2403], "valid"], [[2404, 2405], "valid", [], "NV8"], [[2406, 2415], "valid"], [[2416, 2416], "valid", [], "NV8"], [[2417, 2418], "valid"], [[2419, 2423], "valid"], [[2424, 2424], "valid"], [[2425, 2426], "valid"], [[2427, 2428], "valid"], [[2429, 2429], "valid"], [[2430, 2431], "valid"], [[2432, 2432], "valid"], [[2433, 2435], "valid"], [[2436, 2436], "disallowed"], [[2437, 2444], "valid"], [[2445, 2446], "disallowed"], [[2447, 2448], "valid"], [[2449, 2450], "disallowed"], [[2451, 2472], "valid"], [[2473, 2473], "disallowed"], [[2474, 2480], "valid"], [[2481, 2481], "disallowed"], [[2482, 2482], "valid"], [[2483, 2485], "disallowed"], [[2486, 2489], "valid"], [[2490, 2491], "disallowed"], [[2492, 2492], "valid"], [[2493, 2493], "valid"], [[2494, 2500], "valid"], [[2501, 2502], "disallowed"], [[2503, 2504], "valid"], [[2505, 2506], "disallowed"], [[2507, 2509], "valid"], [[2510, 2510], "valid"], [[2511, 2518], "disallowed"], [[2519, 2519], "valid"], [[2520, 2523], "disallowed"], [[2524, 2524], "mapped", [2465, 2492]], [[2525, 2525], "mapped", [2466, 2492]], [[2526, 2526], "disallowed"], [[2527, 2527], "mapped", [2479, 2492]], [[2528, 2531], "valid"], [[2532, 2533], "disallowed"], [[2534, 2545], "valid"], [[2546, 2554], "valid", [], "NV8"], [[2555, 2555], "valid", [], "NV8"], [[2556, 2560], "disallowed"], [[2561, 2561], "valid"], [[2562, 2562], "valid"], [[2563, 2563], "valid"], [[2564, 2564], "disallowed"], [[2565, 2570], "valid"], [[2571, 2574], "disallowed"], [[2575, 2576], "valid"], [[2577, 2578], "disallowed"], [[2579, 2600], "valid"], [[2601, 2601], "disallowed"], [[2602, 2608], "valid"], [[2609, 2609], "disallowed"], [[2610, 2610], "valid"], [[2611, 2611], "mapped", [2610, 2620]], [[2612, 2612], "disallowed"], [[2613, 2613], "valid"], [[2614, 2614], "mapped", [2616, 2620]], [[2615, 2615], "disallowed"], [[2616, 2617], "valid"], [[2618, 2619], "disallowed"], [[2620, 2620], "valid"], [[2621, 2621], "disallowed"], [[2622, 2626], "valid"], [[2627, 2630], "disallowed"], [[2631, 2632], "valid"], [[2633, 2634], "disallowed"], [[2635, 2637], "valid"], [[2638, 2640], "disallowed"], [[2641, 2641], "valid"], [[2642, 2648], "disallowed"], [[2649, 2649], "mapped", [2582, 2620]], [[2650, 2650], "mapped", [2583, 2620]], [[2651, 2651], "mapped", [2588, 2620]], [[2652, 2652], "valid"], [[2653, 2653], "disallowed"], [[2654, 2654], "mapped", [2603, 2620]], [[2655, 2661], "disallowed"], [[2662, 2676], "valid"], [[2677, 2677], "valid"], [[2678, 2688], "disallowed"], [[2689, 2691], "valid"], [[2692, 2692], "disallowed"], [[2693, 2699], "valid"], [[2700, 2700], "valid"], [[2701, 2701], "valid"], [[2702, 2702], "disallowed"], [[2703, 2705], "valid"], [[2706, 2706], "disallowed"], [[2707, 2728], "valid"], [[2729, 2729], "disallowed"], [[2730, 2736], "valid"], [[2737, 2737], "disallowed"], [[2738, 2739], "valid"], [[2740, 2740], "disallowed"], [[2741, 2745], "valid"], [[2746, 2747], "disallowed"], [[2748, 2757], "valid"], [[2758, 2758], "disallowed"], [[2759, 2761], "valid"], [[2762, 2762], "disallowed"], [[2763, 2765], "valid"], [[2766, 2767], "disallowed"], [[2768, 2768], "valid"], [[2769, 2783], "disallowed"], [[2784, 2784], "valid"], [[2785, 2787], "valid"], [[2788, 2789], "disallowed"], [[2790, 2799], "valid"], [[2800, 2800], "valid", [], "NV8"], [[2801, 2801], "valid", [], "NV8"], [[2802, 2808], "disallowed"], [[2809, 2809], "valid"], [[2810, 2816], "disallowed"], [[2817, 2819], "valid"], [[2820, 2820], "disallowed"], [[2821, 2828], "valid"], [[2829, 2830], "disallowed"], [[2831, 2832], "valid"], [[2833, 2834], "disallowed"], [[2835, 2856], "valid"], [[2857, 2857], "disallowed"], [[2858, 2864], "valid"], [[2865, 2865], "disallowed"], [[2866, 2867], "valid"], [[2868, 2868], "disallowed"], [[2869, 2869], "valid"], [[2870, 2873], "valid"], [[2874, 2875], "disallowed"], [[2876, 2883], "valid"], [[2884, 2884], "valid"], [[2885, 2886], "disallowed"], [[2887, 2888], "valid"], [[2889, 2890], "disallowed"], [[2891, 2893], "valid"], [[2894, 2901], "disallowed"], [[2902, 2903], "valid"], [[2904, 2907], "disallowed"], [[2908, 2908], "mapped", [2849, 2876]], [[2909, 2909], "mapped", [2850, 2876]], [[2910, 2910], "disallowed"], [[2911, 2913], "valid"], [[2914, 2915], "valid"], [[2916, 2917], "disallowed"], [[2918, 2927], "valid"], [[2928, 2928], "valid", [], "NV8"], [[2929, 2929], "valid"], [[2930, 2935], "valid", [], "NV8"], [[2936, 2945], "disallowed"], [[2946, 2947], "valid"], [[2948, 2948], "disallowed"], [[2949, 2954], "valid"], [[2955, 2957], "disallowed"], [[2958, 2960], "valid"], [[2961, 2961], "disallowed"], [[2962, 2965], "valid"], [[2966, 2968], "disallowed"], [[2969, 2970], "valid"], [[2971, 2971], "disallowed"], [[2972, 2972], "valid"], [[2973, 2973], "disallowed"], [[2974, 2975], "valid"], [[2976, 2978], "disallowed"], [[2979, 2980], "valid"], [[2981, 2983], "disallowed"], [[2984, 2986], "valid"], [[2987, 2989], "disallowed"], [[2990, 2997], "valid"], [[2998, 2998], "valid"], [[2999, 3001], "valid"], [[3002, 3005], "disallowed"], [[3006, 3010], "valid"], [[3011, 3013], "disallowed"], [[3014, 3016], "valid"], [[3017, 3017], "disallowed"], [[3018, 3021], "valid"], [[3022, 3023], "disallowed"], [[3024, 3024], "valid"], [[3025, 3030], "disallowed"], [[3031, 3031], "valid"], [[3032, 3045], "disallowed"], [[3046, 3046], "valid"], [[3047, 3055], "valid"], [[3056, 3058], "valid", [], "NV8"], [[3059, 3066], "valid", [], "NV8"], [[3067, 3071], "disallowed"], [[3072, 3072], "valid"], [[3073, 3075], "valid"], [[3076, 3076], "disallowed"], [[3077, 3084], "valid"], [[3085, 3085], "disallowed"], [[3086, 3088], "valid"], [[3089, 3089], "disallowed"], [[3090, 3112], "valid"], [[3113, 3113], "disallowed"], [[3114, 3123], "valid"], [[3124, 3124], "valid"], [[3125, 3129], "valid"], [[3130, 3132], "disallowed"], [[3133, 3133], "valid"], [[3134, 3140], "valid"], [[3141, 3141], "disallowed"], [[3142, 3144], "valid"], [[3145, 3145], "disallowed"], [[3146, 3149], "valid"], [[3150, 3156], "disallowed"], [[3157, 3158], "valid"], [[3159, 3159], "disallowed"], [[3160, 3161], "valid"], [[3162, 3162], "valid"], [[3163, 3167], "disallowed"], [[3168, 3169], "valid"], [[3170, 3171], "valid"], [[3172, 3173], "disallowed"], [[3174, 3183], "valid"], [[3184, 3191], "disallowed"], [[3192, 3199], "valid", [], "NV8"], [[3200, 3200], "disallowed"], [[3201, 3201], "valid"], [[3202, 3203], "valid"], [[3204, 3204], "disallowed"], [[3205, 3212], "valid"], [[3213, 3213], "disallowed"], [[3214, 3216], "valid"], [[3217, 3217], "disallowed"], [[3218, 3240], "valid"], [[3241, 3241], "disallowed"], [[3242, 3251], "valid"], [[3252, 3252], "disallowed"], [[3253, 3257], "valid"], [[3258, 3259], "disallowed"], [[3260, 3261], "valid"], [[3262, 3268], "valid"], [[3269, 3269], "disallowed"], [[3270, 3272], "valid"], [[3273, 3273], "disallowed"], [[3274, 3277], "valid"], [[3278, 3284], "disallowed"], [[3285, 3286], "valid"], [[3287, 3293], "disallowed"], [[3294, 3294], "valid"], [[3295, 3295], "disallowed"], [[3296, 3297], "valid"], [[3298, 3299], "valid"], [[3300, 3301], "disallowed"], [[3302, 3311], "valid"], [[3312, 3312], "disallowed"], [[3313, 3314], "valid"], [[3315, 3328], "disallowed"], [[3329, 3329], "valid"], [[3330, 3331], "valid"], [[3332, 3332], "disallowed"], [[3333, 3340], "valid"], [[3341, 3341], "disallowed"], [[3342, 3344], "valid"], [[3345, 3345], "disallowed"], [[3346, 3368], "valid"], [[3369, 3369], "valid"], [[3370, 3385], "valid"], [[3386, 3386], "valid"], [[3387, 3388], "disallowed"], [[3389, 3389], "valid"], [[3390, 3395], "valid"], [[3396, 3396], "valid"], [[3397, 3397], "disallowed"], [[3398, 3400], "valid"], [[3401, 3401], "disallowed"], [[3402, 3405], "valid"], [[3406, 3406], "valid"], [[3407, 3414], "disallowed"], [[3415, 3415], "valid"], [[3416, 3422], "disallowed"], [[3423, 3423], "valid"], [[3424, 3425], "valid"], [[3426, 3427], "valid"], [[3428, 3429], "disallowed"], [[3430, 3439], "valid"], [[3440, 3445], "valid", [], "NV8"], [[3446, 3448], "disallowed"], [[3449, 3449], "valid", [], "NV8"], [[3450, 3455], "valid"], [[3456, 3457], "disallowed"], [[3458, 3459], "valid"], [[3460, 3460], "disallowed"], [[3461, 3478], "valid"], [[3479, 3481], "disallowed"], [[3482, 3505], "valid"], [[3506, 3506], "disallowed"], [[3507, 3515], "valid"], [[3516, 3516], "disallowed"], [[3517, 3517], "valid"], [[3518, 3519], "disallowed"], [[3520, 3526], "valid"], [[3527, 3529], "disallowed"], [[3530, 3530], "valid"], [[3531, 3534], "disallowed"], [[3535, 3540], "valid"], [[3541, 3541], "disallowed"], [[3542, 3542], "valid"], [[3543, 3543], "disallowed"], [[3544, 3551], "valid"], [[3552, 3557], "disallowed"], [[3558, 3567], "valid"], [[3568, 3569], "disallowed"], [[3570, 3571], "valid"], [[3572, 3572], "valid", [], "NV8"], [[3573, 3584], "disallowed"], [[3585, 3634], "valid"], [[3635, 3635], "mapped", [3661, 3634]], [[3636, 3642], "valid"], [[3643, 3646], "disallowed"], [[3647, 3647], "valid", [], "NV8"], [[3648, 3662], "valid"], [[3663, 3663], "valid", [], "NV8"], [[3664, 3673], "valid"], [[3674, 3675], "valid", [], "NV8"], [[3676, 3712], "disallowed"], [[3713, 3714], "valid"], [[3715, 3715], "disallowed"], [[3716, 3716], "valid"], [[3717, 3718], "disallowed"], [[3719, 3720], "valid"], [[3721, 3721], "disallowed"], [[3722, 3722], "valid"], [[3723, 3724], "disallowed"], [[3725, 3725], "valid"], [[3726, 3731], "disallowed"], [[3732, 3735], "valid"], [[3736, 3736], "disallowed"], [[3737, 3743], "valid"], [[3744, 3744], "disallowed"], [[3745, 3747], "valid"], [[3748, 3748], "disallowed"], [[3749, 3749], "valid"], [[3750, 3750], "disallowed"], [[3751, 3751], "valid"], [[3752, 3753], "disallowed"], [[3754, 3755], "valid"], [[3756, 3756], "disallowed"], [[3757, 3762], "valid"], [[3763, 3763], "mapped", [3789, 3762]], [[3764, 3769], "valid"], [[3770, 3770], "disallowed"], [[3771, 3773], "valid"], [[3774, 3775], "disallowed"], [[3776, 3780], "valid"], [[3781, 3781], "disallowed"], [[3782, 3782], "valid"], [[3783, 3783], "disallowed"], [[3784, 3789], "valid"], [[3790, 3791], "disallowed"], [[3792, 3801], "valid"], [[3802, 3803], "disallowed"], [[3804, 3804], "mapped", [3755, 3737]], [[3805, 3805], "mapped", [3755, 3745]], [[3806, 3807], "valid"], [[3808, 3839], "disallowed"], [[3840, 3840], "valid"], [[3841, 3850], "valid", [], "NV8"], [[3851, 3851], "valid"], [[3852, 3852], "mapped", [3851]], [[3853, 3863], "valid", [], "NV8"], [[3864, 3865], "valid"], [[3866, 3871], "valid", [], "NV8"], [[3872, 3881], "valid"], [[3882, 3892], "valid", [], "NV8"], [[3893, 3893], "valid"], [[3894, 3894], "valid", [], "NV8"], [[3895, 3895], "valid"], [[3896, 3896], "valid", [], "NV8"], [[3897, 3897], "valid"], [[3898, 3901], "valid", [], "NV8"], [[3902, 3906], "valid"], [[3907, 3907], "mapped", [3906, 4023]], [[3908, 3911], "valid"], [[3912, 3912], "disallowed"], [[3913, 3916], "valid"], [[3917, 3917], "mapped", [3916, 4023]], [[3918, 3921], "valid"], [[3922, 3922], "mapped", [3921, 4023]], [[3923, 3926], "valid"], [[3927, 3927], "mapped", [3926, 4023]], [[3928, 3931], "valid"], [[3932, 3932], "mapped", [3931, 4023]], [[3933, 3944], "valid"], [[3945, 3945], "mapped", [3904, 4021]], [[3946, 3946], "valid"], [[3947, 3948], "valid"], [[3949, 3952], "disallowed"], [[3953, 3954], "valid"], [[3955, 3955], "mapped", [3953, 3954]], [[3956, 3956], "valid"], [[3957, 3957], "mapped", [3953, 3956]], [[3958, 3958], "mapped", [4018, 3968]], [[3959, 3959], "mapped", [4018, 3953, 3968]], [[3960, 3960], "mapped", [4019, 3968]], [[3961, 3961], "mapped", [4019, 3953, 3968]], [[3962, 3968], "valid"], [[3969, 3969], "mapped", [3953, 3968]], [[3970, 3972], "valid"], [[3973, 3973], "valid", [], "NV8"], [[3974, 3979], "valid"], [[3980, 3983], "valid"], [[3984, 3986], "valid"], [[3987, 3987], "mapped", [3986, 4023]], [[3988, 3989], "valid"], [[3990, 3990], "valid"], [[3991, 3991], "valid"], [[3992, 3992], "disallowed"], [[3993, 3996], "valid"], [[3997, 3997], "mapped", [3996, 4023]], [[3998, 4001], "valid"], [[4002, 4002], "mapped", [4001, 4023]], [[4003, 4006], "valid"], [[4007, 4007], "mapped", [4006, 4023]], [[4008, 4011], "valid"], [[4012, 4012], "mapped", [4011, 4023]], [[4013, 4013], "valid"], [[4014, 4016], "valid"], [[4017, 4023], "valid"], [[4024, 4024], "valid"], [[4025, 4025], "mapped", [3984, 4021]], [[4026, 4028], "valid"], [[4029, 4029], "disallowed"], [[4030, 4037], "valid", [], "NV8"], [[4038, 4038], "valid"], [[4039, 4044], "valid", [], "NV8"], [[4045, 4045], "disallowed"], [[4046, 4046], "valid", [], "NV8"], [[4047, 4047], "valid", [], "NV8"], [[4048, 4049], "valid", [], "NV8"], [[4050, 4052], "valid", [], "NV8"], [[4053, 4056], "valid", [], "NV8"], [[4057, 4058], "valid", [], "NV8"], [[4059, 4095], "disallowed"], [[4096, 4129], "valid"], [[4130, 4130], "valid"], [[4131, 4135], "valid"], [[4136, 4136], "valid"], [[4137, 4138], "valid"], [[4139, 4139], "valid"], [[4140, 4146], "valid"], [[4147, 4149], "valid"], [[4150, 4153], "valid"], [[4154, 4159], "valid"], [[4160, 4169], "valid"], [[4170, 4175], "valid", [], "NV8"], [[4176, 4185], "valid"], [[4186, 4249], "valid"], [[4250, 4253], "valid"], [[4254, 4255], "valid", [], "NV8"], [[4256, 4293], "disallowed"], [[4294, 4294], "disallowed"], [[4295, 4295], "mapped", [11559]], [[4296, 4300], "disallowed"], [[4301, 4301], "mapped", [11565]], [[4302, 4303], "disallowed"], [[4304, 4342], "valid"], [[4343, 4344], "valid"], [[4345, 4346], "valid"], [[4347, 4347], "valid", [], "NV8"], [[4348, 4348], "mapped", [4316]], [[4349, 4351], "valid"], [[4352, 4441], "valid", [], "NV8"], [[4442, 4446], "valid", [], "NV8"], [[4447, 4448], "disallowed"], [[4449, 4514], "valid", [], "NV8"], [[4515, 4519], "valid", [], "NV8"], [[4520, 4601], "valid", [], "NV8"], [[4602, 4607], "valid", [], "NV8"], [[4608, 4614], "valid"], [[4615, 4615], "valid"], [[4616, 4678], "valid"], [[4679, 4679], "valid"], [[4680, 4680], "valid"], [[4681, 4681], "disallowed"], [[4682, 4685], "valid"], [[4686, 4687], "disallowed"], [[4688, 4694], "valid"], [[4695, 4695], "disallowed"], [[4696, 4696], "valid"], [[4697, 4697], "disallowed"], [[4698, 4701], "valid"], [[4702, 4703], "disallowed"], [[4704, 4742], "valid"], [[4743, 4743], "valid"], [[4744, 4744], "valid"], [[4745, 4745], "disallowed"], [[4746, 4749], "valid"], [[4750, 4751], "disallowed"], [[4752, 4782], "valid"], [[4783, 4783], "valid"], [[4784, 4784], "valid"], [[4785, 4785], "disallowed"], [[4786, 4789], "valid"], [[4790, 4791], "disallowed"], [[4792, 4798], "valid"], [[4799, 4799], "disallowed"], [[4800, 4800], "valid"], [[4801, 4801], "disallowed"], [[4802, 4805], "valid"], [[4806, 4807], "disallowed"], [[4808, 4814], "valid"], [[4815, 4815], "valid"], [[4816, 4822], "valid"], [[4823, 4823], "disallowed"], [[4824, 4846], "valid"], [[4847, 4847], "valid"], [[4848, 4878], "valid"], [[4879, 4879], "valid"], [[4880, 4880], "valid"], [[4881, 4881], "disallowed"], [[4882, 4885], "valid"], [[4886, 4887], "disallowed"], [[4888, 4894], "valid"], [[4895, 4895], "valid"], [[4896, 4934], "valid"], [[4935, 4935], "valid"], [[4936, 4954], "valid"], [[4955, 4956], "disallowed"], [[4957, 4958], "valid"], [[4959, 4959], "valid"], [[4960, 4960], "valid", [], "NV8"], [[4961, 4988], "valid", [], "NV8"], [[4989, 4991], "disallowed"], [[4992, 5007], "valid"], [[5008, 5017], "valid", [], "NV8"], [[5018, 5023], "disallowed"], [[5024, 5108], "valid"], [[5109, 5109], "valid"], [[5110, 5111], "disallowed"], [[5112, 5112], "mapped", [5104]], [[5113, 5113], "mapped", [5105]], [[5114, 5114], "mapped", [5106]], [[5115, 5115], "mapped", [5107]], [[5116, 5116], "mapped", [5108]], [[5117, 5117], "mapped", [5109]], [[5118, 5119], "disallowed"], [[5120, 5120], "valid", [], "NV8"], [[5121, 5740], "valid"], [[5741, 5742], "valid", [], "NV8"], [[5743, 5750], "valid"], [[5751, 5759], "valid"], [[5760, 5760], "disallowed"], [[5761, 5786], "valid"], [[5787, 5788], "valid", [], "NV8"], [[5789, 5791], "disallowed"], [[5792, 5866], "valid"], [[5867, 5872], "valid", [], "NV8"], [[5873, 5880], "valid"], [[5881, 5887], "disallowed"], [[5888, 5900], "valid"], [[5901, 5901], "disallowed"], [[5902, 5908], "valid"], [[5909, 5919], "disallowed"], [[5920, 5940], "valid"], [[5941, 5942], "valid", [], "NV8"], [[5943, 5951], "disallowed"], [[5952, 5971], "valid"], [[5972, 5983], "disallowed"], [[5984, 5996], "valid"], [[5997, 5997], "disallowed"], [[5998, 6e3], "valid"], [[6001, 6001], "disallowed"], [[6002, 6003], "valid"], [[6004, 6015], "disallowed"], [[6016, 6067], "valid"], [[6068, 6069], "disallowed"], [[6070, 6099], "valid"], [[6100, 6102], "valid", [], "NV8"], [[6103, 6103], "valid"], [[6104, 6107], "valid", [], "NV8"], [[6108, 6108], "valid"], [[6109, 6109], "valid"], [[6110, 6111], "disallowed"], [[6112, 6121], "valid"], [[6122, 6127], "disallowed"], [[6128, 6137], "valid", [], "NV8"], [[6138, 6143], "disallowed"], [[6144, 6149], "valid", [], "NV8"], [[6150, 6150], "disallowed"], [[6151, 6154], "valid", [], "NV8"], [[6155, 6157], "ignored"], [[6158, 6158], "disallowed"], [[6159, 6159], "disallowed"], [[6160, 6169], "valid"], [[6170, 6175], "disallowed"], [[6176, 6263], "valid"], [[6264, 6271], "disallowed"], [[6272, 6313], "valid"], [[6314, 6314], "valid"], [[6315, 6319], "disallowed"], [[6320, 6389], "valid"], [[6390, 6399], "disallowed"], [[6400, 6428], "valid"], [[6429, 6430], "valid"], [[6431, 6431], "disallowed"], [[6432, 6443], "valid"], [[6444, 6447], "disallowed"], [[6448, 6459], "valid"], [[6460, 6463], "disallowed"], [[6464, 6464], "valid", [], "NV8"], [[6465, 6467], "disallowed"], [[6468, 6469], "valid", [], "NV8"], [[6470, 6509], "valid"], [[6510, 6511], "disallowed"], [[6512, 6516], "valid"], [[6517, 6527], "disallowed"], [[6528, 6569], "valid"], [[6570, 6571], "valid"], [[6572, 6575], "disallowed"], [[6576, 6601], "valid"], [[6602, 6607], "disallowed"], [[6608, 6617], "valid"], [[6618, 6618], "valid", [], "XV8"], [[6619, 6621], "disallowed"], [[6622, 6623], "valid", [], "NV8"], [[6624, 6655], "valid", [], "NV8"], [[6656, 6683], "valid"], [[6684, 6685], "disallowed"], [[6686, 6687], "valid", [], "NV8"], [[6688, 6750], "valid"], [[6751, 6751], "disallowed"], [[6752, 6780], "valid"], [[6781, 6782], "disallowed"], [[6783, 6793], "valid"], [[6794, 6799], "disallowed"], [[6800, 6809], "valid"], [[6810, 6815], "disallowed"], [[6816, 6822], "valid", [], "NV8"], [[6823, 6823], "valid"], [[6824, 6829], "valid", [], "NV8"], [[6830, 6831], "disallowed"], [[6832, 6845], "valid"], [[6846, 6846], "valid", [], "NV8"], [[6847, 6911], "disallowed"], [[6912, 6987], "valid"], [[6988, 6991], "disallowed"], [[6992, 7001], "valid"], [[7002, 7018], "valid", [], "NV8"], [[7019, 7027], "valid"], [[7028, 7036], "valid", [], "NV8"], [[7037, 7039], "disallowed"], [[7040, 7082], "valid"], [[7083, 7085], "valid"], [[7086, 7097], "valid"], [[7098, 7103], "valid"], [[7104, 7155], "valid"], [[7156, 7163], "disallowed"], [[7164, 7167], "valid", [], "NV8"], [[7168, 7223], "valid"], [[7224, 7226], "disallowed"], [[7227, 7231], "valid", [], "NV8"], [[7232, 7241], "valid"], [[7242, 7244], "disallowed"], [[7245, 7293], "valid"], [[7294, 7295], "valid", [], "NV8"], [[7296, 7359], "disallowed"], [[7360, 7367], "valid", [], "NV8"], [[7368, 7375], "disallowed"], [[7376, 7378], "valid"], [[7379, 7379], "valid", [], "NV8"], [[7380, 7410], "valid"], [[7411, 7414], "valid"], [[7415, 7415], "disallowed"], [[7416, 7417], "valid"], [[7418, 7423], "disallowed"], [[7424, 7467], "valid"], [[7468, 7468], "mapped", [97]], [[7469, 7469], "mapped", [230]], [[7470, 7470], "mapped", [98]], [[7471, 7471], "valid"], [[7472, 7472], "mapped", [100]], [[7473, 7473], "mapped", [101]], [[7474, 7474], "mapped", [477]], [[7475, 7475], "mapped", [103]], [[7476, 7476], "mapped", [104]], [[7477, 7477], "mapped", [105]], [[7478, 7478], "mapped", [106]], [[7479, 7479], "mapped", [107]], [[7480, 7480], "mapped", [108]], [[7481, 7481], "mapped", [109]], [[7482, 7482], "mapped", [110]], [[7483, 7483], "valid"], [[7484, 7484], "mapped", [111]], [[7485, 7485], "mapped", [547]], [[7486, 7486], "mapped", [112]], [[7487, 7487], "mapped", [114]], [[7488, 7488], "mapped", [116]], [[7489, 7489], "mapped", [117]], [[7490, 7490], "mapped", [119]], [[7491, 7491], "mapped", [97]], [[7492, 7492], "mapped", [592]], [[7493, 7493], "mapped", [593]], [[7494, 7494], "mapped", [7426]], [[7495, 7495], "mapped", [98]], [[7496, 7496], "mapped", [100]], [[7497, 7497], "mapped", [101]], [[7498, 7498], "mapped", [601]], [[7499, 7499], "mapped", [603]], [[7500, 7500], "mapped", [604]], [[7501, 7501], "mapped", [103]], [[7502, 7502], "valid"], [[7503, 7503], "mapped", [107]], [[7504, 7504], "mapped", [109]], [[7505, 7505], "mapped", [331]], [[7506, 7506], "mapped", [111]], [[7507, 7507], "mapped", [596]], [[7508, 7508], "mapped", [7446]], [[7509, 7509], "mapped", [7447]], [[7510, 7510], "mapped", [112]], [[7511, 7511], "mapped", [116]], [[7512, 7512], "mapped", [117]], [[7513, 7513], "mapped", [7453]], [[7514, 7514], "mapped", [623]], [[7515, 7515], "mapped", [118]], [[7516, 7516], "mapped", [7461]], [[7517, 7517], "mapped", [946]], [[7518, 7518], "mapped", [947]], [[7519, 7519], "mapped", [948]], [[7520, 7520], "mapped", [966]], [[7521, 7521], "mapped", [967]], [[7522, 7522], "mapped", [105]], [[7523, 7523], "mapped", [114]], [[7524, 7524], "mapped", [117]], [[7525, 7525], "mapped", [118]], [[7526, 7526], "mapped", [946]], [[7527, 7527], "mapped", [947]], [[7528, 7528], "mapped", [961]], [[7529, 7529], "mapped", [966]], [[7530, 7530], "mapped", [967]], [[7531, 7531], "valid"], [[7532, 7543], "valid"], [[7544, 7544], "mapped", [1085]], [[7545, 7578], "valid"], [[7579, 7579], "mapped", [594]], [[7580, 7580], "mapped", [99]], [[7581, 7581], "mapped", [597]], [[7582, 7582], "mapped", [240]], [[7583, 7583], "mapped", [604]], [[7584, 7584], "mapped", [102]], [[7585, 7585], "mapped", [607]], [[7586, 7586], "mapped", [609]], [[7587, 7587], "mapped", [613]], [[7588, 7588], "mapped", [616]], [[7589, 7589], "mapped", [617]], [[7590, 7590], "mapped", [618]], [[7591, 7591], "mapped", [7547]], [[7592, 7592], "mapped", [669]], [[7593, 7593], "mapped", [621]], [[7594, 7594], "mapped", [7557]], [[7595, 7595], "mapped", [671]], [[7596, 7596], "mapped", [625]], [[7597, 7597], "mapped", [624]], [[7598, 7598], "mapped", [626]], [[7599, 7599], "mapped", [627]], [[7600, 7600], "mapped", [628]], [[7601, 7601], "mapped", [629]], [[7602, 7602], "mapped", [632]], [[7603, 7603], "mapped", [642]], [[7604, 7604], "mapped", [643]], [[7605, 7605], "mapped", [427]], [[7606, 7606], "mapped", [649]], [[7607, 7607], "mapped", [650]], [[7608, 7608], "mapped", [7452]], [[7609, 7609], "mapped", [651]], [[7610, 7610], "mapped", [652]], [[7611, 7611], "mapped", [122]], [[7612, 7612], "mapped", [656]], [[7613, 7613], "mapped", [657]], [[7614, 7614], "mapped", [658]], [[7615, 7615], "mapped", [952]], [[7616, 7619], "valid"], [[7620, 7626], "valid"], [[7627, 7654], "valid"], [[7655, 7669], "valid"], [[7670, 7675], "disallowed"], [[7676, 7676], "valid"], [[7677, 7677], "valid"], [[7678, 7679], "valid"], [[7680, 7680], "mapped", [7681]], [[7681, 7681], "valid"], [[7682, 7682], "mapped", [7683]], [[7683, 7683], "valid"], [[7684, 7684], "mapped", [7685]], [[7685, 7685], "valid"], [[7686, 7686], "mapped", [7687]], [[7687, 7687], "valid"], [[7688, 7688], "mapped", [7689]], [[7689, 7689], "valid"], [[7690, 7690], "mapped", [7691]], [[7691, 7691], "valid"], [[7692, 7692], "mapped", [7693]], [[7693, 7693], "valid"], [[7694, 7694], "mapped", [7695]], [[7695, 7695], "valid"], [[7696, 7696], "mapped", [7697]], [[7697, 7697], "valid"], [[7698, 7698], "mapped", [7699]], [[7699, 7699], "valid"], [[7700, 7700], "mapped", [7701]], [[7701, 7701], "valid"], [[7702, 7702], "mapped", [7703]], [[7703, 7703], "valid"], [[7704, 7704], "mapped", [7705]], [[7705, 7705], "valid"], [[7706, 7706], "mapped", [7707]], [[7707, 7707], "valid"], [[7708, 7708], "mapped", [7709]], [[7709, 7709], "valid"], [[7710, 7710], "mapped", [7711]], [[7711, 7711], "valid"], [[7712, 7712], "mapped", [7713]], [[7713, 7713], "valid"], [[7714, 7714], "mapped", [7715]], [[7715, 7715], "valid"], [[7716, 7716], "mapped", [7717]], [[7717, 7717], "valid"], [[7718, 7718], "mapped", [7719]], [[7719, 7719], "valid"], [[7720, 7720], "mapped", [7721]], [[7721, 7721], "valid"], [[7722, 7722], "mapped", [7723]], [[7723, 7723], "valid"], [[7724, 7724], "mapped", [7725]], [[7725, 7725], "valid"], [[7726, 7726], "mapped", [7727]], [[7727, 7727], "valid"], [[7728, 7728], "mapped", [7729]], [[7729, 7729], "valid"], [[7730, 7730], "mapped", [7731]], [[7731, 7731], "valid"], [[7732, 7732], "mapped", [7733]], [[7733, 7733], "valid"], [[7734, 7734], "mapped", [7735]], [[7735, 7735], "valid"], [[7736, 7736], "mapped", [7737]], [[7737, 7737], "valid"], [[7738, 7738], "mapped", [7739]], [[7739, 7739], "valid"], [[7740, 7740], "mapped", [7741]], [[7741, 7741], "valid"], [[7742, 7742], "mapped", [7743]], [[7743, 7743], "valid"], [[7744, 7744], "mapped", [7745]], [[7745, 7745], "valid"], [[7746, 7746], "mapped", [7747]], [[7747, 7747], "valid"], [[7748, 7748], "mapped", [7749]], [[7749, 7749], "valid"], [[7750, 7750], "mapped", [7751]], [[7751, 7751], "valid"], [[7752, 7752], "mapped", [7753]], [[7753, 7753], "valid"], [[7754, 7754], "mapped", [7755]], [[7755, 7755], "valid"], [[7756, 7756], "mapped", [7757]], [[7757, 7757], "valid"], [[7758, 7758], "mapped", [7759]], [[7759, 7759], "valid"], [[7760, 7760], "mapped", [7761]], [[7761, 7761], "valid"], [[7762, 7762], "mapped", [7763]], [[7763, 7763], "valid"], [[7764, 7764], "mapped", [7765]], [[7765, 7765], "valid"], [[7766, 7766], "mapped", [7767]], [[7767, 7767], "valid"], [[7768, 7768], "mapped", [7769]], [[7769, 7769], "valid"], [[7770, 7770], "mapped", [7771]], [[7771, 7771], "valid"], [[7772, 7772], "mapped", [7773]], [[7773, 7773], "valid"], [[7774, 7774], "mapped", [7775]], [[7775, 7775], "valid"], [[7776, 7776], "mapped", [7777]], [[7777, 7777], "valid"], [[7778, 7778], "mapped", [7779]], [[7779, 7779], "valid"], [[7780, 7780], "mapped", [7781]], [[7781, 7781], "valid"], [[7782, 7782], "mapped", [7783]], [[7783, 7783], "valid"], [[7784, 7784], "mapped", [7785]], [[7785, 7785], "valid"], [[7786, 7786], "mapped", [7787]], [[7787, 7787], "valid"], [[7788, 7788], "mapped", [7789]], [[7789, 7789], "valid"], [[7790, 7790], "mapped", [7791]], [[7791, 7791], "valid"], [[7792, 7792], "mapped", [7793]], [[7793, 7793], "valid"], [[7794, 7794], "mapped", [7795]], [[7795, 7795], "valid"], [[7796, 7796], "mapped", [7797]], [[7797, 7797], "valid"], [[7798, 7798], "mapped", [7799]], [[7799, 7799], "valid"], [[7800, 7800], "mapped", [7801]], [[7801, 7801], "valid"], [[7802, 7802], "mapped", [7803]], [[7803, 7803], "valid"], [[7804, 7804], "mapped", [7805]], [[7805, 7805], "valid"], [[7806, 7806], "mapped", [7807]], [[7807, 7807], "valid"], [[7808, 7808], "mapped", [7809]], [[7809, 7809], "valid"], [[7810, 7810], "mapped", [7811]], [[7811, 7811], "valid"], [[7812, 7812], "mapped", [7813]], [[7813, 7813], "valid"], [[7814, 7814], "mapped", [7815]], [[7815, 7815], "valid"], [[7816, 7816], "mapped", [7817]], [[7817, 7817], "valid"], [[7818, 7818], "mapped", [7819]], [[7819, 7819], "valid"], [[7820, 7820], "mapped", [7821]], [[7821, 7821], "valid"], [[7822, 7822], "mapped", [7823]], [[7823, 7823], "valid"], [[7824, 7824], "mapped", [7825]], [[7825, 7825], "valid"], [[7826, 7826], "mapped", [7827]], [[7827, 7827], "valid"], [[7828, 7828], "mapped", [7829]], [[7829, 7833], "valid"], [[7834, 7834], "mapped", [97, 702]], [[7835, 7835], "mapped", [7777]], [[7836, 7837], "valid"], [[7838, 7838], "mapped", [115, 115]], [[7839, 7839], "valid"], [[7840, 7840], "mapped", [7841]], [[7841, 7841], "valid"], [[7842, 7842], "mapped", [7843]], [[7843, 7843], "valid"], [[7844, 7844], "mapped", [7845]], [[7845, 7845], "valid"], [[7846, 7846], "mapped", [7847]], [[7847, 7847], "valid"], [[7848, 7848], "mapped", [7849]], [[7849, 7849], "valid"], [[7850, 7850], "mapped", [7851]], [[7851, 7851], "valid"], [[7852, 7852], "mapped", [7853]], [[7853, 7853], "valid"], [[7854, 7854], "mapped", [7855]], [[7855, 7855], "valid"], [[7856, 7856], "mapped", [7857]], [[7857, 7857], "valid"], [[7858, 7858], "mapped", [7859]], [[7859, 7859], "valid"], [[7860, 7860], "mapped", [7861]], [[7861, 7861], "valid"], [[7862, 7862], "mapped", [7863]], [[7863, 7863], "valid"], [[7864, 7864], "mapped", [7865]], [[7865, 7865], "valid"], [[7866, 7866], "mapped", [7867]], [[7867, 7867], "valid"], [[7868, 7868], "mapped", [7869]], [[7869, 7869], "valid"], [[7870, 7870], "mapped", [7871]], [[7871, 7871], "valid"], [[7872, 7872], "mapped", [7873]], [[7873, 7873], "valid"], [[7874, 7874], "mapped", [7875]], [[7875, 7875], "valid"], [[7876, 7876], "mapped", [7877]], [[7877, 7877], "valid"], [[7878, 7878], "mapped", [7879]], [[7879, 7879], "valid"], [[7880, 7880], "mapped", [7881]], [[7881, 7881], "valid"], [[7882, 7882], "mapped", [7883]], [[7883, 7883], "valid"], [[7884, 7884], "mapped", [7885]], [[7885, 7885], "valid"], [[7886, 7886], "mapped", [7887]], [[7887, 7887], "valid"], [[7888, 7888], "mapped", [7889]], [[7889, 7889], "valid"], [[7890, 7890], "mapped", [7891]], [[7891, 7891], "valid"], [[7892, 7892], "mapped", [7893]], [[7893, 7893], "valid"], [[7894, 7894], "mapped", [7895]], [[7895, 7895], "valid"], [[7896, 7896], "mapped", [7897]], [[7897, 7897], "valid"], [[7898, 7898], "mapped", [7899]], [[7899, 7899], "valid"], [[7900, 7900], "mapped", [7901]], [[7901, 7901], "valid"], [[7902, 7902], "mapped", [7903]], [[7903, 7903], "valid"], [[7904, 7904], "mapped", [7905]], [[7905, 7905], "valid"], [[7906, 7906], "mapped", [7907]], [[7907, 7907], "valid"], [[7908, 7908], "mapped", [7909]], [[7909, 7909], "valid"], [[7910, 7910], "mapped", [7911]], [[7911, 7911], "valid"], [[7912, 7912], "mapped", [7913]], [[7913, 7913], "valid"], [[7914, 7914], "mapped", [7915]], [[7915, 7915], "valid"], [[7916, 7916], "mapped", [7917]], [[7917, 7917], "valid"], [[7918, 7918], "mapped", [7919]], [[7919, 7919], "valid"], [[7920, 7920], "mapped", [7921]], [[7921, 7921], "valid"], [[7922, 7922], "mapped", [7923]], [[7923, 7923], "valid"], [[7924, 7924], "mapped", [7925]], [[7925, 7925], "valid"], [[7926, 7926], "mapped", [7927]], [[7927, 7927], "valid"], [[7928, 7928], "mapped", [7929]], [[7929, 7929], "valid"], [[7930, 7930], "mapped", [7931]], [[7931, 7931], "valid"], [[7932, 7932], "mapped", [7933]], [[7933, 7933], "valid"], [[7934, 7934], "mapped", [7935]], [[7935, 7935], "valid"], [[7936, 7943], "valid"], [[7944, 7944], "mapped", [7936]], [[7945, 7945], "mapped", [7937]], [[7946, 7946], "mapped", [7938]], [[7947, 7947], "mapped", [7939]], [[7948, 7948], "mapped", [7940]], [[7949, 7949], "mapped", [7941]], [[7950, 7950], "mapped", [7942]], [[7951, 7951], "mapped", [7943]], [[7952, 7957], "valid"], [[7958, 7959], "disallowed"], [[7960, 7960], "mapped", [7952]], [[7961, 7961], "mapped", [7953]], [[7962, 7962], "mapped", [7954]], [[7963, 7963], "mapped", [7955]], [[7964, 7964], "mapped", [7956]], [[7965, 7965], "mapped", [7957]], [[7966, 7967], "disallowed"], [[7968, 7975], "valid"], [[7976, 7976], "mapped", [7968]], [[7977, 7977], "mapped", [7969]], [[7978, 7978], "mapped", [7970]], [[7979, 7979], "mapped", [7971]], [[7980, 7980], "mapped", [7972]], [[7981, 7981], "mapped", [7973]], [[7982, 7982], "mapped", [7974]], [[7983, 7983], "mapped", [7975]], [[7984, 7991], "valid"], [[7992, 7992], "mapped", [7984]], [[7993, 7993], "mapped", [7985]], [[7994, 7994], "mapped", [7986]], [[7995, 7995], "mapped", [7987]], [[7996, 7996], "mapped", [7988]], [[7997, 7997], "mapped", [7989]], [[7998, 7998], "mapped", [7990]], [[7999, 7999], "mapped", [7991]], [[8e3, 8005], "valid"], [[8006, 8007], "disallowed"], [[8008, 8008], "mapped", [8e3]], [[8009, 8009], "mapped", [8001]], [[8010, 8010], "mapped", [8002]], [[8011, 8011], "mapped", [8003]], [[8012, 8012], "mapped", [8004]], [[8013, 8013], "mapped", [8005]], [[8014, 8015], "disallowed"], [[8016, 8023], "valid"], [[8024, 8024], "disallowed"], [[8025, 8025], "mapped", [8017]], [[8026, 8026], "disallowed"], [[8027, 8027], "mapped", [8019]], [[8028, 8028], "disallowed"], [[8029, 8029], "mapped", [8021]], [[8030, 8030], "disallowed"], [[8031, 8031], "mapped", [8023]], [[8032, 8039], "valid"], [[8040, 8040], "mapped", [8032]], [[8041, 8041], "mapped", [8033]], [[8042, 8042], "mapped", [8034]], [[8043, 8043], "mapped", [8035]], [[8044, 8044], "mapped", [8036]], [[8045, 8045], "mapped", [8037]], [[8046, 8046], "mapped", [8038]], [[8047, 8047], "mapped", [8039]], [[8048, 8048], "valid"], [[8049, 8049], "mapped", [940]], [[8050, 8050], "valid"], [[8051, 8051], "mapped", [941]], [[8052, 8052], "valid"], [[8053, 8053], "mapped", [942]], [[8054, 8054], "valid"], [[8055, 8055], "mapped", [943]], [[8056, 8056], "valid"], [[8057, 8057], "mapped", [972]], [[8058, 8058], "valid"], [[8059, 8059], "mapped", [973]], [[8060, 8060], "valid"], [[8061, 8061], "mapped", [974]], [[8062, 8063], "disallowed"], [[8064, 8064], "mapped", [7936, 953]], [[8065, 8065], "mapped", [7937, 953]], [[8066, 8066], "mapped", [7938, 953]], [[8067, 8067], "mapped", [7939, 953]], [[8068, 8068], "mapped", [7940, 953]], [[8069, 8069], "mapped", [7941, 953]], [[8070, 8070], "mapped", [7942, 953]], [[8071, 8071], "mapped", [7943, 953]], [[8072, 8072], "mapped", [7936, 953]], [[8073, 8073], "mapped", [7937, 953]], [[8074, 8074], "mapped", [7938, 953]], [[8075, 8075], "mapped", [7939, 953]], [[8076, 8076], "mapped", [7940, 953]], [[8077, 8077], "mapped", [7941, 953]], [[8078, 8078], "mapped", [7942, 953]], [[8079, 8079], "mapped", [7943, 953]], [[8080, 8080], "mapped", [7968, 953]], [[8081, 8081], "mapped", [7969, 953]], [[8082, 8082], "mapped", [7970, 953]], [[8083, 8083], "mapped", [7971, 953]], [[8084, 8084], "mapped", [7972, 953]], [[8085, 8085], "mapped", [7973, 953]], [[8086, 8086], "mapped", [7974, 953]], [[8087, 8087], "mapped", [7975, 953]], [[8088, 8088], "mapped", [7968, 953]], [[8089, 8089], "mapped", [7969, 953]], [[8090, 8090], "mapped", [7970, 953]], [[8091, 8091], "mapped", [7971, 953]], [[8092, 8092], "mapped", [7972, 953]], [[8093, 8093], "mapped", [7973, 953]], [[8094, 8094], "mapped", [7974, 953]], [[8095, 8095], "mapped", [7975, 953]], [[8096, 8096], "mapped", [8032, 953]], [[8097, 8097], "mapped", [8033, 953]], [[8098, 8098], "mapped", [8034, 953]], [[8099, 8099], "mapped", [8035, 953]], [[8100, 8100], "mapped", [8036, 953]], [[8101, 8101], "mapped", [8037, 953]], [[8102, 8102], "mapped", [8038, 953]], [[8103, 8103], "mapped", [8039, 953]], [[8104, 8104], "mapped", [8032, 953]], [[8105, 8105], "mapped", [8033, 953]], [[8106, 8106], "mapped", [8034, 953]], [[8107, 8107], "mapped", [8035, 953]], [[8108, 8108], "mapped", [8036, 953]], [[8109, 8109], "mapped", [8037, 953]], [[8110, 8110], "mapped", [8038, 953]], [[8111, 8111], "mapped", [8039, 953]], [[8112, 8113], "valid"], [[8114, 8114], "mapped", [8048, 953]], [[8115, 8115], "mapped", [945, 953]], [[8116, 8116], "mapped", [940, 953]], [[8117, 8117], "disallowed"], [[8118, 8118], "valid"], [[8119, 8119], "mapped", [8118, 953]], [[8120, 8120], "mapped", [8112]], [[8121, 8121], "mapped", [8113]], [[8122, 8122], "mapped", [8048]], [[8123, 8123], "mapped", [940]], [[8124, 8124], "mapped", [945, 953]], [[8125, 8125], "disallowed_STD3_mapped", [32, 787]], [[8126, 8126], "mapped", [953]], [[8127, 8127], "disallowed_STD3_mapped", [32, 787]], [[8128, 8128], "disallowed_STD3_mapped", [32, 834]], [[8129, 8129], "disallowed_STD3_mapped", [32, 776, 834]], [[8130, 8130], "mapped", [8052, 953]], [[8131, 8131], "mapped", [951, 953]], [[8132, 8132], "mapped", [942, 953]], [[8133, 8133], "disallowed"], [[8134, 8134], "valid"], [[8135, 8135], "mapped", [8134, 953]], [[8136, 8136], "mapped", [8050]], [[8137, 8137], "mapped", [941]], [[8138, 8138], "mapped", [8052]], [[8139, 8139], "mapped", [942]], [[8140, 8140], "mapped", [951, 953]], [[8141, 8141], "disallowed_STD3_mapped", [32, 787, 768]], [[8142, 8142], "disallowed_STD3_mapped", [32, 787, 769]], [[8143, 8143], "disallowed_STD3_mapped", [32, 787, 834]], [[8144, 8146], "valid"], [[8147, 8147], "mapped", [912]], [[8148, 8149], "disallowed"], [[8150, 8151], "valid"], [[8152, 8152], "mapped", [8144]], [[8153, 8153], "mapped", [8145]], [[8154, 8154], "mapped", [8054]], [[8155, 8155], "mapped", [943]], [[8156, 8156], "disallowed"], [[8157, 8157], "disallowed_STD3_mapped", [32, 788, 768]], [[8158, 8158], "disallowed_STD3_mapped", [32, 788, 769]], [[8159, 8159], "disallowed_STD3_mapped", [32, 788, 834]], [[8160, 8162], "valid"], [[8163, 8163], "mapped", [944]], [[8164, 8167], "valid"], [[8168, 8168], "mapped", [8160]], [[8169, 8169], "mapped", [8161]], [[8170, 8170], "mapped", [8058]], [[8171, 8171], "mapped", [973]], [[8172, 8172], "mapped", [8165]], [[8173, 8173], "disallowed_STD3_mapped", [32, 776, 768]], [[8174, 8174], "disallowed_STD3_mapped", [32, 776, 769]], [[8175, 8175], "disallowed_STD3_mapped", [96]], [[8176, 8177], "disallowed"], [[8178, 8178], "mapped", [8060, 953]], [[8179, 8179], "mapped", [969, 953]], [[8180, 8180], "mapped", [974, 953]], [[8181, 8181], "disallowed"], [[8182, 8182], "valid"], [[8183, 8183], "mapped", [8182, 953]], [[8184, 8184], "mapped", [8056]], [[8185, 8185], "mapped", [972]], [[8186, 8186], "mapped", [8060]], [[8187, 8187], "mapped", [974]], [[8188, 8188], "mapped", [969, 953]], [[8189, 8189], "disallowed_STD3_mapped", [32, 769]], [[8190, 8190], "disallowed_STD3_mapped", [32, 788]], [[8191, 8191], "disallowed"], [[8192, 8202], "disallowed_STD3_mapped", [32]], [[8203, 8203], "ignored"], [[8204, 8205], "deviation", []], [[8206, 8207], "disallowed"], [[8208, 8208], "valid", [], "NV8"], [[8209, 8209], "mapped", [8208]], [[8210, 8214], "valid", [], "NV8"], [[8215, 8215], "disallowed_STD3_mapped", [32, 819]], [[8216, 8227], "valid", [], "NV8"], [[8228, 8230], "disallowed"], [[8231, 8231], "valid", [], "NV8"], [[8232, 8238], "disallowed"], [[8239, 8239], "disallowed_STD3_mapped", [32]], [[8240, 8242], "valid", [], "NV8"], [[8243, 8243], "mapped", [8242, 8242]], [[8244, 8244], "mapped", [8242, 8242, 8242]], [[8245, 8245], "valid", [], "NV8"], [[8246, 8246], "mapped", [8245, 8245]], [[8247, 8247], "mapped", [8245, 8245, 8245]], [[8248, 8251], "valid", [], "NV8"], [[8252, 8252], "disallowed_STD3_mapped", [33, 33]], [[8253, 8253], "valid", [], "NV8"], [[8254, 8254], "disallowed_STD3_mapped", [32, 773]], [[8255, 8262], "valid", [], "NV8"], [[8263, 8263], "disallowed_STD3_mapped", [63, 63]], [[8264, 8264], "disallowed_STD3_mapped", [63, 33]], [[8265, 8265], "disallowed_STD3_mapped", [33, 63]], [[8266, 8269], "valid", [], "NV8"], [[8270, 8274], "valid", [], "NV8"], [[8275, 8276], "valid", [], "NV8"], [[8277, 8278], "valid", [], "NV8"], [[8279, 8279], "mapped", [8242, 8242, 8242, 8242]], [[8280, 8286], "valid", [], "NV8"], [[8287, 8287], "disallowed_STD3_mapped", [32]], [[8288, 8288], "ignored"], [[8289, 8291], "disallowed"], [[8292, 8292], "ignored"], [[8293, 8293], "disallowed"], [[8294, 8297], "disallowed"], [[8298, 8303], "disallowed"], [[8304, 8304], "mapped", [48]], [[8305, 8305], "mapped", [105]], [[8306, 8307], "disallowed"], [[8308, 8308], "mapped", [52]], [[8309, 8309], "mapped", [53]], [[8310, 8310], "mapped", [54]], [[8311, 8311], "mapped", [55]], [[8312, 8312], "mapped", [56]], [[8313, 8313], "mapped", [57]], [[8314, 8314], "disallowed_STD3_mapped", [43]], [[8315, 8315], "mapped", [8722]], [[8316, 8316], "disallowed_STD3_mapped", [61]], [[8317, 8317], "disallowed_STD3_mapped", [40]], [[8318, 8318], "disallowed_STD3_mapped", [41]], [[8319, 8319], "mapped", [110]], [[8320, 8320], "mapped", [48]], [[8321, 8321], "mapped", [49]], [[8322, 8322], "mapped", [50]], [[8323, 8323], "mapped", [51]], [[8324, 8324], "mapped", [52]], [[8325, 8325], "mapped", [53]], [[8326, 8326], "mapped", [54]], [[8327, 8327], "mapped", [55]], [[8328, 8328], "mapped", [56]], [[8329, 8329], "mapped", [57]], [[8330, 8330], "disallowed_STD3_mapped", [43]], [[8331, 8331], "mapped", [8722]], [[8332, 8332], "disallowed_STD3_mapped", [61]], [[8333, 8333], "disallowed_STD3_mapped", [40]], [[8334, 8334], "disallowed_STD3_mapped", [41]], [[8335, 8335], "disallowed"], [[8336, 8336], "mapped", [97]], [[8337, 8337], "mapped", [101]], [[8338, 8338], "mapped", [111]], [[8339, 8339], "mapped", [120]], [[8340, 8340], "mapped", [601]], [[8341, 8341], "mapped", [104]], [[8342, 8342], "mapped", [107]], [[8343, 8343], "mapped", [108]], [[8344, 8344], "mapped", [109]], [[8345, 8345], "mapped", [110]], [[8346, 8346], "mapped", [112]], [[8347, 8347], "mapped", [115]], [[8348, 8348], "mapped", [116]], [[8349, 8351], "disallowed"], [[8352, 8359], "valid", [], "NV8"], [[8360, 8360], "mapped", [114, 115]], [[8361, 8362], "valid", [], "NV8"], [[8363, 8363], "valid", [], "NV8"], [[8364, 8364], "valid", [], "NV8"], [[8365, 8367], "valid", [], "NV8"], [[8368, 8369], "valid", [], "NV8"], [[8370, 8373], "valid", [], "NV8"], [[8374, 8376], "valid", [], "NV8"], [[8377, 8377], "valid", [], "NV8"], [[8378, 8378], "valid", [], "NV8"], [[8379, 8381], "valid", [], "NV8"], [[8382, 8382], "valid", [], "NV8"], [[8383, 8399], "disallowed"], [[8400, 8417], "valid", [], "NV8"], [[8418, 8419], "valid", [], "NV8"], [[8420, 8426], "valid", [], "NV8"], [[8427, 8427], "valid", [], "NV8"], [[8428, 8431], "valid", [], "NV8"], [[8432, 8432], "valid", [], "NV8"], [[8433, 8447], "disallowed"], [[8448, 8448], "disallowed_STD3_mapped", [97, 47, 99]], [[8449, 8449], "disallowed_STD3_mapped", [97, 47, 115]], [[8450, 8450], "mapped", [99]], [[8451, 8451], "mapped", [176, 99]], [[8452, 8452], "valid", [], "NV8"], [[8453, 8453], "disallowed_STD3_mapped", [99, 47, 111]], [[8454, 8454], "disallowed_STD3_mapped", [99, 47, 117]], [[8455, 8455], "mapped", [603]], [[8456, 8456], "valid", [], "NV8"], [[8457, 8457], "mapped", [176, 102]], [[8458, 8458], "mapped", [103]], [[8459, 8462], "mapped", [104]], [[8463, 8463], "mapped", [295]], [[8464, 8465], "mapped", [105]], [[8466, 8467], "mapped", [108]], [[8468, 8468], "valid", [], "NV8"], [[8469, 8469], "mapped", [110]], [[8470, 8470], "mapped", [110, 111]], [[8471, 8472], "valid", [], "NV8"], [[8473, 8473], "mapped", [112]], [[8474, 8474], "mapped", [113]], [[8475, 8477], "mapped", [114]], [[8478, 8479], "valid", [], "NV8"], [[8480, 8480], "mapped", [115, 109]], [[8481, 8481], "mapped", [116, 101, 108]], [[8482, 8482], "mapped", [116, 109]], [[8483, 8483], "valid", [], "NV8"], [[8484, 8484], "mapped", [122]], [[8485, 8485], "valid", [], "NV8"], [[8486, 8486], "mapped", [969]], [[8487, 8487], "valid", [], "NV8"], [[8488, 8488], "mapped", [122]], [[8489, 8489], "valid", [], "NV8"], [[8490, 8490], "mapped", [107]], [[8491, 8491], "mapped", [229]], [[8492, 8492], "mapped", [98]], [[8493, 8493], "mapped", [99]], [[8494, 8494], "valid", [], "NV8"], [[8495, 8496], "mapped", [101]], [[8497, 8497], "mapped", [102]], [[8498, 8498], "disallowed"], [[8499, 8499], "mapped", [109]], [[8500, 8500], "mapped", [111]], [[8501, 8501], "mapped", [1488]], [[8502, 8502], "mapped", [1489]], [[8503, 8503], "mapped", [1490]], [[8504, 8504], "mapped", [1491]], [[8505, 8505], "mapped", [105]], [[8506, 8506], "valid", [], "NV8"], [[8507, 8507], "mapped", [102, 97, 120]], [[8508, 8508], "mapped", [960]], [[8509, 8510], "mapped", [947]], [[8511, 8511], "mapped", [960]], [[8512, 8512], "mapped", [8721]], [[8513, 8516], "valid", [], "NV8"], [[8517, 8518], "mapped", [100]], [[8519, 8519], "mapped", [101]], [[8520, 8520], "mapped", [105]], [[8521, 8521], "mapped", [106]], [[8522, 8523], "valid", [], "NV8"], [[8524, 8524], "valid", [], "NV8"], [[8525, 8525], "valid", [], "NV8"], [[8526, 8526], "valid"], [[8527, 8527], "valid", [], "NV8"], [[8528, 8528], "mapped", [49, 8260, 55]], [[8529, 8529], "mapped", [49, 8260, 57]], [[8530, 8530], "mapped", [49, 8260, 49, 48]], [[8531, 8531], "mapped", [49, 8260, 51]], [[8532, 8532], "mapped", [50, 8260, 51]], [[8533, 8533], "mapped", [49, 8260, 53]], [[8534, 8534], "mapped", [50, 8260, 53]], [[8535, 8535], "mapped", [51, 8260, 53]], [[8536, 8536], "mapped", [52, 8260, 53]], [[8537, 8537], "mapped", [49, 8260, 54]], [[8538, 8538], "mapped", [53, 8260, 54]], [[8539, 8539], "mapped", [49, 8260, 56]], [[8540, 8540], "mapped", [51, 8260, 56]], [[8541, 8541], "mapped", [53, 8260, 56]], [[8542, 8542], "mapped", [55, 8260, 56]], [[8543, 8543], "mapped", [49, 8260]], [[8544, 8544], "mapped", [105]], [[8545, 8545], "mapped", [105, 105]], [[8546, 8546], "mapped", [105, 105, 105]], [[8547, 8547], "mapped", [105, 118]], [[8548, 8548], "mapped", [118]], [[8549, 8549], "mapped", [118, 105]], [[8550, 8550], "mapped", [118, 105, 105]], [[8551, 8551], "mapped", [118, 105, 105, 105]], [[8552, 8552], "mapped", [105, 120]], [[8553, 8553], "mapped", [120]], [[8554, 8554], "mapped", [120, 105]], [[8555, 8555], "mapped", [120, 105, 105]], [[8556, 8556], "mapped", [108]], [[8557, 8557], "mapped", [99]], [[8558, 8558], "mapped", [100]], [[8559, 8559], "mapped", [109]], [[8560, 8560], "mapped", [105]], [[8561, 8561], "mapped", [105, 105]], [[8562, 8562], "mapped", [105, 105, 105]], [[8563, 8563], "mapped", [105, 118]], [[8564, 8564], "mapped", [118]], [[8565, 8565], "mapped", [118, 105]], [[8566, 8566], "mapped", [118, 105, 105]], [[8567, 8567], "mapped", [118, 105, 105, 105]], [[8568, 8568], "mapped", [105, 120]], [[8569, 8569], "mapped", [120]], [[8570, 8570], "mapped", [120, 105]], [[8571, 8571], "mapped", [120, 105, 105]], [[8572, 8572], "mapped", [108]], [[8573, 8573], "mapped", [99]], [[8574, 8574], "mapped", [100]], [[8575, 8575], "mapped", [109]], [[8576, 8578], "valid", [], "NV8"], [[8579, 8579], "disallowed"], [[8580, 8580], "valid"], [[8581, 8584], "valid", [], "NV8"], [[8585, 8585], "mapped", [48, 8260, 51]], [[8586, 8587], "valid", [], "NV8"], [[8588, 8591], "disallowed"], [[8592, 8682], "valid", [], "NV8"], [[8683, 8691], "valid", [], "NV8"], [[8692, 8703], "valid", [], "NV8"], [[8704, 8747], "valid", [], "NV8"], [[8748, 8748], "mapped", [8747, 8747]], [[8749, 8749], "mapped", [8747, 8747, 8747]], [[8750, 8750], "valid", [], "NV8"], [[8751, 8751], "mapped", [8750, 8750]], [[8752, 8752], "mapped", [8750, 8750, 8750]], [[8753, 8799], "valid", [], "NV8"], [[8800, 8800], "disallowed_STD3_valid"], [[8801, 8813], "valid", [], "NV8"], [[8814, 8815], "disallowed_STD3_valid"], [[8816, 8945], "valid", [], "NV8"], [[8946, 8959], "valid", [], "NV8"], [[8960, 8960], "valid", [], "NV8"], [[8961, 8961], "valid", [], "NV8"], [[8962, 9e3], "valid", [], "NV8"], [[9001, 9001], "mapped", [12296]], [[9002, 9002], "mapped", [12297]], [[9003, 9082], "valid", [], "NV8"], [[9083, 9083], "valid", [], "NV8"], [[9084, 9084], "valid", [], "NV8"], [[9085, 9114], "valid", [], "NV8"], [[9115, 9166], "valid", [], "NV8"], [[9167, 9168], "valid", [], "NV8"], [[9169, 9179], "valid", [], "NV8"], [[9180, 9191], "valid", [], "NV8"], [[9192, 9192], "valid", [], "NV8"], [[9193, 9203], "valid", [], "NV8"], [[9204, 9210], "valid", [], "NV8"], [[9211, 9215], "disallowed"], [[9216, 9252], "valid", [], "NV8"], [[9253, 9254], "valid", [], "NV8"], [[9255, 9279], "disallowed"], [[9280, 9290], "valid", [], "NV8"], [[9291, 9311], "disallowed"], [[9312, 9312], "mapped", [49]], [[9313, 9313], "mapped", [50]], [[9314, 9314], "mapped", [51]], [[9315, 9315], "mapped", [52]], [[9316, 9316], "mapped", [53]], [[9317, 9317], "mapped", [54]], [[9318, 9318], "mapped", [55]], [[9319, 9319], "mapped", [56]], [[9320, 9320], "mapped", [57]], [[9321, 9321], "mapped", [49, 48]], [[9322, 9322], "mapped", [49, 49]], [[9323, 9323], "mapped", [49, 50]], [[9324, 9324], "mapped", [49, 51]], [[9325, 9325], "mapped", [49, 52]], [[9326, 9326], "mapped", [49, 53]], [[9327, 9327], "mapped", [49, 54]], [[9328, 9328], "mapped", [49, 55]], [[9329, 9329], "mapped", [49, 56]], [[9330, 9330], "mapped", [49, 57]], [[9331, 9331], "mapped", [50, 48]], [[9332, 9332], "disallowed_STD3_mapped", [40, 49, 41]], [[9333, 9333], "disallowed_STD3_mapped", [40, 50, 41]], [[9334, 9334], "disallowed_STD3_mapped", [40, 51, 41]], [[9335, 9335], "disallowed_STD3_mapped", [40, 52, 41]], [[9336, 9336], "disallowed_STD3_mapped", [40, 53, 41]], [[9337, 9337], "disallowed_STD3_mapped", [40, 54, 41]], [[9338, 9338], "disallowed_STD3_mapped", [40, 55, 41]], [[9339, 9339], "disallowed_STD3_mapped", [40, 56, 41]], [[9340, 9340], "disallowed_STD3_mapped", [40, 57, 41]], [[9341, 9341], "disallowed_STD3_mapped", [40, 49, 48, 41]], [[9342, 9342], "disallowed_STD3_mapped", [40, 49, 49, 41]], [[9343, 9343], "disallowed_STD3_mapped", [40, 49, 50, 41]], [[9344, 9344], "disallowed_STD3_mapped", [40, 49, 51, 41]], [[9345, 9345], "disallowed_STD3_mapped", [40, 49, 52, 41]], [[9346, 9346], "disallowed_STD3_mapped", [40, 49, 53, 41]], [[9347, 9347], "disallowed_STD3_mapped", [40, 49, 54, 41]], [[9348, 9348], "disallowed_STD3_mapped", [40, 49, 55, 41]], [[9349, 9349], "disallowed_STD3_mapped", [40, 49, 56, 41]], [[9350, 9350], "disallowed_STD3_mapped", [40, 49, 57, 41]], [[9351, 9351], "disallowed_STD3_mapped", [40, 50, 48, 41]], [[9352, 9371], "disallowed"], [[9372, 9372], "disallowed_STD3_mapped", [40, 97, 41]], [[9373, 9373], "disallowed_STD3_mapped", [40, 98, 41]], [[9374, 9374], "disallowed_STD3_mapped", [40, 99, 41]], [[9375, 9375], "disallowed_STD3_mapped", [40, 100, 41]], [[9376, 9376], "disallowed_STD3_mapped", [40, 101, 41]], [[9377, 9377], "disallowed_STD3_mapped", [40, 102, 41]], [[9378, 9378], "disallowed_STD3_mapped", [40, 103, 41]], [[9379, 9379], "disallowed_STD3_mapped", [40, 104, 41]], [[9380, 9380], "disallowed_STD3_mapped", [40, 105, 41]], [[9381, 9381], "disallowed_STD3_mapped", [40, 106, 41]], [[9382, 9382], "disallowed_STD3_mapped", [40, 107, 41]], [[9383, 9383], "disallowed_STD3_mapped", [40, 108, 41]], [[9384, 9384], "disallowed_STD3_mapped", [40, 109, 41]], [[9385, 9385], "disallowed_STD3_mapped", [40, 110, 41]], [[9386, 9386], "disallowed_STD3_mapped", [40, 111, 41]], [[9387, 9387], "disallowed_STD3_mapped", [40, 112, 41]], [[9388, 9388], "disallowed_STD3_mapped", [40, 113, 41]], [[9389, 9389], "disallowed_STD3_mapped", [40, 114, 41]], [[9390, 9390], "disallowed_STD3_mapped", [40, 115, 41]], [[9391, 9391], "disallowed_STD3_mapped", [40, 116, 41]], [[9392, 9392], "disallowed_STD3_mapped", [40, 117, 41]], [[9393, 9393], "disallowed_STD3_mapped", [40, 118, 41]], [[9394, 9394], "disallowed_STD3_mapped", [40, 119, 41]], [[9395, 9395], "disallowed_STD3_mapped", [40, 120, 41]], [[9396, 9396], "disallowed_STD3_mapped", [40, 121, 41]], [[9397, 9397], "disallowed_STD3_mapped", [40, 122, 41]], [[9398, 9398], "mapped", [97]], [[9399, 9399], "mapped", [98]], [[9400, 9400], "mapped", [99]], [[9401, 9401], "mapped", [100]], [[9402, 9402], "mapped", [101]], [[9403, 9403], "mapped", [102]], [[9404, 9404], "mapped", [103]], [[9405, 9405], "mapped", [104]], [[9406, 9406], "mapped", [105]], [[9407, 9407], "mapped", [106]], [[9408, 9408], "mapped", [107]], [[9409, 9409], "mapped", [108]], [[9410, 9410], "mapped", [109]], [[9411, 9411], "mapped", [110]], [[9412, 9412], "mapped", [111]], [[9413, 9413], "mapped", [112]], [[9414, 9414], "mapped", [113]], [[9415, 9415], "mapped", [114]], [[9416, 9416], "mapped", [115]], [[9417, 9417], "mapped", [116]], [[9418, 9418], "mapped", [117]], [[9419, 9419], "mapped", [118]], [[9420, 9420], "mapped", [119]], [[9421, 9421], "mapped", [120]], [[9422, 9422], "mapped", [121]], [[9423, 9423], "mapped", [122]], [[9424, 9424], "mapped", [97]], [[9425, 9425], "mapped", [98]], [[9426, 9426], "mapped", [99]], [[9427, 9427], "mapped", [100]], [[9428, 9428], "mapped", [101]], [[9429, 9429], "mapped", [102]], [[9430, 9430], "mapped", [103]], [[9431, 9431], "mapped", [104]], [[9432, 9432], "mapped", [105]], [[9433, 9433], "mapped", [106]], [[9434, 9434], "mapped", [107]], [[9435, 9435], "mapped", [108]], [[9436, 9436], "mapped", [109]], [[9437, 9437], "mapped", [110]], [[9438, 9438], "mapped", [111]], [[9439, 9439], "mapped", [112]], [[9440, 9440], "mapped", [113]], [[9441, 9441], "mapped", [114]], [[9442, 9442], "mapped", [115]], [[9443, 9443], "mapped", [116]], [[9444, 9444], "mapped", [117]], [[9445, 9445], "mapped", [118]], [[9446, 9446], "mapped", [119]], [[9447, 9447], "mapped", [120]], [[9448, 9448], "mapped", [121]], [[9449, 9449], "mapped", [122]], [[9450, 9450], "mapped", [48]], [[9451, 9470], "valid", [], "NV8"], [[9471, 9471], "valid", [], "NV8"], [[9472, 9621], "valid", [], "NV8"], [[9622, 9631], "valid", [], "NV8"], [[9632, 9711], "valid", [], "NV8"], [[9712, 9719], "valid", [], "NV8"], [[9720, 9727], "valid", [], "NV8"], [[9728, 9747], "valid", [], "NV8"], [[9748, 9749], "valid", [], "NV8"], [[9750, 9751], "valid", [], "NV8"], [[9752, 9752], "valid", [], "NV8"], [[9753, 9753], "valid", [], "NV8"], [[9754, 9839], "valid", [], "NV8"], [[9840, 9841], "valid", [], "NV8"], [[9842, 9853], "valid", [], "NV8"], [[9854, 9855], "valid", [], "NV8"], [[9856, 9865], "valid", [], "NV8"], [[9866, 9873], "valid", [], "NV8"], [[9874, 9884], "valid", [], "NV8"], [[9885, 9885], "valid", [], "NV8"], [[9886, 9887], "valid", [], "NV8"], [[9888, 9889], "valid", [], "NV8"], [[9890, 9905], "valid", [], "NV8"], [[9906, 9906], "valid", [], "NV8"], [[9907, 9916], "valid", [], "NV8"], [[9917, 9919], "valid", [], "NV8"], [[9920, 9923], "valid", [], "NV8"], [[9924, 9933], "valid", [], "NV8"], [[9934, 9934], "valid", [], "NV8"], [[9935, 9953], "valid", [], "NV8"], [[9954, 9954], "valid", [], "NV8"], [[9955, 9955], "valid", [], "NV8"], [[9956, 9959], "valid", [], "NV8"], [[9960, 9983], "valid", [], "NV8"], [[9984, 9984], "valid", [], "NV8"], [[9985, 9988], "valid", [], "NV8"], [[9989, 9989], "valid", [], "NV8"], [[9990, 9993], "valid", [], "NV8"], [[9994, 9995], "valid", [], "NV8"], [[9996, 10023], "valid", [], "NV8"], [[10024, 10024], "valid", [], "NV8"], [[10025, 10059], "valid", [], "NV8"], [[10060, 10060], "valid", [], "NV8"], [[10061, 10061], "valid", [], "NV8"], [[10062, 10062], "valid", [], "NV8"], [[10063, 10066], "valid", [], "NV8"], [[10067, 10069], "valid", [], "NV8"], [[10070, 10070], "valid", [], "NV8"], [[10071, 10071], "valid", [], "NV8"], [[10072, 10078], "valid", [], "NV8"], [[10079, 10080], "valid", [], "NV8"], [[10081, 10087], "valid", [], "NV8"], [[10088, 10101], "valid", [], "NV8"], [[10102, 10132], "valid", [], "NV8"], [[10133, 10135], "valid", [], "NV8"], [[10136, 10159], "valid", [], "NV8"], [[10160, 10160], "valid", [], "NV8"], [[10161, 10174], "valid", [], "NV8"], [[10175, 10175], "valid", [], "NV8"], [[10176, 10182], "valid", [], "NV8"], [[10183, 10186], "valid", [], "NV8"], [[10187, 10187], "valid", [], "NV8"], [[10188, 10188], "valid", [], "NV8"], [[10189, 10189], "valid", [], "NV8"], [[10190, 10191], "valid", [], "NV8"], [[10192, 10219], "valid", [], "NV8"], [[10220, 10223], "valid", [], "NV8"], [[10224, 10239], "valid", [], "NV8"], [[10240, 10495], "valid", [], "NV8"], [[10496, 10763], "valid", [], "NV8"], [[10764, 10764], "mapped", [8747, 8747, 8747, 8747]], [[10765, 10867], "valid", [], "NV8"], [[10868, 10868], "disallowed_STD3_mapped", [58, 58, 61]], [[10869, 10869], "disallowed_STD3_mapped", [61, 61]], [[10870, 10870], "disallowed_STD3_mapped", [61, 61, 61]], [[10871, 10971], "valid", [], "NV8"], [[10972, 10972], "mapped", [10973, 824]], [[10973, 11007], "valid", [], "NV8"], [[11008, 11021], "valid", [], "NV8"], [[11022, 11027], "valid", [], "NV8"], [[11028, 11034], "valid", [], "NV8"], [[11035, 11039], "valid", [], "NV8"], [[11040, 11043], "valid", [], "NV8"], [[11044, 11084], "valid", [], "NV8"], [[11085, 11087], "valid", [], "NV8"], [[11088, 11092], "valid", [], "NV8"], [[11093, 11097], "valid", [], "NV8"], [[11098, 11123], "valid", [], "NV8"], [[11124, 11125], "disallowed"], [[11126, 11157], "valid", [], "NV8"], [[11158, 11159], "disallowed"], [[11160, 11193], "valid", [], "NV8"], [[11194, 11196], "disallowed"], [[11197, 11208], "valid", [], "NV8"], [[11209, 11209], "disallowed"], [[11210, 11217], "valid", [], "NV8"], [[11218, 11243], "disallowed"], [[11244, 11247], "valid", [], "NV8"], [[11248, 11263], "disallowed"], [[11264, 11264], "mapped", [11312]], [[11265, 11265], "mapped", [11313]], [[11266, 11266], "mapped", [11314]], [[11267, 11267], "mapped", [11315]], [[11268, 11268], "mapped", [11316]], [[11269, 11269], "mapped", [11317]], [[11270, 11270], "mapped", [11318]], [[11271, 11271], "mapped", [11319]], [[11272, 11272], "mapped", [11320]], [[11273, 11273], "mapped", [11321]], [[11274, 11274], "mapped", [11322]], [[11275, 11275], "mapped", [11323]], [[11276, 11276], "mapped", [11324]], [[11277, 11277], "mapped", [11325]], [[11278, 11278], "mapped", [11326]], [[11279, 11279], "mapped", [11327]], [[11280, 11280], "mapped", [11328]], [[11281, 11281], "mapped", [11329]], [[11282, 11282], "mapped", [11330]], [[11283, 11283], "mapped", [11331]], [[11284, 11284], "mapped", [11332]], [[11285, 11285], "mapped", [11333]], [[11286, 11286], "mapped", [11334]], [[11287, 11287], "mapped", [11335]], [[11288, 11288], "mapped", [11336]], [[11289, 11289], "mapped", [11337]], [[11290, 11290], "mapped", [11338]], [[11291, 11291], "mapped", [11339]], [[11292, 11292], "mapped", [11340]], [[11293, 11293], "mapped", [11341]], [[11294, 11294], "mapped", [11342]], [[11295, 11295], "mapped", [11343]], [[11296, 11296], "mapped", [11344]], [[11297, 11297], "mapped", [11345]], [[11298, 11298], "mapped", [11346]], [[11299, 11299], "mapped", [11347]], [[11300, 11300], "mapped", [11348]], [[11301, 11301], "mapped", [11349]], [[11302, 11302], "mapped", [11350]], [[11303, 11303], "mapped", [11351]], [[11304, 11304], "mapped", [11352]], [[11305, 11305], "mapped", [11353]], [[11306, 11306], "mapped", [11354]], [[11307, 11307], "mapped", [11355]], [[11308, 11308], "mapped", [11356]], [[11309, 11309], "mapped", [11357]], [[11310, 11310], "mapped", [11358]], [[11311, 11311], "disallowed"], [[11312, 11358], "valid"], [[11359, 11359], "disallowed"], [[11360, 11360], "mapped", [11361]], [[11361, 11361], "valid"], [[11362, 11362], "mapped", [619]], [[11363, 11363], "mapped", [7549]], [[11364, 11364], "mapped", [637]], [[11365, 11366], "valid"], [[11367, 11367], "mapped", [11368]], [[11368, 11368], "valid"], [[11369, 11369], "mapped", [11370]], [[11370, 11370], "valid"], [[11371, 11371], "mapped", [11372]], [[11372, 11372], "valid"], [[11373, 11373], "mapped", [593]], [[11374, 11374], "mapped", [625]], [[11375, 11375], "mapped", [592]], [[11376, 11376], "mapped", [594]], [[11377, 11377], "valid"], [[11378, 11378], "mapped", [11379]], [[11379, 11379], "valid"], [[11380, 11380], "valid"], [[11381, 11381], "mapped", [11382]], [[11382, 11383], "valid"], [[11384, 11387], "valid"], [[11388, 11388], "mapped", [106]], [[11389, 11389], "mapped", [118]], [[11390, 11390], "mapped", [575]], [[11391, 11391], "mapped", [576]], [[11392, 11392], "mapped", [11393]], [[11393, 11393], "valid"], [[11394, 11394], "mapped", [11395]], [[11395, 11395], "valid"], [[11396, 11396], "mapped", [11397]], [[11397, 11397], "valid"], [[11398, 11398], "mapped", [11399]], [[11399, 11399], "valid"], [[11400, 11400], "mapped", [11401]], [[11401, 11401], "valid"], [[11402, 11402], "mapped", [11403]], [[11403, 11403], "valid"], [[11404, 11404], "mapped", [11405]], [[11405, 11405], "valid"], [[11406, 11406], "mapped", [11407]], [[11407, 11407], "valid"], [[11408, 11408], "mapped", [11409]], [[11409, 11409], "valid"], [[11410, 11410], "mapped", [11411]], [[11411, 11411], "valid"], [[11412, 11412], "mapped", [11413]], [[11413, 11413], "valid"], [[11414, 11414], "mapped", [11415]], [[11415, 11415], "valid"], [[11416, 11416], "mapped", [11417]], [[11417, 11417], "valid"], [[11418, 11418], "mapped", [11419]], [[11419, 11419], "valid"], [[11420, 11420], "mapped", [11421]], [[11421, 11421], "valid"], [[11422, 11422], "mapped", [11423]], [[11423, 11423], "valid"], [[11424, 11424], "mapped", [11425]], [[11425, 11425], "valid"], [[11426, 11426], "mapped", [11427]], [[11427, 11427], "valid"], [[11428, 11428], "mapped", [11429]], [[11429, 11429], "valid"], [[11430, 11430], "mapped", [11431]], [[11431, 11431], "valid"], [[11432, 11432], "mapped", [11433]], [[11433, 11433], "valid"], [[11434, 11434], "mapped", [11435]], [[11435, 11435], "valid"], [[11436, 11436], "mapped", [11437]], [[11437, 11437], "valid"], [[11438, 11438], "mapped", [11439]], [[11439, 11439], "valid"], [[11440, 11440], "mapped", [11441]], [[11441, 11441], "valid"], [[11442, 11442], "mapped", [11443]], [[11443, 11443], "valid"], [[11444, 11444], "mapped", [11445]], [[11445, 11445], "valid"], [[11446, 11446], "mapped", [11447]], [[11447, 11447], "valid"], [[11448, 11448], "mapped", [11449]], [[11449, 11449], "valid"], [[11450, 11450], "mapped", [11451]], [[11451, 11451], "valid"], [[11452, 11452], "mapped", [11453]], [[11453, 11453], "valid"], [[11454, 11454], "mapped", [11455]], [[11455, 11455], "valid"], [[11456, 11456], "mapped", [11457]], [[11457, 11457], "valid"], [[11458, 11458], "mapped", [11459]], [[11459, 11459], "valid"], [[11460, 11460], "mapped", [11461]], [[11461, 11461], "valid"], [[11462, 11462], "mapped", [11463]], [[11463, 11463], "valid"], [[11464, 11464], "mapped", [11465]], [[11465, 11465], "valid"], [[11466, 11466], "mapped", [11467]], [[11467, 11467], "valid"], [[11468, 11468], "mapped", [11469]], [[11469, 11469], "valid"], [[11470, 11470], "mapped", [11471]], [[11471, 11471], "valid"], [[11472, 11472], "mapped", [11473]], [[11473, 11473], "valid"], [[11474, 11474], "mapped", [11475]], [[11475, 11475], "valid"], [[11476, 11476], "mapped", [11477]], [[11477, 11477], "valid"], [[11478, 11478], "mapped", [11479]], [[11479, 11479], "valid"], [[11480, 11480], "mapped", [11481]], [[11481, 11481], "valid"], [[11482, 11482], "mapped", [11483]], [[11483, 11483], "valid"], [[11484, 11484], "mapped", [11485]], [[11485, 11485], "valid"], [[11486, 11486], "mapped", [11487]], [[11487, 11487], "valid"], [[11488, 11488], "mapped", [11489]], [[11489, 11489], "valid"], [[11490, 11490], "mapped", [11491]], [[11491, 11492], "valid"], [[11493, 11498], "valid", [], "NV8"], [[11499, 11499], "mapped", [11500]], [[11500, 11500], "valid"], [[11501, 11501], "mapped", [11502]], [[11502, 11505], "valid"], [[11506, 11506], "mapped", [11507]], [[11507, 11507], "valid"], [[11508, 11512], "disallowed"], [[11513, 11519], "valid", [], "NV8"], [[11520, 11557], "valid"], [[11558, 11558], "disallowed"], [[11559, 11559], "valid"], [[11560, 11564], "disallowed"], [[11565, 11565], "valid"], [[11566, 11567], "disallowed"], [[11568, 11621], "valid"], [[11622, 11623], "valid"], [[11624, 11630], "disallowed"], [[11631, 11631], "mapped", [11617]], [[11632, 11632], "valid", [], "NV8"], [[11633, 11646], "disallowed"], [[11647, 11647], "valid"], [[11648, 11670], "valid"], [[11671, 11679], "disallowed"], [[11680, 11686], "valid"], [[11687, 11687], "disallowed"], [[11688, 11694], "valid"], [[11695, 11695], "disallowed"], [[11696, 11702], "valid"], [[11703, 11703], "disallowed"], [[11704, 11710], "valid"], [[11711, 11711], "disallowed"], [[11712, 11718], "valid"], [[11719, 11719], "disallowed"], [[11720, 11726], "valid"], [[11727, 11727], "disallowed"], [[11728, 11734], "valid"], [[11735, 11735], "disallowed"], [[11736, 11742], "valid"], [[11743, 11743], "disallowed"], [[11744, 11775], "valid"], [[11776, 11799], "valid", [], "NV8"], [[11800, 11803], "valid", [], "NV8"], [[11804, 11805], "valid", [], "NV8"], [[11806, 11822], "valid", [], "NV8"], [[11823, 11823], "valid"], [[11824, 11824], "valid", [], "NV8"], [[11825, 11825], "valid", [], "NV8"], [[11826, 11835], "valid", [], "NV8"], [[11836, 11842], "valid", [], "NV8"], [[11843, 11903], "disallowed"], [[11904, 11929], "valid", [], "NV8"], [[11930, 11930], "disallowed"], [[11931, 11934], "valid", [], "NV8"], [[11935, 11935], "mapped", [27597]], [[11936, 12018], "valid", [], "NV8"], [[12019, 12019], "mapped", [40863]], [[12020, 12031], "disallowed"], [[12032, 12032], "mapped", [19968]], [[12033, 12033], "mapped", [20008]], [[12034, 12034], "mapped", [20022]], [[12035, 12035], "mapped", [20031]], [[12036, 12036], "mapped", [20057]], [[12037, 12037], "mapped", [20101]], [[12038, 12038], "mapped", [20108]], [[12039, 12039], "mapped", [20128]], [[12040, 12040], "mapped", [20154]], [[12041, 12041], "mapped", [20799]], [[12042, 12042], "mapped", [20837]], [[12043, 12043], "mapped", [20843]], [[12044, 12044], "mapped", [20866]], [[12045, 12045], "mapped", [20886]], [[12046, 12046], "mapped", [20907]], [[12047, 12047], "mapped", [20960]], [[12048, 12048], "mapped", [20981]], [[12049, 12049], "mapped", [20992]], [[12050, 12050], "mapped", [21147]], [[12051, 12051], "mapped", [21241]], [[12052, 12052], "mapped", [21269]], [[12053, 12053], "mapped", [21274]], [[12054, 12054], "mapped", [21304]], [[12055, 12055], "mapped", [21313]], [[12056, 12056], "mapped", [21340]], [[12057, 12057], "mapped", [21353]], [[12058, 12058], "mapped", [21378]], [[12059, 12059], "mapped", [21430]], [[12060, 12060], "mapped", [21448]], [[12061, 12061], "mapped", [21475]], [[12062, 12062], "mapped", [22231]], [[12063, 12063], "mapped", [22303]], [[12064, 12064], "mapped", [22763]], [[12065, 12065], "mapped", [22786]], [[12066, 12066], "mapped", [22794]], [[12067, 12067], "mapped", [22805]], [[12068, 12068], "mapped", [22823]], [[12069, 12069], "mapped", [22899]], [[12070, 12070], "mapped", [23376]], [[12071, 12071], "mapped", [23424]], [[12072, 12072], "mapped", [23544]], [[12073, 12073], "mapped", [23567]], [[12074, 12074], "mapped", [23586]], [[12075, 12075], "mapped", [23608]], [[12076, 12076], "mapped", [23662]], [[12077, 12077], "mapped", [23665]], [[12078, 12078], "mapped", [24027]], [[12079, 12079], "mapped", [24037]], [[12080, 12080], "mapped", [24049]], [[12081, 12081], "mapped", [24062]], [[12082, 12082], "mapped", [24178]], [[12083, 12083], "mapped", [24186]], [[12084, 12084], "mapped", [24191]], [[12085, 12085], "mapped", [24308]], [[12086, 12086], "mapped", [24318]], [[12087, 12087], "mapped", [24331]], [[12088, 12088], "mapped", [24339]], [[12089, 12089], "mapped", [24400]], [[12090, 12090], "mapped", [24417]], [[12091, 12091], "mapped", [24435]], [[12092, 12092], "mapped", [24515]], [[12093, 12093], "mapped", [25096]], [[12094, 12094], "mapped", [25142]], [[12095, 12095], "mapped", [25163]], [[12096, 12096], "mapped", [25903]], [[12097, 12097], "mapped", [25908]], [[12098, 12098], "mapped", [25991]], [[12099, 12099], "mapped", [26007]], [[12100, 12100], "mapped", [26020]], [[12101, 12101], "mapped", [26041]], [[12102, 12102], "mapped", [26080]], [[12103, 12103], "mapped", [26085]], [[12104, 12104], "mapped", [26352]], [[12105, 12105], "mapped", [26376]], [[12106, 12106], "mapped", [26408]], [[12107, 12107], "mapped", [27424]], [[12108, 12108], "mapped", [27490]], [[12109, 12109], "mapped", [27513]], [[12110, 12110], "mapped", [27571]], [[12111, 12111], "mapped", [27595]], [[12112, 12112], "mapped", [27604]], [[12113, 12113], "mapped", [27611]], [[12114, 12114], "mapped", [27663]], [[12115, 12115], "mapped", [27668]], [[12116, 12116], "mapped", [27700]], [[12117, 12117], "mapped", [28779]], [[12118, 12118], "mapped", [29226]], [[12119, 12119], "mapped", [29238]], [[12120, 12120], "mapped", [29243]], [[12121, 12121], "mapped", [29247]], [[12122, 12122], "mapped", [29255]], [[12123, 12123], "mapped", [29273]], [[12124, 12124], "mapped", [29275]], [[12125, 12125], "mapped", [29356]], [[12126, 12126], "mapped", [29572]], [[12127, 12127], "mapped", [29577]], [[12128, 12128], "mapped", [29916]], [[12129, 12129], "mapped", [29926]], [[12130, 12130], "mapped", [29976]], [[12131, 12131], "mapped", [29983]], [[12132, 12132], "mapped", [29992]], [[12133, 12133], "mapped", [3e4]], [[12134, 12134], "mapped", [30091]], [[12135, 12135], "mapped", [30098]], [[12136, 12136], "mapped", [30326]], [[12137, 12137], "mapped", [30333]], [[12138, 12138], "mapped", [30382]], [[12139, 12139], "mapped", [30399]], [[12140, 12140], "mapped", [30446]], [[12141, 12141], "mapped", [30683]], [[12142, 12142], "mapped", [30690]], [[12143, 12143], "mapped", [30707]], [[12144, 12144], "mapped", [31034]], [[12145, 12145], "mapped", [31160]], [[12146, 12146], "mapped", [31166]], [[12147, 12147], "mapped", [31348]], [[12148, 12148], "mapped", [31435]], [[12149, 12149], "mapped", [31481]], [[12150, 12150], "mapped", [31859]], [[12151, 12151], "mapped", [31992]], [[12152, 12152], "mapped", [32566]], [[12153, 12153], "mapped", [32593]], [[12154, 12154], "mapped", [32650]], [[12155, 12155], "mapped", [32701]], [[12156, 12156], "mapped", [32769]], [[12157, 12157], "mapped", [32780]], [[12158, 12158], "mapped", [32786]], [[12159, 12159], "mapped", [32819]], [[12160, 12160], "mapped", [32895]], [[12161, 12161], "mapped", [32905]], [[12162, 12162], "mapped", [33251]], [[12163, 12163], "mapped", [33258]], [[12164, 12164], "mapped", [33267]], [[12165, 12165], "mapped", [33276]], [[12166, 12166], "mapped", [33292]], [[12167, 12167], "mapped", [33307]], [[12168, 12168], "mapped", [33311]], [[12169, 12169], "mapped", [33390]], [[12170, 12170], "mapped", [33394]], [[12171, 12171], "mapped", [33400]], [[12172, 12172], "mapped", [34381]], [[12173, 12173], "mapped", [34411]], [[12174, 12174], "mapped", [34880]], [[12175, 12175], "mapped", [34892]], [[12176, 12176], "mapped", [34915]], [[12177, 12177], "mapped", [35198]], [[12178, 12178], "mapped", [35211]], [[12179, 12179], "mapped", [35282]], [[12180, 12180], "mapped", [35328]], [[12181, 12181], "mapped", [35895]], [[12182, 12182], "mapped", [35910]], [[12183, 12183], "mapped", [35925]], [[12184, 12184], "mapped", [35960]], [[12185, 12185], "mapped", [35997]], [[12186, 12186], "mapped", [36196]], [[12187, 12187], "mapped", [36208]], [[12188, 12188], "mapped", [36275]], [[12189, 12189], "mapped", [36523]], [[12190, 12190], "mapped", [36554]], [[12191, 12191], "mapped", [36763]], [[12192, 12192], "mapped", [36784]], [[12193, 12193], "mapped", [36789]], [[12194, 12194], "mapped", [37009]], [[12195, 12195], "mapped", [37193]], [[12196, 12196], "mapped", [37318]], [[12197, 12197], "mapped", [37324]], [[12198, 12198], "mapped", [37329]], [[12199, 12199], "mapped", [38263]], [[12200, 12200], "mapped", [38272]], [[12201, 12201], "mapped", [38428]], [[12202, 12202], "mapped", [38582]], [[12203, 12203], "mapped", [38585]], [[12204, 12204], "mapped", [38632]], [[12205, 12205], "mapped", [38737]], [[12206, 12206], "mapped", [38750]], [[12207, 12207], "mapped", [38754]], [[12208, 12208], "mapped", [38761]], [[12209, 12209], "mapped", [38859]], [[12210, 12210], "mapped", [38893]], [[12211, 12211], "mapped", [38899]], [[12212, 12212], "mapped", [38913]], [[12213, 12213], "mapped", [39080]], [[12214, 12214], "mapped", [39131]], [[12215, 12215], "mapped", [39135]], [[12216, 12216], "mapped", [39318]], [[12217, 12217], "mapped", [39321]], [[12218, 12218], "mapped", [39340]], [[12219, 12219], "mapped", [39592]], [[12220, 12220], "mapped", [39640]], [[12221, 12221], "mapped", [39647]], [[12222, 12222], "mapped", [39717]], [[12223, 12223], "mapped", [39727]], [[12224, 12224], "mapped", [39730]], [[12225, 12225], "mapped", [39740]], [[12226, 12226], "mapped", [39770]], [[12227, 12227], "mapped", [40165]], [[12228, 12228], "mapped", [40565]], [[12229, 12229], "mapped", [40575]], [[12230, 12230], "mapped", [40613]], [[12231, 12231], "mapped", [40635]], [[12232, 12232], "mapped", [40643]], [[12233, 12233], "mapped", [40653]], [[12234, 12234], "mapped", [40657]], [[12235, 12235], "mapped", [40697]], [[12236, 12236], "mapped", [40701]], [[12237, 12237], "mapped", [40718]], [[12238, 12238], "mapped", [40723]], [[12239, 12239], "mapped", [40736]], [[12240, 12240], "mapped", [40763]], [[12241, 12241], "mapped", [40778]], [[12242, 12242], "mapped", [40786]], [[12243, 12243], "mapped", [40845]], [[12244, 12244], "mapped", [40860]], [[12245, 12245], "mapped", [40864]], [[12246, 12271], "disallowed"], [[12272, 12283], "disallowed"], [[12284, 12287], "disallowed"], [[12288, 12288], "disallowed_STD3_mapped", [32]], [[12289, 12289], "valid", [], "NV8"], [[12290, 12290], "mapped", [46]], [[12291, 12292], "valid", [], "NV8"], [[12293, 12295], "valid"], [[12296, 12329], "valid", [], "NV8"], [[12330, 12333], "valid"], [[12334, 12341], "valid", [], "NV8"], [[12342, 12342], "mapped", [12306]], [[12343, 12343], "valid", [], "NV8"], [[12344, 12344], "mapped", [21313]], [[12345, 12345], "mapped", [21316]], [[12346, 12346], "mapped", [21317]], [[12347, 12347], "valid", [], "NV8"], [[12348, 12348], "valid"], [[12349, 12349], "valid", [], "NV8"], [[12350, 12350], "valid", [], "NV8"], [[12351, 12351], "valid", [], "NV8"], [[12352, 12352], "disallowed"], [[12353, 12436], "valid"], [[12437, 12438], "valid"], [[12439, 12440], "disallowed"], [[12441, 12442], "valid"], [[12443, 12443], "disallowed_STD3_mapped", [32, 12441]], [[12444, 12444], "disallowed_STD3_mapped", [32, 12442]], [[12445, 12446], "valid"], [[12447, 12447], "mapped", [12424, 12426]], [[12448, 12448], "valid", [], "NV8"], [[12449, 12542], "valid"], [[12543, 12543], "mapped", [12467, 12488]], [[12544, 12548], "disallowed"], [[12549, 12588], "valid"], [[12589, 12589], "valid"], [[12590, 12592], "disallowed"], [[12593, 12593], "mapped", [4352]], [[12594, 12594], "mapped", [4353]], [[12595, 12595], "mapped", [4522]], [[12596, 12596], "mapped", [4354]], [[12597, 12597], "mapped", [4524]], [[12598, 12598], "mapped", [4525]], [[12599, 12599], "mapped", [4355]], [[12600, 12600], "mapped", [4356]], [[12601, 12601], "mapped", [4357]], [[12602, 12602], "mapped", [4528]], [[12603, 12603], "mapped", [4529]], [[12604, 12604], "mapped", [4530]], [[12605, 12605], "mapped", [4531]], [[12606, 12606], "mapped", [4532]], [[12607, 12607], "mapped", [4533]], [[12608, 12608], "mapped", [4378]], [[12609, 12609], "mapped", [4358]], [[12610, 12610], "mapped", [4359]], [[12611, 12611], "mapped", [4360]], [[12612, 12612], "mapped", [4385]], [[12613, 12613], "mapped", [4361]], [[12614, 12614], "mapped", [4362]], [[12615, 12615], "mapped", [4363]], [[12616, 12616], "mapped", [4364]], [[12617, 12617], "mapped", [4365]], [[12618, 12618], "mapped", [4366]], [[12619, 12619], "mapped", [4367]], [[12620, 12620], "mapped", [4368]], [[12621, 12621], "mapped", [4369]], [[12622, 12622], "mapped", [4370]], [[12623, 12623], "mapped", [4449]], [[12624, 12624], "mapped", [4450]], [[12625, 12625], "mapped", [4451]], [[12626, 12626], "mapped", [4452]], [[12627, 12627], "mapped", [4453]], [[12628, 12628], "mapped", [4454]], [[12629, 12629], "mapped", [4455]], [[12630, 12630], "mapped", [4456]], [[12631, 12631], "mapped", [4457]], [[12632, 12632], "mapped", [4458]], [[12633, 12633], "mapped", [4459]], [[12634, 12634], "mapped", [4460]], [[12635, 12635], "mapped", [4461]], [[12636, 12636], "mapped", [4462]], [[12637, 12637], "mapped", [4463]], [[12638, 12638], "mapped", [4464]], [[12639, 12639], "mapped", [4465]], [[12640, 12640], "mapped", [4466]], [[12641, 12641], "mapped", [4467]], [[12642, 12642], "mapped", [4468]], [[12643, 12643], "mapped", [4469]], [[12644, 12644], "disallowed"], [[12645, 12645], "mapped", [4372]], [[12646, 12646], "mapped", [4373]], [[12647, 12647], "mapped", [4551]], [[12648, 12648], "mapped", [4552]], [[12649, 12649], "mapped", [4556]], [[12650, 12650], "mapped", [4558]], [[12651, 12651], "mapped", [4563]], [[12652, 12652], "mapped", [4567]], [[12653, 12653], "mapped", [4569]], [[12654, 12654], "mapped", [4380]], [[12655, 12655], "mapped", [4573]], [[12656, 12656], "mapped", [4575]], [[12657, 12657], "mapped", [4381]], [[12658, 12658], "mapped", [4382]], [[12659, 12659], "mapped", [4384]], [[12660, 12660], "mapped", [4386]], [[12661, 12661], "mapped", [4387]], [[12662, 12662], "mapped", [4391]], [[12663, 12663], "mapped", [4393]], [[12664, 12664], "mapped", [4395]], [[12665, 12665], "mapped", [4396]], [[12666, 12666], "mapped", [4397]], [[12667, 12667], "mapped", [4398]], [[12668, 12668], "mapped", [4399]], [[12669, 12669], "mapped", [4402]], [[12670, 12670], "mapped", [4406]], [[12671, 12671], "mapped", [4416]], [[12672, 12672], "mapped", [4423]], [[12673, 12673], "mapped", [4428]], [[12674, 12674], "mapped", [4593]], [[12675, 12675], "mapped", [4594]], [[12676, 12676], "mapped", [4439]], [[12677, 12677], "mapped", [4440]], [[12678, 12678], "mapped", [4441]], [[12679, 12679], "mapped", [4484]], [[12680, 12680], "mapped", [4485]], [[12681, 12681], "mapped", [4488]], [[12682, 12682], "mapped", [4497]], [[12683, 12683], "mapped", [4498]], [[12684, 12684], "mapped", [4500]], [[12685, 12685], "mapped", [4510]], [[12686, 12686], "mapped", [4513]], [[12687, 12687], "disallowed"], [[12688, 12689], "valid", [], "NV8"], [[12690, 12690], "mapped", [19968]], [[12691, 12691], "mapped", [20108]], [[12692, 12692], "mapped", [19977]], [[12693, 12693], "mapped", [22235]], [[12694, 12694], "mapped", [19978]], [[12695, 12695], "mapped", [20013]], [[12696, 12696], "mapped", [19979]], [[12697, 12697], "mapped", [30002]], [[12698, 12698], "mapped", [20057]], [[12699, 12699], "mapped", [19993]], [[12700, 12700], "mapped", [19969]], [[12701, 12701], "mapped", [22825]], [[12702, 12702], "mapped", [22320]], [[12703, 12703], "mapped", [20154]], [[12704, 12727], "valid"], [[12728, 12730], "valid"], [[12731, 12735], "disallowed"], [[12736, 12751], "valid", [], "NV8"], [[12752, 12771], "valid", [], "NV8"], [[12772, 12783], "disallowed"], [[12784, 12799], "valid"], [[12800, 12800], "disallowed_STD3_mapped", [40, 4352, 41]], [[12801, 12801], "disallowed_STD3_mapped", [40, 4354, 41]], [[12802, 12802], "disallowed_STD3_mapped", [40, 4355, 41]], [[12803, 12803], "disallowed_STD3_mapped", [40, 4357, 41]], [[12804, 12804], "disallowed_STD3_mapped", [40, 4358, 41]], [[12805, 12805], "disallowed_STD3_mapped", [40, 4359, 41]], [[12806, 12806], "disallowed_STD3_mapped", [40, 4361, 41]], [[12807, 12807], "disallowed_STD3_mapped", [40, 4363, 41]], [[12808, 12808], "disallowed_STD3_mapped", [40, 4364, 41]], [[12809, 12809], "disallowed_STD3_mapped", [40, 4366, 41]], [[12810, 12810], "disallowed_STD3_mapped", [40, 4367, 41]], [[12811, 12811], "disallowed_STD3_mapped", [40, 4368, 41]], [[12812, 12812], "disallowed_STD3_mapped", [40, 4369, 41]], [[12813, 12813], "disallowed_STD3_mapped", [40, 4370, 41]], [[12814, 12814], "disallowed_STD3_mapped", [40, 44032, 41]], [[12815, 12815], "disallowed_STD3_mapped", [40, 45208, 41]], [[12816, 12816], "disallowed_STD3_mapped", [40, 45796, 41]], [[12817, 12817], "disallowed_STD3_mapped", [40, 46972, 41]], [[12818, 12818], "disallowed_STD3_mapped", [40, 47560, 41]], [[12819, 12819], "disallowed_STD3_mapped", [40, 48148, 41]], [[12820, 12820], "disallowed_STD3_mapped", [40, 49324, 41]], [[12821, 12821], "disallowed_STD3_mapped", [40, 50500, 41]], [[12822, 12822], "disallowed_STD3_mapped", [40, 51088, 41]], [[12823, 12823], "disallowed_STD3_mapped", [40, 52264, 41]], [[12824, 12824], "disallowed_STD3_mapped", [40, 52852, 41]], [[12825, 12825], "disallowed_STD3_mapped", [40, 53440, 41]], [[12826, 12826], "disallowed_STD3_mapped", [40, 54028, 41]], [[12827, 12827], "disallowed_STD3_mapped", [40, 54616, 41]], [[12828, 12828], "disallowed_STD3_mapped", [40, 51452, 41]], [[12829, 12829], "disallowed_STD3_mapped", [40, 50724, 51204, 41]], [[12830, 12830], "disallowed_STD3_mapped", [40, 50724, 54980, 41]], [[12831, 12831], "disallowed"], [[12832, 12832], "disallowed_STD3_mapped", [40, 19968, 41]], [[12833, 12833], "disallowed_STD3_mapped", [40, 20108, 41]], [[12834, 12834], "disallowed_STD3_mapped", [40, 19977, 41]], [[12835, 12835], "disallowed_STD3_mapped", [40, 22235, 41]], [[12836, 12836], "disallowed_STD3_mapped", [40, 20116, 41]], [[12837, 12837], "disallowed_STD3_mapped", [40, 20845, 41]], [[12838, 12838], "disallowed_STD3_mapped", [40, 19971, 41]], [[12839, 12839], "disallowed_STD3_mapped", [40, 20843, 41]], [[12840, 12840], "disallowed_STD3_mapped", [40, 20061, 41]], [[12841, 12841], "disallowed_STD3_mapped", [40, 21313, 41]], [[12842, 12842], "disallowed_STD3_mapped", [40, 26376, 41]], [[12843, 12843], "disallowed_STD3_mapped", [40, 28779, 41]], [[12844, 12844], "disallowed_STD3_mapped", [40, 27700, 41]], [[12845, 12845], "disallowed_STD3_mapped", [40, 26408, 41]], [[12846, 12846], "disallowed_STD3_mapped", [40, 37329, 41]], [[12847, 12847], "disallowed_STD3_mapped", [40, 22303, 41]], [[12848, 12848], "disallowed_STD3_mapped", [40, 26085, 41]], [[12849, 12849], "disallowed_STD3_mapped", [40, 26666, 41]], [[12850, 12850], "disallowed_STD3_mapped", [40, 26377, 41]], [[12851, 12851], "disallowed_STD3_mapped", [40, 31038, 41]], [[12852, 12852], "disallowed_STD3_mapped", [40, 21517, 41]], [[12853, 12853], "disallowed_STD3_mapped", [40, 29305, 41]], [[12854, 12854], "disallowed_STD3_mapped", [40, 36001, 41]], [[12855, 12855], "disallowed_STD3_mapped", [40, 31069, 41]], [[12856, 12856], "disallowed_STD3_mapped", [40, 21172, 41]], [[12857, 12857], "disallowed_STD3_mapped", [40, 20195, 41]], [[12858, 12858], "disallowed_STD3_mapped", [40, 21628, 41]], [[12859, 12859], "disallowed_STD3_mapped", [40, 23398, 41]], [[12860, 12860], "disallowed_STD3_mapped", [40, 30435, 41]], [[12861, 12861], "disallowed_STD3_mapped", [40, 20225, 41]], [[12862, 12862], "disallowed_STD3_mapped", [40, 36039, 41]], [[12863, 12863], "disallowed_STD3_mapped", [40, 21332, 41]], [[12864, 12864], "disallowed_STD3_mapped", [40, 31085, 41]], [[12865, 12865], "disallowed_STD3_mapped", [40, 20241, 41]], [[12866, 12866], "disallowed_STD3_mapped", [40, 33258, 41]], [[12867, 12867], "disallowed_STD3_mapped", [40, 33267, 41]], [[12868, 12868], "mapped", [21839]], [[12869, 12869], "mapped", [24188]], [[12870, 12870], "mapped", [25991]], [[12871, 12871], "mapped", [31631]], [[12872, 12879], "valid", [], "NV8"], [[12880, 12880], "mapped", [112, 116, 101]], [[12881, 12881], "mapped", [50, 49]], [[12882, 12882], "mapped", [50, 50]], [[12883, 12883], "mapped", [50, 51]], [[12884, 12884], "mapped", [50, 52]], [[12885, 12885], "mapped", [50, 53]], [[12886, 12886], "mapped", [50, 54]], [[12887, 12887], "mapped", [50, 55]], [[12888, 12888], "mapped", [50, 56]], [[12889, 12889], "mapped", [50, 57]], [[12890, 12890], "mapped", [51, 48]], [[12891, 12891], "mapped", [51, 49]], [[12892, 12892], "mapped", [51, 50]], [[12893, 12893], "mapped", [51, 51]], [[12894, 12894], "mapped", [51, 52]], [[12895, 12895], "mapped", [51, 53]], [[12896, 12896], "mapped", [4352]], [[12897, 12897], "mapped", [4354]], [[12898, 12898], "mapped", [4355]], [[12899, 12899], "mapped", [4357]], [[12900, 12900], "mapped", [4358]], [[12901, 12901], "mapped", [4359]], [[12902, 12902], "mapped", [4361]], [[12903, 12903], "mapped", [4363]], [[12904, 12904], "mapped", [4364]], [[12905, 12905], "mapped", [4366]], [[12906, 12906], "mapped", [4367]], [[12907, 12907], "mapped", [4368]], [[12908, 12908], "mapped", [4369]], [[12909, 12909], "mapped", [4370]], [[12910, 12910], "mapped", [44032]], [[12911, 12911], "mapped", [45208]], [[12912, 12912], "mapped", [45796]], [[12913, 12913], "mapped", [46972]], [[12914, 12914], "mapped", [47560]], [[12915, 12915], "mapped", [48148]], [[12916, 12916], "mapped", [49324]], [[12917, 12917], "mapped", [50500]], [[12918, 12918], "mapped", [51088]], [[12919, 12919], "mapped", [52264]], [[12920, 12920], "mapped", [52852]], [[12921, 12921], "mapped", [53440]], [[12922, 12922], "mapped", [54028]], [[12923, 12923], "mapped", [54616]], [[12924, 12924], "mapped", [52280, 44256]], [[12925, 12925], "mapped", [51452, 51032]], [[12926, 12926], "mapped", [50864]], [[12927, 12927], "valid", [], "NV8"], [[12928, 12928], "mapped", [19968]], [[12929, 12929], "mapped", [20108]], [[12930, 12930], "mapped", [19977]], [[12931, 12931], "mapped", [22235]], [[12932, 12932], "mapped", [20116]], [[12933, 12933], "mapped", [20845]], [[12934, 12934], "mapped", [19971]], [[12935, 12935], "mapped", [20843]], [[12936, 12936], "mapped", [20061]], [[12937, 12937], "mapped", [21313]], [[12938, 12938], "mapped", [26376]], [[12939, 12939], "mapped", [28779]], [[12940, 12940], "mapped", [27700]], [[12941, 12941], "mapped", [26408]], [[12942, 12942], "mapped", [37329]], [[12943, 12943], "mapped", [22303]], [[12944, 12944], "mapped", [26085]], [[12945, 12945], "mapped", [26666]], [[12946, 12946], "mapped", [26377]], [[12947, 12947], "mapped", [31038]], [[12948, 12948], "mapped", [21517]], [[12949, 12949], "mapped", [29305]], [[12950, 12950], "mapped", [36001]], [[12951, 12951], "mapped", [31069]], [[12952, 12952], "mapped", [21172]], [[12953, 12953], "mapped", [31192]], [[12954, 12954], "mapped", [30007]], [[12955, 12955], "mapped", [22899]], [[12956, 12956], "mapped", [36969]], [[12957, 12957], "mapped", [20778]], [[12958, 12958], "mapped", [21360]], [[12959, 12959], "mapped", [27880]], [[12960, 12960], "mapped", [38917]], [[12961, 12961], "mapped", [20241]], [[12962, 12962], "mapped", [20889]], [[12963, 12963], "mapped", [27491]], [[12964, 12964], "mapped", [19978]], [[12965, 12965], "mapped", [20013]], [[12966, 12966], "mapped", [19979]], [[12967, 12967], "mapped", [24038]], [[12968, 12968], "mapped", [21491]], [[12969, 12969], "mapped", [21307]], [[12970, 12970], "mapped", [23447]], [[12971, 12971], "mapped", [23398]], [[12972, 12972], "mapped", [30435]], [[12973, 12973], "mapped", [20225]], [[12974, 12974], "mapped", [36039]], [[12975, 12975], "mapped", [21332]], [[12976, 12976], "mapped", [22812]], [[12977, 12977], "mapped", [51, 54]], [[12978, 12978], "mapped", [51, 55]], [[12979, 12979], "mapped", [51, 56]], [[12980, 12980], "mapped", [51, 57]], [[12981, 12981], "mapped", [52, 48]], [[12982, 12982], "mapped", [52, 49]], [[12983, 12983], "mapped", [52, 50]], [[12984, 12984], "mapped", [52, 51]], [[12985, 12985], "mapped", [52, 52]], [[12986, 12986], "mapped", [52, 53]], [[12987, 12987], "mapped", [52, 54]], [[12988, 12988], "mapped", [52, 55]], [[12989, 12989], "mapped", [52, 56]], [[12990, 12990], "mapped", [52, 57]], [[12991, 12991], "mapped", [53, 48]], [[12992, 12992], "mapped", [49, 26376]], [[12993, 12993], "mapped", [50, 26376]], [[12994, 12994], "mapped", [51, 26376]], [[12995, 12995], "mapped", [52, 26376]], [[12996, 12996], "mapped", [53, 26376]], [[12997, 12997], "mapped", [54, 26376]], [[12998, 12998], "mapped", [55, 26376]], [[12999, 12999], "mapped", [56, 26376]], [[13e3, 13e3], "mapped", [57, 26376]], [[13001, 13001], "mapped", [49, 48, 26376]], [[13002, 13002], "mapped", [49, 49, 26376]], [[13003, 13003], "mapped", [49, 50, 26376]], [[13004, 13004], "mapped", [104, 103]], [[13005, 13005], "mapped", [101, 114, 103]], [[13006, 13006], "mapped", [101, 118]], [[13007, 13007], "mapped", [108, 116, 100]], [[13008, 13008], "mapped", [12450]], [[13009, 13009], "mapped", [12452]], [[13010, 13010], "mapped", [12454]], [[13011, 13011], "mapped", [12456]], [[13012, 13012], "mapped", [12458]], [[13013, 13013], "mapped", [12459]], [[13014, 13014], "mapped", [12461]], [[13015, 13015], "mapped", [12463]], [[13016, 13016], "mapped", [12465]], [[13017, 13017], "mapped", [12467]], [[13018, 13018], "mapped", [12469]], [[13019, 13019], "mapped", [12471]], [[13020, 13020], "mapped", [12473]], [[13021, 13021], "mapped", [12475]], [[13022, 13022], "mapped", [12477]], [[13023, 13023], "mapped", [12479]], [[13024, 13024], "mapped", [12481]], [[13025, 13025], "mapped", [12484]], [[13026, 13026], "mapped", [12486]], [[13027, 13027], "mapped", [12488]], [[13028, 13028], "mapped", [12490]], [[13029, 13029], "mapped", [12491]], [[13030, 13030], "mapped", [12492]], [[13031, 13031], "mapped", [12493]], [[13032, 13032], "mapped", [12494]], [[13033, 13033], "mapped", [12495]], [[13034, 13034], "mapped", [12498]], [[13035, 13035], "mapped", [12501]], [[13036, 13036], "mapped", [12504]], [[13037, 13037], "mapped", [12507]], [[13038, 13038], "mapped", [12510]], [[13039, 13039], "mapped", [12511]], [[13040, 13040], "mapped", [12512]], [[13041, 13041], "mapped", [12513]], [[13042, 13042], "mapped", [12514]], [[13043, 13043], "mapped", [12516]], [[13044, 13044], "mapped", [12518]], [[13045, 13045], "mapped", [12520]], [[13046, 13046], "mapped", [12521]], [[13047, 13047], "mapped", [12522]], [[13048, 13048], "mapped", [12523]], [[13049, 13049], "mapped", [12524]], [[13050, 13050], "mapped", [12525]], [[13051, 13051], "mapped", [12527]], [[13052, 13052], "mapped", [12528]], [[13053, 13053], "mapped", [12529]], [[13054, 13054], "mapped", [12530]], [[13055, 13055], "disallowed"], [[13056, 13056], "mapped", [12450, 12497, 12540, 12488]], [[13057, 13057], "mapped", [12450, 12523, 12501, 12449]], [[13058, 13058], "mapped", [12450, 12531, 12506, 12450]], [[13059, 13059], "mapped", [12450, 12540, 12523]], [[13060, 13060], "mapped", [12452, 12491, 12531, 12464]], [[13061, 13061], "mapped", [12452, 12531, 12481]], [[13062, 13062], "mapped", [12454, 12457, 12531]], [[13063, 13063], "mapped", [12456, 12473, 12463, 12540, 12489]], [[13064, 13064], "mapped", [12456, 12540, 12459, 12540]], [[13065, 13065], "mapped", [12458, 12531, 12473]], [[13066, 13066], "mapped", [12458, 12540, 12512]], [[13067, 13067], "mapped", [12459, 12452, 12522]], [[13068, 13068], "mapped", [12459, 12521, 12483, 12488]], [[13069, 13069], "mapped", [12459, 12525, 12522, 12540]], [[13070, 13070], "mapped", [12460, 12525, 12531]], [[13071, 13071], "mapped", [12460, 12531, 12510]], [[13072, 13072], "mapped", [12462, 12460]], [[13073, 13073], "mapped", [12462, 12491, 12540]], [[13074, 13074], "mapped", [12461, 12517, 12522, 12540]], [[13075, 13075], "mapped", [12462, 12523, 12480, 12540]], [[13076, 13076], "mapped", [12461, 12525]], [[13077, 13077], "mapped", [12461, 12525, 12464, 12521, 12512]], [[13078, 13078], "mapped", [12461, 12525, 12513, 12540, 12488, 12523]], [[13079, 13079], "mapped", [12461, 12525, 12527, 12483, 12488]], [[13080, 13080], "mapped", [12464, 12521, 12512]], [[13081, 13081], "mapped", [12464, 12521, 12512, 12488, 12531]], [[13082, 13082], "mapped", [12463, 12523, 12476, 12452, 12525]], [[13083, 13083], "mapped", [12463, 12525, 12540, 12493]], [[13084, 13084], "mapped", [12465, 12540, 12473]], [[13085, 13085], "mapped", [12467, 12523, 12490]], [[13086, 13086], "mapped", [12467, 12540, 12509]], [[13087, 13087], "mapped", [12469, 12452, 12463, 12523]], [[13088, 13088], "mapped", [12469, 12531, 12481, 12540, 12512]], [[13089, 13089], "mapped", [12471, 12522, 12531, 12464]], [[13090, 13090], "mapped", [12475, 12531, 12481]], [[13091, 13091], "mapped", [12475, 12531, 12488]], [[13092, 13092], "mapped", [12480, 12540, 12473]], [[13093, 13093], "mapped", [12487, 12471]], [[13094, 13094], "mapped", [12489, 12523]], [[13095, 13095], "mapped", [12488, 12531]], [[13096, 13096], "mapped", [12490, 12494]], [[13097, 13097], "mapped", [12494, 12483, 12488]], [[13098, 13098], "mapped", [12495, 12452, 12484]], [[13099, 13099], "mapped", [12497, 12540, 12475, 12531, 12488]], [[13100, 13100], "mapped", [12497, 12540, 12484]], [[13101, 13101], "mapped", [12496, 12540, 12524, 12523]], [[13102, 13102], "mapped", [12500, 12450, 12473, 12488, 12523]], [[13103, 13103], "mapped", [12500, 12463, 12523]], [[13104, 13104], "mapped", [12500, 12467]], [[13105, 13105], "mapped", [12499, 12523]], [[13106, 13106], "mapped", [12501, 12449, 12521, 12483, 12489]], [[13107, 13107], "mapped", [12501, 12451, 12540, 12488]], [[13108, 13108], "mapped", [12502, 12483, 12471, 12455, 12523]], [[13109, 13109], "mapped", [12501, 12521, 12531]], [[13110, 13110], "mapped", [12504, 12463, 12479, 12540, 12523]], [[13111, 13111], "mapped", [12506, 12477]], [[13112, 13112], "mapped", [12506, 12491, 12498]], [[13113, 13113], "mapped", [12504, 12523, 12484]], [[13114, 13114], "mapped", [12506, 12531, 12473]], [[13115, 13115], "mapped", [12506, 12540, 12472]], [[13116, 13116], "mapped", [12505, 12540, 12479]], [[13117, 13117], "mapped", [12509, 12452, 12531, 12488]], [[13118, 13118], "mapped", [12508, 12523, 12488]], [[13119, 13119], "mapped", [12507, 12531]], [[13120, 13120], "mapped", [12509, 12531, 12489]], [[13121, 13121], "mapped", [12507, 12540, 12523]], [[13122, 13122], "mapped", [12507, 12540, 12531]], [[13123, 13123], "mapped", [12510, 12452, 12463, 12525]], [[13124, 13124], "mapped", [12510, 12452, 12523]], [[13125, 13125], "mapped", [12510, 12483, 12495]], [[13126, 13126], "mapped", [12510, 12523, 12463]], [[13127, 13127], "mapped", [12510, 12531, 12471, 12519, 12531]], [[13128, 13128], "mapped", [12511, 12463, 12525, 12531]], [[13129, 13129], "mapped", [12511, 12522]], [[13130, 13130], "mapped", [12511, 12522, 12496, 12540, 12523]], [[13131, 13131], "mapped", [12513, 12460]], [[13132, 13132], "mapped", [12513, 12460, 12488, 12531]], [[13133, 13133], "mapped", [12513, 12540, 12488, 12523]], [[13134, 13134], "mapped", [12516, 12540, 12489]], [[13135, 13135], "mapped", [12516, 12540, 12523]], [[13136, 13136], "mapped", [12518, 12450, 12531]], [[13137, 13137], "mapped", [12522, 12483, 12488, 12523]], [[13138, 13138], "mapped", [12522, 12521]], [[13139, 13139], "mapped", [12523, 12500, 12540]], [[13140, 13140], "mapped", [12523, 12540, 12502, 12523]], [[13141, 13141], "mapped", [12524, 12512]], [[13142, 13142], "mapped", [12524, 12531, 12488, 12466, 12531]], [[13143, 13143], "mapped", [12527, 12483, 12488]], [[13144, 13144], "mapped", [48, 28857]], [[13145, 13145], "mapped", [49, 28857]], [[13146, 13146], "mapped", [50, 28857]], [[13147, 13147], "mapped", [51, 28857]], [[13148, 13148], "mapped", [52, 28857]], [[13149, 13149], "mapped", [53, 28857]], [[13150, 13150], "mapped", [54, 28857]], [[13151, 13151], "mapped", [55, 28857]], [[13152, 13152], "mapped", [56, 28857]], [[13153, 13153], "mapped", [57, 28857]], [[13154, 13154], "mapped", [49, 48, 28857]], [[13155, 13155], "mapped", [49, 49, 28857]], [[13156, 13156], "mapped", [49, 50, 28857]], [[13157, 13157], "mapped", [49, 51, 28857]], [[13158, 13158], "mapped", [49, 52, 28857]], [[13159, 13159], "mapped", [49, 53, 28857]], [[13160, 13160], "mapped", [49, 54, 28857]], [[13161, 13161], "mapped", [49, 55, 28857]], [[13162, 13162], "mapped", [49, 56, 28857]], [[13163, 13163], "mapped", [49, 57, 28857]], [[13164, 13164], "mapped", [50, 48, 28857]], [[13165, 13165], "mapped", [50, 49, 28857]], [[13166, 13166], "mapped", [50, 50, 28857]], [[13167, 13167], "mapped", [50, 51, 28857]], [[13168, 13168], "mapped", [50, 52, 28857]], [[13169, 13169], "mapped", [104, 112, 97]], [[13170, 13170], "mapped", [100, 97]], [[13171, 13171], "mapped", [97, 117]], [[13172, 13172], "mapped", [98, 97, 114]], [[13173, 13173], "mapped", [111, 118]], [[13174, 13174], "mapped", [112, 99]], [[13175, 13175], "mapped", [100, 109]], [[13176, 13176], "mapped", [100, 109, 50]], [[13177, 13177], "mapped", [100, 109, 51]], [[13178, 13178], "mapped", [105, 117]], [[13179, 13179], "mapped", [24179, 25104]], [[13180, 13180], "mapped", [26157, 21644]], [[13181, 13181], "mapped", [22823, 27491]], [[13182, 13182], "mapped", [26126, 27835]], [[13183, 13183], "mapped", [26666, 24335, 20250, 31038]], [[13184, 13184], "mapped", [112, 97]], [[13185, 13185], "mapped", [110, 97]], [[13186, 13186], "mapped", [956, 97]], [[13187, 13187], "mapped", [109, 97]], [[13188, 13188], "mapped", [107, 97]], [[13189, 13189], "mapped", [107, 98]], [[13190, 13190], "mapped", [109, 98]], [[13191, 13191], "mapped", [103, 98]], [[13192, 13192], "mapped", [99, 97, 108]], [[13193, 13193], "mapped", [107, 99, 97, 108]], [[13194, 13194], "mapped", [112, 102]], [[13195, 13195], "mapped", [110, 102]], [[13196, 13196], "mapped", [956, 102]], [[13197, 13197], "mapped", [956, 103]], [[13198, 13198], "mapped", [109, 103]], [[13199, 13199], "mapped", [107, 103]], [[13200, 13200], "mapped", [104, 122]], [[13201, 13201], "mapped", [107, 104, 122]], [[13202, 13202], "mapped", [109, 104, 122]], [[13203, 13203], "mapped", [103, 104, 122]], [[13204, 13204], "mapped", [116, 104, 122]], [[13205, 13205], "mapped", [956, 108]], [[13206, 13206], "mapped", [109, 108]], [[13207, 13207], "mapped", [100, 108]], [[13208, 13208], "mapped", [107, 108]], [[13209, 13209], "mapped", [102, 109]], [[13210, 13210], "mapped", [110, 109]], [[13211, 13211], "mapped", [956, 109]], [[13212, 13212], "mapped", [109, 109]], [[13213, 13213], "mapped", [99, 109]], [[13214, 13214], "mapped", [107, 109]], [[13215, 13215], "mapped", [109, 109, 50]], [[13216, 13216], "mapped", [99, 109, 50]], [[13217, 13217], "mapped", [109, 50]], [[13218, 13218], "mapped", [107, 109, 50]], [[13219, 13219], "mapped", [109, 109, 51]], [[13220, 13220], "mapped", [99, 109, 51]], [[13221, 13221], "mapped", [109, 51]], [[13222, 13222], "mapped", [107, 109, 51]], [[13223, 13223], "mapped", [109, 8725, 115]], [[13224, 13224], "mapped", [109, 8725, 115, 50]], [[13225, 13225], "mapped", [112, 97]], [[13226, 13226], "mapped", [107, 112, 97]], [[13227, 13227], "mapped", [109, 112, 97]], [[13228, 13228], "mapped", [103, 112, 97]], [[13229, 13229], "mapped", [114, 97, 100]], [[13230, 13230], "mapped", [114, 97, 100, 8725, 115]], [[13231, 13231], "mapped", [114, 97, 100, 8725, 115, 50]], [[13232, 13232], "mapped", [112, 115]], [[13233, 13233], "mapped", [110, 115]], [[13234, 13234], "mapped", [956, 115]], [[13235, 13235], "mapped", [109, 115]], [[13236, 13236], "mapped", [112, 118]], [[13237, 13237], "mapped", [110, 118]], [[13238, 13238], "mapped", [956, 118]], [[13239, 13239], "mapped", [109, 118]], [[13240, 13240], "mapped", [107, 118]], [[13241, 13241], "mapped", [109, 118]], [[13242, 13242], "mapped", [112, 119]], [[13243, 13243], "mapped", [110, 119]], [[13244, 13244], "mapped", [956, 119]], [[13245, 13245], "mapped", [109, 119]], [[13246, 13246], "mapped", [107, 119]], [[13247, 13247], "mapped", [109, 119]], [[13248, 13248], "mapped", [107, 969]], [[13249, 13249], "mapped", [109, 969]], [[13250, 13250], "disallowed"], [[13251, 13251], "mapped", [98, 113]], [[13252, 13252], "mapped", [99, 99]], [[13253, 13253], "mapped", [99, 100]], [[13254, 13254], "mapped", [99, 8725, 107, 103]], [[13255, 13255], "disallowed"], [[13256, 13256], "mapped", [100, 98]], [[13257, 13257], "mapped", [103, 121]], [[13258, 13258], "mapped", [104, 97]], [[13259, 13259], "mapped", [104, 112]], [[13260, 13260], "mapped", [105, 110]], [[13261, 13261], "mapped", [107, 107]], [[13262, 13262], "mapped", [107, 109]], [[13263, 13263], "mapped", [107, 116]], [[13264, 13264], "mapped", [108, 109]], [[13265, 13265], "mapped", [108, 110]], [[13266, 13266], "mapped", [108, 111, 103]], [[13267, 13267], "mapped", [108, 120]], [[13268, 13268], "mapped", [109, 98]], [[13269, 13269], "mapped", [109, 105, 108]], [[13270, 13270], "mapped", [109, 111, 108]], [[13271, 13271], "mapped", [112, 104]], [[13272, 13272], "disallowed"], [[13273, 13273], "mapped", [112, 112, 109]], [[13274, 13274], "mapped", [112, 114]], [[13275, 13275], "mapped", [115, 114]], [[13276, 13276], "mapped", [115, 118]], [[13277, 13277], "mapped", [119, 98]], [[13278, 13278], "mapped", [118, 8725, 109]], [[13279, 13279], "mapped", [97, 8725, 109]], [[13280, 13280], "mapped", [49, 26085]], [[13281, 13281], "mapped", [50, 26085]], [[13282, 13282], "mapped", [51, 26085]], [[13283, 13283], "mapped", [52, 26085]], [[13284, 13284], "mapped", [53, 26085]], [[13285, 13285], "mapped", [54, 26085]], [[13286, 13286], "mapped", [55, 26085]], [[13287, 13287], "mapped", [56, 26085]], [[13288, 13288], "mapped", [57, 26085]], [[13289, 13289], "mapped", [49, 48, 26085]], [[13290, 13290], "mapped", [49, 49, 26085]], [[13291, 13291], "mapped", [49, 50, 26085]], [[13292, 13292], "mapped", [49, 51, 26085]], [[13293, 13293], "mapped", [49, 52, 26085]], [[13294, 13294], "mapped", [49, 53, 26085]], [[13295, 13295], "mapped", [49, 54, 26085]], [[13296, 13296], "mapped", [49, 55, 26085]], [[13297, 13297], "mapped", [49, 56, 26085]], [[13298, 13298], "mapped", [49, 57, 26085]], [[13299, 13299], "mapped", [50, 48, 26085]], [[13300, 13300], "mapped", [50, 49, 26085]], [[13301, 13301], "mapped", [50, 50, 26085]], [[13302, 13302], "mapped", [50, 51, 26085]], [[13303, 13303], "mapped", [50, 52, 26085]], [[13304, 13304], "mapped", [50, 53, 26085]], [[13305, 13305], "mapped", [50, 54, 26085]], [[13306, 13306], "mapped", [50, 55, 26085]], [[13307, 13307], "mapped", [50, 56, 26085]], [[13308, 13308], "mapped", [50, 57, 26085]], [[13309, 13309], "mapped", [51, 48, 26085]], [[13310, 13310], "mapped", [51, 49, 26085]], [[13311, 13311], "mapped", [103, 97, 108]], [[13312, 19893], "valid"], [[19894, 19903], "disallowed"], [[19904, 19967], "valid", [], "NV8"], [[19968, 40869], "valid"], [[40870, 40891], "valid"], [[40892, 40899], "valid"], [[40900, 40907], "valid"], [[40908, 40908], "valid"], [[40909, 40917], "valid"], [[40918, 40959], "disallowed"], [[40960, 42124], "valid"], [[42125, 42127], "disallowed"], [[42128, 42145], "valid", [], "NV8"], [[42146, 42147], "valid", [], "NV8"], [[42148, 42163], "valid", [], "NV8"], [[42164, 42164], "valid", [], "NV8"], [[42165, 42176], "valid", [], "NV8"], [[42177, 42177], "valid", [], "NV8"], [[42178, 42180], "valid", [], "NV8"], [[42181, 42181], "valid", [], "NV8"], [[42182, 42182], "valid", [], "NV8"], [[42183, 42191], "disallowed"], [[42192, 42237], "valid"], [[42238, 42239], "valid", [], "NV8"], [[42240, 42508], "valid"], [[42509, 42511], "valid", [], "NV8"], [[42512, 42539], "valid"], [[42540, 42559], "disallowed"], [[42560, 42560], "mapped", [42561]], [[42561, 42561], "valid"], [[42562, 42562], "mapped", [42563]], [[42563, 42563], "valid"], [[42564, 42564], "mapped", [42565]], [[42565, 42565], "valid"], [[42566, 42566], "mapped", [42567]], [[42567, 42567], "valid"], [[42568, 42568], "mapped", [42569]], [[42569, 42569], "valid"], [[42570, 42570], "mapped", [42571]], [[42571, 42571], "valid"], [[42572, 42572], "mapped", [42573]], [[42573, 42573], "valid"], [[42574, 42574], "mapped", [42575]], [[42575, 42575], "valid"], [[42576, 42576], "mapped", [42577]], [[42577, 42577], "valid"], [[42578, 42578], "mapped", [42579]], [[42579, 42579], "valid"], [[42580, 42580], "mapped", [42581]], [[42581, 42581], "valid"], [[42582, 42582], "mapped", [42583]], [[42583, 42583], "valid"], [[42584, 42584], "mapped", [42585]], [[42585, 42585], "valid"], [[42586, 42586], "mapped", [42587]], [[42587, 42587], "valid"], [[42588, 42588], "mapped", [42589]], [[42589, 42589], "valid"], [[42590, 42590], "mapped", [42591]], [[42591, 42591], "valid"], [[42592, 42592], "mapped", [42593]], [[42593, 42593], "valid"], [[42594, 42594], "mapped", [42595]], [[42595, 42595], "valid"], [[42596, 42596], "mapped", [42597]], [[42597, 42597], "valid"], [[42598, 42598], "mapped", [42599]], [[42599, 42599], "valid"], [[42600, 42600], "mapped", [42601]], [[42601, 42601], "valid"], [[42602, 42602], "mapped", [42603]], [[42603, 42603], "valid"], [[42604, 42604], "mapped", [42605]], [[42605, 42607], "valid"], [[42608, 42611], "valid", [], "NV8"], [[42612, 42619], "valid"], [[42620, 42621], "valid"], [[42622, 42622], "valid", [], "NV8"], [[42623, 42623], "valid"], [[42624, 42624], "mapped", [42625]], [[42625, 42625], "valid"], [[42626, 42626], "mapped", [42627]], [[42627, 42627], "valid"], [[42628, 42628], "mapped", [42629]], [[42629, 42629], "valid"], [[42630, 42630], "mapped", [42631]], [[42631, 42631], "valid"], [[42632, 42632], "mapped", [42633]], [[42633, 42633], "valid"], [[42634, 42634], "mapped", [42635]], [[42635, 42635], "valid"], [[42636, 42636], "mapped", [42637]], [[42637, 42637], "valid"], [[42638, 42638], "mapped", [42639]], [[42639, 42639], "valid"], [[42640, 42640], "mapped", [42641]], [[42641, 42641], "valid"], [[42642, 42642], "mapped", [42643]], [[42643, 42643], "valid"], [[42644, 42644], "mapped", [42645]], [[42645, 42645], "valid"], [[42646, 42646], "mapped", [42647]], [[42647, 42647], "valid"], [[42648, 42648], "mapped", [42649]], [[42649, 42649], "valid"], [[42650, 42650], "mapped", [42651]], [[42651, 42651], "valid"], [[42652, 42652], "mapped", [1098]], [[42653, 42653], "mapped", [1100]], [[42654, 42654], "valid"], [[42655, 42655], "valid"], [[42656, 42725], "valid"], [[42726, 42735], "valid", [], "NV8"], [[42736, 42737], "valid"], [[42738, 42743], "valid", [], "NV8"], [[42744, 42751], "disallowed"], [[42752, 42774], "valid", [], "NV8"], [[42775, 42778], "valid"], [[42779, 42783], "valid"], [[42784, 42785], "valid", [], "NV8"], [[42786, 42786], "mapped", [42787]], [[42787, 42787], "valid"], [[42788, 42788], "mapped", [42789]], [[42789, 42789], "valid"], [[42790, 42790], "mapped", [42791]], [[42791, 42791], "valid"], [[42792, 42792], "mapped", [42793]], [[42793, 42793], "valid"], [[42794, 42794], "mapped", [42795]], [[42795, 42795], "valid"], [[42796, 42796], "mapped", [42797]], [[42797, 42797], "valid"], [[42798, 42798], "mapped", [42799]], [[42799, 42801], "valid"], [[42802, 42802], "mapped", [42803]], [[42803, 42803], "valid"], [[42804, 42804], "mapped", [42805]], [[42805, 42805], "valid"], [[42806, 42806], "mapped", [42807]], [[42807, 42807], "valid"], [[42808, 42808], "mapped", [42809]], [[42809, 42809], "valid"], [[42810, 42810], "mapped", [42811]], [[42811, 42811], "valid"], [[42812, 42812], "mapped", [42813]], [[42813, 42813], "valid"], [[42814, 42814], "mapped", [42815]], [[42815, 42815], "valid"], [[42816, 42816], "mapped", [42817]], [[42817, 42817], "valid"], [[42818, 42818], "mapped", [42819]], [[42819, 42819], "valid"], [[42820, 42820], "mapped", [42821]], [[42821, 42821], "valid"], [[42822, 42822], "mapped", [42823]], [[42823, 42823], "valid"], [[42824, 42824], "mapped", [42825]], [[42825, 42825], "valid"], [[42826, 42826], "mapped", [42827]], [[42827, 42827], "valid"], [[42828, 42828], "mapped", [42829]], [[42829, 42829], "valid"], [[42830, 42830], "mapped", [42831]], [[42831, 42831], "valid"], [[42832, 42832], "mapped", [42833]], [[42833, 42833], "valid"], [[42834, 42834], "mapped", [42835]], [[42835, 42835], "valid"], [[42836, 42836], "mapped", [42837]], [[42837, 42837], "valid"], [[42838, 42838], "mapped", [42839]], [[42839, 42839], "valid"], [[42840, 42840], "mapped", [42841]], [[42841, 42841], "valid"], [[42842, 42842], "mapped", [42843]], [[42843, 42843], "valid"], [[42844, 42844], "mapped", [42845]], [[42845, 42845], "valid"], [[42846, 42846], "mapped", [42847]], [[42847, 42847], "valid"], [[42848, 42848], "mapped", [42849]], [[42849, 42849], "valid"], [[42850, 42850], "mapped", [42851]], [[42851, 42851], "valid"], [[42852, 42852], "mapped", [42853]], [[42853, 42853], "valid"], [[42854, 42854], "mapped", [42855]], [[42855, 42855], "valid"], [[42856, 42856], "mapped", [42857]], [[42857, 42857], "valid"], [[42858, 42858], "mapped", [42859]], [[42859, 42859], "valid"], [[42860, 42860], "mapped", [42861]], [[42861, 42861], "valid"], [[42862, 42862], "mapped", [42863]], [[42863, 42863], "valid"], [[42864, 42864], "mapped", [42863]], [[42865, 42872], "valid"], [[42873, 42873], "mapped", [42874]], [[42874, 42874], "valid"], [[42875, 42875], "mapped", [42876]], [[42876, 42876], "valid"], [[42877, 42877], "mapped", [7545]], [[42878, 42878], "mapped", [42879]], [[42879, 42879], "valid"], [[42880, 42880], "mapped", [42881]], [[42881, 42881], "valid"], [[42882, 42882], "mapped", [42883]], [[42883, 42883], "valid"], [[42884, 42884], "mapped", [42885]], [[42885, 42885], "valid"], [[42886, 42886], "mapped", [42887]], [[42887, 42888], "valid"], [[42889, 42890], "valid", [], "NV8"], [[42891, 42891], "mapped", [42892]], [[42892, 42892], "valid"], [[42893, 42893], "mapped", [613]], [[42894, 42894], "valid"], [[42895, 42895], "valid"], [[42896, 42896], "mapped", [42897]], [[42897, 42897], "valid"], [[42898, 42898], "mapped", [42899]], [[42899, 42899], "valid"], [[42900, 42901], "valid"], [[42902, 42902], "mapped", [42903]], [[42903, 42903], "valid"], [[42904, 42904], "mapped", [42905]], [[42905, 42905], "valid"], [[42906, 42906], "mapped", [42907]], [[42907, 42907], "valid"], [[42908, 42908], "mapped", [42909]], [[42909, 42909], "valid"], [[42910, 42910], "mapped", [42911]], [[42911, 42911], "valid"], [[42912, 42912], "mapped", [42913]], [[42913, 42913], "valid"], [[42914, 42914], "mapped", [42915]], [[42915, 42915], "valid"], [[42916, 42916], "mapped", [42917]], [[42917, 42917], "valid"], [[42918, 42918], "mapped", [42919]], [[42919, 42919], "valid"], [[42920, 42920], "mapped", [42921]], [[42921, 42921], "valid"], [[42922, 42922], "mapped", [614]], [[42923, 42923], "mapped", [604]], [[42924, 42924], "mapped", [609]], [[42925, 42925], "mapped", [620]], [[42926, 42927], "disallowed"], [[42928, 42928], "mapped", [670]], [[42929, 42929], "mapped", [647]], [[42930, 42930], "mapped", [669]], [[42931, 42931], "mapped", [43859]], [[42932, 42932], "mapped", [42933]], [[42933, 42933], "valid"], [[42934, 42934], "mapped", [42935]], [[42935, 42935], "valid"], [[42936, 42998], "disallowed"], [[42999, 42999], "valid"], [[43e3, 43e3], "mapped", [295]], [[43001, 43001], "mapped", [339]], [[43002, 43002], "valid"], [[43003, 43007], "valid"], [[43008, 43047], "valid"], [[43048, 43051], "valid", [], "NV8"], [[43052, 43055], "disallowed"], [[43056, 43065], "valid", [], "NV8"], [[43066, 43071], "disallowed"], [[43072, 43123], "valid"], [[43124, 43127], "valid", [], "NV8"], [[43128, 43135], "disallowed"], [[43136, 43204], "valid"], [[43205, 43213], "disallowed"], [[43214, 43215], "valid", [], "NV8"], [[43216, 43225], "valid"], [[43226, 43231], "disallowed"], [[43232, 43255], "valid"], [[43256, 43258], "valid", [], "NV8"], [[43259, 43259], "valid"], [[43260, 43260], "valid", [], "NV8"], [[43261, 43261], "valid"], [[43262, 43263], "disallowed"], [[43264, 43309], "valid"], [[43310, 43311], "valid", [], "NV8"], [[43312, 43347], "valid"], [[43348, 43358], "disallowed"], [[43359, 43359], "valid", [], "NV8"], [[43360, 43388], "valid", [], "NV8"], [[43389, 43391], "disallowed"], [[43392, 43456], "valid"], [[43457, 43469], "valid", [], "NV8"], [[43470, 43470], "disallowed"], [[43471, 43481], "valid"], [[43482, 43485], "disallowed"], [[43486, 43487], "valid", [], "NV8"], [[43488, 43518], "valid"], [[43519, 43519], "disallowed"], [[43520, 43574], "valid"], [[43575, 43583], "disallowed"], [[43584, 43597], "valid"], [[43598, 43599], "disallowed"], [[43600, 43609], "valid"], [[43610, 43611], "disallowed"], [[43612, 43615], "valid", [], "NV8"], [[43616, 43638], "valid"], [[43639, 43641], "valid", [], "NV8"], [[43642, 43643], "valid"], [[43644, 43647], "valid"], [[43648, 43714], "valid"], [[43715, 43738], "disallowed"], [[43739, 43741], "valid"], [[43742, 43743], "valid", [], "NV8"], [[43744, 43759], "valid"], [[43760, 43761], "valid", [], "NV8"], [[43762, 43766], "valid"], [[43767, 43776], "disallowed"], [[43777, 43782], "valid"], [[43783, 43784], "disallowed"], [[43785, 43790], "valid"], [[43791, 43792], "disallowed"], [[43793, 43798], "valid"], [[43799, 43807], "disallowed"], [[43808, 43814], "valid"], [[43815, 43815], "disallowed"], [[43816, 43822], "valid"], [[43823, 43823], "disallowed"], [[43824, 43866], "valid"], [[43867, 43867], "valid", [], "NV8"], [[43868, 43868], "mapped", [42791]], [[43869, 43869], "mapped", [43831]], [[43870, 43870], "mapped", [619]], [[43871, 43871], "mapped", [43858]], [[43872, 43875], "valid"], [[43876, 43877], "valid"], [[43878, 43887], "disallowed"], [[43888, 43888], "mapped", [5024]], [[43889, 43889], "mapped", [5025]], [[43890, 43890], "mapped", [5026]], [[43891, 43891], "mapped", [5027]], [[43892, 43892], "mapped", [5028]], [[43893, 43893], "mapped", [5029]], [[43894, 43894], "mapped", [5030]], [[43895, 43895], "mapped", [5031]], [[43896, 43896], "mapped", [5032]], [[43897, 43897], "mapped", [5033]], [[43898, 43898], "mapped", [5034]], [[43899, 43899], "mapped", [5035]], [[43900, 43900], "mapped", [5036]], [[43901, 43901], "mapped", [5037]], [[43902, 43902], "mapped", [5038]], [[43903, 43903], "mapped", [5039]], [[43904, 43904], "mapped", [5040]], [[43905, 43905], "mapped", [5041]], [[43906, 43906], "mapped", [5042]], [[43907, 43907], "mapped", [5043]], [[43908, 43908], "mapped", [5044]], [[43909, 43909], "mapped", [5045]], [[43910, 43910], "mapped", [5046]], [[43911, 43911], "mapped", [5047]], [[43912, 43912], "mapped", [5048]], [[43913, 43913], "mapped", [5049]], [[43914, 43914], "mapped", [5050]], [[43915, 43915], "mapped", [5051]], [[43916, 43916], "mapped", [5052]], [[43917, 43917], "mapped", [5053]], [[43918, 43918], "mapped", [5054]], [[43919, 43919], "mapped", [5055]], [[43920, 43920], "mapped", [5056]], [[43921, 43921], "mapped", [5057]], [[43922, 43922], "mapped", [5058]], [[43923, 43923], "mapped", [5059]], [[43924, 43924], "mapped", [5060]], [[43925, 43925], "mapped", [5061]], [[43926, 43926], "mapped", [5062]], [[43927, 43927], "mapped", [5063]], [[43928, 43928], "mapped", [5064]], [[43929, 43929], "mapped", [5065]], [[43930, 43930], "mapped", [5066]], [[43931, 43931], "mapped", [5067]], [[43932, 43932], "mapped", [5068]], [[43933, 43933], "mapped", [5069]], [[43934, 43934], "mapped", [5070]], [[43935, 43935], "mapped", [5071]], [[43936, 43936], "mapped", [5072]], [[43937, 43937], "mapped", [5073]], [[43938, 43938], "mapped", [5074]], [[43939, 43939], "mapped", [5075]], [[43940, 43940], "mapped", [5076]], [[43941, 43941], "mapped", [5077]], [[43942, 43942], "mapped", [5078]], [[43943, 43943], "mapped", [5079]], [[43944, 43944], "mapped", [5080]], [[43945, 43945], "mapped", [5081]], [[43946, 43946], "mapped", [5082]], [[43947, 43947], "mapped", [5083]], [[43948, 43948], "mapped", [5084]], [[43949, 43949], "mapped", [5085]], [[43950, 43950], "mapped", [5086]], [[43951, 43951], "mapped", [5087]], [[43952, 43952], "mapped", [5088]], [[43953, 43953], "mapped", [5089]], [[43954, 43954], "mapped", [5090]], [[43955, 43955], "mapped", [5091]], [[43956, 43956], "mapped", [5092]], [[43957, 43957], "mapped", [5093]], [[43958, 43958], "mapped", [5094]], [[43959, 43959], "mapped", [5095]], [[43960, 43960], "mapped", [5096]], [[43961, 43961], "mapped", [5097]], [[43962, 43962], "mapped", [5098]], [[43963, 43963], "mapped", [5099]], [[43964, 43964], "mapped", [5100]], [[43965, 43965], "mapped", [5101]], [[43966, 43966], "mapped", [5102]], [[43967, 43967], "mapped", [5103]], [[43968, 44010], "valid"], [[44011, 44011], "valid", [], "NV8"], [[44012, 44013], "valid"], [[44014, 44015], "disallowed"], [[44016, 44025], "valid"], [[44026, 44031], "disallowed"], [[44032, 55203], "valid"], [[55204, 55215], "disallowed"], [[55216, 55238], "valid", [], "NV8"], [[55239, 55242], "disallowed"], [[55243, 55291], "valid", [], "NV8"], [[55292, 55295], "disallowed"], [[55296, 57343], "disallowed"], [[57344, 63743], "disallowed"], [[63744, 63744], "mapped", [35912]], [[63745, 63745], "mapped", [26356]], [[63746, 63746], "mapped", [36554]], [[63747, 63747], "mapped", [36040]], [[63748, 63748], "mapped", [28369]], [[63749, 63749], "mapped", [20018]], [[63750, 63750], "mapped", [21477]], [[63751, 63752], "mapped", [40860]], [[63753, 63753], "mapped", [22865]], [[63754, 63754], "mapped", [37329]], [[63755, 63755], "mapped", [21895]], [[63756, 63756], "mapped", [22856]], [[63757, 63757], "mapped", [25078]], [[63758, 63758], "mapped", [30313]], [[63759, 63759], "mapped", [32645]], [[63760, 63760], "mapped", [34367]], [[63761, 63761], "mapped", [34746]], [[63762, 63762], "mapped", [35064]], [[63763, 63763], "mapped", [37007]], [[63764, 63764], "mapped", [27138]], [[63765, 63765], "mapped", [27931]], [[63766, 63766], "mapped", [28889]], [[63767, 63767], "mapped", [29662]], [[63768, 63768], "mapped", [33853]], [[63769, 63769], "mapped", [37226]], [[63770, 63770], "mapped", [39409]], [[63771, 63771], "mapped", [20098]], [[63772, 63772], "mapped", [21365]], [[63773, 63773], "mapped", [27396]], [[63774, 63774], "mapped", [29211]], [[63775, 63775], "mapped", [34349]], [[63776, 63776], "mapped", [40478]], [[63777, 63777], "mapped", [23888]], [[63778, 63778], "mapped", [28651]], [[63779, 63779], "mapped", [34253]], [[63780, 63780], "mapped", [35172]], [[63781, 63781], "mapped", [25289]], [[63782, 63782], "mapped", [33240]], [[63783, 63783], "mapped", [34847]], [[63784, 63784], "mapped", [24266]], [[63785, 63785], "mapped", [26391]], [[63786, 63786], "mapped", [28010]], [[63787, 63787], "mapped", [29436]], [[63788, 63788], "mapped", [37070]], [[63789, 63789], "mapped", [20358]], [[63790, 63790], "mapped", [20919]], [[63791, 63791], "mapped", [21214]], [[63792, 63792], "mapped", [25796]], [[63793, 63793], "mapped", [27347]], [[63794, 63794], "mapped", [29200]], [[63795, 63795], "mapped", [30439]], [[63796, 63796], "mapped", [32769]], [[63797, 63797], "mapped", [34310]], [[63798, 63798], "mapped", [34396]], [[63799, 63799], "mapped", [36335]], [[63800, 63800], "mapped", [38706]], [[63801, 63801], "mapped", [39791]], [[63802, 63802], "mapped", [40442]], [[63803, 63803], "mapped", [30860]], [[63804, 63804], "mapped", [31103]], [[63805, 63805], "mapped", [32160]], [[63806, 63806], "mapped", [33737]], [[63807, 63807], "mapped", [37636]], [[63808, 63808], "mapped", [40575]], [[63809, 63809], "mapped", [35542]], [[63810, 63810], "mapped", [22751]], [[63811, 63811], "mapped", [24324]], [[63812, 63812], "mapped", [31840]], [[63813, 63813], "mapped", [32894]], [[63814, 63814], "mapped", [29282]], [[63815, 63815], "mapped", [30922]], [[63816, 63816], "mapped", [36034]], [[63817, 63817], "mapped", [38647]], [[63818, 63818], "mapped", [22744]], [[63819, 63819], "mapped", [23650]], [[63820, 63820], "mapped", [27155]], [[63821, 63821], "mapped", [28122]], [[63822, 63822], "mapped", [28431]], [[63823, 63823], "mapped", [32047]], [[63824, 63824], "mapped", [32311]], [[63825, 63825], "mapped", [38475]], [[63826, 63826], "mapped", [21202]], [[63827, 63827], "mapped", [32907]], [[63828, 63828], "mapped", [20956]], [[63829, 63829], "mapped", [20940]], [[63830, 63830], "mapped", [31260]], [[63831, 63831], "mapped", [32190]], [[63832, 63832], "mapped", [33777]], [[63833, 63833], "mapped", [38517]], [[63834, 63834], "mapped", [35712]], [[63835, 63835], "mapped", [25295]], [[63836, 63836], "mapped", [27138]], [[63837, 63837], "mapped", [35582]], [[63838, 63838], "mapped", [20025]], [[63839, 63839], "mapped", [23527]], [[63840, 63840], "mapped", [24594]], [[63841, 63841], "mapped", [29575]], [[63842, 63842], "mapped", [30064]], [[63843, 63843], "mapped", [21271]], [[63844, 63844], "mapped", [30971]], [[63845, 63845], "mapped", [20415]], [[63846, 63846], "mapped", [24489]], [[63847, 63847], "mapped", [19981]], [[63848, 63848], "mapped", [27852]], [[63849, 63849], "mapped", [25976]], [[63850, 63850], "mapped", [32034]], [[63851, 63851], "mapped", [21443]], [[63852, 63852], "mapped", [22622]], [[63853, 63853], "mapped", [30465]], [[63854, 63854], "mapped", [33865]], [[63855, 63855], "mapped", [35498]], [[63856, 63856], "mapped", [27578]], [[63857, 63857], "mapped", [36784]], [[63858, 63858], "mapped", [27784]], [[63859, 63859], "mapped", [25342]], [[63860, 63860], "mapped", [33509]], [[63861, 63861], "mapped", [25504]], [[63862, 63862], "mapped", [30053]], [[63863, 63863], "mapped", [20142]], [[63864, 63864], "mapped", [20841]], [[63865, 63865], "mapped", [20937]], [[63866, 63866], "mapped", [26753]], [[63867, 63867], "mapped", [31975]], [[63868, 63868], "mapped", [33391]], [[63869, 63869], "mapped", [35538]], [[63870, 63870], "mapped", [37327]], [[63871, 63871], "mapped", [21237]], [[63872, 63872], "mapped", [21570]], [[63873, 63873], "mapped", [22899]], [[63874, 63874], "mapped", [24300]], [[63875, 63875], "mapped", [26053]], [[63876, 63876], "mapped", [28670]], [[63877, 63877], "mapped", [31018]], [[63878, 63878], "mapped", [38317]], [[63879, 63879], "mapped", [39530]], [[63880, 63880], "mapped", [40599]], [[63881, 63881], "mapped", [40654]], [[63882, 63882], "mapped", [21147]], [[63883, 63883], "mapped", [26310]], [[63884, 63884], "mapped", [27511]], [[63885, 63885], "mapped", [36706]], [[63886, 63886], "mapped", [24180]], [[63887, 63887], "mapped", [24976]], [[63888, 63888], "mapped", [25088]], [[63889, 63889], "mapped", [25754]], [[63890, 63890], "mapped", [28451]], [[63891, 63891], "mapped", [29001]], [[63892, 63892], "mapped", [29833]], [[63893, 63893], "mapped", [31178]], [[63894, 63894], "mapped", [32244]], [[63895, 63895], "mapped", [32879]], [[63896, 63896], "mapped", [36646]], [[63897, 63897], "mapped", [34030]], [[63898, 63898], "mapped", [36899]], [[63899, 63899], "mapped", [37706]], [[63900, 63900], "mapped", [21015]], [[63901, 63901], "mapped", [21155]], [[63902, 63902], "mapped", [21693]], [[63903, 63903], "mapped", [28872]], [[63904, 63904], "mapped", [35010]], [[63905, 63905], "mapped", [35498]], [[63906, 63906], "mapped", [24265]], [[63907, 63907], "mapped", [24565]], [[63908, 63908], "mapped", [25467]], [[63909, 63909], "mapped", [27566]], [[63910, 63910], "mapped", [31806]], [[63911, 63911], "mapped", [29557]], [[63912, 63912], "mapped", [20196]], [[63913, 63913], "mapped", [22265]], [[63914, 63914], "mapped", [23527]], [[63915, 63915], "mapped", [23994]], [[63916, 63916], "mapped", [24604]], [[63917, 63917], "mapped", [29618]], [[63918, 63918], "mapped", [29801]], [[63919, 63919], "mapped", [32666]], [[63920, 63920], "mapped", [32838]], [[63921, 63921], "mapped", [37428]], [[63922, 63922], "mapped", [38646]], [[63923, 63923], "mapped", [38728]], [[63924, 63924], "mapped", [38936]], [[63925, 63925], "mapped", [20363]], [[63926, 63926], "mapped", [31150]], [[63927, 63927], "mapped", [37300]], [[63928, 63928], "mapped", [38584]], [[63929, 63929], "mapped", [24801]], [[63930, 63930], "mapped", [20102]], [[63931, 63931], "mapped", [20698]], [[63932, 63932], "mapped", [23534]], [[63933, 63933], "mapped", [23615]], [[63934, 63934], "mapped", [26009]], [[63935, 63935], "mapped", [27138]], [[63936, 63936], "mapped", [29134]], [[63937, 63937], "mapped", [30274]], [[63938, 63938], "mapped", [34044]], [[63939, 63939], "mapped", [36988]], [[63940, 63940], "mapped", [40845]], [[63941, 63941], "mapped", [26248]], [[63942, 63942], "mapped", [38446]], [[63943, 63943], "mapped", [21129]], [[63944, 63944], "mapped", [26491]], [[63945, 63945], "mapped", [26611]], [[63946, 63946], "mapped", [27969]], [[63947, 63947], "mapped", [28316]], [[63948, 63948], "mapped", [29705]], [[63949, 63949], "mapped", [30041]], [[63950, 63950], "mapped", [30827]], [[63951, 63951], "mapped", [32016]], [[63952, 63952], "mapped", [39006]], [[63953, 63953], "mapped", [20845]], [[63954, 63954], "mapped", [25134]], [[63955, 63955], "mapped", [38520]], [[63956, 63956], "mapped", [20523]], [[63957, 63957], "mapped", [23833]], [[63958, 63958], "mapped", [28138]], [[63959, 63959], "mapped", [36650]], [[63960, 63960], "mapped", [24459]], [[63961, 63961], "mapped", [24900]], [[63962, 63962], "mapped", [26647]], [[63963, 63963], "mapped", [29575]], [[63964, 63964], "mapped", [38534]], [[63965, 63965], "mapped", [21033]], [[63966, 63966], "mapped", [21519]], [[63967, 63967], "mapped", [23653]], [[63968, 63968], "mapped", [26131]], [[63969, 63969], "mapped", [26446]], [[63970, 63970], "mapped", [26792]], [[63971, 63971], "mapped", [27877]], [[63972, 63972], "mapped", [29702]], [[63973, 63973], "mapped", [30178]], [[63974, 63974], "mapped", [32633]], [[63975, 63975], "mapped", [35023]], [[63976, 63976], "mapped", [35041]], [[63977, 63977], "mapped", [37324]], [[63978, 63978], "mapped", [38626]], [[63979, 63979], "mapped", [21311]], [[63980, 63980], "mapped", [28346]], [[63981, 63981], "mapped", [21533]], [[63982, 63982], "mapped", [29136]], [[63983, 63983], "mapped", [29848]], [[63984, 63984], "mapped", [34298]], [[63985, 63985], "mapped", [38563]], [[63986, 63986], "mapped", [40023]], [[63987, 63987], "mapped", [40607]], [[63988, 63988], "mapped", [26519]], [[63989, 63989], "mapped", [28107]], [[63990, 63990], "mapped", [33256]], [[63991, 63991], "mapped", [31435]], [[63992, 63992], "mapped", [31520]], [[63993, 63993], "mapped", [31890]], [[63994, 63994], "mapped", [29376]], [[63995, 63995], "mapped", [28825]], [[63996, 63996], "mapped", [35672]], [[63997, 63997], "mapped", [20160]], [[63998, 63998], "mapped", [33590]], [[63999, 63999], "mapped", [21050]], [[64e3, 64e3], "mapped", [20999]], [[64001, 64001], "mapped", [24230]], [[64002, 64002], "mapped", [25299]], [[64003, 64003], "mapped", [31958]], [[64004, 64004], "mapped", [23429]], [[64005, 64005], "mapped", [27934]], [[64006, 64006], "mapped", [26292]], [[64007, 64007], "mapped", [36667]], [[64008, 64008], "mapped", [34892]], [[64009, 64009], "mapped", [38477]], [[64010, 64010], "mapped", [35211]], [[64011, 64011], "mapped", [24275]], [[64012, 64012], "mapped", [20800]], [[64013, 64013], "mapped", [21952]], [[64014, 64015], "valid"], [[64016, 64016], "mapped", [22618]], [[64017, 64017], "valid"], [[64018, 64018], "mapped", [26228]], [[64019, 64020], "valid"], [[64021, 64021], "mapped", [20958]], [[64022, 64022], "mapped", [29482]], [[64023, 64023], "mapped", [30410]], [[64024, 64024], "mapped", [31036]], [[64025, 64025], "mapped", [31070]], [[64026, 64026], "mapped", [31077]], [[64027, 64027], "mapped", [31119]], [[64028, 64028], "mapped", [38742]], [[64029, 64029], "mapped", [31934]], [[64030, 64030], "mapped", [32701]], [[64031, 64031], "valid"], [[64032, 64032], "mapped", [34322]], [[64033, 64033], "valid"], [[64034, 64034], "mapped", [35576]], [[64035, 64036], "valid"], [[64037, 64037], "mapped", [36920]], [[64038, 64038], "mapped", [37117]], [[64039, 64041], "valid"], [[64042, 64042], "mapped", [39151]], [[64043, 64043], "mapped", [39164]], [[64044, 64044], "mapped", [39208]], [[64045, 64045], "mapped", [40372]], [[64046, 64046], "mapped", [37086]], [[64047, 64047], "mapped", [38583]], [[64048, 64048], "mapped", [20398]], [[64049, 64049], "mapped", [20711]], [[64050, 64050], "mapped", [20813]], [[64051, 64051], "mapped", [21193]], [[64052, 64052], "mapped", [21220]], [[64053, 64053], "mapped", [21329]], [[64054, 64054], "mapped", [21917]], [[64055, 64055], "mapped", [22022]], [[64056, 64056], "mapped", [22120]], [[64057, 64057], "mapped", [22592]], [[64058, 64058], "mapped", [22696]], [[64059, 64059], "mapped", [23652]], [[64060, 64060], "mapped", [23662]], [[64061, 64061], "mapped", [24724]], [[64062, 64062], "mapped", [24936]], [[64063, 64063], "mapped", [24974]], [[64064, 64064], "mapped", [25074]], [[64065, 64065], "mapped", [25935]], [[64066, 64066], "mapped", [26082]], [[64067, 64067], "mapped", [26257]], [[64068, 64068], "mapped", [26757]], [[64069, 64069], "mapped", [28023]], [[64070, 64070], "mapped", [28186]], [[64071, 64071], "mapped", [28450]], [[64072, 64072], "mapped", [29038]], [[64073, 64073], "mapped", [29227]], [[64074, 64074], "mapped", [29730]], [[64075, 64075], "mapped", [30865]], [[64076, 64076], "mapped", [31038]], [[64077, 64077], "mapped", [31049]], [[64078, 64078], "mapped", [31048]], [[64079, 64079], "mapped", [31056]], [[64080, 64080], "mapped", [31062]], [[64081, 64081], "mapped", [31069]], [[64082, 64082], "mapped", [31117]], [[64083, 64083], "mapped", [31118]], [[64084, 64084], "mapped", [31296]], [[64085, 64085], "mapped", [31361]], [[64086, 64086], "mapped", [31680]], [[64087, 64087], "mapped", [32244]], [[64088, 64088], "mapped", [32265]], [[64089, 64089], "mapped", [32321]], [[64090, 64090], "mapped", [32626]], [[64091, 64091], "mapped", [32773]], [[64092, 64092], "mapped", [33261]], [[64093, 64094], "mapped", [33401]], [[64095, 64095], "mapped", [33879]], [[64096, 64096], "mapped", [35088]], [[64097, 64097], "mapped", [35222]], [[64098, 64098], "mapped", [35585]], [[64099, 64099], "mapped", [35641]], [[64100, 64100], "mapped", [36051]], [[64101, 64101], "mapped", [36104]], [[64102, 64102], "mapped", [36790]], [[64103, 64103], "mapped", [36920]], [[64104, 64104], "mapped", [38627]], [[64105, 64105], "mapped", [38911]], [[64106, 64106], "mapped", [38971]], [[64107, 64107], "mapped", [24693]], [[64108, 64108], "mapped", [148206]], [[64109, 64109], "mapped", [33304]], [[64110, 64111], "disallowed"], [[64112, 64112], "mapped", [20006]], [[64113, 64113], "mapped", [20917]], [[64114, 64114], "mapped", [20840]], [[64115, 64115], "mapped", [20352]], [[64116, 64116], "mapped", [20805]], [[64117, 64117], "mapped", [20864]], [[64118, 64118], "mapped", [21191]], [[64119, 64119], "mapped", [21242]], [[64120, 64120], "mapped", [21917]], [[64121, 64121], "mapped", [21845]], [[64122, 64122], "mapped", [21913]], [[64123, 64123], "mapped", [21986]], [[64124, 64124], "mapped", [22618]], [[64125, 64125], "mapped", [22707]], [[64126, 64126], "mapped", [22852]], [[64127, 64127], "mapped", [22868]], [[64128, 64128], "mapped", [23138]], [[64129, 64129], "mapped", [23336]], [[64130, 64130], "mapped", [24274]], [[64131, 64131], "mapped", [24281]], [[64132, 64132], "mapped", [24425]], [[64133, 64133], "mapped", [24493]], [[64134, 64134], "mapped", [24792]], [[64135, 64135], "mapped", [24910]], [[64136, 64136], "mapped", [24840]], [[64137, 64137], "mapped", [24974]], [[64138, 64138], "mapped", [24928]], [[64139, 64139], "mapped", [25074]], [[64140, 64140], "mapped", [25140]], [[64141, 64141], "mapped", [25540]], [[64142, 64142], "mapped", [25628]], [[64143, 64143], "mapped", [25682]], [[64144, 64144], "mapped", [25942]], [[64145, 64145], "mapped", [26228]], [[64146, 64146], "mapped", [26391]], [[64147, 64147], "mapped", [26395]], [[64148, 64148], "mapped", [26454]], [[64149, 64149], "mapped", [27513]], [[64150, 64150], "mapped", [27578]], [[64151, 64151], "mapped", [27969]], [[64152, 64152], "mapped", [28379]], [[64153, 64153], "mapped", [28363]], [[64154, 64154], "mapped", [28450]], [[64155, 64155], "mapped", [28702]], [[64156, 64156], "mapped", [29038]], [[64157, 64157], "mapped", [30631]], [[64158, 64158], "mapped", [29237]], [[64159, 64159], "mapped", [29359]], [[64160, 64160], "mapped", [29482]], [[64161, 64161], "mapped", [29809]], [[64162, 64162], "mapped", [29958]], [[64163, 64163], "mapped", [30011]], [[64164, 64164], "mapped", [30237]], [[64165, 64165], "mapped", [30239]], [[64166, 64166], "mapped", [30410]], [[64167, 64167], "mapped", [30427]], [[64168, 64168], "mapped", [30452]], [[64169, 64169], "mapped", [30538]], [[64170, 64170], "mapped", [30528]], [[64171, 64171], "mapped", [30924]], [[64172, 64172], "mapped", [31409]], [[64173, 64173], "mapped", [31680]], [[64174, 64174], "mapped", [31867]], [[64175, 64175], "mapped", [32091]], [[64176, 64176], "mapped", [32244]], [[64177, 64177], "mapped", [32574]], [[64178, 64178], "mapped", [32773]], [[64179, 64179], "mapped", [33618]], [[64180, 64180], "mapped", [33775]], [[64181, 64181], "mapped", [34681]], [[64182, 64182], "mapped", [35137]], [[64183, 64183], "mapped", [35206]], [[64184, 64184], "mapped", [35222]], [[64185, 64185], "mapped", [35519]], [[64186, 64186], "mapped", [35576]], [[64187, 64187], "mapped", [35531]], [[64188, 64188], "mapped", [35585]], [[64189, 64189], "mapped", [35582]], [[64190, 64190], "mapped", [35565]], [[64191, 64191], "mapped", [35641]], [[64192, 64192], "mapped", [35722]], [[64193, 64193], "mapped", [36104]], [[64194, 64194], "mapped", [36664]], [[64195, 64195], "mapped", [36978]], [[64196, 64196], "mapped", [37273]], [[64197, 64197], "mapped", [37494]], [[64198, 64198], "mapped", [38524]], [[64199, 64199], "mapped", [38627]], [[64200, 64200], "mapped", [38742]], [[64201, 64201], "mapped", [38875]], [[64202, 64202], "mapped", [38911]], [[64203, 64203], "mapped", [38923]], [[64204, 64204], "mapped", [38971]], [[64205, 64205], "mapped", [39698]], [[64206, 64206], "mapped", [40860]], [[64207, 64207], "mapped", [141386]], [[64208, 64208], "mapped", [141380]], [[64209, 64209], "mapped", [144341]], [[64210, 64210], "mapped", [15261]], [[64211, 64211], "mapped", [16408]], [[64212, 64212], "mapped", [16441]], [[64213, 64213], "mapped", [152137]], [[64214, 64214], "mapped", [154832]], [[64215, 64215], "mapped", [163539]], [[64216, 64216], "mapped", [40771]], [[64217, 64217], "mapped", [40846]], [[64218, 64255], "disallowed"], [[64256, 64256], "mapped", [102, 102]], [[64257, 64257], "mapped", [102, 105]], [[64258, 64258], "mapped", [102, 108]], [[64259, 64259], "mapped", [102, 102, 105]], [[64260, 64260], "mapped", [102, 102, 108]], [[64261, 64262], "mapped", [115, 116]], [[64263, 64274], "disallowed"], [[64275, 64275], "mapped", [1396, 1398]], [[64276, 64276], "mapped", [1396, 1381]], [[64277, 64277], "mapped", [1396, 1387]], [[64278, 64278], "mapped", [1406, 1398]], [[64279, 64279], "mapped", [1396, 1389]], [[64280, 64284], "disallowed"], [[64285, 64285], "mapped", [1497, 1460]], [[64286, 64286], "valid"], [[64287, 64287], "mapped", [1522, 1463]], [[64288, 64288], "mapped", [1506]], [[64289, 64289], "mapped", [1488]], [[64290, 64290], "mapped", [1491]], [[64291, 64291], "mapped", [1492]], [[64292, 64292], "mapped", [1499]], [[64293, 64293], "mapped", [1500]], [[64294, 64294], "mapped", [1501]], [[64295, 64295], "mapped", [1512]], [[64296, 64296], "mapped", [1514]], [[64297, 64297], "disallowed_STD3_mapped", [43]], [[64298, 64298], "mapped", [1513, 1473]], [[64299, 64299], "mapped", [1513, 1474]], [[64300, 64300], "mapped", [1513, 1468, 1473]], [[64301, 64301], "mapped", [1513, 1468, 1474]], [[64302, 64302], "mapped", [1488, 1463]], [[64303, 64303], "mapped", [1488, 1464]], [[64304, 64304], "mapped", [1488, 1468]], [[64305, 64305], "mapped", [1489, 1468]], [[64306, 64306], "mapped", [1490, 1468]], [[64307, 64307], "mapped", [1491, 1468]], [[64308, 64308], "mapped", [1492, 1468]], [[64309, 64309], "mapped", [1493, 1468]], [[64310, 64310], "mapped", [1494, 1468]], [[64311, 64311], "disallowed"], [[64312, 64312], "mapped", [1496, 1468]], [[64313, 64313], "mapped", [1497, 1468]], [[64314, 64314], "mapped", [1498, 1468]], [[64315, 64315], "mapped", [1499, 1468]], [[64316, 64316], "mapped", [1500, 1468]], [[64317, 64317], "disallowed"], [[64318, 64318], "mapped", [1502, 1468]], [[64319, 64319], "disallowed"], [[64320, 64320], "mapped", [1504, 1468]], [[64321, 64321], "mapped", [1505, 1468]], [[64322, 64322], "disallowed"], [[64323, 64323], "mapped", [1507, 1468]], [[64324, 64324], "mapped", [1508, 1468]], [[64325, 64325], "disallowed"], [[64326, 64326], "mapped", [1510, 1468]], [[64327, 64327], "mapped", [1511, 1468]], [[64328, 64328], "mapped", [1512, 1468]], [[64329, 64329], "mapped", [1513, 1468]], [[64330, 64330], "mapped", [1514, 1468]], [[64331, 64331], "mapped", [1493, 1465]], [[64332, 64332], "mapped", [1489, 1471]], [[64333, 64333], "mapped", [1499, 1471]], [[64334, 64334], "mapped", [1508, 1471]], [[64335, 64335], "mapped", [1488, 1500]], [[64336, 64337], "mapped", [1649]], [[64338, 64341], "mapped", [1659]], [[64342, 64345], "mapped", [1662]], [[64346, 64349], "mapped", [1664]], [[64350, 64353], "mapped", [1658]], [[64354, 64357], "mapped", [1663]], [[64358, 64361], "mapped", [1657]], [[64362, 64365], "mapped", [1700]], [[64366, 64369], "mapped", [1702]], [[64370, 64373], "mapped", [1668]], [[64374, 64377], "mapped", [1667]], [[64378, 64381], "mapped", [1670]], [[64382, 64385], "mapped", [1671]], [[64386, 64387], "mapped", [1677]], [[64388, 64389], "mapped", [1676]], [[64390, 64391], "mapped", [1678]], [[64392, 64393], "mapped", [1672]], [[64394, 64395], "mapped", [1688]], [[64396, 64397], "mapped", [1681]], [[64398, 64401], "mapped", [1705]], [[64402, 64405], "mapped", [1711]], [[64406, 64409], "mapped", [1715]], [[64410, 64413], "mapped", [1713]], [[64414, 64415], "mapped", [1722]], [[64416, 64419], "mapped", [1723]], [[64420, 64421], "mapped", [1728]], [[64422, 64425], "mapped", [1729]], [[64426, 64429], "mapped", [1726]], [[64430, 64431], "mapped", [1746]], [[64432, 64433], "mapped", [1747]], [[64434, 64449], "valid", [], "NV8"], [[64450, 64466], "disallowed"], [[64467, 64470], "mapped", [1709]], [[64471, 64472], "mapped", [1735]], [[64473, 64474], "mapped", [1734]], [[64475, 64476], "mapped", [1736]], [[64477, 64477], "mapped", [1735, 1652]], [[64478, 64479], "mapped", [1739]], [[64480, 64481], "mapped", [1733]], [[64482, 64483], "mapped", [1737]], [[64484, 64487], "mapped", [1744]], [[64488, 64489], "mapped", [1609]], [[64490, 64491], "mapped", [1574, 1575]], [[64492, 64493], "mapped", [1574, 1749]], [[64494, 64495], "mapped", [1574, 1608]], [[64496, 64497], "mapped", [1574, 1735]], [[64498, 64499], "mapped", [1574, 1734]], [[64500, 64501], "mapped", [1574, 1736]], [[64502, 64504], "mapped", [1574, 1744]], [[64505, 64507], "mapped", [1574, 1609]], [[64508, 64511], "mapped", [1740]], [[64512, 64512], "mapped", [1574, 1580]], [[64513, 64513], "mapped", [1574, 1581]], [[64514, 64514], "mapped", [1574, 1605]], [[64515, 64515], "mapped", [1574, 1609]], [[64516, 64516], "mapped", [1574, 1610]], [[64517, 64517], "mapped", [1576, 1580]], [[64518, 64518], "mapped", [1576, 1581]], [[64519, 64519], "mapped", [1576, 1582]], [[64520, 64520], "mapped", [1576, 1605]], [[64521, 64521], "mapped", [1576, 1609]], [[64522, 64522], "mapped", [1576, 1610]], [[64523, 64523], "mapped", [1578, 1580]], [[64524, 64524], "mapped", [1578, 1581]], [[64525, 64525], "mapped", [1578, 1582]], [[64526, 64526], "mapped", [1578, 1605]], [[64527, 64527], "mapped", [1578, 1609]], [[64528, 64528], "mapped", [1578, 1610]], [[64529, 64529], "mapped", [1579, 1580]], [[64530, 64530], "mapped", [1579, 1605]], [[64531, 64531], "mapped", [1579, 1609]], [[64532, 64532], "mapped", [1579, 1610]], [[64533, 64533], "mapped", [1580, 1581]], [[64534, 64534], "mapped", [1580, 1605]], [[64535, 64535], "mapped", [1581, 1580]], [[64536, 64536], "mapped", [1581, 1605]], [[64537, 64537], "mapped", [1582, 1580]], [[64538, 64538], "mapped", [1582, 1581]], [[64539, 64539], "mapped", [1582, 1605]], [[64540, 64540], "mapped", [1587, 1580]], [[64541, 64541], "mapped", [1587, 1581]], [[64542, 64542], "mapped", [1587, 1582]], [[64543, 64543], "mapped", [1587, 1605]], [[64544, 64544], "mapped", [1589, 1581]], [[64545, 64545], "mapped", [1589, 1605]], [[64546, 64546], "mapped", [1590, 1580]], [[64547, 64547], "mapped", [1590, 1581]], [[64548, 64548], "mapped", [1590, 1582]], [[64549, 64549], "mapped", [1590, 1605]], [[64550, 64550], "mapped", [1591, 1581]], [[64551, 64551], "mapped", [1591, 1605]], [[64552, 64552], "mapped", [1592, 1605]], [[64553, 64553], "mapped", [1593, 1580]], [[64554, 64554], "mapped", [1593, 1605]], [[64555, 64555], "mapped", [1594, 1580]], [[64556, 64556], "mapped", [1594, 1605]], [[64557, 64557], "mapped", [1601, 1580]], [[64558, 64558], "mapped", [1601, 1581]], [[64559, 64559], "mapped", [1601, 1582]], [[64560, 64560], "mapped", [1601, 1605]], [[64561, 64561], "mapped", [1601, 1609]], [[64562, 64562], "mapped", [1601, 1610]], [[64563, 64563], "mapped", [1602, 1581]], [[64564, 64564], "mapped", [1602, 1605]], [[64565, 64565], "mapped", [1602, 1609]], [[64566, 64566], "mapped", [1602, 1610]], [[64567, 64567], "mapped", [1603, 1575]], [[64568, 64568], "mapped", [1603, 1580]], [[64569, 64569], "mapped", [1603, 1581]], [[64570, 64570], "mapped", [1603, 1582]], [[64571, 64571], "mapped", [1603, 1604]], [[64572, 64572], "mapped", [1603, 1605]], [[64573, 64573], "mapped", [1603, 1609]], [[64574, 64574], "mapped", [1603, 1610]], [[64575, 64575], "mapped", [1604, 1580]], [[64576, 64576], "mapped", [1604, 1581]], [[64577, 64577], "mapped", [1604, 1582]], [[64578, 64578], "mapped", [1604, 1605]], [[64579, 64579], "mapped", [1604, 1609]], [[64580, 64580], "mapped", [1604, 1610]], [[64581, 64581], "mapped", [1605, 1580]], [[64582, 64582], "mapped", [1605, 1581]], [[64583, 64583], "mapped", [1605, 1582]], [[64584, 64584], "mapped", [1605, 1605]], [[64585, 64585], "mapped", [1605, 1609]], [[64586, 64586], "mapped", [1605, 1610]], [[64587, 64587], "mapped", [1606, 1580]], [[64588, 64588], "mapped", [1606, 1581]], [[64589, 64589], "mapped", [1606, 1582]], [[64590, 64590], "mapped", [1606, 1605]], [[64591, 64591], "mapped", [1606, 1609]], [[64592, 64592], "mapped", [1606, 1610]], [[64593, 64593], "mapped", [1607, 1580]], [[64594, 64594], "mapped", [1607, 1605]], [[64595, 64595], "mapped", [1607, 1609]], [[64596, 64596], "mapped", [1607, 1610]], [[64597, 64597], "mapped", [1610, 1580]], [[64598, 64598], "mapped", [1610, 1581]], [[64599, 64599], "mapped", [1610, 1582]], [[64600, 64600], "mapped", [1610, 1605]], [[64601, 64601], "mapped", [1610, 1609]], [[64602, 64602], "mapped", [1610, 1610]], [[64603, 64603], "mapped", [1584, 1648]], [[64604, 64604], "mapped", [1585, 1648]], [[64605, 64605], "mapped", [1609, 1648]], [[64606, 64606], "disallowed_STD3_mapped", [32, 1612, 1617]], [[64607, 64607], "disallowed_STD3_mapped", [32, 1613, 1617]], [[64608, 64608], "disallowed_STD3_mapped", [32, 1614, 1617]], [[64609, 64609], "disallowed_STD3_mapped", [32, 1615, 1617]], [[64610, 64610], "disallowed_STD3_mapped", [32, 1616, 1617]], [[64611, 64611], "disallowed_STD3_mapped", [32, 1617, 1648]], [[64612, 64612], "mapped", [1574, 1585]], [[64613, 64613], "mapped", [1574, 1586]], [[64614, 64614], "mapped", [1574, 1605]], [[64615, 64615], "mapped", [1574, 1606]], [[64616, 64616], "mapped", [1574, 1609]], [[64617, 64617], "mapped", [1574, 1610]], [[64618, 64618], "mapped", [1576, 1585]], [[64619, 64619], "mapped", [1576, 1586]], [[64620, 64620], "mapped", [1576, 1605]], [[64621, 64621], "mapped", [1576, 1606]], [[64622, 64622], "mapped", [1576, 1609]], [[64623, 64623], "mapped", [1576, 1610]], [[64624, 64624], "mapped", [1578, 1585]], [[64625, 64625], "mapped", [1578, 1586]], [[64626, 64626], "mapped", [1578, 1605]], [[64627, 64627], "mapped", [1578, 1606]], [[64628, 64628], "mapped", [1578, 1609]], [[64629, 64629], "mapped", [1578, 1610]], [[64630, 64630], "mapped", [1579, 1585]], [[64631, 64631], "mapped", [1579, 1586]], [[64632, 64632], "mapped", [1579, 1605]], [[64633, 64633], "mapped", [1579, 1606]], [[64634, 64634], "mapped", [1579, 1609]], [[64635, 64635], "mapped", [1579, 1610]], [[64636, 64636], "mapped", [1601, 1609]], [[64637, 64637], "mapped", [1601, 1610]], [[64638, 64638], "mapped", [1602, 1609]], [[64639, 64639], "mapped", [1602, 1610]], [[64640, 64640], "mapped", [1603, 1575]], [[64641, 64641], "mapped", [1603, 1604]], [[64642, 64642], "mapped", [1603, 1605]], [[64643, 64643], "mapped", [1603, 1609]], [[64644, 64644], "mapped", [1603, 1610]], [[64645, 64645], "mapped", [1604, 1605]], [[64646, 64646], "mapped", [1604, 1609]], [[64647, 64647], "mapped", [1604, 1610]], [[64648, 64648], "mapped", [1605, 1575]], [[64649, 64649], "mapped", [1605, 1605]], [[64650, 64650], "mapped", [1606, 1585]], [[64651, 64651], "mapped", [1606, 1586]], [[64652, 64652], "mapped", [1606, 1605]], [[64653, 64653], "mapped", [1606, 1606]], [[64654, 64654], "mapped", [1606, 1609]], [[64655, 64655], "mapped", [1606, 1610]], [[64656, 64656], "mapped", [1609, 1648]], [[64657, 64657], "mapped", [1610, 1585]], [[64658, 64658], "mapped", [1610, 1586]], [[64659, 64659], "mapped", [1610, 1605]], [[64660, 64660], "mapped", [1610, 1606]], [[64661, 64661], "mapped", [1610, 1609]], [[64662, 64662], "mapped", [1610, 1610]], [[64663, 64663], "mapped", [1574, 1580]], [[64664, 64664], "mapped", [1574, 1581]], [[64665, 64665], "mapped", [1574, 1582]], [[64666, 64666], "mapped", [1574, 1605]], [[64667, 64667], "mapped", [1574, 1607]], [[64668, 64668], "mapped", [1576, 1580]], [[64669, 64669], "mapped", [1576, 1581]], [[64670, 64670], "mapped", [1576, 1582]], [[64671, 64671], "mapped", [1576, 1605]], [[64672, 64672], "mapped", [1576, 1607]], [[64673, 64673], "mapped", [1578, 1580]], [[64674, 64674], "mapped", [1578, 1581]], [[64675, 64675], "mapped", [1578, 1582]], [[64676, 64676], "mapped", [1578, 1605]], [[64677, 64677], "mapped", [1578, 1607]], [[64678, 64678], "mapped", [1579, 1605]], [[64679, 64679], "mapped", [1580, 1581]], [[64680, 64680], "mapped", [1580, 1605]], [[64681, 64681], "mapped", [1581, 1580]], [[64682, 64682], "mapped", [1581, 1605]], [[64683, 64683], "mapped", [1582, 1580]], [[64684, 64684], "mapped", [1582, 1605]], [[64685, 64685], "mapped", [1587, 1580]], [[64686, 64686], "mapped", [1587, 1581]], [[64687, 64687], "mapped", [1587, 1582]], [[64688, 64688], "mapped", [1587, 1605]], [[64689, 64689], "mapped", [1589, 1581]], [[64690, 64690], "mapped", [1589, 1582]], [[64691, 64691], "mapped", [1589, 1605]], [[64692, 64692], "mapped", [1590, 1580]], [[64693, 64693], "mapped", [1590, 1581]], [[64694, 64694], "mapped", [1590, 1582]], [[64695, 64695], "mapped", [1590, 1605]], [[64696, 64696], "mapped", [1591, 1581]], [[64697, 64697], "mapped", [1592, 1605]], [[64698, 64698], "mapped", [1593, 1580]], [[64699, 64699], "mapped", [1593, 1605]], [[64700, 64700], "mapped", [1594, 1580]], [[64701, 64701], "mapped", [1594, 1605]], [[64702, 64702], "mapped", [1601, 1580]], [[64703, 64703], "mapped", [1601, 1581]], [[64704, 64704], "mapped", [1601, 1582]], [[64705, 64705], "mapped", [1601, 1605]], [[64706, 64706], "mapped", [1602, 1581]], [[64707, 64707], "mapped", [1602, 1605]], [[64708, 64708], "mapped", [1603, 1580]], [[64709, 64709], "mapped", [1603, 1581]], [[64710, 64710], "mapped", [1603, 1582]], [[64711, 64711], "mapped", [1603, 1604]], [[64712, 64712], "mapped", [1603, 1605]], [[64713, 64713], "mapped", [1604, 1580]], [[64714, 64714], "mapped", [1604, 1581]], [[64715, 64715], "mapped", [1604, 1582]], [[64716, 64716], "mapped", [1604, 1605]], [[64717, 64717], "mapped", [1604, 1607]], [[64718, 64718], "mapped", [1605, 1580]], [[64719, 64719], "mapped", [1605, 1581]], [[64720, 64720], "mapped", [1605, 1582]], [[64721, 64721], "mapped", [1605, 1605]], [[64722, 64722], "mapped", [1606, 1580]], [[64723, 64723], "mapped", [1606, 1581]], [[64724, 64724], "mapped", [1606, 1582]], [[64725, 64725], "mapped", [1606, 1605]], [[64726, 64726], "mapped", [1606, 1607]], [[64727, 64727], "mapped", [1607, 1580]], [[64728, 64728], "mapped", [1607, 1605]], [[64729, 64729], "mapped", [1607, 1648]], [[64730, 64730], "mapped", [1610, 1580]], [[64731, 64731], "mapped", [1610, 1581]], [[64732, 64732], "mapped", [1610, 1582]], [[64733, 64733], "mapped", [1610, 1605]], [[64734, 64734], "mapped", [1610, 1607]], [[64735, 64735], "mapped", [1574, 1605]], [[64736, 64736], "mapped", [1574, 1607]], [[64737, 64737], "mapped", [1576, 1605]], [[64738, 64738], "mapped", [1576, 1607]], [[64739, 64739], "mapped", [1578, 1605]], [[64740, 64740], "mapped", [1578, 1607]], [[64741, 64741], "mapped", [1579, 1605]], [[64742, 64742], "mapped", [1579, 1607]], [[64743, 64743], "mapped", [1587, 1605]], [[64744, 64744], "mapped", [1587, 1607]], [[64745, 64745], "mapped", [1588, 1605]], [[64746, 64746], "mapped", [1588, 1607]], [[64747, 64747], "mapped", [1603, 1604]], [[64748, 64748], "mapped", [1603, 1605]], [[64749, 64749], "mapped", [1604, 1605]], [[64750, 64750], "mapped", [1606, 1605]], [[64751, 64751], "mapped", [1606, 1607]], [[64752, 64752], "mapped", [1610, 1605]], [[64753, 64753], "mapped", [1610, 1607]], [[64754, 64754], "mapped", [1600, 1614, 1617]], [[64755, 64755], "mapped", [1600, 1615, 1617]], [[64756, 64756], "mapped", [1600, 1616, 1617]], [[64757, 64757], "mapped", [1591, 1609]], [[64758, 64758], "mapped", [1591, 1610]], [[64759, 64759], "mapped", [1593, 1609]], [[64760, 64760], "mapped", [1593, 1610]], [[64761, 64761], "mapped", [1594, 1609]], [[64762, 64762], "mapped", [1594, 1610]], [[64763, 64763], "mapped", [1587, 1609]], [[64764, 64764], "mapped", [1587, 1610]], [[64765, 64765], "mapped", [1588, 1609]], [[64766, 64766], "mapped", [1588, 1610]], [[64767, 64767], "mapped", [1581, 1609]], [[64768, 64768], "mapped", [1581, 1610]], [[64769, 64769], "mapped", [1580, 1609]], [[64770, 64770], "mapped", [1580, 1610]], [[64771, 64771], "mapped", [1582, 1609]], [[64772, 64772], "mapped", [1582, 1610]], [[64773, 64773], "mapped", [1589, 1609]], [[64774, 64774], "mapped", [1589, 1610]], [[64775, 64775], "mapped", [1590, 1609]], [[64776, 64776], "mapped", [1590, 1610]], [[64777, 64777], "mapped", [1588, 1580]], [[64778, 64778], "mapped", [1588, 1581]], [[64779, 64779], "mapped", [1588, 1582]], [[64780, 64780], "mapped", [1588, 1605]], [[64781, 64781], "mapped", [1588, 1585]], [[64782, 64782], "mapped", [1587, 1585]], [[64783, 64783], "mapped", [1589, 1585]], [[64784, 64784], "mapped", [1590, 1585]], [[64785, 64785], "mapped", [1591, 1609]], [[64786, 64786], "mapped", [1591, 1610]], [[64787, 64787], "mapped", [1593, 1609]], [[64788, 64788], "mapped", [1593, 1610]], [[64789, 64789], "mapped", [1594, 1609]], [[64790, 64790], "mapped", [1594, 1610]], [[64791, 64791], "mapped", [1587, 1609]], [[64792, 64792], "mapped", [1587, 1610]], [[64793, 64793], "mapped", [1588, 1609]], [[64794, 64794], "mapped", [1588, 1610]], [[64795, 64795], "mapped", [1581, 1609]], [[64796, 64796], "mapped", [1581, 1610]], [[64797, 64797], "mapped", [1580, 1609]], [[64798, 64798], "mapped", [1580, 1610]], [[64799, 64799], "mapped", [1582, 1609]], [[64800, 64800], "mapped", [1582, 1610]], [[64801, 64801], "mapped", [1589, 1609]], [[64802, 64802], "mapped", [1589, 1610]], [[64803, 64803], "mapped", [1590, 1609]], [[64804, 64804], "mapped", [1590, 1610]], [[64805, 64805], "mapped", [1588, 1580]], [[64806, 64806], "mapped", [1588, 1581]], [[64807, 64807], "mapped", [1588, 1582]], [[64808, 64808], "mapped", [1588, 1605]], [[64809, 64809], "mapped", [1588, 1585]], [[64810, 64810], "mapped", [1587, 1585]], [[64811, 64811], "mapped", [1589, 1585]], [[64812, 64812], "mapped", [1590, 1585]], [[64813, 64813], "mapped", [1588, 1580]], [[64814, 64814], "mapped", [1588, 1581]], [[64815, 64815], "mapped", [1588, 1582]], [[64816, 64816], "mapped", [1588, 1605]], [[64817, 64817], "mapped", [1587, 1607]], [[64818, 64818], "mapped", [1588, 1607]], [[64819, 64819], "mapped", [1591, 1605]], [[64820, 64820], "mapped", [1587, 1580]], [[64821, 64821], "mapped", [1587, 1581]], [[64822, 64822], "mapped", [1587, 1582]], [[64823, 64823], "mapped", [1588, 1580]], [[64824, 64824], "mapped", [1588, 1581]], [[64825, 64825], "mapped", [1588, 1582]], [[64826, 64826], "mapped", [1591, 1605]], [[64827, 64827], "mapped", [1592, 1605]], [[64828, 64829], "mapped", [1575, 1611]], [[64830, 64831], "valid", [], "NV8"], [[64832, 64847], "disallowed"], [[64848, 64848], "mapped", [1578, 1580, 1605]], [[64849, 64850], "mapped", [1578, 1581, 1580]], [[64851, 64851], "mapped", [1578, 1581, 1605]], [[64852, 64852], "mapped", [1578, 1582, 1605]], [[64853, 64853], "mapped", [1578, 1605, 1580]], [[64854, 64854], "mapped", [1578, 1605, 1581]], [[64855, 64855], "mapped", [1578, 1605, 1582]], [[64856, 64857], "mapped", [1580, 1605, 1581]], [[64858, 64858], "mapped", [1581, 1605, 1610]], [[64859, 64859], "mapped", [1581, 1605, 1609]], [[64860, 64860], "mapped", [1587, 1581, 1580]], [[64861, 64861], "mapped", [1587, 1580, 1581]], [[64862, 64862], "mapped", [1587, 1580, 1609]], [[64863, 64864], "mapped", [1587, 1605, 1581]], [[64865, 64865], "mapped", [1587, 1605, 1580]], [[64866, 64867], "mapped", [1587, 1605, 1605]], [[64868, 64869], "mapped", [1589, 1581, 1581]], [[64870, 64870], "mapped", [1589, 1605, 1605]], [[64871, 64872], "mapped", [1588, 1581, 1605]], [[64873, 64873], "mapped", [1588, 1580, 1610]], [[64874, 64875], "mapped", [1588, 1605, 1582]], [[64876, 64877], "mapped", [1588, 1605, 1605]], [[64878, 64878], "mapped", [1590, 1581, 1609]], [[64879, 64880], "mapped", [1590, 1582, 1605]], [[64881, 64882], "mapped", [1591, 1605, 1581]], [[64883, 64883], "mapped", [1591, 1605, 1605]], [[64884, 64884], "mapped", [1591, 1605, 1610]], [[64885, 64885], "mapped", [1593, 1580, 1605]], [[64886, 64887], "mapped", [1593, 1605, 1605]], [[64888, 64888], "mapped", [1593, 1605, 1609]], [[64889, 64889], "mapped", [1594, 1605, 1605]], [[64890, 64890], "mapped", [1594, 1605, 1610]], [[64891, 64891], "mapped", [1594, 1605, 1609]], [[64892, 64893], "mapped", [1601, 1582, 1605]], [[64894, 64894], "mapped", [1602, 1605, 1581]], [[64895, 64895], "mapped", [1602, 1605, 1605]], [[64896, 64896], "mapped", [1604, 1581, 1605]], [[64897, 64897], "mapped", [1604, 1581, 1610]], [[64898, 64898], "mapped", [1604, 1581, 1609]], [[64899, 64900], "mapped", [1604, 1580, 1580]], [[64901, 64902], "mapped", [1604, 1582, 1605]], [[64903, 64904], "mapped", [1604, 1605, 1581]], [[64905, 64905], "mapped", [1605, 1581, 1580]], [[64906, 64906], "mapped", [1605, 1581, 1605]], [[64907, 64907], "mapped", [1605, 1581, 1610]], [[64908, 64908], "mapped", [1605, 1580, 1581]], [[64909, 64909], "mapped", [1605, 1580, 1605]], [[64910, 64910], "mapped", [1605, 1582, 1580]], [[64911, 64911], "mapped", [1605, 1582, 1605]], [[64912, 64913], "disallowed"], [[64914, 64914], "mapped", [1605, 1580, 1582]], [[64915, 64915], "mapped", [1607, 1605, 1580]], [[64916, 64916], "mapped", [1607, 1605, 1605]], [[64917, 64917], "mapped", [1606, 1581, 1605]], [[64918, 64918], "mapped", [1606, 1581, 1609]], [[64919, 64920], "mapped", [1606, 1580, 1605]], [[64921, 64921], "mapped", [1606, 1580, 1609]], [[64922, 64922], "mapped", [1606, 1605, 1610]], [[64923, 64923], "mapped", [1606, 1605, 1609]], [[64924, 64925], "mapped", [1610, 1605, 1605]], [[64926, 64926], "mapped", [1576, 1582, 1610]], [[64927, 64927], "mapped", [1578, 1580, 1610]], [[64928, 64928], "mapped", [1578, 1580, 1609]], [[64929, 64929], "mapped", [1578, 1582, 1610]], [[64930, 64930], "mapped", [1578, 1582, 1609]], [[64931, 64931], "mapped", [1578, 1605, 1610]], [[64932, 64932], "mapped", [1578, 1605, 1609]], [[64933, 64933], "mapped", [1580, 1605, 1610]], [[64934, 64934], "mapped", [1580, 1581, 1609]], [[64935, 64935], "mapped", [1580, 1605, 1609]], [[64936, 64936], "mapped", [1587, 1582, 1609]], [[64937, 64937], "mapped", [1589, 1581, 1610]], [[64938, 64938], "mapped", [1588, 1581, 1610]], [[64939, 64939], "mapped", [1590, 1581, 1610]], [[64940, 64940], "mapped", [1604, 1580, 1610]], [[64941, 64941], "mapped", [1604, 1605, 1610]], [[64942, 64942], "mapped", [1610, 1581, 1610]], [[64943, 64943], "mapped", [1610, 1580, 1610]], [[64944, 64944], "mapped", [1610, 1605, 1610]], [[64945, 64945], "mapped", [1605, 1605, 1610]], [[64946, 64946], "mapped", [1602, 1605, 1610]], [[64947, 64947], "mapped", [1606, 1581, 1610]], [[64948, 64948], "mapped", [1602, 1605, 1581]], [[64949, 64949], "mapped", [1604, 1581, 1605]], [[64950, 64950], "mapped", [1593, 1605, 1610]], [[64951, 64951], "mapped", [1603, 1605, 1610]], [[64952, 64952], "mapped", [1606, 1580, 1581]], [[64953, 64953], "mapped", [1605, 1582, 1610]], [[64954, 64954], "mapped", [1604, 1580, 1605]], [[64955, 64955], "mapped", [1603, 1605, 1605]], [[64956, 64956], "mapped", [1604, 1580, 1605]], [[64957, 64957], "mapped", [1606, 1580, 1581]], [[64958, 64958], "mapped", [1580, 1581, 1610]], [[64959, 64959], "mapped", [1581, 1580, 1610]], [[64960, 64960], "mapped", [1605, 1580, 1610]], [[64961, 64961], "mapped", [1601, 1605, 1610]], [[64962, 64962], "mapped", [1576, 1581, 1610]], [[64963, 64963], "mapped", [1603, 1605, 1605]], [[64964, 64964], "mapped", [1593, 1580, 1605]], [[64965, 64965], "mapped", [1589, 1605, 1605]], [[64966, 64966], "mapped", [1587, 1582, 1610]], [[64967, 64967], "mapped", [1606, 1580, 1610]], [[64968, 64975], "disallowed"], [[64976, 65007], "disallowed"], [[65008, 65008], "mapped", [1589, 1604, 1746]], [[65009, 65009], "mapped", [1602, 1604, 1746]], [[65010, 65010], "mapped", [1575, 1604, 1604, 1607]], [[65011, 65011], "mapped", [1575, 1603, 1576, 1585]], [[65012, 65012], "mapped", [1605, 1581, 1605, 1583]], [[65013, 65013], "mapped", [1589, 1604, 1593, 1605]], [[65014, 65014], "mapped", [1585, 1587, 1608, 1604]], [[65015, 65015], "mapped", [1593, 1604, 1610, 1607]], [[65016, 65016], "mapped", [1608, 1587, 1604, 1605]], [[65017, 65017], "mapped", [1589, 1604, 1609]], [[65018, 65018], "disallowed_STD3_mapped", [1589, 1604, 1609, 32, 1575, 1604, 1604, 1607, 32, 1593, 1604, 1610, 1607, 32, 1608, 1587, 1604, 1605]], [[65019, 65019], "disallowed_STD3_mapped", [1580, 1604, 32, 1580, 1604, 1575, 1604, 1607]], [[65020, 65020], "mapped", [1585, 1740, 1575, 1604]], [[65021, 65021], "valid", [], "NV8"], [[65022, 65023], "disallowed"], [[65024, 65039], "ignored"], [[65040, 65040], "disallowed_STD3_mapped", [44]], [[65041, 65041], "mapped", [12289]], [[65042, 65042], "disallowed"], [[65043, 65043], "disallowed_STD3_mapped", [58]], [[65044, 65044], "disallowed_STD3_mapped", [59]], [[65045, 65045], "disallowed_STD3_mapped", [33]], [[65046, 65046], "disallowed_STD3_mapped", [63]], [[65047, 65047], "mapped", [12310]], [[65048, 65048], "mapped", [12311]], [[65049, 65049], "disallowed"], [[65050, 65055], "disallowed"], [[65056, 65059], "valid"], [[65060, 65062], "valid"], [[65063, 65069], "valid"], [[65070, 65071], "valid"], [[65072, 65072], "disallowed"], [[65073, 65073], "mapped", [8212]], [[65074, 65074], "mapped", [8211]], [[65075, 65076], "disallowed_STD3_mapped", [95]], [[65077, 65077], "disallowed_STD3_mapped", [40]], [[65078, 65078], "disallowed_STD3_mapped", [41]], [[65079, 65079], "disallowed_STD3_mapped", [123]], [[65080, 65080], "disallowed_STD3_mapped", [125]], [[65081, 65081], "mapped", [12308]], [[65082, 65082], "mapped", [12309]], [[65083, 65083], "mapped", [12304]], [[65084, 65084], "mapped", [12305]], [[65085, 65085], "mapped", [12298]], [[65086, 65086], "mapped", [12299]], [[65087, 65087], "mapped", [12296]], [[65088, 65088], "mapped", [12297]], [[65089, 65089], "mapped", [12300]], [[65090, 65090], "mapped", [12301]], [[65091, 65091], "mapped", [12302]], [[65092, 65092], "mapped", [12303]], [[65093, 65094], "valid", [], "NV8"], [[65095, 65095], "disallowed_STD3_mapped", [91]], [[65096, 65096], "disallowed_STD3_mapped", [93]], [[65097, 65100], "disallowed_STD3_mapped", [32, 773]], [[65101, 65103], "disallowed_STD3_mapped", [95]], [[65104, 65104], "disallowed_STD3_mapped", [44]], [[65105, 65105], "mapped", [12289]], [[65106, 65106], "disallowed"], [[65107, 65107], "disallowed"], [[65108, 65108], "disallowed_STD3_mapped", [59]], [[65109, 65109], "disallowed_STD3_mapped", [58]], [[65110, 65110], "disallowed_STD3_mapped", [63]], [[65111, 65111], "disallowed_STD3_mapped", [33]], [[65112, 65112], "mapped", [8212]], [[65113, 65113], "disallowed_STD3_mapped", [40]], [[65114, 65114], "disallowed_STD3_mapped", [41]], [[65115, 65115], "disallowed_STD3_mapped", [123]], [[65116, 65116], "disallowed_STD3_mapped", [125]], [[65117, 65117], "mapped", [12308]], [[65118, 65118], "mapped", [12309]], [[65119, 65119], "disallowed_STD3_mapped", [35]], [[65120, 65120], "disallowed_STD3_mapped", [38]], [[65121, 65121], "disallowed_STD3_mapped", [42]], [[65122, 65122], "disallowed_STD3_mapped", [43]], [[65123, 65123], "mapped", [45]], [[65124, 65124], "disallowed_STD3_mapped", [60]], [[65125, 65125], "disallowed_STD3_mapped", [62]], [[65126, 65126], "disallowed_STD3_mapped", [61]], [[65127, 65127], "disallowed"], [[65128, 65128], "disallowed_STD3_mapped", [92]], [[65129, 65129], "disallowed_STD3_mapped", [36]], [[65130, 65130], "disallowed_STD3_mapped", [37]], [[65131, 65131], "disallowed_STD3_mapped", [64]], [[65132, 65135], "disallowed"], [[65136, 65136], "disallowed_STD3_mapped", [32, 1611]], [[65137, 65137], "mapped", [1600, 1611]], [[65138, 65138], "disallowed_STD3_mapped", [32, 1612]], [[65139, 65139], "valid"], [[65140, 65140], "disallowed_STD3_mapped", [32, 1613]], [[65141, 65141], "disallowed"], [[65142, 65142], "disallowed_STD3_mapped", [32, 1614]], [[65143, 65143], "mapped", [1600, 1614]], [[65144, 65144], "disallowed_STD3_mapped", [32, 1615]], [[65145, 65145], "mapped", [1600, 1615]], [[65146, 65146], "disallowed_STD3_mapped", [32, 1616]], [[65147, 65147], "mapped", [1600, 1616]], [[65148, 65148], "disallowed_STD3_mapped", [32, 1617]], [[65149, 65149], "mapped", [1600, 1617]], [[65150, 65150], "disallowed_STD3_mapped", [32, 1618]], [[65151, 65151], "mapped", [1600, 1618]], [[65152, 65152], "mapped", [1569]], [[65153, 65154], "mapped", [1570]], [[65155, 65156], "mapped", [1571]], [[65157, 65158], "mapped", [1572]], [[65159, 65160], "mapped", [1573]], [[65161, 65164], "mapped", [1574]], [[65165, 65166], "mapped", [1575]], [[65167, 65170], "mapped", [1576]], [[65171, 65172], "mapped", [1577]], [[65173, 65176], "mapped", [1578]], [[65177, 65180], "mapped", [1579]], [[65181, 65184], "mapped", [1580]], [[65185, 65188], "mapped", [1581]], [[65189, 65192], "mapped", [1582]], [[65193, 65194], "mapped", [1583]], [[65195, 65196], "mapped", [1584]], [[65197, 65198], "mapped", [1585]], [[65199, 65200], "mapped", [1586]], [[65201, 65204], "mapped", [1587]], [[65205, 65208], "mapped", [1588]], [[65209, 65212], "mapped", [1589]], [[65213, 65216], "mapped", [1590]], [[65217, 65220], "mapped", [1591]], [[65221, 65224], "mapped", [1592]], [[65225, 65228], "mapped", [1593]], [[65229, 65232], "mapped", [1594]], [[65233, 65236], "mapped", [1601]], [[65237, 65240], "mapped", [1602]], [[65241, 65244], "mapped", [1603]], [[65245, 65248], "mapped", [1604]], [[65249, 65252], "mapped", [1605]], [[65253, 65256], "mapped", [1606]], [[65257, 65260], "mapped", [1607]], [[65261, 65262], "mapped", [1608]], [[65263, 65264], "mapped", [1609]], [[65265, 65268], "mapped", [1610]], [[65269, 65270], "mapped", [1604, 1570]], [[65271, 65272], "mapped", [1604, 1571]], [[65273, 65274], "mapped", [1604, 1573]], [[65275, 65276], "mapped", [1604, 1575]], [[65277, 65278], "disallowed"], [[65279, 65279], "ignored"], [[65280, 65280], "disallowed"], [[65281, 65281], "disallowed_STD3_mapped", [33]], [[65282, 65282], "disallowed_STD3_mapped", [34]], [[65283, 65283], "disallowed_STD3_mapped", [35]], [[65284, 65284], "disallowed_STD3_mapped", [36]], [[65285, 65285], "disallowed_STD3_mapped", [37]], [[65286, 65286], "disallowed_STD3_mapped", [38]], [[65287, 65287], "disallowed_STD3_mapped", [39]], [[65288, 65288], "disallowed_STD3_mapped", [40]], [[65289, 65289], "disallowed_STD3_mapped", [41]], [[65290, 65290], "disallowed_STD3_mapped", [42]], [[65291, 65291], "disallowed_STD3_mapped", [43]], [[65292, 65292], "disallowed_STD3_mapped", [44]], [[65293, 65293], "mapped", [45]], [[65294, 65294], "mapped", [46]], [[65295, 65295], "disallowed_STD3_mapped", [47]], [[65296, 65296], "mapped", [48]], [[65297, 65297], "mapped", [49]], [[65298, 65298], "mapped", [50]], [[65299, 65299], "mapped", [51]], [[65300, 65300], "mapped", [52]], [[65301, 65301], "mapped", [53]], [[65302, 65302], "mapped", [54]], [[65303, 65303], "mapped", [55]], [[65304, 65304], "mapped", [56]], [[65305, 65305], "mapped", [57]], [[65306, 65306], "disallowed_STD3_mapped", [58]], [[65307, 65307], "disallowed_STD3_mapped", [59]], [[65308, 65308], "disallowed_STD3_mapped", [60]], [[65309, 65309], "disallowed_STD3_mapped", [61]], [[65310, 65310], "disallowed_STD3_mapped", [62]], [[65311, 65311], "disallowed_STD3_mapped", [63]], [[65312, 65312], "disallowed_STD3_mapped", [64]], [[65313, 65313], "mapped", [97]], [[65314, 65314], "mapped", [98]], [[65315, 65315], "mapped", [99]], [[65316, 65316], "mapped", [100]], [[65317, 65317], "mapped", [101]], [[65318, 65318], "mapped", [102]], [[65319, 65319], "mapped", [103]], [[65320, 65320], "mapped", [104]], [[65321, 65321], "mapped", [105]], [[65322, 65322], "mapped", [106]], [[65323, 65323], "mapped", [107]], [[65324, 65324], "mapped", [108]], [[65325, 65325], "mapped", [109]], [[65326, 65326], "mapped", [110]], [[65327, 65327], "mapped", [111]], [[65328, 65328], "mapped", [112]], [[65329, 65329], "mapped", [113]], [[65330, 65330], "mapped", [114]], [[65331, 65331], "mapped", [115]], [[65332, 65332], "mapped", [116]], [[65333, 65333], "mapped", [117]], [[65334, 65334], "mapped", [118]], [[65335, 65335], "mapped", [119]], [[65336, 65336], "mapped", [120]], [[65337, 65337], "mapped", [121]], [[65338, 65338], "mapped", [122]], [[65339, 65339], "disallowed_STD3_mapped", [91]], [[65340, 65340], "disallowed_STD3_mapped", [92]], [[65341, 65341], "disallowed_STD3_mapped", [93]], [[65342, 65342], "disallowed_STD3_mapped", [94]], [[65343, 65343], "disallowed_STD3_mapped", [95]], [[65344, 65344], "disallowed_STD3_mapped", [96]], [[65345, 65345], "mapped", [97]], [[65346, 65346], "mapped", [98]], [[65347, 65347], "mapped", [99]], [[65348, 65348], "mapped", [100]], [[65349, 65349], "mapped", [101]], [[65350, 65350], "mapped", [102]], [[65351, 65351], "mapped", [103]], [[65352, 65352], "mapped", [104]], [[65353, 65353], "mapped", [105]], [[65354, 65354], "mapped", [106]], [[65355, 65355], "mapped", [107]], [[65356, 65356], "mapped", [108]], [[65357, 65357], "mapped", [109]], [[65358, 65358], "mapped", [110]], [[65359, 65359], "mapped", [111]], [[65360, 65360], "mapped", [112]], [[65361, 65361], "mapped", [113]], [[65362, 65362], "mapped", [114]], [[65363, 65363], "mapped", [115]], [[65364, 65364], "mapped", [116]], [[65365, 65365], "mapped", [117]], [[65366, 65366], "mapped", [118]], [[65367, 65367], "mapped", [119]], [[65368, 65368], "mapped", [120]], [[65369, 65369], "mapped", [121]], [[65370, 65370], "mapped", [122]], [[65371, 65371], "disallowed_STD3_mapped", [123]], [[65372, 65372], "disallowed_STD3_mapped", [124]], [[65373, 65373], "disallowed_STD3_mapped", [125]], [[65374, 65374], "disallowed_STD3_mapped", [126]], [[65375, 65375], "mapped", [10629]], [[65376, 65376], "mapped", [10630]], [[65377, 65377], "mapped", [46]], [[65378, 65378], "mapped", [12300]], [[65379, 65379], "mapped", [12301]], [[65380, 65380], "mapped", [12289]], [[65381, 65381], "mapped", [12539]], [[65382, 65382], "mapped", [12530]], [[65383, 65383], "mapped", [12449]], [[65384, 65384], "mapped", [12451]], [[65385, 65385], "mapped", [12453]], [[65386, 65386], "mapped", [12455]], [[65387, 65387], "mapped", [12457]], [[65388, 65388], "mapped", [12515]], [[65389, 65389], "mapped", [12517]], [[65390, 65390], "mapped", [12519]], [[65391, 65391], "mapped", [12483]], [[65392, 65392], "mapped", [12540]], [[65393, 65393], "mapped", [12450]], [[65394, 65394], "mapped", [12452]], [[65395, 65395], "mapped", [12454]], [[65396, 65396], "mapped", [12456]], [[65397, 65397], "mapped", [12458]], [[65398, 65398], "mapped", [12459]], [[65399, 65399], "mapped", [12461]], [[65400, 65400], "mapped", [12463]], [[65401, 65401], "mapped", [12465]], [[65402, 65402], "mapped", [12467]], [[65403, 65403], "mapped", [12469]], [[65404, 65404], "mapped", [12471]], [[65405, 65405], "mapped", [12473]], [[65406, 65406], "mapped", [12475]], [[65407, 65407], "mapped", [12477]], [[65408, 65408], "mapped", [12479]], [[65409, 65409], "mapped", [12481]], [[65410, 65410], "mapped", [12484]], [[65411, 65411], "mapped", [12486]], [[65412, 65412], "mapped", [12488]], [[65413, 65413], "mapped", [12490]], [[65414, 65414], "mapped", [12491]], [[65415, 65415], "mapped", [12492]], [[65416, 65416], "mapped", [12493]], [[65417, 65417], "mapped", [12494]], [[65418, 65418], "mapped", [12495]], [[65419, 65419], "mapped", [12498]], [[65420, 65420], "mapped", [12501]], [[65421, 65421], "mapped", [12504]], [[65422, 65422], "mapped", [12507]], [[65423, 65423], "mapped", [12510]], [[65424, 65424], "mapped", [12511]], [[65425, 65425], "mapped", [12512]], [[65426, 65426], "mapped", [12513]], [[65427, 65427], "mapped", [12514]], [[65428, 65428], "mapped", [12516]], [[65429, 65429], "mapped", [12518]], [[65430, 65430], "mapped", [12520]], [[65431, 65431], "mapped", [12521]], [[65432, 65432], "mapped", [12522]], [[65433, 65433], "mapped", [12523]], [[65434, 65434], "mapped", [12524]], [[65435, 65435], "mapped", [12525]], [[65436, 65436], "mapped", [12527]], [[65437, 65437], "mapped", [12531]], [[65438, 65438], "mapped", [12441]], [[65439, 65439], "mapped", [12442]], [[65440, 65440], "disallowed"], [[65441, 65441], "mapped", [4352]], [[65442, 65442], "mapped", [4353]], [[65443, 65443], "mapped", [4522]], [[65444, 65444], "mapped", [4354]], [[65445, 65445], "mapped", [4524]], [[65446, 65446], "mapped", [4525]], [[65447, 65447], "mapped", [4355]], [[65448, 65448], "mapped", [4356]], [[65449, 65449], "mapped", [4357]], [[65450, 65450], "mapped", [4528]], [[65451, 65451], "mapped", [4529]], [[65452, 65452], "mapped", [4530]], [[65453, 65453], "mapped", [4531]], [[65454, 65454], "mapped", [4532]], [[65455, 65455], "mapped", [4533]], [[65456, 65456], "mapped", [4378]], [[65457, 65457], "mapped", [4358]], [[65458, 65458], "mapped", [4359]], [[65459, 65459], "mapped", [4360]], [[65460, 65460], "mapped", [4385]], [[65461, 65461], "mapped", [4361]], [[65462, 65462], "mapped", [4362]], [[65463, 65463], "mapped", [4363]], [[65464, 65464], "mapped", [4364]], [[65465, 65465], "mapped", [4365]], [[65466, 65466], "mapped", [4366]], [[65467, 65467], "mapped", [4367]], [[65468, 65468], "mapped", [4368]], [[65469, 65469], "mapped", [4369]], [[65470, 65470], "mapped", [4370]], [[65471, 65473], "disallowed"], [[65474, 65474], "mapped", [4449]], [[65475, 65475], "mapped", [4450]], [[65476, 65476], "mapped", [4451]], [[65477, 65477], "mapped", [4452]], [[65478, 65478], "mapped", [4453]], [[65479, 65479], "mapped", [4454]], [[65480, 65481], "disallowed"], [[65482, 65482], "mapped", [4455]], [[65483, 65483], "mapped", [4456]], [[65484, 65484], "mapped", [4457]], [[65485, 65485], "mapped", [4458]], [[65486, 65486], "mapped", [4459]], [[65487, 65487], "mapped", [4460]], [[65488, 65489], "disallowed"], [[65490, 65490], "mapped", [4461]], [[65491, 65491], "mapped", [4462]], [[65492, 65492], "mapped", [4463]], [[65493, 65493], "mapped", [4464]], [[65494, 65494], "mapped", [4465]], [[65495, 65495], "mapped", [4466]], [[65496, 65497], "disallowed"], [[65498, 65498], "mapped", [4467]], [[65499, 65499], "mapped", [4468]], [[65500, 65500], "mapped", [4469]], [[65501, 65503], "disallowed"], [[65504, 65504], "mapped", [162]], [[65505, 65505], "mapped", [163]], [[65506, 65506], "mapped", [172]], [[65507, 65507], "disallowed_STD3_mapped", [32, 772]], [[65508, 65508], "mapped", [166]], [[65509, 65509], "mapped", [165]], [[65510, 65510], "mapped", [8361]], [[65511, 65511], "disallowed"], [[65512, 65512], "mapped", [9474]], [[65513, 65513], "mapped", [8592]], [[65514, 65514], "mapped", [8593]], [[65515, 65515], "mapped", [8594]], [[65516, 65516], "mapped", [8595]], [[65517, 65517], "mapped", [9632]], [[65518, 65518], "mapped", [9675]], [[65519, 65528], "disallowed"], [[65529, 65531], "disallowed"], [[65532, 65532], "disallowed"], [[65533, 65533], "disallowed"], [[65534, 65535], "disallowed"], [[65536, 65547], "valid"], [[65548, 65548], "disallowed"], [[65549, 65574], "valid"], [[65575, 65575], "disallowed"], [[65576, 65594], "valid"], [[65595, 65595], "disallowed"], [[65596, 65597], "valid"], [[65598, 65598], "disallowed"], [[65599, 65613], "valid"], [[65614, 65615], "disallowed"], [[65616, 65629], "valid"], [[65630, 65663], "disallowed"], [[65664, 65786], "valid"], [[65787, 65791], "disallowed"], [[65792, 65794], "valid", [], "NV8"], [[65795, 65798], "disallowed"], [[65799, 65843], "valid", [], "NV8"], [[65844, 65846], "disallowed"], [[65847, 65855], "valid", [], "NV8"], [[65856, 65930], "valid", [], "NV8"], [[65931, 65932], "valid", [], "NV8"], [[65933, 65935], "disallowed"], [[65936, 65947], "valid", [], "NV8"], [[65948, 65951], "disallowed"], [[65952, 65952], "valid", [], "NV8"], [[65953, 65999], "disallowed"], [[66e3, 66044], "valid", [], "NV8"], [[66045, 66045], "valid"], [[66046, 66175], "disallowed"], [[66176, 66204], "valid"], [[66205, 66207], "disallowed"], [[66208, 66256], "valid"], [[66257, 66271], "disallowed"], [[66272, 66272], "valid"], [[66273, 66299], "valid", [], "NV8"], [[66300, 66303], "disallowed"], [[66304, 66334], "valid"], [[66335, 66335], "valid"], [[66336, 66339], "valid", [], "NV8"], [[66340, 66351], "disallowed"], [[66352, 66368], "valid"], [[66369, 66369], "valid", [], "NV8"], [[66370, 66377], "valid"], [[66378, 66378], "valid", [], "NV8"], [[66379, 66383], "disallowed"], [[66384, 66426], "valid"], [[66427, 66431], "disallowed"], [[66432, 66461], "valid"], [[66462, 66462], "disallowed"], [[66463, 66463], "valid", [], "NV8"], [[66464, 66499], "valid"], [[66500, 66503], "disallowed"], [[66504, 66511], "valid"], [[66512, 66517], "valid", [], "NV8"], [[66518, 66559], "disallowed"], [[66560, 66560], "mapped", [66600]], [[66561, 66561], "mapped", [66601]], [[66562, 66562], "mapped", [66602]], [[66563, 66563], "mapped", [66603]], [[66564, 66564], "mapped", [66604]], [[66565, 66565], "mapped", [66605]], [[66566, 66566], "mapped", [66606]], [[66567, 66567], "mapped", [66607]], [[66568, 66568], "mapped", [66608]], [[66569, 66569], "mapped", [66609]], [[66570, 66570], "mapped", [66610]], [[66571, 66571], "mapped", [66611]], [[66572, 66572], "mapped", [66612]], [[66573, 66573], "mapped", [66613]], [[66574, 66574], "mapped", [66614]], [[66575, 66575], "mapped", [66615]], [[66576, 66576], "mapped", [66616]], [[66577, 66577], "mapped", [66617]], [[66578, 66578], "mapped", [66618]], [[66579, 66579], "mapped", [66619]], [[66580, 66580], "mapped", [66620]], [[66581, 66581], "mapped", [66621]], [[66582, 66582], "mapped", [66622]], [[66583, 66583], "mapped", [66623]], [[66584, 66584], "mapped", [66624]], [[66585, 66585], "mapped", [66625]], [[66586, 66586], "mapped", [66626]], [[66587, 66587], "mapped", [66627]], [[66588, 66588], "mapped", [66628]], [[66589, 66589], "mapped", [66629]], [[66590, 66590], "mapped", [66630]], [[66591, 66591], "mapped", [66631]], [[66592, 66592], "mapped", [66632]], [[66593, 66593], "mapped", [66633]], [[66594, 66594], "mapped", [66634]], [[66595, 66595], "mapped", [66635]], [[66596, 66596], "mapped", [66636]], [[66597, 66597], "mapped", [66637]], [[66598, 66598], "mapped", [66638]], [[66599, 66599], "mapped", [66639]], [[66600, 66637], "valid"], [[66638, 66717], "valid"], [[66718, 66719], "disallowed"], [[66720, 66729], "valid"], [[66730, 66815], "disallowed"], [[66816, 66855], "valid"], [[66856, 66863], "disallowed"], [[66864, 66915], "valid"], [[66916, 66926], "disallowed"], [[66927, 66927], "valid", [], "NV8"], [[66928, 67071], "disallowed"], [[67072, 67382], "valid"], [[67383, 67391], "disallowed"], [[67392, 67413], "valid"], [[67414, 67423], "disallowed"], [[67424, 67431], "valid"], [[67432, 67583], "disallowed"], [[67584, 67589], "valid"], [[67590, 67591], "disallowed"], [[67592, 67592], "valid"], [[67593, 67593], "disallowed"], [[67594, 67637], "valid"], [[67638, 67638], "disallowed"], [[67639, 67640], "valid"], [[67641, 67643], "disallowed"], [[67644, 67644], "valid"], [[67645, 67646], "disallowed"], [[67647, 67647], "valid"], [[67648, 67669], "valid"], [[67670, 67670], "disallowed"], [[67671, 67679], "valid", [], "NV8"], [[67680, 67702], "valid"], [[67703, 67711], "valid", [], "NV8"], [[67712, 67742], "valid"], [[67743, 67750], "disallowed"], [[67751, 67759], "valid", [], "NV8"], [[67760, 67807], "disallowed"], [[67808, 67826], "valid"], [[67827, 67827], "disallowed"], [[67828, 67829], "valid"], [[67830, 67834], "disallowed"], [[67835, 67839], "valid", [], "NV8"], [[67840, 67861], "valid"], [[67862, 67865], "valid", [], "NV8"], [[67866, 67867], "valid", [], "NV8"], [[67868, 67870], "disallowed"], [[67871, 67871], "valid", [], "NV8"], [[67872, 67897], "valid"], [[67898, 67902], "disallowed"], [[67903, 67903], "valid", [], "NV8"], [[67904, 67967], "disallowed"], [[67968, 68023], "valid"], [[68024, 68027], "disallowed"], [[68028, 68029], "valid", [], "NV8"], [[68030, 68031], "valid"], [[68032, 68047], "valid", [], "NV8"], [[68048, 68049], "disallowed"], [[68050, 68095], "valid", [], "NV8"], [[68096, 68099], "valid"], [[68100, 68100], "disallowed"], [[68101, 68102], "valid"], [[68103, 68107], "disallowed"], [[68108, 68115], "valid"], [[68116, 68116], "disallowed"], [[68117, 68119], "valid"], [[68120, 68120], "disallowed"], [[68121, 68147], "valid"], [[68148, 68151], "disallowed"], [[68152, 68154], "valid"], [[68155, 68158], "disallowed"], [[68159, 68159], "valid"], [[68160, 68167], "valid", [], "NV8"], [[68168, 68175], "disallowed"], [[68176, 68184], "valid", [], "NV8"], [[68185, 68191], "disallowed"], [[68192, 68220], "valid"], [[68221, 68223], "valid", [], "NV8"], [[68224, 68252], "valid"], [[68253, 68255], "valid", [], "NV8"], [[68256, 68287], "disallowed"], [[68288, 68295], "valid"], [[68296, 68296], "valid", [], "NV8"], [[68297, 68326], "valid"], [[68327, 68330], "disallowed"], [[68331, 68342], "valid", [], "NV8"], [[68343, 68351], "disallowed"], [[68352, 68405], "valid"], [[68406, 68408], "disallowed"], [[68409, 68415], "valid", [], "NV8"], [[68416, 68437], "valid"], [[68438, 68439], "disallowed"], [[68440, 68447], "valid", [], "NV8"], [[68448, 68466], "valid"], [[68467, 68471], "disallowed"], [[68472, 68479], "valid", [], "NV8"], [[68480, 68497], "valid"], [[68498, 68504], "disallowed"], [[68505, 68508], "valid", [], "NV8"], [[68509, 68520], "disallowed"], [[68521, 68527], "valid", [], "NV8"], [[68528, 68607], "disallowed"], [[68608, 68680], "valid"], [[68681, 68735], "disallowed"], [[68736, 68736], "mapped", [68800]], [[68737, 68737], "mapped", [68801]], [[68738, 68738], "mapped", [68802]], [[68739, 68739], "mapped", [68803]], [[68740, 68740], "mapped", [68804]], [[68741, 68741], "mapped", [68805]], [[68742, 68742], "mapped", [68806]], [[68743, 68743], "mapped", [68807]], [[68744, 68744], "mapped", [68808]], [[68745, 68745], "mapped", [68809]], [[68746, 68746], "mapped", [68810]], [[68747, 68747], "mapped", [68811]], [[68748, 68748], "mapped", [68812]], [[68749, 68749], "mapped", [68813]], [[68750, 68750], "mapped", [68814]], [[68751, 68751], "mapped", [68815]], [[68752, 68752], "mapped", [68816]], [[68753, 68753], "mapped", [68817]], [[68754, 68754], "mapped", [68818]], [[68755, 68755], "mapped", [68819]], [[68756, 68756], "mapped", [68820]], [[68757, 68757], "mapped", [68821]], [[68758, 68758], "mapped", [68822]], [[68759, 68759], "mapped", [68823]], [[68760, 68760], "mapped", [68824]], [[68761, 68761], "mapped", [68825]], [[68762, 68762], "mapped", [68826]], [[68763, 68763], "mapped", [68827]], [[68764, 68764], "mapped", [68828]], [[68765, 68765], "mapped", [68829]], [[68766, 68766], "mapped", [68830]], [[68767, 68767], "mapped", [68831]], [[68768, 68768], "mapped", [68832]], [[68769, 68769], "mapped", [68833]], [[68770, 68770], "mapped", [68834]], [[68771, 68771], "mapped", [68835]], [[68772, 68772], "mapped", [68836]], [[68773, 68773], "mapped", [68837]], [[68774, 68774], "mapped", [68838]], [[68775, 68775], "mapped", [68839]], [[68776, 68776], "mapped", [68840]], [[68777, 68777], "mapped", [68841]], [[68778, 68778], "mapped", [68842]], [[68779, 68779], "mapped", [68843]], [[68780, 68780], "mapped", [68844]], [[68781, 68781], "mapped", [68845]], [[68782, 68782], "mapped", [68846]], [[68783, 68783], "mapped", [68847]], [[68784, 68784], "mapped", [68848]], [[68785, 68785], "mapped", [68849]], [[68786, 68786], "mapped", [68850]], [[68787, 68799], "disallowed"], [[68800, 68850], "valid"], [[68851, 68857], "disallowed"], [[68858, 68863], "valid", [], "NV8"], [[68864, 69215], "disallowed"], [[69216, 69246], "valid", [], "NV8"], [[69247, 69631], "disallowed"], [[69632, 69702], "valid"], [[69703, 69709], "valid", [], "NV8"], [[69710, 69713], "disallowed"], [[69714, 69733], "valid", [], "NV8"], [[69734, 69743], "valid"], [[69744, 69758], "disallowed"], [[69759, 69759], "valid"], [[69760, 69818], "valid"], [[69819, 69820], "valid", [], "NV8"], [[69821, 69821], "disallowed"], [[69822, 69825], "valid", [], "NV8"], [[69826, 69839], "disallowed"], [[69840, 69864], "valid"], [[69865, 69871], "disallowed"], [[69872, 69881], "valid"], [[69882, 69887], "disallowed"], [[69888, 69940], "valid"], [[69941, 69941], "disallowed"], [[69942, 69951], "valid"], [[69952, 69955], "valid", [], "NV8"], [[69956, 69967], "disallowed"], [[69968, 70003], "valid"], [[70004, 70005], "valid", [], "NV8"], [[70006, 70006], "valid"], [[70007, 70015], "disallowed"], [[70016, 70084], "valid"], [[70085, 70088], "valid", [], "NV8"], [[70089, 70089], "valid", [], "NV8"], [[70090, 70092], "valid"], [[70093, 70093], "valid", [], "NV8"], [[70094, 70095], "disallowed"], [[70096, 70105], "valid"], [[70106, 70106], "valid"], [[70107, 70107], "valid", [], "NV8"], [[70108, 70108], "valid"], [[70109, 70111], "valid", [], "NV8"], [[70112, 70112], "disallowed"], [[70113, 70132], "valid", [], "NV8"], [[70133, 70143], "disallowed"], [[70144, 70161], "valid"], [[70162, 70162], "disallowed"], [[70163, 70199], "valid"], [[70200, 70205], "valid", [], "NV8"], [[70206, 70271], "disallowed"], [[70272, 70278], "valid"], [[70279, 70279], "disallowed"], [[70280, 70280], "valid"], [[70281, 70281], "disallowed"], [[70282, 70285], "valid"], [[70286, 70286], "disallowed"], [[70287, 70301], "valid"], [[70302, 70302], "disallowed"], [[70303, 70312], "valid"], [[70313, 70313], "valid", [], "NV8"], [[70314, 70319], "disallowed"], [[70320, 70378], "valid"], [[70379, 70383], "disallowed"], [[70384, 70393], "valid"], [[70394, 70399], "disallowed"], [[70400, 70400], "valid"], [[70401, 70403], "valid"], [[70404, 70404], "disallowed"], [[70405, 70412], "valid"], [[70413, 70414], "disallowed"], [[70415, 70416], "valid"], [[70417, 70418], "disallowed"], [[70419, 70440], "valid"], [[70441, 70441], "disallowed"], [[70442, 70448], "valid"], [[70449, 70449], "disallowed"], [[70450, 70451], "valid"], [[70452, 70452], "disallowed"], [[70453, 70457], "valid"], [[70458, 70459], "disallowed"], [[70460, 70468], "valid"], [[70469, 70470], "disallowed"], [[70471, 70472], "valid"], [[70473, 70474], "disallowed"], [[70475, 70477], "valid"], [[70478, 70479], "disallowed"], [[70480, 70480], "valid"], [[70481, 70486], "disallowed"], [[70487, 70487], "valid"], [[70488, 70492], "disallowed"], [[70493, 70499], "valid"], [[70500, 70501], "disallowed"], [[70502, 70508], "valid"], [[70509, 70511], "disallowed"], [[70512, 70516], "valid"], [[70517, 70783], "disallowed"], [[70784, 70853], "valid"], [[70854, 70854], "valid", [], "NV8"], [[70855, 70855], "valid"], [[70856, 70863], "disallowed"], [[70864, 70873], "valid"], [[70874, 71039], "disallowed"], [[71040, 71093], "valid"], [[71094, 71095], "disallowed"], [[71096, 71104], "valid"], [[71105, 71113], "valid", [], "NV8"], [[71114, 71127], "valid", [], "NV8"], [[71128, 71133], "valid"], [[71134, 71167], "disallowed"], [[71168, 71232], "valid"], [[71233, 71235], "valid", [], "NV8"], [[71236, 71236], "valid"], [[71237, 71247], "disallowed"], [[71248, 71257], "valid"], [[71258, 71295], "disallowed"], [[71296, 71351], "valid"], [[71352, 71359], "disallowed"], [[71360, 71369], "valid"], [[71370, 71423], "disallowed"], [[71424, 71449], "valid"], [[71450, 71452], "disallowed"], [[71453, 71467], "valid"], [[71468, 71471], "disallowed"], [[71472, 71481], "valid"], [[71482, 71487], "valid", [], "NV8"], [[71488, 71839], "disallowed"], [[71840, 71840], "mapped", [71872]], [[71841, 71841], "mapped", [71873]], [[71842, 71842], "mapped", [71874]], [[71843, 71843], "mapped", [71875]], [[71844, 71844], "mapped", [71876]], [[71845, 71845], "mapped", [71877]], [[71846, 71846], "mapped", [71878]], [[71847, 71847], "mapped", [71879]], [[71848, 71848], "mapped", [71880]], [[71849, 71849], "mapped", [71881]], [[71850, 71850], "mapped", [71882]], [[71851, 71851], "mapped", [71883]], [[71852, 71852], "mapped", [71884]], [[71853, 71853], "mapped", [71885]], [[71854, 71854], "mapped", [71886]], [[71855, 71855], "mapped", [71887]], [[71856, 71856], "mapped", [71888]], [[71857, 71857], "mapped", [71889]], [[71858, 71858], "mapped", [71890]], [[71859, 71859], "mapped", [71891]], [[71860, 71860], "mapped", [71892]], [[71861, 71861], "mapped", [71893]], [[71862, 71862], "mapped", [71894]], [[71863, 71863], "mapped", [71895]], [[71864, 71864], "mapped", [71896]], [[71865, 71865], "mapped", [71897]], [[71866, 71866], "mapped", [71898]], [[71867, 71867], "mapped", [71899]], [[71868, 71868], "mapped", [71900]], [[71869, 71869], "mapped", [71901]], [[71870, 71870], "mapped", [71902]], [[71871, 71871], "mapped", [71903]], [[71872, 71913], "valid"], [[71914, 71922], "valid", [], "NV8"], [[71923, 71934], "disallowed"], [[71935, 71935], "valid"], [[71936, 72383], "disallowed"], [[72384, 72440], "valid"], [[72441, 73727], "disallowed"], [[73728, 74606], "valid"], [[74607, 74648], "valid"], [[74649, 74649], "valid"], [[74650, 74751], "disallowed"], [[74752, 74850], "valid", [], "NV8"], [[74851, 74862], "valid", [], "NV8"], [[74863, 74863], "disallowed"], [[74864, 74867], "valid", [], "NV8"], [[74868, 74868], "valid", [], "NV8"], [[74869, 74879], "disallowed"], [[74880, 75075], "valid"], [[75076, 77823], "disallowed"], [[77824, 78894], "valid"], [[78895, 82943], "disallowed"], [[82944, 83526], "valid"], [[83527, 92159], "disallowed"], [[92160, 92728], "valid"], [[92729, 92735], "disallowed"], [[92736, 92766], "valid"], [[92767, 92767], "disallowed"], [[92768, 92777], "valid"], [[92778, 92781], "disallowed"], [[92782, 92783], "valid", [], "NV8"], [[92784, 92879], "disallowed"], [[92880, 92909], "valid"], [[92910, 92911], "disallowed"], [[92912, 92916], "valid"], [[92917, 92917], "valid", [], "NV8"], [[92918, 92927], "disallowed"], [[92928, 92982], "valid"], [[92983, 92991], "valid", [], "NV8"], [[92992, 92995], "valid"], [[92996, 92997], "valid", [], "NV8"], [[92998, 93007], "disallowed"], [[93008, 93017], "valid"], [[93018, 93018], "disallowed"], [[93019, 93025], "valid", [], "NV8"], [[93026, 93026], "disallowed"], [[93027, 93047], "valid"], [[93048, 93052], "disallowed"], [[93053, 93071], "valid"], [[93072, 93951], "disallowed"], [[93952, 94020], "valid"], [[94021, 94031], "disallowed"], [[94032, 94078], "valid"], [[94079, 94094], "disallowed"], [[94095, 94111], "valid"], [[94112, 110591], "disallowed"], [[110592, 110593], "valid"], [[110594, 113663], "disallowed"], [[113664, 113770], "valid"], [[113771, 113775], "disallowed"], [[113776, 113788], "valid"], [[113789, 113791], "disallowed"], [[113792, 113800], "valid"], [[113801, 113807], "disallowed"], [[113808, 113817], "valid"], [[113818, 113819], "disallowed"], [[113820, 113820], "valid", [], "NV8"], [[113821, 113822], "valid"], [[113823, 113823], "valid", [], "NV8"], [[113824, 113827], "ignored"], [[113828, 118783], "disallowed"], [[118784, 119029], "valid", [], "NV8"], [[119030, 119039], "disallowed"], [[119040, 119078], "valid", [], "NV8"], [[119079, 119080], "disallowed"], [[119081, 119081], "valid", [], "NV8"], [[119082, 119133], "valid", [], "NV8"], [[119134, 119134], "mapped", [119127, 119141]], [[119135, 119135], "mapped", [119128, 119141]], [[119136, 119136], "mapped", [119128, 119141, 119150]], [[119137, 119137], "mapped", [119128, 119141, 119151]], [[119138, 119138], "mapped", [119128, 119141, 119152]], [[119139, 119139], "mapped", [119128, 119141, 119153]], [[119140, 119140], "mapped", [119128, 119141, 119154]], [[119141, 119154], "valid", [], "NV8"], [[119155, 119162], "disallowed"], [[119163, 119226], "valid", [], "NV8"], [[119227, 119227], "mapped", [119225, 119141]], [[119228, 119228], "mapped", [119226, 119141]], [[119229, 119229], "mapped", [119225, 119141, 119150]], [[119230, 119230], "mapped", [119226, 119141, 119150]], [[119231, 119231], "mapped", [119225, 119141, 119151]], [[119232, 119232], "mapped", [119226, 119141, 119151]], [[119233, 119261], "valid", [], "NV8"], [[119262, 119272], "valid", [], "NV8"], [[119273, 119295], "disallowed"], [[119296, 119365], "valid", [], "NV8"], [[119366, 119551], "disallowed"], [[119552, 119638], "valid", [], "NV8"], [[119639, 119647], "disallowed"], [[119648, 119665], "valid", [], "NV8"], [[119666, 119807], "disallowed"], [[119808, 119808], "mapped", [97]], [[119809, 119809], "mapped", [98]], [[119810, 119810], "mapped", [99]], [[119811, 119811], "mapped", [100]], [[119812, 119812], "mapped", [101]], [[119813, 119813], "mapped", [102]], [[119814, 119814], "mapped", [103]], [[119815, 119815], "mapped", [104]], [[119816, 119816], "mapped", [105]], [[119817, 119817], "mapped", [106]], [[119818, 119818], "mapped", [107]], [[119819, 119819], "mapped", [108]], [[119820, 119820], "mapped", [109]], [[119821, 119821], "mapped", [110]], [[119822, 119822], "mapped", [111]], [[119823, 119823], "mapped", [112]], [[119824, 119824], "mapped", [113]], [[119825, 119825], "mapped", [114]], [[119826, 119826], "mapped", [115]], [[119827, 119827], "mapped", [116]], [[119828, 119828], "mapped", [117]], [[119829, 119829], "mapped", [118]], [[119830, 119830], "mapped", [119]], [[119831, 119831], "mapped", [120]], [[119832, 119832], "mapped", [121]], [[119833, 119833], "mapped", [122]], [[119834, 119834], "mapped", [97]], [[119835, 119835], "mapped", [98]], [[119836, 119836], "mapped", [99]], [[119837, 119837], "mapped", [100]], [[119838, 119838], "mapped", [101]], [[119839, 119839], "mapped", [102]], [[119840, 119840], "mapped", [103]], [[119841, 119841], "mapped", [104]], [[119842, 119842], "mapped", [105]], [[119843, 119843], "mapped", [106]], [[119844, 119844], "mapped", [107]], [[119845, 119845], "mapped", [108]], [[119846, 119846], "mapped", [109]], [[119847, 119847], "mapped", [110]], [[119848, 119848], "mapped", [111]], [[119849, 119849], "mapped", [112]], [[119850, 119850], "mapped", [113]], [[119851, 119851], "mapped", [114]], [[119852, 119852], "mapped", [115]], [[119853, 119853], "mapped", [116]], [[119854, 119854], "mapped", [117]], [[119855, 119855], "mapped", [118]], [[119856, 119856], "mapped", [119]], [[119857, 119857], "mapped", [120]], [[119858, 119858], "mapped", [121]], [[119859, 119859], "mapped", [122]], [[119860, 119860], "mapped", [97]], [[119861, 119861], "mapped", [98]], [[119862, 119862], "mapped", [99]], [[119863, 119863], "mapped", [100]], [[119864, 119864], "mapped", [101]], [[119865, 119865], "mapped", [102]], [[119866, 119866], "mapped", [103]], [[119867, 119867], "mapped", [104]], [[119868, 119868], "mapped", [105]], [[119869, 119869], "mapped", [106]], [[119870, 119870], "mapped", [107]], [[119871, 119871], "mapped", [108]], [[119872, 119872], "mapped", [109]], [[119873, 119873], "mapped", [110]], [[119874, 119874], "mapped", [111]], [[119875, 119875], "mapped", [112]], [[119876, 119876], "mapped", [113]], [[119877, 119877], "mapped", [114]], [[119878, 119878], "mapped", [115]], [[119879, 119879], "mapped", [116]], [[119880, 119880], "mapped", [117]], [[119881, 119881], "mapped", [118]], [[119882, 119882], "mapped", [119]], [[119883, 119883], "mapped", [120]], [[119884, 119884], "mapped", [121]], [[119885, 119885], "mapped", [122]], [[119886, 119886], "mapped", [97]], [[119887, 119887], "mapped", [98]], [[119888, 119888], "mapped", [99]], [[119889, 119889], "mapped", [100]], [[119890, 119890], "mapped", [101]], [[119891, 119891], "mapped", [102]], [[119892, 119892], "mapped", [103]], [[119893, 119893], "disallowed"], [[119894, 119894], "mapped", [105]], [[119895, 119895], "mapped", [106]], [[119896, 119896], "mapped", [107]], [[119897, 119897], "mapped", [108]], [[119898, 119898], "mapped", [109]], [[119899, 119899], "mapped", [110]], [[119900, 119900], "mapped", [111]], [[119901, 119901], "mapped", [112]], [[119902, 119902], "mapped", [113]], [[119903, 119903], "mapped", [114]], [[119904, 119904], "mapped", [115]], [[119905, 119905], "mapped", [116]], [[119906, 119906], "mapped", [117]], [[119907, 119907], "mapped", [118]], [[119908, 119908], "mapped", [119]], [[119909, 119909], "mapped", [120]], [[119910, 119910], "mapped", [121]], [[119911, 119911], "mapped", [122]], [[119912, 119912], "mapped", [97]], [[119913, 119913], "mapped", [98]], [[119914, 119914], "mapped", [99]], [[119915, 119915], "mapped", [100]], [[119916, 119916], "mapped", [101]], [[119917, 119917], "mapped", [102]], [[119918, 119918], "mapped", [103]], [[119919, 119919], "mapped", [104]], [[119920, 119920], "mapped", [105]], [[119921, 119921], "mapped", [106]], [[119922, 119922], "mapped", [107]], [[119923, 119923], "mapped", [108]], [[119924, 119924], "mapped", [109]], [[119925, 119925], "mapped", [110]], [[119926, 119926], "mapped", [111]], [[119927, 119927], "mapped", [112]], [[119928, 119928], "mapped", [113]], [[119929, 119929], "mapped", [114]], [[119930, 119930], "mapped", [115]], [[119931, 119931], "mapped", [116]], [[119932, 119932], "mapped", [117]], [[119933, 119933], "mapped", [118]], [[119934, 119934], "mapped", [119]], [[119935, 119935], "mapped", [120]], [[119936, 119936], "mapped", [121]], [[119937, 119937], "mapped", [122]], [[119938, 119938], "mapped", [97]], [[119939, 119939], "mapped", [98]], [[119940, 119940], "mapped", [99]], [[119941, 119941], "mapped", [100]], [[119942, 119942], "mapped", [101]], [[119943, 119943], "mapped", [102]], [[119944, 119944], "mapped", [103]], [[119945, 119945], "mapped", [104]], [[119946, 119946], "mapped", [105]], [[119947, 119947], "mapped", [106]], [[119948, 119948], "mapped", [107]], [[119949, 119949], "mapped", [108]], [[119950, 119950], "mapped", [109]], [[119951, 119951], "mapped", [110]], [[119952, 119952], "mapped", [111]], [[119953, 119953], "mapped", [112]], [[119954, 119954], "mapped", [113]], [[119955, 119955], "mapped", [114]], [[119956, 119956], "mapped", [115]], [[119957, 119957], "mapped", [116]], [[119958, 119958], "mapped", [117]], [[119959, 119959], "mapped", [118]], [[119960, 119960], "mapped", [119]], [[119961, 119961], "mapped", [120]], [[119962, 119962], "mapped", [121]], [[119963, 119963], "mapped", [122]], [[119964, 119964], "mapped", [97]], [[119965, 119965], "disallowed"], [[119966, 119966], "mapped", [99]], [[119967, 119967], "mapped", [100]], [[119968, 119969], "disallowed"], [[119970, 119970], "mapped", [103]], [[119971, 119972], "disallowed"], [[119973, 119973], "mapped", [106]], [[119974, 119974], "mapped", [107]], [[119975, 119976], "disallowed"], [[119977, 119977], "mapped", [110]], [[119978, 119978], "mapped", [111]], [[119979, 119979], "mapped", [112]], [[119980, 119980], "mapped", [113]], [[119981, 119981], "disallowed"], [[119982, 119982], "mapped", [115]], [[119983, 119983], "mapped", [116]], [[119984, 119984], "mapped", [117]], [[119985, 119985], "mapped", [118]], [[119986, 119986], "mapped", [119]], [[119987, 119987], "mapped", [120]], [[119988, 119988], "mapped", [121]], [[119989, 119989], "mapped", [122]], [[119990, 119990], "mapped", [97]], [[119991, 119991], "mapped", [98]], [[119992, 119992], "mapped", [99]], [[119993, 119993], "mapped", [100]], [[119994, 119994], "disallowed"], [[119995, 119995], "mapped", [102]], [[119996, 119996], "disallowed"], [[119997, 119997], "mapped", [104]], [[119998, 119998], "mapped", [105]], [[119999, 119999], "mapped", [106]], [[12e4, 12e4], "mapped", [107]], [[120001, 120001], "mapped", [108]], [[120002, 120002], "mapped", [109]], [[120003, 120003], "mapped", [110]], [[120004, 120004], "disallowed"], [[120005, 120005], "mapped", [112]], [[120006, 120006], "mapped", [113]], [[120007, 120007], "mapped", [114]], [[120008, 120008], "mapped", [115]], [[120009, 120009], "mapped", [116]], [[120010, 120010], "mapped", [117]], [[120011, 120011], "mapped", [118]], [[120012, 120012], "mapped", [119]], [[120013, 120013], "mapped", [120]], [[120014, 120014], "mapped", [121]], [[120015, 120015], "mapped", [122]], [[120016, 120016], "mapped", [97]], [[120017, 120017], "mapped", [98]], [[120018, 120018], "mapped", [99]], [[120019, 120019], "mapped", [100]], [[120020, 120020], "mapped", [101]], [[120021, 120021], "mapped", [102]], [[120022, 120022], "mapped", [103]], [[120023, 120023], "mapped", [104]], [[120024, 120024], "mapped", [105]], [[120025, 120025], "mapped", [106]], [[120026, 120026], "mapped", [107]], [[120027, 120027], "mapped", [108]], [[120028, 120028], "mapped", [109]], [[120029, 120029], "mapped", [110]], [[120030, 120030], "mapped", [111]], [[120031, 120031], "mapped", [112]], [[120032, 120032], "mapped", [113]], [[120033, 120033], "mapped", [114]], [[120034, 120034], "mapped", [115]], [[120035, 120035], "mapped", [116]], [[120036, 120036], "mapped", [117]], [[120037, 120037], "mapped", [118]], [[120038, 120038], "mapped", [119]], [[120039, 120039], "mapped", [120]], [[120040, 120040], "mapped", [121]], [[120041, 120041], "mapped", [122]], [[120042, 120042], "mapped", [97]], [[120043, 120043], "mapped", [98]], [[120044, 120044], "mapped", [99]], [[120045, 120045], "mapped", [100]], [[120046, 120046], "mapped", [101]], [[120047, 120047], "mapped", [102]], [[120048, 120048], "mapped", [103]], [[120049, 120049], "mapped", [104]], [[120050, 120050], "mapped", [105]], [[120051, 120051], "mapped", [106]], [[120052, 120052], "mapped", [107]], [[120053, 120053], "mapped", [108]], [[120054, 120054], "mapped", [109]], [[120055, 120055], "mapped", [110]], [[120056, 120056], "mapped", [111]], [[120057, 120057], "mapped", [112]], [[120058, 120058], "mapped", [113]], [[120059, 120059], "mapped", [114]], [[120060, 120060], "mapped", [115]], [[120061, 120061], "mapped", [116]], [[120062, 120062], "mapped", [117]], [[120063, 120063], "mapped", [118]], [[120064, 120064], "mapped", [119]], [[120065, 120065], "mapped", [120]], [[120066, 120066], "mapped", [121]], [[120067, 120067], "mapped", [122]], [[120068, 120068], "mapped", [97]], [[120069, 120069], "mapped", [98]], [[120070, 120070], "disallowed"], [[120071, 120071], "mapped", [100]], [[120072, 120072], "mapped", [101]], [[120073, 120073], "mapped", [102]], [[120074, 120074], "mapped", [103]], [[120075, 120076], "disallowed"], [[120077, 120077], "mapped", [106]], [[120078, 120078], "mapped", [107]], [[120079, 120079], "mapped", [108]], [[120080, 120080], "mapped", [109]], [[120081, 120081], "mapped", [110]], [[120082, 120082], "mapped", [111]], [[120083, 120083], "mapped", [112]], [[120084, 120084], "mapped", [113]], [[120085, 120085], "disallowed"], [[120086, 120086], "mapped", [115]], [[120087, 120087], "mapped", [116]], [[120088, 120088], "mapped", [117]], [[120089, 120089], "mapped", [118]], [[120090, 120090], "mapped", [119]], [[120091, 120091], "mapped", [120]], [[120092, 120092], "mapped", [121]], [[120093, 120093], "disallowed"], [[120094, 120094], "mapped", [97]], [[120095, 120095], "mapped", [98]], [[120096, 120096], "mapped", [99]], [[120097, 120097], "mapped", [100]], [[120098, 120098], "mapped", [101]], [[120099, 120099], "mapped", [102]], [[120100, 120100], "mapped", [103]], [[120101, 120101], "mapped", [104]], [[120102, 120102], "mapped", [105]], [[120103, 120103], "mapped", [106]], [[120104, 120104], "mapped", [107]], [[120105, 120105], "mapped", [108]], [[120106, 120106], "mapped", [109]], [[120107, 120107], "mapped", [110]], [[120108, 120108], "mapped", [111]], [[120109, 120109], "mapped", [112]], [[120110, 120110], "mapped", [113]], [[120111, 120111], "mapped", [114]], [[120112, 120112], "mapped", [115]], [[120113, 120113], "mapped", [116]], [[120114, 120114], "mapped", [117]], [[120115, 120115], "mapped", [118]], [[120116, 120116], "mapped", [119]], [[120117, 120117], "mapped", [120]], [[120118, 120118], "mapped", [121]], [[120119, 120119], "mapped", [122]], [[120120, 120120], "mapped", [97]], [[120121, 120121], "mapped", [98]], [[120122, 120122], "disallowed"], [[120123, 120123], "mapped", [100]], [[120124, 120124], "mapped", [101]], [[120125, 120125], "mapped", [102]], [[120126, 120126], "mapped", [103]], [[120127, 120127], "disallowed"], [[120128, 120128], "mapped", [105]], [[120129, 120129], "mapped", [106]], [[120130, 120130], "mapped", [107]], [[120131, 120131], "mapped", [108]], [[120132, 120132], "mapped", [109]], [[120133, 120133], "disallowed"], [[120134, 120134], "mapped", [111]], [[120135, 120137], "disallowed"], [[120138, 120138], "mapped", [115]], [[120139, 120139], "mapped", [116]], [[120140, 120140], "mapped", [117]], [[120141, 120141], "mapped", [118]], [[120142, 120142], "mapped", [119]], [[120143, 120143], "mapped", [120]], [[120144, 120144], "mapped", [121]], [[120145, 120145], "disallowed"], [[120146, 120146], "mapped", [97]], [[120147, 120147], "mapped", [98]], [[120148, 120148], "mapped", [99]], [[120149, 120149], "mapped", [100]], [[120150, 120150], "mapped", [101]], [[120151, 120151], "mapped", [102]], [[120152, 120152], "mapped", [103]], [[120153, 120153], "mapped", [104]], [[120154, 120154], "mapped", [105]], [[120155, 120155], "mapped", [106]], [[120156, 120156], "mapped", [107]], [[120157, 120157], "mapped", [108]], [[120158, 120158], "mapped", [109]], [[120159, 120159], "mapped", [110]], [[120160, 120160], "mapped", [111]], [[120161, 120161], "mapped", [112]], [[120162, 120162], "mapped", [113]], [[120163, 120163], "mapped", [114]], [[120164, 120164], "mapped", [115]], [[120165, 120165], "mapped", [116]], [[120166, 120166], "mapped", [117]], [[120167, 120167], "mapped", [118]], [[120168, 120168], "mapped", [119]], [[120169, 120169], "mapped", [120]], [[120170, 120170], "mapped", [121]], [[120171, 120171], "mapped", [122]], [[120172, 120172], "mapped", [97]], [[120173, 120173], "mapped", [98]], [[120174, 120174], "mapped", [99]], [[120175, 120175], "mapped", [100]], [[120176, 120176], "mapped", [101]], [[120177, 120177], "mapped", [102]], [[120178, 120178], "mapped", [103]], [[120179, 120179], "mapped", [104]], [[120180, 120180], "mapped", [105]], [[120181, 120181], "mapped", [106]], [[120182, 120182], "mapped", [107]], [[120183, 120183], "mapped", [108]], [[120184, 120184], "mapped", [109]], [[120185, 120185], "mapped", [110]], [[120186, 120186], "mapped", [111]], [[120187, 120187], "mapped", [112]], [[120188, 120188], "mapped", [113]], [[120189, 120189], "mapped", [114]], [[120190, 120190], "mapped", [115]], [[120191, 120191], "mapped", [116]], [[120192, 120192], "mapped", [117]], [[120193, 120193], "mapped", [118]], [[120194, 120194], "mapped", [119]], [[120195, 120195], "mapped", [120]], [[120196, 120196], "mapped", [121]], [[120197, 120197], "mapped", [122]], [[120198, 120198], "mapped", [97]], [[120199, 120199], "mapped", [98]], [[120200, 120200], "mapped", [99]], [[120201, 120201], "mapped", [100]], [[120202, 120202], "mapped", [101]], [[120203, 120203], "mapped", [102]], [[120204, 120204], "mapped", [103]], [[120205, 120205], "mapped", [104]], [[120206, 120206], "mapped", [105]], [[120207, 120207], "mapped", [106]], [[120208, 120208], "mapped", [107]], [[120209, 120209], "mapped", [108]], [[120210, 120210], "mapped", [109]], [[120211, 120211], "mapped", [110]], [[120212, 120212], "mapped", [111]], [[120213, 120213], "mapped", [112]], [[120214, 120214], "mapped", [113]], [[120215, 120215], "mapped", [114]], [[120216, 120216], "mapped", [115]], [[120217, 120217], "mapped", [116]], [[120218, 120218], "mapped", [117]], [[120219, 120219], "mapped", [118]], [[120220, 120220], "mapped", [119]], [[120221, 120221], "mapped", [120]], [[120222, 120222], "mapped", [121]], [[120223, 120223], "mapped", [122]], [[120224, 120224], "mapped", [97]], [[120225, 120225], "mapped", [98]], [[120226, 120226], "mapped", [99]], [[120227, 120227], "mapped", [100]], [[120228, 120228], "mapped", [101]], [[120229, 120229], "mapped", [102]], [[120230, 120230], "mapped", [103]], [[120231, 120231], "mapped", [104]], [[120232, 120232], "mapped", [105]], [[120233, 120233], "mapped", [106]], [[120234, 120234], "mapped", [107]], [[120235, 120235], "mapped", [108]], [[120236, 120236], "mapped", [109]], [[120237, 120237], "mapped", [110]], [[120238, 120238], "mapped", [111]], [[120239, 120239], "mapped", [112]], [[120240, 120240], "mapped", [113]], [[120241, 120241], "mapped", [114]], [[120242, 120242], "mapped", [115]], [[120243, 120243], "mapped", [116]], [[120244, 120244], "mapped", [117]], [[120245, 120245], "mapped", [118]], [[120246, 120246], "mapped", [119]], [[120247, 120247], "mapped", [120]], [[120248, 120248], "mapped", [121]], [[120249, 120249], "mapped", [122]], [[120250, 120250], "mapped", [97]], [[120251, 120251], "mapped", [98]], [[120252, 120252], "mapped", [99]], [[120253, 120253], "mapped", [100]], [[120254, 120254], "mapped", [101]], [[120255, 120255], "mapped", [102]], [[120256, 120256], "mapped", [103]], [[120257, 120257], "mapped", [104]], [[120258, 120258], "mapped", [105]], [[120259, 120259], "mapped", [106]], [[120260, 120260], "mapped", [107]], [[120261, 120261], "mapped", [108]], [[120262, 120262], "mapped", [109]], [[120263, 120263], "mapped", [110]], [[120264, 120264], "mapped", [111]], [[120265, 120265], "mapped", [112]], [[120266, 120266], "mapped", [113]], [[120267, 120267], "mapped", [114]], [[120268, 120268], "mapped", [115]], [[120269, 120269], "mapped", [116]], [[120270, 120270], "mapped", [117]], [[120271, 120271], "mapped", [118]], [[120272, 120272], "mapped", [119]], [[120273, 120273], "mapped", [120]], [[120274, 120274], "mapped", [121]], [[120275, 120275], "mapped", [122]], [[120276, 120276], "mapped", [97]], [[120277, 120277], "mapped", [98]], [[120278, 120278], "mapped", [99]], [[120279, 120279], "mapped", [100]], [[120280, 120280], "mapped", [101]], [[120281, 120281], "mapped", [102]], [[120282, 120282], "mapped", [103]], [[120283, 120283], "mapped", [104]], [[120284, 120284], "mapped", [105]], [[120285, 120285], "mapped", [106]], [[120286, 120286], "mapped", [107]], [[120287, 120287], "mapped", [108]], [[120288, 120288], "mapped", [109]], [[120289, 120289], "mapped", [110]], [[120290, 120290], "mapped", [111]], [[120291, 120291], "mapped", [112]], [[120292, 120292], "mapped", [113]], [[120293, 120293], "mapped", [114]], [[120294, 120294], "mapped", [115]], [[120295, 120295], "mapped", [116]], [[120296, 120296], "mapped", [117]], [[120297, 120297], "mapped", [118]], [[120298, 120298], "mapped", [119]], [[120299, 120299], "mapped", [120]], [[120300, 120300], "mapped", [121]], [[120301, 120301], "mapped", [122]], [[120302, 120302], "mapped", [97]], [[120303, 120303], "mapped", [98]], [[120304, 120304], "mapped", [99]], [[120305, 120305], "mapped", [100]], [[120306, 120306], "mapped", [101]], [[120307, 120307], "mapped", [102]], [[120308, 120308], "mapped", [103]], [[120309, 120309], "mapped", [104]], [[120310, 120310], "mapped", [105]], [[120311, 120311], "mapped", [106]], [[120312, 120312], "mapped", [107]], [[120313, 120313], "mapped", [108]], [[120314, 120314], "mapped", [109]], [[120315, 120315], "mapped", [110]], [[120316, 120316], "mapped", [111]], [[120317, 120317], "mapped", [112]], [[120318, 120318], "mapped", [113]], [[120319, 120319], "mapped", [114]], [[120320, 120320], "mapped", [115]], [[120321, 120321], "mapped", [116]], [[120322, 120322], "mapped", [117]], [[120323, 120323], "mapped", [118]], [[120324, 120324], "mapped", [119]], [[120325, 120325], "mapped", [120]], [[120326, 120326], "mapped", [121]], [[120327, 120327], "mapped", [122]], [[120328, 120328], "mapped", [97]], [[120329, 120329], "mapped", [98]], [[120330, 120330], "mapped", [99]], [[120331, 120331], "mapped", [100]], [[120332, 120332], "mapped", [101]], [[120333, 120333], "mapped", [102]], [[120334, 120334], "mapped", [103]], [[120335, 120335], "mapped", [104]], [[120336, 120336], "mapped", [105]], [[120337, 120337], "mapped", [106]], [[120338, 120338], "mapped", [107]], [[120339, 120339], "mapped", [108]], [[120340, 120340], "mapped", [109]], [[120341, 120341], "mapped", [110]], [[120342, 120342], "mapped", [111]], [[120343, 120343], "mapped", [112]], [[120344, 120344], "mapped", [113]], [[120345, 120345], "mapped", [114]], [[120346, 120346], "mapped", [115]], [[120347, 120347], "mapped", [116]], [[120348, 120348], "mapped", [117]], [[120349, 120349], "mapped", [118]], [[120350, 120350], "mapped", [119]], [[120351, 120351], "mapped", [120]], [[120352, 120352], "mapped", [121]], [[120353, 120353], "mapped", [122]], [[120354, 120354], "mapped", [97]], [[120355, 120355], "mapped", [98]], [[120356, 120356], "mapped", [99]], [[120357, 120357], "mapped", [100]], [[120358, 120358], "mapped", [101]], [[120359, 120359], "mapped", [102]], [[120360, 120360], "mapped", [103]], [[120361, 120361], "mapped", [104]], [[120362, 120362], "mapped", [105]], [[120363, 120363], "mapped", [106]], [[120364, 120364], "mapped", [107]], [[120365, 120365], "mapped", [108]], [[120366, 120366], "mapped", [109]], [[120367, 120367], "mapped", [110]], [[120368, 120368], "mapped", [111]], [[120369, 120369], "mapped", [112]], [[120370, 120370], "mapped", [113]], [[120371, 120371], "mapped", [114]], [[120372, 120372], "mapped", [115]], [[120373, 120373], "mapped", [116]], [[120374, 120374], "mapped", [117]], [[120375, 120375], "mapped", [118]], [[120376, 120376], "mapped", [119]], [[120377, 120377], "mapped", [120]], [[120378, 120378], "mapped", [121]], [[120379, 120379], "mapped", [122]], [[120380, 120380], "mapped", [97]], [[120381, 120381], "mapped", [98]], [[120382, 120382], "mapped", [99]], [[120383, 120383], "mapped", [100]], [[120384, 120384], "mapped", [101]], [[120385, 120385], "mapped", [102]], [[120386, 120386], "mapped", [103]], [[120387, 120387], "mapped", [104]], [[120388, 120388], "mapped", [105]], [[120389, 120389], "mapped", [106]], [[120390, 120390], "mapped", [107]], [[120391, 120391], "mapped", [108]], [[120392, 120392], "mapped", [109]], [[120393, 120393], "mapped", [110]], [[120394, 120394], "mapped", [111]], [[120395, 120395], "mapped", [112]], [[120396, 120396], "mapped", [113]], [[120397, 120397], "mapped", [114]], [[120398, 120398], "mapped", [115]], [[120399, 120399], "mapped", [116]], [[120400, 120400], "mapped", [117]], [[120401, 120401], "mapped", [118]], [[120402, 120402], "mapped", [119]], [[120403, 120403], "mapped", [120]], [[120404, 120404], "mapped", [121]], [[120405, 120405], "mapped", [122]], [[120406, 120406], "mapped", [97]], [[120407, 120407], "mapped", [98]], [[120408, 120408], "mapped", [99]], [[120409, 120409], "mapped", [100]], [[120410, 120410], "mapped", [101]], [[120411, 120411], "mapped", [102]], [[120412, 120412], "mapped", [103]], [[120413, 120413], "mapped", [104]], [[120414, 120414], "mapped", [105]], [[120415, 120415], "mapped", [106]], [[120416, 120416], "mapped", [107]], [[120417, 120417], "mapped", [108]], [[120418, 120418], "mapped", [109]], [[120419, 120419], "mapped", [110]], [[120420, 120420], "mapped", [111]], [[120421, 120421], "mapped", [112]], [[120422, 120422], "mapped", [113]], [[120423, 120423], "mapped", [114]], [[120424, 120424], "mapped", [115]], [[120425, 120425], "mapped", [116]], [[120426, 120426], "mapped", [117]], [[120427, 120427], "mapped", [118]], [[120428, 120428], "mapped", [119]], [[120429, 120429], "mapped", [120]], [[120430, 120430], "mapped", [121]], [[120431, 120431], "mapped", [122]], [[120432, 120432], "mapped", [97]], [[120433, 120433], "mapped", [98]], [[120434, 120434], "mapped", [99]], [[120435, 120435], "mapped", [100]], [[120436, 120436], "mapped", [101]], [[120437, 120437], "mapped", [102]], [[120438, 120438], "mapped", [103]], [[120439, 120439], "mapped", [104]], [[120440, 120440], "mapped", [105]], [[120441, 120441], "mapped", [106]], [[120442, 120442], "mapped", [107]], [[120443, 120443], "mapped", [108]], [[120444, 120444], "mapped", [109]], [[120445, 120445], "mapped", [110]], [[120446, 120446], "mapped", [111]], [[120447, 120447], "mapped", [112]], [[120448, 120448], "mapped", [113]], [[120449, 120449], "mapped", [114]], [[120450, 120450], "mapped", [115]], [[120451, 120451], "mapped", [116]], [[120452, 120452], "mapped", [117]], [[120453, 120453], "mapped", [118]], [[120454, 120454], "mapped", [119]], [[120455, 120455], "mapped", [120]], [[120456, 120456], "mapped", [121]], [[120457, 120457], "mapped", [122]], [[120458, 120458], "mapped", [97]], [[120459, 120459], "mapped", [98]], [[120460, 120460], "mapped", [99]], [[120461, 120461], "mapped", [100]], [[120462, 120462], "mapped", [101]], [[120463, 120463], "mapped", [102]], [[120464, 120464], "mapped", [103]], [[120465, 120465], "mapped", [104]], [[120466, 120466], "mapped", [105]], [[120467, 120467], "mapped", [106]], [[120468, 120468], "mapped", [107]], [[120469, 120469], "mapped", [108]], [[120470, 120470], "mapped", [109]], [[120471, 120471], "mapped", [110]], [[120472, 120472], "mapped", [111]], [[120473, 120473], "mapped", [112]], [[120474, 120474], "mapped", [113]], [[120475, 120475], "mapped", [114]], [[120476, 120476], "mapped", [115]], [[120477, 120477], "mapped", [116]], [[120478, 120478], "mapped", [117]], [[120479, 120479], "mapped", [118]], [[120480, 120480], "mapped", [119]], [[120481, 120481], "mapped", [120]], [[120482, 120482], "mapped", [121]], [[120483, 120483], "mapped", [122]], [[120484, 120484], "mapped", [305]], [[120485, 120485], "mapped", [567]], [[120486, 120487], "disallowed"], [[120488, 120488], "mapped", [945]], [[120489, 120489], "mapped", [946]], [[120490, 120490], "mapped", [947]], [[120491, 120491], "mapped", [948]], [[120492, 120492], "mapped", [949]], [[120493, 120493], "mapped", [950]], [[120494, 120494], "mapped", [951]], [[120495, 120495], "mapped", [952]], [[120496, 120496], "mapped", [953]], [[120497, 120497], "mapped", [954]], [[120498, 120498], "mapped", [955]], [[120499, 120499], "mapped", [956]], [[120500, 120500], "mapped", [957]], [[120501, 120501], "mapped", [958]], [[120502, 120502], "mapped", [959]], [[120503, 120503], "mapped", [960]], [[120504, 120504], "mapped", [961]], [[120505, 120505], "mapped", [952]], [[120506, 120506], "mapped", [963]], [[120507, 120507], "mapped", [964]], [[120508, 120508], "mapped", [965]], [[120509, 120509], "mapped", [966]], [[120510, 120510], "mapped", [967]], [[120511, 120511], "mapped", [968]], [[120512, 120512], "mapped", [969]], [[120513, 120513], "mapped", [8711]], [[120514, 120514], "mapped", [945]], [[120515, 120515], "mapped", [946]], [[120516, 120516], "mapped", [947]], [[120517, 120517], "mapped", [948]], [[120518, 120518], "mapped", [949]], [[120519, 120519], "mapped", [950]], [[120520, 120520], "mapped", [951]], [[120521, 120521], "mapped", [952]], [[120522, 120522], "mapped", [953]], [[120523, 120523], "mapped", [954]], [[120524, 120524], "mapped", [955]], [[120525, 120525], "mapped", [956]], [[120526, 120526], "mapped", [957]], [[120527, 120527], "mapped", [958]], [[120528, 120528], "mapped", [959]], [[120529, 120529], "mapped", [960]], [[120530, 120530], "mapped", [961]], [[120531, 120532], "mapped", [963]], [[120533, 120533], "mapped", [964]], [[120534, 120534], "mapped", [965]], [[120535, 120535], "mapped", [966]], [[120536, 120536], "mapped", [967]], [[120537, 120537], "mapped", [968]], [[120538, 120538], "mapped", [969]], [[120539, 120539], "mapped", [8706]], [[120540, 120540], "mapped", [949]], [[120541, 120541], "mapped", [952]], [[120542, 120542], "mapped", [954]], [[120543, 120543], "mapped", [966]], [[120544, 120544], "mapped", [961]], [[120545, 120545], "mapped", [960]], [[120546, 120546], "mapped", [945]], [[120547, 120547], "mapped", [946]], [[120548, 120548], "mapped", [947]], [[120549, 120549], "mapped", [948]], [[120550, 120550], "mapped", [949]], [[120551, 120551], "mapped", [950]], [[120552, 120552], "mapped", [951]], [[120553, 120553], "mapped", [952]], [[120554, 120554], "mapped", [953]], [[120555, 120555], "mapped", [954]], [[120556, 120556], "mapped", [955]], [[120557, 120557], "mapped", [956]], [[120558, 120558], "mapped", [957]], [[120559, 120559], "mapped", [958]], [[120560, 120560], "mapped", [959]], [[120561, 120561], "mapped", [960]], [[120562, 120562], "mapped", [961]], [[120563, 120563], "mapped", [952]], [[120564, 120564], "mapped", [963]], [[120565, 120565], "mapped", [964]], [[120566, 120566], "mapped", [965]], [[120567, 120567], "mapped", [966]], [[120568, 120568], "mapped", [967]], [[120569, 120569], "mapped", [968]], [[120570, 120570], "mapped", [969]], [[120571, 120571], "mapped", [8711]], [[120572, 120572], "mapped", [945]], [[120573, 120573], "mapped", [946]], [[120574, 120574], "mapped", [947]], [[120575, 120575], "mapped", [948]], [[120576, 120576], "mapped", [949]], [[120577, 120577], "mapped", [950]], [[120578, 120578], "mapped", [951]], [[120579, 120579], "mapped", [952]], [[120580, 120580], "mapped", [953]], [[120581, 120581], "mapped", [954]], [[120582, 120582], "mapped", [955]], [[120583, 120583], "mapped", [956]], [[120584, 120584], "mapped", [957]], [[120585, 120585], "mapped", [958]], [[120586, 120586], "mapped", [959]], [[120587, 120587], "mapped", [960]], [[120588, 120588], "mapped", [961]], [[120589, 120590], "mapped", [963]], [[120591, 120591], "mapped", [964]], [[120592, 120592], "mapped", [965]], [[120593, 120593], "mapped", [966]], [[120594, 120594], "mapped", [967]], [[120595, 120595], "mapped", [968]], [[120596, 120596], "mapped", [969]], [[120597, 120597], "mapped", [8706]], [[120598, 120598], "mapped", [949]], [[120599, 120599], "mapped", [952]], [[120600, 120600], "mapped", [954]], [[120601, 120601], "mapped", [966]], [[120602, 120602], "mapped", [961]], [[120603, 120603], "mapped", [960]], [[120604, 120604], "mapped", [945]], [[120605, 120605], "mapped", [946]], [[120606, 120606], "mapped", [947]], [[120607, 120607], "mapped", [948]], [[120608, 120608], "mapped", [949]], [[120609, 120609], "mapped", [950]], [[120610, 120610], "mapped", [951]], [[120611, 120611], "mapped", [952]], [[120612, 120612], "mapped", [953]], [[120613, 120613], "mapped", [954]], [[120614, 120614], "mapped", [955]], [[120615, 120615], "mapped", [956]], [[120616, 120616], "mapped", [957]], [[120617, 120617], "mapped", [958]], [[120618, 120618], "mapped", [959]], [[120619, 120619], "mapped", [960]], [[120620, 120620], "mapped", [961]], [[120621, 120621], "mapped", [952]], [[120622, 120622], "mapped", [963]], [[120623, 120623], "mapped", [964]], [[120624, 120624], "mapped", [965]], [[120625, 120625], "mapped", [966]], [[120626, 120626], "mapped", [967]], [[120627, 120627], "mapped", [968]], [[120628, 120628], "mapped", [969]], [[120629, 120629], "mapped", [8711]], [[120630, 120630], "mapped", [945]], [[120631, 120631], "mapped", [946]], [[120632, 120632], "mapped", [947]], [[120633, 120633], "mapped", [948]], [[120634, 120634], "mapped", [949]], [[120635, 120635], "mapped", [950]], [[120636, 120636], "mapped", [951]], [[120637, 120637], "mapped", [952]], [[120638, 120638], "mapped", [953]], [[120639, 120639], "mapped", [954]], [[120640, 120640], "mapped", [955]], [[120641, 120641], "mapped", [956]], [[120642, 120642], "mapped", [957]], [[120643, 120643], "mapped", [958]], [[120644, 120644], "mapped", [959]], [[120645, 120645], "mapped", [960]], [[120646, 120646], "mapped", [961]], [[120647, 120648], "mapped", [963]], [[120649, 120649], "mapped", [964]], [[120650, 120650], "mapped", [965]], [[120651, 120651], "mapped", [966]], [[120652, 120652], "mapped", [967]], [[120653, 120653], "mapped", [968]], [[120654, 120654], "mapped", [969]], [[120655, 120655], "mapped", [8706]], [[120656, 120656], "mapped", [949]], [[120657, 120657], "mapped", [952]], [[120658, 120658], "mapped", [954]], [[120659, 120659], "mapped", [966]], [[120660, 120660], "mapped", [961]], [[120661, 120661], "mapped", [960]], [[120662, 120662], "mapped", [945]], [[120663, 120663], "mapped", [946]], [[120664, 120664], "mapped", [947]], [[120665, 120665], "mapped", [948]], [[120666, 120666], "mapped", [949]], [[120667, 120667], "mapped", [950]], [[120668, 120668], "mapped", [951]], [[120669, 120669], "mapped", [952]], [[120670, 120670], "mapped", [953]], [[120671, 120671], "mapped", [954]], [[120672, 120672], "mapped", [955]], [[120673, 120673], "mapped", [956]], [[120674, 120674], "mapped", [957]], [[120675, 120675], "mapped", [958]], [[120676, 120676], "mapped", [959]], [[120677, 120677], "mapped", [960]], [[120678, 120678], "mapped", [961]], [[120679, 120679], "mapped", [952]], [[120680, 120680], "mapped", [963]], [[120681, 120681], "mapped", [964]], [[120682, 120682], "mapped", [965]], [[120683, 120683], "mapped", [966]], [[120684, 120684], "mapped", [967]], [[120685, 120685], "mapped", [968]], [[120686, 120686], "mapped", [969]], [[120687, 120687], "mapped", [8711]], [[120688, 120688], "mapped", [945]], [[120689, 120689], "mapped", [946]], [[120690, 120690], "mapped", [947]], [[120691, 120691], "mapped", [948]], [[120692, 120692], "mapped", [949]], [[120693, 120693], "mapped", [950]], [[120694, 120694], "mapped", [951]], [[120695, 120695], "mapped", [952]], [[120696, 120696], "mapped", [953]], [[120697, 120697], "mapped", [954]], [[120698, 120698], "mapped", [955]], [[120699, 120699], "mapped", [956]], [[120700, 120700], "mapped", [957]], [[120701, 120701], "mapped", [958]], [[120702, 120702], "mapped", [959]], [[120703, 120703], "mapped", [960]], [[120704, 120704], "mapped", [961]], [[120705, 120706], "mapped", [963]], [[120707, 120707], "mapped", [964]], [[120708, 120708], "mapped", [965]], [[120709, 120709], "mapped", [966]], [[120710, 120710], "mapped", [967]], [[120711, 120711], "mapped", [968]], [[120712, 120712], "mapped", [969]], [[120713, 120713], "mapped", [8706]], [[120714, 120714], "mapped", [949]], [[120715, 120715], "mapped", [952]], [[120716, 120716], "mapped", [954]], [[120717, 120717], "mapped", [966]], [[120718, 120718], "mapped", [961]], [[120719, 120719], "mapped", [960]], [[120720, 120720], "mapped", [945]], [[120721, 120721], "mapped", [946]], [[120722, 120722], "mapped", [947]], [[120723, 120723], "mapped", [948]], [[120724, 120724], "mapped", [949]], [[120725, 120725], "mapped", [950]], [[120726, 120726], "mapped", [951]], [[120727, 120727], "mapped", [952]], [[120728, 120728], "mapped", [953]], [[120729, 120729], "mapped", [954]], [[120730, 120730], "mapped", [955]], [[120731, 120731], "mapped", [956]], [[120732, 120732], "mapped", [957]], [[120733, 120733], "mapped", [958]], [[120734, 120734], "mapped", [959]], [[120735, 120735], "mapped", [960]], [[120736, 120736], "mapped", [961]], [[120737, 120737], "mapped", [952]], [[120738, 120738], "mapped", [963]], [[120739, 120739], "mapped", [964]], [[120740, 120740], "mapped", [965]], [[120741, 120741], "mapped", [966]], [[120742, 120742], "mapped", [967]], [[120743, 120743], "mapped", [968]], [[120744, 120744], "mapped", [969]], [[120745, 120745], "mapped", [8711]], [[120746, 120746], "mapped", [945]], [[120747, 120747], "mapped", [946]], [[120748, 120748], "mapped", [947]], [[120749, 120749], "mapped", [948]], [[120750, 120750], "mapped", [949]], [[120751, 120751], "mapped", [950]], [[120752, 120752], "mapped", [951]], [[120753, 120753], "mapped", [952]], [[120754, 120754], "mapped", [953]], [[120755, 120755], "mapped", [954]], [[120756, 120756], "mapped", [955]], [[120757, 120757], "mapped", [956]], [[120758, 120758], "mapped", [957]], [[120759, 120759], "mapped", [958]], [[120760, 120760], "mapped", [959]], [[120761, 120761], "mapped", [960]], [[120762, 120762], "mapped", [961]], [[120763, 120764], "mapped", [963]], [[120765, 120765], "mapped", [964]], [[120766, 120766], "mapped", [965]], [[120767, 120767], "mapped", [966]], [[120768, 120768], "mapped", [967]], [[120769, 120769], "mapped", [968]], [[120770, 120770], "mapped", [969]], [[120771, 120771], "mapped", [8706]], [[120772, 120772], "mapped", [949]], [[120773, 120773], "mapped", [952]], [[120774, 120774], "mapped", [954]], [[120775, 120775], "mapped", [966]], [[120776, 120776], "mapped", [961]], [[120777, 120777], "mapped", [960]], [[120778, 120779], "mapped", [989]], [[120780, 120781], "disallowed"], [[120782, 120782], "mapped", [48]], [[120783, 120783], "mapped", [49]], [[120784, 120784], "mapped", [50]], [[120785, 120785], "mapped", [51]], [[120786, 120786], "mapped", [52]], [[120787, 120787], "mapped", [53]], [[120788, 120788], "mapped", [54]], [[120789, 120789], "mapped", [55]], [[120790, 120790], "mapped", [56]], [[120791, 120791], "mapped", [57]], [[120792, 120792], "mapped", [48]], [[120793, 120793], "mapped", [49]], [[120794, 120794], "mapped", [50]], [[120795, 120795], "mapped", [51]], [[120796, 120796], "mapped", [52]], [[120797, 120797], "mapped", [53]], [[120798, 120798], "mapped", [54]], [[120799, 120799], "mapped", [55]], [[120800, 120800], "mapped", [56]], [[120801, 120801], "mapped", [57]], [[120802, 120802], "mapped", [48]], [[120803, 120803], "mapped", [49]], [[120804, 120804], "mapped", [50]], [[120805, 120805], "mapped", [51]], [[120806, 120806], "mapped", [52]], [[120807, 120807], "mapped", [53]], [[120808, 120808], "mapped", [54]], [[120809, 120809], "mapped", [55]], [[120810, 120810], "mapped", [56]], [[120811, 120811], "mapped", [57]], [[120812, 120812], "mapped", [48]], [[120813, 120813], "mapped", [49]], [[120814, 120814], "mapped", [50]], [[120815, 120815], "mapped", [51]], [[120816, 120816], "mapped", [52]], [[120817, 120817], "mapped", [53]], [[120818, 120818], "mapped", [54]], [[120819, 120819], "mapped", [55]], [[120820, 120820], "mapped", [56]], [[120821, 120821], "mapped", [57]], [[120822, 120822], "mapped", [48]], [[120823, 120823], "mapped", [49]], [[120824, 120824], "mapped", [50]], [[120825, 120825], "mapped", [51]], [[120826, 120826], "mapped", [52]], [[120827, 120827], "mapped", [53]], [[120828, 120828], "mapped", [54]], [[120829, 120829], "mapped", [55]], [[120830, 120830], "mapped", [56]], [[120831, 120831], "mapped", [57]], [[120832, 121343], "valid", [], "NV8"], [[121344, 121398], "valid"], [[121399, 121402], "valid", [], "NV8"], [[121403, 121452], "valid"], [[121453, 121460], "valid", [], "NV8"], [[121461, 121461], "valid"], [[121462, 121475], "valid", [], "NV8"], [[121476, 121476], "valid"], [[121477, 121483], "valid", [], "NV8"], [[121484, 121498], "disallowed"], [[121499, 121503], "valid"], [[121504, 121504], "disallowed"], [[121505, 121519], "valid"], [[121520, 124927], "disallowed"], [[124928, 125124], "valid"], [[125125, 125126], "disallowed"], [[125127, 125135], "valid", [], "NV8"], [[125136, 125142], "valid"], [[125143, 126463], "disallowed"], [[126464, 126464], "mapped", [1575]], [[126465, 126465], "mapped", [1576]], [[126466, 126466], "mapped", [1580]], [[126467, 126467], "mapped", [1583]], [[126468, 126468], "disallowed"], [[126469, 126469], "mapped", [1608]], [[126470, 126470], "mapped", [1586]], [[126471, 126471], "mapped", [1581]], [[126472, 126472], "mapped", [1591]], [[126473, 126473], "mapped", [1610]], [[126474, 126474], "mapped", [1603]], [[126475, 126475], "mapped", [1604]], [[126476, 126476], "mapped", [1605]], [[126477, 126477], "mapped", [1606]], [[126478, 126478], "mapped", [1587]], [[126479, 126479], "mapped", [1593]], [[126480, 126480], "mapped", [1601]], [[126481, 126481], "mapped", [1589]], [[126482, 126482], "mapped", [1602]], [[126483, 126483], "mapped", [1585]], [[126484, 126484], "mapped", [1588]], [[126485, 126485], "mapped", [1578]], [[126486, 126486], "mapped", [1579]], [[126487, 126487], "mapped", [1582]], [[126488, 126488], "mapped", [1584]], [[126489, 126489], "mapped", [1590]], [[126490, 126490], "mapped", [1592]], [[126491, 126491], "mapped", [1594]], [[126492, 126492], "mapped", [1646]], [[126493, 126493], "mapped", [1722]], [[126494, 126494], "mapped", [1697]], [[126495, 126495], "mapped", [1647]], [[126496, 126496], "disallowed"], [[126497, 126497], "mapped", [1576]], [[126498, 126498], "mapped", [1580]], [[126499, 126499], "disallowed"], [[126500, 126500], "mapped", [1607]], [[126501, 126502], "disallowed"], [[126503, 126503], "mapped", [1581]], [[126504, 126504], "disallowed"], [[126505, 126505], "mapped", [1610]], [[126506, 126506], "mapped", [1603]], [[126507, 126507], "mapped", [1604]], [[126508, 126508], "mapped", [1605]], [[126509, 126509], "mapped", [1606]], [[126510, 126510], "mapped", [1587]], [[126511, 126511], "mapped", [1593]], [[126512, 126512], "mapped", [1601]], [[126513, 126513], "mapped", [1589]], [[126514, 126514], "mapped", [1602]], [[126515, 126515], "disallowed"], [[126516, 126516], "mapped", [1588]], [[126517, 126517], "mapped", [1578]], [[126518, 126518], "mapped", [1579]], [[126519, 126519], "mapped", [1582]], [[126520, 126520], "disallowed"], [[126521, 126521], "mapped", [1590]], [[126522, 126522], "disallowed"], [[126523, 126523], "mapped", [1594]], [[126524, 126529], "disallowed"], [[126530, 126530], "mapped", [1580]], [[126531, 126534], "disallowed"], [[126535, 126535], "mapped", [1581]], [[126536, 126536], "disallowed"], [[126537, 126537], "mapped", [1610]], [[126538, 126538], "disallowed"], [[126539, 126539], "mapped", [1604]], [[126540, 126540], "disallowed"], [[126541, 126541], "mapped", [1606]], [[126542, 126542], "mapped", [1587]], [[126543, 126543], "mapped", [1593]], [[126544, 126544], "disallowed"], [[126545, 126545], "mapped", [1589]], [[126546, 126546], "mapped", [1602]], [[126547, 126547], "disallowed"], [[126548, 126548], "mapped", [1588]], [[126549, 126550], "disallowed"], [[126551, 126551], "mapped", [1582]], [[126552, 126552], "disallowed"], [[126553, 126553], "mapped", [1590]], [[126554, 126554], "disallowed"], [[126555, 126555], "mapped", [1594]], [[126556, 126556], "disallowed"], [[126557, 126557], "mapped", [1722]], [[126558, 126558], "disallowed"], [[126559, 126559], "mapped", [1647]], [[126560, 126560], "disallowed"], [[126561, 126561], "mapped", [1576]], [[126562, 126562], "mapped", [1580]], [[126563, 126563], "disallowed"], [[126564, 126564], "mapped", [1607]], [[126565, 126566], "disallowed"], [[126567, 126567], "mapped", [1581]], [[126568, 126568], "mapped", [1591]], [[126569, 126569], "mapped", [1610]], [[126570, 126570], "mapped", [1603]], [[126571, 126571], "disallowed"], [[126572, 126572], "mapped", [1605]], [[126573, 126573], "mapped", [1606]], [[126574, 126574], "mapped", [1587]], [[126575, 126575], "mapped", [1593]], [[126576, 126576], "mapped", [1601]], [[126577, 126577], "mapped", [1589]], [[126578, 126578], "mapped", [1602]], [[126579, 126579], "disallowed"], [[126580, 126580], "mapped", [1588]], [[126581, 126581], "mapped", [1578]], [[126582, 126582], "mapped", [1579]], [[126583, 126583], "mapped", [1582]], [[126584, 126584], "disallowed"], [[126585, 126585], "mapped", [1590]], [[126586, 126586], "mapped", [1592]], [[126587, 126587], "mapped", [1594]], [[126588, 126588], "mapped", [1646]], [[126589, 126589], "disallowed"], [[126590, 126590], "mapped", [1697]], [[126591, 126591], "disallowed"], [[126592, 126592], "mapped", [1575]], [[126593, 126593], "mapped", [1576]], [[126594, 126594], "mapped", [1580]], [[126595, 126595], "mapped", [1583]], [[126596, 126596], "mapped", [1607]], [[126597, 126597], "mapped", [1608]], [[126598, 126598], "mapped", [1586]], [[126599, 126599], "mapped", [1581]], [[126600, 126600], "mapped", [1591]], [[126601, 126601], "mapped", [1610]], [[126602, 126602], "disallowed"], [[126603, 126603], "mapped", [1604]], [[126604, 126604], "mapped", [1605]], [[126605, 126605], "mapped", [1606]], [[126606, 126606], "mapped", [1587]], [[126607, 126607], "mapped", [1593]], [[126608, 126608], "mapped", [1601]], [[126609, 126609], "mapped", [1589]], [[126610, 126610], "mapped", [1602]], [[126611, 126611], "mapped", [1585]], [[126612, 126612], "mapped", [1588]], [[126613, 126613], "mapped", [1578]], [[126614, 126614], "mapped", [1579]], [[126615, 126615], "mapped", [1582]], [[126616, 126616], "mapped", [1584]], [[126617, 126617], "mapped", [1590]], [[126618, 126618], "mapped", [1592]], [[126619, 126619], "mapped", [1594]], [[126620, 126624], "disallowed"], [[126625, 126625], "mapped", [1576]], [[126626, 126626], "mapped", [1580]], [[126627, 126627], "mapped", [1583]], [[126628, 126628], "disallowed"], [[126629, 126629], "mapped", [1608]], [[126630, 126630], "mapped", [1586]], [[126631, 126631], "mapped", [1581]], [[126632, 126632], "mapped", [1591]], [[126633, 126633], "mapped", [1610]], [[126634, 126634], "disallowed"], [[126635, 126635], "mapped", [1604]], [[126636, 126636], "mapped", [1605]], [[126637, 126637], "mapped", [1606]], [[126638, 126638], "mapped", [1587]], [[126639, 126639], "mapped", [1593]], [[126640, 126640], "mapped", [1601]], [[126641, 126641], "mapped", [1589]], [[126642, 126642], "mapped", [1602]], [[126643, 126643], "mapped", [1585]], [[126644, 126644], "mapped", [1588]], [[126645, 126645], "mapped", [1578]], [[126646, 126646], "mapped", [1579]], [[126647, 126647], "mapped", [1582]], [[126648, 126648], "mapped", [1584]], [[126649, 126649], "mapped", [1590]], [[126650, 126650], "mapped", [1592]], [[126651, 126651], "mapped", [1594]], [[126652, 126703], "disallowed"], [[126704, 126705], "valid", [], "NV8"], [[126706, 126975], "disallowed"], [[126976, 127019], "valid", [], "NV8"], [[127020, 127023], "disallowed"], [[127024, 127123], "valid", [], "NV8"], [[127124, 127135], "disallowed"], [[127136, 127150], "valid", [], "NV8"], [[127151, 127152], "disallowed"], [[127153, 127166], "valid", [], "NV8"], [[127167, 127167], "valid", [], "NV8"], [[127168, 127168], "disallowed"], [[127169, 127183], "valid", [], "NV8"], [[127184, 127184], "disallowed"], [[127185, 127199], "valid", [], "NV8"], [[127200, 127221], "valid", [], "NV8"], [[127222, 127231], "disallowed"], [[127232, 127232], "disallowed"], [[127233, 127233], "disallowed_STD3_mapped", [48, 44]], [[127234, 127234], "disallowed_STD3_mapped", [49, 44]], [[127235, 127235], "disallowed_STD3_mapped", [50, 44]], [[127236, 127236], "disallowed_STD3_mapped", [51, 44]], [[127237, 127237], "disallowed_STD3_mapped", [52, 44]], [[127238, 127238], "disallowed_STD3_mapped", [53, 44]], [[127239, 127239], "disallowed_STD3_mapped", [54, 44]], [[127240, 127240], "disallowed_STD3_mapped", [55, 44]], [[127241, 127241], "disallowed_STD3_mapped", [56, 44]], [[127242, 127242], "disallowed_STD3_mapped", [57, 44]], [[127243, 127244], "valid", [], "NV8"], [[127245, 127247], "disallowed"], [[127248, 127248], "disallowed_STD3_mapped", [40, 97, 41]], [[127249, 127249], "disallowed_STD3_mapped", [40, 98, 41]], [[127250, 127250], "disallowed_STD3_mapped", [40, 99, 41]], [[127251, 127251], "disallowed_STD3_mapped", [40, 100, 41]], [[127252, 127252], "disallowed_STD3_mapped", [40, 101, 41]], [[127253, 127253], "disallowed_STD3_mapped", [40, 102, 41]], [[127254, 127254], "disallowed_STD3_mapped", [40, 103, 41]], [[127255, 127255], "disallowed_STD3_mapped", [40, 104, 41]], [[127256, 127256], "disallowed_STD3_mapped", [40, 105, 41]], [[127257, 127257], "disallowed_STD3_mapped", [40, 106, 41]], [[127258, 127258], "disallowed_STD3_mapped", [40, 107, 41]], [[127259, 127259], "disallowed_STD3_mapped", [40, 108, 41]], [[127260, 127260], "disallowed_STD3_mapped", [40, 109, 41]], [[127261, 127261], "disallowed_STD3_mapped", [40, 110, 41]], [[127262, 127262], "disallowed_STD3_mapped", [40, 111, 41]], [[127263, 127263], "disallowed_STD3_mapped", [40, 112, 41]], [[127264, 127264], "disallowed_STD3_mapped", [40, 113, 41]], [[127265, 127265], "disallowed_STD3_mapped", [40, 114, 41]], [[127266, 127266], "disallowed_STD3_mapped", [40, 115, 41]], [[127267, 127267], "disallowed_STD3_mapped", [40, 116, 41]], [[127268, 127268], "disallowed_STD3_mapped", [40, 117, 41]], [[127269, 127269], "disallowed_STD3_mapped", [40, 118, 41]], [[127270, 127270], "disallowed_STD3_mapped", [40, 119, 41]], [[127271, 127271], "disallowed_STD3_mapped", [40, 120, 41]], [[127272, 127272], "disallowed_STD3_mapped", [40, 121, 41]], [[127273, 127273], "disallowed_STD3_mapped", [40, 122, 41]], [[127274, 127274], "mapped", [12308, 115, 12309]], [[127275, 127275], "mapped", [99]], [[127276, 127276], "mapped", [114]], [[127277, 127277], "mapped", [99, 100]], [[127278, 127278], "mapped", [119, 122]], [[127279, 127279], "disallowed"], [[127280, 127280], "mapped", [97]], [[127281, 127281], "mapped", [98]], [[127282, 127282], "mapped", [99]], [[127283, 127283], "mapped", [100]], [[127284, 127284], "mapped", [101]], [[127285, 127285], "mapped", [102]], [[127286, 127286], "mapped", [103]], [[127287, 127287], "mapped", [104]], [[127288, 127288], "mapped", [105]], [[127289, 127289], "mapped", [106]], [[127290, 127290], "mapped", [107]], [[127291, 127291], "mapped", [108]], [[127292, 127292], "mapped", [109]], [[127293, 127293], "mapped", [110]], [[127294, 127294], "mapped", [111]], [[127295, 127295], "mapped", [112]], [[127296, 127296], "mapped", [113]], [[127297, 127297], "mapped", [114]], [[127298, 127298], "mapped", [115]], [[127299, 127299], "mapped", [116]], [[127300, 127300], "mapped", [117]], [[127301, 127301], "mapped", [118]], [[127302, 127302], "mapped", [119]], [[127303, 127303], "mapped", [120]], [[127304, 127304], "mapped", [121]], [[127305, 127305], "mapped", [122]], [[127306, 127306], "mapped", [104, 118]], [[127307, 127307], "mapped", [109, 118]], [[127308, 127308], "mapped", [115, 100]], [[127309, 127309], "mapped", [115, 115]], [[127310, 127310], "mapped", [112, 112, 118]], [[127311, 127311], "mapped", [119, 99]], [[127312, 127318], "valid", [], "NV8"], [[127319, 127319], "valid", [], "NV8"], [[127320, 127326], "valid", [], "NV8"], [[127327, 127327], "valid", [], "NV8"], [[127328, 127337], "valid", [], "NV8"], [[127338, 127338], "mapped", [109, 99]], [[127339, 127339], "mapped", [109, 100]], [[127340, 127343], "disallowed"], [[127344, 127352], "valid", [], "NV8"], [[127353, 127353], "valid", [], "NV8"], [[127354, 127354], "valid", [], "NV8"], [[127355, 127356], "valid", [], "NV8"], [[127357, 127358], "valid", [], "NV8"], [[127359, 127359], "valid", [], "NV8"], [[127360, 127369], "valid", [], "NV8"], [[127370, 127373], "valid", [], "NV8"], [[127374, 127375], "valid", [], "NV8"], [[127376, 127376], "mapped", [100, 106]], [[127377, 127386], "valid", [], "NV8"], [[127387, 127461], "disallowed"], [[127462, 127487], "valid", [], "NV8"], [[127488, 127488], "mapped", [12411, 12363]], [[127489, 127489], "mapped", [12467, 12467]], [[127490, 127490], "mapped", [12469]], [[127491, 127503], "disallowed"], [[127504, 127504], "mapped", [25163]], [[127505, 127505], "mapped", [23383]], [[127506, 127506], "mapped", [21452]], [[127507, 127507], "mapped", [12487]], [[127508, 127508], "mapped", [20108]], [[127509, 127509], "mapped", [22810]], [[127510, 127510], "mapped", [35299]], [[127511, 127511], "mapped", [22825]], [[127512, 127512], "mapped", [20132]], [[127513, 127513], "mapped", [26144]], [[127514, 127514], "mapped", [28961]], [[127515, 127515], "mapped", [26009]], [[127516, 127516], "mapped", [21069]], [[127517, 127517], "mapped", [24460]], [[127518, 127518], "mapped", [20877]], [[127519, 127519], "mapped", [26032]], [[127520, 127520], "mapped", [21021]], [[127521, 127521], "mapped", [32066]], [[127522, 127522], "mapped", [29983]], [[127523, 127523], "mapped", [36009]], [[127524, 127524], "mapped", [22768]], [[127525, 127525], "mapped", [21561]], [[127526, 127526], "mapped", [28436]], [[127527, 127527], "mapped", [25237]], [[127528, 127528], "mapped", [25429]], [[127529, 127529], "mapped", [19968]], [[127530, 127530], "mapped", [19977]], [[127531, 127531], "mapped", [36938]], [[127532, 127532], "mapped", [24038]], [[127533, 127533], "mapped", [20013]], [[127534, 127534], "mapped", [21491]], [[127535, 127535], "mapped", [25351]], [[127536, 127536], "mapped", [36208]], [[127537, 127537], "mapped", [25171]], [[127538, 127538], "mapped", [31105]], [[127539, 127539], "mapped", [31354]], [[127540, 127540], "mapped", [21512]], [[127541, 127541], "mapped", [28288]], [[127542, 127542], "mapped", [26377]], [[127543, 127543], "mapped", [26376]], [[127544, 127544], "mapped", [30003]], [[127545, 127545], "mapped", [21106]], [[127546, 127546], "mapped", [21942]], [[127547, 127551], "disallowed"], [[127552, 127552], "mapped", [12308, 26412, 12309]], [[127553, 127553], "mapped", [12308, 19977, 12309]], [[127554, 127554], "mapped", [12308, 20108, 12309]], [[127555, 127555], "mapped", [12308, 23433, 12309]], [[127556, 127556], "mapped", [12308, 28857, 12309]], [[127557, 127557], "mapped", [12308, 25171, 12309]], [[127558, 127558], "mapped", [12308, 30423, 12309]], [[127559, 127559], "mapped", [12308, 21213, 12309]], [[127560, 127560], "mapped", [12308, 25943, 12309]], [[127561, 127567], "disallowed"], [[127568, 127568], "mapped", [24471]], [[127569, 127569], "mapped", [21487]], [[127570, 127743], "disallowed"], [[127744, 127776], "valid", [], "NV8"], [[127777, 127788], "valid", [], "NV8"], [[127789, 127791], "valid", [], "NV8"], [[127792, 127797], "valid", [], "NV8"], [[127798, 127798], "valid", [], "NV8"], [[127799, 127868], "valid", [], "NV8"], [[127869, 127869], "valid", [], "NV8"], [[127870, 127871], "valid", [], "NV8"], [[127872, 127891], "valid", [], "NV8"], [[127892, 127903], "valid", [], "NV8"], [[127904, 127940], "valid", [], "NV8"], [[127941, 127941], "valid", [], "NV8"], [[127942, 127946], "valid", [], "NV8"], [[127947, 127950], "valid", [], "NV8"], [[127951, 127955], "valid", [], "NV8"], [[127956, 127967], "valid", [], "NV8"], [[127968, 127984], "valid", [], "NV8"], [[127985, 127991], "valid", [], "NV8"], [[127992, 127999], "valid", [], "NV8"], [[128e3, 128062], "valid", [], "NV8"], [[128063, 128063], "valid", [], "NV8"], [[128064, 128064], "valid", [], "NV8"], [[128065, 128065], "valid", [], "NV8"], [[128066, 128247], "valid", [], "NV8"], [[128248, 128248], "valid", [], "NV8"], [[128249, 128252], "valid", [], "NV8"], [[128253, 128254], "valid", [], "NV8"], [[128255, 128255], "valid", [], "NV8"], [[128256, 128317], "valid", [], "NV8"], [[128318, 128319], "valid", [], "NV8"], [[128320, 128323], "valid", [], "NV8"], [[128324, 128330], "valid", [], "NV8"], [[128331, 128335], "valid", [], "NV8"], [[128336, 128359], "valid", [], "NV8"], [[128360, 128377], "valid", [], "NV8"], [[128378, 128378], "disallowed"], [[128379, 128419], "valid", [], "NV8"], [[128420, 128420], "disallowed"], [[128421, 128506], "valid", [], "NV8"], [[128507, 128511], "valid", [], "NV8"], [[128512, 128512], "valid", [], "NV8"], [[128513, 128528], "valid", [], "NV8"], [[128529, 128529], "valid", [], "NV8"], [[128530, 128532], "valid", [], "NV8"], [[128533, 128533], "valid", [], "NV8"], [[128534, 128534], "valid", [], "NV8"], [[128535, 128535], "valid", [], "NV8"], [[128536, 128536], "valid", [], "NV8"], [[128537, 128537], "valid", [], "NV8"], [[128538, 128538], "valid", [], "NV8"], [[128539, 128539], "valid", [], "NV8"], [[128540, 128542], "valid", [], "NV8"], [[128543, 128543], "valid", [], "NV8"], [[128544, 128549], "valid", [], "NV8"], [[128550, 128551], "valid", [], "NV8"], [[128552, 128555], "valid", [], "NV8"], [[128556, 128556], "valid", [], "NV8"], [[128557, 128557], "valid", [], "NV8"], [[128558, 128559], "valid", [], "NV8"], [[128560, 128563], "valid", [], "NV8"], [[128564, 128564], "valid", [], "NV8"], [[128565, 128576], "valid", [], "NV8"], [[128577, 128578], "valid", [], "NV8"], [[128579, 128580], "valid", [], "NV8"], [[128581, 128591], "valid", [], "NV8"], [[128592, 128639], "valid", [], "NV8"], [[128640, 128709], "valid", [], "NV8"], [[128710, 128719], "valid", [], "NV8"], [[128720, 128720], "valid", [], "NV8"], [[128721, 128735], "disallowed"], [[128736, 128748], "valid", [], "NV8"], [[128749, 128751], "disallowed"], [[128752, 128755], "valid", [], "NV8"], [[128756, 128767], "disallowed"], [[128768, 128883], "valid", [], "NV8"], [[128884, 128895], "disallowed"], [[128896, 128980], "valid", [], "NV8"], [[128981, 129023], "disallowed"], [[129024, 129035], "valid", [], "NV8"], [[129036, 129039], "disallowed"], [[129040, 129095], "valid", [], "NV8"], [[129096, 129103], "disallowed"], [[129104, 129113], "valid", [], "NV8"], [[129114, 129119], "disallowed"], [[129120, 129159], "valid", [], "NV8"], [[129160, 129167], "disallowed"], [[129168, 129197], "valid", [], "NV8"], [[129198, 129295], "disallowed"], [[129296, 129304], "valid", [], "NV8"], [[129305, 129407], "disallowed"], [[129408, 129412], "valid", [], "NV8"], [[129413, 129471], "disallowed"], [[129472, 129472], "valid", [], "NV8"], [[129473, 131069], "disallowed"], [[131070, 131071], "disallowed"], [[131072, 173782], "valid"], [[173783, 173823], "disallowed"], [[173824, 177972], "valid"], [[177973, 177983], "disallowed"], [[177984, 178205], "valid"], [[178206, 178207], "disallowed"], [[178208, 183969], "valid"], [[183970, 194559], "disallowed"], [[194560, 194560], "mapped", [20029]], [[194561, 194561], "mapped", [20024]], [[194562, 194562], "mapped", [20033]], [[194563, 194563], "mapped", [131362]], [[194564, 194564], "mapped", [20320]], [[194565, 194565], "mapped", [20398]], [[194566, 194566], "mapped", [20411]], [[194567, 194567], "mapped", [20482]], [[194568, 194568], "mapped", [20602]], [[194569, 194569], "mapped", [20633]], [[194570, 194570], "mapped", [20711]], [[194571, 194571], "mapped", [20687]], [[194572, 194572], "mapped", [13470]], [[194573, 194573], "mapped", [132666]], [[194574, 194574], "mapped", [20813]], [[194575, 194575], "mapped", [20820]], [[194576, 194576], "mapped", [20836]], [[194577, 194577], "mapped", [20855]], [[194578, 194578], "mapped", [132380]], [[194579, 194579], "mapped", [13497]], [[194580, 194580], "mapped", [20839]], [[194581, 194581], "mapped", [20877]], [[194582, 194582], "mapped", [132427]], [[194583, 194583], "mapped", [20887]], [[194584, 194584], "mapped", [20900]], [[194585, 194585], "mapped", [20172]], [[194586, 194586], "mapped", [20908]], [[194587, 194587], "mapped", [20917]], [[194588, 194588], "mapped", [168415]], [[194589, 194589], "mapped", [20981]], [[194590, 194590], "mapped", [20995]], [[194591, 194591], "mapped", [13535]], [[194592, 194592], "mapped", [21051]], [[194593, 194593], "mapped", [21062]], [[194594, 194594], "mapped", [21106]], [[194595, 194595], "mapped", [21111]], [[194596, 194596], "mapped", [13589]], [[194597, 194597], "mapped", [21191]], [[194598, 194598], "mapped", [21193]], [[194599, 194599], "mapped", [21220]], [[194600, 194600], "mapped", [21242]], [[194601, 194601], "mapped", [21253]], [[194602, 194602], "mapped", [21254]], [[194603, 194603], "mapped", [21271]], [[194604, 194604], "mapped", [21321]], [[194605, 194605], "mapped", [21329]], [[194606, 194606], "mapped", [21338]], [[194607, 194607], "mapped", [21363]], [[194608, 194608], "mapped", [21373]], [[194609, 194611], "mapped", [21375]], [[194612, 194612], "mapped", [133676]], [[194613, 194613], "mapped", [28784]], [[194614, 194614], "mapped", [21450]], [[194615, 194615], "mapped", [21471]], [[194616, 194616], "mapped", [133987]], [[194617, 194617], "mapped", [21483]], [[194618, 194618], "mapped", [21489]], [[194619, 194619], "mapped", [21510]], [[194620, 194620], "mapped", [21662]], [[194621, 194621], "mapped", [21560]], [[194622, 194622], "mapped", [21576]], [[194623, 194623], "mapped", [21608]], [[194624, 194624], "mapped", [21666]], [[194625, 194625], "mapped", [21750]], [[194626, 194626], "mapped", [21776]], [[194627, 194627], "mapped", [21843]], [[194628, 194628], "mapped", [21859]], [[194629, 194630], "mapped", [21892]], [[194631, 194631], "mapped", [21913]], [[194632, 194632], "mapped", [21931]], [[194633, 194633], "mapped", [21939]], [[194634, 194634], "mapped", [21954]], [[194635, 194635], "mapped", [22294]], [[194636, 194636], "mapped", [22022]], [[194637, 194637], "mapped", [22295]], [[194638, 194638], "mapped", [22097]], [[194639, 194639], "mapped", [22132]], [[194640, 194640], "mapped", [20999]], [[194641, 194641], "mapped", [22766]], [[194642, 194642], "mapped", [22478]], [[194643, 194643], "mapped", [22516]], [[194644, 194644], "mapped", [22541]], [[194645, 194645], "mapped", [22411]], [[194646, 194646], "mapped", [22578]], [[194647, 194647], "mapped", [22577]], [[194648, 194648], "mapped", [22700]], [[194649, 194649], "mapped", [136420]], [[194650, 194650], "mapped", [22770]], [[194651, 194651], "mapped", [22775]], [[194652, 194652], "mapped", [22790]], [[194653, 194653], "mapped", [22810]], [[194654, 194654], "mapped", [22818]], [[194655, 194655], "mapped", [22882]], [[194656, 194656], "mapped", [136872]], [[194657, 194657], "mapped", [136938]], [[194658, 194658], "mapped", [23020]], [[194659, 194659], "mapped", [23067]], [[194660, 194660], "mapped", [23079]], [[194661, 194661], "mapped", [23e3]], [[194662, 194662], "mapped", [23142]], [[194663, 194663], "mapped", [14062]], [[194664, 194664], "disallowed"], [[194665, 194665], "mapped", [23304]], [[194666, 194667], "mapped", [23358]], [[194668, 194668], "mapped", [137672]], [[194669, 194669], "mapped", [23491]], [[194670, 194670], "mapped", [23512]], [[194671, 194671], "mapped", [23527]], [[194672, 194672], "mapped", [23539]], [[194673, 194673], "mapped", [138008]], [[194674, 194674], "mapped", [23551]], [[194675, 194675], "mapped", [23558]], [[194676, 194676], "disallowed"], [[194677, 194677], "mapped", [23586]], [[194678, 194678], "mapped", [14209]], [[194679, 194679], "mapped", [23648]], [[194680, 194680], "mapped", [23662]], [[194681, 194681], "mapped", [23744]], [[194682, 194682], "mapped", [23693]], [[194683, 194683], "mapped", [138724]], [[194684, 194684], "mapped", [23875]], [[194685, 194685], "mapped", [138726]], [[194686, 194686], "mapped", [23918]], [[194687, 194687], "mapped", [23915]], [[194688, 194688], "mapped", [23932]], [[194689, 194689], "mapped", [24033]], [[194690, 194690], "mapped", [24034]], [[194691, 194691], "mapped", [14383]], [[194692, 194692], "mapped", [24061]], [[194693, 194693], "mapped", [24104]], [[194694, 194694], "mapped", [24125]], [[194695, 194695], "mapped", [24169]], [[194696, 194696], "mapped", [14434]], [[194697, 194697], "mapped", [139651]], [[194698, 194698], "mapped", [14460]], [[194699, 194699], "mapped", [24240]], [[194700, 194700], "mapped", [24243]], [[194701, 194701], "mapped", [24246]], [[194702, 194702], "mapped", [24266]], [[194703, 194703], "mapped", [172946]], [[194704, 194704], "mapped", [24318]], [[194705, 194706], "mapped", [140081]], [[194707, 194707], "mapped", [33281]], [[194708, 194709], "mapped", [24354]], [[194710, 194710], "mapped", [14535]], [[194711, 194711], "mapped", [144056]], [[194712, 194712], "mapped", [156122]], [[194713, 194713], "mapped", [24418]], [[194714, 194714], "mapped", [24427]], [[194715, 194715], "mapped", [14563]], [[194716, 194716], "mapped", [24474]], [[194717, 194717], "mapped", [24525]], [[194718, 194718], "mapped", [24535]], [[194719, 194719], "mapped", [24569]], [[194720, 194720], "mapped", [24705]], [[194721, 194721], "mapped", [14650]], [[194722, 194722], "mapped", [14620]], [[194723, 194723], "mapped", [24724]], [[194724, 194724], "mapped", [141012]], [[194725, 194725], "mapped", [24775]], [[194726, 194726], "mapped", [24904]], [[194727, 194727], "mapped", [24908]], [[194728, 194728], "mapped", [24910]], [[194729, 194729], "mapped", [24908]], [[194730, 194730], "mapped", [24954]], [[194731, 194731], "mapped", [24974]], [[194732, 194732], "mapped", [25010]], [[194733, 194733], "mapped", [24996]], [[194734, 194734], "mapped", [25007]], [[194735, 194735], "mapped", [25054]], [[194736, 194736], "mapped", [25074]], [[194737, 194737], "mapped", [25078]], [[194738, 194738], "mapped", [25104]], [[194739, 194739], "mapped", [25115]], [[194740, 194740], "mapped", [25181]], [[194741, 194741], "mapped", [25265]], [[194742, 194742], "mapped", [25300]], [[194743, 194743], "mapped", [25424]], [[194744, 194744], "mapped", [142092]], [[194745, 194745], "mapped", [25405]], [[194746, 194746], "mapped", [25340]], [[194747, 194747], "mapped", [25448]], [[194748, 194748], "mapped", [25475]], [[194749, 194749], "mapped", [25572]], [[194750, 194750], "mapped", [142321]], [[194751, 194751], "mapped", [25634]], [[194752, 194752], "mapped", [25541]], [[194753, 194753], "mapped", [25513]], [[194754, 194754], "mapped", [14894]], [[194755, 194755], "mapped", [25705]], [[194756, 194756], "mapped", [25726]], [[194757, 194757], "mapped", [25757]], [[194758, 194758], "mapped", [25719]], [[194759, 194759], "mapped", [14956]], [[194760, 194760], "mapped", [25935]], [[194761, 194761], "mapped", [25964]], [[194762, 194762], "mapped", [143370]], [[194763, 194763], "mapped", [26083]], [[194764, 194764], "mapped", [26360]], [[194765, 194765], "mapped", [26185]], [[194766, 194766], "mapped", [15129]], [[194767, 194767], "mapped", [26257]], [[194768, 194768], "mapped", [15112]], [[194769, 194769], "mapped", [15076]], [[194770, 194770], "mapped", [20882]], [[194771, 194771], "mapped", [20885]], [[194772, 194772], "mapped", [26368]], [[194773, 194773], "mapped", [26268]], [[194774, 194774], "mapped", [32941]], [[194775, 194775], "mapped", [17369]], [[194776, 194776], "mapped", [26391]], [[194777, 194777], "mapped", [26395]], [[194778, 194778], "mapped", [26401]], [[194779, 194779], "mapped", [26462]], [[194780, 194780], "mapped", [26451]], [[194781, 194781], "mapped", [144323]], [[194782, 194782], "mapped", [15177]], [[194783, 194783], "mapped", [26618]], [[194784, 194784], "mapped", [26501]], [[194785, 194785], "mapped", [26706]], [[194786, 194786], "mapped", [26757]], [[194787, 194787], "mapped", [144493]], [[194788, 194788], "mapped", [26766]], [[194789, 194789], "mapped", [26655]], [[194790, 194790], "mapped", [26900]], [[194791, 194791], "mapped", [15261]], [[194792, 194792], "mapped", [26946]], [[194793, 194793], "mapped", [27043]], [[194794, 194794], "mapped", [27114]], [[194795, 194795], "mapped", [27304]], [[194796, 194796], "mapped", [145059]], [[194797, 194797], "mapped", [27355]], [[194798, 194798], "mapped", [15384]], [[194799, 194799], "mapped", [27425]], [[194800, 194800], "mapped", [145575]], [[194801, 194801], "mapped", [27476]], [[194802, 194802], "mapped", [15438]], [[194803, 194803], "mapped", [27506]], [[194804, 194804], "mapped", [27551]], [[194805, 194805], "mapped", [27578]], [[194806, 194806], "mapped", [27579]], [[194807, 194807], "mapped", [146061]], [[194808, 194808], "mapped", [138507]], [[194809, 194809], "mapped", [146170]], [[194810, 194810], "mapped", [27726]], [[194811, 194811], "mapped", [146620]], [[194812, 194812], "mapped", [27839]], [[194813, 194813], "mapped", [27853]], [[194814, 194814], "mapped", [27751]], [[194815, 194815], "mapped", [27926]], [[194816, 194816], "mapped", [27966]], [[194817, 194817], "mapped", [28023]], [[194818, 194818], "mapped", [27969]], [[194819, 194819], "mapped", [28009]], [[194820, 194820], "mapped", [28024]], [[194821, 194821], "mapped", [28037]], [[194822, 194822], "mapped", [146718]], [[194823, 194823], "mapped", [27956]], [[194824, 194824], "mapped", [28207]], [[194825, 194825], "mapped", [28270]], [[194826, 194826], "mapped", [15667]], [[194827, 194827], "mapped", [28363]], [[194828, 194828], "mapped", [28359]], [[194829, 194829], "mapped", [147153]], [[194830, 194830], "mapped", [28153]], [[194831, 194831], "mapped", [28526]], [[194832, 194832], "mapped", [147294]], [[194833, 194833], "mapped", [147342]], [[194834, 194834], "mapped", [28614]], [[194835, 194835], "mapped", [28729]], [[194836, 194836], "mapped", [28702]], [[194837, 194837], "mapped", [28699]], [[194838, 194838], "mapped", [15766]], [[194839, 194839], "mapped", [28746]], [[194840, 194840], "mapped", [28797]], [[194841, 194841], "mapped", [28791]], [[194842, 194842], "mapped", [28845]], [[194843, 194843], "mapped", [132389]], [[194844, 194844], "mapped", [28997]], [[194845, 194845], "mapped", [148067]], [[194846, 194846], "mapped", [29084]], [[194847, 194847], "disallowed"], [[194848, 194848], "mapped", [29224]], [[194849, 194849], "mapped", [29237]], [[194850, 194850], "mapped", [29264]], [[194851, 194851], "mapped", [149e3]], [[194852, 194852], "mapped", [29312]], [[194853, 194853], "mapped", [29333]], [[194854, 194854], "mapped", [149301]], [[194855, 194855], "mapped", [149524]], [[194856, 194856], "mapped", [29562]], [[194857, 194857], "mapped", [29579]], [[194858, 194858], "mapped", [16044]], [[194859, 194859], "mapped", [29605]], [[194860, 194861], "mapped", [16056]], [[194862, 194862], "mapped", [29767]], [[194863, 194863], "mapped", [29788]], [[194864, 194864], "mapped", [29809]], [[194865, 194865], "mapped", [29829]], [[194866, 194866], "mapped", [29898]], [[194867, 194867], "mapped", [16155]], [[194868, 194868], "mapped", [29988]], [[194869, 194869], "mapped", [150582]], [[194870, 194870], "mapped", [30014]], [[194871, 194871], "mapped", [150674]], [[194872, 194872], "mapped", [30064]], [[194873, 194873], "mapped", [139679]], [[194874, 194874], "mapped", [30224]], [[194875, 194875], "mapped", [151457]], [[194876, 194876], "mapped", [151480]], [[194877, 194877], "mapped", [151620]], [[194878, 194878], "mapped", [16380]], [[194879, 194879], "mapped", [16392]], [[194880, 194880], "mapped", [30452]], [[194881, 194881], "mapped", [151795]], [[194882, 194882], "mapped", [151794]], [[194883, 194883], "mapped", [151833]], [[194884, 194884], "mapped", [151859]], [[194885, 194885], "mapped", [30494]], [[194886, 194887], "mapped", [30495]], [[194888, 194888], "mapped", [30538]], [[194889, 194889], "mapped", [16441]], [[194890, 194890], "mapped", [30603]], [[194891, 194891], "mapped", [16454]], [[194892, 194892], "mapped", [16534]], [[194893, 194893], "mapped", [152605]], [[194894, 194894], "mapped", [30798]], [[194895, 194895], "mapped", [30860]], [[194896, 194896], "mapped", [30924]], [[194897, 194897], "mapped", [16611]], [[194898, 194898], "mapped", [153126]], [[194899, 194899], "mapped", [31062]], [[194900, 194900], "mapped", [153242]], [[194901, 194901], "mapped", [153285]], [[194902, 194902], "mapped", [31119]], [[194903, 194903], "mapped", [31211]], [[194904, 194904], "mapped", [16687]], [[194905, 194905], "mapped", [31296]], [[194906, 194906], "mapped", [31306]], [[194907, 194907], "mapped", [31311]], [[194908, 194908], "mapped", [153980]], [[194909, 194910], "mapped", [154279]], [[194911, 194911], "disallowed"], [[194912, 194912], "mapped", [16898]], [[194913, 194913], "mapped", [154539]], [[194914, 194914], "mapped", [31686]], [[194915, 194915], "mapped", [31689]], [[194916, 194916], "mapped", [16935]], [[194917, 194917], "mapped", [154752]], [[194918, 194918], "mapped", [31954]], [[194919, 194919], "mapped", [17056]], [[194920, 194920], "mapped", [31976]], [[194921, 194921], "mapped", [31971]], [[194922, 194922], "mapped", [32e3]], [[194923, 194923], "mapped", [155526]], [[194924, 194924], "mapped", [32099]], [[194925, 194925], "mapped", [17153]], [[194926, 194926], "mapped", [32199]], [[194927, 194927], "mapped", [32258]], [[194928, 194928], "mapped", [32325]], [[194929, 194929], "mapped", [17204]], [[194930, 194930], "mapped", [156200]], [[194931, 194931], "mapped", [156231]], [[194932, 194932], "mapped", [17241]], [[194933, 194933], "mapped", [156377]], [[194934, 194934], "mapped", [32634]], [[194935, 194935], "mapped", [156478]], [[194936, 194936], "mapped", [32661]], [[194937, 194937], "mapped", [32762]], [[194938, 194938], "mapped", [32773]], [[194939, 194939], "mapped", [156890]], [[194940, 194940], "mapped", [156963]], [[194941, 194941], "mapped", [32864]], [[194942, 194942], "mapped", [157096]], [[194943, 194943], "mapped", [32880]], [[194944, 194944], "mapped", [144223]], [[194945, 194945], "mapped", [17365]], [[194946, 194946], "mapped", [32946]], [[194947, 194947], "mapped", [33027]], [[194948, 194948], "mapped", [17419]], [[194949, 194949], "mapped", [33086]], [[194950, 194950], "mapped", [23221]], [[194951, 194951], "mapped", [157607]], [[194952, 194952], "mapped", [157621]], [[194953, 194953], "mapped", [144275]], [[194954, 194954], "mapped", [144284]], [[194955, 194955], "mapped", [33281]], [[194956, 194956], "mapped", [33284]], [[194957, 194957], "mapped", [36766]], [[194958, 194958], "mapped", [17515]], [[194959, 194959], "mapped", [33425]], [[194960, 194960], "mapped", [33419]], [[194961, 194961], "mapped", [33437]], [[194962, 194962], "mapped", [21171]], [[194963, 194963], "mapped", [33457]], [[194964, 194964], "mapped", [33459]], [[194965, 194965], "mapped", [33469]], [[194966, 194966], "mapped", [33510]], [[194967, 194967], "mapped", [158524]], [[194968, 194968], "mapped", [33509]], [[194969, 194969], "mapped", [33565]], [[194970, 194970], "mapped", [33635]], [[194971, 194971], "mapped", [33709]], [[194972, 194972], "mapped", [33571]], [[194973, 194973], "mapped", [33725]], [[194974, 194974], "mapped", [33767]], [[194975, 194975], "mapped", [33879]], [[194976, 194976], "mapped", [33619]], [[194977, 194977], "mapped", [33738]], [[194978, 194978], "mapped", [33740]], [[194979, 194979], "mapped", [33756]], [[194980, 194980], "mapped", [158774]], [[194981, 194981], "mapped", [159083]], [[194982, 194982], "mapped", [158933]], [[194983, 194983], "mapped", [17707]], [[194984, 194984], "mapped", [34033]], [[194985, 194985], "mapped", [34035]], [[194986, 194986], "mapped", [34070]], [[194987, 194987], "mapped", [160714]], [[194988, 194988], "mapped", [34148]], [[194989, 194989], "mapped", [159532]], [[194990, 194990], "mapped", [17757]], [[194991, 194991], "mapped", [17761]], [[194992, 194992], "mapped", [159665]], [[194993, 194993], "mapped", [159954]], [[194994, 194994], "mapped", [17771]], [[194995, 194995], "mapped", [34384]], [[194996, 194996], "mapped", [34396]], [[194997, 194997], "mapped", [34407]], [[194998, 194998], "mapped", [34409]], [[194999, 194999], "mapped", [34473]], [[195e3, 195e3], "mapped", [34440]], [[195001, 195001], "mapped", [34574]], [[195002, 195002], "mapped", [34530]], [[195003, 195003], "mapped", [34681]], [[195004, 195004], "mapped", [34600]], [[195005, 195005], "mapped", [34667]], [[195006, 195006], "mapped", [34694]], [[195007, 195007], "disallowed"], [[195008, 195008], "mapped", [34785]], [[195009, 195009], "mapped", [34817]], [[195010, 195010], "mapped", [17913]], [[195011, 195011], "mapped", [34912]], [[195012, 195012], "mapped", [34915]], [[195013, 195013], "mapped", [161383]], [[195014, 195014], "mapped", [35031]], [[195015, 195015], "mapped", [35038]], [[195016, 195016], "mapped", [17973]], [[195017, 195017], "mapped", [35066]], [[195018, 195018], "mapped", [13499]], [[195019, 195019], "mapped", [161966]], [[195020, 195020], "mapped", [162150]], [[195021, 195021], "mapped", [18110]], [[195022, 195022], "mapped", [18119]], [[195023, 195023], "mapped", [35488]], [[195024, 195024], "mapped", [35565]], [[195025, 195025], "mapped", [35722]], [[195026, 195026], "mapped", [35925]], [[195027, 195027], "mapped", [162984]], [[195028, 195028], "mapped", [36011]], [[195029, 195029], "mapped", [36033]], [[195030, 195030], "mapped", [36123]], [[195031, 195031], "mapped", [36215]], [[195032, 195032], "mapped", [163631]], [[195033, 195033], "mapped", [133124]], [[195034, 195034], "mapped", [36299]], [[195035, 195035], "mapped", [36284]], [[195036, 195036], "mapped", [36336]], [[195037, 195037], "mapped", [133342]], [[195038, 195038], "mapped", [36564]], [[195039, 195039], "mapped", [36664]], [[195040, 195040], "mapped", [165330]], [[195041, 195041], "mapped", [165357]], [[195042, 195042], "mapped", [37012]], [[195043, 195043], "mapped", [37105]], [[195044, 195044], "mapped", [37137]], [[195045, 195045], "mapped", [165678]], [[195046, 195046], "mapped", [37147]], [[195047, 195047], "mapped", [37432]], [[195048, 195048], "mapped", [37591]], [[195049, 195049], "mapped", [37592]], [[195050, 195050], "mapped", [37500]], [[195051, 195051], "mapped", [37881]], [[195052, 195052], "mapped", [37909]], [[195053, 195053], "mapped", [166906]], [[195054, 195054], "mapped", [38283]], [[195055, 195055], "mapped", [18837]], [[195056, 195056], "mapped", [38327]], [[195057, 195057], "mapped", [167287]], [[195058, 195058], "mapped", [18918]], [[195059, 195059], "mapped", [38595]], [[195060, 195060], "mapped", [23986]], [[195061, 195061], "mapped", [38691]], [[195062, 195062], "mapped", [168261]], [[195063, 195063], "mapped", [168474]], [[195064, 195064], "mapped", [19054]], [[195065, 195065], "mapped", [19062]], [[195066, 195066], "mapped", [38880]], [[195067, 195067], "mapped", [168970]], [[195068, 195068], "mapped", [19122]], [[195069, 195069], "mapped", [169110]], [[195070, 195071], "mapped", [38923]], [[195072, 195072], "mapped", [38953]], [[195073, 195073], "mapped", [169398]], [[195074, 195074], "mapped", [39138]], [[195075, 195075], "mapped", [19251]], [[195076, 195076], "mapped", [39209]], [[195077, 195077], "mapped", [39335]], [[195078, 195078], "mapped", [39362]], [[195079, 195079], "mapped", [39422]], [[195080, 195080], "mapped", [19406]], [[195081, 195081], "mapped", [170800]], [[195082, 195082], "mapped", [39698]], [[195083, 195083], "mapped", [4e4]], [[195084, 195084], "mapped", [40189]], [[195085, 195085], "mapped", [19662]], [[195086, 195086], "mapped", [19693]], [[195087, 195087], "mapped", [40295]], [[195088, 195088], "mapped", [172238]], [[195089, 195089], "mapped", [19704]], [[195090, 195090], "mapped", [172293]], [[195091, 195091], "mapped", [172558]], [[195092, 195092], "mapped", [172689]], [[195093, 195093], "mapped", [40635]], [[195094, 195094], "mapped", [19798]], [[195095, 195095], "mapped", [40697]], [[195096, 195096], "mapped", [40702]], [[195097, 195097], "mapped", [40709]], [[195098, 195098], "mapped", [40719]], [[195099, 195099], "mapped", [40726]], [[195100, 195100], "mapped", [40763]], [[195101, 195101], "mapped", [173568]], [[195102, 196605], "disallowed"], [[196606, 196607], "disallowed"], [[196608, 262141], "disallowed"], [[262142, 262143], "disallowed"], [[262144, 327677], "disallowed"], [[327678, 327679], "disallowed"], [[327680, 393213], "disallowed"], [[393214, 393215], "disallowed"], [[393216, 458749], "disallowed"], [[458750, 458751], "disallowed"], [[458752, 524285], "disallowed"], [[524286, 524287], "disallowed"], [[524288, 589821], "disallowed"], [[589822, 589823], "disallowed"], [[589824, 655357], "disallowed"], [[655358, 655359], "disallowed"], [[655360, 720893], "disallowed"], [[720894, 720895], "disallowed"], [[720896, 786429], "disallowed"], [[786430, 786431], "disallowed"], [[786432, 851965], "disallowed"], [[851966, 851967], "disallowed"], [[851968, 917501], "disallowed"], [[917502, 917503], "disallowed"], [[917504, 917504], "disallowed"], [[917505, 917505], "disallowed"], [[917506, 917535], "disallowed"], [[917536, 917631], "disallowed"], [[917632, 917759], "disallowed"], [[917760, 917999], "ignored"], [[918e3, 983037], "disallowed"], [[983038, 983039], "disallowed"], [[983040, 1048573], "disallowed"], [[1048574, 1048575], "disallowed"], [[1048576, 1114109], "disallowed"], [[1114110, 1114111], "disallowed"]];
  }
});

// ../../node_modules/tr46/index.js
var require_tr46 = __commonJS({
  "../../node_modules/tr46/index.js"(exports, module) {
    "use strict";
    var punycode2 = (init_punycode_es6(), __toCommonJS(punycode_es6_exports));
    var mappingTable = require_mappingTable();
    var PROCESSING_OPTIONS = {
      TRANSITIONAL: 0,
      NONTRANSITIONAL: 1
    };
    function normalize(str) {
      return str.split("\0").map(function(s) {
        return s.normalize("NFC");
      }).join("\0");
    }
    function findStatus(val) {
      var start = 0;
      var end = mappingTable.length - 1;
      while (start <= end) {
        var mid = Math.floor((start + end) / 2);
        var target = mappingTable[mid];
        if (target[0][0] <= val && target[0][1] >= val) {
          return target;
        } else if (target[0][0] > val) {
          end = mid - 1;
        } else {
          start = mid + 1;
        }
      }
      return null;
    }
    var regexAstralSymbols = /[\uD800-\uDBFF][\uDC00-\uDFFF]/g;
    function countSymbols(string) {
      return string.replace(regexAstralSymbols, "_").length;
    }
    function mapChars(domain_name, useSTD3, processing_option) {
      var hasError = false;
      var processed = "";
      var len = countSymbols(domain_name);
      for (var i = 0; i < len; ++i) {
        var codePoint = domain_name.codePointAt(i);
        var status = findStatus(codePoint);
        switch (status[1]) {
          case "disallowed":
            hasError = true;
            processed += String.fromCodePoint(codePoint);
            break;
          case "ignored":
            break;
          case "mapped":
            processed += String.fromCodePoint.apply(String, status[2]);
            break;
          case "deviation":
            if (processing_option === PROCESSING_OPTIONS.TRANSITIONAL) {
              processed += String.fromCodePoint.apply(String, status[2]);
            } else {
              processed += String.fromCodePoint(codePoint);
            }
            break;
          case "valid":
            processed += String.fromCodePoint(codePoint);
            break;
          case "disallowed_STD3_mapped":
            if (useSTD3) {
              hasError = true;
              processed += String.fromCodePoint(codePoint);
            } else {
              processed += String.fromCodePoint.apply(String, status[2]);
            }
            break;
          case "disallowed_STD3_valid":
            if (useSTD3) {
              hasError = true;
            }
            processed += String.fromCodePoint(codePoint);
            break;
        }
      }
      return {
        string: processed,
        error: hasError
      };
    }
    var combiningMarksRegex = /[\u0300-\u036F\u0483-\u0489\u0591-\u05BD\u05BF\u05C1\u05C2\u05C4\u05C5\u05C7\u0610-\u061A\u064B-\u065F\u0670\u06D6-\u06DC\u06DF-\u06E4\u06E7\u06E8\u06EA-\u06ED\u0711\u0730-\u074A\u07A6-\u07B0\u07EB-\u07F3\u0816-\u0819\u081B-\u0823\u0825-\u0827\u0829-\u082D\u0859-\u085B\u08E4-\u0903\u093A-\u093C\u093E-\u094F\u0951-\u0957\u0962\u0963\u0981-\u0983\u09BC\u09BE-\u09C4\u09C7\u09C8\u09CB-\u09CD\u09D7\u09E2\u09E3\u0A01-\u0A03\u0A3C\u0A3E-\u0A42\u0A47\u0A48\u0A4B-\u0A4D\u0A51\u0A70\u0A71\u0A75\u0A81-\u0A83\u0ABC\u0ABE-\u0AC5\u0AC7-\u0AC9\u0ACB-\u0ACD\u0AE2\u0AE3\u0B01-\u0B03\u0B3C\u0B3E-\u0B44\u0B47\u0B48\u0B4B-\u0B4D\u0B56\u0B57\u0B62\u0B63\u0B82\u0BBE-\u0BC2\u0BC6-\u0BC8\u0BCA-\u0BCD\u0BD7\u0C00-\u0C03\u0C3E-\u0C44\u0C46-\u0C48\u0C4A-\u0C4D\u0C55\u0C56\u0C62\u0C63\u0C81-\u0C83\u0CBC\u0CBE-\u0CC4\u0CC6-\u0CC8\u0CCA-\u0CCD\u0CD5\u0CD6\u0CE2\u0CE3\u0D01-\u0D03\u0D3E-\u0D44\u0D46-\u0D48\u0D4A-\u0D4D\u0D57\u0D62\u0D63\u0D82\u0D83\u0DCA\u0DCF-\u0DD4\u0DD6\u0DD8-\u0DDF\u0DF2\u0DF3\u0E31\u0E34-\u0E3A\u0E47-\u0E4E\u0EB1\u0EB4-\u0EB9\u0EBB\u0EBC\u0EC8-\u0ECD\u0F18\u0F19\u0F35\u0F37\u0F39\u0F3E\u0F3F\u0F71-\u0F84\u0F86\u0F87\u0F8D-\u0F97\u0F99-\u0FBC\u0FC6\u102B-\u103E\u1056-\u1059\u105E-\u1060\u1062-\u1064\u1067-\u106D\u1071-\u1074\u1082-\u108D\u108F\u109A-\u109D\u135D-\u135F\u1712-\u1714\u1732-\u1734\u1752\u1753\u1772\u1773\u17B4-\u17D3\u17DD\u180B-\u180D\u18A9\u1920-\u192B\u1930-\u193B\u19B0-\u19C0\u19C8\u19C9\u1A17-\u1A1B\u1A55-\u1A5E\u1A60-\u1A7C\u1A7F\u1AB0-\u1ABE\u1B00-\u1B04\u1B34-\u1B44\u1B6B-\u1B73\u1B80-\u1B82\u1BA1-\u1BAD\u1BE6-\u1BF3\u1C24-\u1C37\u1CD0-\u1CD2\u1CD4-\u1CE8\u1CED\u1CF2-\u1CF4\u1CF8\u1CF9\u1DC0-\u1DF5\u1DFC-\u1DFF\u20D0-\u20F0\u2CEF-\u2CF1\u2D7F\u2DE0-\u2DFF\u302A-\u302F\u3099\u309A\uA66F-\uA672\uA674-\uA67D\uA69F\uA6F0\uA6F1\uA802\uA806\uA80B\uA823-\uA827\uA880\uA881\uA8B4-\uA8C4\uA8E0-\uA8F1\uA926-\uA92D\uA947-\uA953\uA980-\uA983\uA9B3-\uA9C0\uA9E5\uAA29-\uAA36\uAA43\uAA4C\uAA4D\uAA7B-\uAA7D\uAAB0\uAAB2-\uAAB4\uAAB7\uAAB8\uAABE\uAABF\uAAC1\uAAEB-\uAAEF\uAAF5\uAAF6\uABE3-\uABEA\uABEC\uABED\uFB1E\uFE00-\uFE0F\uFE20-\uFE2D]|\uD800[\uDDFD\uDEE0\uDF76-\uDF7A]|\uD802[\uDE01-\uDE03\uDE05\uDE06\uDE0C-\uDE0F\uDE38-\uDE3A\uDE3F\uDEE5\uDEE6]|\uD804[\uDC00-\uDC02\uDC38-\uDC46\uDC7F-\uDC82\uDCB0-\uDCBA\uDD00-\uDD02\uDD27-\uDD34\uDD73\uDD80-\uDD82\uDDB3-\uDDC0\uDE2C-\uDE37\uDEDF-\uDEEA\uDF01-\uDF03\uDF3C\uDF3E-\uDF44\uDF47\uDF48\uDF4B-\uDF4D\uDF57\uDF62\uDF63\uDF66-\uDF6C\uDF70-\uDF74]|\uD805[\uDCB0-\uDCC3\uDDAF-\uDDB5\uDDB8-\uDDC0\uDE30-\uDE40\uDEAB-\uDEB7]|\uD81A[\uDEF0-\uDEF4\uDF30-\uDF36]|\uD81B[\uDF51-\uDF7E\uDF8F-\uDF92]|\uD82F[\uDC9D\uDC9E]|\uD834[\uDD65-\uDD69\uDD6D-\uDD72\uDD7B-\uDD82\uDD85-\uDD8B\uDDAA-\uDDAD\uDE42-\uDE44]|\uD83A[\uDCD0-\uDCD6]|\uDB40[\uDD00-\uDDEF]/;
    function validateLabel(label, processing_option) {
      if (label.substr(0, 4) === "xn--") {
        label = punycode2.toUnicode(label);
        processing_option = PROCESSING_OPTIONS.NONTRANSITIONAL;
      }
      var error2 = false;
      if (normalize(label) !== label || label[3] === "-" && label[4] === "-" || label[0] === "-" || label[label.length - 1] === "-" || label.indexOf(".") !== -1 || label.search(combiningMarksRegex) === 0) {
        error2 = true;
      }
      var len = countSymbols(label);
      for (var i = 0; i < len; ++i) {
        var status = findStatus(label.codePointAt(i));
        if (processing === PROCESSING_OPTIONS.TRANSITIONAL && status[1] !== "valid" || processing === PROCESSING_OPTIONS.NONTRANSITIONAL && status[1] !== "valid" && status[1] !== "deviation") {
          error2 = true;
          break;
        }
      }
      return {
        label,
        error: error2
      };
    }
    function processing(domain_name, useSTD3, processing_option) {
      var result = mapChars(domain_name, useSTD3, processing_option);
      result.string = normalize(result.string);
      var labels = result.string.split(".");
      for (var i = 0; i < labels.length; ++i) {
        try {
          var validation = validateLabel(labels[i]);
          labels[i] = validation.label;
          result.error = result.error || validation.error;
        } catch (e2) {
          result.error = true;
        }
      }
      return {
        string: labels.join("."),
        error: result.error
      };
    }
    module.exports.toASCII = function(domain_name, useSTD3, processing_option, verifyDnsLength) {
      var result = processing(domain_name, useSTD3, processing_option);
      var labels = result.string.split(".");
      labels = labels.map(function(l) {
        try {
          return punycode2.toASCII(l);
        } catch (e2) {
          result.error = true;
          return l;
        }
      });
      if (verifyDnsLength) {
        var total = labels.slice(0, labels.length - 1).join(".").length;
        if (total.length > 253 || total.length === 0) {
          result.error = true;
        }
        for (var i = 0; i < labels.length; ++i) {
          if (labels.length > 63 || labels.length === 0) {
            result.error = true;
            break;
          }
        }
      }
      if (result.error)
        return null;
      return labels.join(".");
    };
    module.exports.toUnicode = function(domain_name, useSTD3) {
      var result = processing(domain_name, useSTD3, PROCESSING_OPTIONS.NONTRANSITIONAL);
      return {
        domain: result.string,
        error: result.error
      };
    };
    module.exports.PROCESSING_OPTIONS = PROCESSING_OPTIONS;
  }
});

// ../../node_modules/whatwg-url/lib/url-state-machine.js
var require_url_state_machine = __commonJS({
  "../../node_modules/whatwg-url/lib/url-state-machine.js"(exports, module) {
    "use strict";
    var punycode2 = (init_punycode_es6(), __toCommonJS(punycode_es6_exports));
    var tr46 = require_tr46();
    var specialSchemes = {
      ftp: 21,
      file: null,
      gopher: 70,
      http: 80,
      https: 443,
      ws: 80,
      wss: 443
    };
    var failure = Symbol("failure");
    function countSymbols(str) {
      return punycode2.ucs2.decode(str).length;
    }
    function at(input, idx) {
      const c = input[idx];
      return isNaN(c) ? void 0 : String.fromCodePoint(c);
    }
    function isASCIIDigit(c) {
      return c >= 48 && c <= 57;
    }
    function isASCIIAlpha(c) {
      return c >= 65 && c <= 90 || c >= 97 && c <= 122;
    }
    function isASCIIAlphanumeric(c) {
      return isASCIIAlpha(c) || isASCIIDigit(c);
    }
    function isASCIIHex(c) {
      return isASCIIDigit(c) || c >= 65 && c <= 70 || c >= 97 && c <= 102;
    }
    function isSingleDot(buffer2) {
      return buffer2 === "." || buffer2.toLowerCase() === "%2e";
    }
    function isDoubleDot(buffer2) {
      buffer2 = buffer2.toLowerCase();
      return buffer2 === ".." || buffer2 === "%2e." || buffer2 === ".%2e" || buffer2 === "%2e%2e";
    }
    function isWindowsDriveLetterCodePoints(cp1, cp2) {
      return isASCIIAlpha(cp1) && (cp2 === 58 || cp2 === 124);
    }
    function isWindowsDriveLetterString(string) {
      return string.length === 2 && isASCIIAlpha(string.codePointAt(0)) && (string[1] === ":" || string[1] === "|");
    }
    function isNormalizedWindowsDriveLetterString(string) {
      return string.length === 2 && isASCIIAlpha(string.codePointAt(0)) && string[1] === ":";
    }
    function containsForbiddenHostCodePoint(string) {
      return string.search(/\u0000|\u0009|\u000A|\u000D|\u0020|#|%|\/|:|\?|@|\[|\\|\]/) !== -1;
    }
    function containsForbiddenHostCodePointExcludingPercent(string) {
      return string.search(/\u0000|\u0009|\u000A|\u000D|\u0020|#|\/|:|\?|@|\[|\\|\]/) !== -1;
    }
    function isSpecialScheme(scheme) {
      return specialSchemes[scheme] !== void 0;
    }
    function isSpecial(url) {
      return isSpecialScheme(url.scheme);
    }
    function defaultPort(scheme) {
      return specialSchemes[scheme];
    }
    function percentEncode(c) {
      let hex = c.toString(16).toUpperCase();
      if (hex.length === 1) {
        hex = "0" + hex;
      }
      return "%" + hex;
    }
    function utf8PercentEncode(c) {
      const buf = new Buffer(c);
      let str = "";
      for (let i = 0; i < buf.length; ++i) {
        str += percentEncode(buf[i]);
      }
      return str;
    }
    function utf8PercentDecode(str) {
      const input = new Buffer(str);
      const output = [];
      for (let i = 0; i < input.length; ++i) {
        if (input[i] !== 37) {
          output.push(input[i]);
        } else if (input[i] === 37 && isASCIIHex(input[i + 1]) && isASCIIHex(input[i + 2])) {
          output.push(parseInt(input.slice(i + 1, i + 3).toString(), 16));
          i += 2;
        } else {
          output.push(input[i]);
        }
      }
      return new Buffer(output).toString();
    }
    function isC0ControlPercentEncode(c) {
      return c <= 31 || c > 126;
    }
    var extraPathPercentEncodeSet = /* @__PURE__ */ new Set([32, 34, 35, 60, 62, 63, 96, 123, 125]);
    function isPathPercentEncode(c) {
      return isC0ControlPercentEncode(c) || extraPathPercentEncodeSet.has(c);
    }
    var extraUserinfoPercentEncodeSet = /* @__PURE__ */ new Set([47, 58, 59, 61, 64, 91, 92, 93, 94, 124]);
    function isUserinfoPercentEncode(c) {
      return isPathPercentEncode(c) || extraUserinfoPercentEncodeSet.has(c);
    }
    function percentEncodeChar(c, encodeSetPredicate) {
      const cStr = String.fromCodePoint(c);
      if (encodeSetPredicate(c)) {
        return utf8PercentEncode(cStr);
      }
      return cStr;
    }
    function parseIPv4Number(input) {
      let R = 10;
      if (input.length >= 2 && input.charAt(0) === "0" && input.charAt(1).toLowerCase() === "x") {
        input = input.substring(2);
        R = 16;
      } else if (input.length >= 2 && input.charAt(0) === "0") {
        input = input.substring(1);
        R = 8;
      }
      if (input === "") {
        return 0;
      }
      const regex2 = R === 10 ? /[^0-9]/ : R === 16 ? /[^0-9A-Fa-f]/ : /[^0-7]/;
      if (regex2.test(input)) {
        return failure;
      }
      return parseInt(input, R);
    }
    function parseIPv4(input) {
      const parts = input.split(".");
      if (parts[parts.length - 1] === "") {
        if (parts.length > 1) {
          parts.pop();
        }
      }
      if (parts.length > 4) {
        return input;
      }
      const numbers = [];
      for (const part of parts) {
        if (part === "") {
          return input;
        }
        const n = parseIPv4Number(part);
        if (n === failure) {
          return input;
        }
        numbers.push(n);
      }
      for (let i = 0; i < numbers.length - 1; ++i) {
        if (numbers[i] > 255) {
          return failure;
        }
      }
      if (numbers[numbers.length - 1] >= Math.pow(256, 5 - numbers.length)) {
        return failure;
      }
      let ipv4 = numbers.pop();
      let counter = 0;
      for (const n of numbers) {
        ipv4 += n * Math.pow(256, 3 - counter);
        ++counter;
      }
      return ipv4;
    }
    function serializeIPv4(address) {
      let output = "";
      let n = address;
      for (let i = 1; i <= 4; ++i) {
        output = String(n % 256) + output;
        if (i !== 4) {
          output = "." + output;
        }
        n = Math.floor(n / 256);
      }
      return output;
    }
    function parseIPv6(input) {
      const address = [0, 0, 0, 0, 0, 0, 0, 0];
      let pieceIndex = 0;
      let compress = null;
      let pointer = 0;
      input = punycode2.ucs2.decode(input);
      if (input[pointer] === 58) {
        if (input[pointer + 1] !== 58) {
          return failure;
        }
        pointer += 2;
        ++pieceIndex;
        compress = pieceIndex;
      }
      while (pointer < input.length) {
        if (pieceIndex === 8) {
          return failure;
        }
        if (input[pointer] === 58) {
          if (compress !== null) {
            return failure;
          }
          ++pointer;
          ++pieceIndex;
          compress = pieceIndex;
          continue;
        }
        let value = 0;
        let length = 0;
        while (length < 4 && isASCIIHex(input[pointer])) {
          value = value * 16 + parseInt(at(input, pointer), 16);
          ++pointer;
          ++length;
        }
        if (input[pointer] === 46) {
          if (length === 0) {
            return failure;
          }
          pointer -= length;
          if (pieceIndex > 6) {
            return failure;
          }
          let numbersSeen = 0;
          while (input[pointer] !== void 0) {
            let ipv4Piece = null;
            if (numbersSeen > 0) {
              if (input[pointer] === 46 && numbersSeen < 4) {
                ++pointer;
              } else {
                return failure;
              }
            }
            if (!isASCIIDigit(input[pointer])) {
              return failure;
            }
            while (isASCIIDigit(input[pointer])) {
              const number = parseInt(at(input, pointer));
              if (ipv4Piece === null) {
                ipv4Piece = number;
              } else if (ipv4Piece === 0) {
                return failure;
              } else {
                ipv4Piece = ipv4Piece * 10 + number;
              }
              if (ipv4Piece > 255) {
                return failure;
              }
              ++pointer;
            }
            address[pieceIndex] = address[pieceIndex] * 256 + ipv4Piece;
            ++numbersSeen;
            if (numbersSeen === 2 || numbersSeen === 4) {
              ++pieceIndex;
            }
          }
          if (numbersSeen !== 4) {
            return failure;
          }
          break;
        } else if (input[pointer] === 58) {
          ++pointer;
          if (input[pointer] === void 0) {
            return failure;
          }
        } else if (input[pointer] !== void 0) {
          return failure;
        }
        address[pieceIndex] = value;
        ++pieceIndex;
      }
      if (compress !== null) {
        let swaps = pieceIndex - compress;
        pieceIndex = 7;
        while (pieceIndex !== 0 && swaps > 0) {
          const temp = address[compress + swaps - 1];
          address[compress + swaps - 1] = address[pieceIndex];
          address[pieceIndex] = temp;
          --pieceIndex;
          --swaps;
        }
      } else if (compress === null && pieceIndex !== 8) {
        return failure;
      }
      return address;
    }
    function serializeIPv6(address) {
      let output = "";
      const seqResult = findLongestZeroSequence(address);
      const compress = seqResult.idx;
      let ignore0 = false;
      for (let pieceIndex = 0; pieceIndex <= 7; ++pieceIndex) {
        if (ignore0 && address[pieceIndex] === 0) {
          continue;
        } else if (ignore0) {
          ignore0 = false;
        }
        if (compress === pieceIndex) {
          const separator = pieceIndex === 0 ? "::" : ":";
          output += separator;
          ignore0 = true;
          continue;
        }
        output += address[pieceIndex].toString(16);
        if (pieceIndex !== 7) {
          output += ":";
        }
      }
      return output;
    }
    function parseHost(input, isSpecialArg) {
      if (input[0] === "[") {
        if (input[input.length - 1] !== "]") {
          return failure;
        }
        return parseIPv6(input.substring(1, input.length - 1));
      }
      if (!isSpecialArg) {
        return parseOpaqueHost(input);
      }
      const domain = utf8PercentDecode(input);
      const asciiDomain = tr46.toASCII(domain, false, tr46.PROCESSING_OPTIONS.NONTRANSITIONAL, false);
      if (asciiDomain === null) {
        return failure;
      }
      if (containsForbiddenHostCodePoint(asciiDomain)) {
        return failure;
      }
      const ipv4Host = parseIPv4(asciiDomain);
      if (typeof ipv4Host === "number" || ipv4Host === failure) {
        return ipv4Host;
      }
      return asciiDomain;
    }
    function parseOpaqueHost(input) {
      if (containsForbiddenHostCodePointExcludingPercent(input)) {
        return failure;
      }
      let output = "";
      const decoded = punycode2.ucs2.decode(input);
      for (let i = 0; i < decoded.length; ++i) {
        output += percentEncodeChar(decoded[i], isC0ControlPercentEncode);
      }
      return output;
    }
    function findLongestZeroSequence(arr) {
      let maxIdx = null;
      let maxLen = 1;
      let currStart = null;
      let currLen = 0;
      for (let i = 0; i < arr.length; ++i) {
        if (arr[i] !== 0) {
          if (currLen > maxLen) {
            maxIdx = currStart;
            maxLen = currLen;
          }
          currStart = null;
          currLen = 0;
        } else {
          if (currStart === null) {
            currStart = i;
          }
          ++currLen;
        }
      }
      if (currLen > maxLen) {
        maxIdx = currStart;
        maxLen = currLen;
      }
      return {
        idx: maxIdx,
        len: maxLen
      };
    }
    function serializeHost(host) {
      if (typeof host === "number") {
        return serializeIPv4(host);
      }
      if (host instanceof Array) {
        return "[" + serializeIPv6(host) + "]";
      }
      return host;
    }
    function trimControlChars(url) {
      return url.replace(/^[\u0000-\u001F\u0020]+|[\u0000-\u001F\u0020]+$/g, "");
    }
    function trimTabAndNewline(url) {
      return url.replace(/\u0009|\u000A|\u000D/g, "");
    }
    function shortenPath(url) {
      const path = url.path;
      if (path.length === 0) {
        return;
      }
      if (url.scheme === "file" && path.length === 1 && isNormalizedWindowsDriveLetter(path[0])) {
        return;
      }
      path.pop();
    }
    function includesCredentials(url) {
      return url.username !== "" || url.password !== "";
    }
    function cannotHaveAUsernamePasswordPort(url) {
      return url.host === null || url.host === "" || url.cannotBeABaseURL || url.scheme === "file";
    }
    function isNormalizedWindowsDriveLetter(string) {
      return /^[A-Za-z]:$/.test(string);
    }
    function URLStateMachine(input, base2, encodingOverride, url, stateOverride) {
      this.pointer = 0;
      this.input = input;
      this.base = base2 || null;
      this.encodingOverride = encodingOverride || "utf-8";
      this.stateOverride = stateOverride;
      this.url = url;
      this.failure = false;
      this.parseError = false;
      if (!this.url) {
        this.url = {
          scheme: "",
          username: "",
          password: "",
          host: null,
          port: null,
          path: [],
          query: null,
          fragment: null,
          cannotBeABaseURL: false
        };
        const res2 = trimControlChars(this.input);
        if (res2 !== this.input) {
          this.parseError = true;
        }
        this.input = res2;
      }
      const res = trimTabAndNewline(this.input);
      if (res !== this.input) {
        this.parseError = true;
      }
      this.input = res;
      this.state = stateOverride || "scheme start";
      this.buffer = "";
      this.atFlag = false;
      this.arrFlag = false;
      this.passwordTokenSeenFlag = false;
      this.input = punycode2.ucs2.decode(this.input);
      for (; this.pointer <= this.input.length; ++this.pointer) {
        const c = this.input[this.pointer];
        const cStr = isNaN(c) ? void 0 : String.fromCodePoint(c);
        const ret = this["parse " + this.state](c, cStr);
        if (!ret) {
          break;
        } else if (ret === failure) {
          this.failure = true;
          break;
        }
      }
    }
    URLStateMachine.prototype["parse scheme start"] = function parseSchemeStart(c, cStr) {
      if (isASCIIAlpha(c)) {
        this.buffer += cStr.toLowerCase();
        this.state = "scheme";
      } else if (!this.stateOverride) {
        this.state = "no scheme";
        --this.pointer;
      } else {
        this.parseError = true;
        return failure;
      }
      return true;
    };
    URLStateMachine.prototype["parse scheme"] = function parseScheme(c, cStr) {
      if (isASCIIAlphanumeric(c) || c === 43 || c === 45 || c === 46) {
        this.buffer += cStr.toLowerCase();
      } else if (c === 58) {
        if (this.stateOverride) {
          if (isSpecial(this.url) && !isSpecialScheme(this.buffer)) {
            return false;
          }
          if (!isSpecial(this.url) && isSpecialScheme(this.buffer)) {
            return false;
          }
          if ((includesCredentials(this.url) || this.url.port !== null) && this.buffer === "file") {
            return false;
          }
          if (this.url.scheme === "file" && (this.url.host === "" || this.url.host === null)) {
            return false;
          }
        }
        this.url.scheme = this.buffer;
        this.buffer = "";
        if (this.stateOverride) {
          return false;
        }
        if (this.url.scheme === "file") {
          if (this.input[this.pointer + 1] !== 47 || this.input[this.pointer + 2] !== 47) {
            this.parseError = true;
          }
          this.state = "file";
        } else if (isSpecial(this.url) && this.base !== null && this.base.scheme === this.url.scheme) {
          this.state = "special relative or authority";
        } else if (isSpecial(this.url)) {
          this.state = "special authority slashes";
        } else if (this.input[this.pointer + 1] === 47) {
          this.state = "path or authority";
          ++this.pointer;
        } else {
          this.url.cannotBeABaseURL = true;
          this.url.path.push("");
          this.state = "cannot-be-a-base-URL path";
        }
      } else if (!this.stateOverride) {
        this.buffer = "";
        this.state = "no scheme";
        this.pointer = -1;
      } else {
        this.parseError = true;
        return failure;
      }
      return true;
    };
    URLStateMachine.prototype["parse no scheme"] = function parseNoScheme(c) {
      if (this.base === null || this.base.cannotBeABaseURL && c !== 35) {
        return failure;
      } else if (this.base.cannotBeABaseURL && c === 35) {
        this.url.scheme = this.base.scheme;
        this.url.path = this.base.path.slice();
        this.url.query = this.base.query;
        this.url.fragment = "";
        this.url.cannotBeABaseURL = true;
        this.state = "fragment";
      } else if (this.base.scheme === "file") {
        this.state = "file";
        --this.pointer;
      } else {
        this.state = "relative";
        --this.pointer;
      }
      return true;
    };
    URLStateMachine.prototype["parse special relative or authority"] = function parseSpecialRelativeOrAuthority(c) {
      if (c === 47 && this.input[this.pointer + 1] === 47) {
        this.state = "special authority ignore slashes";
        ++this.pointer;
      } else {
        this.parseError = true;
        this.state = "relative";
        --this.pointer;
      }
      return true;
    };
    URLStateMachine.prototype["parse path or authority"] = function parsePathOrAuthority(c) {
      if (c === 47) {
        this.state = "authority";
      } else {
        this.state = "path";
        --this.pointer;
      }
      return true;
    };
    URLStateMachine.prototype["parse relative"] = function parseRelative(c) {
      this.url.scheme = this.base.scheme;
      if (isNaN(c)) {
        this.url.username = this.base.username;
        this.url.password = this.base.password;
        this.url.host = this.base.host;
        this.url.port = this.base.port;
        this.url.path = this.base.path.slice();
        this.url.query = this.base.query;
      } else if (c === 47) {
        this.state = "relative slash";
      } else if (c === 63) {
        this.url.username = this.base.username;
        this.url.password = this.base.password;
        this.url.host = this.base.host;
        this.url.port = this.base.port;
        this.url.path = this.base.path.slice();
        this.url.query = "";
        this.state = "query";
      } else if (c === 35) {
        this.url.username = this.base.username;
        this.url.password = this.base.password;
        this.url.host = this.base.host;
        this.url.port = this.base.port;
        this.url.path = this.base.path.slice();
        this.url.query = this.base.query;
        this.url.fragment = "";
        this.state = "fragment";
      } else if (isSpecial(this.url) && c === 92) {
        this.parseError = true;
        this.state = "relative slash";
      } else {
        this.url.username = this.base.username;
        this.url.password = this.base.password;
        this.url.host = this.base.host;
        this.url.port = this.base.port;
        this.url.path = this.base.path.slice(0, this.base.path.length - 1);
        this.state = "path";
        --this.pointer;
      }
      return true;
    };
    URLStateMachine.prototype["parse relative slash"] = function parseRelativeSlash(c) {
      if (isSpecial(this.url) && (c === 47 || c === 92)) {
        if (c === 92) {
          this.parseError = true;
        }
        this.state = "special authority ignore slashes";
      } else if (c === 47) {
        this.state = "authority";
      } else {
        this.url.username = this.base.username;
        this.url.password = this.base.password;
        this.url.host = this.base.host;
        this.url.port = this.base.port;
        this.state = "path";
        --this.pointer;
      }
      return true;
    };
    URLStateMachine.prototype["parse special authority slashes"] = function parseSpecialAuthoritySlashes(c) {
      if (c === 47 && this.input[this.pointer + 1] === 47) {
        this.state = "special authority ignore slashes";
        ++this.pointer;
      } else {
        this.parseError = true;
        this.state = "special authority ignore slashes";
        --this.pointer;
      }
      return true;
    };
    URLStateMachine.prototype["parse special authority ignore slashes"] = function parseSpecialAuthorityIgnoreSlashes(c) {
      if (c !== 47 && c !== 92) {
        this.state = "authority";
        --this.pointer;
      } else {
        this.parseError = true;
      }
      return true;
    };
    URLStateMachine.prototype["parse authority"] = function parseAuthority(c, cStr) {
      if (c === 64) {
        this.parseError = true;
        if (this.atFlag) {
          this.buffer = "%40" + this.buffer;
        }
        this.atFlag = true;
        const len = countSymbols(this.buffer);
        for (let pointer = 0; pointer < len; ++pointer) {
          const codePoint = this.buffer.codePointAt(pointer);
          if (codePoint === 58 && !this.passwordTokenSeenFlag) {
            this.passwordTokenSeenFlag = true;
            continue;
          }
          const encodedCodePoints = percentEncodeChar(codePoint, isUserinfoPercentEncode);
          if (this.passwordTokenSeenFlag) {
            this.url.password += encodedCodePoints;
          } else {
            this.url.username += encodedCodePoints;
          }
        }
        this.buffer = "";
      } else if (isNaN(c) || c === 47 || c === 63 || c === 35 || isSpecial(this.url) && c === 92) {
        if (this.atFlag && this.buffer === "") {
          this.parseError = true;
          return failure;
        }
        this.pointer -= countSymbols(this.buffer) + 1;
        this.buffer = "";
        this.state = "host";
      } else {
        this.buffer += cStr;
      }
      return true;
    };
    URLStateMachine.prototype["parse hostname"] = URLStateMachine.prototype["parse host"] = function parseHostName(c, cStr) {
      if (this.stateOverride && this.url.scheme === "file") {
        --this.pointer;
        this.state = "file host";
      } else if (c === 58 && !this.arrFlag) {
        if (this.buffer === "") {
          this.parseError = true;
          return failure;
        }
        const host = parseHost(this.buffer, isSpecial(this.url));
        if (host === failure) {
          return failure;
        }
        this.url.host = host;
        this.buffer = "";
        this.state = "port";
        if (this.stateOverride === "hostname") {
          return false;
        }
      } else if (isNaN(c) || c === 47 || c === 63 || c === 35 || isSpecial(this.url) && c === 92) {
        --this.pointer;
        if (isSpecial(this.url) && this.buffer === "") {
          this.parseError = true;
          return failure;
        } else if (this.stateOverride && this.buffer === "" && (includesCredentials(this.url) || this.url.port !== null)) {
          this.parseError = true;
          return false;
        }
        const host = parseHost(this.buffer, isSpecial(this.url));
        if (host === failure) {
          return failure;
        }
        this.url.host = host;
        this.buffer = "";
        this.state = "path start";
        if (this.stateOverride) {
          return false;
        }
      } else {
        if (c === 91) {
          this.arrFlag = true;
        } else if (c === 93) {
          this.arrFlag = false;
        }
        this.buffer += cStr;
      }
      return true;
    };
    URLStateMachine.prototype["parse port"] = function parsePort(c, cStr) {
      if (isASCIIDigit(c)) {
        this.buffer += cStr;
      } else if (isNaN(c) || c === 47 || c === 63 || c === 35 || isSpecial(this.url) && c === 92 || this.stateOverride) {
        if (this.buffer !== "") {
          const port = parseInt(this.buffer);
          if (port > Math.pow(2, 16) - 1) {
            this.parseError = true;
            return failure;
          }
          this.url.port = port === defaultPort(this.url.scheme) ? null : port;
          this.buffer = "";
        }
        if (this.stateOverride) {
          return false;
        }
        this.state = "path start";
        --this.pointer;
      } else {
        this.parseError = true;
        return failure;
      }
      return true;
    };
    var fileOtherwiseCodePoints = /* @__PURE__ */ new Set([47, 92, 63, 35]);
    URLStateMachine.prototype["parse file"] = function parseFile(c) {
      this.url.scheme = "file";
      if (c === 47 || c === 92) {
        if (c === 92) {
          this.parseError = true;
        }
        this.state = "file slash";
      } else if (this.base !== null && this.base.scheme === "file") {
        if (isNaN(c)) {
          this.url.host = this.base.host;
          this.url.path = this.base.path.slice();
          this.url.query = this.base.query;
        } else if (c === 63) {
          this.url.host = this.base.host;
          this.url.path = this.base.path.slice();
          this.url.query = "";
          this.state = "query";
        } else if (c === 35) {
          this.url.host = this.base.host;
          this.url.path = this.base.path.slice();
          this.url.query = this.base.query;
          this.url.fragment = "";
          this.state = "fragment";
        } else {
          if (this.input.length - this.pointer - 1 === 0 || // remaining consists of 0 code points
          !isWindowsDriveLetterCodePoints(c, this.input[this.pointer + 1]) || this.input.length - this.pointer - 1 >= 2 && // remaining has at least 2 code points
          !fileOtherwiseCodePoints.has(this.input[this.pointer + 2])) {
            this.url.host = this.base.host;
            this.url.path = this.base.path.slice();
            shortenPath(this.url);
          } else {
            this.parseError = true;
          }
          this.state = "path";
          --this.pointer;
        }
      } else {
        this.state = "path";
        --this.pointer;
      }
      return true;
    };
    URLStateMachine.prototype["parse file slash"] = function parseFileSlash(c) {
      if (c === 47 || c === 92) {
        if (c === 92) {
          this.parseError = true;
        }
        this.state = "file host";
      } else {
        if (this.base !== null && this.base.scheme === "file") {
          if (isNormalizedWindowsDriveLetterString(this.base.path[0])) {
            this.url.path.push(this.base.path[0]);
          } else {
            this.url.host = this.base.host;
          }
        }
        this.state = "path";
        --this.pointer;
      }
      return true;
    };
    URLStateMachine.prototype["parse file host"] = function parseFileHost(c, cStr) {
      if (isNaN(c) || c === 47 || c === 92 || c === 63 || c === 35) {
        --this.pointer;
        if (!this.stateOverride && isWindowsDriveLetterString(this.buffer)) {
          this.parseError = true;
          this.state = "path";
        } else if (this.buffer === "") {
          this.url.host = "";
          if (this.stateOverride) {
            return false;
          }
          this.state = "path start";
        } else {
          let host = parseHost(this.buffer, isSpecial(this.url));
          if (host === failure) {
            return failure;
          }
          if (host === "localhost") {
            host = "";
          }
          this.url.host = host;
          if (this.stateOverride) {
            return false;
          }
          this.buffer = "";
          this.state = "path start";
        }
      } else {
        this.buffer += cStr;
      }
      return true;
    };
    URLStateMachine.prototype["parse path start"] = function parsePathStart(c) {
      if (isSpecial(this.url)) {
        if (c === 92) {
          this.parseError = true;
        }
        this.state = "path";
        if (c !== 47 && c !== 92) {
          --this.pointer;
        }
      } else if (!this.stateOverride && c === 63) {
        this.url.query = "";
        this.state = "query";
      } else if (!this.stateOverride && c === 35) {
        this.url.fragment = "";
        this.state = "fragment";
      } else if (c !== void 0) {
        this.state = "path";
        if (c !== 47) {
          --this.pointer;
        }
      }
      return true;
    };
    URLStateMachine.prototype["parse path"] = function parsePath(c) {
      if (isNaN(c) || c === 47 || isSpecial(this.url) && c === 92 || !this.stateOverride && (c === 63 || c === 35)) {
        if (isSpecial(this.url) && c === 92) {
          this.parseError = true;
        }
        if (isDoubleDot(this.buffer)) {
          shortenPath(this.url);
          if (c !== 47 && !(isSpecial(this.url) && c === 92)) {
            this.url.path.push("");
          }
        } else if (isSingleDot(this.buffer) && c !== 47 && !(isSpecial(this.url) && c === 92)) {
          this.url.path.push("");
        } else if (!isSingleDot(this.buffer)) {
          if (this.url.scheme === "file" && this.url.path.length === 0 && isWindowsDriveLetterString(this.buffer)) {
            if (this.url.host !== "" && this.url.host !== null) {
              this.parseError = true;
              this.url.host = "";
            }
            this.buffer = this.buffer[0] + ":";
          }
          this.url.path.push(this.buffer);
        }
        this.buffer = "";
        if (this.url.scheme === "file" && (c === void 0 || c === 63 || c === 35)) {
          while (this.url.path.length > 1 && this.url.path[0] === "") {
            this.parseError = true;
            this.url.path.shift();
          }
        }
        if (c === 63) {
          this.url.query = "";
          this.state = "query";
        }
        if (c === 35) {
          this.url.fragment = "";
          this.state = "fragment";
        }
      } else {
        if (c === 37 && (!isASCIIHex(this.input[this.pointer + 1]) || !isASCIIHex(this.input[this.pointer + 2]))) {
          this.parseError = true;
        }
        this.buffer += percentEncodeChar(c, isPathPercentEncode);
      }
      return true;
    };
    URLStateMachine.prototype["parse cannot-be-a-base-URL path"] = function parseCannotBeABaseURLPath(c) {
      if (c === 63) {
        this.url.query = "";
        this.state = "query";
      } else if (c === 35) {
        this.url.fragment = "";
        this.state = "fragment";
      } else {
        if (!isNaN(c) && c !== 37) {
          this.parseError = true;
        }
        if (c === 37 && (!isASCIIHex(this.input[this.pointer + 1]) || !isASCIIHex(this.input[this.pointer + 2]))) {
          this.parseError = true;
        }
        if (!isNaN(c)) {
          this.url.path[0] = this.url.path[0] + percentEncodeChar(c, isC0ControlPercentEncode);
        }
      }
      return true;
    };
    URLStateMachine.prototype["parse query"] = function parseQuery(c, cStr) {
      if (isNaN(c) || !this.stateOverride && c === 35) {
        if (!isSpecial(this.url) || this.url.scheme === "ws" || this.url.scheme === "wss") {
          this.encodingOverride = "utf-8";
        }
        const buffer2 = new Buffer(this.buffer);
        for (let i = 0; i < buffer2.length; ++i) {
          if (buffer2[i] < 33 || buffer2[i] > 126 || buffer2[i] === 34 || buffer2[i] === 35 || buffer2[i] === 60 || buffer2[i] === 62) {
            this.url.query += percentEncode(buffer2[i]);
          } else {
            this.url.query += String.fromCodePoint(buffer2[i]);
          }
        }
        this.buffer = "";
        if (c === 35) {
          this.url.fragment = "";
          this.state = "fragment";
        }
      } else {
        if (c === 37 && (!isASCIIHex(this.input[this.pointer + 1]) || !isASCIIHex(this.input[this.pointer + 2]))) {
          this.parseError = true;
        }
        this.buffer += cStr;
      }
      return true;
    };
    URLStateMachine.prototype["parse fragment"] = function parseFragment(c) {
      if (isNaN(c)) {
      } else if (c === 0) {
        this.parseError = true;
      } else {
        if (c === 37 && (!isASCIIHex(this.input[this.pointer + 1]) || !isASCIIHex(this.input[this.pointer + 2]))) {
          this.parseError = true;
        }
        this.url.fragment += percentEncodeChar(c, isC0ControlPercentEncode);
      }
      return true;
    };
    function serializeURL(url, excludeFragment) {
      let output = url.scheme + ":";
      if (url.host !== null) {
        output += "//";
        if (url.username !== "" || url.password !== "") {
          output += url.username;
          if (url.password !== "") {
            output += ":" + url.password;
          }
          output += "@";
        }
        output += serializeHost(url.host);
        if (url.port !== null) {
          output += ":" + url.port;
        }
      } else if (url.host === null && url.scheme === "file") {
        output += "//";
      }
      if (url.cannotBeABaseURL) {
        output += url.path[0];
      } else {
        for (const string of url.path) {
          output += "/" + string;
        }
      }
      if (url.query !== null) {
        output += "?" + url.query;
      }
      if (!excludeFragment && url.fragment !== null) {
        output += "#" + url.fragment;
      }
      return output;
    }
    function serializeOrigin(tuple) {
      let result = tuple.scheme + "://";
      result += serializeHost(tuple.host);
      if (tuple.port !== null) {
        result += ":" + tuple.port;
      }
      return result;
    }
    module.exports.serializeURL = serializeURL;
    module.exports.serializeURLOrigin = function(url) {
      switch (url.scheme) {
        case "blob":
          try {
            return module.exports.serializeURLOrigin(module.exports.parseURL(url.path[0]));
          } catch (e2) {
            return "null";
          }
        case "ftp":
        case "gopher":
        case "http":
        case "https":
        case "ws":
        case "wss":
          return serializeOrigin({
            scheme: url.scheme,
            host: url.host,
            port: url.port
          });
        case "file":
          return "file://";
        default:
          return "null";
      }
    };
    module.exports.basicURLParse = function(input, options) {
      if (options === void 0) {
        options = {};
      }
      const usm = new URLStateMachine(input, options.baseURL, options.encodingOverride, options.url, options.stateOverride);
      if (usm.failure) {
        return "failure";
      }
      return usm.url;
    };
    module.exports.setTheUsername = function(url, username) {
      url.username = "";
      const decoded = punycode2.ucs2.decode(username);
      for (let i = 0; i < decoded.length; ++i) {
        url.username += percentEncodeChar(decoded[i], isUserinfoPercentEncode);
      }
    };
    module.exports.setThePassword = function(url, password) {
      url.password = "";
      const decoded = punycode2.ucs2.decode(password);
      for (let i = 0; i < decoded.length; ++i) {
        url.password += percentEncodeChar(decoded[i], isUserinfoPercentEncode);
      }
    };
    module.exports.serializeHost = serializeHost;
    module.exports.cannotHaveAUsernamePasswordPort = cannotHaveAUsernamePasswordPort;
    module.exports.serializeInteger = function(integer) {
      return String(integer);
    };
    module.exports.parseURL = function(input, options) {
      if (options === void 0) {
        options = {};
      }
      return module.exports.basicURLParse(input, { baseURL: options.baseURL, encodingOverride: options.encodingOverride });
    };
  }
});

// ../../node_modules/whatwg-url/lib/URL-impl.js
var require_URL_impl = __commonJS({
  "../../node_modules/whatwg-url/lib/URL-impl.js"(exports) {
    "use strict";
    var usm = require_url_state_machine();
    exports.implementation = class URLImpl {
      constructor(constructorArgs) {
        const url = constructorArgs[0];
        const base2 = constructorArgs[1];
        let parsedBase = null;
        if (base2 !== void 0) {
          parsedBase = usm.basicURLParse(base2);
          if (parsedBase === "failure") {
            throw new TypeError("Invalid base URL");
          }
        }
        const parsedURL = usm.basicURLParse(url, { baseURL: parsedBase });
        if (parsedURL === "failure") {
          throw new TypeError("Invalid URL");
        }
        this._url = parsedURL;
      }
      get href() {
        return usm.serializeURL(this._url);
      }
      set href(v) {
        const parsedURL = usm.basicURLParse(v);
        if (parsedURL === "failure") {
          throw new TypeError("Invalid URL");
        }
        this._url = parsedURL;
      }
      get origin() {
        return usm.serializeURLOrigin(this._url);
      }
      get protocol() {
        return this._url.scheme + ":";
      }
      set protocol(v) {
        usm.basicURLParse(v + ":", { url: this._url, stateOverride: "scheme start" });
      }
      get username() {
        return this._url.username;
      }
      set username(v) {
        if (usm.cannotHaveAUsernamePasswordPort(this._url)) {
          return;
        }
        usm.setTheUsername(this._url, v);
      }
      get password() {
        return this._url.password;
      }
      set password(v) {
        if (usm.cannotHaveAUsernamePasswordPort(this._url)) {
          return;
        }
        usm.setThePassword(this._url, v);
      }
      get host() {
        const url = this._url;
        if (url.host === null) {
          return "";
        }
        if (url.port === null) {
          return usm.serializeHost(url.host);
        }
        return usm.serializeHost(url.host) + ":" + usm.serializeInteger(url.port);
      }
      set host(v) {
        if (this._url.cannotBeABaseURL) {
          return;
        }
        usm.basicURLParse(v, { url: this._url, stateOverride: "host" });
      }
      get hostname() {
        if (this._url.host === null) {
          return "";
        }
        return usm.serializeHost(this._url.host);
      }
      set hostname(v) {
        if (this._url.cannotBeABaseURL) {
          return;
        }
        usm.basicURLParse(v, { url: this._url, stateOverride: "hostname" });
      }
      get port() {
        if (this._url.port === null) {
          return "";
        }
        return usm.serializeInteger(this._url.port);
      }
      set port(v) {
        if (usm.cannotHaveAUsernamePasswordPort(this._url)) {
          return;
        }
        if (v === "") {
          this._url.port = null;
        } else {
          usm.basicURLParse(v, { url: this._url, stateOverride: "port" });
        }
      }
      get pathname() {
        if (this._url.cannotBeABaseURL) {
          return this._url.path[0];
        }
        if (this._url.path.length === 0) {
          return "";
        }
        return "/" + this._url.path.join("/");
      }
      set pathname(v) {
        if (this._url.cannotBeABaseURL) {
          return;
        }
        this._url.path = [];
        usm.basicURLParse(v, { url: this._url, stateOverride: "path start" });
      }
      get search() {
        if (this._url.query === null || this._url.query === "") {
          return "";
        }
        return "?" + this._url.query;
      }
      set search(v) {
        const url = this._url;
        if (v === "") {
          url.query = null;
          return;
        }
        const input = v[0] === "?" ? v.substring(1) : v;
        url.query = "";
        usm.basicURLParse(input, { url, stateOverride: "query" });
      }
      get hash() {
        if (this._url.fragment === null || this._url.fragment === "") {
          return "";
        }
        return "#" + this._url.fragment;
      }
      set hash(v) {
        if (v === "") {
          this._url.fragment = null;
          return;
        }
        const input = v[0] === "#" ? v.substring(1) : v;
        this._url.fragment = "";
        usm.basicURLParse(input, { url: this._url, stateOverride: "fragment" });
      }
      toJSON() {
        return this.href;
      }
    };
  }
});

// ../../node_modules/whatwg-url/lib/URL.js
var require_URL = __commonJS({
  "../../node_modules/whatwg-url/lib/URL.js"(exports, module) {
    "use strict";
    var conversions = require_lib();
    var utils = require_utils();
    var Impl = require_URL_impl();
    var impl = utils.implSymbol;
    function URL3(url) {
      if (!this || this[impl] || !(this instanceof URL3)) {
        throw new TypeError("Failed to construct 'URL': Please use the 'new' operator, this DOM object constructor cannot be called as a function.");
      }
      if (arguments.length < 1) {
        throw new TypeError("Failed to construct 'URL': 1 argument required, but only " + arguments.length + " present.");
      }
      const args = [];
      for (let i = 0; i < arguments.length && i < 2; ++i) {
        args[i] = arguments[i];
      }
      args[0] = conversions["USVString"](args[0]);
      if (args[1] !== void 0) {
        args[1] = conversions["USVString"](args[1]);
      }
      module.exports.setup(this, args);
    }
    URL3.prototype.toJSON = function toJSON() {
      if (!this || !module.exports.is(this)) {
        throw new TypeError("Illegal invocation");
      }
      const args = [];
      for (let i = 0; i < arguments.length && i < 0; ++i) {
        args[i] = arguments[i];
      }
      return this[impl].toJSON.apply(this[impl], args);
    };
    Object.defineProperty(URL3.prototype, "href", {
      get() {
        return this[impl].href;
      },
      set(V) {
        V = conversions["USVString"](V);
        this[impl].href = V;
      },
      enumerable: true,
      configurable: true
    });
    URL3.prototype.toString = function() {
      if (!this || !module.exports.is(this)) {
        throw new TypeError("Illegal invocation");
      }
      return this.href;
    };
    Object.defineProperty(URL3.prototype, "origin", {
      get() {
        return this[impl].origin;
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(URL3.prototype, "protocol", {
      get() {
        return this[impl].protocol;
      },
      set(V) {
        V = conversions["USVString"](V);
        this[impl].protocol = V;
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(URL3.prototype, "username", {
      get() {
        return this[impl].username;
      },
      set(V) {
        V = conversions["USVString"](V);
        this[impl].username = V;
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(URL3.prototype, "password", {
      get() {
        return this[impl].password;
      },
      set(V) {
        V = conversions["USVString"](V);
        this[impl].password = V;
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(URL3.prototype, "host", {
      get() {
        return this[impl].host;
      },
      set(V) {
        V = conversions["USVString"](V);
        this[impl].host = V;
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(URL3.prototype, "hostname", {
      get() {
        return this[impl].hostname;
      },
      set(V) {
        V = conversions["USVString"](V);
        this[impl].hostname = V;
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(URL3.prototype, "port", {
      get() {
        return this[impl].port;
      },
      set(V) {
        V = conversions["USVString"](V);
        this[impl].port = V;
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(URL3.prototype, "pathname", {
      get() {
        return this[impl].pathname;
      },
      set(V) {
        V = conversions["USVString"](V);
        this[impl].pathname = V;
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(URL3.prototype, "search", {
      get() {
        return this[impl].search;
      },
      set(V) {
        V = conversions["USVString"](V);
        this[impl].search = V;
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(URL3.prototype, "hash", {
      get() {
        return this[impl].hash;
      },
      set(V) {
        V = conversions["USVString"](V);
        this[impl].hash = V;
      },
      enumerable: true,
      configurable: true
    });
    module.exports = {
      is(obj) {
        return !!obj && obj[impl] instanceof Impl.implementation;
      },
      create(constructorArgs, privateData) {
        let obj = Object.create(URL3.prototype);
        this.setup(obj, constructorArgs, privateData);
        return obj;
      },
      setup(obj, constructorArgs, privateData) {
        if (!privateData)
          privateData = {};
        privateData.wrapper = obj;
        obj[impl] = new Impl.implementation(constructorArgs, privateData);
        obj[impl][utils.wrapperSymbol] = obj;
      },
      interface: URL3,
      expose: {
        Window: { URL: URL3 },
        Worker: { URL: URL3 }
      }
    };
  }
});

// ../../node_modules/whatwg-url/lib/public-api.js
var require_public_api = __commonJS({
  "../../node_modules/whatwg-url/lib/public-api.js"(exports) {
    "use strict";
    exports.URL = require_URL().interface;
    exports.serializeURL = require_url_state_machine().serializeURL;
    exports.serializeURLOrigin = require_url_state_machine().serializeURLOrigin;
    exports.basicURLParse = require_url_state_machine().basicURLParse;
    exports.setTheUsername = require_url_state_machine().setTheUsername;
    exports.setThePassword = require_url_state_machine().setThePassword;
    exports.serializeHost = require_url_state_machine().serializeHost;
    exports.serializeInteger = require_url_state_machine().serializeInteger;
    exports.parseURL = require_url_state_machine().parseURL;
  }
});

// browser-external:https
var require_https = __commonJS({
  "browser-external:https"(exports, module) {
    module.exports = Object.create(new Proxy({}, {
      get(_, key) {
        if (key !== "__esModule" && key !== "__proto__" && key !== "constructor" && key !== "splice") {
          console.warn(`Module "https" has been externalized for browser compatibility. Cannot access "https.${key}" in client code. See http://vitejs.dev/guide/troubleshooting.html#module-externalized-for-browser-compatibility for more details.`);
        }
      }
    }));
  }
});

// browser-external:zlib
var require_zlib = __commonJS({
  "browser-external:zlib"(exports, module) {
    module.exports = Object.create(new Proxy({}, {
      get(_, key) {
        if (key !== "__esModule" && key !== "__proto__" && key !== "constructor" && key !== "splice") {
          console.warn(`Module "zlib" has been externalized for browser compatibility. Cannot access "zlib.${key}" in client code. See http://vitejs.dev/guide/troubleshooting.html#module-externalized-for-browser-compatibility for more details.`);
        }
      }
    }));
  }
});

// ../../node_modules/encoding/node_modules/iconv-lite/lib/bom-handling.js
var require_bom_handling = __commonJS({
  "../../node_modules/encoding/node_modules/iconv-lite/lib/bom-handling.js"(exports) {
    "use strict";
    var BOMChar = "\uFEFF";
    exports.PrependBOM = PrependBOMWrapper;
    function PrependBOMWrapper(encoder, options) {
      this.encoder = encoder;
      this.addBOM = true;
    }
    PrependBOMWrapper.prototype.write = function(str) {
      if (this.addBOM) {
        str = BOMChar + str;
        this.addBOM = false;
      }
      return this.encoder.write(str);
    };
    PrependBOMWrapper.prototype.end = function() {
      return this.encoder.end();
    };
    exports.StripBOM = StripBOMWrapper;
    function StripBOMWrapper(decoder, options) {
      this.decoder = decoder;
      this.pass = false;
      this.options = options || {};
    }
    StripBOMWrapper.prototype.write = function(buf) {
      var res = this.decoder.write(buf);
      if (this.pass || !res)
        return res;
      if (res[0] === BOMChar) {
        res = res.slice(1);
        if (typeof this.options.stripBOM === "function")
          this.options.stripBOM();
      }
      this.pass = true;
      return res;
    };
    StripBOMWrapper.prototype.end = function() {
      return this.decoder.end();
    };
  }
});

// ../../node_modules/encoding/node_modules/iconv-lite/encodings/internal.js
var require_internal = __commonJS({
  "../../node_modules/encoding/node_modules/iconv-lite/encodings/internal.js"(exports, module) {
    "use strict";
    var Buffer22 = require_safer().Buffer;
    module.exports = {
      // Encodings
      utf8: { type: "_internal", bomAware: true },
      cesu8: { type: "_internal", bomAware: true },
      unicode11utf8: "utf8",
      ucs2: { type: "_internal", bomAware: true },
      utf16le: "ucs2",
      binary: { type: "_internal" },
      base64: { type: "_internal" },
      hex: { type: "_internal" },
      // Codec.
      _internal: InternalCodec
    };
    function InternalCodec(codecOptions, iconv) {
      this.enc = codecOptions.encodingName;
      this.bomAware = codecOptions.bomAware;
      if (this.enc === "base64")
        this.encoder = InternalEncoderBase64;
      else if (this.enc === "cesu8") {
        this.enc = "utf8";
        this.encoder = InternalEncoderCesu8;
        if (Buffer22.from("eda0bdedb2a9", "hex").toString() !== "💩") {
          this.decoder = InternalDecoderCesu8;
          this.defaultCharUnicode = iconv.defaultCharUnicode;
        }
      }
    }
    InternalCodec.prototype.encoder = InternalEncoder;
    InternalCodec.prototype.decoder = InternalDecoder;
    var StringDecoder = require_string_decoder().StringDecoder;
    if (!StringDecoder.prototype.end)
      StringDecoder.prototype.end = function() {
      };
    function InternalDecoder(options, codec) {
      this.decoder = new StringDecoder(codec.enc);
    }
    InternalDecoder.prototype.write = function(buf) {
      if (!Buffer22.isBuffer(buf)) {
        buf = Buffer22.from(buf);
      }
      return this.decoder.write(buf);
    };
    InternalDecoder.prototype.end = function() {
      return this.decoder.end();
    };
    function InternalEncoder(options, codec) {
      this.enc = codec.enc;
    }
    InternalEncoder.prototype.write = function(str) {
      return Buffer22.from(str, this.enc);
    };
    InternalEncoder.prototype.end = function() {
    };
    function InternalEncoderBase64(options, codec) {
      this.prevStr = "";
    }
    InternalEncoderBase64.prototype.write = function(str) {
      str = this.prevStr + str;
      var completeQuads = str.length - str.length % 4;
      this.prevStr = str.slice(completeQuads);
      str = str.slice(0, completeQuads);
      return Buffer22.from(str, "base64");
    };
    InternalEncoderBase64.prototype.end = function() {
      return Buffer22.from(this.prevStr, "base64");
    };
    function InternalEncoderCesu8(options, codec) {
    }
    InternalEncoderCesu8.prototype.write = function(str) {
      var buf = Buffer22.alloc(str.length * 3), bufIdx = 0;
      for (var i = 0; i < str.length; i++) {
        var charCode = str.charCodeAt(i);
        if (charCode < 128)
          buf[bufIdx++] = charCode;
        else if (charCode < 2048) {
          buf[bufIdx++] = 192 + (charCode >>> 6);
          buf[bufIdx++] = 128 + (charCode & 63);
        } else {
          buf[bufIdx++] = 224 + (charCode >>> 12);
          buf[bufIdx++] = 128 + (charCode >>> 6 & 63);
          buf[bufIdx++] = 128 + (charCode & 63);
        }
      }
      return buf.slice(0, bufIdx);
    };
    InternalEncoderCesu8.prototype.end = function() {
    };
    function InternalDecoderCesu8(options, codec) {
      this.acc = 0;
      this.contBytes = 0;
      this.accBytes = 0;
      this.defaultCharUnicode = codec.defaultCharUnicode;
    }
    InternalDecoderCesu8.prototype.write = function(buf) {
      var acc = this.acc, contBytes = this.contBytes, accBytes = this.accBytes, res = "";
      for (var i = 0; i < buf.length; i++) {
        var curByte = buf[i];
        if ((curByte & 192) !== 128) {
          if (contBytes > 0) {
            res += this.defaultCharUnicode;
            contBytes = 0;
          }
          if (curByte < 128) {
            res += String.fromCharCode(curByte);
          } else if (curByte < 224) {
            acc = curByte & 31;
            contBytes = 1;
            accBytes = 1;
          } else if (curByte < 240) {
            acc = curByte & 15;
            contBytes = 2;
            accBytes = 1;
          } else {
            res += this.defaultCharUnicode;
          }
        } else {
          if (contBytes > 0) {
            acc = acc << 6 | curByte & 63;
            contBytes--;
            accBytes++;
            if (contBytes === 0) {
              if (accBytes === 2 && acc < 128 && acc > 0)
                res += this.defaultCharUnicode;
              else if (accBytes === 3 && acc < 2048)
                res += this.defaultCharUnicode;
              else
                res += String.fromCharCode(acc);
            }
          } else {
            res += this.defaultCharUnicode;
          }
        }
      }
      this.acc = acc;
      this.contBytes = contBytes;
      this.accBytes = accBytes;
      return res;
    };
    InternalDecoderCesu8.prototype.end = function() {
      var res = 0;
      if (this.contBytes > 0)
        res += this.defaultCharUnicode;
      return res;
    };
  }
});

// ../../node_modules/encoding/node_modules/iconv-lite/encodings/utf32.js
var require_utf32 = __commonJS({
  "../../node_modules/encoding/node_modules/iconv-lite/encodings/utf32.js"(exports) {
    "use strict";
    var Buffer22 = require_safer().Buffer;
    exports._utf32 = Utf32Codec;
    function Utf32Codec(codecOptions, iconv) {
      this.iconv = iconv;
      this.bomAware = true;
      this.isLE = codecOptions.isLE;
    }
    exports.utf32le = { type: "_utf32", isLE: true };
    exports.utf32be = { type: "_utf32", isLE: false };
    exports.ucs4le = "utf32le";
    exports.ucs4be = "utf32be";
    Utf32Codec.prototype.encoder = Utf32Encoder;
    Utf32Codec.prototype.decoder = Utf32Decoder;
    function Utf32Encoder(options, codec) {
      this.isLE = codec.isLE;
      this.highSurrogate = 0;
    }
    Utf32Encoder.prototype.write = function(str) {
      var src = Buffer22.from(str, "ucs2");
      var dst = Buffer22.alloc(src.length * 2);
      var write32 = this.isLE ? dst.writeUInt32LE : dst.writeUInt32BE;
      var offset = 0;
      for (var i = 0; i < src.length; i += 2) {
        var code2 = src.readUInt16LE(i);
        var isHighSurrogate = 55296 <= code2 && code2 < 56320;
        var isLowSurrogate = 56320 <= code2 && code2 < 57344;
        if (this.highSurrogate) {
          if (isHighSurrogate || !isLowSurrogate) {
            write32.call(dst, this.highSurrogate, offset);
            offset += 4;
          } else {
            var codepoint = (this.highSurrogate - 55296 << 10 | code2 - 56320) + 65536;
            write32.call(dst, codepoint, offset);
            offset += 4;
            this.highSurrogate = 0;
            continue;
          }
        }
        if (isHighSurrogate)
          this.highSurrogate = code2;
        else {
          write32.call(dst, code2, offset);
          offset += 4;
          this.highSurrogate = 0;
        }
      }
      if (offset < dst.length)
        dst = dst.slice(0, offset);
      return dst;
    };
    Utf32Encoder.prototype.end = function() {
      if (!this.highSurrogate)
        return;
      var buf = Buffer22.alloc(4);
      if (this.isLE)
        buf.writeUInt32LE(this.highSurrogate, 0);
      else
        buf.writeUInt32BE(this.highSurrogate, 0);
      this.highSurrogate = 0;
      return buf;
    };
    function Utf32Decoder(options, codec) {
      this.isLE = codec.isLE;
      this.badChar = codec.iconv.defaultCharUnicode.charCodeAt(0);
      this.overflow = [];
    }
    Utf32Decoder.prototype.write = function(src) {
      if (src.length === 0)
        return "";
      var i = 0;
      var codepoint = 0;
      var dst = Buffer22.alloc(src.length + 4);
      var offset = 0;
      var isLE = this.isLE;
      var overflow = this.overflow;
      var badChar = this.badChar;
      if (overflow.length > 0) {
        for (; i < src.length && overflow.length < 4; i++)
          overflow.push(src[i]);
        if (overflow.length === 4) {
          if (isLE) {
            codepoint = overflow[i] | overflow[i + 1] << 8 | overflow[i + 2] << 16 | overflow[i + 3] << 24;
          } else {
            codepoint = overflow[i + 3] | overflow[i + 2] << 8 | overflow[i + 1] << 16 | overflow[i] << 24;
          }
          overflow.length = 0;
          offset = _writeCodepoint(dst, offset, codepoint, badChar);
        }
      }
      for (; i < src.length - 3; i += 4) {
        if (isLE) {
          codepoint = src[i] | src[i + 1] << 8 | src[i + 2] << 16 | src[i + 3] << 24;
        } else {
          codepoint = src[i + 3] | src[i + 2] << 8 | src[i + 1] << 16 | src[i] << 24;
        }
        offset = _writeCodepoint(dst, offset, codepoint, badChar);
      }
      for (; i < src.length; i++) {
        overflow.push(src[i]);
      }
      return dst.slice(0, offset).toString("ucs2");
    };
    function _writeCodepoint(dst, offset, codepoint, badChar) {
      if (codepoint < 0 || codepoint > 1114111) {
        codepoint = badChar;
      }
      if (codepoint >= 65536) {
        codepoint -= 65536;
        var high = 55296 | codepoint >> 10;
        dst[offset++] = high & 255;
        dst[offset++] = high >> 8;
        var codepoint = 56320 | codepoint & 1023;
      }
      dst[offset++] = codepoint & 255;
      dst[offset++] = codepoint >> 8;
      return offset;
    }
    Utf32Decoder.prototype.end = function() {
      this.overflow.length = 0;
    };
    exports.utf32 = Utf32AutoCodec;
    exports.ucs4 = "utf32";
    function Utf32AutoCodec(options, iconv) {
      this.iconv = iconv;
    }
    Utf32AutoCodec.prototype.encoder = Utf32AutoEncoder;
    Utf32AutoCodec.prototype.decoder = Utf32AutoDecoder;
    function Utf32AutoEncoder(options, codec) {
      options = options || {};
      if (options.addBOM === void 0)
        options.addBOM = true;
      this.encoder = codec.iconv.getEncoder(options.defaultEncoding || "utf-32le", options);
    }
    Utf32AutoEncoder.prototype.write = function(str) {
      return this.encoder.write(str);
    };
    Utf32AutoEncoder.prototype.end = function() {
      return this.encoder.end();
    };
    function Utf32AutoDecoder(options, codec) {
      this.decoder = null;
      this.initialBufs = [];
      this.initialBufsLen = 0;
      this.options = options || {};
      this.iconv = codec.iconv;
    }
    Utf32AutoDecoder.prototype.write = function(buf) {
      if (!this.decoder) {
        this.initialBufs.push(buf);
        this.initialBufsLen += buf.length;
        if (this.initialBufsLen < 32)
          return "";
        var encoding = detectEncoding(this.initialBufs, this.options.defaultEncoding);
        this.decoder = this.iconv.getDecoder(encoding, this.options);
        var resStr = "";
        for (var i = 0; i < this.initialBufs.length; i++)
          resStr += this.decoder.write(this.initialBufs[i]);
        this.initialBufs.length = this.initialBufsLen = 0;
        return resStr;
      }
      return this.decoder.write(buf);
    };
    Utf32AutoDecoder.prototype.end = function() {
      if (!this.decoder) {
        var encoding = detectEncoding(this.initialBufs, this.options.defaultEncoding);
        this.decoder = this.iconv.getDecoder(encoding, this.options);
        var resStr = "";
        for (var i = 0; i < this.initialBufs.length; i++)
          resStr += this.decoder.write(this.initialBufs[i]);
        var trail = this.decoder.end();
        if (trail)
          resStr += trail;
        this.initialBufs.length = this.initialBufsLen = 0;
        return resStr;
      }
      return this.decoder.end();
    };
    function detectEncoding(bufs, defaultEncoding) {
      var b = [];
      var charsProcessed = 0;
      var invalidLE = 0, invalidBE = 0;
      var bmpCharsLE = 0, bmpCharsBE = 0;
      outer_loop:
        for (var i = 0; i < bufs.length; i++) {
          var buf = bufs[i];
          for (var j = 0; j < buf.length; j++) {
            b.push(buf[j]);
            if (b.length === 4) {
              if (charsProcessed === 0) {
                if (b[0] === 255 && b[1] === 254 && b[2] === 0 && b[3] === 0) {
                  return "utf-32le";
                }
                if (b[0] === 0 && b[1] === 0 && b[2] === 254 && b[3] === 255) {
                  return "utf-32be";
                }
              }
              if (b[0] !== 0 || b[1] > 16)
                invalidBE++;
              if (b[3] !== 0 || b[2] > 16)
                invalidLE++;
              if (b[0] === 0 && b[1] === 0 && (b[2] !== 0 || b[3] !== 0))
                bmpCharsBE++;
              if ((b[0] !== 0 || b[1] !== 0) && b[2] === 0 && b[3] === 0)
                bmpCharsLE++;
              b.length = 0;
              charsProcessed++;
              if (charsProcessed >= 100) {
                break outer_loop;
              }
            }
          }
        }
      if (bmpCharsBE - invalidBE > bmpCharsLE - invalidLE)
        return "utf-32be";
      if (bmpCharsBE - invalidBE < bmpCharsLE - invalidLE)
        return "utf-32le";
      return defaultEncoding || "utf-32le";
    }
  }
});

// ../../node_modules/encoding/node_modules/iconv-lite/encodings/utf16.js
var require_utf16 = __commonJS({
  "../../node_modules/encoding/node_modules/iconv-lite/encodings/utf16.js"(exports) {
    "use strict";
    var Buffer22 = require_safer().Buffer;
    exports.utf16be = Utf16BECodec;
    function Utf16BECodec() {
    }
    Utf16BECodec.prototype.encoder = Utf16BEEncoder;
    Utf16BECodec.prototype.decoder = Utf16BEDecoder;
    Utf16BECodec.prototype.bomAware = true;
    function Utf16BEEncoder() {
    }
    Utf16BEEncoder.prototype.write = function(str) {
      var buf = Buffer22.from(str, "ucs2");
      for (var i = 0; i < buf.length; i += 2) {
        var tmp = buf[i];
        buf[i] = buf[i + 1];
        buf[i + 1] = tmp;
      }
      return buf;
    };
    Utf16BEEncoder.prototype.end = function() {
    };
    function Utf16BEDecoder() {
      this.overflowByte = -1;
    }
    Utf16BEDecoder.prototype.write = function(buf) {
      if (buf.length == 0)
        return "";
      var buf2 = Buffer22.alloc(buf.length + 1), i = 0, j = 0;
      if (this.overflowByte !== -1) {
        buf2[0] = buf[0];
        buf2[1] = this.overflowByte;
        i = 1;
        j = 2;
      }
      for (; i < buf.length - 1; i += 2, j += 2) {
        buf2[j] = buf[i + 1];
        buf2[j + 1] = buf[i];
      }
      this.overflowByte = i == buf.length - 1 ? buf[buf.length - 1] : -1;
      return buf2.slice(0, j).toString("ucs2");
    };
    Utf16BEDecoder.prototype.end = function() {
      this.overflowByte = -1;
    };
    exports.utf16 = Utf16Codec;
    function Utf16Codec(codecOptions, iconv) {
      this.iconv = iconv;
    }
    Utf16Codec.prototype.encoder = Utf16Encoder;
    Utf16Codec.prototype.decoder = Utf16Decoder;
    function Utf16Encoder(options, codec) {
      options = options || {};
      if (options.addBOM === void 0)
        options.addBOM = true;
      this.encoder = codec.iconv.getEncoder("utf-16le", options);
    }
    Utf16Encoder.prototype.write = function(str) {
      return this.encoder.write(str);
    };
    Utf16Encoder.prototype.end = function() {
      return this.encoder.end();
    };
    function Utf16Decoder(options, codec) {
      this.decoder = null;
      this.initialBufs = [];
      this.initialBufsLen = 0;
      this.options = options || {};
      this.iconv = codec.iconv;
    }
    Utf16Decoder.prototype.write = function(buf) {
      if (!this.decoder) {
        this.initialBufs.push(buf);
        this.initialBufsLen += buf.length;
        if (this.initialBufsLen < 16)
          return "";
        var encoding = detectEncoding(this.initialBufs, this.options.defaultEncoding);
        this.decoder = this.iconv.getDecoder(encoding, this.options);
        var resStr = "";
        for (var i = 0; i < this.initialBufs.length; i++)
          resStr += this.decoder.write(this.initialBufs[i]);
        this.initialBufs.length = this.initialBufsLen = 0;
        return resStr;
      }
      return this.decoder.write(buf);
    };
    Utf16Decoder.prototype.end = function() {
      if (!this.decoder) {
        var encoding = detectEncoding(this.initialBufs, this.options.defaultEncoding);
        this.decoder = this.iconv.getDecoder(encoding, this.options);
        var resStr = "";
        for (var i = 0; i < this.initialBufs.length; i++)
          resStr += this.decoder.write(this.initialBufs[i]);
        var trail = this.decoder.end();
        if (trail)
          resStr += trail;
        this.initialBufs.length = this.initialBufsLen = 0;
        return resStr;
      }
      return this.decoder.end();
    };
    function detectEncoding(bufs, defaultEncoding) {
      var b = [];
      var charsProcessed = 0;
      var asciiCharsLE = 0, asciiCharsBE = 0;
      outer_loop:
        for (var i = 0; i < bufs.length; i++) {
          var buf = bufs[i];
          for (var j = 0; j < buf.length; j++) {
            b.push(buf[j]);
            if (b.length === 2) {
              if (charsProcessed === 0) {
                if (b[0] === 255 && b[1] === 254)
                  return "utf-16le";
                if (b[0] === 254 && b[1] === 255)
                  return "utf-16be";
              }
              if (b[0] === 0 && b[1] !== 0)
                asciiCharsBE++;
              if (b[0] !== 0 && b[1] === 0)
                asciiCharsLE++;
              b.length = 0;
              charsProcessed++;
              if (charsProcessed >= 100) {
                break outer_loop;
              }
            }
          }
        }
      if (asciiCharsBE > asciiCharsLE)
        return "utf-16be";
      if (asciiCharsBE < asciiCharsLE)
        return "utf-16le";
      return defaultEncoding || "utf-16le";
    }
  }
});

// ../../node_modules/encoding/node_modules/iconv-lite/encodings/utf7.js
var require_utf7 = __commonJS({
  "../../node_modules/encoding/node_modules/iconv-lite/encodings/utf7.js"(exports) {
    "use strict";
    var Buffer22 = require_safer().Buffer;
    exports.utf7 = Utf7Codec;
    exports.unicode11utf7 = "utf7";
    function Utf7Codec(codecOptions, iconv) {
      this.iconv = iconv;
    }
    Utf7Codec.prototype.encoder = Utf7Encoder;
    Utf7Codec.prototype.decoder = Utf7Decoder;
    Utf7Codec.prototype.bomAware = true;
    var nonDirectChars = /[^A-Za-z0-9'\(\),-\.\/:\? \n\r\t]+/g;
    function Utf7Encoder(options, codec) {
      this.iconv = codec.iconv;
    }
    Utf7Encoder.prototype.write = function(str) {
      return Buffer22.from(str.replace(nonDirectChars, (function(chunk2) {
        return "+" + (chunk2 === "+" ? "" : this.iconv.encode(chunk2, "utf16-be").toString("base64").replace(/=+$/, "")) + "-";
      }).bind(this)));
    };
    Utf7Encoder.prototype.end = function() {
    };
    function Utf7Decoder(options, codec) {
      this.iconv = codec.iconv;
      this.inBase64 = false;
      this.base64Accum = "";
    }
    var base64Regex = /[A-Za-z0-9\/+]/;
    var base64Chars = [];
    for (i = 0; i < 256; i++)
      base64Chars[i] = base64Regex.test(String.fromCharCode(i));
    var i;
    var plusChar = "+".charCodeAt(0);
    var minusChar = "-".charCodeAt(0);
    var andChar = "&".charCodeAt(0);
    Utf7Decoder.prototype.write = function(buf) {
      var res = "", lastI = 0, inBase64 = this.inBase64, base64Accum = this.base64Accum;
      for (var i2 = 0; i2 < buf.length; i2++) {
        if (!inBase64) {
          if (buf[i2] == plusChar) {
            res += this.iconv.decode(buf.slice(lastI, i2), "ascii");
            lastI = i2 + 1;
            inBase64 = true;
          }
        } else {
          if (!base64Chars[buf[i2]]) {
            if (i2 == lastI && buf[i2] == minusChar) {
              res += "+";
            } else {
              var b64str = base64Accum + this.iconv.decode(buf.slice(lastI, i2), "ascii");
              res += this.iconv.decode(Buffer22.from(b64str, "base64"), "utf16-be");
            }
            if (buf[i2] != minusChar)
              i2--;
            lastI = i2 + 1;
            inBase64 = false;
            base64Accum = "";
          }
        }
      }
      if (!inBase64) {
        res += this.iconv.decode(buf.slice(lastI), "ascii");
      } else {
        var b64str = base64Accum + this.iconv.decode(buf.slice(lastI), "ascii");
        var canBeDecoded = b64str.length - b64str.length % 8;
        base64Accum = b64str.slice(canBeDecoded);
        b64str = b64str.slice(0, canBeDecoded);
        res += this.iconv.decode(Buffer22.from(b64str, "base64"), "utf16-be");
      }
      this.inBase64 = inBase64;
      this.base64Accum = base64Accum;
      return res;
    };
    Utf7Decoder.prototype.end = function() {
      var res = "";
      if (this.inBase64 && this.base64Accum.length > 0)
        res = this.iconv.decode(Buffer22.from(this.base64Accum, "base64"), "utf16-be");
      this.inBase64 = false;
      this.base64Accum = "";
      return res;
    };
    exports.utf7imap = Utf7IMAPCodec;
    function Utf7IMAPCodec(codecOptions, iconv) {
      this.iconv = iconv;
    }
    Utf7IMAPCodec.prototype.encoder = Utf7IMAPEncoder;
    Utf7IMAPCodec.prototype.decoder = Utf7IMAPDecoder;
    Utf7IMAPCodec.prototype.bomAware = true;
    function Utf7IMAPEncoder(options, codec) {
      this.iconv = codec.iconv;
      this.inBase64 = false;
      this.base64Accum = Buffer22.alloc(6);
      this.base64AccumIdx = 0;
    }
    Utf7IMAPEncoder.prototype.write = function(str) {
      var inBase64 = this.inBase64, base64Accum = this.base64Accum, base64AccumIdx = this.base64AccumIdx, buf = Buffer22.alloc(str.length * 5 + 10), bufIdx = 0;
      for (var i2 = 0; i2 < str.length; i2++) {
        var uChar = str.charCodeAt(i2);
        if (32 <= uChar && uChar <= 126) {
          if (inBase64) {
            if (base64AccumIdx > 0) {
              bufIdx += buf.write(base64Accum.slice(0, base64AccumIdx).toString("base64").replace(/\//g, ",").replace(/=+$/, ""), bufIdx);
              base64AccumIdx = 0;
            }
            buf[bufIdx++] = minusChar;
            inBase64 = false;
          }
          if (!inBase64) {
            buf[bufIdx++] = uChar;
            if (uChar === andChar)
              buf[bufIdx++] = minusChar;
          }
        } else {
          if (!inBase64) {
            buf[bufIdx++] = andChar;
            inBase64 = true;
          }
          if (inBase64) {
            base64Accum[base64AccumIdx++] = uChar >> 8;
            base64Accum[base64AccumIdx++] = uChar & 255;
            if (base64AccumIdx == base64Accum.length) {
              bufIdx += buf.write(base64Accum.toString("base64").replace(/\//g, ","), bufIdx);
              base64AccumIdx = 0;
            }
          }
        }
      }
      this.inBase64 = inBase64;
      this.base64AccumIdx = base64AccumIdx;
      return buf.slice(0, bufIdx);
    };
    Utf7IMAPEncoder.prototype.end = function() {
      var buf = Buffer22.alloc(10), bufIdx = 0;
      if (this.inBase64) {
        if (this.base64AccumIdx > 0) {
          bufIdx += buf.write(this.base64Accum.slice(0, this.base64AccumIdx).toString("base64").replace(/\//g, ",").replace(/=+$/, ""), bufIdx);
          this.base64AccumIdx = 0;
        }
        buf[bufIdx++] = minusChar;
        this.inBase64 = false;
      }
      return buf.slice(0, bufIdx);
    };
    function Utf7IMAPDecoder(options, codec) {
      this.iconv = codec.iconv;
      this.inBase64 = false;
      this.base64Accum = "";
    }
    var base64IMAPChars = base64Chars.slice();
    base64IMAPChars[",".charCodeAt(0)] = true;
    Utf7IMAPDecoder.prototype.write = function(buf) {
      var res = "", lastI = 0, inBase64 = this.inBase64, base64Accum = this.base64Accum;
      for (var i2 = 0; i2 < buf.length; i2++) {
        if (!inBase64) {
          if (buf[i2] == andChar) {
            res += this.iconv.decode(buf.slice(lastI, i2), "ascii");
            lastI = i2 + 1;
            inBase64 = true;
          }
        } else {
          if (!base64IMAPChars[buf[i2]]) {
            if (i2 == lastI && buf[i2] == minusChar) {
              res += "&";
            } else {
              var b64str = base64Accum + this.iconv.decode(buf.slice(lastI, i2), "ascii").replace(/,/g, "/");
              res += this.iconv.decode(Buffer22.from(b64str, "base64"), "utf16-be");
            }
            if (buf[i2] != minusChar)
              i2--;
            lastI = i2 + 1;
            inBase64 = false;
            base64Accum = "";
          }
        }
      }
      if (!inBase64) {
        res += this.iconv.decode(buf.slice(lastI), "ascii");
      } else {
        var b64str = base64Accum + this.iconv.decode(buf.slice(lastI), "ascii").replace(/,/g, "/");
        var canBeDecoded = b64str.length - b64str.length % 8;
        base64Accum = b64str.slice(canBeDecoded);
        b64str = b64str.slice(0, canBeDecoded);
        res += this.iconv.decode(Buffer22.from(b64str, "base64"), "utf16-be");
      }
      this.inBase64 = inBase64;
      this.base64Accum = base64Accum;
      return res;
    };
    Utf7IMAPDecoder.prototype.end = function() {
      var res = "";
      if (this.inBase64 && this.base64Accum.length > 0)
        res = this.iconv.decode(Buffer22.from(this.base64Accum, "base64"), "utf16-be");
      this.inBase64 = false;
      this.base64Accum = "";
      return res;
    };
  }
});

// ../../node_modules/encoding/node_modules/iconv-lite/encodings/sbcs-codec.js
var require_sbcs_codec = __commonJS({
  "../../node_modules/encoding/node_modules/iconv-lite/encodings/sbcs-codec.js"(exports) {
    "use strict";
    var Buffer22 = require_safer().Buffer;
    exports._sbcs = SBCSCodec;
    function SBCSCodec(codecOptions, iconv) {
      if (!codecOptions)
        throw new Error("SBCS codec is called without the data.");
      if (!codecOptions.chars || codecOptions.chars.length !== 128 && codecOptions.chars.length !== 256)
        throw new Error("Encoding '" + codecOptions.type + "' has incorrect 'chars' (must be of len 128 or 256)");
      if (codecOptions.chars.length === 128) {
        var asciiString = "";
        for (var i = 0; i < 128; i++)
          asciiString += String.fromCharCode(i);
        codecOptions.chars = asciiString + codecOptions.chars;
      }
      this.decodeBuf = Buffer22.from(codecOptions.chars, "ucs2");
      var encodeBuf = Buffer22.alloc(65536, iconv.defaultCharSingleByte.charCodeAt(0));
      for (var i = 0; i < codecOptions.chars.length; i++)
        encodeBuf[codecOptions.chars.charCodeAt(i)] = i;
      this.encodeBuf = encodeBuf;
    }
    SBCSCodec.prototype.encoder = SBCSEncoder;
    SBCSCodec.prototype.decoder = SBCSDecoder;
    function SBCSEncoder(options, codec) {
      this.encodeBuf = codec.encodeBuf;
    }
    SBCSEncoder.prototype.write = function(str) {
      var buf = Buffer22.alloc(str.length);
      for (var i = 0; i < str.length; i++)
        buf[i] = this.encodeBuf[str.charCodeAt(i)];
      return buf;
    };
    SBCSEncoder.prototype.end = function() {
    };
    function SBCSDecoder(options, codec) {
      this.decodeBuf = codec.decodeBuf;
    }
    SBCSDecoder.prototype.write = function(buf) {
      var decodeBuf = this.decodeBuf;
      var newBuf = Buffer22.alloc(buf.length * 2);
      var idx1 = 0, idx2 = 0;
      for (var i = 0; i < buf.length; i++) {
        idx1 = buf[i] * 2;
        idx2 = i * 2;
        newBuf[idx2] = decodeBuf[idx1];
        newBuf[idx2 + 1] = decodeBuf[idx1 + 1];
      }
      return newBuf.toString("ucs2");
    };
    SBCSDecoder.prototype.end = function() {
    };
  }
});

// ../../node_modules/encoding/node_modules/iconv-lite/encodings/sbcs-data.js
var require_sbcs_data = __commonJS({
  "../../node_modules/encoding/node_modules/iconv-lite/encodings/sbcs-data.js"(exports, module) {
    "use strict";
    module.exports = {
      // Not supported by iconv, not sure why.
      "10029": "maccenteuro",
      "maccenteuro": {
        "type": "_sbcs",
        "chars": "ÄĀāÉĄÖÜáąČäčĆćéŹźĎíďĒēĖóėôöõúĚěü†°Ę£§•¶ß®©™ę¨≠ģĮįĪ≤≥īĶ∂∑łĻļĽľĹĺŅņŃ¬√ńŇ∆«»… ňŐÕőŌ–—“”‘’÷◊ōŔŕŘ‹›řŖŗŠ‚„šŚśÁŤťÍŽžŪÓÔūŮÚůŰűŲųÝýķŻŁżĢˇ"
      },
      "808": "cp808",
      "ibm808": "cp808",
      "cp808": {
        "type": "_sbcs",
        "chars": "АБВГДЕЖЗИЙКЛМНОПРСТУФХЦЧШЩЪЫЬЭЮЯабвгдежзийклмноп░▒▓│┤╡╢╖╕╣║╗╝╜╛┐└┴┬├─┼╞╟╚╔╩╦╠═╬╧╨╤╥╙╘╒╓╫╪┘┌█▄▌▐▀рстуфхцчшщъыьэюяЁёЄєЇїЎў°∙·√№€■ "
      },
      "mik": {
        "type": "_sbcs",
        "chars": "АБВГДЕЖЗИЙКЛМНОПРСТУФХЦЧШЩЪЫЬЭЮЯабвгдежзийклмнопрстуфхцчшщъыьэюя└┴┬├─┼╣║╚╔╩╦╠═╬┐░▒▓│┤№§╗╝┘┌█▄▌▐▀αßΓπΣσµτΦΘΩδ∞φε∩≡±≥≤⌠⌡÷≈°∙·√ⁿ²■ "
      },
      "cp720": {
        "type": "_sbcs",
        "chars": "éâàçêëèïîّْô¤ـûùءآأؤ£إئابةتثجحخدذرزسشص«»░▒▓│┤╡╢╖╕╣║╗╝╜╛┐└┴┬├─┼╞╟╚╔╩╦╠═╬╧╨╤╥╙╘╒╓╫╪┘┌█▄▌▐▀ضطظعغفµقكلمنهوىي≡ًٌٍَُِ≈°∙·√ⁿ²■ "
      },
      // Aliases of generated encodings.
      "ascii8bit": "ascii",
      "usascii": "ascii",
      "ansix34": "ascii",
      "ansix341968": "ascii",
      "ansix341986": "ascii",
      "csascii": "ascii",
      "cp367": "ascii",
      "ibm367": "ascii",
      "isoir6": "ascii",
      "iso646us": "ascii",
      "iso646irv": "ascii",
      "us": "ascii",
      "latin1": "iso88591",
      "latin2": "iso88592",
      "latin3": "iso88593",
      "latin4": "iso88594",
      "latin5": "iso88599",
      "latin6": "iso885910",
      "latin7": "iso885913",
      "latin8": "iso885914",
      "latin9": "iso885915",
      "latin10": "iso885916",
      "csisolatin1": "iso88591",
      "csisolatin2": "iso88592",
      "csisolatin3": "iso88593",
      "csisolatin4": "iso88594",
      "csisolatincyrillic": "iso88595",
      "csisolatinarabic": "iso88596",
      "csisolatingreek": "iso88597",
      "csisolatinhebrew": "iso88598",
      "csisolatin5": "iso88599",
      "csisolatin6": "iso885910",
      "l1": "iso88591",
      "l2": "iso88592",
      "l3": "iso88593",
      "l4": "iso88594",
      "l5": "iso88599",
      "l6": "iso885910",
      "l7": "iso885913",
      "l8": "iso885914",
      "l9": "iso885915",
      "l10": "iso885916",
      "isoir14": "iso646jp",
      "isoir57": "iso646cn",
      "isoir100": "iso88591",
      "isoir101": "iso88592",
      "isoir109": "iso88593",
      "isoir110": "iso88594",
      "isoir144": "iso88595",
      "isoir127": "iso88596",
      "isoir126": "iso88597",
      "isoir138": "iso88598",
      "isoir148": "iso88599",
      "isoir157": "iso885910",
      "isoir166": "tis620",
      "isoir179": "iso885913",
      "isoir199": "iso885914",
      "isoir203": "iso885915",
      "isoir226": "iso885916",
      "cp819": "iso88591",
      "ibm819": "iso88591",
      "cyrillic": "iso88595",
      "arabic": "iso88596",
      "arabic8": "iso88596",
      "ecma114": "iso88596",
      "asmo708": "iso88596",
      "greek": "iso88597",
      "greek8": "iso88597",
      "ecma118": "iso88597",
      "elot928": "iso88597",
      "hebrew": "iso88598",
      "hebrew8": "iso88598",
      "turkish": "iso88599",
      "turkish8": "iso88599",
      "thai": "iso885911",
      "thai8": "iso885911",
      "celtic": "iso885914",
      "celtic8": "iso885914",
      "isoceltic": "iso885914",
      "tis6200": "tis620",
      "tis62025291": "tis620",
      "tis62025330": "tis620",
      "10000": "macroman",
      "10006": "macgreek",
      "10007": "maccyrillic",
      "10079": "maciceland",
      "10081": "macturkish",
      "cspc8codepage437": "cp437",
      "cspc775baltic": "cp775",
      "cspc850multilingual": "cp850",
      "cspcp852": "cp852",
      "cspc862latinhebrew": "cp862",
      "cpgr": "cp869",
      "msee": "cp1250",
      "mscyrl": "cp1251",
      "msansi": "cp1252",
      "msgreek": "cp1253",
      "msturk": "cp1254",
      "mshebr": "cp1255",
      "msarab": "cp1256",
      "winbaltrim": "cp1257",
      "cp20866": "koi8r",
      "20866": "koi8r",
      "ibm878": "koi8r",
      "cskoi8r": "koi8r",
      "cp21866": "koi8u",
      "21866": "koi8u",
      "ibm1168": "koi8u",
      "strk10482002": "rk1048",
      "tcvn5712": "tcvn",
      "tcvn57121": "tcvn",
      "gb198880": "iso646cn",
      "cn": "iso646cn",
      "csiso14jisc6220ro": "iso646jp",
      "jisc62201969ro": "iso646jp",
      "jp": "iso646jp",
      "cshproman8": "hproman8",
      "r8": "hproman8",
      "roman8": "hproman8",
      "xroman8": "hproman8",
      "ibm1051": "hproman8",
      "mac": "macintosh",
      "csmacintosh": "macintosh"
    };
  }
});

// ../../node_modules/encoding/node_modules/iconv-lite/encodings/sbcs-data-generated.js
var require_sbcs_data_generated = __commonJS({
  "../../node_modules/encoding/node_modules/iconv-lite/encodings/sbcs-data-generated.js"(exports, module) {
    "use strict";
    module.exports = {
      "437": "cp437",
      "737": "cp737",
      "775": "cp775",
      "850": "cp850",
      "852": "cp852",
      "855": "cp855",
      "856": "cp856",
      "857": "cp857",
      "858": "cp858",
      "860": "cp860",
      "861": "cp861",
      "862": "cp862",
      "863": "cp863",
      "864": "cp864",
      "865": "cp865",
      "866": "cp866",
      "869": "cp869",
      "874": "windows874",
      "922": "cp922",
      "1046": "cp1046",
      "1124": "cp1124",
      "1125": "cp1125",
      "1129": "cp1129",
      "1133": "cp1133",
      "1161": "cp1161",
      "1162": "cp1162",
      "1163": "cp1163",
      "1250": "windows1250",
      "1251": "windows1251",
      "1252": "windows1252",
      "1253": "windows1253",
      "1254": "windows1254",
      "1255": "windows1255",
      "1256": "windows1256",
      "1257": "windows1257",
      "1258": "windows1258",
      "28591": "iso88591",
      "28592": "iso88592",
      "28593": "iso88593",
      "28594": "iso88594",
      "28595": "iso88595",
      "28596": "iso88596",
      "28597": "iso88597",
      "28598": "iso88598",
      "28599": "iso88599",
      "28600": "iso885910",
      "28601": "iso885911",
      "28603": "iso885913",
      "28604": "iso885914",
      "28605": "iso885915",
      "28606": "iso885916",
      "windows874": {
        "type": "_sbcs",
        "chars": "€����…�����������‘’“”•–—�������� กขฃคฅฆงจฉชซฌญฎฏฐฑฒณดตถทธนบปผฝพฟภมยรฤลฦวศษสหฬอฮฯะัาำิีึืฺุู����฿เแโใไๅๆ็่้๊๋์ํ๎๏๐๑๒๓๔๕๖๗๘๙๚๛����"
      },
      "win874": "windows874",
      "cp874": "windows874",
      "windows1250": {
        "type": "_sbcs",
        "chars": "€�‚�„…†‡�‰Š‹ŚŤŽŹ�‘’“”•–—�™š›śťžź ˇ˘Ł¤Ą¦§¨©Ş«¬­®Ż°±˛ł´µ¶·¸ąş»Ľ˝ľżŔÁÂĂÄĹĆÇČÉĘËĚÍÎĎĐŃŇÓÔŐÖ×ŘŮÚŰÜÝŢßŕáâăäĺćçčéęëěíîďđńňóôőö÷řůúűüýţ˙"
      },
      "win1250": "windows1250",
      "cp1250": "windows1250",
      "windows1251": {
        "type": "_sbcs",
        "chars": "ЂЃ‚ѓ„…†‡€‰Љ‹ЊЌЋЏђ‘’“”•–—�™љ›њќћџ ЎўЈ¤Ґ¦§Ё©Є«¬­®Ї°±Ііґµ¶·ё№є»јЅѕїАБВГДЕЖЗИЙКЛМНОПРСТУФХЦЧШЩЪЫЬЭЮЯабвгдежзийклмнопрстуфхцчшщъыьэюя"
      },
      "win1251": "windows1251",
      "cp1251": "windows1251",
      "windows1252": {
        "type": "_sbcs",
        "chars": "€�‚ƒ„…†‡ˆ‰Š‹Œ�Ž��‘’“”•–—˜™š›œ�žŸ ¡¢£¤¥¦§¨©ª«¬­®¯°±²³´µ¶·¸¹º»¼½¾¿ÀÁÂÃÄÅÆÇÈÉÊËÌÍÎÏÐÑÒÓÔÕÖ×ØÙÚÛÜÝÞßàáâãäåæçèéêëìíîïðñòóôõö÷øùúûüýþÿ"
      },
      "win1252": "windows1252",
      "cp1252": "windows1252",
      "windows1253": {
        "type": "_sbcs",
        "chars": "€�‚ƒ„…†‡�‰�‹�����‘’“”•–—�™�›���� ΅Ά£¤¥¦§¨©�«¬­®―°±²³΄µ¶·ΈΉΊ»Ό½ΎΏΐΑΒΓΔΕΖΗΘΙΚΛΜΝΞΟΠΡ�ΣΤΥΦΧΨΩΪΫάέήίΰαβγδεζηθικλμνξοπρςστυφχψωϊϋόύώ�"
      },
      "win1253": "windows1253",
      "cp1253": "windows1253",
      "windows1254": {
        "type": "_sbcs",
        "chars": "€�‚ƒ„…†‡ˆ‰Š‹Œ����‘’“”•–—˜™š›œ��Ÿ ¡¢£¤¥¦§¨©ª«¬­®¯°±²³´µ¶·¸¹º»¼½¾¿ÀÁÂÃÄÅÆÇÈÉÊËÌÍÎÏĞÑÒÓÔÕÖ×ØÙÚÛÜİŞßàáâãäåæçèéêëìíîïğñòóôõö÷øùúûüışÿ"
      },
      "win1254": "windows1254",
      "cp1254": "windows1254",
      "windows1255": {
        "type": "_sbcs",
        "chars": "€�‚ƒ„…†‡ˆ‰�‹�����‘’“”•–—˜™�›���� ¡¢£₪¥¦§¨©×«¬­®¯°±²³´µ¶·¸¹÷»¼½¾¿ְֱֲֳִֵֶַָֹֺֻּֽ־ֿ׀ׁׂ׃װױײ׳״�������אבגדהוזחטיךכלםמןנסעףפץצקרשת��‎‏�"
      },
      "win1255": "windows1255",
      "cp1255": "windows1255",
      "windows1256": {
        "type": "_sbcs",
        "chars": "€پ‚ƒ„…†‡ˆ‰ٹ‹Œچژڈگ‘’“”•–—ک™ڑ›œ‌‍ں ،¢£¤¥¦§¨©ھ«¬­®¯°±²³´µ¶·¸¹؛»¼½¾؟ہءآأؤإئابةتثجحخدذرزسشصض×طظعغـفقكàلâمنهوçèéêëىيîïًٌٍَôُِ÷ّùْûü‎‏ے"
      },
      "win1256": "windows1256",
      "cp1256": "windows1256",
      "windows1257": {
        "type": "_sbcs",
        "chars": "€�‚�„…†‡�‰�‹�¨ˇ¸�‘’“”•–—�™�›�¯˛� �¢£¤�¦§Ø©Ŗ«¬­®Æ°±²³´µ¶·ø¹ŗ»¼½¾æĄĮĀĆÄÅĘĒČÉŹĖĢĶĪĻŠŃŅÓŌÕÖ×ŲŁŚŪÜŻŽßąįāćäåęēčéźėģķīļšńņóōõö÷ųłśūüżž˙"
      },
      "win1257": "windows1257",
      "cp1257": "windows1257",
      "windows1258": {
        "type": "_sbcs",
        "chars": "€�‚ƒ„…†‡ˆ‰�‹Œ����‘’“”•–—˜™�›œ��Ÿ ¡¢£¤¥¦§¨©ª«¬­®¯°±²³´µ¶·¸¹º»¼½¾¿ÀÁÂĂÄÅÆÇÈÉÊË̀ÍÎÏĐÑ̉ÓÔƠÖ×ØÙÚÛÜỮßàáâăäåæçèéêë́íîïđṇ̃óôơö÷øùúûüư₫ÿ"
      },
      "win1258": "windows1258",
      "cp1258": "windows1258",
      "iso88591": {
        "type": "_sbcs",
        "chars": " ¡¢£¤¥¦§¨©ª«¬­®¯°±²³´µ¶·¸¹º»¼½¾¿ÀÁÂÃÄÅÆÇÈÉÊËÌÍÎÏÐÑÒÓÔÕÖ×ØÙÚÛÜÝÞßàáâãäåæçèéêëìíîïðñòóôõö÷øùúûüýþÿ"
      },
      "cp28591": "iso88591",
      "iso88592": {
        "type": "_sbcs",
        "chars": " Ą˘Ł¤ĽŚ§¨ŠŞŤŹ­ŽŻ°ą˛ł´ľśˇ¸šşťź˝žżŔÁÂĂÄĹĆÇČÉĘËĚÍÎĎĐŃŇÓÔŐÖ×ŘŮÚŰÜÝŢßŕáâăäĺćçčéęëěíîďđńňóôőö÷řůúűüýţ˙"
      },
      "cp28592": "iso88592",
      "iso88593": {
        "type": "_sbcs",
        "chars": " Ħ˘£¤�Ĥ§¨İŞĞĴ­�Ż°ħ²³´µĥ·¸ışğĵ½�żÀÁÂ�ÄĊĈÇÈÉÊËÌÍÎÏ�ÑÒÓÔĠÖ×ĜÙÚÛÜŬŜßàáâ�äċĉçèéêëìíîï�ñòóôġö÷ĝùúûüŭŝ˙"
      },
      "cp28593": "iso88593",
      "iso88594": {
        "type": "_sbcs",
        "chars": " ĄĸŖ¤ĨĻ§¨ŠĒĢŦ­Ž¯°ą˛ŗ´ĩļˇ¸šēģŧŊžŋĀÁÂÃÄÅÆĮČÉĘËĖÍÎĪĐŅŌĶÔÕÖ×ØŲÚÛÜŨŪßāáâãäåæįčéęëėíîīđņōķôõö÷øųúûüũū˙"
      },
      "cp28594": "iso88594",
      "iso88595": {
        "type": "_sbcs",
        "chars": " ЁЂЃЄЅІЇЈЉЊЋЌ­ЎЏАБВГДЕЖЗИЙКЛМНОПРСТУФХЦЧШЩЪЫЬЭЮЯабвгдежзийклмнопрстуфхцчшщъыьэюя№ёђѓєѕіїјљњћќ§ўџ"
      },
      "cp28595": "iso88595",
      "iso88596": {
        "type": "_sbcs",
        "chars": " ���¤�������،­�������������؛���؟�ءآأؤإئابةتثجحخدذرزسشصضطظعغ�����ـفقكلمنهوىيًٌٍَُِّْ�������������"
      },
      "cp28596": "iso88596",
      "iso88597": {
        "type": "_sbcs",
        "chars": " ‘’£€₯¦§¨©ͺ«¬­�―°±²³΄΅Ά·ΈΉΊ»Ό½ΎΏΐΑΒΓΔΕΖΗΘΙΚΛΜΝΞΟΠΡ�ΣΤΥΦΧΨΩΪΫάέήίΰαβγδεζηθικλμνξοπρςστυφχψωϊϋόύώ�"
      },
      "cp28597": "iso88597",
      "iso88598": {
        "type": "_sbcs",
        "chars": " �¢£¤¥¦§¨©×«¬­®¯°±²³´µ¶·¸¹÷»¼½¾��������������������������������‗אבגדהוזחטיךכלםמןנסעףפץצקרשת��‎‏�"
      },
      "cp28598": "iso88598",
      "iso88599": {
        "type": "_sbcs",
        "chars": " ¡¢£¤¥¦§¨©ª«¬­®¯°±²³´µ¶·¸¹º»¼½¾¿ÀÁÂÃÄÅÆÇÈÉÊËÌÍÎÏĞÑÒÓÔÕÖ×ØÙÚÛÜİŞßàáâãäåæçèéêëìíîïğñòóôõö÷øùúûüışÿ"
      },
      "cp28599": "iso88599",
      "iso885910": {
        "type": "_sbcs",
        "chars": " ĄĒĢĪĨĶ§ĻĐŠŦŽ­ŪŊ°ąēģīĩķ·ļđšŧž―ūŋĀÁÂÃÄÅÆĮČÉĘËĖÍÎÏÐŅŌÓÔÕÖŨØŲÚÛÜÝÞßāáâãäåæįčéęëėíîïðņōóôõöũøųúûüýþĸ"
      },
      "cp28600": "iso885910",
      "iso885911": {
        "type": "_sbcs",
        "chars": " กขฃคฅฆงจฉชซฌญฎฏฐฑฒณดตถทธนบปผฝพฟภมยรฤลฦวศษสหฬอฮฯะัาำิีึืฺุู����฿เแโใไๅๆ็่้๊๋์ํ๎๏๐๑๒๓๔๕๖๗๘๙๚๛����"
      },
      "cp28601": "iso885911",
      "iso885913": {
        "type": "_sbcs",
        "chars": " ”¢£¤„¦§Ø©Ŗ«¬­®Æ°±²³“µ¶·ø¹ŗ»¼½¾æĄĮĀĆÄÅĘĒČÉŹĖĢĶĪĻŠŃŅÓŌÕÖ×ŲŁŚŪÜŻŽßąįāćäåęēčéźėģķīļšńņóōõö÷ųłśūüżž’"
      },
      "cp28603": "iso885913",
      "iso885914": {
        "type": "_sbcs",
        "chars": " Ḃḃ£ĊċḊ§Ẁ©ẂḋỲ­®ŸḞḟĠġṀṁ¶ṖẁṗẃṠỳẄẅṡÀÁÂÃÄÅÆÇÈÉÊËÌÍÎÏŴÑÒÓÔÕÖṪØÙÚÛÜÝŶßàáâãäåæçèéêëìíîïŵñòóôõöṫøùúûüýŷÿ"
      },
      "cp28604": "iso885914",
      "iso885915": {
        "type": "_sbcs",
        "chars": " ¡¢£€¥Š§š©ª«¬­®¯°±²³Žµ¶·ž¹º»ŒœŸ¿ÀÁÂÃÄÅÆÇÈÉÊËÌÍÎÏÐÑÒÓÔÕÖ×ØÙÚÛÜÝÞßàáâãäåæçèéêëìíîïðñòóôõö÷øùúûüýþÿ"
      },
      "cp28605": "iso885915",
      "iso885916": {
        "type": "_sbcs",
        "chars": " ĄąŁ€„Š§š©Ș«Ź­źŻ°±ČłŽ”¶·žčș»ŒœŸżÀÁÂĂÄĆÆÇÈÉÊËÌÍÎÏĐŃÒÓÔŐÖŚŰÙÚÛÜĘȚßàáâăäćæçèéêëìíîïđńòóôőöśűùúûüęțÿ"
      },
      "cp28606": "iso885916",
      "cp437": {
        "type": "_sbcs",
        "chars": "ÇüéâäàåçêëèïîìÄÅÉæÆôöòûùÿÖÜ¢£¥₧ƒáíóúñÑªº¿⌐¬½¼¡«»░▒▓│┤╡╢╖╕╣║╗╝╜╛┐└┴┬├─┼╞╟╚╔╩╦╠═╬╧╨╤╥╙╘╒╓╫╪┘┌█▄▌▐▀αßΓπΣσµτΦΘΩδ∞φε∩≡±≥≤⌠⌡÷≈°∙·√ⁿ²■ "
      },
      "ibm437": "cp437",
      "csibm437": "cp437",
      "cp737": {
        "type": "_sbcs",
        "chars": "ΑΒΓΔΕΖΗΘΙΚΛΜΝΞΟΠΡΣΤΥΦΧΨΩαβγδεζηθικλμνξοπρσςτυφχψ░▒▓│┤╡╢╖╕╣║╗╝╜╛┐└┴┬├─┼╞╟╚╔╩╦╠═╬╧╨╤╥╙╘╒╓╫╪┘┌█▄▌▐▀ωάέήϊίόύϋώΆΈΉΊΌΎΏ±≥≤ΪΫ÷≈°∙·√ⁿ²■ "
      },
      "ibm737": "cp737",
      "csibm737": "cp737",
      "cp775": {
        "type": "_sbcs",
        "chars": "ĆüéāäģåćłēŖŗīŹÄÅÉæÆōöĢ¢ŚśÖÜø£Ø×¤ĀĪóŻżź”¦©®¬½¼Ł«»░▒▓│┤ĄČĘĖ╣║╗╝ĮŠ┐└┴┬├─┼ŲŪ╚╔╩╦╠═╬Žąčęėįšųūž┘┌█▄▌▐▀ÓßŌŃõÕµńĶķĻļņĒŅ’­±“¾¶§÷„°∙·¹³²■ "
      },
      "ibm775": "cp775",
      "csibm775": "cp775",
      "cp850": {
        "type": "_sbcs",
        "chars": "ÇüéâäàåçêëèïîìÄÅÉæÆôöòûùÿÖÜø£Ø×ƒáíóúñÑªº¿®¬½¼¡«»░▒▓│┤ÁÂÀ©╣║╗╝¢¥┐└┴┬├─┼ãÃ╚╔╩╦╠═╬¤ðÐÊËÈıÍÎÏ┘┌█▄¦Ì▀ÓßÔÒõÕµþÞÚÛÙýÝ¯´­±‗¾¶§÷¸°¨·¹³²■ "
      },
      "ibm850": "cp850",
      "csibm850": "cp850",
      "cp852": {
        "type": "_sbcs",
        "chars": "ÇüéâäůćçłëŐőîŹÄĆÉĹĺôöĽľŚśÖÜŤťŁ×čáíóúĄąŽžĘę¬źČş«»░▒▓│┤ÁÂĚŞ╣║╗╝Żż┐└┴┬├─┼Ăă╚╔╩╦╠═╬¤đĐĎËďŇÍÎě┘┌█▄ŢŮ▀ÓßÔŃńňŠšŔÚŕŰýÝţ´­˝˛ˇ˘§÷¸°¨˙űŘř■ "
      },
      "ibm852": "cp852",
      "csibm852": "cp852",
      "cp855": {
        "type": "_sbcs",
        "chars": "ђЂѓЃёЁєЄѕЅіІїЇјЈљЉњЊћЋќЌўЎџЏюЮъЪаАбБцЦдДеЕфФгГ«»░▒▓│┤хХиИ╣║╗╝йЙ┐└┴┬├─┼кК╚╔╩╦╠═╬¤лЛмМнНоОп┘┌█▄Пя▀ЯрРсСтТуУжЖвВьЬ№­ыЫзЗшШэЭщЩчЧ§■ "
      },
      "ibm855": "cp855",
      "csibm855": "cp855",
      "cp856": {
        "type": "_sbcs",
        "chars": "אבגדהוזחטיךכלםמןנסעףפץצקרשת�£�×����������®¬½¼�«»░▒▓│┤���©╣║╗╝¢¥┐└┴┬├─┼��╚╔╩╦╠═╬¤���������┘┌█▄¦�▀������µ�������¯´­±‗¾¶§÷¸°¨·¹³²■ "
      },
      "ibm856": "cp856",
      "csibm856": "cp856",
      "cp857": {
        "type": "_sbcs",
        "chars": "ÇüéâäàåçêëèïîıÄÅÉæÆôöòûùİÖÜø£ØŞşáíóúñÑĞğ¿®¬½¼¡«»░▒▓│┤ÁÂÀ©╣║╗╝¢¥┐└┴┬├─┼ãÃ╚╔╩╦╠═╬¤ºªÊËÈ�ÍÎÏ┘┌█▄¦Ì▀ÓßÔÒõÕµ�×ÚÛÙìÿ¯´­±�¾¶§÷¸°¨·¹³²■ "
      },
      "ibm857": "cp857",
      "csibm857": "cp857",
      "cp858": {
        "type": "_sbcs",
        "chars": "ÇüéâäàåçêëèïîìÄÅÉæÆôöòûùÿÖÜø£Ø×ƒáíóúñÑªº¿®¬½¼¡«»░▒▓│┤ÁÂÀ©╣║╗╝¢¥┐└┴┬├─┼ãÃ╚╔╩╦╠═╬¤ðÐÊËÈ€ÍÎÏ┘┌█▄¦Ì▀ÓßÔÒõÕµþÞÚÛÙýÝ¯´­±‗¾¶§÷¸°¨·¹³²■ "
      },
      "ibm858": "cp858",
      "csibm858": "cp858",
      "cp860": {
        "type": "_sbcs",
        "chars": "ÇüéâãàÁçêÊèÍÔìÃÂÉÀÈôõòÚùÌÕÜ¢£Ù₧ÓáíóúñÑªº¿Ò¬½¼¡«»░▒▓│┤╡╢╖╕╣║╗╝╜╛┐└┴┬├─┼╞╟╚╔╩╦╠═╬╧╨╤╥╙╘╒╓╫╪┘┌█▄▌▐▀αßΓπΣσµτΦΘΩδ∞φε∩≡±≥≤⌠⌡÷≈°∙·√ⁿ²■ "
      },
      "ibm860": "cp860",
      "csibm860": "cp860",
      "cp861": {
        "type": "_sbcs",
        "chars": "ÇüéâäàåçêëèÐðÞÄÅÉæÆôöþûÝýÖÜø£Ø₧ƒáíóúÁÍÓÚ¿⌐¬½¼¡«»░▒▓│┤╡╢╖╕╣║╗╝╜╛┐└┴┬├─┼╞╟╚╔╩╦╠═╬╧╨╤╥╙╘╒╓╫╪┘┌█▄▌▐▀αßΓπΣσµτΦΘΩδ∞φε∩≡±≥≤⌠⌡÷≈°∙·√ⁿ²■ "
      },
      "ibm861": "cp861",
      "csibm861": "cp861",
      "cp862": {
        "type": "_sbcs",
        "chars": "אבגדהוזחטיךכלםמןנסעףפץצקרשת¢£¥₧ƒáíóúñÑªº¿⌐¬½¼¡«»░▒▓│┤╡╢╖╕╣║╗╝╜╛┐└┴┬├─┼╞╟╚╔╩╦╠═╬╧╨╤╥╙╘╒╓╫╪┘┌█▄▌▐▀αßΓπΣσµτΦΘΩδ∞φε∩≡±≥≤⌠⌡÷≈°∙·√ⁿ²■ "
      },
      "ibm862": "cp862",
      "csibm862": "cp862",
      "cp863": {
        "type": "_sbcs",
        "chars": "ÇüéâÂà¶çêëèïî‗À§ÉÈÊôËÏûù¤ÔÜ¢£ÙÛƒ¦´óú¨¸³¯Î⌐¬½¼¾«»░▒▓│┤╡╢╖╕╣║╗╝╜╛┐└┴┬├─┼╞╟╚╔╩╦╠═╬╧╨╤╥╙╘╒╓╫╪┘┌█▄▌▐▀αßΓπΣσµτΦΘΩδ∞φε∩≡±≥≤⌠⌡÷≈°∙·√ⁿ²■ "
      },
      "ibm863": "cp863",
      "csibm863": "cp863",
      "cp864": {
        "type": "_sbcs",
        "chars": "\0\x07\b	\n\v\f\r\x1B !\"#$٪&'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\\]^_`abcdefghijklmnopqrstuvwxyz{|}~°·∙√▒─│┼┤┬├┴┐┌└┘β∞φ±½¼≈«»ﻷﻸ��ﻻﻼ� ­ﺂ£¤ﺄ��ﺎﺏﺕﺙ،ﺝﺡﺥ٠١٢٣٤٥٦٧٨٩ﻑ؛ﺱﺵﺹ؟¢ﺀﺁﺃﺅﻊﺋﺍﺑﺓﺗﺛﺟﺣﺧﺩﺫﺭﺯﺳﺷﺻﺿﻁﻅﻋﻏ¦¬÷×ﻉـﻓﻗﻛﻟﻣﻧﻫﻭﻯﻳﺽﻌﻎﻍﻡﹽّﻥﻩﻬﻰﻲﻐﻕﻵﻶﻝﻙﻱ■�"
      },
      "ibm864": "cp864",
      "csibm864": "cp864",
      "cp865": {
        "type": "_sbcs",
        "chars": "ÇüéâäàåçêëèïîìÄÅÉæÆôöòûùÿÖÜø£Ø₧ƒáíóúñÑªº¿⌐¬½¼¡«¤░▒▓│┤╡╢╖╕╣║╗╝╜╛┐└┴┬├─┼╞╟╚╔╩╦╠═╬╧╨╤╥╙╘╒╓╫╪┘┌█▄▌▐▀αßΓπΣσµτΦΘΩδ∞φε∩≡±≥≤⌠⌡÷≈°∙·√ⁿ²■ "
      },
      "ibm865": "cp865",
      "csibm865": "cp865",
      "cp866": {
        "type": "_sbcs",
        "chars": "АБВГДЕЖЗИЙКЛМНОПРСТУФХЦЧШЩЪЫЬЭЮЯабвгдежзийклмноп░▒▓│┤╡╢╖╕╣║╗╝╜╛┐└┴┬├─┼╞╟╚╔╩╦╠═╬╧╨╤╥╙╘╒╓╫╪┘┌█▄▌▐▀рстуфхцчшщъыьэюяЁёЄєЇїЎў°∙·√№¤■ "
      },
      "ibm866": "cp866",
      "csibm866": "cp866",
      "cp869": {
        "type": "_sbcs",
        "chars": "������Ά�·¬¦‘’Έ―ΉΊΪΌ��ΎΫ©Ώ²³ά£έήίϊΐόύΑΒΓΔΕΖΗ½ΘΙ«»░▒▓│┤ΚΛΜΝ╣║╗╝ΞΟ┐└┴┬├─┼ΠΡ╚╔╩╦╠═╬ΣΤΥΦΧΨΩαβγ┘┌█▄δε▀ζηθικλμνξοπρσςτ΄­±υφχ§ψ΅°¨ωϋΰώ■ "
      },
      "ibm869": "cp869",
      "csibm869": "cp869",
      "cp922": {
        "type": "_sbcs",
        "chars": " ¡¢£¤¥¦§¨©ª«¬­®‾°±²³´µ¶·¸¹º»¼½¾¿ÀÁÂÃÄÅÆÇÈÉÊËÌÍÎÏŠÑÒÓÔÕÖ×ØÙÚÛÜÝŽßàáâãäåæçèéêëìíîïšñòóôõö÷øùúûüýžÿ"
      },
      "ibm922": "cp922",
      "csibm922": "cp922",
      "cp1046": {
        "type": "_sbcs",
        "chars": "ﺈ×÷ﹱ■│─┐┌└┘ﹹﹻﹽﹿﹷﺊﻰﻳﻲﻎﻏﻐﻶﻸﻺﻼ ¤ﺋﺑﺗﺛﺟﺣ،­ﺧﺳ٠١٢٣٤٥٦٧٨٩ﺷ؛ﺻﺿﻊ؟ﻋءآأؤإئابةتثجحخدذرزسشصضطﻇعغﻌﺂﺄﺎﻓـفقكلمنهوىيًٌٍَُِّْﻗﻛﻟﻵﻷﻹﻻﻣﻧﻬﻩ�"
      },
      "ibm1046": "cp1046",
      "csibm1046": "cp1046",
      "cp1124": {
        "type": "_sbcs",
        "chars": " ЁЂҐЄЅІЇЈЉЊЋЌ­ЎЏАБВГДЕЖЗИЙКЛМНОПРСТУФХЦЧШЩЪЫЬЭЮЯабвгдежзийклмнопрстуфхцчшщъыьэюя№ёђґєѕіїјљњћќ§ўџ"
      },
      "ibm1124": "cp1124",
      "csibm1124": "cp1124",
      "cp1125": {
        "type": "_sbcs",
        "chars": "АБВГДЕЖЗИЙКЛМНОПРСТУФХЦЧШЩЪЫЬЭЮЯабвгдежзийклмноп░▒▓│┤╡╢╖╕╣║╗╝╜╛┐└┴┬├─┼╞╟╚╔╩╦╠═╬╧╨╤╥╙╘╒╓╫╪┘┌█▄▌▐▀рстуфхцчшщъыьэюяЁёҐґЄєІіЇї·√№¤■ "
      },
      "ibm1125": "cp1125",
      "csibm1125": "cp1125",
      "cp1129": {
        "type": "_sbcs",
        "chars": " ¡¢£¤¥¦§œ©ª«¬­®¯°±²³Ÿµ¶·Œ¹º»¼½¾¿ÀÁÂĂÄÅÆÇÈÉÊË̀ÍÎÏĐÑ̉ÓÔƠÖ×ØÙÚÛÜỮßàáâăäåæçèéêë́íîïđṇ̃óôơö÷øùúûüư₫ÿ"
      },
      "ibm1129": "cp1129",
      "csibm1129": "cp1129",
      "cp1133": {
        "type": "_sbcs",
        "chars": " ກຂຄງຈສຊຍດຕຖທນບປຜຝພຟມຢຣລວຫອຮ���ຯະາຳິີຶືຸູຼັົຽ���ເແໂໃໄ່້໊໋໌ໍໆ�ໜໝ₭����������������໐໑໒໓໔໕໖໗໘໙��¢¬¦�"
      },
      "ibm1133": "cp1133",
      "csibm1133": "cp1133",
      "cp1161": {
        "type": "_sbcs",
        "chars": "��������������������������������่กขฃคฅฆงจฉชซฌญฎฏฐฑฒณดตถทธนบปผฝพฟภมยรฤลฦวศษสหฬอฮฯะัาำิีึืฺุู้๊๋€฿เแโใไๅๆ็่้๊๋์ํ๎๏๐๑๒๓๔๕๖๗๘๙๚๛¢¬¦ "
      },
      "ibm1161": "cp1161",
      "csibm1161": "cp1161",
      "cp1162": {
        "type": "_sbcs",
        "chars": "€…‘’“”•–— กขฃคฅฆงจฉชซฌญฎฏฐฑฒณดตถทธนบปผฝพฟภมยรฤลฦวศษสหฬอฮฯะัาำิีึืฺุู����฿เแโใไๅๆ็่้๊๋์ํ๎๏๐๑๒๓๔๕๖๗๘๙๚๛����"
      },
      "ibm1162": "cp1162",
      "csibm1162": "cp1162",
      "cp1163": {
        "type": "_sbcs",
        "chars": " ¡¢£€¥¦§œ©ª«¬­®¯°±²³Ÿµ¶·Œ¹º»¼½¾¿ÀÁÂĂÄÅÆÇÈÉÊË̀ÍÎÏĐÑ̉ÓÔƠÖ×ØÙÚÛÜỮßàáâăäåæçèéêë́íîïđṇ̃óôơö÷øùúûüư₫ÿ"
      },
      "ibm1163": "cp1163",
      "csibm1163": "cp1163",
      "maccroatian": {
        "type": "_sbcs",
        "chars": "ÄÅÇÉÑÖÜáàâäãåçéèêëíìîïñóòôöõúùûü†°¢£§•¶ß®Š™´¨≠ŽØ∞±≤≥∆µ∂∑∏š∫ªºΩžø¿¡¬√ƒ≈Ć«Č… ÀÃÕŒœĐ—“”‘’÷◊�©⁄¤‹›Æ»–·‚„‰ÂćÁčÈÍÎÏÌÓÔđÒÚÛÙıˆ˜¯πË˚¸Êæˇ"
      },
      "maccyrillic": {
        "type": "_sbcs",
        "chars": "АБВГДЕЖЗИЙКЛМНОПРСТУФХЦЧШЩЪЫЬЭЮЯ†°¢£§•¶І®©™Ђђ≠Ѓѓ∞±≤≥іµ∂ЈЄєЇїЉљЊњјЅ¬√ƒ≈∆«»… ЋћЌќѕ–—“”‘’÷„ЎўЏџ№Ёёяабвгдежзийклмнопрстуфхцчшщъыьэю¤"
      },
      "macgreek": {
        "type": "_sbcs",
        "chars": "Ä¹²É³ÖÜ΅àâä΄¨çéèêë£™îï•½‰ôö¦­ùûü†ΓΔΘΛΞΠß®©ΣΪ§≠°·Α±≤≥¥ΒΕΖΗΙΚΜΦΫΨΩάΝ¬ΟΡ≈Τ«»… ΥΧΆΈœ–―“”‘’÷ΉΊΌΎέήίόΏύαβψδεφγηιξκλμνοπώρστθωςχυζϊϋΐΰ�"
      },
      "maciceland": {
        "type": "_sbcs",
        "chars": "ÄÅÇÉÑÖÜáàâäãåçéèêëíìîïñóòôöõúùûüÝ°¢£§•¶ß®©™´¨≠ÆØ∞±≤≥¥µ∂∑∏π∫ªºΩæø¿¡¬√ƒ≈∆«»… ÀÃÕŒœ–—“”‘’÷◊ÿŸ⁄¤ÐðÞþý·‚„‰ÂÊÁËÈÍÎÏÌÓÔ�ÒÚÛÙıˆ˜¯˘˙˚¸˝˛ˇ"
      },
      "macroman": {
        "type": "_sbcs",
        "chars": "ÄÅÇÉÑÖÜáàâäãåçéèêëíìîïñóòôöõúùûü†°¢£§•¶ß®©™´¨≠ÆØ∞±≤≥¥µ∂∑∏π∫ªºΩæø¿¡¬√ƒ≈∆«»… ÀÃÕŒœ–—“”‘’÷◊ÿŸ⁄¤‹›ﬁﬂ‡·‚„‰ÂÊÁËÈÍÎÏÌÓÔ�ÒÚÛÙıˆ˜¯˘˙˚¸˝˛ˇ"
      },
      "macromania": {
        "type": "_sbcs",
        "chars": "ÄÅÇÉÑÖÜáàâäãåçéèêëíìîïñóòôöõúùûü†°¢£§•¶ß®©™´¨≠ĂŞ∞±≤≥¥µ∂∑∏π∫ªºΩăş¿¡¬√ƒ≈∆«»… ÀÃÕŒœ–—“”‘’÷◊ÿŸ⁄¤‹›Ţţ‡·‚„‰ÂÊÁËÈÍÎÏÌÓÔ�ÒÚÛÙıˆ˜¯˘˙˚¸˝˛ˇ"
      },
      "macthai": {
        "type": "_sbcs",
        "chars": "«»…“”�•‘’� กขฃคฅฆงจฉชซฌญฎฏฐฑฒณดตถทธนบปผฝพฟภมยรฤลฦวศษสหฬอฮฯะัาำิีึืฺุู\uFEFF​–—฿เแโใไๅๆ็่้๊๋์ํ™๏๐๑๒๓๔๕๖๗๘๙®©����"
      },
      "macturkish": {
        "type": "_sbcs",
        "chars": "ÄÅÇÉÑÖÜáàâäãåçéèêëíìîïñóòôöõúùûü†°¢£§•¶ß®©™´¨≠ÆØ∞±≤≥¥µ∂∑∏π∫ªºΩæø¿¡¬√ƒ≈∆«»… ÀÃÕŒœ–—“”‘’÷◊ÿŸĞğİıŞş‡·‚„‰ÂÊÁËÈÍÎÏÌÓÔ�ÒÚÛÙ�ˆ˜¯˘˙˚¸˝˛ˇ"
      },
      "macukraine": {
        "type": "_sbcs",
        "chars": "АБВГДЕЖЗИЙКЛМНОПРСТУФХЦЧШЩЪЫЬЭЮЯ†°Ґ£§•¶І®©™Ђђ≠Ѓѓ∞±≤≥іµґЈЄєЇїЉљЊњјЅ¬√ƒ≈∆«»… ЋћЌќѕ–—“”‘’÷„ЎўЏџ№Ёёяабвгдежзийклмнопрстуфхцчшщъыьэю¤"
      },
      "koi8r": {
        "type": "_sbcs",
        "chars": "─│┌┐└┘├┤┬┴┼▀▄█▌▐░▒▓⌠■∙√≈≤≥ ⌡°²·÷═║╒ё╓╔╕╖╗╘╙╚╛╜╝╞╟╠╡Ё╢╣╤╥╦╧╨╩╪╫╬©юабцдефгхийклмнопярстужвьызшэщчъЮАБЦДЕФГХИЙКЛМНОПЯРСТУЖВЬЫЗШЭЩЧЪ"
      },
      "koi8u": {
        "type": "_sbcs",
        "chars": "─│┌┐└┘├┤┬┴┼▀▄█▌▐░▒▓⌠■∙√≈≤≥ ⌡°²·÷═║╒ёє╔ії╗╘╙╚╛ґ╝╞╟╠╡ЁЄ╣ІЇ╦╧╨╩╪Ґ╬©юабцдефгхийклмнопярстужвьызшэщчъЮАБЦДЕФГХИЙКЛМНОПЯРСТУЖВЬЫЗШЭЩЧЪ"
      },
      "koi8ru": {
        "type": "_sbcs",
        "chars": "─│┌┐└┘├┤┬┴┼▀▄█▌▐░▒▓⌠■∙√≈≤≥ ⌡°²·÷═║╒ёє╔ії╗╘╙╚╛ґў╞╟╠╡ЁЄ╣ІЇ╦╧╨╩╪ҐЎ©юабцдефгхийклмнопярстужвьызшэщчъЮАБЦДЕФГХИЙКЛМНОПЯРСТУЖВЬЫЗШЭЩЧЪ"
      },
      "koi8t": {
        "type": "_sbcs",
        "chars": "қғ‚Ғ„…†‡�‰ҳ‹ҲҷҶ�Қ‘’“”•–—�™�›�����ӯӮё¤ӣ¦§���«¬­®�°±²Ё�Ӣ¶·�№�»���©юабцдефгхийклмнопярстужвьызшэщчъЮАБЦДЕФГХИЙКЛМНОПЯРСТУЖВЬЫЗШЭЩЧЪ"
      },
      "armscii8": {
        "type": "_sbcs",
        "chars": " �և։)(»«—.՝,-֊…՜՛՞ԱաԲբԳգԴդԵեԶզԷէԸըԹթԺժԻիԼլԽխԾծԿկՀհՁձՂղՃճՄմՅյՆնՇշՈոՉչՊպՋջՌռՍսՎվՏտՐրՑցՒւՓփՔքՕօՖֆ՚�"
      },
      "rk1048": {
        "type": "_sbcs",
        "chars": "ЂЃ‚ѓ„…†‡€‰Љ‹ЊҚҺЏђ‘’“”•–—�™љ›њқһџ ҰұӘ¤Ө¦§Ё©Ғ«¬­®Ү°±Ііөµ¶·ё№ғ»әҢңүАБВГДЕЖЗИЙКЛМНОПРСТУФХЦЧШЩЪЫЬЭЮЯабвгдежзийклмнопрстуфхцчшщъыьэюя"
      },
      "tcvn": {
        "type": "_sbcs",
        "chars": "\0ÚỤỪỬỮ\x07\b	\n\v\f\rỨỰỲỶỸÝỴ\x1B !\"#$%&'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\\]^_`abcdefghijklmnopqrstuvwxyz{|}~ÀẢÃÁẠẶẬÈẺẼÉẸỆÌỈĨÍỊÒỎÕÓỌỘỜỞỠỚỢÙỦŨ ĂÂÊÔƠƯĐăâêôơưđẶ̀̀̉̃́àảãáạẲằẳẵắẴẮẦẨẪẤỀặầẩẫấậèỂẻẽéẹềểễếệìỉỄẾỒĩíịòỔỏõóọồổỗốộờởỡớợùỖủũúụừửữứựỳỷỹýỵỐ"
      },
      "georgianacademy": {
        "type": "_sbcs",
        "chars": "‚ƒ„…†‡ˆ‰Š‹Œ‘’“”•–—˜™š›œŸ ¡¢£¤¥¦§¨©ª«¬­®¯°±²³´µ¶·¸¹º»¼½¾¿აბგდევზთიკლმნოპჟრსტუფქღყშჩცძწჭხჯჰჱჲჳჴჵჶçèéêëìíîïðñòóôõö÷øùúûüýþÿ"
      },
      "georgianps": {
        "type": "_sbcs",
        "chars": "‚ƒ„…†‡ˆ‰Š‹Œ‘’“”•–—˜™š›œŸ ¡¢£¤¥¦§¨©ª«¬­®¯°±²³´µ¶·¸¹º»¼½¾¿აბგდევზჱთიკლმნჲოპჟრსტჳუფქღყშჩცძწჭხჴჯჰჵæçèéêëìíîïðñòóôõö÷øùúûüýþÿ"
      },
      "pt154": {
        "type": "_sbcs",
        "chars": "ҖҒӮғ„…ҶҮҲүҠӢҢҚҺҸҗ‘’“”•–—ҳҷҡӣңқһҹ ЎўЈӨҘҰ§Ё©Ә«¬ӯ®Ҝ°ұІіҙө¶·ё№ә»јҪҫҝАБВГДЕЖЗИЙКЛМНОПРСТУФХЦЧШЩЪЫЬЭЮЯабвгдежзийклмнопрстуфхцчшщъыьэюя"
      },
      "viscii": {
        "type": "_sbcs",
        "chars": "\0ẲẴẪ\x07\b	\n\v\f\rỶỸ\x1BỴ !\"#$%&'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\\]^_`abcdefghijklmnopqrstuvwxyz{|}~ẠẮẰẶẤẦẨẬẼẸẾỀỂỄỆỐỒỔỖỘỢỚỜỞỊỎỌỈỦŨỤỲÕắằặấầẩậẽẹếềểễệốồổỗỠƠộờởịỰỨỪỬơớƯÀÁÂÃẢĂẳẵÈÉÊẺÌÍĨỳĐứÒÓÔạỷừửÙÚỹỵÝỡưàáâãảăữẫèéêẻìíĩỉđựòóôõỏọụùúũủýợỮ"
      },
      "iso646cn": {
        "type": "_sbcs",
        "chars": "\0\x07\b	\n\v\f\r\x1B !\"#¥%&'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\\]^_`abcdefghijklmnopqrstuvwxyz{|}‾��������������������������������������������������������������������������������������������������������������������������������"
      },
      "iso646jp": {
        "type": "_sbcs",
        "chars": "\0\x07\b	\n\v\f\r\x1B !\"#$%&'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[¥]^_`abcdefghijklmnopqrstuvwxyz{|}‾��������������������������������������������������������������������������������������������������������������������������������"
      },
      "hproman8": {
        "type": "_sbcs",
        "chars": " ÀÂÈÊËÎÏ´ˋˆ¨˜ÙÛ₤¯Ýý°ÇçÑñ¡¿¤£¥§ƒ¢âêôûáéóúàèòùäëöüÅîØÆåíøæÄìÖÜÉïßÔÁÃãÐðÍÌÓÒÕõŠšÚŸÿÞþ·µ¶¾—¼½ªº«■»±�"
      },
      "macintosh": {
        "type": "_sbcs",
        "chars": "ÄÅÇÉÑÖÜáàâäãåçéèêëíìîïñóòôöõúùûü†°¢£§•¶ß®©™´¨≠ÆØ∞±≤≥¥µ∂∑∏π∫ªºΩæø¿¡¬√ƒ≈∆«»… ÀÃÕŒœ–—“”‘’÷◊ÿŸ⁄¤‹›ﬁﬂ‡·‚„‰ÂÊÁËÈÍÎÏÌÓÔ�ÒÚÛÙıˆ˜¯˘˙˚¸˝˛ˇ"
      },
      "ascii": {
        "type": "_sbcs",
        "chars": "��������������������������������������������������������������������������������������������������������������������������������"
      },
      "tis620": {
        "type": "_sbcs",
        "chars": "���������������������������������กขฃคฅฆงจฉชซฌญฎฏฐฑฒณดตถทธนบปผฝพฟภมยรฤลฦวศษสหฬอฮฯะัาำิีึืฺุู����฿เแโใไๅๆ็่้๊๋์ํ๎๏๐๑๒๓๔๕๖๗๘๙๚๛����"
      }
    };
  }
});

// ../../node_modules/encoding/node_modules/iconv-lite/encodings/dbcs-codec.js
var require_dbcs_codec = __commonJS({
  "../../node_modules/encoding/node_modules/iconv-lite/encodings/dbcs-codec.js"(exports) {
    "use strict";
    var Buffer22 = require_safer().Buffer;
    exports._dbcs = DBCSCodec;
    var UNASSIGNED = -1;
    var GB18030_CODE = -2;
    var SEQ_START = -10;
    var NODE_START = -1e3;
    var UNASSIGNED_NODE = new Array(256);
    var DEF_CHAR = -1;
    for (i = 0; i < 256; i++)
      UNASSIGNED_NODE[i] = UNASSIGNED;
    var i;
    function DBCSCodec(codecOptions, iconv) {
      this.encodingName = codecOptions.encodingName;
      if (!codecOptions)
        throw new Error("DBCS codec is called without the data.");
      if (!codecOptions.table)
        throw new Error("Encoding '" + this.encodingName + "' has no data.");
      var mappingTable = codecOptions.table();
      this.decodeTables = [];
      this.decodeTables[0] = UNASSIGNED_NODE.slice(0);
      this.decodeTableSeq = [];
      for (var i2 = 0; i2 < mappingTable.length; i2++)
        this._addDecodeChunk(mappingTable[i2]);
      if (typeof codecOptions.gb18030 === "function") {
        this.gb18030 = codecOptions.gb18030();
        var commonThirdByteNodeIdx = this.decodeTables.length;
        this.decodeTables.push(UNASSIGNED_NODE.slice(0));
        var commonFourthByteNodeIdx = this.decodeTables.length;
        this.decodeTables.push(UNASSIGNED_NODE.slice(0));
        var firstByteNode = this.decodeTables[0];
        for (var i2 = 129; i2 <= 254; i2++) {
          var secondByteNode = this.decodeTables[NODE_START - firstByteNode[i2]];
          for (var j = 48; j <= 57; j++) {
            if (secondByteNode[j] === UNASSIGNED) {
              secondByteNode[j] = NODE_START - commonThirdByteNodeIdx;
            } else if (secondByteNode[j] > NODE_START) {
              throw new Error("gb18030 decode tables conflict at byte 2");
            }
            var thirdByteNode = this.decodeTables[NODE_START - secondByteNode[j]];
            for (var k = 129; k <= 254; k++) {
              if (thirdByteNode[k] === UNASSIGNED) {
                thirdByteNode[k] = NODE_START - commonFourthByteNodeIdx;
              } else if (thirdByteNode[k] === NODE_START - commonFourthByteNodeIdx) {
                continue;
              } else if (thirdByteNode[k] > NODE_START) {
                throw new Error("gb18030 decode tables conflict at byte 3");
              }
              var fourthByteNode = this.decodeTables[NODE_START - thirdByteNode[k]];
              for (var l = 48; l <= 57; l++) {
                if (fourthByteNode[l] === UNASSIGNED)
                  fourthByteNode[l] = GB18030_CODE;
              }
            }
          }
        }
      }
      this.defaultCharUnicode = iconv.defaultCharUnicode;
      this.encodeTable = [];
      this.encodeTableSeq = [];
      var skipEncodeChars = {};
      if (codecOptions.encodeSkipVals)
        for (var i2 = 0; i2 < codecOptions.encodeSkipVals.length; i2++) {
          var val = codecOptions.encodeSkipVals[i2];
          if (typeof val === "number")
            skipEncodeChars[val] = true;
          else
            for (var j = val.from; j <= val.to; j++)
              skipEncodeChars[j] = true;
        }
      this._fillEncodeTable(0, 0, skipEncodeChars);
      if (codecOptions.encodeAdd) {
        for (var uChar in codecOptions.encodeAdd)
          if (Object.prototype.hasOwnProperty.call(codecOptions.encodeAdd, uChar))
            this._setEncodeChar(uChar.charCodeAt(0), codecOptions.encodeAdd[uChar]);
      }
      this.defCharSB = this.encodeTable[0][iconv.defaultCharSingleByte.charCodeAt(0)];
      if (this.defCharSB === UNASSIGNED)
        this.defCharSB = this.encodeTable[0]["?"];
      if (this.defCharSB === UNASSIGNED)
        this.defCharSB = "?".charCodeAt(0);
    }
    DBCSCodec.prototype.encoder = DBCSEncoder;
    DBCSCodec.prototype.decoder = DBCSDecoder;
    DBCSCodec.prototype._getDecodeTrieNode = function(addr) {
      var bytes = [];
      for (; addr > 0; addr >>>= 8)
        bytes.push(addr & 255);
      if (bytes.length == 0)
        bytes.push(0);
      var node = this.decodeTables[0];
      for (var i2 = bytes.length - 1; i2 > 0; i2--) {
        var val = node[bytes[i2]];
        if (val == UNASSIGNED) {
          node[bytes[i2]] = NODE_START - this.decodeTables.length;
          this.decodeTables.push(node = UNASSIGNED_NODE.slice(0));
        } else if (val <= NODE_START) {
          node = this.decodeTables[NODE_START - val];
        } else
          throw new Error("Overwrite byte in " + this.encodingName + ", addr: " + addr.toString(16));
      }
      return node;
    };
    DBCSCodec.prototype._addDecodeChunk = function(chunk2) {
      var curAddr = parseInt(chunk2[0], 16);
      var writeTable = this._getDecodeTrieNode(curAddr);
      curAddr = curAddr & 255;
      for (var k = 1; k < chunk2.length; k++) {
        var part = chunk2[k];
        if (typeof part === "string") {
          for (var l = 0; l < part.length; ) {
            var code2 = part.charCodeAt(l++);
            if (55296 <= code2 && code2 < 56320) {
              var codeTrail = part.charCodeAt(l++);
              if (56320 <= codeTrail && codeTrail < 57344)
                writeTable[curAddr++] = 65536 + (code2 - 55296) * 1024 + (codeTrail - 56320);
              else
                throw new Error("Incorrect surrogate pair in " + this.encodingName + " at chunk " + chunk2[0]);
            } else if (4080 < code2 && code2 <= 4095) {
              var len = 4095 - code2 + 2;
              var seq3 = [];
              for (var m = 0; m < len; m++)
                seq3.push(part.charCodeAt(l++));
              writeTable[curAddr++] = SEQ_START - this.decodeTableSeq.length;
              this.decodeTableSeq.push(seq3);
            } else
              writeTable[curAddr++] = code2;
          }
        } else if (typeof part === "number") {
          var charCode = writeTable[curAddr - 1] + 1;
          for (var l = 0; l < part; l++)
            writeTable[curAddr++] = charCode++;
        } else
          throw new Error("Incorrect type '" + typeof part + "' given in " + this.encodingName + " at chunk " + chunk2[0]);
      }
      if (curAddr > 255)
        throw new Error("Incorrect chunk in " + this.encodingName + " at addr " + chunk2[0] + ": too long" + curAddr);
    };
    DBCSCodec.prototype._getEncodeBucket = function(uCode) {
      var high = uCode >> 8;
      if (this.encodeTable[high] === void 0)
        this.encodeTable[high] = UNASSIGNED_NODE.slice(0);
      return this.encodeTable[high];
    };
    DBCSCodec.prototype._setEncodeChar = function(uCode, dbcsCode) {
      var bucket = this._getEncodeBucket(uCode);
      var low = uCode & 255;
      if (bucket[low] <= SEQ_START)
        this.encodeTableSeq[SEQ_START - bucket[low]][DEF_CHAR] = dbcsCode;
      else if (bucket[low] == UNASSIGNED)
        bucket[low] = dbcsCode;
    };
    DBCSCodec.prototype._setEncodeSequence = function(seq3, dbcsCode) {
      var uCode = seq3[0];
      var bucket = this._getEncodeBucket(uCode);
      var low = uCode & 255;
      var node;
      if (bucket[low] <= SEQ_START) {
        node = this.encodeTableSeq[SEQ_START - bucket[low]];
      } else {
        node = {};
        if (bucket[low] !== UNASSIGNED)
          node[DEF_CHAR] = bucket[low];
        bucket[low] = SEQ_START - this.encodeTableSeq.length;
        this.encodeTableSeq.push(node);
      }
      for (var j = 1; j < seq3.length - 1; j++) {
        var oldVal = node[uCode];
        if (typeof oldVal === "object")
          node = oldVal;
        else {
          node = node[uCode] = {};
          if (oldVal !== void 0)
            node[DEF_CHAR] = oldVal;
        }
      }
      uCode = seq3[seq3.length - 1];
      node[uCode] = dbcsCode;
    };
    DBCSCodec.prototype._fillEncodeTable = function(nodeIdx, prefix, skipEncodeChars) {
      var node = this.decodeTables[nodeIdx];
      var hasValues = false;
      var subNodeEmpty = {};
      for (var i2 = 0; i2 < 256; i2++) {
        var uCode = node[i2];
        var mbCode = prefix + i2;
        if (skipEncodeChars[mbCode])
          continue;
        if (uCode >= 0) {
          this._setEncodeChar(uCode, mbCode);
          hasValues = true;
        } else if (uCode <= NODE_START) {
          var subNodeIdx = NODE_START - uCode;
          if (!subNodeEmpty[subNodeIdx]) {
            var newPrefix = mbCode << 8 >>> 0;
            if (this._fillEncodeTable(subNodeIdx, newPrefix, skipEncodeChars))
              hasValues = true;
            else
              subNodeEmpty[subNodeIdx] = true;
          }
        } else if (uCode <= SEQ_START) {
          this._setEncodeSequence(this.decodeTableSeq[SEQ_START - uCode], mbCode);
          hasValues = true;
        }
      }
      return hasValues;
    };
    function DBCSEncoder(options, codec) {
      this.leadSurrogate = -1;
      this.seqObj = void 0;
      this.encodeTable = codec.encodeTable;
      this.encodeTableSeq = codec.encodeTableSeq;
      this.defaultCharSingleByte = codec.defCharSB;
      this.gb18030 = codec.gb18030;
    }
    DBCSEncoder.prototype.write = function(str) {
      var newBuf = Buffer22.alloc(str.length * (this.gb18030 ? 4 : 3)), leadSurrogate = this.leadSurrogate, seqObj = this.seqObj, nextChar = -1, i2 = 0, j = 0;
      while (true) {
        if (nextChar === -1) {
          if (i2 == str.length)
            break;
          var uCode = str.charCodeAt(i2++);
        } else {
          var uCode = nextChar;
          nextChar = -1;
        }
        if (55296 <= uCode && uCode < 57344) {
          if (uCode < 56320) {
            if (leadSurrogate === -1) {
              leadSurrogate = uCode;
              continue;
            } else {
              leadSurrogate = uCode;
              uCode = UNASSIGNED;
            }
          } else {
            if (leadSurrogate !== -1) {
              uCode = 65536 + (leadSurrogate - 55296) * 1024 + (uCode - 56320);
              leadSurrogate = -1;
            } else {
              uCode = UNASSIGNED;
            }
          }
        } else if (leadSurrogate !== -1) {
          nextChar = uCode;
          uCode = UNASSIGNED;
          leadSurrogate = -1;
        }
        var dbcsCode = UNASSIGNED;
        if (seqObj !== void 0 && uCode != UNASSIGNED) {
          var resCode = seqObj[uCode];
          if (typeof resCode === "object") {
            seqObj = resCode;
            continue;
          } else if (typeof resCode == "number") {
            dbcsCode = resCode;
          } else if (resCode == void 0) {
            resCode = seqObj[DEF_CHAR];
            if (resCode !== void 0) {
              dbcsCode = resCode;
              nextChar = uCode;
            } else {
            }
          }
          seqObj = void 0;
        } else if (uCode >= 0) {
          var subtable = this.encodeTable[uCode >> 8];
          if (subtable !== void 0)
            dbcsCode = subtable[uCode & 255];
          if (dbcsCode <= SEQ_START) {
            seqObj = this.encodeTableSeq[SEQ_START - dbcsCode];
            continue;
          }
          if (dbcsCode == UNASSIGNED && this.gb18030) {
            var idx = findIdx(this.gb18030.uChars, uCode);
            if (idx != -1) {
              var dbcsCode = this.gb18030.gbChars[idx] + (uCode - this.gb18030.uChars[idx]);
              newBuf[j++] = 129 + Math.floor(dbcsCode / 12600);
              dbcsCode = dbcsCode % 12600;
              newBuf[j++] = 48 + Math.floor(dbcsCode / 1260);
              dbcsCode = dbcsCode % 1260;
              newBuf[j++] = 129 + Math.floor(dbcsCode / 10);
              dbcsCode = dbcsCode % 10;
              newBuf[j++] = 48 + dbcsCode;
              continue;
            }
          }
        }
        if (dbcsCode === UNASSIGNED)
          dbcsCode = this.defaultCharSingleByte;
        if (dbcsCode < 256) {
          newBuf[j++] = dbcsCode;
        } else if (dbcsCode < 65536) {
          newBuf[j++] = dbcsCode >> 8;
          newBuf[j++] = dbcsCode & 255;
        } else if (dbcsCode < 16777216) {
          newBuf[j++] = dbcsCode >> 16;
          newBuf[j++] = dbcsCode >> 8 & 255;
          newBuf[j++] = dbcsCode & 255;
        } else {
          newBuf[j++] = dbcsCode >>> 24;
          newBuf[j++] = dbcsCode >>> 16 & 255;
          newBuf[j++] = dbcsCode >>> 8 & 255;
          newBuf[j++] = dbcsCode & 255;
        }
      }
      this.seqObj = seqObj;
      this.leadSurrogate = leadSurrogate;
      return newBuf.slice(0, j);
    };
    DBCSEncoder.prototype.end = function() {
      if (this.leadSurrogate === -1 && this.seqObj === void 0)
        return;
      var newBuf = Buffer22.alloc(10), j = 0;
      if (this.seqObj) {
        var dbcsCode = this.seqObj[DEF_CHAR];
        if (dbcsCode !== void 0) {
          if (dbcsCode < 256) {
            newBuf[j++] = dbcsCode;
          } else {
            newBuf[j++] = dbcsCode >> 8;
            newBuf[j++] = dbcsCode & 255;
          }
        } else {
        }
        this.seqObj = void 0;
      }
      if (this.leadSurrogate !== -1) {
        newBuf[j++] = this.defaultCharSingleByte;
        this.leadSurrogate = -1;
      }
      return newBuf.slice(0, j);
    };
    DBCSEncoder.prototype.findIdx = findIdx;
    function DBCSDecoder(options, codec) {
      this.nodeIdx = 0;
      this.prevBytes = [];
      this.decodeTables = codec.decodeTables;
      this.decodeTableSeq = codec.decodeTableSeq;
      this.defaultCharUnicode = codec.defaultCharUnicode;
      this.gb18030 = codec.gb18030;
    }
    DBCSDecoder.prototype.write = function(buf) {
      var newBuf = Buffer22.alloc(buf.length * 2), nodeIdx = this.nodeIdx, prevBytes = this.prevBytes, prevOffset = this.prevBytes.length, seqStart = -this.prevBytes.length, uCode;
      for (var i2 = 0, j = 0; i2 < buf.length; i2++) {
        var curByte = i2 >= 0 ? buf[i2] : prevBytes[i2 + prevOffset];
        var uCode = this.decodeTables[nodeIdx][curByte];
        if (uCode >= 0) {
        } else if (uCode === UNASSIGNED) {
          uCode = this.defaultCharUnicode.charCodeAt(0);
          i2 = seqStart;
        } else if (uCode === GB18030_CODE) {
          if (i2 >= 3) {
            var ptr = (buf[i2 - 3] - 129) * 12600 + (buf[i2 - 2] - 48) * 1260 + (buf[i2 - 1] - 129) * 10 + (curByte - 48);
          } else {
            var ptr = (prevBytes[i2 - 3 + prevOffset] - 129) * 12600 + ((i2 - 2 >= 0 ? buf[i2 - 2] : prevBytes[i2 - 2 + prevOffset]) - 48) * 1260 + ((i2 - 1 >= 0 ? buf[i2 - 1] : prevBytes[i2 - 1 + prevOffset]) - 129) * 10 + (curByte - 48);
          }
          var idx = findIdx(this.gb18030.gbChars, ptr);
          uCode = this.gb18030.uChars[idx] + ptr - this.gb18030.gbChars[idx];
        } else if (uCode <= NODE_START) {
          nodeIdx = NODE_START - uCode;
          continue;
        } else if (uCode <= SEQ_START) {
          var seq3 = this.decodeTableSeq[SEQ_START - uCode];
          for (var k = 0; k < seq3.length - 1; k++) {
            uCode = seq3[k];
            newBuf[j++] = uCode & 255;
            newBuf[j++] = uCode >> 8;
          }
          uCode = seq3[seq3.length - 1];
        } else
          throw new Error("iconv-lite internal error: invalid decoding table value " + uCode + " at " + nodeIdx + "/" + curByte);
        if (uCode >= 65536) {
          uCode -= 65536;
          var uCodeLead = 55296 | uCode >> 10;
          newBuf[j++] = uCodeLead & 255;
          newBuf[j++] = uCodeLead >> 8;
          uCode = 56320 | uCode & 1023;
        }
        newBuf[j++] = uCode & 255;
        newBuf[j++] = uCode >> 8;
        nodeIdx = 0;
        seqStart = i2 + 1;
      }
      this.nodeIdx = nodeIdx;
      this.prevBytes = seqStart >= 0 ? Array.prototype.slice.call(buf, seqStart) : prevBytes.slice(seqStart + prevOffset).concat(Array.prototype.slice.call(buf));
      return newBuf.slice(0, j).toString("ucs2");
    };
    DBCSDecoder.prototype.end = function() {
      var ret = "";
      while (this.prevBytes.length > 0) {
        ret += this.defaultCharUnicode;
        var bytesArr = this.prevBytes.slice(1);
        this.prevBytes = [];
        this.nodeIdx = 0;
        if (bytesArr.length > 0)
          ret += this.write(bytesArr);
      }
      this.prevBytes = [];
      this.nodeIdx = 0;
      return ret;
    };
    function findIdx(table, val) {
      if (table[0] > val)
        return -1;
      var l = 0, r = table.length;
      while (l < r - 1) {
        var mid = l + (r - l + 1 >> 1);
        if (table[mid] <= val)
          l = mid;
        else
          r = mid;
      }
      return l;
    }
  }
});

// ../../node_modules/encoding/node_modules/iconv-lite/encodings/tables/shiftjis.json
var require_shiftjis = __commonJS({
  "../../node_modules/encoding/node_modules/iconv-lite/encodings/tables/shiftjis.json"(exports, module) {
    module.exports = [
      ["0", "\0", 128],
      ["a1", "｡", 62],
      ["8140", "　、。，．・：；？！゛゜´｀¨＾￣＿ヽヾゝゞ〃仝々〆〇ー―‐／＼～∥｜…‥‘’“”（）〔〕［］｛｝〈", 9, "＋－±×"],
      ["8180", "÷＝≠＜＞≦≧∞∴♂♀°′″℃￥＄￠￡％＃＆＊＠§☆★○●◎◇◆□■△▲▽▼※〒→←↑↓〓"],
      ["81b8", "∈∋⊆⊇⊂⊃∪∩"],
      ["81c8", "∧∨￢⇒⇔∀∃"],
      ["81da", "∠⊥⌒∂∇≡≒≪≫√∽∝∵∫∬"],
      ["81f0", "Å‰♯♭♪†‡¶"],
      ["81fc", "◯"],
      ["824f", "０", 9],
      ["8260", "Ａ", 25],
      ["8281", "ａ", 25],
      ["829f", "ぁ", 82],
      ["8340", "ァ", 62],
      ["8380", "ム", 22],
      ["839f", "Α", 16, "Σ", 6],
      ["83bf", "α", 16, "σ", 6],
      ["8440", "А", 5, "ЁЖ", 25],
      ["8470", "а", 5, "ёж", 7],
      ["8480", "о", 17],
      ["849f", "─│┌┐┘└├┬┤┴┼━┃┏┓┛┗┣┳┫┻╋┠┯┨┷┿┝┰┥┸╂"],
      ["8740", "①", 19, "Ⅰ", 9],
      ["875f", "㍉㌔㌢㍍㌘㌧㌃㌶㍑㍗㌍㌦㌣㌫㍊㌻㎜㎝㎞㎎㎏㏄㎡"],
      ["877e", "㍻"],
      ["8780", "〝〟№㏍℡㊤", 4, "㈱㈲㈹㍾㍽㍼≒≡∫∮∑√⊥∠∟⊿∵∩∪"],
      ["889f", "亜唖娃阿哀愛挨姶逢葵茜穐悪握渥旭葦芦鯵梓圧斡扱宛姐虻飴絢綾鮎或粟袷安庵按暗案闇鞍杏以伊位依偉囲夷委威尉惟意慰易椅為畏異移維緯胃萎衣謂違遺医井亥域育郁磯一壱溢逸稲茨芋鰯允印咽員因姻引飲淫胤蔭"],
      ["8940", "院陰隠韻吋右宇烏羽迂雨卯鵜窺丑碓臼渦嘘唄欝蔚鰻姥厩浦瓜閏噂云運雲荏餌叡営嬰影映曳栄永泳洩瑛盈穎頴英衛詠鋭液疫益駅悦謁越閲榎厭円"],
      ["8980", "園堰奄宴延怨掩援沿演炎焔煙燕猿縁艶苑薗遠鉛鴛塩於汚甥凹央奥往応押旺横欧殴王翁襖鴬鴎黄岡沖荻億屋憶臆桶牡乙俺卸恩温穏音下化仮何伽価佳加可嘉夏嫁家寡科暇果架歌河火珂禍禾稼箇花苛茄荷華菓蝦課嘩貨迦過霞蚊俄峨我牙画臥芽蛾賀雅餓駕介会解回塊壊廻快怪悔恢懐戒拐改"],
      ["8a40", "魁晦械海灰界皆絵芥蟹開階貝凱劾外咳害崖慨概涯碍蓋街該鎧骸浬馨蛙垣柿蛎鈎劃嚇各廓拡撹格核殻獲確穫覚角赫較郭閣隔革学岳楽額顎掛笠樫"],
      ["8a80", "橿梶鰍潟割喝恰括活渇滑葛褐轄且鰹叶椛樺鞄株兜竃蒲釜鎌噛鴨栢茅萱粥刈苅瓦乾侃冠寒刊勘勧巻喚堪姦完官寛干幹患感慣憾換敢柑桓棺款歓汗漢澗潅環甘監看竿管簡緩缶翰肝艦莞観諌貫還鑑間閑関陥韓館舘丸含岸巌玩癌眼岩翫贋雁頑顔願企伎危喜器基奇嬉寄岐希幾忌揮机旗既期棋棄"],
      ["8b40", "機帰毅気汽畿祈季稀紀徽規記貴起軌輝飢騎鬼亀偽儀妓宜戯技擬欺犠疑祇義蟻誼議掬菊鞠吉吃喫桔橘詰砧杵黍却客脚虐逆丘久仇休及吸宮弓急救"],
      ["8b80", "朽求汲泣灸球究窮笈級糾給旧牛去居巨拒拠挙渠虚許距鋸漁禦魚亨享京供侠僑兇競共凶協匡卿叫喬境峡強彊怯恐恭挟教橋況狂狭矯胸脅興蕎郷鏡響饗驚仰凝尭暁業局曲極玉桐粁僅勤均巾錦斤欣欽琴禁禽筋緊芹菌衿襟謹近金吟銀九倶句区狗玖矩苦躯駆駈駒具愚虞喰空偶寓遇隅串櫛釧屑屈"],
      ["8c40", "掘窟沓靴轡窪熊隈粂栗繰桑鍬勲君薫訓群軍郡卦袈祁係傾刑兄啓圭珪型契形径恵慶慧憩掲携敬景桂渓畦稽系経継繋罫茎荊蛍計詣警軽頚鶏芸迎鯨"],
      ["8c80", "劇戟撃激隙桁傑欠決潔穴結血訣月件倹倦健兼券剣喧圏堅嫌建憲懸拳捲検権牽犬献研硯絹県肩見謙賢軒遣鍵険顕験鹸元原厳幻弦減源玄現絃舷言諺限乎個古呼固姑孤己庫弧戸故枯湖狐糊袴股胡菰虎誇跨鈷雇顧鼓五互伍午呉吾娯後御悟梧檎瑚碁語誤護醐乞鯉交佼侯候倖光公功効勾厚口向"],
      ["8d40", "后喉坑垢好孔孝宏工巧巷幸広庚康弘恒慌抗拘控攻昂晃更杭校梗構江洪浩港溝甲皇硬稿糠紅紘絞綱耕考肯肱腔膏航荒行衡講貢購郊酵鉱砿鋼閤降"],
      ["8d80", "項香高鴻剛劫号合壕拷濠豪轟麹克刻告国穀酷鵠黒獄漉腰甑忽惚骨狛込此頃今困坤墾婚恨懇昏昆根梱混痕紺艮魂些佐叉唆嵯左差査沙瑳砂詐鎖裟坐座挫債催再最哉塞妻宰彩才採栽歳済災采犀砕砦祭斎細菜裁載際剤在材罪財冴坂阪堺榊肴咲崎埼碕鷺作削咋搾昨朔柵窄策索錯桜鮭笹匙冊刷"],
      ["8e40", "察拶撮擦札殺薩雑皐鯖捌錆鮫皿晒三傘参山惨撒散桟燦珊産算纂蚕讃賛酸餐斬暫残仕仔伺使刺司史嗣四士始姉姿子屍市師志思指支孜斯施旨枝止"],
      ["8e80", "死氏獅祉私糸紙紫肢脂至視詞詩試誌諮資賜雌飼歯事似侍児字寺慈持時次滋治爾璽痔磁示而耳自蒔辞汐鹿式識鴫竺軸宍雫七叱執失嫉室悉湿漆疾質実蔀篠偲柴芝屡蕊縞舎写射捨赦斜煮社紗者謝車遮蛇邪借勺尺杓灼爵酌釈錫若寂弱惹主取守手朱殊狩珠種腫趣酒首儒受呪寿授樹綬需囚収周"],
      ["8f40", "宗就州修愁拾洲秀秋終繍習臭舟蒐衆襲讐蹴輯週酋酬集醜什住充十従戎柔汁渋獣縦重銃叔夙宿淑祝縮粛塾熟出術述俊峻春瞬竣舜駿准循旬楯殉淳"],
      ["8f80", "準潤盾純巡遵醇順処初所暑曙渚庶緒署書薯藷諸助叙女序徐恕鋤除傷償勝匠升召哨商唱嘗奨妾娼宵将小少尚庄床廠彰承抄招掌捷昇昌昭晶松梢樟樵沼消渉湘焼焦照症省硝礁祥称章笑粧紹肖菖蒋蕉衝裳訟証詔詳象賞醤鉦鍾鐘障鞘上丈丞乗冗剰城場壌嬢常情擾条杖浄状畳穣蒸譲醸錠嘱埴飾"],
      ["9040", "拭植殖燭織職色触食蝕辱尻伸信侵唇娠寝審心慎振新晋森榛浸深申疹真神秦紳臣芯薪親診身辛進針震人仁刃塵壬尋甚尽腎訊迅陣靭笥諏須酢図厨"],
      ["9080", "逗吹垂帥推水炊睡粋翠衰遂酔錐錘随瑞髄崇嵩数枢趨雛据杉椙菅頗雀裾澄摺寸世瀬畝是凄制勢姓征性成政整星晴棲栖正清牲生盛精聖声製西誠誓請逝醒青静斉税脆隻席惜戚斥昔析石積籍績脊責赤跡蹟碩切拙接摂折設窃節説雪絶舌蝉仙先千占宣専尖川戦扇撰栓栴泉浅洗染潜煎煽旋穿箭線"],
      ["9140", "繊羨腺舛船薦詮賎践選遷銭銑閃鮮前善漸然全禅繕膳糎噌塑岨措曾曽楚狙疏疎礎祖租粗素組蘇訴阻遡鼠僧創双叢倉喪壮奏爽宋層匝惣想捜掃挿掻"],
      ["9180", "操早曹巣槍槽漕燥争痩相窓糟総綜聡草荘葬蒼藻装走送遭鎗霜騒像増憎臓蔵贈造促側則即息捉束測足速俗属賊族続卒袖其揃存孫尊損村遜他多太汰詑唾堕妥惰打柁舵楕陀駄騨体堆対耐岱帯待怠態戴替泰滞胎腿苔袋貸退逮隊黛鯛代台大第醍題鷹滝瀧卓啄宅托択拓沢濯琢託鐸濁諾茸凧蛸只"],
      ["9240", "叩但達辰奪脱巽竪辿棚谷狸鱈樽誰丹単嘆坦担探旦歎淡湛炭短端箪綻耽胆蛋誕鍛団壇弾断暖檀段男談値知地弛恥智池痴稚置致蜘遅馳築畜竹筑蓄"],
      ["9280", "逐秩窒茶嫡着中仲宙忠抽昼柱注虫衷註酎鋳駐樗瀦猪苧著貯丁兆凋喋寵帖帳庁弔張彫徴懲挑暢朝潮牒町眺聴脹腸蝶調諜超跳銚長頂鳥勅捗直朕沈珍賃鎮陳津墜椎槌追鎚痛通塚栂掴槻佃漬柘辻蔦綴鍔椿潰坪壷嬬紬爪吊釣鶴亭低停偵剃貞呈堤定帝底庭廷弟悌抵挺提梯汀碇禎程締艇訂諦蹄逓"],
      ["9340", "邸鄭釘鼎泥摘擢敵滴的笛適鏑溺哲徹撤轍迭鉄典填天展店添纏甜貼転顛点伝殿澱田電兎吐堵塗妬屠徒斗杜渡登菟賭途都鍍砥砺努度土奴怒倒党冬"],
      ["9380", "凍刀唐塔塘套宕島嶋悼投搭東桃梼棟盗淘湯涛灯燈当痘祷等答筒糖統到董蕩藤討謄豆踏逃透鐙陶頭騰闘働動同堂導憧撞洞瞳童胴萄道銅峠鴇匿得徳涜特督禿篤毒独読栃橡凸突椴届鳶苫寅酉瀞噸屯惇敦沌豚遁頓呑曇鈍奈那内乍凪薙謎灘捺鍋楢馴縄畷南楠軟難汝二尼弐迩匂賑肉虹廿日乳入"],
      ["9440", "如尿韮任妊忍認濡禰祢寧葱猫熱年念捻撚燃粘乃廼之埜嚢悩濃納能脳膿農覗蚤巴把播覇杷波派琶破婆罵芭馬俳廃拝排敗杯盃牌背肺輩配倍培媒梅"],
      ["9480", "楳煤狽買売賠陪這蝿秤矧萩伯剥博拍柏泊白箔粕舶薄迫曝漠爆縛莫駁麦函箱硲箸肇筈櫨幡肌畑畠八鉢溌発醗髪伐罰抜筏閥鳩噺塙蛤隼伴判半反叛帆搬斑板氾汎版犯班畔繁般藩販範釆煩頒飯挽晩番盤磐蕃蛮匪卑否妃庇彼悲扉批披斐比泌疲皮碑秘緋罷肥被誹費避非飛樋簸備尾微枇毘琵眉美"],
      ["9540", "鼻柊稗匹疋髭彦膝菱肘弼必畢筆逼桧姫媛紐百謬俵彪標氷漂瓢票表評豹廟描病秒苗錨鋲蒜蛭鰭品彬斌浜瀕貧賓頻敏瓶不付埠夫婦富冨布府怖扶敷"],
      ["9580", "斧普浮父符腐膚芙譜負賦赴阜附侮撫武舞葡蕪部封楓風葺蕗伏副復幅服福腹複覆淵弗払沸仏物鮒分吻噴墳憤扮焚奮粉糞紛雰文聞丙併兵塀幣平弊柄並蔽閉陛米頁僻壁癖碧別瞥蔑箆偏変片篇編辺返遍便勉娩弁鞭保舗鋪圃捕歩甫補輔穂募墓慕戊暮母簿菩倣俸包呆報奉宝峰峯崩庖抱捧放方朋"],
      ["9640", "法泡烹砲縫胞芳萌蓬蜂褒訪豊邦鋒飽鳳鵬乏亡傍剖坊妨帽忘忙房暴望某棒冒紡肪膨謀貌貿鉾防吠頬北僕卜墨撲朴牧睦穆釦勃没殆堀幌奔本翻凡盆"],
      ["9680", "摩磨魔麻埋妹昧枚毎哩槙幕膜枕鮪柾鱒桝亦俣又抹末沫迄侭繭麿万慢満漫蔓味未魅巳箕岬密蜜湊蓑稔脈妙粍民眠務夢無牟矛霧鵡椋婿娘冥名命明盟迷銘鳴姪牝滅免棉綿緬面麺摸模茂妄孟毛猛盲網耗蒙儲木黙目杢勿餅尤戻籾貰問悶紋門匁也冶夜爺耶野弥矢厄役約薬訳躍靖柳薮鑓愉愈油癒"],
      ["9740", "諭輸唯佑優勇友宥幽悠憂揖有柚湧涌猶猷由祐裕誘遊邑郵雄融夕予余与誉輿預傭幼妖容庸揚揺擁曜楊様洋溶熔用窯羊耀葉蓉要謡踊遥陽養慾抑欲"],
      ["9780", "沃浴翌翼淀羅螺裸来莱頼雷洛絡落酪乱卵嵐欄濫藍蘭覧利吏履李梨理璃痢裏裡里離陸律率立葎掠略劉流溜琉留硫粒隆竜龍侶慮旅虜了亮僚両凌寮料梁涼猟療瞭稜糧良諒遼量陵領力緑倫厘林淋燐琳臨輪隣鱗麟瑠塁涙累類令伶例冷励嶺怜玲礼苓鈴隷零霊麗齢暦歴列劣烈裂廉恋憐漣煉簾練聯"],
      ["9840", "蓮連錬呂魯櫓炉賂路露労婁廊弄朗楼榔浪漏牢狼篭老聾蝋郎六麓禄肋録論倭和話歪賄脇惑枠鷲亙亘鰐詫藁蕨椀湾碗腕"],
      ["989f", "弌丐丕个丱丶丼丿乂乖乘亂亅豫亊舒弍于亞亟亠亢亰亳亶从仍仄仆仂仗仞仭仟价伉佚估佛佝佗佇佶侈侏侘佻佩佰侑佯來侖儘俔俟俎俘俛俑俚俐俤俥倚倨倔倪倥倅伜俶倡倩倬俾俯們倆偃假會偕偐偈做偖偬偸傀傚傅傴傲"],
      ["9940", "僉僊傳僂僖僞僥僭僣僮價僵儉儁儂儖儕儔儚儡儺儷儼儻儿兀兒兌兔兢竸兩兪兮冀冂囘册冉冏冑冓冕冖冤冦冢冩冪冫决冱冲冰况冽凅凉凛几處凩凭"],
      ["9980", "凰凵凾刄刋刔刎刧刪刮刳刹剏剄剋剌剞剔剪剴剩剳剿剽劍劔劒剱劈劑辨辧劬劭劼劵勁勍勗勞勣勦飭勠勳勵勸勹匆匈甸匍匐匏匕匚匣匯匱匳匸區卆卅丗卉卍凖卞卩卮夘卻卷厂厖厠厦厥厮厰厶參簒雙叟曼燮叮叨叭叺吁吽呀听吭吼吮吶吩吝呎咏呵咎呟呱呷呰咒呻咀呶咄咐咆哇咢咸咥咬哄哈咨"],
      ["9a40", "咫哂咤咾咼哘哥哦唏唔哽哮哭哺哢唹啀啣啌售啜啅啖啗唸唳啝喙喀咯喊喟啻啾喘喞單啼喃喩喇喨嗚嗅嗟嗄嗜嗤嗔嘔嗷嘖嗾嗽嘛嗹噎噐營嘴嘶嘲嘸"],
      ["9a80", "噫噤嘯噬噪嚆嚀嚊嚠嚔嚏嚥嚮嚶嚴囂嚼囁囃囀囈囎囑囓囗囮囹圀囿圄圉圈國圍圓團圖嗇圜圦圷圸坎圻址坏坩埀垈坡坿垉垓垠垳垤垪垰埃埆埔埒埓堊埖埣堋堙堝塲堡塢塋塰毀塒堽塹墅墹墟墫墺壞墻墸墮壅壓壑壗壙壘壥壜壤壟壯壺壹壻壼壽夂夊夐夛梦夥夬夭夲夸夾竒奕奐奎奚奘奢奠奧奬奩"],
      ["9b40", "奸妁妝佞侫妣妲姆姨姜妍姙姚娥娟娑娜娉娚婀婬婉娵娶婢婪媚媼媾嫋嫂媽嫣嫗嫦嫩嫖嫺嫻嬌嬋嬖嬲嫐嬪嬶嬾孃孅孀孑孕孚孛孥孩孰孳孵學斈孺宀"],
      ["9b80", "它宦宸寃寇寉寔寐寤實寢寞寥寫寰寶寳尅將專對尓尠尢尨尸尹屁屆屎屓屐屏孱屬屮乢屶屹岌岑岔妛岫岻岶岼岷峅岾峇峙峩峽峺峭嶌峪崋崕崗嵜崟崛崑崔崢崚崙崘嵌嵒嵎嵋嵬嵳嵶嶇嶄嶂嶢嶝嶬嶮嶽嶐嶷嶼巉巍巓巒巖巛巫已巵帋帚帙帑帛帶帷幄幃幀幎幗幔幟幢幤幇幵并幺麼广庠廁廂廈廐廏"],
      ["9c40", "廖廣廝廚廛廢廡廨廩廬廱廳廰廴廸廾弃弉彝彜弋弑弖弩弭弸彁彈彌彎弯彑彖彗彙彡彭彳彷徃徂彿徊很徑徇從徙徘徠徨徭徼忖忻忤忸忱忝悳忿怡恠"],
      ["9c80", "怙怐怩怎怱怛怕怫怦怏怺恚恁恪恷恟恊恆恍恣恃恤恂恬恫恙悁悍惧悃悚悄悛悖悗悒悧悋惡悸惠惓悴忰悽惆悵惘慍愕愆惶惷愀惴惺愃愡惻惱愍愎慇愾愨愧慊愿愼愬愴愽慂慄慳慷慘慙慚慫慴慯慥慱慟慝慓慵憙憖憇憬憔憚憊憑憫憮懌懊應懷懈懃懆憺懋罹懍懦懣懶懺懴懿懽懼懾戀戈戉戍戌戔戛"],
      ["9d40", "戞戡截戮戰戲戳扁扎扞扣扛扠扨扼抂抉找抒抓抖拔抃抔拗拑抻拏拿拆擔拈拜拌拊拂拇抛拉挌拮拱挧挂挈拯拵捐挾捍搜捏掖掎掀掫捶掣掏掉掟掵捫"],
      ["9d80", "捩掾揩揀揆揣揉插揶揄搖搴搆搓搦搶攝搗搨搏摧摯摶摎攪撕撓撥撩撈撼據擒擅擇撻擘擂擱擧舉擠擡抬擣擯攬擶擴擲擺攀擽攘攜攅攤攣攫攴攵攷收攸畋效敖敕敍敘敞敝敲數斂斃變斛斟斫斷旃旆旁旄旌旒旛旙无旡旱杲昊昃旻杳昵昶昴昜晏晄晉晁晞晝晤晧晨晟晢晰暃暈暎暉暄暘暝曁暹曉暾暼"],
      ["9e40", "曄暸曖曚曠昿曦曩曰曵曷朏朖朞朦朧霸朮朿朶杁朸朷杆杞杠杙杣杤枉杰枩杼杪枌枋枦枡枅枷柯枴柬枳柩枸柤柞柝柢柮枹柎柆柧檜栞框栩桀桍栲桎"],
      ["9e80", "梳栫桙档桷桿梟梏梭梔條梛梃檮梹桴梵梠梺椏梍桾椁棊椈棘椢椦棡椌棍棔棧棕椶椒椄棗棣椥棹棠棯椨椪椚椣椡棆楹楷楜楸楫楔楾楮椹楴椽楙椰楡楞楝榁楪榲榮槐榿槁槓榾槎寨槊槝榻槃榧樮榑榠榜榕榴槞槨樂樛槿權槹槲槧樅榱樞槭樔槫樊樒櫁樣樓橄樌橲樶橸橇橢橙橦橈樸樢檐檍檠檄檢檣"],
      ["9f40", "檗蘗檻櫃櫂檸檳檬櫞櫑櫟檪櫚櫪櫻欅蘖櫺欒欖鬱欟欸欷盜欹飮歇歃歉歐歙歔歛歟歡歸歹歿殀殄殃殍殘殕殞殤殪殫殯殲殱殳殷殼毆毋毓毟毬毫毳毯"],
      ["9f80", "麾氈氓气氛氤氣汞汕汢汪沂沍沚沁沛汾汨汳沒沐泄泱泓沽泗泅泝沮沱沾沺泛泯泙泪洟衍洶洫洽洸洙洵洳洒洌浣涓浤浚浹浙涎涕濤涅淹渕渊涵淇淦涸淆淬淞淌淨淒淅淺淙淤淕淪淮渭湮渮渙湲湟渾渣湫渫湶湍渟湃渺湎渤滿渝游溂溪溘滉溷滓溽溯滄溲滔滕溏溥滂溟潁漑灌滬滸滾漿滲漱滯漲滌"],
      ["e040", "漾漓滷澆潺潸澁澀潯潛濳潭澂潼潘澎澑濂潦澳澣澡澤澹濆澪濟濕濬濔濘濱濮濛瀉瀋濺瀑瀁瀏濾瀛瀚潴瀝瀘瀟瀰瀾瀲灑灣炙炒炯烱炬炸炳炮烟烋烝"],
      ["e080", "烙焉烽焜焙煥煕熈煦煢煌煖煬熏燻熄熕熨熬燗熹熾燒燉燔燎燠燬燧燵燼燹燿爍爐爛爨爭爬爰爲爻爼爿牀牆牋牘牴牾犂犁犇犒犖犢犧犹犲狃狆狄狎狒狢狠狡狹狷倏猗猊猜猖猝猴猯猩猥猾獎獏默獗獪獨獰獸獵獻獺珈玳珎玻珀珥珮珞璢琅瑯琥珸琲琺瑕琿瑟瑙瑁瑜瑩瑰瑣瑪瑶瑾璋璞璧瓊瓏瓔珱"],
      ["e140", "瓠瓣瓧瓩瓮瓲瓰瓱瓸瓷甄甃甅甌甎甍甕甓甞甦甬甼畄畍畊畉畛畆畚畩畤畧畫畭畸當疆疇畴疊疉疂疔疚疝疥疣痂疳痃疵疽疸疼疱痍痊痒痙痣痞痾痿"],
      ["e180", "痼瘁痰痺痲痳瘋瘍瘉瘟瘧瘠瘡瘢瘤瘴瘰瘻癇癈癆癜癘癡癢癨癩癪癧癬癰癲癶癸發皀皃皈皋皎皖皓皙皚皰皴皸皹皺盂盍盖盒盞盡盥盧盪蘯盻眈眇眄眩眤眞眥眦眛眷眸睇睚睨睫睛睥睿睾睹瞎瞋瞑瞠瞞瞰瞶瞹瞿瞼瞽瞻矇矍矗矚矜矣矮矼砌砒礦砠礪硅碎硴碆硼碚碌碣碵碪碯磑磆磋磔碾碼磅磊磬"],
      ["e240", "磧磚磽磴礇礒礑礙礬礫祀祠祗祟祚祕祓祺祿禊禝禧齋禪禮禳禹禺秉秕秧秬秡秣稈稍稘稙稠稟禀稱稻稾稷穃穗穉穡穢穩龝穰穹穽窈窗窕窘窖窩竈窰"],
      ["e280", "窶竅竄窿邃竇竊竍竏竕竓站竚竝竡竢竦竭竰笂笏笊笆笳笘笙笞笵笨笶筐筺笄筍笋筌筅筵筥筴筧筰筱筬筮箝箘箟箍箜箚箋箒箏筝箙篋篁篌篏箴篆篝篩簑簔篦篥籠簀簇簓篳篷簗簍篶簣簧簪簟簷簫簽籌籃籔籏籀籐籘籟籤籖籥籬籵粃粐粤粭粢粫粡粨粳粲粱粮粹粽糀糅糂糘糒糜糢鬻糯糲糴糶糺紆"],
      ["e340", "紂紜紕紊絅絋紮紲紿紵絆絳絖絎絲絨絮絏絣經綉絛綏絽綛綺綮綣綵緇綽綫總綢綯緜綸綟綰緘緝緤緞緻緲緡縅縊縣縡縒縱縟縉縋縢繆繦縻縵縹繃縷"],
      ["e380", "縲縺繧繝繖繞繙繚繹繪繩繼繻纃緕繽辮繿纈纉續纒纐纓纔纖纎纛纜缸缺罅罌罍罎罐网罕罔罘罟罠罨罩罧罸羂羆羃羈羇羌羔羞羝羚羣羯羲羹羮羶羸譱翅翆翊翕翔翡翦翩翳翹飜耆耄耋耒耘耙耜耡耨耿耻聊聆聒聘聚聟聢聨聳聲聰聶聹聽聿肄肆肅肛肓肚肭冐肬胛胥胙胝胄胚胖脉胯胱脛脩脣脯腋"],
      ["e440", "隋腆脾腓腑胼腱腮腥腦腴膃膈膊膀膂膠膕膤膣腟膓膩膰膵膾膸膽臀臂膺臉臍臑臙臘臈臚臟臠臧臺臻臾舁舂舅與舊舍舐舖舩舫舸舳艀艙艘艝艚艟艤"],
      ["e480", "艢艨艪艫舮艱艷艸艾芍芒芫芟芻芬苡苣苟苒苴苳苺莓范苻苹苞茆苜茉苙茵茴茖茲茱荀茹荐荅茯茫茗茘莅莚莪莟莢莖茣莎莇莊荼莵荳荵莠莉莨菴萓菫菎菽萃菘萋菁菷萇菠菲萍萢萠莽萸蔆菻葭萪萼蕚蒄葷葫蒭葮蒂葩葆萬葯葹萵蓊葢蒹蒿蒟蓙蓍蒻蓚蓐蓁蓆蓖蒡蔡蓿蓴蔗蔘蔬蔟蔕蔔蓼蕀蕣蕘蕈"],
      ["e540", "蕁蘂蕋蕕薀薤薈薑薊薨蕭薔薛藪薇薜蕷蕾薐藉薺藏薹藐藕藝藥藜藹蘊蘓蘋藾藺蘆蘢蘚蘰蘿虍乕虔號虧虱蚓蚣蚩蚪蚋蚌蚶蚯蛄蛆蚰蛉蠣蚫蛔蛞蛩蛬"],
      ["e580", "蛟蛛蛯蜒蜆蜈蜀蜃蛻蜑蜉蜍蛹蜊蜴蜿蜷蜻蜥蜩蜚蝠蝟蝸蝌蝎蝴蝗蝨蝮蝙蝓蝣蝪蠅螢螟螂螯蟋螽蟀蟐雖螫蟄螳蟇蟆螻蟯蟲蟠蠏蠍蟾蟶蟷蠎蟒蠑蠖蠕蠢蠡蠱蠶蠹蠧蠻衄衂衒衙衞衢衫袁衾袞衵衽袵衲袂袗袒袮袙袢袍袤袰袿袱裃裄裔裘裙裝裹褂裼裴裨裲褄褌褊褓襃褞褥褪褫襁襄褻褶褸襌褝襠襞"],
      ["e640", "襦襤襭襪襯襴襷襾覃覈覊覓覘覡覩覦覬覯覲覺覽覿觀觚觜觝觧觴觸訃訖訐訌訛訝訥訶詁詛詒詆詈詼詭詬詢誅誂誄誨誡誑誥誦誚誣諄諍諂諚諫諳諧"],
      ["e680", "諤諱謔諠諢諷諞諛謌謇謚諡謖謐謗謠謳鞫謦謫謾謨譁譌譏譎證譖譛譚譫譟譬譯譴譽讀讌讎讒讓讖讙讚谺豁谿豈豌豎豐豕豢豬豸豺貂貉貅貊貍貎貔豼貘戝貭貪貽貲貳貮貶賈賁賤賣賚賽賺賻贄贅贊贇贏贍贐齎贓賍贔贖赧赭赱赳趁趙跂趾趺跏跚跖跌跛跋跪跫跟跣跼踈踉跿踝踞踐踟蹂踵踰踴蹊"],
      ["e740", "蹇蹉蹌蹐蹈蹙蹤蹠踪蹣蹕蹶蹲蹼躁躇躅躄躋躊躓躑躔躙躪躡躬躰軆躱躾軅軈軋軛軣軼軻軫軾輊輅輕輒輙輓輜輟輛輌輦輳輻輹轅轂輾轌轉轆轎轗轜"],
      ["e780", "轢轣轤辜辟辣辭辯辷迚迥迢迪迯邇迴逅迹迺逑逕逡逍逞逖逋逧逶逵逹迸遏遐遑遒逎遉逾遖遘遞遨遯遶隨遲邂遽邁邀邊邉邏邨邯邱邵郢郤扈郛鄂鄒鄙鄲鄰酊酖酘酣酥酩酳酲醋醉醂醢醫醯醪醵醴醺釀釁釉釋釐釖釟釡釛釼釵釶鈞釿鈔鈬鈕鈑鉞鉗鉅鉉鉤鉈銕鈿鉋鉐銜銖銓銛鉚鋏銹銷鋩錏鋺鍄錮"],
      ["e840", "錙錢錚錣錺錵錻鍜鍠鍼鍮鍖鎰鎬鎭鎔鎹鏖鏗鏨鏥鏘鏃鏝鏐鏈鏤鐚鐔鐓鐃鐇鐐鐶鐫鐵鐡鐺鑁鑒鑄鑛鑠鑢鑞鑪鈩鑰鑵鑷鑽鑚鑼鑾钁鑿閂閇閊閔閖閘閙"],
      ["e880", "閠閨閧閭閼閻閹閾闊濶闃闍闌闕闔闖關闡闥闢阡阨阮阯陂陌陏陋陷陜陞陝陟陦陲陬隍隘隕隗險隧隱隲隰隴隶隸隹雎雋雉雍襍雜霍雕雹霄霆霈霓霎霑霏霖霙霤霪霰霹霽霾靄靆靈靂靉靜靠靤靦靨勒靫靱靹鞅靼鞁靺鞆鞋鞏鞐鞜鞨鞦鞣鞳鞴韃韆韈韋韜韭齏韲竟韶韵頏頌頸頤頡頷頽顆顏顋顫顯顰"],
      ["e940", "顱顴顳颪颯颱颶飄飃飆飩飫餃餉餒餔餘餡餝餞餤餠餬餮餽餾饂饉饅饐饋饑饒饌饕馗馘馥馭馮馼駟駛駝駘駑駭駮駱駲駻駸騁騏騅駢騙騫騷驅驂驀驃"],
      ["e980", "騾驕驍驛驗驟驢驥驤驩驫驪骭骰骼髀髏髑髓體髞髟髢髣髦髯髫髮髴髱髷髻鬆鬘鬚鬟鬢鬣鬥鬧鬨鬩鬪鬮鬯鬲魄魃魏魍魎魑魘魴鮓鮃鮑鮖鮗鮟鮠鮨鮴鯀鯊鮹鯆鯏鯑鯒鯣鯢鯤鯔鯡鰺鯲鯱鯰鰕鰔鰉鰓鰌鰆鰈鰒鰊鰄鰮鰛鰥鰤鰡鰰鱇鰲鱆鰾鱚鱠鱧鱶鱸鳧鳬鳰鴉鴈鳫鴃鴆鴪鴦鶯鴣鴟鵄鴕鴒鵁鴿鴾鵆鵈"],
      ["ea40", "鵝鵞鵤鵑鵐鵙鵲鶉鶇鶫鵯鵺鶚鶤鶩鶲鷄鷁鶻鶸鶺鷆鷏鷂鷙鷓鷸鷦鷭鷯鷽鸚鸛鸞鹵鹹鹽麁麈麋麌麒麕麑麝麥麩麸麪麭靡黌黎黏黐黔黜點黝黠黥黨黯"],
      ["ea80", "黴黶黷黹黻黼黽鼇鼈皷鼕鼡鼬鼾齊齒齔齣齟齠齡齦齧齬齪齷齲齶龕龜龠堯槇遙瑤凜熙"],
      ["ed40", "纊褜鍈銈蓜俉炻昱棈鋹曻彅丨仡仼伀伃伹佖侒侊侚侔俍偀倢俿倞偆偰偂傔僴僘兊兤冝冾凬刕劜劦勀勛匀匇匤卲厓厲叝﨎咜咊咩哿喆坙坥垬埈埇﨏"],
      ["ed80", "塚增墲夋奓奛奝奣妤妺孖寀甯寘寬尞岦岺峵崧嵓﨑嵂嵭嶸嶹巐弡弴彧德忞恝悅悊惞惕愠惲愑愷愰憘戓抦揵摠撝擎敎昀昕昻昉昮昞昤晥晗晙晴晳暙暠暲暿曺朎朗杦枻桒柀栁桄棏﨓楨﨔榘槢樰橫橆橳橾櫢櫤毖氿汜沆汯泚洄涇浯涖涬淏淸淲淼渹湜渧渼溿澈澵濵瀅瀇瀨炅炫焏焄煜煆煇凞燁燾犱"],
      ["ee40", "犾猤猪獷玽珉珖珣珒琇珵琦琪琩琮瑢璉璟甁畯皂皜皞皛皦益睆劯砡硎硤硺礰礼神祥禔福禛竑竧靖竫箞精絈絜綷綠緖繒罇羡羽茁荢荿菇菶葈蒴蕓蕙"],
      ["ee80", "蕫﨟薰蘒﨡蠇裵訒訷詹誧誾諟諸諶譓譿賰賴贒赶﨣軏﨤逸遧郞都鄕鄧釚釗釞釭釮釤釥鈆鈐鈊鈺鉀鈼鉎鉙鉑鈹鉧銧鉷鉸鋧鋗鋙鋐﨧鋕鋠鋓錥錡鋻﨨錞鋿錝錂鍰鍗鎤鏆鏞鏸鐱鑅鑈閒隆﨩隝隯霳霻靃靍靏靑靕顗顥飯飼餧館馞驎髙髜魵魲鮏鮱鮻鰀鵰鵫鶴鸙黑"],
      ["eeef", "ⅰ", 9, "￢￤＇＂"],
      ["f040", "", 62],
      ["f080", "", 124],
      ["f140", "", 62],
      ["f180", "", 124],
      ["f240", "", 62],
      ["f280", "", 124],
      ["f340", "", 62],
      ["f380", "", 124],
      ["f440", "", 62],
      ["f480", "", 124],
      ["f540", "", 62],
      ["f580", "", 124],
      ["f640", "", 62],
      ["f680", "", 124],
      ["f740", "", 62],
      ["f780", "", 124],
      ["f840", "", 62],
      ["f880", "", 124],
      ["f940", ""],
      ["fa40", "ⅰ", 9, "Ⅰ", 9, "￢￤＇＂㈱№℡∵纊褜鍈銈蓜俉炻昱棈鋹曻彅丨仡仼伀伃伹佖侒侊侚侔俍偀倢俿倞偆偰偂傔僴僘兊"],
      ["fa80", "兤冝冾凬刕劜劦勀勛匀匇匤卲厓厲叝﨎咜咊咩哿喆坙坥垬埈埇﨏塚增墲夋奓奛奝奣妤妺孖寀甯寘寬尞岦岺峵崧嵓﨑嵂嵭嶸嶹巐弡弴彧德忞恝悅悊惞惕愠惲愑愷愰憘戓抦揵摠撝擎敎昀昕昻昉昮昞昤晥晗晙晴晳暙暠暲暿曺朎朗杦枻桒柀栁桄棏﨓楨﨔榘槢樰橫橆橳橾櫢櫤毖氿汜沆汯泚洄涇浯"],
      ["fb40", "涖涬淏淸淲淼渹湜渧渼溿澈澵濵瀅瀇瀨炅炫焏焄煜煆煇凞燁燾犱犾猤猪獷玽珉珖珣珒琇珵琦琪琩琮瑢璉璟甁畯皂皜皞皛皦益睆劯砡硎硤硺礰礼神"],
      ["fb80", "祥禔福禛竑竧靖竫箞精絈絜綷綠緖繒罇羡羽茁荢荿菇菶葈蒴蕓蕙蕫﨟薰蘒﨡蠇裵訒訷詹誧誾諟諸諶譓譿賰賴贒赶﨣軏﨤逸遧郞都鄕鄧釚釗釞釭釮釤釥鈆鈐鈊鈺鉀鈼鉎鉙鉑鈹鉧銧鉷鉸鋧鋗鋙鋐﨧鋕鋠鋓錥錡鋻﨨錞鋿錝錂鍰鍗鎤鏆鏞鏸鐱鑅鑈閒隆﨩隝隯霳霻靃靍靏靑靕顗顥飯飼餧館馞驎髙"],
      ["fc40", "髜魵魲鮏鮱鮻鰀鵰鵫鶴鸙黑"]
    ];
  }
});

// ../../node_modules/encoding/node_modules/iconv-lite/encodings/tables/eucjp.json
var require_eucjp = __commonJS({
  "../../node_modules/encoding/node_modules/iconv-lite/encodings/tables/eucjp.json"(exports, module) {
    module.exports = [
      ["0", "\0", 127],
      ["8ea1", "｡", 62],
      ["a1a1", "　、。，．・：；？！゛゜´｀¨＾￣＿ヽヾゝゞ〃仝々〆〇ー―‐／＼～∥｜…‥‘’“”（）〔〕［］｛｝〈", 9, "＋－±×÷＝≠＜＞≦≧∞∴♂♀°′″℃￥＄￠￡％＃＆＊＠§☆★○●◎◇"],
      ["a2a1", "◆□■△▲▽▼※〒→←↑↓〓"],
      ["a2ba", "∈∋⊆⊇⊂⊃∪∩"],
      ["a2ca", "∧∨￢⇒⇔∀∃"],
      ["a2dc", "∠⊥⌒∂∇≡≒≪≫√∽∝∵∫∬"],
      ["a2f2", "Å‰♯♭♪†‡¶"],
      ["a2fe", "◯"],
      ["a3b0", "０", 9],
      ["a3c1", "Ａ", 25],
      ["a3e1", "ａ", 25],
      ["a4a1", "ぁ", 82],
      ["a5a1", "ァ", 85],
      ["a6a1", "Α", 16, "Σ", 6],
      ["a6c1", "α", 16, "σ", 6],
      ["a7a1", "А", 5, "ЁЖ", 25],
      ["a7d1", "а", 5, "ёж", 25],
      ["a8a1", "─│┌┐┘└├┬┤┴┼━┃┏┓┛┗┣┳┫┻╋┠┯┨┷┿┝┰┥┸╂"],
      ["ada1", "①", 19, "Ⅰ", 9],
      ["adc0", "㍉㌔㌢㍍㌘㌧㌃㌶㍑㍗㌍㌦㌣㌫㍊㌻㎜㎝㎞㎎㎏㏄㎡"],
      ["addf", "㍻〝〟№㏍℡㊤", 4, "㈱㈲㈹㍾㍽㍼≒≡∫∮∑√⊥∠∟⊿∵∩∪"],
      ["b0a1", "亜唖娃阿哀愛挨姶逢葵茜穐悪握渥旭葦芦鯵梓圧斡扱宛姐虻飴絢綾鮎或粟袷安庵按暗案闇鞍杏以伊位依偉囲夷委威尉惟意慰易椅為畏異移維緯胃萎衣謂違遺医井亥域育郁磯一壱溢逸稲茨芋鰯允印咽員因姻引飲淫胤蔭"],
      ["b1a1", "院陰隠韻吋右宇烏羽迂雨卯鵜窺丑碓臼渦嘘唄欝蔚鰻姥厩浦瓜閏噂云運雲荏餌叡営嬰影映曳栄永泳洩瑛盈穎頴英衛詠鋭液疫益駅悦謁越閲榎厭円園堰奄宴延怨掩援沿演炎焔煙燕猿縁艶苑薗遠鉛鴛塩於汚甥凹央奥往応"],
      ["b2a1", "押旺横欧殴王翁襖鴬鴎黄岡沖荻億屋憶臆桶牡乙俺卸恩温穏音下化仮何伽価佳加可嘉夏嫁家寡科暇果架歌河火珂禍禾稼箇花苛茄荷華菓蝦課嘩貨迦過霞蚊俄峨我牙画臥芽蛾賀雅餓駕介会解回塊壊廻快怪悔恢懐戒拐改"],
      ["b3a1", "魁晦械海灰界皆絵芥蟹開階貝凱劾外咳害崖慨概涯碍蓋街該鎧骸浬馨蛙垣柿蛎鈎劃嚇各廓拡撹格核殻獲確穫覚角赫較郭閣隔革学岳楽額顎掛笠樫橿梶鰍潟割喝恰括活渇滑葛褐轄且鰹叶椛樺鞄株兜竃蒲釜鎌噛鴨栢茅萱"],
      ["b4a1", "粥刈苅瓦乾侃冠寒刊勘勧巻喚堪姦完官寛干幹患感慣憾換敢柑桓棺款歓汗漢澗潅環甘監看竿管簡緩缶翰肝艦莞観諌貫還鑑間閑関陥韓館舘丸含岸巌玩癌眼岩翫贋雁頑顔願企伎危喜器基奇嬉寄岐希幾忌揮机旗既期棋棄"],
      ["b5a1", "機帰毅気汽畿祈季稀紀徽規記貴起軌輝飢騎鬼亀偽儀妓宜戯技擬欺犠疑祇義蟻誼議掬菊鞠吉吃喫桔橘詰砧杵黍却客脚虐逆丘久仇休及吸宮弓急救朽求汲泣灸球究窮笈級糾給旧牛去居巨拒拠挙渠虚許距鋸漁禦魚亨享京"],
      ["b6a1", "供侠僑兇競共凶協匡卿叫喬境峡強彊怯恐恭挟教橋況狂狭矯胸脅興蕎郷鏡響饗驚仰凝尭暁業局曲極玉桐粁僅勤均巾錦斤欣欽琴禁禽筋緊芹菌衿襟謹近金吟銀九倶句区狗玖矩苦躯駆駈駒具愚虞喰空偶寓遇隅串櫛釧屑屈"],
      ["b7a1", "掘窟沓靴轡窪熊隈粂栗繰桑鍬勲君薫訓群軍郡卦袈祁係傾刑兄啓圭珪型契形径恵慶慧憩掲携敬景桂渓畦稽系経継繋罫茎荊蛍計詣警軽頚鶏芸迎鯨劇戟撃激隙桁傑欠決潔穴結血訣月件倹倦健兼券剣喧圏堅嫌建憲懸拳捲"],
      ["b8a1", "検権牽犬献研硯絹県肩見謙賢軒遣鍵険顕験鹸元原厳幻弦減源玄現絃舷言諺限乎個古呼固姑孤己庫弧戸故枯湖狐糊袴股胡菰虎誇跨鈷雇顧鼓五互伍午呉吾娯後御悟梧檎瑚碁語誤護醐乞鯉交佼侯候倖光公功効勾厚口向"],
      ["b9a1", "后喉坑垢好孔孝宏工巧巷幸広庚康弘恒慌抗拘控攻昂晃更杭校梗構江洪浩港溝甲皇硬稿糠紅紘絞綱耕考肯肱腔膏航荒行衡講貢購郊酵鉱砿鋼閤降項香高鴻剛劫号合壕拷濠豪轟麹克刻告国穀酷鵠黒獄漉腰甑忽惚骨狛込"],
      ["baa1", "此頃今困坤墾婚恨懇昏昆根梱混痕紺艮魂些佐叉唆嵯左差査沙瑳砂詐鎖裟坐座挫債催再最哉塞妻宰彩才採栽歳済災采犀砕砦祭斎細菜裁載際剤在材罪財冴坂阪堺榊肴咲崎埼碕鷺作削咋搾昨朔柵窄策索錯桜鮭笹匙冊刷"],
      ["bba1", "察拶撮擦札殺薩雑皐鯖捌錆鮫皿晒三傘参山惨撒散桟燦珊産算纂蚕讃賛酸餐斬暫残仕仔伺使刺司史嗣四士始姉姿子屍市師志思指支孜斯施旨枝止死氏獅祉私糸紙紫肢脂至視詞詩試誌諮資賜雌飼歯事似侍児字寺慈持時"],
      ["bca1", "次滋治爾璽痔磁示而耳自蒔辞汐鹿式識鴫竺軸宍雫七叱執失嫉室悉湿漆疾質実蔀篠偲柴芝屡蕊縞舎写射捨赦斜煮社紗者謝車遮蛇邪借勺尺杓灼爵酌釈錫若寂弱惹主取守手朱殊狩珠種腫趣酒首儒受呪寿授樹綬需囚収周"],
      ["bda1", "宗就州修愁拾洲秀秋終繍習臭舟蒐衆襲讐蹴輯週酋酬集醜什住充十従戎柔汁渋獣縦重銃叔夙宿淑祝縮粛塾熟出術述俊峻春瞬竣舜駿准循旬楯殉淳準潤盾純巡遵醇順処初所暑曙渚庶緒署書薯藷諸助叙女序徐恕鋤除傷償"],
      ["bea1", "勝匠升召哨商唱嘗奨妾娼宵将小少尚庄床廠彰承抄招掌捷昇昌昭晶松梢樟樵沼消渉湘焼焦照症省硝礁祥称章笑粧紹肖菖蒋蕉衝裳訟証詔詳象賞醤鉦鍾鐘障鞘上丈丞乗冗剰城場壌嬢常情擾条杖浄状畳穣蒸譲醸錠嘱埴飾"],
      ["bfa1", "拭植殖燭織職色触食蝕辱尻伸信侵唇娠寝審心慎振新晋森榛浸深申疹真神秦紳臣芯薪親診身辛進針震人仁刃塵壬尋甚尽腎訊迅陣靭笥諏須酢図厨逗吹垂帥推水炊睡粋翠衰遂酔錐錘随瑞髄崇嵩数枢趨雛据杉椙菅頗雀裾"],
      ["c0a1", "澄摺寸世瀬畝是凄制勢姓征性成政整星晴棲栖正清牲生盛精聖声製西誠誓請逝醒青静斉税脆隻席惜戚斥昔析石積籍績脊責赤跡蹟碩切拙接摂折設窃節説雪絶舌蝉仙先千占宣専尖川戦扇撰栓栴泉浅洗染潜煎煽旋穿箭線"],
      ["c1a1", "繊羨腺舛船薦詮賎践選遷銭銑閃鮮前善漸然全禅繕膳糎噌塑岨措曾曽楚狙疏疎礎祖租粗素組蘇訴阻遡鼠僧創双叢倉喪壮奏爽宋層匝惣想捜掃挿掻操早曹巣槍槽漕燥争痩相窓糟総綜聡草荘葬蒼藻装走送遭鎗霜騒像増憎"],
      ["c2a1", "臓蔵贈造促側則即息捉束測足速俗属賊族続卒袖其揃存孫尊損村遜他多太汰詑唾堕妥惰打柁舵楕陀駄騨体堆対耐岱帯待怠態戴替泰滞胎腿苔袋貸退逮隊黛鯛代台大第醍題鷹滝瀧卓啄宅托択拓沢濯琢託鐸濁諾茸凧蛸只"],
      ["c3a1", "叩但達辰奪脱巽竪辿棚谷狸鱈樽誰丹単嘆坦担探旦歎淡湛炭短端箪綻耽胆蛋誕鍛団壇弾断暖檀段男談値知地弛恥智池痴稚置致蜘遅馳築畜竹筑蓄逐秩窒茶嫡着中仲宙忠抽昼柱注虫衷註酎鋳駐樗瀦猪苧著貯丁兆凋喋寵"],
      ["c4a1", "帖帳庁弔張彫徴懲挑暢朝潮牒町眺聴脹腸蝶調諜超跳銚長頂鳥勅捗直朕沈珍賃鎮陳津墜椎槌追鎚痛通塚栂掴槻佃漬柘辻蔦綴鍔椿潰坪壷嬬紬爪吊釣鶴亭低停偵剃貞呈堤定帝底庭廷弟悌抵挺提梯汀碇禎程締艇訂諦蹄逓"],
      ["c5a1", "邸鄭釘鼎泥摘擢敵滴的笛適鏑溺哲徹撤轍迭鉄典填天展店添纏甜貼転顛点伝殿澱田電兎吐堵塗妬屠徒斗杜渡登菟賭途都鍍砥砺努度土奴怒倒党冬凍刀唐塔塘套宕島嶋悼投搭東桃梼棟盗淘湯涛灯燈当痘祷等答筒糖統到"],
      ["c6a1", "董蕩藤討謄豆踏逃透鐙陶頭騰闘働動同堂導憧撞洞瞳童胴萄道銅峠鴇匿得徳涜特督禿篤毒独読栃橡凸突椴届鳶苫寅酉瀞噸屯惇敦沌豚遁頓呑曇鈍奈那内乍凪薙謎灘捺鍋楢馴縄畷南楠軟難汝二尼弐迩匂賑肉虹廿日乳入"],
      ["c7a1", "如尿韮任妊忍認濡禰祢寧葱猫熱年念捻撚燃粘乃廼之埜嚢悩濃納能脳膿農覗蚤巴把播覇杷波派琶破婆罵芭馬俳廃拝排敗杯盃牌背肺輩配倍培媒梅楳煤狽買売賠陪這蝿秤矧萩伯剥博拍柏泊白箔粕舶薄迫曝漠爆縛莫駁麦"],
      ["c8a1", "函箱硲箸肇筈櫨幡肌畑畠八鉢溌発醗髪伐罰抜筏閥鳩噺塙蛤隼伴判半反叛帆搬斑板氾汎版犯班畔繁般藩販範釆煩頒飯挽晩番盤磐蕃蛮匪卑否妃庇彼悲扉批披斐比泌疲皮碑秘緋罷肥被誹費避非飛樋簸備尾微枇毘琵眉美"],
      ["c9a1", "鼻柊稗匹疋髭彦膝菱肘弼必畢筆逼桧姫媛紐百謬俵彪標氷漂瓢票表評豹廟描病秒苗錨鋲蒜蛭鰭品彬斌浜瀕貧賓頻敏瓶不付埠夫婦富冨布府怖扶敷斧普浮父符腐膚芙譜負賦赴阜附侮撫武舞葡蕪部封楓風葺蕗伏副復幅服"],
      ["caa1", "福腹複覆淵弗払沸仏物鮒分吻噴墳憤扮焚奮粉糞紛雰文聞丙併兵塀幣平弊柄並蔽閉陛米頁僻壁癖碧別瞥蔑箆偏変片篇編辺返遍便勉娩弁鞭保舗鋪圃捕歩甫補輔穂募墓慕戊暮母簿菩倣俸包呆報奉宝峰峯崩庖抱捧放方朋"],
      ["cba1", "法泡烹砲縫胞芳萌蓬蜂褒訪豊邦鋒飽鳳鵬乏亡傍剖坊妨帽忘忙房暴望某棒冒紡肪膨謀貌貿鉾防吠頬北僕卜墨撲朴牧睦穆釦勃没殆堀幌奔本翻凡盆摩磨魔麻埋妹昧枚毎哩槙幕膜枕鮪柾鱒桝亦俣又抹末沫迄侭繭麿万慢満"],
      ["cca1", "漫蔓味未魅巳箕岬密蜜湊蓑稔脈妙粍民眠務夢無牟矛霧鵡椋婿娘冥名命明盟迷銘鳴姪牝滅免棉綿緬面麺摸模茂妄孟毛猛盲網耗蒙儲木黙目杢勿餅尤戻籾貰問悶紋門匁也冶夜爺耶野弥矢厄役約薬訳躍靖柳薮鑓愉愈油癒"],
      ["cda1", "諭輸唯佑優勇友宥幽悠憂揖有柚湧涌猶猷由祐裕誘遊邑郵雄融夕予余与誉輿預傭幼妖容庸揚揺擁曜楊様洋溶熔用窯羊耀葉蓉要謡踊遥陽養慾抑欲沃浴翌翼淀羅螺裸来莱頼雷洛絡落酪乱卵嵐欄濫藍蘭覧利吏履李梨理璃"],
      ["cea1", "痢裏裡里離陸律率立葎掠略劉流溜琉留硫粒隆竜龍侶慮旅虜了亮僚両凌寮料梁涼猟療瞭稜糧良諒遼量陵領力緑倫厘林淋燐琳臨輪隣鱗麟瑠塁涙累類令伶例冷励嶺怜玲礼苓鈴隷零霊麗齢暦歴列劣烈裂廉恋憐漣煉簾練聯"],
      ["cfa1", "蓮連錬呂魯櫓炉賂路露労婁廊弄朗楼榔浪漏牢狼篭老聾蝋郎六麓禄肋録論倭和話歪賄脇惑枠鷲亙亘鰐詫藁蕨椀湾碗腕"],
      ["d0a1", "弌丐丕个丱丶丼丿乂乖乘亂亅豫亊舒弍于亞亟亠亢亰亳亶从仍仄仆仂仗仞仭仟价伉佚估佛佝佗佇佶侈侏侘佻佩佰侑佯來侖儘俔俟俎俘俛俑俚俐俤俥倚倨倔倪倥倅伜俶倡倩倬俾俯們倆偃假會偕偐偈做偖偬偸傀傚傅傴傲"],
      ["d1a1", "僉僊傳僂僖僞僥僭僣僮價僵儉儁儂儖儕儔儚儡儺儷儼儻儿兀兒兌兔兢竸兩兪兮冀冂囘册冉冏冑冓冕冖冤冦冢冩冪冫决冱冲冰况冽凅凉凛几處凩凭凰凵凾刄刋刔刎刧刪刮刳刹剏剄剋剌剞剔剪剴剩剳剿剽劍劔劒剱劈劑辨"],
      ["d2a1", "辧劬劭劼劵勁勍勗勞勣勦飭勠勳勵勸勹匆匈甸匍匐匏匕匚匣匯匱匳匸區卆卅丗卉卍凖卞卩卮夘卻卷厂厖厠厦厥厮厰厶參簒雙叟曼燮叮叨叭叺吁吽呀听吭吼吮吶吩吝呎咏呵咎呟呱呷呰咒呻咀呶咄咐咆哇咢咸咥咬哄哈咨"],
      ["d3a1", "咫哂咤咾咼哘哥哦唏唔哽哮哭哺哢唹啀啣啌售啜啅啖啗唸唳啝喙喀咯喊喟啻啾喘喞單啼喃喩喇喨嗚嗅嗟嗄嗜嗤嗔嘔嗷嘖嗾嗽嘛嗹噎噐營嘴嘶嘲嘸噫噤嘯噬噪嚆嚀嚊嚠嚔嚏嚥嚮嚶嚴囂嚼囁囃囀囈囎囑囓囗囮囹圀囿圄圉"],
      ["d4a1", "圈國圍圓團圖嗇圜圦圷圸坎圻址坏坩埀垈坡坿垉垓垠垳垤垪垰埃埆埔埒埓堊埖埣堋堙堝塲堡塢塋塰毀塒堽塹墅墹墟墫墺壞墻墸墮壅壓壑壗壙壘壥壜壤壟壯壺壹壻壼壽夂夊夐夛梦夥夬夭夲夸夾竒奕奐奎奚奘奢奠奧奬奩"],
      ["d5a1", "奸妁妝佞侫妣妲姆姨姜妍姙姚娥娟娑娜娉娚婀婬婉娵娶婢婪媚媼媾嫋嫂媽嫣嫗嫦嫩嫖嫺嫻嬌嬋嬖嬲嫐嬪嬶嬾孃孅孀孑孕孚孛孥孩孰孳孵學斈孺宀它宦宸寃寇寉寔寐寤實寢寞寥寫寰寶寳尅將專對尓尠尢尨尸尹屁屆屎屓"],
      ["d6a1", "屐屏孱屬屮乢屶屹岌岑岔妛岫岻岶岼岷峅岾峇峙峩峽峺峭嶌峪崋崕崗嵜崟崛崑崔崢崚崙崘嵌嵒嵎嵋嵬嵳嵶嶇嶄嶂嶢嶝嶬嶮嶽嶐嶷嶼巉巍巓巒巖巛巫已巵帋帚帙帑帛帶帷幄幃幀幎幗幔幟幢幤幇幵并幺麼广庠廁廂廈廐廏"],
      ["d7a1", "廖廣廝廚廛廢廡廨廩廬廱廳廰廴廸廾弃弉彝彜弋弑弖弩弭弸彁彈彌彎弯彑彖彗彙彡彭彳彷徃徂彿徊很徑徇從徙徘徠徨徭徼忖忻忤忸忱忝悳忿怡恠怙怐怩怎怱怛怕怫怦怏怺恚恁恪恷恟恊恆恍恣恃恤恂恬恫恙悁悍惧悃悚"],
      ["d8a1", "悄悛悖悗悒悧悋惡悸惠惓悴忰悽惆悵惘慍愕愆惶惷愀惴惺愃愡惻惱愍愎慇愾愨愧慊愿愼愬愴愽慂慄慳慷慘慙慚慫慴慯慥慱慟慝慓慵憙憖憇憬憔憚憊憑憫憮懌懊應懷懈懃懆憺懋罹懍懦懣懶懺懴懿懽懼懾戀戈戉戍戌戔戛"],
      ["d9a1", "戞戡截戮戰戲戳扁扎扞扣扛扠扨扼抂抉找抒抓抖拔抃抔拗拑抻拏拿拆擔拈拜拌拊拂拇抛拉挌拮拱挧挂挈拯拵捐挾捍搜捏掖掎掀掫捶掣掏掉掟掵捫捩掾揩揀揆揣揉插揶揄搖搴搆搓搦搶攝搗搨搏摧摯摶摎攪撕撓撥撩撈撼"],
      ["daa1", "據擒擅擇撻擘擂擱擧舉擠擡抬擣擯攬擶擴擲擺攀擽攘攜攅攤攣攫攴攵攷收攸畋效敖敕敍敘敞敝敲數斂斃變斛斟斫斷旃旆旁旄旌旒旛旙无旡旱杲昊昃旻杳昵昶昴昜晏晄晉晁晞晝晤晧晨晟晢晰暃暈暎暉暄暘暝曁暹曉暾暼"],
      ["dba1", "曄暸曖曚曠昿曦曩曰曵曷朏朖朞朦朧霸朮朿朶杁朸朷杆杞杠杙杣杤枉杰枩杼杪枌枋枦枡枅枷柯枴柬枳柩枸柤柞柝柢柮枹柎柆柧檜栞框栩桀桍栲桎梳栫桙档桷桿梟梏梭梔條梛梃檮梹桴梵梠梺椏梍桾椁棊椈棘椢椦棡椌棍"],
      ["dca1", "棔棧棕椶椒椄棗棣椥棹棠棯椨椪椚椣椡棆楹楷楜楸楫楔楾楮椹楴椽楙椰楡楞楝榁楪榲榮槐榿槁槓榾槎寨槊槝榻槃榧樮榑榠榜榕榴槞槨樂樛槿權槹槲槧樅榱樞槭樔槫樊樒櫁樣樓橄樌橲樶橸橇橢橙橦橈樸樢檐檍檠檄檢檣"],
      ["dda1", "檗蘗檻櫃櫂檸檳檬櫞櫑櫟檪櫚櫪櫻欅蘖櫺欒欖鬱欟欸欷盜欹飮歇歃歉歐歙歔歛歟歡歸歹歿殀殄殃殍殘殕殞殤殪殫殯殲殱殳殷殼毆毋毓毟毬毫毳毯麾氈氓气氛氤氣汞汕汢汪沂沍沚沁沛汾汨汳沒沐泄泱泓沽泗泅泝沮沱沾"],
      ["dea1", "沺泛泯泙泪洟衍洶洫洽洸洙洵洳洒洌浣涓浤浚浹浙涎涕濤涅淹渕渊涵淇淦涸淆淬淞淌淨淒淅淺淙淤淕淪淮渭湮渮渙湲湟渾渣湫渫湶湍渟湃渺湎渤滿渝游溂溪溘滉溷滓溽溯滄溲滔滕溏溥滂溟潁漑灌滬滸滾漿滲漱滯漲滌"],
      ["dfa1", "漾漓滷澆潺潸澁澀潯潛濳潭澂潼潘澎澑濂潦澳澣澡澤澹濆澪濟濕濬濔濘濱濮濛瀉瀋濺瀑瀁瀏濾瀛瀚潴瀝瀘瀟瀰瀾瀲灑灣炙炒炯烱炬炸炳炮烟烋烝烙焉烽焜焙煥煕熈煦煢煌煖煬熏燻熄熕熨熬燗熹熾燒燉燔燎燠燬燧燵燼"],
      ["e0a1", "燹燿爍爐爛爨爭爬爰爲爻爼爿牀牆牋牘牴牾犂犁犇犒犖犢犧犹犲狃狆狄狎狒狢狠狡狹狷倏猗猊猜猖猝猴猯猩猥猾獎獏默獗獪獨獰獸獵獻獺珈玳珎玻珀珥珮珞璢琅瑯琥珸琲琺瑕琿瑟瑙瑁瑜瑩瑰瑣瑪瑶瑾璋璞璧瓊瓏瓔珱"],
      ["e1a1", "瓠瓣瓧瓩瓮瓲瓰瓱瓸瓷甄甃甅甌甎甍甕甓甞甦甬甼畄畍畊畉畛畆畚畩畤畧畫畭畸當疆疇畴疊疉疂疔疚疝疥疣痂疳痃疵疽疸疼疱痍痊痒痙痣痞痾痿痼瘁痰痺痲痳瘋瘍瘉瘟瘧瘠瘡瘢瘤瘴瘰瘻癇癈癆癜癘癡癢癨癩癪癧癬癰"],
      ["e2a1", "癲癶癸發皀皃皈皋皎皖皓皙皚皰皴皸皹皺盂盍盖盒盞盡盥盧盪蘯盻眈眇眄眩眤眞眥眦眛眷眸睇睚睨睫睛睥睿睾睹瞎瞋瞑瞠瞞瞰瞶瞹瞿瞼瞽瞻矇矍矗矚矜矣矮矼砌砒礦砠礪硅碎硴碆硼碚碌碣碵碪碯磑磆磋磔碾碼磅磊磬"],
      ["e3a1", "磧磚磽磴礇礒礑礙礬礫祀祠祗祟祚祕祓祺祿禊禝禧齋禪禮禳禹禺秉秕秧秬秡秣稈稍稘稙稠稟禀稱稻稾稷穃穗穉穡穢穩龝穰穹穽窈窗窕窘窖窩竈窰窶竅竄窿邃竇竊竍竏竕竓站竚竝竡竢竦竭竰笂笏笊笆笳笘笙笞笵笨笶筐"],
      ["e4a1", "筺笄筍笋筌筅筵筥筴筧筰筱筬筮箝箘箟箍箜箚箋箒箏筝箙篋篁篌篏箴篆篝篩簑簔篦篥籠簀簇簓篳篷簗簍篶簣簧簪簟簷簫簽籌籃籔籏籀籐籘籟籤籖籥籬籵粃粐粤粭粢粫粡粨粳粲粱粮粹粽糀糅糂糘糒糜糢鬻糯糲糴糶糺紆"],
      ["e5a1", "紂紜紕紊絅絋紮紲紿紵絆絳絖絎絲絨絮絏絣經綉絛綏絽綛綺綮綣綵緇綽綫總綢綯緜綸綟綰緘緝緤緞緻緲緡縅縊縣縡縒縱縟縉縋縢繆繦縻縵縹繃縷縲縺繧繝繖繞繙繚繹繪繩繼繻纃緕繽辮繿纈纉續纒纐纓纔纖纎纛纜缸缺"],
      ["e6a1", "罅罌罍罎罐网罕罔罘罟罠罨罩罧罸羂羆羃羈羇羌羔羞羝羚羣羯羲羹羮羶羸譱翅翆翊翕翔翡翦翩翳翹飜耆耄耋耒耘耙耜耡耨耿耻聊聆聒聘聚聟聢聨聳聲聰聶聹聽聿肄肆肅肛肓肚肭冐肬胛胥胙胝胄胚胖脉胯胱脛脩脣脯腋"],
      ["e7a1", "隋腆脾腓腑胼腱腮腥腦腴膃膈膊膀膂膠膕膤膣腟膓膩膰膵膾膸膽臀臂膺臉臍臑臙臘臈臚臟臠臧臺臻臾舁舂舅與舊舍舐舖舩舫舸舳艀艙艘艝艚艟艤艢艨艪艫舮艱艷艸艾芍芒芫芟芻芬苡苣苟苒苴苳苺莓范苻苹苞茆苜茉苙"],
      ["e8a1", "茵茴茖茲茱荀茹荐荅茯茫茗茘莅莚莪莟莢莖茣莎莇莊荼莵荳荵莠莉莨菴萓菫菎菽萃菘萋菁菷萇菠菲萍萢萠莽萸蔆菻葭萪萼蕚蒄葷葫蒭葮蒂葩葆萬葯葹萵蓊葢蒹蒿蒟蓙蓍蒻蓚蓐蓁蓆蓖蒡蔡蓿蓴蔗蔘蔬蔟蔕蔔蓼蕀蕣蕘蕈"],
      ["e9a1", "蕁蘂蕋蕕薀薤薈薑薊薨蕭薔薛藪薇薜蕷蕾薐藉薺藏薹藐藕藝藥藜藹蘊蘓蘋藾藺蘆蘢蘚蘰蘿虍乕虔號虧虱蚓蚣蚩蚪蚋蚌蚶蚯蛄蛆蚰蛉蠣蚫蛔蛞蛩蛬蛟蛛蛯蜒蜆蜈蜀蜃蛻蜑蜉蜍蛹蜊蜴蜿蜷蜻蜥蜩蜚蝠蝟蝸蝌蝎蝴蝗蝨蝮蝙"],
      ["eaa1", "蝓蝣蝪蠅螢螟螂螯蟋螽蟀蟐雖螫蟄螳蟇蟆螻蟯蟲蟠蠏蠍蟾蟶蟷蠎蟒蠑蠖蠕蠢蠡蠱蠶蠹蠧蠻衄衂衒衙衞衢衫袁衾袞衵衽袵衲袂袗袒袮袙袢袍袤袰袿袱裃裄裔裘裙裝裹褂裼裴裨裲褄褌褊褓襃褞褥褪褫襁襄褻褶褸襌褝襠襞"],
      ["eba1", "襦襤襭襪襯襴襷襾覃覈覊覓覘覡覩覦覬覯覲覺覽覿觀觚觜觝觧觴觸訃訖訐訌訛訝訥訶詁詛詒詆詈詼詭詬詢誅誂誄誨誡誑誥誦誚誣諄諍諂諚諫諳諧諤諱謔諠諢諷諞諛謌謇謚諡謖謐謗謠謳鞫謦謫謾謨譁譌譏譎證譖譛譚譫"],
      ["eca1", "譟譬譯譴譽讀讌讎讒讓讖讙讚谺豁谿豈豌豎豐豕豢豬豸豺貂貉貅貊貍貎貔豼貘戝貭貪貽貲貳貮貶賈賁賤賣賚賽賺賻贄贅贊贇贏贍贐齎贓賍贔贖赧赭赱赳趁趙跂趾趺跏跚跖跌跛跋跪跫跟跣跼踈踉跿踝踞踐踟蹂踵踰踴蹊"],
      ["eda1", "蹇蹉蹌蹐蹈蹙蹤蹠踪蹣蹕蹶蹲蹼躁躇躅躄躋躊躓躑躔躙躪躡躬躰軆躱躾軅軈軋軛軣軼軻軫軾輊輅輕輒輙輓輜輟輛輌輦輳輻輹轅轂輾轌轉轆轎轗轜轢轣轤辜辟辣辭辯辷迚迥迢迪迯邇迴逅迹迺逑逕逡逍逞逖逋逧逶逵逹迸"],
      ["eea1", "遏遐遑遒逎遉逾遖遘遞遨遯遶隨遲邂遽邁邀邊邉邏邨邯邱邵郢郤扈郛鄂鄒鄙鄲鄰酊酖酘酣酥酩酳酲醋醉醂醢醫醯醪醵醴醺釀釁釉釋釐釖釟釡釛釼釵釶鈞釿鈔鈬鈕鈑鉞鉗鉅鉉鉤鉈銕鈿鉋鉐銜銖銓銛鉚鋏銹銷鋩錏鋺鍄錮"],
      ["efa1", "錙錢錚錣錺錵錻鍜鍠鍼鍮鍖鎰鎬鎭鎔鎹鏖鏗鏨鏥鏘鏃鏝鏐鏈鏤鐚鐔鐓鐃鐇鐐鐶鐫鐵鐡鐺鑁鑒鑄鑛鑠鑢鑞鑪鈩鑰鑵鑷鑽鑚鑼鑾钁鑿閂閇閊閔閖閘閙閠閨閧閭閼閻閹閾闊濶闃闍闌闕闔闖關闡闥闢阡阨阮阯陂陌陏陋陷陜陞"],
      ["f0a1", "陝陟陦陲陬隍隘隕隗險隧隱隲隰隴隶隸隹雎雋雉雍襍雜霍雕雹霄霆霈霓霎霑霏霖霙霤霪霰霹霽霾靄靆靈靂靉靜靠靤靦靨勒靫靱靹鞅靼鞁靺鞆鞋鞏鞐鞜鞨鞦鞣鞳鞴韃韆韈韋韜韭齏韲竟韶韵頏頌頸頤頡頷頽顆顏顋顫顯顰"],
      ["f1a1", "顱顴顳颪颯颱颶飄飃飆飩飫餃餉餒餔餘餡餝餞餤餠餬餮餽餾饂饉饅饐饋饑饒饌饕馗馘馥馭馮馼駟駛駝駘駑駭駮駱駲駻駸騁騏騅駢騙騫騷驅驂驀驃騾驕驍驛驗驟驢驥驤驩驫驪骭骰骼髀髏髑髓體髞髟髢髣髦髯髫髮髴髱髷"],
      ["f2a1", "髻鬆鬘鬚鬟鬢鬣鬥鬧鬨鬩鬪鬮鬯鬲魄魃魏魍魎魑魘魴鮓鮃鮑鮖鮗鮟鮠鮨鮴鯀鯊鮹鯆鯏鯑鯒鯣鯢鯤鯔鯡鰺鯲鯱鯰鰕鰔鰉鰓鰌鰆鰈鰒鰊鰄鰮鰛鰥鰤鰡鰰鱇鰲鱆鰾鱚鱠鱧鱶鱸鳧鳬鳰鴉鴈鳫鴃鴆鴪鴦鶯鴣鴟鵄鴕鴒鵁鴿鴾鵆鵈"],
      ["f3a1", "鵝鵞鵤鵑鵐鵙鵲鶉鶇鶫鵯鵺鶚鶤鶩鶲鷄鷁鶻鶸鶺鷆鷏鷂鷙鷓鷸鷦鷭鷯鷽鸚鸛鸞鹵鹹鹽麁麈麋麌麒麕麑麝麥麩麸麪麭靡黌黎黏黐黔黜點黝黠黥黨黯黴黶黷黹黻黼黽鼇鼈皷鼕鼡鼬鼾齊齒齔齣齟齠齡齦齧齬齪齷齲齶龕龜龠"],
      ["f4a1", "堯槇遙瑤凜熙"],
      ["f9a1", "纊褜鍈銈蓜俉炻昱棈鋹曻彅丨仡仼伀伃伹佖侒侊侚侔俍偀倢俿倞偆偰偂傔僴僘兊兤冝冾凬刕劜劦勀勛匀匇匤卲厓厲叝﨎咜咊咩哿喆坙坥垬埈埇﨏塚增墲夋奓奛奝奣妤妺孖寀甯寘寬尞岦岺峵崧嵓﨑嵂嵭嶸嶹巐弡弴彧德"],
      ["faa1", "忞恝悅悊惞惕愠惲愑愷愰憘戓抦揵摠撝擎敎昀昕昻昉昮昞昤晥晗晙晴晳暙暠暲暿曺朎朗杦枻桒柀栁桄棏﨓楨﨔榘槢樰橫橆橳橾櫢櫤毖氿汜沆汯泚洄涇浯涖涬淏淸淲淼渹湜渧渼溿澈澵濵瀅瀇瀨炅炫焏焄煜煆煇凞燁燾犱"],
      ["fba1", "犾猤猪獷玽珉珖珣珒琇珵琦琪琩琮瑢璉璟甁畯皂皜皞皛皦益睆劯砡硎硤硺礰礼神祥禔福禛竑竧靖竫箞精絈絜綷綠緖繒罇羡羽茁荢荿菇菶葈蒴蕓蕙蕫﨟薰蘒﨡蠇裵訒訷詹誧誾諟諸諶譓譿賰賴贒赶﨣軏﨤逸遧郞都鄕鄧釚"],
      ["fca1", "釗釞釭釮釤釥鈆鈐鈊鈺鉀鈼鉎鉙鉑鈹鉧銧鉷鉸鋧鋗鋙鋐﨧鋕鋠鋓錥錡鋻﨨錞鋿錝錂鍰鍗鎤鏆鏞鏸鐱鑅鑈閒隆﨩隝隯霳霻靃靍靏靑靕顗顥飯飼餧館馞驎髙髜魵魲鮏鮱鮻鰀鵰鵫鶴鸙黑"],
      ["fcf1", "ⅰ", 9, "￢￤＇＂"],
      ["8fa2af", "˘ˇ¸˙˝¯˛˚～΄΅"],
      ["8fa2c2", "¡¦¿"],
      ["8fa2eb", "ºª©®™¤№"],
      ["8fa6e1", "ΆΈΉΊΪ"],
      ["8fa6e7", "Ό"],
      ["8fa6e9", "ΎΫ"],
      ["8fa6ec", "Ώ"],
      ["8fa6f1", "άέήίϊΐόςύϋΰώ"],
      ["8fa7c2", "Ђ", 10, "ЎЏ"],
      ["8fa7f2", "ђ", 10, "ўџ"],
      ["8fa9a1", "ÆĐ"],
      ["8fa9a4", "Ħ"],
      ["8fa9a6", "Ĳ"],
      ["8fa9a8", "ŁĿ"],
      ["8fa9ab", "ŊØŒ"],
      ["8fa9af", "ŦÞ"],
      ["8fa9c1", "æđðħıĳĸłŀŉŋøœßŧþ"],
      ["8faaa1", "ÁÀÄÂĂǍĀĄÅÃĆĈČÇĊĎÉÈËÊĚĖĒĘ"],
      ["8faaba", "ĜĞĢĠĤÍÌÏÎǏİĪĮĨĴĶĹĽĻŃŇŅÑÓÒÖÔǑŐŌÕŔŘŖŚŜŠŞŤŢÚÙÜÛŬǓŰŪŲŮŨǗǛǙǕŴÝŸŶŹŽŻ"],
      ["8faba1", "áàäâăǎāąåãćĉčçċďéèëêěėēęǵĝğ"],
      ["8fabbd", "ġĥíìïîǐ"],
      ["8fabc5", "īįĩĵķĺľļńňņñóòöôǒőōõŕřŗśŝšşťţúùüûŭǔűūųůũǘǜǚǖŵýÿŷźžż"],
      ["8fb0a1", "丂丄丅丌丒丟丣两丨丫丮丯丰丵乀乁乄乇乑乚乜乣乨乩乴乵乹乿亍亖亗亝亯亹仃仐仚仛仠仡仢仨仯仱仳仵份仾仿伀伂伃伈伋伌伒伕伖众伙伮伱你伳伵伷伹伻伾佀佂佈佉佋佌佒佔佖佘佟佣佪佬佮佱佷佸佹佺佽佾侁侂侄"],
      ["8fb1a1", "侅侉侊侌侎侐侒侓侔侗侙侚侞侟侲侷侹侻侼侽侾俀俁俅俆俈俉俋俌俍俏俒俜俠俢俰俲俼俽俿倀倁倄倇倊倌倎倐倓倗倘倛倜倝倞倢倧倮倰倲倳倵偀偁偂偅偆偊偌偎偑偒偓偗偙偟偠偢偣偦偧偪偭偰偱倻傁傃傄傆傊傎傏傐"],
      ["8fb2a1", "傒傓傔傖傛傜傞", 4, "傪傯傰傹傺傽僀僃僄僇僌僎僐僓僔僘僜僝僟僢僤僦僨僩僯僱僶僺僾儃儆儇儈儋儌儍儎僲儐儗儙儛儜儝儞儣儧儨儬儭儯儱儳儴儵儸儹兂兊兏兓兕兗兘兟兤兦兾冃冄冋冎冘冝冡冣冭冸冺冼冾冿凂"],
      ["8fb3a1", "凈减凑凒凓凕凘凞凢凥凮凲凳凴凷刁刂刅划刓刕刖刘刢刨刱刲刵刼剅剉剕剗剘剚剜剟剠剡剦剮剷剸剹劀劂劅劊劌劓劕劖劗劘劚劜劤劥劦劧劯劰劶劷劸劺劻劽勀勄勆勈勌勏勑勔勖勛勜勡勥勨勩勪勬勰勱勴勶勷匀匃匊匋"],
      ["8fb4a1", "匌匑匓匘匛匜匞匟匥匧匨匩匫匬匭匰匲匵匼匽匾卂卌卋卙卛卡卣卥卬卭卲卹卾厃厇厈厎厓厔厙厝厡厤厪厫厯厲厴厵厷厸厺厽叀叅叏叒叓叕叚叝叞叠另叧叵吂吓吚吡吧吨吪启吱吴吵呃呄呇呍呏呞呢呤呦呧呩呫呭呮呴呿"],
      ["8fb5a1", "咁咃咅咈咉咍咑咕咖咜咟咡咦咧咩咪咭咮咱咷咹咺咻咿哆哊响哎哠哪哬哯哶哼哾哿唀唁唅唈唉唌唍唎唕唪唫唲唵唶唻唼唽啁啇啉啊啍啐啑啘啚啛啞啠啡啤啦啿喁喂喆喈喎喏喑喒喓喔喗喣喤喭喲喿嗁嗃嗆嗉嗋嗌嗎嗑嗒"],
      ["8fb6a1", "嗓嗗嗘嗛嗞嗢嗩嗶嗿嘅嘈嘊嘍", 5, "嘙嘬嘰嘳嘵嘷嘹嘻嘼嘽嘿噀噁噃噄噆噉噋噍噏噔噞噠噡噢噣噦噩噭噯噱噲噵嚄嚅嚈嚋嚌嚕嚙嚚嚝嚞嚟嚦嚧嚨嚩嚫嚬嚭嚱嚳嚷嚾囅囉囊囋囏囐囌囍囙囜囝囟囡囤", 4, "囱囫园"],
      ["8fb7a1", "囶囷圁圂圇圊圌圑圕圚圛圝圠圢圣圤圥圩圪圬圮圯圳圴圽圾圿坅坆坌坍坒坢坥坧坨坫坭", 4, "坳坴坵坷坹坺坻坼坾垁垃垌垔垗垙垚垜垝垞垟垡垕垧垨垩垬垸垽埇埈埌埏埕埝埞埤埦埧埩埭埰埵埶埸埽埾埿堃堄堈堉埡"],
      ["8fb8a1", "堌堍堛堞堟堠堦堧堭堲堹堿塉塌塍塏塐塕塟塡塤塧塨塸塼塿墀墁墇墈墉墊墌墍墏墐墔墖墝墠墡墢墦墩墱墲壄墼壂壈壍壎壐壒壔壖壚壝壡壢壩壳夅夆夋夌夒夓夔虁夝夡夣夤夨夯夰夳夵夶夿奃奆奒奓奙奛奝奞奟奡奣奫奭"],
      ["8fb9a1", "奯奲奵奶她奻奼妋妌妎妒妕妗妟妤妧妭妮妯妰妳妷妺妼姁姃姄姈姊姍姒姝姞姟姣姤姧姮姯姱姲姴姷娀娄娌娍娎娒娓娞娣娤娧娨娪娭娰婄婅婇婈婌婐婕婞婣婥婧婭婷婺婻婾媋媐媓媖媙媜媞媟媠媢媧媬媱媲媳媵媸媺媻媿"],
      ["8fbaa1", "嫄嫆嫈嫏嫚嫜嫠嫥嫪嫮嫵嫶嫽嬀嬁嬈嬗嬴嬙嬛嬝嬡嬥嬭嬸孁孋孌孒孖孞孨孮孯孼孽孾孿宁宄宆宊宎宐宑宓宔宖宨宩宬宭宯宱宲宷宺宼寀寁寍寏寖", 4, "寠寯寱寴寽尌尗尞尟尣尦尩尫尬尮尰尲尵尶屙屚屜屢屣屧屨屩"],
      ["8fbba1", "屭屰屴屵屺屻屼屽岇岈岊岏岒岝岟岠岢岣岦岪岲岴岵岺峉峋峒峝峗峮峱峲峴崁崆崍崒崫崣崤崦崧崱崴崹崽崿嵂嵃嵆嵈嵕嵑嵙嵊嵟嵠嵡嵢嵤嵪嵭嵰嵹嵺嵾嵿嶁嶃嶈嶊嶒嶓嶔嶕嶙嶛嶟嶠嶧嶫嶰嶴嶸嶹巃巇巋巐巎巘巙巠巤"],
      ["8fbca1", "巩巸巹帀帇帍帒帔帕帘帟帠帮帨帲帵帾幋幐幉幑幖幘幛幜幞幨幪", 4, "幰庀庋庎庢庤庥庨庪庬庱庳庽庾庿廆廌廋廎廑廒廔廕廜廞廥廫异弆弇弈弎弙弜弝弡弢弣弤弨弫弬弮弰弴弶弻弽弿彀彄彅彇彍彐彔彘彛彠彣彤彧"],
      ["8fbda1", "彯彲彴彵彸彺彽彾徉徍徏徖徜徝徢徧徫徤徬徯徰徱徸忄忇忈忉忋忐", 4, "忞忡忢忨忩忪忬忭忮忯忲忳忶忺忼怇怊怍怓怔怗怘怚怟怤怭怳怵恀恇恈恉恌恑恔恖恗恝恡恧恱恾恿悂悆悈悊悎悑悓悕悘悝悞悢悤悥您悰悱悷"],
      ["8fbea1", "悻悾惂惄惈惉惊惋惎惏惔惕惙惛惝惞惢惥惲惵惸惼惽愂愇愊愌愐", 4, "愖愗愙愜愞愢愪愫愰愱愵愶愷愹慁慅慆慉慞慠慬慲慸慻慼慿憀憁憃憄憋憍憒憓憗憘憜憝憟憠憥憨憪憭憸憹憼懀懁懂懎懏懕懜懝懞懟懡懢懧懩懥"],
      ["8fbfa1", "懬懭懯戁戃戄戇戓戕戜戠戢戣戧戩戫戹戽扂扃扄扆扌扐扑扒扔扖扚扜扤扭扯扳扺扽抍抎抏抐抦抨抳抶抷抺抾抿拄拎拕拖拚拪拲拴拼拽挃挄挊挋挍挐挓挖挘挩挪挭挵挶挹挼捁捂捃捄捆捊捋捎捒捓捔捘捛捥捦捬捭捱捴捵"],
      ["8fc0a1", "捸捼捽捿掂掄掇掊掐掔掕掙掚掞掤掦掭掮掯掽揁揅揈揎揑揓揔揕揜揠揥揪揬揲揳揵揸揹搉搊搐搒搔搘搞搠搢搤搥搩搪搯搰搵搽搿摋摏摑摒摓摔摚摛摜摝摟摠摡摣摭摳摴摻摽撅撇撏撐撑撘撙撛撝撟撡撣撦撨撬撳撽撾撿"],
      ["8fc1a1", "擄擉擊擋擌擎擐擑擕擗擤擥擩擪擭擰擵擷擻擿攁攄攈攉攊攏攓攔攖攙攛攞攟攢攦攩攮攱攺攼攽敃敇敉敐敒敔敟敠敧敫敺敽斁斅斊斒斕斘斝斠斣斦斮斲斳斴斿旂旈旉旎旐旔旖旘旟旰旲旴旵旹旾旿昀昄昈昉昍昑昒昕昖昝"],
      ["8fc2a1", "昞昡昢昣昤昦昩昪昫昬昮昰昱昳昹昷晀晅晆晊晌晑晎晗晘晙晛晜晠晡曻晪晫晬晾晳晵晿晷晸晹晻暀晼暋暌暍暐暒暙暚暛暜暟暠暤暭暱暲暵暻暿曀曂曃曈曌曎曏曔曛曟曨曫曬曮曺朅朇朎朓朙朜朠朢朳朾杅杇杈杌杔杕杝"],
      ["8fc3a1", "杦杬杮杴杶杻极构枎枏枑枓枖枘枙枛枰枱枲枵枻枼枽柹柀柂柃柅柈柉柒柗柙柜柡柦柰柲柶柷桒栔栙栝栟栨栧栬栭栯栰栱栳栻栿桄桅桊桌桕桗桘桛桫桮", 4, "桵桹桺桻桼梂梄梆梈梖梘梚梜梡梣梥梩梪梮梲梻棅棈棌棏"],
      ["8fc4a1", "棐棑棓棖棙棜棝棥棨棪棫棬棭棰棱棵棶棻棼棽椆椉椊椐椑椓椖椗椱椳椵椸椻楂楅楉楎楗楛楣楤楥楦楨楩楬楰楱楲楺楻楿榀榍榒榖榘榡榥榦榨榫榭榯榷榸榺榼槅槈槑槖槗槢槥槮槯槱槳槵槾樀樁樃樏樑樕樚樝樠樤樨樰樲"],
      ["8fc5a1", "樴樷樻樾樿橅橆橉橊橎橐橑橒橕橖橛橤橧橪橱橳橾檁檃檆檇檉檋檑檛檝檞檟檥檫檯檰檱檴檽檾檿櫆櫉櫈櫌櫐櫔櫕櫖櫜櫝櫤櫧櫬櫰櫱櫲櫼櫽欂欃欆欇欉欏欐欑欗欛欞欤欨欫欬欯欵欶欻欿歆歊歍歒歖歘歝歠歧歫歮歰歵歽"],
      ["8fc6a1", "歾殂殅殗殛殟殠殢殣殨殩殬殭殮殰殸殹殽殾毃毄毉毌毖毚毡毣毦毧毮毱毷毹毿氂氄氅氉氍氎氐氒氙氟氦氧氨氬氮氳氵氶氺氻氿汊汋汍汏汒汔汙汛汜汫汭汯汴汶汸汹汻沅沆沇沉沔沕沗沘沜沟沰沲沴泂泆泍泏泐泑泒泔泖"],
      ["8fc7a1", "泚泜泠泧泩泫泬泮泲泴洄洇洊洎洏洑洓洚洦洧洨汧洮洯洱洹洼洿浗浞浟浡浥浧浯浰浼涂涇涑涒涔涖涗涘涪涬涴涷涹涽涿淄淈淊淎淏淖淛淝淟淠淢淥淩淯淰淴淶淼渀渄渞渢渧渲渶渹渻渼湄湅湈湉湋湏湑湒湓湔湗湜湝湞"],
      ["8fc8a1", "湢湣湨湳湻湽溍溓溙溠溧溭溮溱溳溻溿滀滁滃滇滈滊滍滎滏滫滭滮滹滻滽漄漈漊漌漍漖漘漚漛漦漩漪漯漰漳漶漻漼漭潏潑潒潓潗潙潚潝潞潡潢潨潬潽潾澃澇澈澋澌澍澐澒澓澔澖澚澟澠澥澦澧澨澮澯澰澵澶澼濅濇濈濊"],
      ["8fc9a1", "濚濞濨濩濰濵濹濼濽瀀瀅瀆瀇瀍瀗瀠瀣瀯瀴瀷瀹瀼灃灄灈灉灊灋灔灕灝灞灎灤灥灬灮灵灶灾炁炅炆炔", 4, "炛炤炫炰炱炴炷烊烑烓烔烕烖烘烜烤烺焃", 4, "焋焌焏焞焠焫焭焯焰焱焸煁煅煆煇煊煋煐煒煗煚煜煞煠"],
      ["8fcaa1", "煨煹熀熅熇熌熒熚熛熠熢熯熰熲熳熺熿燀燁燄燋燌燓燖燙燚燜燸燾爀爇爈爉爓爗爚爝爟爤爫爯爴爸爹牁牂牃牅牎牏牐牓牕牖牚牜牞牠牣牨牫牮牯牱牷牸牻牼牿犄犉犍犎犓犛犨犭犮犱犴犾狁狇狉狌狕狖狘狟狥狳狴狺狻"],
      ["8fcba1", "狾猂猄猅猇猋猍猒猓猘猙猞猢猤猧猨猬猱猲猵猺猻猽獃獍獐獒獖獘獝獞獟獠獦獧獩獫獬獮獯獱獷獹獼玀玁玃玅玆玎玐玓玕玗玘玜玞玟玠玢玥玦玪玫玭玵玷玹玼玽玿珅珆珉珋珌珏珒珓珖珙珝珡珣珦珧珩珴珵珷珹珺珻珽"],
      ["8fcca1", "珿琀琁琄琇琊琑琚琛琤琦琨", 9, "琹瑀瑃瑄瑆瑇瑋瑍瑑瑒瑗瑝瑢瑦瑧瑨瑫瑭瑮瑱瑲璀璁璅璆璇璉璏璐璑璒璘璙璚璜璟璠璡璣璦璨璩璪璫璮璯璱璲璵璹璻璿瓈瓉瓌瓐瓓瓘瓚瓛瓞瓟瓤瓨瓪瓫瓯瓴瓺瓻瓼瓿甆"],
      ["8fcda1", "甒甖甗甠甡甤甧甩甪甯甶甹甽甾甿畀畃畇畈畎畐畒畗畞畟畡畯畱畹", 5, "疁疅疐疒疓疕疙疜疢疤疴疺疿痀痁痄痆痌痎痏痗痜痟痠痡痤痧痬痮痯痱痹瘀瘂瘃瘄瘇瘈瘊瘌瘏瘒瘓瘕瘖瘙瘛瘜瘝瘞瘣瘥瘦瘩瘭瘲瘳瘵瘸瘹"],
      ["8fcea1", "瘺瘼癊癀癁癃癄癅癉癋癕癙癟癤癥癭癮癯癱癴皁皅皌皍皕皛皜皝皟皠皢", 6, "皪皭皽盁盅盉盋盌盎盔盙盠盦盨盬盰盱盶盹盼眀眆眊眎眒眔眕眗眙眚眜眢眨眭眮眯眴眵眶眹眽眾睂睅睆睊睍睎睏睒睖睗睜睞睟睠睢"],
      ["8fcfa1", "睤睧睪睬睰睲睳睴睺睽瞀瞄瞌瞍瞔瞕瞖瞚瞟瞢瞧瞪瞮瞯瞱瞵瞾矃矉矑矒矕矙矞矟矠矤矦矪矬矰矱矴矸矻砅砆砉砍砎砑砝砡砢砣砭砮砰砵砷硃硄硇硈硌硎硒硜硞硠硡硣硤硨硪确硺硾碊碏碔碘碡碝碞碟碤碨碬碭碰碱碲碳"],
      ["8fd0a1", "碻碽碿磇磈磉磌磎磒磓磕磖磤磛磟磠磡磦磪磲磳礀磶磷磺磻磿礆礌礐礚礜礞礟礠礥礧礩礭礱礴礵礻礽礿祄祅祆祊祋祏祑祔祘祛祜祧祩祫祲祹祻祼祾禋禌禑禓禔禕禖禘禛禜禡禨禩禫禯禱禴禸离秂秄秇秈秊秏秔秖秚秝秞"],
      ["8fd1a1", "秠秢秥秪秫秭秱秸秼稂稃稇稉稊稌稑稕稛稞稡稧稫稭稯稰稴稵稸稹稺穄穅穇穈穌穕穖穙穜穝穟穠穥穧穪穭穵穸穾窀窂窅窆窊窋窐窑窔窞窠窣窬窳窵窹窻窼竆竉竌竎竑竛竨竩竫竬竱竴竻竽竾笇笔笟笣笧笩笪笫笭笮笯笰"],
      ["8fd2a1", "笱笴笽笿筀筁筇筎筕筠筤筦筩筪筭筯筲筳筷箄箉箎箐箑箖箛箞箠箥箬箯箰箲箵箶箺箻箼箽篂篅篈篊篔篖篗篙篚篛篨篪篲篴篵篸篹篺篼篾簁簂簃簄簆簉簋簌簎簏簙簛簠簥簦簨簬簱簳簴簶簹簺籆籊籕籑籒籓籙", 5],
      ["8fd3a1", "籡籣籧籩籭籮籰籲籹籼籽粆粇粏粔粞粠粦粰粶粷粺粻粼粿糄糇糈糉糍糏糓糔糕糗糙糚糝糦糩糫糵紃紇紈紉紏紑紒紓紖紝紞紣紦紪紭紱紼紽紾絀絁絇絈絍絑絓絗絙絚絜絝絥絧絪絰絸絺絻絿綁綂綃綅綆綈綋綌綍綑綖綗綝"],
      ["8fd4a1", "綞綦綧綪綳綶綷綹緂", 4, "緌緍緎緗緙縀緢緥緦緪緫緭緱緵緶緹緺縈縐縑縕縗縜縝縠縧縨縬縭縯縳縶縿繄繅繇繎繐繒繘繟繡繢繥繫繮繯繳繸繾纁纆纇纊纍纑纕纘纚纝纞缼缻缽缾缿罃罄罇罏罒罓罛罜罝罡罣罤罥罦罭"],
      ["8fd5a1", "罱罽罾罿羀羋羍羏羐羑羖羗羜羡羢羦羪羭羴羼羿翀翃翈翎翏翛翟翣翥翨翬翮翯翲翺翽翾翿耇耈耊耍耎耏耑耓耔耖耝耞耟耠耤耦耬耮耰耴耵耷耹耺耼耾聀聄聠聤聦聭聱聵肁肈肎肜肞肦肧肫肸肹胈胍胏胒胔胕胗胘胠胭胮"],
      ["8fd6a1", "胰胲胳胶胹胺胾脃脋脖脗脘脜脞脠脤脧脬脰脵脺脼腅腇腊腌腒腗腠腡腧腨腩腭腯腷膁膐膄膅膆膋膎膖膘膛膞膢膮膲膴膻臋臃臅臊臎臏臕臗臛臝臞臡臤臫臬臰臱臲臵臶臸臹臽臿舀舃舏舓舔舙舚舝舡舢舨舲舴舺艃艄艅艆"],
      ["8fd7a1", "艋艎艏艑艖艜艠艣艧艭艴艻艽艿芀芁芃芄芇芉芊芎芑芔芖芘芚芛芠芡芣芤芧芨芩芪芮芰芲芴芷芺芼芾芿苆苐苕苚苠苢苤苨苪苭苯苶苷苽苾茀茁茇茈茊茋荔茛茝茞茟茡茢茬茭茮茰茳茷茺茼茽荂荃荄荇荍荎荑荕荖荗荰荸"],
      ["8fd8a1", "荽荿莀莂莄莆莍莒莔莕莘莙莛莜莝莦莧莩莬莾莿菀菇菉菏菐菑菔菝荓菨菪菶菸菹菼萁萆萊萏萑萕萙莭萯萹葅葇葈葊葍葏葑葒葖葘葙葚葜葠葤葥葧葪葰葳葴葶葸葼葽蒁蒅蒒蒓蒕蒞蒦蒨蒩蒪蒯蒱蒴蒺蒽蒾蓀蓂蓇蓈蓌蓏蓓"],
      ["8fd9a1", "蓜蓧蓪蓯蓰蓱蓲蓷蔲蓺蓻蓽蔂蔃蔇蔌蔎蔐蔜蔞蔢蔣蔤蔥蔧蔪蔫蔯蔳蔴蔶蔿蕆蕏", 4, "蕖蕙蕜", 6, "蕤蕫蕯蕹蕺蕻蕽蕿薁薅薆薉薋薌薏薓薘薝薟薠薢薥薧薴薶薷薸薼薽薾薿藂藇藊藋藎薭藘藚藟藠藦藨藭藳藶藼"],
      ["8fdaa1", "藿蘀蘄蘅蘍蘎蘐蘑蘒蘘蘙蘛蘞蘡蘧蘩蘶蘸蘺蘼蘽虀虂虆虒虓虖虗虘虙虝虠", 4, "虩虬虯虵虶虷虺蚍蚑蚖蚘蚚蚜蚡蚦蚧蚨蚭蚱蚳蚴蚵蚷蚸蚹蚿蛀蛁蛃蛅蛑蛒蛕蛗蛚蛜蛠蛣蛥蛧蚈蛺蛼蛽蜄蜅蜇蜋蜎蜏蜐蜓蜔蜙蜞蜟蜡蜣"],
      ["8fdba1", "蜨蜮蜯蜱蜲蜹蜺蜼蜽蜾蝀蝃蝅蝍蝘蝝蝡蝤蝥蝯蝱蝲蝻螃", 6, "螋螌螐螓螕螗螘螙螞螠螣螧螬螭螮螱螵螾螿蟁蟈蟉蟊蟎蟕蟖蟙蟚蟜蟟蟢蟣蟤蟪蟫蟭蟱蟳蟸蟺蟿蠁蠃蠆蠉蠊蠋蠐蠙蠒蠓蠔蠘蠚蠛蠜蠞蠟蠨蠭蠮蠰蠲蠵"],
      ["8fdca1", "蠺蠼衁衃衅衈衉衊衋衎衑衕衖衘衚衜衟衠衤衩衱衹衻袀袘袚袛袜袟袠袨袪袺袽袾裀裊", 4, "裑裒裓裛裞裧裯裰裱裵裷褁褆褍褎褏褕褖褘褙褚褜褠褦褧褨褰褱褲褵褹褺褾襀襂襅襆襉襏襒襗襚襛襜襡襢襣襫襮襰襳襵襺"],
      ["8fdda1", "襻襼襽覉覍覐覔覕覛覜覟覠覥覰覴覵覶覷覼觔", 4, "觥觩觫觭觱觳觶觹觽觿訄訅訇訏訑訒訔訕訞訠訢訤訦訫訬訯訵訷訽訾詀詃詅詇詉詍詎詓詖詗詘詜詝詡詥詧詵詶詷詹詺詻詾詿誀誃誆誋誏誐誒誖誗誙誟誧誩誮誯誳"],
      ["8fdea1", "誶誷誻誾諃諆諈諉諊諑諓諔諕諗諝諟諬諰諴諵諶諼諿謅謆謋謑謜謞謟謊謭謰謷謼譂", 4, "譈譒譓譔譙譍譞譣譭譶譸譹譼譾讁讄讅讋讍讏讔讕讜讞讟谸谹谽谾豅豇豉豋豏豑豓豔豗豘豛豝豙豣豤豦豨豩豭豳豵豶豻豾貆"],
      ["8fdfa1", "貇貋貐貒貓貙貛貜貤貹貺賅賆賉賋賏賖賕賙賝賡賨賬賯賰賲賵賷賸賾賿贁贃贉贒贗贛赥赩赬赮赿趂趄趈趍趐趑趕趞趟趠趦趫趬趯趲趵趷趹趻跀跅跆跇跈跊跎跑跔跕跗跙跤跥跧跬跰趼跱跲跴跽踁踄踅踆踋踑踔踖踠踡踢"],
      ["8fe0a1", "踣踦踧踱踳踶踷踸踹踽蹀蹁蹋蹍蹎蹏蹔蹛蹜蹝蹞蹡蹢蹩蹬蹭蹯蹰蹱蹹蹺蹻躂躃躉躐躒躕躚躛躝躞躢躧躩躭躮躳躵躺躻軀軁軃軄軇軏軑軔軜軨軮軰軱軷軹軺軭輀輂輇輈輏輐輖輗輘輞輠輡輣輥輧輨輬輭輮輴輵輶輷輺轀轁"],
      ["8fe1a1", "轃轇轏轑", 4, "轘轝轞轥辝辠辡辤辥辦辵辶辸达迀迁迆迊迋迍运迒迓迕迠迣迤迨迮迱迵迶迻迾适逄逈逌逘逛逨逩逯逪逬逭逳逴逷逿遃遄遌遛遝遢遦遧遬遰遴遹邅邈邋邌邎邐邕邗邘邙邛邠邡邢邥邰邲邳邴邶邽郌邾郃"],
      ["8fe2a1", "郄郅郇郈郕郗郘郙郜郝郟郥郒郶郫郯郰郴郾郿鄀鄄鄅鄆鄈鄍鄐鄔鄖鄗鄘鄚鄜鄞鄠鄥鄢鄣鄧鄩鄮鄯鄱鄴鄶鄷鄹鄺鄼鄽酃酇酈酏酓酗酙酚酛酡酤酧酭酴酹酺酻醁醃醅醆醊醎醑醓醔醕醘醞醡醦醨醬醭醮醰醱醲醳醶醻醼醽醿"],
      ["8fe3a1", "釂釃釅釓釔釗釙釚釞釤釥釩釪釬", 5, "釷釹釻釽鈀鈁鈄鈅鈆鈇鈉鈊鈌鈐鈒鈓鈖鈘鈜鈝鈣鈤鈥鈦鈨鈮鈯鈰鈳鈵鈶鈸鈹鈺鈼鈾鉀鉂鉃鉆鉇鉊鉍鉎鉏鉑鉘鉙鉜鉝鉠鉡鉥鉧鉨鉩鉮鉯鉰鉵", 4, "鉻鉼鉽鉿銈銉銊銍銎銒銗"],
      ["8fe4a1", "銙銟銠銤銥銧銨銫銯銲銶銸銺銻銼銽銿", 4, "鋅鋆鋇鋈鋋鋌鋍鋎鋐鋓鋕鋗鋘鋙鋜鋝鋟鋠鋡鋣鋥鋧鋨鋬鋮鋰鋹鋻鋿錀錂錈錍錑錔錕錜錝錞錟錡錤錥錧錩錪錳錴錶錷鍇鍈鍉鍐鍑鍒鍕鍗鍘鍚鍞鍤鍥鍧鍩鍪鍭鍯鍰鍱鍳鍴鍶"],
      ["8fe5a1", "鍺鍽鍿鎀鎁鎂鎈鎊鎋鎍鎏鎒鎕鎘鎛鎞鎡鎣鎤鎦鎨鎫鎴鎵鎶鎺鎩鏁鏄鏅鏆鏇鏉", 4, "鏓鏙鏜鏞鏟鏢鏦鏧鏹鏷鏸鏺鏻鏽鐁鐂鐄鐈鐉鐍鐎鐏鐕鐖鐗鐟鐮鐯鐱鐲鐳鐴鐻鐿鐽鑃鑅鑈鑊鑌鑕鑙鑜鑟鑡鑣鑨鑫鑭鑮鑯鑱鑲钄钃镸镹"],
      ["8fe6a1", "镾閄閈閌閍閎閝閞閟閡閦閩閫閬閴閶閺閽閿闆闈闉闋闐闑闒闓闙闚闝闞闟闠闤闦阝阞阢阤阥阦阬阱阳阷阸阹阺阼阽陁陒陔陖陗陘陡陮陴陻陼陾陿隁隂隃隄隉隑隖隚隝隟隤隥隦隩隮隯隳隺雊雒嶲雘雚雝雞雟雩雯雱雺霂"],
      ["8fe7a1", "霃霅霉霚霛霝霡霢霣霨霱霳靁靃靊靎靏靕靗靘靚靛靣靧靪靮靳靶靷靸靻靽靿鞀鞉鞕鞖鞗鞙鞚鞞鞟鞢鞬鞮鞱鞲鞵鞶鞸鞹鞺鞼鞾鞿韁韄韅韇韉韊韌韍韎韐韑韔韗韘韙韝韞韠韛韡韤韯韱韴韷韸韺頇頊頙頍頎頔頖頜頞頠頣頦"],
      ["8fe8a1", "頫頮頯頰頲頳頵頥頾顄顇顊顑顒顓顖顗顙顚顢顣顥顦顪顬颫颭颮颰颴颷颸颺颻颿飂飅飈飌飡飣飥飦飧飪飳飶餂餇餈餑餕餖餗餚餛餜餟餢餦餧餫餱", 4, "餹餺餻餼饀饁饆饇饈饍饎饔饘饙饛饜饞饟饠馛馝馟馦馰馱馲馵"],
      ["8fe9a1", "馹馺馽馿駃駉駓駔駙駚駜駞駧駪駫駬駰駴駵駹駽駾騂騃騄騋騌騐騑騖騞騠騢騣騤騧騭騮騳騵騶騸驇驁驄驊驋驌驎驑驔驖驝骪骬骮骯骲骴骵骶骹骻骾骿髁髃髆髈髎髐髒髕髖髗髛髜髠髤髥髧髩髬髲髳髵髹髺髽髿", 4],
      ["8feaa1", "鬄鬅鬈鬉鬋鬌鬍鬎鬐鬒鬖鬙鬛鬜鬠鬦鬫鬭鬳鬴鬵鬷鬹鬺鬽魈魋魌魕魖魗魛魞魡魣魥魦魨魪", 4, "魳魵魷魸魹魿鮀鮄鮅鮆鮇鮉鮊鮋鮍鮏鮐鮔鮚鮝鮞鮦鮧鮩鮬鮰鮱鮲鮷鮸鮻鮼鮾鮿鯁鯇鯈鯎鯐鯗鯘鯝鯟鯥鯧鯪鯫鯯鯳鯷鯸"],
      ["8feba1", "鯹鯺鯽鯿鰀鰂鰋鰏鰑鰖鰘鰙鰚鰜鰞鰢鰣鰦", 4, "鰱鰵鰶鰷鰽鱁鱃鱄鱅鱉鱊鱎鱏鱐鱓鱔鱖鱘鱛鱝鱞鱟鱣鱩鱪鱜鱫鱨鱮鱰鱲鱵鱷鱻鳦鳲鳷鳹鴋鴂鴑鴗鴘鴜鴝鴞鴯鴰鴲鴳鴴鴺鴼鵅鴽鵂鵃鵇鵊鵓鵔鵟鵣鵢鵥鵩鵪鵫鵰鵶鵷鵻"],
      ["8feca1", "鵼鵾鶃鶄鶆鶊鶍鶎鶒鶓鶕鶖鶗鶘鶡鶪鶬鶮鶱鶵鶹鶼鶿鷃鷇鷉鷊鷔鷕鷖鷗鷚鷞鷟鷠鷥鷧鷩鷫鷮鷰鷳鷴鷾鸊鸂鸇鸎鸐鸑鸒鸕鸖鸙鸜鸝鹺鹻鹼麀麂麃麄麅麇麎麏麖麘麛麞麤麨麬麮麯麰麳麴麵黆黈黋黕黟黤黧黬黭黮黰黱黲黵"],
      ["8feda1", "黸黿鼂鼃鼉鼏鼐鼑鼒鼔鼖鼗鼙鼚鼛鼟鼢鼦鼪鼫鼯鼱鼲鼴鼷鼹鼺鼼鼽鼿齁齃", 4, "齓齕齖齗齘齚齝齞齨齩齭", 4, "齳齵齺齽龏龐龑龒龔龖龗龞龡龢龣龥"]
    ];
  }
});

// ../../node_modules/encoding/node_modules/iconv-lite/encodings/tables/cp936.json
var require_cp936 = __commonJS({
  "../../node_modules/encoding/node_modules/iconv-lite/encodings/tables/cp936.json"(exports, module) {
    module.exports = [
      ["0", "\0", 127, "€"],
      ["8140", "丂丄丅丆丏丒丗丟丠両丣並丩丮丯丱丳丵丷丼乀乁乂乄乆乊乑乕乗乚乛乢乣乤乥乧乨乪", 5, "乲乴", 9, "乿", 6, "亇亊"],
      ["8180", "亐亖亗亙亜亝亞亣亪亯亰亱亴亶亷亸亹亼亽亾仈仌仏仐仒仚仛仜仠仢仦仧仩仭仮仯仱仴仸仹仺仼仾伀伂", 6, "伋伌伒", 4, "伜伝伡伣伨伩伬伭伮伱伳伵伷伹伻伾", 4, "佄佅佇", 5, "佒佔佖佡佢佦佨佪佫佭佮佱佲併佷佸佹佺佽侀侁侂侅來侇侊侌侎侐侒侓侕侖侘侙侚侜侞侟価侢"],
      ["8240", "侤侫侭侰", 4, "侶", 8, "俀俁係俆俇俈俉俋俌俍俒", 4, "俙俛俠俢俤俥俧俫俬俰俲俴俵俶俷俹俻俼俽俿", 11],
      ["8280", "個倎倐們倓倕倖倗倛倝倞倠倢倣値倧倫倯", 10, "倻倽倿偀偁偂偄偅偆偉偊偋偍偐", 4, "偖偗偘偙偛偝", 7, "偦", 5, "偭", 8, "偸偹偺偼偽傁傂傃傄傆傇傉傊傋傌傎", 20, "傤傦傪傫傭", 4, "傳", 6, "傼"],
      ["8340", "傽", 17, "僐", 5, "僗僘僙僛", 10, "僨僩僪僫僯僰僱僲僴僶", 4, "僼", 9, "儈"],
      ["8380", "儉儊儌", 5, "儓", 13, "儢", 28, "兂兇兊兌兎兏児兒兓兗兘兙兛兝", 4, "兣兤兦內兩兪兯兲兺兾兿冃冄円冇冊冋冎冏冐冑冓冔冘冚冝冞冟冡冣冦", 4, "冭冮冴冸冹冺冾冿凁凂凃凅凈凊凍凎凐凒", 5],
      ["8440", "凘凙凚凜凞凟凢凣凥", 5, "凬凮凱凲凴凷凾刄刅刉刋刌刏刐刓刔刕刜刞刟刡刢刣別刦刧刪刬刯刱刲刴刵刼刾剄", 5, "剋剎剏剒剓剕剗剘"],
      ["8480", "剙剚剛剝剟剠剢剣剤剦剨剫剬剭剮剰剱剳", 9, "剾劀劃", 4, "劉", 6, "劑劒劔", 6, "劜劤劥劦劧劮劯劰労", 9, "勀勁勂勄勅勆勈勊勌勍勎勏勑勓勔動勗務", 5, "勠勡勢勣勥", 10, "勱", 7, "勻勼勽匁匂匃匄匇匉匊匋匌匎"],
      ["8540", "匑匒匓匔匘匛匜匞匟匢匤匥匧匨匩匫匬匭匯", 9, "匼匽區卂卄卆卋卌卍卐協単卙卛卝卥卨卪卬卭卲卶卹卻卼卽卾厀厁厃厇厈厊厎厏"],
      ["8580", "厐", 4, "厖厗厙厛厜厞厠厡厤厧厪厫厬厭厯", 6, "厷厸厹厺厼厽厾叀參", 4, "収叏叐叒叓叕叚叜叝叞叡叢叧叴叺叾叿吀吂吅吇吋吔吘吙吚吜吢吤吥吪吰吳吶吷吺吽吿呁呂呄呅呇呉呌呍呎呏呑呚呝", 4, "呣呥呧呩", 7, "呴呹呺呾呿咁咃咅咇咈咉咊咍咑咓咗咘咜咞咟咠咡"],
      ["8640", "咢咥咮咰咲咵咶咷咹咺咼咾哃哅哊哋哖哘哛哠", 4, "哫哬哯哰哱哴", 5, "哻哾唀唂唃唄唅唈唊", 4, "唒唓唕", 5, "唜唝唞唟唡唥唦"],
      ["8680", "唨唩唫唭唲唴唵唶唸唹唺唻唽啀啂啅啇啈啋", 4, "啑啒啓啔啗", 4, "啝啞啟啠啢啣啨啩啫啯", 5, "啹啺啽啿喅喆喌喍喎喐喒喓喕喖喗喚喛喞喠", 6, "喨", 8, "喲喴営喸喺喼喿", 4, "嗆嗇嗈嗊嗋嗎嗏嗐嗕嗗", 4, "嗞嗠嗢嗧嗩嗭嗮嗰嗱嗴嗶嗸", 4, "嗿嘂嘃嘄嘅"],
      ["8740", "嘆嘇嘊嘋嘍嘐", 7, "嘙嘚嘜嘝嘠嘡嘢嘥嘦嘨嘩嘪嘫嘮嘯嘰嘳嘵嘷嘸嘺嘼嘽嘾噀", 11, "噏", 4, "噕噖噚噛噝", 4],
      ["8780", "噣噥噦噧噭噮噯噰噲噳噴噵噷噸噹噺噽", 7, "嚇", 6, "嚐嚑嚒嚔", 14, "嚤", 10, "嚰", 6, "嚸嚹嚺嚻嚽", 12, "囋", 8, "囕囖囘囙囜団囥", 5, "囬囮囯囲図囶囷囸囻囼圀圁圂圅圇國", 6],
      ["8840", "園", 9, "圝圞圠圡圢圤圥圦圧圫圱圲圴", 4, "圼圽圿坁坃坄坅坆坈坉坋坒", 4, "坘坙坢坣坥坧坬坮坰坱坲坴坵坸坹坺坽坾坿垀"],
      ["8880", "垁垇垈垉垊垍", 4, "垔", 6, "垜垝垞垟垥垨垪垬垯垰垱垳垵垶垷垹", 8, "埄", 6, "埌埍埐埑埓埖埗埛埜埞埡埢埣埥", 7, "埮埰埱埲埳埵埶執埻埼埾埿堁堃堄堅堈堉堊堌堎堏堐堒堓堔堖堗堘堚堛堜堝堟堢堣堥", 4, "堫", 4, "報堲堳場堶", 7],
      ["8940", "堾", 5, "塅", 6, "塎塏塐塒塓塕塖塗塙", 4, "塟", 5, "塦", 4, "塭", 16, "塿墂墄墆墇墈墊墋墌"],
      ["8980", "墍", 4, "墔", 4, "墛墜墝墠", 7, "墪", 17, "墽墾墿壀壂壃壄壆", 10, "壒壓壔壖", 13, "壥", 5, "壭壯壱売壴壵壷壸壺", 7, "夃夅夆夈", 4, "夎夐夑夒夓夗夘夛夝夞夠夡夢夣夦夨夬夰夲夳夵夶夻"],
      ["8a40", "夽夾夿奀奃奅奆奊奌奍奐奒奓奙奛", 4, "奡奣奤奦", 12, "奵奷奺奻奼奾奿妀妅妉妋妌妎妏妐妑妔妕妘妚妛妜妝妟妠妡妢妦"],
      ["8a80", "妧妬妭妰妱妳", 5, "妺妼妽妿", 6, "姇姈姉姌姍姎姏姕姖姙姛姞", 4, "姤姦姧姩姪姫姭", 11, "姺姼姽姾娀娂娊娋娍娎娏娐娒娔娕娖娗娙娚娛娝娞娡娢娤娦娧娨娪", 6, "娳娵娷", 4, "娽娾娿婁", 4, "婇婈婋", 9, "婖婗婘婙婛", 5],
      ["8b40", "婡婣婤婥婦婨婩婫", 8, "婸婹婻婼婽婾媀", 17, "媓", 6, "媜", 13, "媫媬"],
      ["8b80", "媭", 4, "媴媶媷媹", 4, "媿嫀嫃", 5, "嫊嫋嫍", 4, "嫓嫕嫗嫙嫚嫛嫝嫞嫟嫢嫤嫥嫧嫨嫪嫬", 4, "嫲", 22, "嬊", 11, "嬘", 25, "嬳嬵嬶嬸", 7, "孁", 6],
      ["8c40", "孈", 7, "孒孖孞孠孡孧孨孫孭孮孯孲孴孶孷學孹孻孼孾孿宂宆宊宍宎宐宑宒宔宖実宧宨宩宬宭宮宯宱宲宷宺宻宼寀寁寃寈寉寊寋寍寎寏"],
      ["8c80", "寑寔", 8, "寠寢寣實寧審", 4, "寯寱", 6, "寽対尀専尃尅將專尋尌對導尐尒尓尗尙尛尞尟尠尡尣尦尨尩尪尫尭尮尯尰尲尳尵尶尷屃屄屆屇屌屍屒屓屔屖屗屘屚屛屜屝屟屢層屧", 6, "屰屲", 6, "屻屼屽屾岀岃", 4, "岉岊岋岎岏岒岓岕岝", 4, "岤", 4],
      ["8d40", "岪岮岯岰岲岴岶岹岺岻岼岾峀峂峃峅", 5, "峌", 5, "峓", 5, "峚", 6, "峢峣峧峩峫峬峮峯峱", 9, "峼", 4],
      ["8d80", "崁崄崅崈", 5, "崏", 4, "崕崗崘崙崚崜崝崟", 4, "崥崨崪崫崬崯", 4, "崵", 7, "崿", 7, "嵈嵉嵍", 10, "嵙嵚嵜嵞", 10, "嵪嵭嵮嵰嵱嵲嵳嵵", 12, "嶃", 21, "嶚嶛嶜嶞嶟嶠"],
      ["8e40", "嶡", 21, "嶸", 12, "巆", 6, "巎", 12, "巜巟巠巣巤巪巬巭"],
      ["8e80", "巰巵巶巸", 4, "巿帀帄帇帉帊帋帍帎帒帓帗帞", 7, "帨", 4, "帯帰帲", 4, "帹帺帾帿幀幁幃幆", 5, "幍", 6, "幖", 4, "幜幝幟幠幣", 14, "幵幷幹幾庁庂広庅庈庉庌庍庎庒庘庛庝庡庢庣庤庨", 4, "庮", 4, "庴庺庻庼庽庿", 6],
      ["8f40", "廆廇廈廋", 5, "廔廕廗廘廙廚廜", 11, "廩廫", 8, "廵廸廹廻廼廽弅弆弇弉弌弍弎弐弒弔弖弙弚弜弝弞弡弢弣弤"],
      ["8f80", "弨弫弬弮弰弲", 6, "弻弽弾弿彁", 14, "彑彔彙彚彛彜彞彟彠彣彥彧彨彫彮彯彲彴彵彶彸彺彽彾彿徃徆徍徎徏徑従徔徖徚徛徝從徟徠徢", 5, "復徫徬徯", 5, "徶徸徹徺徻徾", 4, "忇忈忊忋忎忓忔忕忚忛応忞忟忢忣忥忦忨忩忬忯忰忲忳忴忶忷忹忺忼怇"],
      ["9040", "怈怉怋怌怐怑怓怗怘怚怞怟怢怣怤怬怭怮怰", 4, "怶", 4, "怽怾恀恄", 6, "恌恎恏恑恓恔恖恗恘恛恜恞恟恠恡恥恦恮恱恲恴恵恷恾悀"],
      ["9080", "悁悂悅悆悇悈悊悋悎悏悐悑悓悕悗悘悙悜悞悡悢悤悥悧悩悪悮悰悳悵悶悷悹悺悽", 7, "惇惈惉惌", 4, "惒惓惔惖惗惙惛惞惡", 4, "惪惱惲惵惷惸惻", 4, "愂愃愄愅愇愊愋愌愐", 4, "愖愗愘愙愛愜愝愞愡愢愥愨愩愪愬", 18, "慀", 6],
      ["9140", "慇慉態慍慏慐慒慓慔慖", 6, "慞慟慠慡慣慤慥慦慩", 6, "慱慲慳慴慶慸", 18, "憌憍憏", 4, "憕"],
      ["9180", "憖", 6, "憞", 8, "憪憫憭", 9, "憸", 5, "憿懀懁懃", 4, "應懌", 4, "懓懕", 16, "懧", 13, "懶", 8, "戀", 5, "戇戉戓戔戙戜戝戞戠戣戦戧戨戩戫戭戯戰戱戲戵戶戸", 4, "扂扄扅扆扊"],
      ["9240", "扏扐払扖扗扙扚扜", 6, "扤扥扨扱扲扴扵扷扸扺扻扽抁抂抃抅抆抇抈抋", 5, "抔抙抜抝択抣抦抧抩抪抭抮抯抰抲抳抴抶抷抸抺抾拀拁"],
      ["9280", "拃拋拏拑拕拝拞拠拡拤拪拫拰拲拵拸拹拺拻挀挃挄挅挆挊挋挌挍挏挐挒挓挔挕挗挘挙挜挦挧挩挬挭挮挰挱挳", 5, "挻挼挾挿捀捁捄捇捈捊捑捒捓捔捖", 7, "捠捤捥捦捨捪捫捬捯捰捲捳捴捵捸捹捼捽捾捿掁掃掄掅掆掋掍掑掓掔掕掗掙", 6, "採掤掦掫掯掱掲掵掶掹掻掽掿揀"],
      ["9340", "揁揂揃揅揇揈揊揋揌揑揓揔揕揗", 6, "揟揢揤", 4, "揫揬揮揯揰揱揳揵揷揹揺揻揼揾搃搄搆", 4, "損搎搑搒搕", 5, "搝搟搢搣搤"],
      ["9380", "搥搧搨搩搫搮", 5, "搵", 4, "搻搼搾摀摂摃摉摋", 6, "摓摕摖摗摙", 4, "摟", 7, "摨摪摫摬摮", 9, "摻", 6, "撃撆撈", 8, "撓撔撗撘撚撛撜撝撟", 4, "撥撦撧撨撪撫撯撱撲撳撴撶撹撻撽撾撿擁擃擄擆", 6, "擏擑擓擔擕擖擙據"],
      ["9440", "擛擜擝擟擠擡擣擥擧", 24, "攁", 7, "攊", 7, "攓", 4, "攙", 8],
      ["9480", "攢攣攤攦", 4, "攬攭攰攱攲攳攷攺攼攽敀", 4, "敆敇敊敋敍敎敐敒敓敔敗敘敚敜敟敠敡敤敥敧敨敩敪敭敮敯敱敳敵敶數", 14, "斈斉斊斍斎斏斒斔斕斖斘斚斝斞斠斢斣斦斨斪斬斮斱", 7, "斺斻斾斿旀旂旇旈旉旊旍旐旑旓旔旕旘", 7, "旡旣旤旪旫"],
      ["9540", "旲旳旴旵旸旹旻", 4, "昁昄昅昇昈昉昋昍昐昑昒昖昗昘昚昛昜昞昡昢昣昤昦昩昪昫昬昮昰昲昳昷", 4, "昽昿晀時晄", 6, "晍晎晐晑晘"],
      ["9580", "晙晛晜晝晞晠晢晣晥晧晩", 4, "晱晲晳晵晸晹晻晼晽晿暀暁暃暅暆暈暉暊暋暍暎暏暐暒暓暔暕暘", 4, "暞", 8, "暩", 4, "暯", 4, "暵暶暷暸暺暻暼暽暿", 25, "曚曞", 7, "曧曨曪", 5, "曱曵曶書曺曻曽朁朂會"],
      ["9640", "朄朅朆朇朌朎朏朑朒朓朖朘朙朚朜朞朠", 5, "朧朩朮朰朲朳朶朷朸朹朻朼朾朿杁杄杅杇杊杋杍杒杔杕杗", 4, "杝杢杣杤杦杧杫杬杮東杴杶"],
      ["9680", "杸杹杺杻杽枀枂枃枅枆枈枊枌枍枎枏枑枒枓枔枖枙枛枟枠枡枤枦枩枬枮枱枲枴枹", 7, "柂柅", 9, "柕柖柗柛柟柡柣柤柦柧柨柪柫柭柮柲柵", 7, "柾栁栂栃栄栆栍栐栒栔栕栘", 4, "栞栟栠栢", 6, "栫", 6, "栴栵栶栺栻栿桇桋桍桏桒桖", 5],
      ["9740", "桜桝桞桟桪桬", 7, "桵桸", 8, "梂梄梇", 7, "梐梑梒梔梕梖梘", 9, "梣梤梥梩梪梫梬梮梱梲梴梶梷梸"],
      ["9780", "梹", 6, "棁棃", 5, "棊棌棎棏棐棑棓棔棖棗棙棛", 4, "棡棢棤", 9, "棯棲棳棴棶棷棸棻棽棾棿椀椂椃椄椆", 4, "椌椏椑椓", 11, "椡椢椣椥", 7, "椮椯椱椲椳椵椶椷椸椺椻椼椾楀楁楃", 16, "楕楖楘楙楛楜楟"],
      ["9840", "楡楢楤楥楧楨楩楪楬業楯楰楲", 4, "楺楻楽楾楿榁榃榅榊榋榌榎", 5, "榖榗榙榚榝", 9, "榩榪榬榮榯榰榲榳榵榶榸榹榺榼榽"],
      ["9880", "榾榿槀槂", 7, "構槍槏槑槒槓槕", 5, "槜槝槞槡", 11, "槮槯槰槱槳", 9, "槾樀", 9, "樋", 11, "標", 5, "樠樢", 5, "権樫樬樭樮樰樲樳樴樶", 6, "樿", 4, "橅橆橈", 7, "橑", 6, "橚"],
      ["9940", "橜", 4, "橢橣橤橦", 10, "橲", 6, "橺橻橽橾橿檁檂檃檅", 8, "檏檒", 4, "檘", 7, "檡", 5],
      ["9980", "檧檨檪檭", 114, "欥欦欨", 6],
      ["9a40", "欯欰欱欳欴欵欶欸欻欼欽欿歀歁歂歄歅歈歊歋歍", 11, "歚", 7, "歨歩歫", 13, "歺歽歾歿殀殅殈"],
      ["9a80", "殌殎殏殐殑殔殕殗殘殙殜", 4, "殢", 7, "殫", 7, "殶殸", 6, "毀毃毄毆", 4, "毌毎毐毑毘毚毜", 4, "毢", 7, "毬毭毮毰毱毲毴毶毷毸毺毻毼毾", 6, "氈", 4, "氎氒気氜氝氞氠氣氥氫氬氭氱氳氶氷氹氺氻氼氾氿汃汄汅汈汋", 4, "汑汒汓汖汘"],
      ["9b40", "汙汚汢汣汥汦汧汫", 4, "汱汳汵汷汸決汻汼汿沀沄沇沊沋沍沎沑沒沕沖沗沘沚沜沝沞沠沢沨沬沯沰沴沵沶沷沺泀況泂泃泆泇泈泋泍泎泏泑泒泘"],
      ["9b80", "泙泚泜泝泟泤泦泧泩泬泭泲泴泹泿洀洂洃洅洆洈洉洊洍洏洐洑洓洔洕洖洘洜洝洟", 5, "洦洨洩洬洭洯洰洴洶洷洸洺洿浀浂浄浉浌浐浕浖浗浘浛浝浟浡浢浤浥浧浨浫浬浭浰浱浲浳浵浶浹浺浻浽", 4, "涃涄涆涇涊涋涍涏涐涒涖", 4, "涜涢涥涬涭涰涱涳涴涶涷涹", 5, "淁淂淃淈淉淊"],
      ["9c40", "淍淎淏淐淒淓淔淕淗淚淛淜淟淢淣淥淧淨淩淪淭淯淰淲淴淵淶淸淺淽", 7, "渆渇済渉渋渏渒渓渕渘渙減渜渞渟渢渦渧渨渪測渮渰渱渳渵"],
      ["9c80", "渶渷渹渻", 7, "湅", 7, "湏湐湑湒湕湗湙湚湜湝湞湠", 10, "湬湭湯", 14, "満溁溂溄溇溈溊", 4, "溑", 6, "溙溚溛溝溞溠溡溣溤溦溨溩溫溬溭溮溰溳溵溸溹溼溾溿滀滃滄滅滆滈滉滊滌滍滎滐滒滖滘滙滛滜滝滣滧滪", 5],
      ["9d40", "滰滱滲滳滵滶滷滸滺", 7, "漃漄漅漇漈漊", 4, "漐漑漒漖", 9, "漡漢漣漥漦漧漨漬漮漰漲漴漵漷", 6, "漿潀潁潂"],
      ["9d80", "潃潄潅潈潉潊潌潎", 9, "潙潚潛潝潟潠潡潣潤潥潧", 5, "潯潰潱潳潵潶潷潹潻潽", 6, "澅澆澇澊澋澏", 12, "澝澞澟澠澢", 4, "澨", 10, "澴澵澷澸澺", 5, "濁濃", 5, "濊", 6, "濓", 10, "濟濢濣濤濥"],
      ["9e40", "濦", 7, "濰", 32, "瀒", 7, "瀜", 6, "瀤", 6],
      ["9e80", "瀫", 9, "瀶瀷瀸瀺", 17, "灍灎灐", 13, "灟", 11, "灮灱灲灳灴灷灹灺灻災炁炂炃炄炆炇炈炋炌炍炏炐炑炓炗炘炚炛炞", 12, "炰炲炴炵炶為炾炿烄烅烆烇烉烋", 12, "烚"],
      ["9f40", "烜烝烞烠烡烢烣烥烪烮烰", 6, "烸烺烻烼烾", 10, "焋", 4, "焑焒焔焗焛", 10, "焧", 7, "焲焳焴"],
      ["9f80", "焵焷", 13, "煆煇煈煉煋煍煏", 12, "煝煟", 4, "煥煩", 4, "煯煰煱煴煵煶煷煹煻煼煾", 5, "熅", 4, "熋熌熍熎熐熑熒熓熕熖熗熚", 4, "熡", 6, "熩熪熫熭", 5, "熴熶熷熸熺", 8, "燄", 9, "燏", 4],
      ["a040", "燖", 9, "燡燢燣燤燦燨", 5, "燯", 9, "燺", 11, "爇", 19],
      ["a080", "爛爜爞", 9, "爩爫爭爮爯爲爳爴爺爼爾牀", 6, "牉牊牋牎牏牐牑牓牔牕牗牘牚牜牞牠牣牤牥牨牪牫牬牭牰牱牳牴牶牷牸牻牼牽犂犃犅", 4, "犌犎犐犑犓", 11, "犠", 11, "犮犱犲犳犵犺", 6, "狅狆狇狉狊狋狌狏狑狓狔狕狖狘狚狛"],
      ["a1a1", "　、。·ˉˇ¨〃々—～‖…‘’“”〔〕〈", 7, "〖〗【】±×÷∶∧∨∑∏∪∩∈∷√⊥∥∠⌒⊙∫∮≡≌≈∽∝≠≮≯≤≥∞∵∴♂♀°′″℃＄¤￠￡‰§№☆★○●◎◇◆□■△▲※→←↑↓〓"],
      ["a2a1", "ⅰ", 9],
      ["a2b1", "⒈", 19, "⑴", 19, "①", 9],
      ["a2e5", "㈠", 9],
      ["a2f1", "Ⅰ", 11],
      ["a3a1", "！＂＃￥％", 88, "￣"],
      ["a4a1", "ぁ", 82],
      ["a5a1", "ァ", 85],
      ["a6a1", "Α", 16, "Σ", 6],
      ["a6c1", "α", 16, "σ", 6],
      ["a6e0", "︵︶︹︺︿﹀︽︾﹁﹂﹃﹄"],
      ["a6ee", "︻︼︷︸︱"],
      ["a6f4", "︳︴"],
      ["a7a1", "А", 5, "ЁЖ", 25],
      ["a7d1", "а", 5, "ёж", 25],
      ["a840", "ˊˋ˙–―‥‵℅℉↖↗↘↙∕∟∣≒≦≧⊿═", 35, "▁", 6],
      ["a880", "█", 7, "▓▔▕▼▽◢◣◤◥☉⊕〒〝〞"],
      ["a8a1", "āáǎàēéěèīíǐìōóǒòūúǔùǖǘǚǜüêɑ"],
      ["a8bd", "ńň"],
      ["a8c0", "ɡ"],
      ["a8c5", "ㄅ", 36],
      ["a940", "〡", 8, "㊣㎎㎏㎜㎝㎞㎡㏄㏎㏑㏒㏕︰￢￤"],
      ["a959", "℡㈱"],
      ["a95c", "‐"],
      ["a960", "ー゛゜ヽヾ〆ゝゞ﹉", 9, "﹔﹕﹖﹗﹙", 8],
      ["a980", "﹢", 4, "﹨﹩﹪﹫"],
      ["a996", "〇"],
      ["a9a4", "─", 75],
      ["aa40", "狜狝狟狢", 5, "狪狫狵狶狹狽狾狿猀猂猄", 5, "猋猌猍猏猐猑猒猔猘猙猚猟猠猣猤猦猧猨猭猯猰猲猳猵猶猺猻猼猽獀", 8],
      ["aa80", "獉獊獋獌獎獏獑獓獔獕獖獘", 7, "獡", 10, "獮獰獱"],
      ["ab40", "獲", 11, "獿", 4, "玅玆玈玊玌玍玏玐玒玓玔玕玗玘玙玚玜玝玞玠玡玣", 5, "玪玬玭玱玴玵玶玸玹玼玽玾玿珁珃", 4],
      ["ab80", "珋珌珎珒", 6, "珚珛珜珝珟珡珢珣珤珦珨珪珫珬珮珯珰珱珳", 4],
      ["ac40", "珸", 10, "琄琇琈琋琌琍琎琑", 8, "琜", 5, "琣琤琧琩琫琭琯琱琲琷", 4, "琽琾琿瑀瑂", 11],
      ["ac80", "瑎", 6, "瑖瑘瑝瑠", 12, "瑮瑯瑱", 4, "瑸瑹瑺"],
      ["ad40", "瑻瑼瑽瑿璂璄璅璆璈璉璊璌璍璏璑", 10, "璝璟", 7, "璪", 15, "璻", 12],
      ["ad80", "瓈", 9, "瓓", 8, "瓝瓟瓡瓥瓧", 6, "瓰瓱瓲"],
      ["ae40", "瓳瓵瓸", 6, "甀甁甂甃甅", 7, "甎甐甒甔甕甖甗甛甝甞甠", 4, "甦甧甪甮甴甶甹甼甽甿畁畂畃畄畆畇畉畊畍畐畑畒畓畕畖畗畘"],
      ["ae80", "畝", 7, "畧畨畩畫", 6, "畳畵當畷畺", 4, "疀疁疂疄疅疇"],
      ["af40", "疈疉疊疌疍疎疐疓疕疘疛疜疞疢疦", 4, "疭疶疷疺疻疿痀痁痆痋痌痎痏痐痑痓痗痙痚痜痝痟痠痡痥痩痬痭痮痯痲痳痵痶痷痸痺痻痽痾瘂瘄瘆瘇"],
      ["af80", "瘈瘉瘋瘍瘎瘏瘑瘒瘓瘔瘖瘚瘜瘝瘞瘡瘣瘧瘨瘬瘮瘯瘱瘲瘶瘷瘹瘺瘻瘽癁療癄"],
      ["b040", "癅", 6, "癎", 5, "癕癗", 4, "癝癟癠癡癢癤", 6, "癬癭癮癰", 7, "癹発發癿皀皁皃皅皉皊皌皍皏皐皒皔皕皗皘皚皛"],
      ["b080", "皜", 7, "皥", 8, "皯皰皳皵", 9, "盀盁盃啊阿埃挨哎唉哀皑癌蔼矮艾碍爱隘鞍氨安俺按暗岸胺案肮昂盎凹敖熬翱袄傲奥懊澳芭捌扒叭吧笆八疤巴拔跋靶把耙坝霸罢爸白柏百摆佰败拜稗斑班搬扳般颁板版扮拌伴瓣半办绊邦帮梆榜膀绑棒磅蚌镑傍谤苞胞包褒剥"],
      ["b140", "盄盇盉盋盌盓盕盙盚盜盝盞盠", 4, "盦", 7, "盰盳盵盶盷盺盻盽盿眀眂眃眅眆眊県眎", 10, "眛眜眝眞眡眣眤眥眧眪眫"],
      ["b180", "眬眮眰", 4, "眹眻眽眾眿睂睄睅睆睈", 7, "睒", 7, "睜薄雹保堡饱宝抱报暴豹鲍爆杯碑悲卑北辈背贝钡倍狈备惫焙被奔苯本笨崩绷甭泵蹦迸逼鼻比鄙笔彼碧蓖蔽毕毙毖币庇痹闭敝弊必辟壁臂避陛鞭边编贬扁便变卞辨辩辫遍标彪膘表鳖憋别瘪彬斌濒滨宾摈兵冰柄丙秉饼炳"],
      ["b240", "睝睞睟睠睤睧睩睪睭", 11, "睺睻睼瞁瞂瞃瞆", 5, "瞏瞐瞓", 11, "瞡瞣瞤瞦瞨瞫瞭瞮瞯瞱瞲瞴瞶", 4],
      ["b280", "瞼瞾矀", 12, "矎", 8, "矘矙矚矝", 4, "矤病并玻菠播拨钵波博勃搏铂箔伯帛舶脖膊渤泊驳捕卜哺补埠不布步簿部怖擦猜裁材才财睬踩采彩菜蔡餐参蚕残惭惨灿苍舱仓沧藏操糙槽曹草厕策侧册测层蹭插叉茬茶查碴搽察岔差诧拆柴豺搀掺蝉馋谗缠铲产阐颤昌猖"],
      ["b340", "矦矨矪矯矰矱矲矴矵矷矹矺矻矼砃", 5, "砊砋砎砏砐砓砕砙砛砞砠砡砢砤砨砪砫砮砯砱砲砳砵砶砽砿硁硂硃硄硆硈硉硊硋硍硏硑硓硔硘硙硚"],
      ["b380", "硛硜硞", 11, "硯", 7, "硸硹硺硻硽", 6, "场尝常长偿肠厂敞畅唱倡超抄钞朝嘲潮巢吵炒车扯撤掣彻澈郴臣辰尘晨忱沉陈趁衬撑称城橙成呈乘程惩澄诚承逞骋秤吃痴持匙池迟弛驰耻齿侈尺赤翅斥炽充冲虫崇宠抽酬畴踌稠愁筹仇绸瞅丑臭初出橱厨躇锄雏滁除楚"],
      ["b440", "碄碅碆碈碊碋碏碐碒碔碕碖碙碝碞碠碢碤碦碨", 7, "碵碶碷碸確碻碼碽碿磀磂磃磄磆磇磈磌磍磎磏磑磒磓磖磗磘磚", 9],
      ["b480", "磤磥磦磧磩磪磫磭", 4, "磳磵磶磸磹磻", 5, "礂礃礄礆", 6, "础储矗搐触处揣川穿椽传船喘串疮窗幢床闯创吹炊捶锤垂春椿醇唇淳纯蠢戳绰疵茨磁雌辞慈瓷词此刺赐次聪葱囱匆从丛凑粗醋簇促蹿篡窜摧崔催脆瘁粹淬翠村存寸磋撮搓措挫错搭达答瘩打大呆歹傣戴带殆代贷袋待逮"],
      ["b540", "礍", 5, "礔", 9, "礟", 4, "礥", 14, "礵", 4, "礽礿祂祃祄祅祇祊", 8, "祔祕祘祙祡祣"],
      ["b580", "祤祦祩祪祫祬祮祰", 6, "祹祻", 4, "禂禃禆禇禈禉禋禌禍禎禐禑禒怠耽担丹单郸掸胆旦氮但惮淡诞弹蛋当挡党荡档刀捣蹈倒岛祷导到稻悼道盗德得的蹬灯登等瞪凳邓堤低滴迪敌笛狄涤翟嫡抵底地蒂第帝弟递缔颠掂滇碘点典靛垫电佃甸店惦奠淀殿碉叼雕凋刁掉吊钓调跌爹碟蝶迭谍叠"],
      ["b640", "禓", 6, "禛", 11, "禨", 10, "禴", 4, "禼禿秂秄秅秇秈秊秌秎秏秐秓秔秖秗秙", 5, "秠秡秢秥秨秪"],
      ["b680", "秬秮秱", 6, "秹秺秼秾秿稁稄稅稇稈稉稊稌稏", 4, "稕稖稘稙稛稜丁盯叮钉顶鼎锭定订丢东冬董懂动栋侗恫冻洞兜抖斗陡豆逗痘都督毒犊独读堵睹赌杜镀肚度渡妒端短锻段断缎堆兑队对墩吨蹲敦顿囤钝盾遁掇哆多夺垛躲朵跺舵剁惰堕蛾峨鹅俄额讹娥恶厄扼遏鄂饿恩而儿耳尔饵洱二"],
      ["b740", "稝稟稡稢稤", 14, "稴稵稶稸稺稾穀", 5, "穇", 9, "穒", 4, "穘", 16],
      ["b780", "穩", 6, "穱穲穳穵穻穼穽穾窂窅窇窉窊窋窌窎窏窐窓窔窙窚窛窞窡窢贰发罚筏伐乏阀法珐藩帆番翻樊矾钒繁凡烦反返范贩犯饭泛坊芳方肪房防妨仿访纺放菲非啡飞肥匪诽吠肺废沸费芬酚吩氛分纷坟焚汾粉奋份忿愤粪丰封枫蜂峰锋风疯烽逢冯缝讽奉凤佛否夫敷肤孵扶拂辐幅氟符伏俘服"],
      ["b840", "窣窤窧窩窪窫窮", 4, "窴", 10, "竀", 10, "竌", 9, "竗竘竚竛竜竝竡竢竤竧", 5, "竮竰竱竲竳"],
      ["b880", "竴", 4, "竻竼竾笀笁笂笅笇笉笌笍笎笐笒笓笖笗笘笚笜笝笟笡笢笣笧笩笭浮涪福袱弗甫抚辅俯釜斧脯腑府腐赴副覆赋复傅付阜父腹负富讣附妇缚咐噶嘎该改概钙盖溉干甘杆柑竿肝赶感秆敢赣冈刚钢缸肛纲岗港杠篙皋高膏羔糕搞镐稿告哥歌搁戈鸽胳疙割革葛格蛤阁隔铬个各给根跟耕更庚羹"],
      ["b940", "笯笰笲笴笵笶笷笹笻笽笿", 5, "筆筈筊筍筎筓筕筗筙筜筞筟筡筣", 10, "筯筰筳筴筶筸筺筼筽筿箁箂箃箄箆", 6, "箎箏"],
      ["b980", "箑箒箓箖箘箙箚箛箞箟箠箣箤箥箮箯箰箲箳箵箶箷箹", 7, "篂篃範埂耿梗工攻功恭龚供躬公宫弓巩汞拱贡共钩勾沟苟狗垢构购够辜菇咕箍估沽孤姑鼓古蛊骨谷股故顾固雇刮瓜剐寡挂褂乖拐怪棺关官冠观管馆罐惯灌贯光广逛瑰规圭硅归龟闺轨鬼诡癸桂柜跪贵刽辊滚棍锅郭国果裹过哈"],
      ["ba40", "篅篈築篊篋篍篎篏篐篒篔", 4, "篛篜篞篟篠篢篣篤篧篨篩篫篬篭篯篰篲", 4, "篸篹篺篻篽篿", 7, "簈簉簊簍簎簐", 5, "簗簘簙"],
      ["ba80", "簚", 4, "簠", 5, "簨簩簫", 12, "簹", 5, "籂骸孩海氦亥害骇酣憨邯韩含涵寒函喊罕翰撼捍旱憾悍焊汗汉夯杭航壕嚎豪毫郝好耗号浩呵喝荷菏核禾和何合盒貉阂河涸赫褐鹤贺嘿黑痕很狠恨哼亨横衡恒轰哄烘虹鸿洪宏弘红喉侯猴吼厚候后呼乎忽瑚壶葫胡蝴狐糊湖"],
      ["bb40", "籃", 9, "籎", 36, "籵", 5, "籾", 9],
      ["bb80", "粈粊", 6, "粓粔粖粙粚粛粠粡粣粦粧粨粩粫粬粭粯粰粴", 4, "粺粻弧虎唬护互沪户花哗华猾滑画划化话槐徊怀淮坏欢环桓还缓换患唤痪豢焕涣宦幻荒慌黄磺蝗簧皇凰惶煌晃幌恍谎灰挥辉徽恢蛔回毁悔慧卉惠晦贿秽会烩汇讳诲绘荤昏婚魂浑混豁活伙火获或惑霍货祸击圾基机畸稽积箕"],
      ["bc40", "粿糀糂糃糄糆糉糋糎", 6, "糘糚糛糝糞糡", 6, "糩", 5, "糰", 7, "糹糺糼", 13, "紋", 5],
      ["bc80", "紑", 14, "紡紣紤紥紦紨紩紪紬紭紮細", 6, "肌饥迹激讥鸡姬绩缉吉极棘辑籍集及急疾汲即嫉级挤几脊己蓟技冀季伎祭剂悸济寄寂计记既忌际妓继纪嘉枷夹佳家加荚颊贾甲钾假稼价架驾嫁歼监坚尖笺间煎兼肩艰奸缄茧检柬碱硷拣捡简俭剪减荐槛鉴践贱见键箭件"],
      ["bd40", "紷", 54, "絯", 7],
      ["bd80", "絸", 32, "健舰剑饯渐溅涧建僵姜将浆江疆蒋桨奖讲匠酱降蕉椒礁焦胶交郊浇骄娇嚼搅铰矫侥脚狡角饺缴绞剿教酵轿较叫窖揭接皆秸街阶截劫节桔杰捷睫竭洁结解姐戒藉芥界借介疥诫届巾筋斤金今津襟紧锦仅谨进靳晋禁近烬浸"],
      ["be40", "継", 12, "綧", 6, "綯", 42],
      ["be80", "線", 32, "尽劲荆兢茎睛晶鲸京惊精粳经井警景颈静境敬镜径痉靖竟竞净炯窘揪究纠玖韭久灸九酒厩救旧臼舅咎就疚鞠拘狙疽居驹菊局咀矩举沮聚拒据巨具距踞锯俱句惧炬剧捐鹃娟倦眷卷绢撅攫抉掘倔爵觉决诀绝均菌钧军君峻"],
      ["bf40", "緻", 62],
      ["bf80", "縺縼", 4, "繂", 4, "繈", 21, "俊竣浚郡骏喀咖卡咯开揩楷凯慨刊堪勘坎砍看康慷糠扛抗亢炕考拷烤靠坷苛柯棵磕颗科壳咳可渴克刻客课肯啃垦恳坑吭空恐孔控抠口扣寇枯哭窟苦酷库裤夸垮挎跨胯块筷侩快宽款匡筐狂框矿眶旷况亏盔岿窥葵奎魁傀"],
      ["c040", "繞", 35, "纃", 23, "纜纝纞"],
      ["c080", "纮纴纻纼绖绤绬绹缊缐缞缷缹缻", 6, "罃罆", 9, "罒罓馈愧溃坤昆捆困括扩廓阔垃拉喇蜡腊辣啦莱来赖蓝婪栏拦篮阑兰澜谰揽览懒缆烂滥琅榔狼廊郎朗浪捞劳牢老佬姥酪烙涝勒乐雷镭蕾磊累儡垒擂肋类泪棱楞冷厘梨犁黎篱狸离漓理李里鲤礼莉荔吏栗丽厉励砾历利傈例俐"],
      ["c140", "罖罙罛罜罝罞罠罣", 4, "罫罬罭罯罰罳罵罶罷罸罺罻罼罽罿羀羂", 7, "羋羍羏", 4, "羕", 4, "羛羜羠羢羣羥羦羨", 6, "羱"],
      ["c180", "羳", 4, "羺羻羾翀翂翃翄翆翇翈翉翋翍翏", 4, "翖翗翙", 5, "翢翣痢立粒沥隶力璃哩俩联莲连镰廉怜涟帘敛脸链恋炼练粮凉梁粱良两辆量晾亮谅撩聊僚疗燎寥辽潦了撂镣廖料列裂烈劣猎琳林磷霖临邻鳞淋凛赁吝拎玲菱零龄铃伶羚凌灵陵岭领另令溜琉榴硫馏留刘瘤流柳六龙聋咙笼窿"],
      ["c240", "翤翧翨翪翫翬翭翯翲翴", 6, "翽翾翿耂耇耈耉耊耎耏耑耓耚耛耝耞耟耡耣耤耫", 5, "耲耴耹耺耼耾聀聁聄聅聇聈聉聎聏聐聑聓聕聖聗"],
      ["c280", "聙聛", 13, "聫", 5, "聲", 11, "隆垄拢陇楼娄搂篓漏陋芦卢颅庐炉掳卤虏鲁麓碌露路赂鹿潞禄录陆戮驴吕铝侣旅履屡缕虑氯律率滤绿峦挛孪滦卵乱掠略抡轮伦仑沦纶论萝螺罗逻锣箩骡裸落洛骆络妈麻玛码蚂马骂嘛吗埋买麦卖迈脉瞒馒蛮满蔓曼慢漫"],
      ["c340", "聾肁肂肅肈肊肍", 5, "肔肕肗肙肞肣肦肧肨肬肰肳肵肶肸肹肻胅胇", 4, "胏", 6, "胘胟胠胢胣胦胮胵胷胹胻胾胿脀脁脃脄脅脇脈脋"],
      ["c380", "脌脕脗脙脛脜脝脟", 12, "脭脮脰脳脴脵脷脹", 4, "脿谩芒茫盲氓忙莽猫茅锚毛矛铆卯茂冒帽貌贸么玫枚梅酶霉煤没眉媒镁每美昧寐妹媚门闷们萌蒙檬盟锰猛梦孟眯醚靡糜迷谜弥米秘觅泌蜜密幂棉眠绵冕免勉娩缅面苗描瞄藐秒渺庙妙蔑灭民抿皿敏悯闽明螟鸣铭名命谬摸"],
      ["c440", "腀", 5, "腇腉腍腎腏腒腖腗腘腛", 4, "腡腢腣腤腦腨腪腫腬腯腲腳腵腶腷腸膁膃", 4, "膉膋膌膍膎膐膒", 5, "膙膚膞", 4, "膤膥"],
      ["c480", "膧膩膫", 7, "膴", 5, "膼膽膾膿臄臅臇臈臉臋臍", 6, "摹蘑模膜磨摩魔抹末莫墨默沫漠寞陌谋牟某拇牡亩姆母墓暮幕募慕木目睦牧穆拿哪呐钠那娜纳氖乃奶耐奈南男难囊挠脑恼闹淖呢馁内嫩能妮霓倪泥尼拟你匿腻逆溺蔫拈年碾撵捻念娘酿鸟尿捏聂孽啮镊镍涅您柠狞凝宁"],
      ["c540", "臔", 14, "臤臥臦臨臩臫臮", 4, "臵", 5, "臽臿舃與", 4, "舎舏舑舓舕", 5, "舝舠舤舥舦舧舩舮舲舺舼舽舿"],
      ["c580", "艀艁艂艃艅艆艈艊艌艍艎艐", 7, "艙艛艜艝艞艠", 7, "艩拧泞牛扭钮纽脓浓农弄奴努怒女暖虐疟挪懦糯诺哦欧鸥殴藕呕偶沤啪趴爬帕怕琶拍排牌徘湃派攀潘盘磐盼畔判叛乓庞旁耪胖抛咆刨炮袍跑泡呸胚培裴赔陪配佩沛喷盆砰抨烹澎彭蓬棚硼篷膨朋鹏捧碰坯砒霹批披劈琵毗"],
      ["c640", "艪艫艬艭艱艵艶艷艸艻艼芀芁芃芅芆芇芉芌芐芓芔芕芖芚芛芞芠芢芣芧芲芵芶芺芻芼芿苀苂苃苅苆苉苐苖苙苚苝苢苧苨苩苪苬苭苮苰苲苳苵苶苸"],
      ["c680", "苺苼", 4, "茊茋茍茐茒茓茖茘茙茝", 9, "茩茪茮茰茲茷茻茽啤脾疲皮匹痞僻屁譬篇偏片骗飘漂瓢票撇瞥拼频贫品聘乒坪苹萍平凭瓶评屏坡泼颇婆破魄迫粕剖扑铺仆莆葡菩蒲埔朴圃普浦谱曝瀑期欺栖戚妻七凄漆柒沏其棋奇歧畦崎脐齐旗祈祁骑起岂乞企启契砌器气迄弃汽泣讫掐"],
      ["c740", "茾茿荁荂荄荅荈荊", 4, "荓荕", 4, "荝荢荰", 6, "荹荺荾", 6, "莇莈莊莋莌莍莏莐莑莔莕莖莗莙莚莝莟莡", 6, "莬莭莮"],
      ["c780", "莯莵莻莾莿菂菃菄菆菈菉菋菍菎菐菑菒菓菕菗菙菚菛菞菢菣菤菦菧菨菫菬菭恰洽牵扦钎铅千迁签仟谦乾黔钱钳前潜遣浅谴堑嵌欠歉枪呛腔羌墙蔷强抢橇锹敲悄桥瞧乔侨巧鞘撬翘峭俏窍切茄且怯窃钦侵亲秦琴勤芹擒禽寝沁青轻氢倾卿清擎晴氰情顷请庆琼穷秋丘邱球求囚酋泅趋区蛆曲躯屈驱渠"],
      ["c840", "菮華菳", 4, "菺菻菼菾菿萀萂萅萇萈萉萊萐萒", 5, "萙萚萛萞", 5, "萩", 7, "萲", 5, "萹萺萻萾", 7, "葇葈葉"],
      ["c880", "葊", 6, "葒", 4, "葘葝葞葟葠葢葤", 4, "葪葮葯葰葲葴葷葹葻葼取娶龋趣去圈颧权醛泉全痊拳犬券劝缺炔瘸却鹊榷确雀裙群然燃冉染瓤壤攘嚷让饶扰绕惹热壬仁人忍韧任认刃妊纫扔仍日戎茸蓉荣融熔溶容绒冗揉柔肉茹蠕儒孺如辱乳汝入褥软阮蕊瑞锐闰润若弱撒洒萨腮鳃塞赛三叁"],
      ["c940", "葽", 4, "蒃蒄蒅蒆蒊蒍蒏", 7, "蒘蒚蒛蒝蒞蒟蒠蒢", 12, "蒰蒱蒳蒵蒶蒷蒻蒼蒾蓀蓂蓃蓅蓆蓇蓈蓋蓌蓎蓏蓒蓔蓕蓗"],
      ["c980", "蓘", 4, "蓞蓡蓢蓤蓧", 4, "蓭蓮蓯蓱", 10, "蓽蓾蔀蔁蔂伞散桑嗓丧搔骚扫嫂瑟色涩森僧莎砂杀刹沙纱傻啥煞筛晒珊苫杉山删煽衫闪陕擅赡膳善汕扇缮墒伤商赏晌上尚裳梢捎稍烧芍勺韶少哨邵绍奢赊蛇舌舍赦摄射慑涉社设砷申呻伸身深娠绅神沈审婶甚肾慎渗声生甥牲升绳"],
      ["ca40", "蔃", 8, "蔍蔎蔏蔐蔒蔔蔕蔖蔘蔙蔛蔜蔝蔞蔠蔢", 8, "蔭", 9, "蔾", 4, "蕄蕅蕆蕇蕋", 10],
      ["ca80", "蕗蕘蕚蕛蕜蕝蕟", 4, "蕥蕦蕧蕩", 8, "蕳蕵蕶蕷蕸蕼蕽蕿薀薁省盛剩胜圣师失狮施湿诗尸虱十石拾时什食蚀实识史矢使屎驶始式示士世柿事拭誓逝势是嗜噬适仕侍释饰氏市恃室视试收手首守寿授售受瘦兽蔬枢梳殊抒输叔舒淑疏书赎孰熟薯暑曙署蜀黍鼠属术述树束戍竖墅庶数漱"],
      ["cb40", "薂薃薆薈", 6, "薐", 10, "薝", 6, "薥薦薧薩薫薬薭薱", 5, "薸薺", 6, "藂", 6, "藊", 4, "藑藒"],
      ["cb80", "藔藖", 5, "藝", 6, "藥藦藧藨藪", 14, "恕刷耍摔衰甩帅栓拴霜双爽谁水睡税吮瞬顺舜说硕朔烁斯撕嘶思私司丝死肆寺嗣四伺似饲巳松耸怂颂送宋讼诵搜艘擞嗽苏酥俗素速粟僳塑溯宿诉肃酸蒜算虽隋随绥髓碎岁穗遂隧祟孙损笋蓑梭唆缩琐索锁所塌他它她塔"],
      ["cc40", "藹藺藼藽藾蘀", 4, "蘆", 10, "蘒蘓蘔蘕蘗", 15, "蘨蘪", 13, "蘹蘺蘻蘽蘾蘿虀"],
      ["cc80", "虁", 11, "虒虓處", 4, "虛虜虝號虠虡虣", 7, "獭挞蹋踏胎苔抬台泰酞太态汰坍摊贪瘫滩坛檀痰潭谭谈坦毯袒碳探叹炭汤塘搪堂棠膛唐糖倘躺淌趟烫掏涛滔绦萄桃逃淘陶讨套特藤腾疼誊梯剔踢锑提题蹄啼体替嚏惕涕剃屉天添填田甜恬舔腆挑条迢眺跳贴铁帖厅听烃"],
      ["cd40", "虭虯虰虲", 6, "蚃", 6, "蚎", 4, "蚔蚖", 5, "蚞", 4, "蚥蚦蚫蚭蚮蚲蚳蚷蚸蚹蚻", 4, "蛁蛂蛃蛅蛈蛌蛍蛒蛓蛕蛖蛗蛚蛜"],
      ["cd80", "蛝蛠蛡蛢蛣蛥蛦蛧蛨蛪蛫蛬蛯蛵蛶蛷蛺蛻蛼蛽蛿蜁蜄蜅蜆蜋蜌蜎蜏蜐蜑蜔蜖汀廷停亭庭挺艇通桐酮瞳同铜彤童桶捅筒统痛偷投头透凸秃突图徒途涂屠土吐兔湍团推颓腿蜕褪退吞屯臀拖托脱鸵陀驮驼椭妥拓唾挖哇蛙洼娃瓦袜歪外豌弯湾玩顽丸烷完碗挽晚皖惋宛婉万腕汪王亡枉网往旺望忘妄威"],
      ["ce40", "蜙蜛蜝蜟蜠蜤蜦蜧蜨蜪蜫蜬蜭蜯蜰蜲蜳蜵蜶蜸蜹蜺蜼蜽蝀", 6, "蝊蝋蝍蝏蝐蝑蝒蝔蝕蝖蝘蝚", 5, "蝡蝢蝦", 7, "蝯蝱蝲蝳蝵"],
      ["ce80", "蝷蝸蝹蝺蝿螀螁螄螆螇螉螊螌螎", 4, "螔螕螖螘", 6, "螠", 4, "巍微危韦违桅围唯惟为潍维苇萎委伟伪尾纬未蔚味畏胃喂魏位渭谓尉慰卫瘟温蚊文闻纹吻稳紊问嗡翁瓮挝蜗涡窝我斡卧握沃巫呜钨乌污诬屋无芜梧吾吴毋武五捂午舞伍侮坞戊雾晤物勿务悟误昔熙析西硒矽晰嘻吸锡牺"],
      ["cf40", "螥螦螧螩螪螮螰螱螲螴螶螷螸螹螻螼螾螿蟁", 4, "蟇蟈蟉蟌", 4, "蟔", 6, "蟜蟝蟞蟟蟡蟢蟣蟤蟦蟧蟨蟩蟫蟬蟭蟯", 9],
      ["cf80", "蟺蟻蟼蟽蟿蠀蠁蠂蠄", 5, "蠋", 7, "蠔蠗蠘蠙蠚蠜", 4, "蠣稀息希悉膝夕惜熄烯溪汐犀檄袭席习媳喜铣洗系隙戏细瞎虾匣霞辖暇峡侠狭下厦夏吓掀锨先仙鲜纤咸贤衔舷闲涎弦嫌显险现献县腺馅羡宪陷限线相厢镶香箱襄湘乡翔祥详想响享项巷橡像向象萧硝霄削哮嚣销消宵淆晓"],
      ["d040", "蠤", 13, "蠳", 5, "蠺蠻蠽蠾蠿衁衂衃衆", 5, "衎", 5, "衕衖衘衚", 6, "衦衧衪衭衯衱衳衴衵衶衸衹衺"],
      ["d080", "衻衼袀袃袆袇袉袊袌袎袏袐袑袓袔袕袗", 4, "袝", 4, "袣袥", 5, "小孝校肖啸笑效楔些歇蝎鞋协挟携邪斜胁谐写械卸蟹懈泄泻谢屑薪芯锌欣辛新忻心信衅星腥猩惺兴刑型形邢行醒幸杏性姓兄凶胸匈汹雄熊休修羞朽嗅锈秀袖绣墟戌需虚嘘须徐许蓄酗叙旭序畜恤絮婿绪续轩喧宣悬旋玄"],
      ["d140", "袬袮袯袰袲", 4, "袸袹袺袻袽袾袿裀裃裄裇裈裊裋裌裍裏裐裑裓裖裗裚", 4, "裠裡裦裧裩", 6, "裲裵裶裷裺裻製裿褀褁褃", 5],
      ["d180", "褉褋", 4, "褑褔", 4, "褜", 4, "褢褣褤褦褧褨褩褬褭褮褯褱褲褳褵褷选癣眩绚靴薛学穴雪血勋熏循旬询寻驯巡殉汛训讯逊迅压押鸦鸭呀丫芽牙蚜崖衙涯雅哑亚讶焉咽阉烟淹盐严研蜒岩延言颜阎炎沿奄掩眼衍演艳堰燕厌砚雁唁彦焰宴谚验殃央鸯秧杨扬佯疡羊洋阳氧仰痒养样漾邀腰妖瑶"],
      ["d240", "褸", 8, "襂襃襅", 24, "襠", 5, "襧", 19, "襼"],
      ["d280", "襽襾覀覂覄覅覇", 26, "摇尧遥窑谣姚咬舀药要耀椰噎耶爷野冶也页掖业叶曳腋夜液一壹医揖铱依伊衣颐夷遗移仪胰疑沂宜姨彝椅蚁倚已乙矣以艺抑易邑屹亿役臆逸肄疫亦裔意毅忆义益溢诣议谊译异翼翌绎茵荫因殷音阴姻吟银淫寅饮尹引隐"],
      ["d340", "覢", 30, "觃觍觓觔觕觗觘觙觛觝觟觠觡觢觤觧觨觩觪觬觭觮觰觱觲觴", 6],
      ["d380", "觻", 4, "訁", 5, "計", 21, "印英樱婴鹰应缨莹萤营荧蝇迎赢盈影颖硬映哟拥佣臃痈庸雍踊蛹咏泳涌永恿勇用幽优悠忧尤由邮铀犹油游酉有友右佑釉诱又幼迂淤于盂榆虞愚舆余俞逾鱼愉渝渔隅予娱雨与屿禹宇语羽玉域芋郁吁遇喻峪御愈欲狱育誉"],
      ["d440", "訞", 31, "訿", 8, "詉", 21],
      ["d480", "詟", 25, "詺", 6, "浴寓裕预豫驭鸳渊冤元垣袁原援辕园员圆猿源缘远苑愿怨院曰约越跃钥岳粤月悦阅耘云郧匀陨允运蕴酝晕韵孕匝砸杂栽哉灾宰载再在咱攒暂赞赃脏葬遭糟凿藻枣早澡蚤躁噪造皂灶燥责择则泽贼怎增憎曾赠扎喳渣札轧"],
      ["d540", "誁", 7, "誋", 7, "誔", 46],
      ["d580", "諃", 32, "铡闸眨栅榨咋乍炸诈摘斋宅窄债寨瞻毡詹粘沾盏斩辗崭展蘸栈占战站湛绽樟章彰漳张掌涨杖丈帐账仗胀瘴障招昭找沼赵照罩兆肇召遮折哲蛰辙者锗蔗这浙珍斟真甄砧臻贞针侦枕疹诊震振镇阵蒸挣睁征狰争怔整拯正政"],
      ["d640", "諤", 34, "謈", 27],
      ["d680", "謤謥謧", 30, "帧症郑证芝枝支吱蜘知肢脂汁之织职直植殖执值侄址指止趾只旨纸志挚掷至致置帜峙制智秩稚质炙痔滞治窒中盅忠钟衷终种肿重仲众舟周州洲诌粥轴肘帚咒皱宙昼骤珠株蛛朱猪诸诛逐竹烛煮拄瞩嘱主著柱助蛀贮铸筑"],
      ["d740", "譆", 31, "譧", 4, "譭", 25],
      ["d780", "讇", 24, "讬讱讻诇诐诪谉谞住注祝驻抓爪拽专砖转撰赚篆桩庄装妆撞壮状椎锥追赘坠缀谆准捉拙卓桌琢茁酌啄着灼浊兹咨资姿滋淄孜紫仔籽滓子自渍字鬃棕踪宗综总纵邹走奏揍租足卒族祖诅阻组钻纂嘴醉最罪尊遵昨左佐柞做作坐座"],
      ["d840", "谸", 8, "豂豃豄豅豈豊豋豍", 7, "豖豗豘豙豛", 5, "豣", 6, "豬", 6, "豴豵豶豷豻", 6, "貃貄貆貇"],
      ["d880", "貈貋貍", 6, "貕貖貗貙", 20, "亍丌兀丐廿卅丕亘丞鬲孬噩丨禺丿匕乇夭爻卮氐囟胤馗毓睾鼗丶亟鼐乜乩亓芈孛啬嘏仄厍厝厣厥厮靥赝匚叵匦匮匾赜卦卣刂刈刎刭刳刿剀剌剞剡剜蒯剽劂劁劐劓冂罔亻仃仉仂仨仡仫仞伛仳伢佤仵伥伧伉伫佞佧攸佚佝"],
      ["d940", "貮", 62],
      ["d980", "賭", 32, "佟佗伲伽佶佴侑侉侃侏佾佻侪佼侬侔俦俨俪俅俚俣俜俑俟俸倩偌俳倬倏倮倭俾倜倌倥倨偾偃偕偈偎偬偻傥傧傩傺僖儆僭僬僦僮儇儋仝氽佘佥俎龠汆籴兮巽黉馘冁夔勹匍訇匐凫夙兕亠兖亳衮袤亵脔裒禀嬴蠃羸冫冱冽冼"],
      ["da40", "贎", 14, "贠赑赒赗赟赥赨赩赪赬赮赯赱赲赸", 8, "趂趃趆趇趈趉趌", 4, "趒趓趕", 9, "趠趡"],
      ["da80", "趢趤", 12, "趲趶趷趹趻趽跀跁跂跅跇跈跉跊跍跐跒跓跔凇冖冢冥讠讦讧讪讴讵讷诂诃诋诏诎诒诓诔诖诘诙诜诟诠诤诨诩诮诰诳诶诹诼诿谀谂谄谇谌谏谑谒谔谕谖谙谛谘谝谟谠谡谥谧谪谫谮谯谲谳谵谶卩卺阝阢阡阱阪阽阼陂陉陔陟陧陬陲陴隈隍隗隰邗邛邝邙邬邡邴邳邶邺"],
      ["db40", "跕跘跙跜跠跡跢跥跦跧跩跭跮跰跱跲跴跶跼跾", 6, "踆踇踈踋踍踎踐踑踒踓踕", 7, "踠踡踤", 4, "踫踭踰踲踳踴踶踷踸踻踼踾"],
      ["db80", "踿蹃蹅蹆蹌", 4, "蹓", 5, "蹚", 11, "蹧蹨蹪蹫蹮蹱邸邰郏郅邾郐郄郇郓郦郢郜郗郛郫郯郾鄄鄢鄞鄣鄱鄯鄹酃酆刍奂劢劬劭劾哿勐勖勰叟燮矍廴凵凼鬯厶弁畚巯坌垩垡塾墼壅壑圩圬圪圳圹圮圯坜圻坂坩垅坫垆坼坻坨坭坶坳垭垤垌垲埏垧垴垓垠埕埘埚埙埒垸埴埯埸埤埝"],
      ["dc40", "蹳蹵蹷", 4, "蹽蹾躀躂躃躄躆躈", 6, "躑躒躓躕", 6, "躝躟", 11, "躭躮躰躱躳", 6, "躻", 7],
      ["dc80", "軃", 10, "軏", 21, "堋堍埽埭堀堞堙塄堠塥塬墁墉墚墀馨鼙懿艹艽艿芏芊芨芄芎芑芗芙芫芸芾芰苈苊苣芘芷芮苋苌苁芩芴芡芪芟苄苎芤苡茉苷苤茏茇苜苴苒苘茌苻苓茑茚茆茔茕苠苕茜荑荛荜茈莒茼茴茱莛荞茯荏荇荃荟荀茗荠茭茺茳荦荥"],
      ["dd40", "軥", 62],
      ["dd80", "輤", 32, "荨茛荩荬荪荭荮莰荸莳莴莠莪莓莜莅荼莶莩荽莸荻莘莞莨莺莼菁萁菥菘堇萘萋菝菽菖萜萸萑萆菔菟萏萃菸菹菪菅菀萦菰菡葜葑葚葙葳蒇蒈葺蒉葸萼葆葩葶蒌蒎萱葭蓁蓍蓐蓦蒽蓓蓊蒿蒺蓠蒡蒹蒴蒗蓥蓣蔌甍蔸蓰蔹蔟蔺"],
      ["de40", "轅", 32, "轪辀辌辒辝辠辡辢辤辥辦辧辪辬辭辮辯農辳辴辵辷辸辺辻込辿迀迃迆"],
      ["de80", "迉", 4, "迏迒迖迗迚迠迡迣迧迬迯迱迲迴迵迶迺迻迼迾迿逇逈逌逎逓逕逘蕖蔻蓿蓼蕙蕈蕨蕤蕞蕺瞢蕃蕲蕻薤薨薇薏蕹薮薜薅薹薷薰藓藁藜藿蘧蘅蘩蘖蘼廾弈夼奁耷奕奚奘匏尢尥尬尴扌扪抟抻拊拚拗拮挢拶挹捋捃掭揶捱捺掎掴捭掬掊捩掮掼揲揸揠揿揄揞揎摒揆掾摅摁搋搛搠搌搦搡摞撄摭撖"],
      ["df40", "這逜連逤逥逧", 5, "逰", 4, "逷逹逺逽逿遀遃遅遆遈", 4, "過達違遖遙遚遜", 5, "遤遦遧適遪遫遬遯", 4, "遶", 6, "遾邁"],
      ["df80", "還邅邆邇邉邊邌", 4, "邒邔邖邘邚邜邞邟邠邤邥邧邨邩邫邭邲邷邼邽邿郀摺撷撸撙撺擀擐擗擤擢攉攥攮弋忒甙弑卟叱叽叩叨叻吒吖吆呋呒呓呔呖呃吡呗呙吣吲咂咔呷呱呤咚咛咄呶呦咝哐咭哂咴哒咧咦哓哔呲咣哕咻咿哌哙哚哜咩咪咤哝哏哞唛哧唠哽唔哳唢唣唏唑唧唪啧喏喵啉啭啁啕唿啐唼"],
      ["e040", "郂郃郆郈郉郋郌郍郒郔郕郖郘郙郚郞郟郠郣郤郥郩郪郬郮郰郱郲郳郵郶郷郹郺郻郼郿鄀鄁鄃鄅", 19, "鄚鄛鄜"],
      ["e080", "鄝鄟鄠鄡鄤", 10, "鄰鄲", 6, "鄺", 8, "酄唷啖啵啶啷唳唰啜喋嗒喃喱喹喈喁喟啾嗖喑啻嗟喽喾喔喙嗪嗷嗉嘟嗑嗫嗬嗔嗦嗝嗄嗯嗥嗲嗳嗌嗍嗨嗵嗤辔嘞嘈嘌嘁嘤嘣嗾嘀嘧嘭噘嘹噗嘬噍噢噙噜噌噔嚆噤噱噫噻噼嚅嚓嚯囔囗囝囡囵囫囹囿圄圊圉圜帏帙帔帑帱帻帼"],
      ["e140", "酅酇酈酑酓酔酕酖酘酙酛酜酟酠酦酧酨酫酭酳酺酻酼醀", 4, "醆醈醊醎醏醓", 6, "醜", 5, "醤", 5, "醫醬醰醱醲醳醶醷醸醹醻"],
      ["e180", "醼", 10, "釈釋釐釒", 9, "針", 8, "帷幄幔幛幞幡岌屺岍岐岖岈岘岙岑岚岜岵岢岽岬岫岱岣峁岷峄峒峤峋峥崂崃崧崦崮崤崞崆崛嵘崾崴崽嵬嵛嵯嵝嵫嵋嵊嵩嵴嶂嶙嶝豳嶷巅彳彷徂徇徉後徕徙徜徨徭徵徼衢彡犭犰犴犷犸狃狁狎狍狒狨狯狩狲狴狷猁狳猃狺"],
      ["e240", "釦", 62],
      ["e280", "鈥", 32, "狻猗猓猡猊猞猝猕猢猹猥猬猸猱獐獍獗獠獬獯獾舛夥飧夤夂饣饧", 5, "饴饷饽馀馄馇馊馍馐馑馓馔馕庀庑庋庖庥庠庹庵庾庳赓廒廑廛廨廪膺忄忉忖忏怃忮怄忡忤忾怅怆忪忭忸怙怵怦怛怏怍怩怫怊怿怡恸恹恻恺恂"],
      ["e340", "鉆", 45, "鉵", 16],
      ["e380", "銆", 7, "銏", 24, "恪恽悖悚悭悝悃悒悌悛惬悻悱惝惘惆惚悴愠愦愕愣惴愀愎愫慊慵憬憔憧憷懔懵忝隳闩闫闱闳闵闶闼闾阃阄阆阈阊阋阌阍阏阒阕阖阗阙阚丬爿戕氵汔汜汊沣沅沐沔沌汨汩汴汶沆沩泐泔沭泷泸泱泗沲泠泖泺泫泮沱泓泯泾"],
      ["e440", "銨", 5, "銯", 24, "鋉", 31],
      ["e480", "鋩", 32, "洹洧洌浃浈洇洄洙洎洫浍洮洵洚浏浒浔洳涑浯涞涠浞涓涔浜浠浼浣渚淇淅淞渎涿淠渑淦淝淙渖涫渌涮渫湮湎湫溲湟溆湓湔渲渥湄滟溱溘滠漭滢溥溧溽溻溷滗溴滏溏滂溟潢潆潇漤漕滹漯漶潋潴漪漉漩澉澍澌潸潲潼潺濑"],
      ["e540", "錊", 51, "錿", 10],
      ["e580", "鍊", 31, "鍫濉澧澹澶濂濡濮濞濠濯瀚瀣瀛瀹瀵灏灞宀宄宕宓宥宸甯骞搴寤寮褰寰蹇謇辶迓迕迥迮迤迩迦迳迨逅逄逋逦逑逍逖逡逵逶逭逯遄遑遒遐遨遘遢遛暹遴遽邂邈邃邋彐彗彖彘尻咫屐屙孱屣屦羼弪弩弭艴弼鬻屮妁妃妍妩妪妣"],
      ["e640", "鍬", 34, "鎐", 27],
      ["e680", "鎬", 29, "鏋鏌鏍妗姊妫妞妤姒妲妯姗妾娅娆姝娈姣姘姹娌娉娲娴娑娣娓婀婧婊婕娼婢婵胬媪媛婷婺媾嫫媲嫒嫔媸嫠嫣嫱嫖嫦嫘嫜嬉嬗嬖嬲嬷孀尕尜孚孥孳孑孓孢驵驷驸驺驿驽骀骁骅骈骊骐骒骓骖骘骛骜骝骟骠骢骣骥骧纟纡纣纥纨纩"],
      ["e740", "鏎", 7, "鏗", 54],
      ["e780", "鐎", 32, "纭纰纾绀绁绂绉绋绌绐绔绗绛绠绡绨绫绮绯绱绲缍绶绺绻绾缁缂缃缇缈缋缌缏缑缒缗缙缜缛缟缡", 6, "缪缫缬缭缯", 4, "缵幺畿巛甾邕玎玑玮玢玟珏珂珑玷玳珀珉珈珥珙顼琊珩珧珞玺珲琏琪瑛琦琥琨琰琮琬"],
      ["e840", "鐯", 14, "鐿", 43, "鑬鑭鑮鑯"],
      ["e880", "鑰", 20, "钑钖钘铇铏铓铔铚铦铻锜锠琛琚瑁瑜瑗瑕瑙瑷瑭瑾璜璎璀璁璇璋璞璨璩璐璧瓒璺韪韫韬杌杓杞杈杩枥枇杪杳枘枧杵枨枞枭枋杷杼柰栉柘栊柩枰栌柙枵柚枳柝栀柃枸柢栎柁柽栲栳桠桡桎桢桄桤梃栝桕桦桁桧桀栾桊桉栩梵梏桴桷梓桫棂楮棼椟椠棹"],
      ["e940", "锧锳锽镃镈镋镕镚镠镮镴镵長", 7, "門", 42],
      ["e980", "閫", 32, "椤棰椋椁楗棣椐楱椹楠楂楝榄楫榀榘楸椴槌榇榈槎榉楦楣楹榛榧榻榫榭槔榱槁槊槟榕槠榍槿樯槭樗樘橥槲橄樾檠橐橛樵檎橹樽樨橘橼檑檐檩檗檫猷獒殁殂殇殄殒殓殍殚殛殡殪轫轭轱轲轳轵轶轸轷轹轺轼轾辁辂辄辇辋"],
      ["ea40", "闌", 27, "闬闿阇阓阘阛阞阠阣", 6, "阫阬阭阯阰阷阸阹阺阾陁陃陊陎陏陑陒陓陖陗"],
      ["ea80", "陘陙陚陜陝陞陠陣陥陦陫陭", 4, "陳陸", 12, "隇隉隊辍辎辏辘辚軎戋戗戛戟戢戡戥戤戬臧瓯瓴瓿甏甑甓攴旮旯旰昊昙杲昃昕昀炅曷昝昴昱昶昵耆晟晔晁晏晖晡晗晷暄暌暧暝暾曛曜曦曩贲贳贶贻贽赀赅赆赈赉赇赍赕赙觇觊觋觌觎觏觐觑牮犟牝牦牯牾牿犄犋犍犏犒挈挲掰"],
      ["eb40", "隌階隑隒隓隕隖隚際隝", 9, "隨", 7, "隱隲隴隵隷隸隺隻隿雂雃雈雊雋雐雑雓雔雖", 9, "雡", 6, "雫"],
      ["eb80", "雬雭雮雰雱雲雴雵雸雺電雼雽雿霂霃霅霊霋霌霐霑霒霔霕霗", 4, "霝霟霠搿擘耄毪毳毽毵毹氅氇氆氍氕氘氙氚氡氩氤氪氲攵敕敫牍牒牖爰虢刖肟肜肓肼朊肽肱肫肭肴肷胧胨胩胪胛胂胄胙胍胗朐胝胫胱胴胭脍脎胲胼朕脒豚脶脞脬脘脲腈腌腓腴腙腚腱腠腩腼腽腭腧塍媵膈膂膑滕膣膪臌朦臊膻"],
      ["ec40", "霡", 8, "霫霬霮霯霱霳", 4, "霺霻霼霽霿", 18, "靔靕靗靘靚靜靝靟靣靤靦靧靨靪", 7],
      ["ec80", "靲靵靷", 4, "靽", 7, "鞆", 4, "鞌鞎鞏鞐鞓鞕鞖鞗鞙", 4, "臁膦欤欷欹歃歆歙飑飒飓飕飙飚殳彀毂觳斐齑斓於旆旄旃旌旎旒旖炀炜炖炝炻烀炷炫炱烨烊焐焓焖焯焱煳煜煨煅煲煊煸煺熘熳熵熨熠燠燔燧燹爝爨灬焘煦熹戾戽扃扈扉礻祀祆祉祛祜祓祚祢祗祠祯祧祺禅禊禚禧禳忑忐"],
      ["ed40", "鞞鞟鞡鞢鞤", 6, "鞬鞮鞰鞱鞳鞵", 46],
      ["ed80", "韤韥韨韮", 4, "韴韷", 23, "怼恝恚恧恁恙恣悫愆愍慝憩憝懋懑戆肀聿沓泶淼矶矸砀砉砗砘砑斫砭砜砝砹砺砻砟砼砥砬砣砩硎硭硖硗砦硐硇硌硪碛碓碚碇碜碡碣碲碹碥磔磙磉磬磲礅磴礓礤礞礴龛黹黻黼盱眄眍盹眇眈眚眢眙眭眦眵眸睐睑睇睃睚睨"],
      ["ee40", "頏", 62],
      ["ee80", "顎", 32, "睢睥睿瞍睽瞀瞌瞑瞟瞠瞰瞵瞽町畀畎畋畈畛畲畹疃罘罡罟詈罨罴罱罹羁罾盍盥蠲钅钆钇钋钊钌钍钏钐钔钗钕钚钛钜钣钤钫钪钭钬钯钰钲钴钶", 4, "钼钽钿铄铈", 6, "铐铑铒铕铖铗铙铘铛铞铟铠铢铤铥铧铨铪"],
      ["ef40", "顯", 5, "颋颎颒颕颙颣風", 37, "飏飐飔飖飗飛飜飝飠", 4],
      ["ef80", "飥飦飩", 30, "铩铫铮铯铳铴铵铷铹铼铽铿锃锂锆锇锉锊锍锎锏锒", 4, "锘锛锝锞锟锢锪锫锩锬锱锲锴锶锷锸锼锾锿镂锵镄镅镆镉镌镎镏镒镓镔镖镗镘镙镛镞镟镝镡镢镤", 8, "镯镱镲镳锺矧矬雉秕秭秣秫稆嵇稃稂稞稔"],
      ["f040", "餈", 4, "餎餏餑", 28, "餯", 26],
      ["f080", "饊", 9, "饖", 12, "饤饦饳饸饹饻饾馂馃馉稹稷穑黏馥穰皈皎皓皙皤瓞瓠甬鸠鸢鸨", 4, "鸲鸱鸶鸸鸷鸹鸺鸾鹁鹂鹄鹆鹇鹈鹉鹋鹌鹎鹑鹕鹗鹚鹛鹜鹞鹣鹦", 6, "鹱鹭鹳疒疔疖疠疝疬疣疳疴疸痄疱疰痃痂痖痍痣痨痦痤痫痧瘃痱痼痿瘐瘀瘅瘌瘗瘊瘥瘘瘕瘙"],
      ["f140", "馌馎馚", 10, "馦馧馩", 47],
      ["f180", "駙", 32, "瘛瘼瘢瘠癀瘭瘰瘿瘵癃瘾瘳癍癞癔癜癖癫癯翊竦穸穹窀窆窈窕窦窠窬窨窭窳衤衩衲衽衿袂袢裆袷袼裉裢裎裣裥裱褚裼裨裾裰褡褙褓褛褊褴褫褶襁襦襻疋胥皲皴矜耒耔耖耜耠耢耥耦耧耩耨耱耋耵聃聆聍聒聩聱覃顸颀颃"],
      ["f240", "駺", 62],
      ["f280", "騹", 32, "颉颌颍颏颔颚颛颞颟颡颢颥颦虍虔虬虮虿虺虼虻蚨蚍蚋蚬蚝蚧蚣蚪蚓蚩蚶蛄蚵蛎蚰蚺蚱蚯蛉蛏蚴蛩蛱蛲蛭蛳蛐蜓蛞蛴蛟蛘蛑蜃蜇蛸蜈蜊蜍蜉蜣蜻蜞蜥蜮蜚蜾蝈蜴蜱蜩蜷蜿螂蜢蝽蝾蝻蝠蝰蝌蝮螋蝓蝣蝼蝤蝙蝥螓螯螨蟒"],
      ["f340", "驚", 17, "驲骃骉骍骎骔骕骙骦骩", 6, "骲骳骴骵骹骻骽骾骿髃髄髆", 4, "髍髎髏髐髒體髕髖髗髙髚髛髜"],
      ["f380", "髝髞髠髢髣髤髥髧髨髩髪髬髮髰", 8, "髺髼", 6, "鬄鬅鬆蟆螈螅螭螗螃螫蟥螬螵螳蟋蟓螽蟑蟀蟊蟛蟪蟠蟮蠖蠓蟾蠊蠛蠡蠹蠼缶罂罄罅舐竺竽笈笃笄笕笊笫笏筇笸笪笙笮笱笠笥笤笳笾笞筘筚筅筵筌筝筠筮筻筢筲筱箐箦箧箸箬箝箨箅箪箜箢箫箴篑篁篌篝篚篥篦篪簌篾篼簏簖簋"],
      ["f440", "鬇鬉", 5, "鬐鬑鬒鬔", 10, "鬠鬡鬢鬤", 10, "鬰鬱鬳", 7, "鬽鬾鬿魀魆魊魋魌魎魐魒魓魕", 5],
      ["f480", "魛", 32, "簟簪簦簸籁籀臾舁舂舄臬衄舡舢舣舭舯舨舫舸舻舳舴舾艄艉艋艏艚艟艨衾袅袈裘裟襞羝羟羧羯羰羲籼敉粑粝粜粞粢粲粼粽糁糇糌糍糈糅糗糨艮暨羿翎翕翥翡翦翩翮翳糸絷綦綮繇纛麸麴赳趄趔趑趱赧赭豇豉酊酐酎酏酤"],
      ["f540", "魼", 62],
      ["f580", "鮻", 32, "酢酡酰酩酯酽酾酲酴酹醌醅醐醍醑醢醣醪醭醮醯醵醴醺豕鹾趸跫踅蹙蹩趵趿趼趺跄跖跗跚跞跎跏跛跆跬跷跸跣跹跻跤踉跽踔踝踟踬踮踣踯踺蹀踹踵踽踱蹉蹁蹂蹑蹒蹊蹰蹶蹼蹯蹴躅躏躔躐躜躞豸貂貊貅貘貔斛觖觞觚觜"],
      ["f640", "鯜", 62],
      ["f680", "鰛", 32, "觥觫觯訾謦靓雩雳雯霆霁霈霏霎霪霭霰霾龀龃龅", 5, "龌黾鼋鼍隹隼隽雎雒瞿雠銎銮鋈錾鍪鏊鎏鐾鑫鱿鲂鲅鲆鲇鲈稣鲋鲎鲐鲑鲒鲔鲕鲚鲛鲞", 5, "鲥", 4, "鲫鲭鲮鲰", 7, "鲺鲻鲼鲽鳄鳅鳆鳇鳊鳋"],
      ["f740", "鰼", 62],
      ["f780", "鱻鱽鱾鲀鲃鲄鲉鲊鲌鲏鲓鲖鲗鲘鲙鲝鲪鲬鲯鲹鲾", 4, "鳈鳉鳑鳒鳚鳛鳠鳡鳌", 4, "鳓鳔鳕鳗鳘鳙鳜鳝鳟鳢靼鞅鞑鞒鞔鞯鞫鞣鞲鞴骱骰骷鹘骶骺骼髁髀髅髂髋髌髑魅魃魇魉魈魍魑飨餍餮饕饔髟髡髦髯髫髻髭髹鬈鬏鬓鬟鬣麽麾縻麂麇麈麋麒鏖麝麟黛黜黝黠黟黢黩黧黥黪黯鼢鼬鼯鼹鼷鼽鼾齄"],
      ["f840", "鳣", 62],
      ["f880", "鴢", 32],
      ["f940", "鵃", 62],
      ["f980", "鶂", 32],
      ["fa40", "鶣", 62],
      ["fa80", "鷢", 32],
      ["fb40", "鸃", 27, "鸤鸧鸮鸰鸴鸻鸼鹀鹍鹐鹒鹓鹔鹖鹙鹝鹟鹠鹡鹢鹥鹮鹯鹲鹴", 9, "麀"],
      ["fb80", "麁麃麄麅麆麉麊麌", 5, "麔", 8, "麞麠", 5, "麧麨麩麪"],
      ["fc40", "麫", 8, "麵麶麷麹麺麼麿", 4, "黅黆黇黈黊黋黌黐黒黓黕黖黗黙黚點黡黣黤黦黨黫黬黭黮黰", 8, "黺黽黿", 6],
      ["fc80", "鼆", 4, "鼌鼏鼑鼒鼔鼕鼖鼘鼚", 5, "鼡鼣", 8, "鼭鼮鼰鼱"],
      ["fd40", "鼲", 4, "鼸鼺鼼鼿", 4, "齅", 10, "齒", 38],
      ["fd80", "齹", 5, "龁龂龍", 11, "龜龝龞龡", 4, "郎凉秊裏隣"],
      ["fe40", "兀嗀﨎﨏﨑﨓﨔礼﨟蘒﨡﨣﨤﨧﨨﨩"]
    ];
  }
});

// ../../node_modules/encoding/node_modules/iconv-lite/encodings/tables/gbk-added.json
var require_gbk_added = __commonJS({
  "../../node_modules/encoding/node_modules/iconv-lite/encodings/tables/gbk-added.json"(exports, module) {
    module.exports = [
      ["a140", "", 62],
      ["a180", "", 32],
      ["a240", "", 62],
      ["a280", "", 32],
      ["a2ab", "", 5],
      ["a2e3", "€"],
      ["a2ef", ""],
      ["a2fd", ""],
      ["a340", "", 62],
      ["a380", "", 31, "　"],
      ["a440", "", 62],
      ["a480", "", 32],
      ["a4f4", "", 10],
      ["a540", "", 62],
      ["a580", "", 32],
      ["a5f7", "", 7],
      ["a640", "", 62],
      ["a680", "", 32],
      ["a6b9", "", 7],
      ["a6d9", "", 6],
      ["a6ec", ""],
      ["a6f3", ""],
      ["a6f6", "", 8],
      ["a740", "", 62],
      ["a780", "", 32],
      ["a7c2", "", 14],
      ["a7f2", "", 12],
      ["a896", "", 10],
      ["a8bc", "ḿ"],
      ["a8bf", "ǹ"],
      ["a8c1", ""],
      ["a8ea", "", 20],
      ["a958", ""],
      ["a95b", ""],
      ["a95d", ""],
      ["a989", "〾⿰", 11],
      ["a997", "", 12],
      ["a9f0", "", 14],
      ["aaa1", "", 93],
      ["aba1", "", 93],
      ["aca1", "", 93],
      ["ada1", "", 93],
      ["aea1", "", 93],
      ["afa1", "", 93],
      ["d7fa", "", 4],
      ["f8a1", "", 93],
      ["f9a1", "", 93],
      ["faa1", "", 93],
      ["fba1", "", 93],
      ["fca1", "", 93],
      ["fda1", "", 93],
      ["fe50", "⺁⺄㑳㑇⺈⺋㖞㘚㘎⺌⺗㥮㤘㧏㧟㩳㧐㭎㱮㳠⺧⺪䁖䅟⺮䌷⺳⺶⺷䎱䎬⺻䏝䓖䙡䙌"],
      ["fe80", "䜣䜩䝼䞍⻊䥇䥺䥽䦂䦃䦅䦆䦟䦛䦷䦶䲣䲟䲠䲡䱷䲢䴓", 6, "䶮", 93],
      ["8135f437", ""]
    ];
  }
});

// ../../node_modules/encoding/node_modules/iconv-lite/encodings/tables/gb18030-ranges.json
var require_gb18030_ranges = __commonJS({
  "../../node_modules/encoding/node_modules/iconv-lite/encodings/tables/gb18030-ranges.json"(exports, module) {
    module.exports = { uChars: [128, 165, 169, 178, 184, 216, 226, 235, 238, 244, 248, 251, 253, 258, 276, 284, 300, 325, 329, 334, 364, 463, 465, 467, 469, 471, 473, 475, 477, 506, 594, 610, 712, 716, 730, 930, 938, 962, 970, 1026, 1104, 1106, 8209, 8215, 8218, 8222, 8231, 8241, 8244, 8246, 8252, 8365, 8452, 8454, 8458, 8471, 8482, 8556, 8570, 8596, 8602, 8713, 8720, 8722, 8726, 8731, 8737, 8740, 8742, 8748, 8751, 8760, 8766, 8777, 8781, 8787, 8802, 8808, 8816, 8854, 8858, 8870, 8896, 8979, 9322, 9372, 9548, 9588, 9616, 9622, 9634, 9652, 9662, 9672, 9676, 9680, 9702, 9735, 9738, 9793, 9795, 11906, 11909, 11913, 11917, 11928, 11944, 11947, 11951, 11956, 11960, 11964, 11979, 12284, 12292, 12312, 12319, 12330, 12351, 12436, 12447, 12535, 12543, 12586, 12842, 12850, 12964, 13200, 13215, 13218, 13253, 13263, 13267, 13270, 13384, 13428, 13727, 13839, 13851, 14617, 14703, 14801, 14816, 14964, 15183, 15471, 15585, 16471, 16736, 17208, 17325, 17330, 17374, 17623, 17997, 18018, 18212, 18218, 18301, 18318, 18760, 18811, 18814, 18820, 18823, 18844, 18848, 18872, 19576, 19620, 19738, 19887, 40870, 59244, 59336, 59367, 59413, 59417, 59423, 59431, 59437, 59443, 59452, 59460, 59478, 59493, 63789, 63866, 63894, 63976, 63986, 64016, 64018, 64021, 64025, 64034, 64037, 64042, 65074, 65093, 65107, 65112, 65127, 65132, 65375, 65510, 65536], gbChars: [0, 36, 38, 45, 50, 81, 89, 95, 96, 100, 103, 104, 105, 109, 126, 133, 148, 172, 175, 179, 208, 306, 307, 308, 309, 310, 311, 312, 313, 341, 428, 443, 544, 545, 558, 741, 742, 749, 750, 805, 819, 820, 7922, 7924, 7925, 7927, 7934, 7943, 7944, 7945, 7950, 8062, 8148, 8149, 8152, 8164, 8174, 8236, 8240, 8262, 8264, 8374, 8380, 8381, 8384, 8388, 8390, 8392, 8393, 8394, 8396, 8401, 8406, 8416, 8419, 8424, 8437, 8439, 8445, 8482, 8485, 8496, 8521, 8603, 8936, 8946, 9046, 9050, 9063, 9066, 9076, 9092, 9100, 9108, 9111, 9113, 9131, 9162, 9164, 9218, 9219, 11329, 11331, 11334, 11336, 11346, 11361, 11363, 11366, 11370, 11372, 11375, 11389, 11682, 11686, 11687, 11692, 11694, 11714, 11716, 11723, 11725, 11730, 11736, 11982, 11989, 12102, 12336, 12348, 12350, 12384, 12393, 12395, 12397, 12510, 12553, 12851, 12962, 12973, 13738, 13823, 13919, 13933, 14080, 14298, 14585, 14698, 15583, 15847, 16318, 16434, 16438, 16481, 16729, 17102, 17122, 17315, 17320, 17402, 17418, 17859, 17909, 17911, 17915, 17916, 17936, 17939, 17961, 18664, 18703, 18814, 18962, 19043, 33469, 33470, 33471, 33484, 33485, 33490, 33497, 33501, 33505, 33513, 33520, 33536, 33550, 37845, 37921, 37948, 38029, 38038, 38064, 38065, 38066, 38069, 38075, 38076, 38078, 39108, 39109, 39113, 39114, 39115, 39116, 39265, 39394, 189e3] };
  }
});

// ../../node_modules/encoding/node_modules/iconv-lite/encodings/tables/cp949.json
var require_cp949 = __commonJS({
  "../../node_modules/encoding/node_modules/iconv-lite/encodings/tables/cp949.json"(exports, module) {
    module.exports = [
      ["0", "\0", 127],
      ["8141", "갂갃갅갆갋", 4, "갘갞갟갡갢갣갥", 6, "갮갲갳갴"],
      ["8161", "갵갶갷갺갻갽갾갿걁", 9, "걌걎", 5, "걕"],
      ["8181", "걖걗걙걚걛걝", 18, "걲걳걵걶걹걻", 4, "겂겇겈겍겎겏겑겒겓겕", 6, "겞겢", 5, "겫겭겮겱", 6, "겺겾겿곀곂곃곅곆곇곉곊곋곍", 7, "곖곘", 7, "곢곣곥곦곩곫곭곮곲곴곷", 4, "곾곿괁괂괃괅괇", 4, "괎괐괒괓"],
      ["8241", "괔괕괖괗괙괚괛괝괞괟괡", 7, "괪괫괮", 5],
      ["8261", "괶괷괹괺괻괽", 6, "굆굈굊", 5, "굑굒굓굕굖굗"],
      ["8281", "굙", 7, "굢굤", 7, "굮굯굱굲굷굸굹굺굾궀궃", 4, "궊궋궍궎궏궑", 10, "궞", 5, "궥", 17, "궸", 7, "귂귃귅귆귇귉", 6, "귒귔", 7, "귝귞귟귡귢귣귥", 18],
      ["8341", "귺귻귽귾긂", 5, "긊긌긎", 5, "긕", 7],
      ["8361", "긝", 18, "긲긳긵긶긹긻긼"],
      ["8381", "긽긾긿깂깄깇깈깉깋깏깑깒깓깕깗", 4, "깞깢깣깤깦깧깪깫깭깮깯깱", 6, "깺깾", 5, "꺆", 5, "꺍", 46, "꺿껁껂껃껅", 6, "껎껒", 5, "껚껛껝", 8],
      ["8441", "껦껧껩껪껬껮", 5, "껵껶껷껹껺껻껽", 8],
      ["8461", "꼆꼉꼊꼋꼌꼎꼏꼑", 18],
      ["8481", "꼤", 7, "꼮꼯꼱꼳꼵", 6, "꼾꽀꽄꽅꽆꽇꽊", 5, "꽑", 10, "꽞", 5, "꽦", 18, "꽺", 5, "꾁꾂꾃꾅꾆꾇꾉", 6, "꾒꾓꾔꾖", 5, "꾝", 26, "꾺꾻꾽꾾"],
      ["8541", "꾿꿁", 5, "꿊꿌꿏", 4, "꿕", 6, "꿝", 4],
      ["8561", "꿢", 5, "꿪", 5, "꿲꿳꿵꿶꿷꿹", 6, "뀂뀃"],
      ["8581", "뀅", 6, "뀍뀎뀏뀑뀒뀓뀕", 6, "뀞", 9, "뀩", 26, "끆끇끉끋끍끏끐끑끒끖끘끚끛끜끞", 29, "끾끿낁낂낃낅", 6, "낎낐낒", 5, "낛낝낞낣낤"],
      ["8641", "낥낦낧낪낰낲낶낷낹낺낻낽", 6, "냆냊", 5, "냒"],
      ["8661", "냓냕냖냗냙", 6, "냡냢냣냤냦", 10],
      ["8681", "냱", 22, "넊넍넎넏넑넔넕넖넗넚넞", 4, "넦넧넩넪넫넭", 6, "넶넺", 5, "녂녃녅녆녇녉", 6, "녒녓녖녗녙녚녛녝녞녟녡", 22, "녺녻녽녾녿놁놃", 4, "놊놌놎놏놐놑놕놖놗놙놚놛놝"],
      ["8741", "놞", 9, "놩", 15],
      ["8761", "놹", 18, "뇍뇎뇏뇑뇒뇓뇕"],
      ["8781", "뇖", 5, "뇞뇠", 7, "뇪뇫뇭뇮뇯뇱", 7, "뇺뇼뇾", 5, "눆눇눉눊눍", 6, "눖눘눚", 5, "눡", 18, "눵", 6, "눽", 26, "뉙뉚뉛뉝뉞뉟뉡", 6, "뉪", 4],
      ["8841", "뉯", 4, "뉶", 5, "뉽", 6, "늆늇늈늊", 4],
      ["8861", "늏늒늓늕늖늗늛", 4, "늢늤늧늨늩늫늭늮늯늱늲늳늵늶늷"],
      ["8881", "늸", 15, "닊닋닍닎닏닑닓", 4, "닚닜닞닟닠닡닣닧닩닪닰닱닲닶닼닽닾댂댃댅댆댇댉", 6, "댒댖", 5, "댝", 54, "덗덙덚덝덠덡덢덣"],
      ["8941", "덦덨덪덬덭덯덲덳덵덶덷덹", 6, "뎂뎆", 5, "뎍"],
      ["8961", "뎎뎏뎑뎒뎓뎕", 10, "뎢", 5, "뎩뎪뎫뎭"],
      ["8981", "뎮", 21, "돆돇돉돊돍돏돑돒돓돖돘돚돜돞돟돡돢돣돥돦돧돩", 18, "돽", 18, "됑", 6, "됙됚됛됝됞됟됡", 6, "됪됬", 7, "됵", 15],
      ["8a41", "둅", 10, "둒둓둕둖둗둙", 6, "둢둤둦"],
      ["8a61", "둧", 4, "둭", 18, "뒁뒂"],
      ["8a81", "뒃", 4, "뒉", 19, "뒞", 5, "뒥뒦뒧뒩뒪뒫뒭", 7, "뒶뒸뒺", 5, "듁듂듃듅듆듇듉", 6, "듑듒듓듔듖", 5, "듞듟듡듢듥듧", 4, "듮듰듲", 5, "듹", 26, "딖딗딙딚딝"],
      ["8b41", "딞", 5, "딦딫", 4, "딲딳딵딶딷딹", 6, "땂땆"],
      ["8b61", "땇땈땉땊땎땏땑땒땓땕", 6, "땞땢", 8],
      ["8b81", "땫", 52, "떢떣떥떦떧떩떬떭떮떯떲떶", 4, "떾떿뗁뗂뗃뗅", 6, "뗎뗒", 5, "뗙", 18, "뗭", 18],
      ["8c41", "똀", 15, "똒똓똕똖똗똙", 4],
      ["8c61", "똞", 6, "똦", 5, "똭", 6, "똵", 5],
      ["8c81", "똻", 12, "뙉", 26, "뙥뙦뙧뙩", 50, "뚞뚟뚡뚢뚣뚥", 5, "뚭뚮뚯뚰뚲", 16],
      ["8d41", "뛃", 16, "뛕", 8],
      ["8d61", "뛞", 17, "뛱뛲뛳뛵뛶뛷뛹뛺"],
      ["8d81", "뛻", 4, "뜂뜃뜄뜆", 33, "뜪뜫뜭뜮뜱", 6, "뜺뜼", 7, "띅띆띇띉띊띋띍", 6, "띖", 9, "띡띢띣띥띦띧띩", 6, "띲띴띶", 5, "띾띿랁랂랃랅", 6, "랎랓랔랕랚랛랝랞"],
      ["8e41", "랟랡", 6, "랪랮", 5, "랶랷랹", 8],
      ["8e61", "럂", 4, "럈럊", 19],
      ["8e81", "럞", 13, "럮럯럱럲럳럵", 6, "럾렂", 4, "렊렋렍렎렏렑", 6, "렚렜렞", 5, "렦렧렩렪렫렭", 6, "렶렺", 5, "롁롂롃롅", 11, "롒롔", 7, "롞롟롡롢롣롥", 6, "롮롰롲", 5, "롹롺롻롽", 7],
      ["8f41", "뢅", 7, "뢎", 17],
      ["8f61", "뢠", 7, "뢩", 6, "뢱뢲뢳뢵뢶뢷뢹", 4],
      ["8f81", "뢾뢿룂룄룆", 5, "룍룎룏룑룒룓룕", 7, "룞룠룢", 5, "룪룫룭룮룯룱", 6, "룺룼룾", 5, "뤅", 18, "뤙", 6, "뤡", 26, "뤾뤿륁륂륃륅", 6, "륍륎륐륒", 5],
      ["9041", "륚륛륝륞륟륡", 6, "륪륬륮", 5, "륶륷륹륺륻륽"],
      ["9061", "륾", 5, "릆릈릋릌릏", 15],
      ["9081", "릟", 12, "릮릯릱릲릳릵", 6, "릾맀맂", 5, "맊맋맍맓", 4, "맚맜맟맠맢맦맧맩맪맫맭", 6, "맶맻", 4, "먂", 5, "먉", 11, "먖", 33, "먺먻먽먾먿멁멃멄멅멆"],
      ["9141", "멇멊멌멏멐멑멒멖멗멙멚멛멝", 6, "멦멪", 5],
      ["9161", "멲멳멵멶멷멹", 9, "몆몈몉몊몋몍", 5],
      ["9181", "몓", 20, "몪몭몮몯몱몳", 4, "몺몼몾", 5, "뫅뫆뫇뫉", 14, "뫚", 33, "뫽뫾뫿묁묂묃묅", 7, "묎묐묒", 5, "묙묚묛묝묞묟묡", 6],
      ["9241", "묨묪묬", 7, "묷묹묺묿", 4, "뭆뭈뭊뭋뭌뭎뭑뭒"],
      ["9261", "뭓뭕뭖뭗뭙", 7, "뭢뭤", 7, "뭭", 4],
      ["9281", "뭲", 21, "뮉뮊뮋뮍뮎뮏뮑", 18, "뮥뮦뮧뮩뮪뮫뮭", 6, "뮵뮶뮸", 7, "믁믂믃믅믆믇믉", 6, "믑믒믔", 35, "믺믻믽믾밁"],
      ["9341", "밃", 4, "밊밎밐밒밓밙밚밠밡밢밣밦밨밪밫밬밮밯밲밳밵"],
      ["9361", "밶밷밹", 6, "뱂뱆뱇뱈뱊뱋뱎뱏뱑", 8],
      ["9381", "뱚뱛뱜뱞", 37, "벆벇벉벊벍벏", 4, "벖벘벛", 4, "벢벣벥벦벩", 6, "벲벶", 5, "벾벿볁볂볃볅", 7, "볎볒볓볔볖볗볙볚볛볝", 22, "볷볹볺볻볽"],
      ["9441", "볾", 5, "봆봈봊", 5, "봑봒봓봕", 8],
      ["9461", "봞", 5, "봥", 6, "봭", 12],
      ["9481", "봺", 5, "뵁", 6, "뵊뵋뵍뵎뵏뵑", 6, "뵚", 9, "뵥뵦뵧뵩", 22, "붂붃붅붆붋", 4, "붒붔붖붗붘붛붝", 6, "붥", 10, "붱", 6, "붹", 24],
      ["9541", "뷒뷓뷖뷗뷙뷚뷛뷝", 11, "뷪", 5, "뷱"],
      ["9561", "뷲뷳뷵뷶뷷뷹", 6, "븁븂븄븆", 5, "븎븏븑븒븓"],
      ["9581", "븕", 6, "븞븠", 35, "빆빇빉빊빋빍빏", 4, "빖빘빜빝빞빟빢빣빥빦빧빩빫", 4, "빲빶", 4, "빾빿뺁뺂뺃뺅", 6, "뺎뺒", 5, "뺚", 13, "뺩", 14],
      ["9641", "뺸", 23, "뻒뻓"],
      ["9661", "뻕뻖뻙", 6, "뻡뻢뻦", 5, "뻭", 8],
      ["9681", "뻶", 10, "뼂", 5, "뼊", 13, "뼚뼞", 33, "뽂뽃뽅뽆뽇뽉", 6, "뽒뽓뽔뽖", 44],
      ["9741", "뾃", 16, "뾕", 8],
      ["9761", "뾞", 17, "뾱", 7],
      ["9781", "뾹", 11, "뿆", 5, "뿎뿏뿑뿒뿓뿕", 6, "뿝뿞뿠뿢", 89, "쀽쀾쀿"],
      ["9841", "쁀", 16, "쁒", 5, "쁙쁚쁛"],
      ["9861", "쁝쁞쁟쁡", 6, "쁪", 15],
      ["9881", "쁺", 21, "삒삓삕삖삗삙", 6, "삢삤삦", 5, "삮삱삲삷", 4, "삾샂샃샄샆샇샊샋샍샎샏샑", 6, "샚샞", 5, "샦샧샩샪샫샭", 6, "샶샸샺", 5, "섁섂섃섅섆섇섉", 6, "섑섒섓섔섖", 5, "섡섢섥섨섩섪섫섮"],
      ["9941", "섲섳섴섵섷섺섻섽섾섿셁", 6, "셊셎", 5, "셖셗"],
      ["9961", "셙셚셛셝", 6, "셦셪", 5, "셱셲셳셵셶셷셹셺셻"],
      ["9981", "셼", 8, "솆", 5, "솏솑솒솓솕솗", 4, "솞솠솢솣솤솦솧솪솫솭솮솯솱", 11, "솾", 5, "쇅쇆쇇쇉쇊쇋쇍", 6, "쇕쇖쇙", 6, "쇡쇢쇣쇥쇦쇧쇩", 6, "쇲쇴", 7, "쇾쇿숁숂숃숅", 6, "숎숐숒", 5, "숚숛숝숞숡숢숣"],
      ["9a41", "숤숥숦숧숪숬숮숰숳숵", 16],
      ["9a61", "쉆쉇쉉", 6, "쉒쉓쉕쉖쉗쉙", 6, "쉡쉢쉣쉤쉦"],
      ["9a81", "쉧", 4, "쉮쉯쉱쉲쉳쉵", 6, "쉾슀슂", 5, "슊", 5, "슑", 6, "슙슚슜슞", 5, "슦슧슩슪슫슮", 5, "슶슸슺", 33, "싞싟싡싢싥", 5, "싮싰싲싳싴싵싷싺싽싾싿쌁", 6, "쌊쌋쌎쌏"],
      ["9b41", "쌐쌑쌒쌖쌗쌙쌚쌛쌝", 6, "쌦쌧쌪", 8],
      ["9b61", "쌳", 17, "썆", 7],
      ["9b81", "썎", 25, "썪썫썭썮썯썱썳", 4, "썺썻썾", 5, "쎅쎆쎇쎉쎊쎋쎍", 50, "쏁", 22, "쏚"],
      ["9c41", "쏛쏝쏞쏡쏣", 4, "쏪쏫쏬쏮", 5, "쏶쏷쏹", 5],
      ["9c61", "쏿", 8, "쐉", 6, "쐑", 9],
      ["9c81", "쐛", 8, "쐥", 6, "쐭쐮쐯쐱쐲쐳쐵", 6, "쐾", 9, "쑉", 26, "쑦쑧쑩쑪쑫쑭", 6, "쑶쑷쑸쑺", 5, "쒁", 18, "쒕", 6, "쒝", 12],
      ["9d41", "쒪", 13, "쒹쒺쒻쒽", 8],
      ["9d61", "쓆", 25],
      ["9d81", "쓠", 8, "쓪", 5, "쓲쓳쓵쓶쓷쓹쓻쓼쓽쓾씂", 9, "씍씎씏씑씒씓씕", 6, "씝", 10, "씪씫씭씮씯씱", 6, "씺씼씾", 5, "앆앇앋앏앐앑앒앖앚앛앜앟앢앣앥앦앧앩", 6, "앲앶", 5, "앾앿얁얂얃얅얆얈얉얊얋얎얐얒얓얔"],
      ["9e41", "얖얙얚얛얝얞얟얡", 7, "얪", 9, "얶"],
      ["9e61", "얷얺얿", 4, "엋엍엏엒엓엕엖엗엙", 6, "엢엤엦엧"],
      ["9e81", "엨엩엪엫엯엱엲엳엵엸엹엺엻옂옃옄옉옊옋옍옎옏옑", 6, "옚옝", 6, "옦옧옩옪옫옯옱옲옶옸옺옼옽옾옿왂왃왅왆왇왉", 6, "왒왖", 5, "왞왟왡", 10, "왭왮왰왲", 5, "왺왻왽왾왿욁", 6, "욊욌욎", 5, "욖욗욙욚욛욝", 6, "욦"],
      ["9f41", "욨욪", 5, "욲욳욵욶욷욻", 4, "웂웄웆", 5, "웎"],
      ["9f61", "웏웑웒웓웕", 6, "웞웟웢", 5, "웪웫웭웮웯웱웲"],
      ["9f81", "웳", 4, "웺웻웼웾", 5, "윆윇윉윊윋윍", 6, "윖윘윚", 5, "윢윣윥윦윧윩", 6, "윲윴윶윸윹윺윻윾윿읁읂읃읅", 4, "읋읎읐읙읚읛읝읞읟읡", 6, "읩읪읬", 7, "읶읷읹읺읻읿잀잁잂잆잋잌잍잏잒잓잕잙잛", 4, "잢잧", 4, "잮잯잱잲잳잵잶잷"],
      ["a041", "잸잹잺잻잾쟂", 5, "쟊쟋쟍쟏쟑", 6, "쟙쟚쟛쟜"],
      ["a061", "쟞", 5, "쟥쟦쟧쟩쟪쟫쟭", 13],
      ["a081", "쟻", 4, "젂젃젅젆젇젉젋", 4, "젒젔젗", 4, "젞젟젡젢젣젥", 6, "젮젰젲", 5, "젹젺젻젽젾젿졁", 6, "졊졋졎", 5, "졕", 26, "졲졳졵졶졷졹졻", 4, "좂좄좈좉좊좎", 5, "좕", 7, "좞좠좢좣좤"],
      ["a141", "좥좦좧좩", 18, "좾좿죀죁"],
      ["a161", "죂죃죅죆죇죉죊죋죍", 6, "죖죘죚", 5, "죢죣죥"],
      ["a181", "죦", 14, "죶", 5, "죾죿줁줂줃줇", 4, "줎　、。·‥…¨〃­―∥＼∼‘’“”〔〕〈", 9, "±×÷≠≤≥∞∴°′″℃Å￠￡￥♂♀∠⊥⌒∂∇≡≒§※☆★○●◎◇◆□■△▲▽▼→←↑↓↔〓≪≫√∽∝∵∫∬∈∋⊆⊇⊂⊃∪∩∧∨￢"],
      ["a241", "줐줒", 5, "줙", 18],
      ["a261", "줭", 6, "줵", 18],
      ["a281", "쥈", 7, "쥒쥓쥕쥖쥗쥙", 6, "쥢쥤", 7, "쥭쥮쥯⇒⇔∀∃´～ˇ˘˝˚˙¸˛¡¿ː∮∑∏¤℉‰◁◀▷▶♤♠♡♥♧♣⊙◈▣◐◑▒▤▥▨▧▦▩♨☏☎☜☞¶†‡↕↗↙↖↘♭♩♪♬㉿㈜№㏇™㏂㏘℡€®"],
      ["a341", "쥱쥲쥳쥵", 6, "쥽", 10, "즊즋즍즎즏"],
      ["a361", "즑", 6, "즚즜즞", 16],
      ["a381", "즯", 16, "짂짃짅짆짉짋", 4, "짒짔짗짘짛！", 58, "￦］", 32, "￣"],
      ["a441", "짞짟짡짣짥짦짨짩짪짫짮짲", 5, "짺짻짽짾짿쨁쨂쨃쨄"],
      ["a461", "쨅쨆쨇쨊쨎", 5, "쨕쨖쨗쨙", 12],
      ["a481", "쨦쨧쨨쨪", 28, "ㄱ", 93],
      ["a541", "쩇", 4, "쩎쩏쩑쩒쩓쩕", 6, "쩞쩢", 5, "쩩쩪"],
      ["a561", "쩫", 17, "쩾", 5, "쪅쪆"],
      ["a581", "쪇", 16, "쪙", 14, "ⅰ", 9],
      ["a5b0", "Ⅰ", 9],
      ["a5c1", "Α", 16, "Σ", 6],
      ["a5e1", "α", 16, "σ", 6],
      ["a641", "쪨", 19, "쪾쪿쫁쫂쫃쫅"],
      ["a661", "쫆", 5, "쫎쫐쫒쫔쫕쫖쫗쫚", 5, "쫡", 6],
      ["a681", "쫨쫩쫪쫫쫭", 6, "쫵", 18, "쬉쬊─│┌┐┘└├┬┤┴┼━┃┏┓┛┗┣┳┫┻╋┠┯┨┷┿┝┰┥┸╂┒┑┚┙┖┕┎┍┞┟┡┢┦┧┩┪┭┮┱┲┵┶┹┺┽┾╀╁╃", 7],
      ["a741", "쬋", 4, "쬑쬒쬓쬕쬖쬗쬙", 6, "쬢", 7],
      ["a761", "쬪", 22, "쭂쭃쭄"],
      ["a781", "쭅쭆쭇쭊쭋쭍쭎쭏쭑", 6, "쭚쭛쭜쭞", 5, "쭥", 7, "㎕㎖㎗ℓ㎘㏄㎣㎤㎥㎦㎙", 9, "㏊㎍㎎㎏㏏㎈㎉㏈㎧㎨㎰", 9, "㎀", 4, "㎺", 5, "㎐", 4, "Ω㏀㏁㎊㎋㎌㏖㏅㎭㎮㎯㏛㎩㎪㎫㎬㏝㏐㏓㏃㏉㏜㏆"],
      ["a841", "쭭", 10, "쭺", 14],
      ["a861", "쮉", 18, "쮝", 6],
      ["a881", "쮤", 19, "쮹", 11, "ÆÐªĦ"],
      ["a8a6", "Ĳ"],
      ["a8a8", "ĿŁØŒºÞŦŊ"],
      ["a8b1", "㉠", 27, "ⓐ", 25, "①", 14, "½⅓⅔¼¾⅛⅜⅝⅞"],
      ["a941", "쯅", 14, "쯕", 10],
      ["a961", "쯠쯡쯢쯣쯥쯦쯨쯪", 18],
      ["a981", "쯽", 14, "찎찏찑찒찓찕", 6, "찞찟찠찣찤æđðħıĳĸŀłøœßþŧŋŉ㈀", 27, "⒜", 25, "⑴", 14, "¹²³⁴ⁿ₁₂₃₄"],
      ["aa41", "찥찦찪찫찭찯찱", 6, "찺찿", 4, "챆챇챉챊챋챍챎"],
      ["aa61", "챏", 4, "챖챚", 5, "챡챢챣챥챧챩", 6, "챱챲"],
      ["aa81", "챳챴챶", 29, "ぁ", 82],
      ["ab41", "첔첕첖첗첚첛첝첞첟첡", 6, "첪첮", 5, "첶첷첹"],
      ["ab61", "첺첻첽", 6, "쳆쳈쳊", 5, "쳑쳒쳓쳕", 5],
      ["ab81", "쳛", 8, "쳥", 6, "쳭쳮쳯쳱", 12, "ァ", 85],
      ["ac41", "쳾쳿촀촂", 5, "촊촋촍촎촏촑", 6, "촚촜촞촟촠"],
      ["ac61", "촡촢촣촥촦촧촩촪촫촭", 11, "촺", 4],
      ["ac81", "촿", 28, "쵝쵞쵟А", 5, "ЁЖ", 25],
      ["acd1", "а", 5, "ёж", 25],
      ["ad41", "쵡쵢쵣쵥", 6, "쵮쵰쵲", 5, "쵹", 7],
      ["ad61", "춁", 6, "춉", 10, "춖춗춙춚춛춝춞춟"],
      ["ad81", "춠춡춢춣춦춨춪", 5, "춱", 18, "췅"],
      ["ae41", "췆", 5, "췍췎췏췑", 16],
      ["ae61", "췢", 5, "췩췪췫췭췮췯췱", 6, "췺췼췾", 4],
      ["ae81", "츃츅츆츇츉츊츋츍", 6, "츕츖츗츘츚", 5, "츢츣츥츦츧츩츪츫"],
      ["af41", "츬츭츮츯츲츴츶", 19],
      ["af61", "칊", 13, "칚칛칝칞칢", 5, "칪칬"],
      ["af81", "칮", 5, "칶칷칹칺칻칽", 6, "캆캈캊", 5, "캒캓캕캖캗캙"],
      ["b041", "캚", 5, "캢캦", 5, "캮", 12],
      ["b061", "캻", 5, "컂", 19],
      ["b081", "컖", 13, "컦컧컩컪컭", 6, "컶컺", 5, "가각간갇갈갉갊감", 7, "같", 4, "갠갤갬갭갯갰갱갸갹갼걀걋걍걔걘걜거걱건걷걸걺검겁것겄겅겆겉겊겋게겐겔겜겝겟겠겡겨격겪견겯결겸겹겻겼경곁계곈곌곕곗고곡곤곧골곪곬곯곰곱곳공곶과곽관괄괆"],
      ["b141", "켂켃켅켆켇켉", 6, "켒켔켖", 5, "켝켞켟켡켢켣"],
      ["b161", "켥", 6, "켮켲", 5, "켹", 11],
      ["b181", "콅", 14, "콖콗콙콚콛콝", 6, "콦콨콪콫콬괌괍괏광괘괜괠괩괬괭괴괵괸괼굄굅굇굉교굔굘굡굣구국군굳굴굵굶굻굼굽굿궁궂궈궉권궐궜궝궤궷귀귁귄귈귐귑귓규균귤그극근귿글긁금급긋긍긔기긱긴긷길긺김깁깃깅깆깊까깍깎깐깔깖깜깝깟깠깡깥깨깩깬깰깸"],
      ["b241", "콭콮콯콲콳콵콶콷콹", 6, "쾁쾂쾃쾄쾆", 5, "쾍"],
      ["b261", "쾎", 18, "쾢", 5, "쾩"],
      ["b281", "쾪", 5, "쾱", 18, "쿅", 6, "깹깻깼깽꺄꺅꺌꺼꺽꺾껀껄껌껍껏껐껑께껙껜껨껫껭껴껸껼꼇꼈꼍꼐꼬꼭꼰꼲꼴꼼꼽꼿꽁꽂꽃꽈꽉꽐꽜꽝꽤꽥꽹꾀꾄꾈꾐꾑꾕꾜꾸꾹꾼꿀꿇꿈꿉꿋꿍꿎꿔꿜꿨꿩꿰꿱꿴꿸뀀뀁뀄뀌뀐뀔뀜뀝뀨끄끅끈끊끌끎끓끔끕끗끙"],
      ["b341", "쿌", 19, "쿢쿣쿥쿦쿧쿩"],
      ["b361", "쿪", 5, "쿲쿴쿶", 5, "쿽쿾쿿퀁퀂퀃퀅", 5],
      ["b381", "퀋", 5, "퀒", 5, "퀙", 19, "끝끼끽낀낄낌낍낏낑나낙낚난낟날낡낢남납낫", 4, "낱낳내낵낸낼냄냅냇냈냉냐냑냔냘냠냥너넉넋넌널넒넓넘넙넛넜넝넣네넥넨넬넴넵넷넸넹녀녁년녈념녑녔녕녘녜녠노녹논놀놂놈놉놋농높놓놔놘놜놨뇌뇐뇔뇜뇝"],
      ["b441", "퀮", 5, "퀶퀷퀹퀺퀻퀽", 6, "큆큈큊", 5],
      ["b461", "큑큒큓큕큖큗큙", 6, "큡", 10, "큮큯"],
      ["b481", "큱큲큳큵", 6, "큾큿킀킂", 18, "뇟뇨뇩뇬뇰뇹뇻뇽누눅눈눋눌눔눕눗눙눠눴눼뉘뉜뉠뉨뉩뉴뉵뉼늄늅늉느늑는늘늙늚늠늡늣능늦늪늬늰늴니닉닌닐닒님닙닛닝닢다닥닦단닫", 4, "닳담답닷", 4, "닿대댁댄댈댐댑댓댔댕댜더덕덖던덛덜덞덟덤덥"],
      ["b541", "킕", 14, "킦킧킩킪킫킭", 5],
      ["b561", "킳킶킸킺", 5, "탂탃탅탆탇탊", 5, "탒탖", 4],
      ["b581", "탛탞탟탡탢탣탥", 6, "탮탲", 5, "탹", 11, "덧덩덫덮데덱덴델뎀뎁뎃뎄뎅뎌뎐뎔뎠뎡뎨뎬도독돈돋돌돎돐돔돕돗동돛돝돠돤돨돼됐되된될됨됩됫됴두둑둔둘둠둡둣둥둬뒀뒈뒝뒤뒨뒬뒵뒷뒹듀듄듈듐듕드득든듣들듦듬듭듯등듸디딕딘딛딜딤딥딧딨딩딪따딱딴딸"],
      ["b641", "턅", 7, "턎", 17],
      ["b661", "턠", 15, "턲턳턵턶턷턹턻턼턽턾"],
      ["b681", "턿텂텆", 5, "텎텏텑텒텓텕", 6, "텞텠텢", 5, "텩텪텫텭땀땁땃땄땅땋때땍땐땔땜땝땟땠땡떠떡떤떨떪떫떰떱떳떴떵떻떼떽뗀뗄뗌뗍뗏뗐뗑뗘뗬또똑똔똘똥똬똴뙈뙤뙨뚜뚝뚠뚤뚫뚬뚱뛔뛰뛴뛸뜀뜁뜅뜨뜩뜬뜯뜰뜸뜹뜻띄띈띌띔띕띠띤띨띰띱띳띵라락란랄람랍랏랐랑랒랖랗"],
      ["b741", "텮", 13, "텽", 6, "톅톆톇톉톊"],
      ["b761", "톋", 20, "톢톣톥톦톧"],
      ["b781", "톩", 6, "톲톴톶톷톸톹톻톽톾톿퇁", 14, "래랙랜랠램랩랫랬랭랴략랸럇량러럭런럴럼럽럿렀렁렇레렉렌렐렘렙렛렝려력련렬렴렵렷렸령례롄롑롓로록론롤롬롭롯롱롸롼뢍뢨뢰뢴뢸룀룁룃룅료룐룔룝룟룡루룩룬룰룸룹룻룽뤄뤘뤠뤼뤽륀륄륌륏륑류륙륜률륨륩"],
      ["b841", "퇐", 7, "퇙", 17],
      ["b861", "퇫", 8, "퇵퇶퇷퇹", 13],
      ["b881", "툈툊", 5, "툑", 24, "륫륭르륵른를름릅릇릉릊릍릎리릭린릴림립릿링마막만많", 4, "맘맙맛망맞맡맣매맥맨맬맴맵맷맸맹맺먀먁먈먕머먹먼멀멂멈멉멋멍멎멓메멕멘멜멤멥멧멨멩며멱면멸몃몄명몇몌모목몫몬몰몲몸몹못몽뫄뫈뫘뫙뫼"],
      ["b941", "툪툫툮툯툱툲툳툵", 6, "툾퉀퉂", 5, "퉉퉊퉋퉌"],
      ["b961", "퉍", 14, "퉝", 6, "퉥퉦퉧퉨"],
      ["b981", "퉩", 22, "튂튃튅튆튇튉튊튋튌묀묄묍묏묑묘묜묠묩묫무묵묶문묻물묽묾뭄뭅뭇뭉뭍뭏뭐뭔뭘뭡뭣뭬뮈뮌뮐뮤뮨뮬뮴뮷므믄믈믐믓미믹민믿밀밂밈밉밋밌밍및밑바", 4, "받", 4, "밤밥밧방밭배백밴밸뱀뱁뱃뱄뱅뱉뱌뱍뱐뱝버벅번벋벌벎범법벗"],
      ["ba41", "튍튎튏튒튓튔튖", 5, "튝튞튟튡튢튣튥", 6, "튭"],
      ["ba61", "튮튯튰튲", 5, "튺튻튽튾틁틃", 4, "틊틌", 5],
      ["ba81", "틒틓틕틖틗틙틚틛틝", 6, "틦", 9, "틲틳틵틶틷틹틺벙벚베벡벤벧벨벰벱벳벴벵벼벽변별볍볏볐병볕볘볜보복볶본볼봄봅봇봉봐봔봤봬뵀뵈뵉뵌뵐뵘뵙뵤뵨부북분붇불붉붊붐붑붓붕붙붚붜붤붰붸뷔뷕뷘뷜뷩뷰뷴뷸븀븃븅브븍븐블븜븝븟비빅빈빌빎빔빕빗빙빚빛빠빡빤"],
      ["bb41", "틻", 4, "팂팄팆", 5, "팏팑팒팓팕팗", 4, "팞팢팣"],
      ["bb61", "팤팦팧팪팫팭팮팯팱", 6, "팺팾", 5, "퍆퍇퍈퍉"],
      ["bb81", "퍊", 31, "빨빪빰빱빳빴빵빻빼빽뺀뺄뺌뺍뺏뺐뺑뺘뺙뺨뻐뻑뻔뻗뻘뻠뻣뻤뻥뻬뼁뼈뼉뼘뼙뼛뼜뼝뽀뽁뽄뽈뽐뽑뽕뾔뾰뿅뿌뿍뿐뿔뿜뿟뿡쀼쁑쁘쁜쁠쁨쁩삐삑삔삘삠삡삣삥사삭삯산삳살삵삶삼삽삿샀상샅새색샌샐샘샙샛샜생샤"],
      ["bc41", "퍪", 17, "퍾퍿펁펂펃펅펆펇"],
      ["bc61", "펈펉펊펋펎펒", 5, "펚펛펝펞펟펡", 6, "펪펬펮"],
      ["bc81", "펯", 4, "펵펶펷펹펺펻펽", 6, "폆폇폊", 5, "폑", 5, "샥샨샬샴샵샷샹섀섄섈섐섕서", 4, "섣설섦섧섬섭섯섰성섶세섹센셀셈셉셋셌셍셔셕션셜셤셥셧셨셩셰셴셸솅소속솎손솔솖솜솝솟송솥솨솩솬솰솽쇄쇈쇌쇔쇗쇘쇠쇤쇨쇰쇱쇳쇼쇽숀숄숌숍숏숑수숙순숟술숨숩숫숭"],
      ["bd41", "폗폙", 7, "폢폤", 7, "폮폯폱폲폳폵폶폷"],
      ["bd61", "폸폹폺폻폾퐀퐂", 5, "퐉", 13],
      ["bd81", "퐗", 5, "퐞", 25, "숯숱숲숴쉈쉐쉑쉔쉘쉠쉥쉬쉭쉰쉴쉼쉽쉿슁슈슉슐슘슛슝스슥슨슬슭슴습슷승시식신싣실싫심십싯싱싶싸싹싻싼쌀쌈쌉쌌쌍쌓쌔쌕쌘쌜쌤쌥쌨쌩썅써썩썬썰썲썸썹썼썽쎄쎈쎌쏀쏘쏙쏜쏟쏠쏢쏨쏩쏭쏴쏵쏸쐈쐐쐤쐬쐰"],
      ["be41", "퐸", 7, "푁푂푃푅", 14],
      ["be61", "푔", 7, "푝푞푟푡푢푣푥", 7, "푮푰푱푲"],
      ["be81", "푳", 4, "푺푻푽푾풁풃", 4, "풊풌풎", 5, "풕", 8, "쐴쐼쐽쑈쑤쑥쑨쑬쑴쑵쑹쒀쒔쒜쒸쒼쓩쓰쓱쓴쓸쓺쓿씀씁씌씐씔씜씨씩씬씰씸씹씻씽아악안앉않알앍앎앓암압앗았앙앝앞애액앤앨앰앱앳앴앵야약얀얄얇얌얍얏양얕얗얘얜얠얩어억언얹얻얼얽얾엄", 6, "엌엎"],
      ["bf41", "풞", 10, "풪", 14],
      ["bf61", "풹", 18, "퓍퓎퓏퓑퓒퓓퓕"],
      ["bf81", "퓖", 5, "퓝퓞퓠", 7, "퓩퓪퓫퓭퓮퓯퓱", 6, "퓹퓺퓼에엑엔엘엠엡엣엥여역엮연열엶엷염", 5, "옅옆옇예옌옐옘옙옛옜오옥온올옭옮옰옳옴옵옷옹옻와왁완왈왐왑왓왔왕왜왝왠왬왯왱외왹왼욀욈욉욋욍요욕욘욜욤욥욧용우욱운울욹욺움웁웃웅워웍원월웜웝웠웡웨"],
      ["c041", "퓾", 5, "픅픆픇픉픊픋픍", 6, "픖픘", 5],
      ["c061", "픞", 25],
      ["c081", "픸픹픺픻픾픿핁핂핃핅", 6, "핎핐핒", 5, "핚핛핝핞핟핡핢핣웩웬웰웸웹웽위윅윈윌윔윕윗윙유육윤율윰윱윳융윷으윽은을읊음읍읏응", 7, "읜읠읨읫이익인일읽읾잃임입잇있잉잊잎자작잔잖잗잘잚잠잡잣잤장잦재잭잰잴잼잽잿쟀쟁쟈쟉쟌쟎쟐쟘쟝쟤쟨쟬저적전절젊"],
      ["c141", "핤핦핧핪핬핮", 5, "핶핷핹핺핻핽", 6, "햆햊햋"],
      ["c161", "햌햍햎햏햑", 19, "햦햧"],
      ["c181", "햨", 31, "점접젓정젖제젝젠젤젬젭젯젱져젼졀졈졉졌졍졔조족존졸졺좀좁좃종좆좇좋좌좍좔좝좟좡좨좼좽죄죈죌죔죕죗죙죠죡죤죵주죽준줄줅줆줌줍줏중줘줬줴쥐쥑쥔쥘쥠쥡쥣쥬쥰쥴쥼즈즉즌즐즘즙즛증지직진짇질짊짐집짓"],
      ["c241", "헊헋헍헎헏헑헓", 4, "헚헜헞", 5, "헦헧헩헪헫헭헮"],
      ["c261", "헯", 4, "헶헸헺", 5, "혂혃혅혆혇혉", 6, "혒"],
      ["c281", "혖", 5, "혝혞혟혡혢혣혥", 7, "혮", 9, "혺혻징짖짙짚짜짝짠짢짤짧짬짭짯짰짱째짹짼쨀쨈쨉쨋쨌쨍쨔쨘쨩쩌쩍쩐쩔쩜쩝쩟쩠쩡쩨쩽쪄쪘쪼쪽쫀쫄쫌쫍쫏쫑쫓쫘쫙쫠쫬쫴쬈쬐쬔쬘쬠쬡쭁쭈쭉쭌쭐쭘쭙쭝쭤쭸쭹쮜쮸쯔쯤쯧쯩찌찍찐찔찜찝찡찢찧차착찬찮찰참찹찻"],
      ["c341", "혽혾혿홁홂홃홄홆홇홊홌홎홏홐홒홓홖홗홙홚홛홝", 4],
      ["c361", "홢", 4, "홨홪", 5, "홲홳홵", 11],
      ["c381", "횁횂횄횆", 5, "횎횏횑횒횓횕", 7, "횞횠횢", 5, "횩횪찼창찾채책챈챌챔챕챗챘챙챠챤챦챨챰챵처척천철첨첩첫첬청체첵첸첼쳄쳅쳇쳉쳐쳔쳤쳬쳰촁초촉촌촐촘촙촛총촤촨촬촹최쵠쵤쵬쵭쵯쵱쵸춈추축춘출춤춥춧충춰췄췌췐취췬췰췸췹췻췽츄츈츌츔츙츠측츤츨츰츱츳층"],
      ["c441", "횫횭횮횯횱", 7, "횺횼", 7, "훆훇훉훊훋"],
      ["c461", "훍훎훏훐훒훓훕훖훘훚", 5, "훡훢훣훥훦훧훩", 4],
      ["c481", "훮훯훱훲훳훴훶", 5, "훾훿휁휂휃휅", 11, "휒휓휔치칙친칟칠칡침칩칫칭카칵칸칼캄캅캇캉캐캑캔캘캠캡캣캤캥캬캭컁커컥컨컫컬컴컵컷컸컹케켁켄켈켐켑켓켕켜켠켤켬켭켯켰켱켸코콕콘콜콤콥콧콩콰콱콴콸쾀쾅쾌쾡쾨쾰쿄쿠쿡쿤쿨쿰쿱쿳쿵쿼퀀퀄퀑퀘퀭퀴퀵퀸퀼"],
      ["c541", "휕휖휗휚휛휝휞휟휡", 6, "휪휬휮", 5, "휶휷휹"],
      ["c561", "휺휻휽", 6, "흅흆흈흊", 5, "흒흓흕흚", 4],
      ["c581", "흟흢흤흦흧흨흪흫흭흮흯흱흲흳흵", 6, "흾흿힀힂", 5, "힊힋큄큅큇큉큐큔큘큠크큭큰클큼큽킁키킥킨킬킴킵킷킹타탁탄탈탉탐탑탓탔탕태택탠탤탬탭탯탰탱탸턍터턱턴털턺텀텁텃텄텅테텍텐텔템텝텟텡텨텬텼톄톈토톡톤톨톰톱톳통톺톼퇀퇘퇴퇸툇툉툐투툭툰툴툼툽툿퉁퉈퉜"],
      ["c641", "힍힎힏힑", 6, "힚힜힞", 5],
      ["c6a1", "퉤튀튁튄튈튐튑튕튜튠튤튬튱트특튼튿틀틂틈틉틋틔틘틜틤틥티틱틴틸팀팁팃팅파팍팎판팔팖팜팝팟팠팡팥패팩팬팰팸팹팻팼팽퍄퍅퍼퍽펀펄펌펍펏펐펑페펙펜펠펨펩펫펭펴편펼폄폅폈평폐폘폡폣포폭폰폴폼폽폿퐁"],
      ["c7a1", "퐈퐝푀푄표푠푤푭푯푸푹푼푿풀풂품풉풋풍풔풩퓌퓐퓔퓜퓟퓨퓬퓰퓸퓻퓽프픈플픔픕픗피픽핀필핌핍핏핑하학한할핥함합핫항해핵핸핼햄햅햇했행햐향허헉헌헐헒험헙헛헝헤헥헨헬헴헵헷헹혀혁현혈혐협혓혔형혜혠"],
      ["c8a1", "혤혭호혹혼홀홅홈홉홋홍홑화확환활홧황홰홱홴횃횅회획횐횔횝횟횡효횬횰횹횻후훅훈훌훑훔훗훙훠훤훨훰훵훼훽휀휄휑휘휙휜휠휨휩휫휭휴휵휸휼흄흇흉흐흑흔흖흗흘흙흠흡흣흥흩희흰흴흼흽힁히힉힌힐힘힙힛힝"],
      ["caa1", "伽佳假價加可呵哥嘉嫁家暇架枷柯歌珂痂稼苛茄街袈訶賈跏軻迦駕刻却各恪慤殼珏脚覺角閣侃刊墾奸姦干幹懇揀杆柬桿澗癎看磵稈竿簡肝艮艱諫間乫喝曷渴碣竭葛褐蝎鞨勘坎堪嵌感憾戡敢柑橄減甘疳監瞰紺邯鑑鑒龕"],
      ["cba1", "匣岬甲胛鉀閘剛堈姜岡崗康强彊慷江畺疆糠絳綱羌腔舡薑襁講鋼降鱇介价個凱塏愷愾慨改槪漑疥皆盖箇芥蓋豈鎧開喀客坑更粳羹醵倨去居巨拒据據擧渠炬祛距踞車遽鉅鋸乾件健巾建愆楗腱虔蹇鍵騫乞傑杰桀儉劍劒檢"],
      ["cca1", "瞼鈐黔劫怯迲偈憩揭擊格檄激膈覡隔堅牽犬甄絹繭肩見譴遣鵑抉決潔結缺訣兼慊箝謙鉗鎌京俓倞傾儆勁勍卿坰境庚徑慶憬擎敬景暻更梗涇炅烱璟璥瓊痙硬磬竟競絅經耕耿脛莖警輕逕鏡頃頸驚鯨係啓堺契季屆悸戒桂械"],
      ["cda1", "棨溪界癸磎稽系繫繼計誡谿階鷄古叩告呱固姑孤尻庫拷攷故敲暠枯槁沽痼皐睾稿羔考股膏苦苽菰藁蠱袴誥賈辜錮雇顧高鼓哭斛曲梏穀谷鵠困坤崑昆梱棍滾琨袞鯤汨滑骨供公共功孔工恐恭拱控攻珙空蚣貢鞏串寡戈果瓜"],
      ["cea1", "科菓誇課跨過鍋顆廓槨藿郭串冠官寬慣棺款灌琯瓘管罐菅觀貫關館刮恝括适侊光匡壙廣曠洸炚狂珖筐胱鑛卦掛罫乖傀塊壞怪愧拐槐魁宏紘肱轟交僑咬喬嬌嶠巧攪敎校橋狡皎矯絞翹膠蕎蛟較轎郊餃驕鮫丘久九仇俱具勾"],
      ["cfa1", "區口句咎嘔坵垢寇嶇廐懼拘救枸柩構歐毆毬求溝灸狗玖球瞿矩究絿耉臼舅舊苟衢謳購軀逑邱鉤銶駒驅鳩鷗龜國局菊鞠鞫麴君窘群裙軍郡堀屈掘窟宮弓穹窮芎躬倦券勸卷圈拳捲權淃眷厥獗蕨蹶闕机櫃潰詭軌饋句晷歸貴"],
      ["d0a1", "鬼龜叫圭奎揆槻珪硅窺竅糾葵規赳逵閨勻均畇筠菌鈞龜橘克剋劇戟棘極隙僅劤勤懃斤根槿瑾筋芹菫覲謹近饉契今妗擒昑檎琴禁禽芩衾衿襟金錦伋及急扱汲級給亘兢矜肯企伎其冀嗜器圻基埼夔奇妓寄岐崎己幾忌技旗旣"],
      ["d1a1", "朞期杞棋棄機欺氣汽沂淇玘琦琪璂璣畸畿碁磯祁祇祈祺箕紀綺羈耆耭肌記譏豈起錡錤飢饑騎騏驥麒緊佶吉拮桔金喫儺喇奈娜懦懶拏拿癩", 5, "那樂", 4, "諾酪駱亂卵暖欄煖爛蘭難鸞捏捺南嵐枏楠湳濫男藍襤拉"],
      ["d2a1", "納臘蠟衲囊娘廊", 4, "乃來內奈柰耐冷女年撚秊念恬拈捻寧寗努勞奴弩怒擄櫓爐瑙盧", 5, "駑魯", 10, "濃籠聾膿農惱牢磊腦賂雷尿壘", 7, "嫩訥杻紐勒", 5, "能菱陵尼泥匿溺多茶"],
      ["d3a1", "丹亶但單團壇彖斷旦檀段湍短端簞緞蛋袒鄲鍛撻澾獺疸達啖坍憺擔曇淡湛潭澹痰聃膽蕁覃談譚錟沓畓答踏遝唐堂塘幢戇撞棠當糖螳黨代垈坮大對岱帶待戴擡玳臺袋貸隊黛宅德悳倒刀到圖堵塗導屠島嶋度徒悼挑掉搗桃"],
      ["d4a1", "棹櫂淘渡滔濤燾盜睹禱稻萄覩賭跳蹈逃途道都鍍陶韜毒瀆牘犢獨督禿篤纛讀墩惇敦旽暾沌焞燉豚頓乭突仝冬凍動同憧東桐棟洞潼疼瞳童胴董銅兜斗杜枓痘竇荳讀豆逗頭屯臀芚遁遯鈍得嶝橙燈登等藤謄鄧騰喇懶拏癩羅"],
      ["d5a1", "蘿螺裸邏樂洛烙珞絡落諾酪駱丹亂卵欄欒瀾爛蘭鸞剌辣嵐擥攬欖濫籃纜藍襤覽拉臘蠟廊朗浪狼琅瑯螂郞來崍徠萊冷掠略亮倆兩凉梁樑粮粱糧良諒輛量侶儷勵呂廬慮戾旅櫚濾礪藜蠣閭驢驪麗黎力曆歷瀝礫轢靂憐戀攣漣"],
      ["d6a1", "煉璉練聯蓮輦連鍊冽列劣洌烈裂廉斂殮濂簾獵令伶囹寧岺嶺怜玲笭羚翎聆逞鈴零靈領齡例澧禮醴隷勞怒撈擄櫓潞瀘爐盧老蘆虜路輅露魯鷺鹵碌祿綠菉錄鹿麓論壟弄朧瀧瓏籠聾儡瀨牢磊賂賚賴雷了僚寮廖料燎療瞭聊蓼"],
      ["d7a1", "遼鬧龍壘婁屢樓淚漏瘻累縷蔞褸鏤陋劉旒柳榴流溜瀏琉瑠留瘤硫謬類六戮陸侖倫崙淪綸輪律慄栗率隆勒肋凜凌楞稜綾菱陵俚利厘吏唎履悧李梨浬犁狸理璃異痢籬罹羸莉裏裡里釐離鯉吝潾燐璘藺躪隣鱗麟林淋琳臨霖砬"],
      ["d8a1", "立笠粒摩瑪痲碼磨馬魔麻寞幕漠膜莫邈万卍娩巒彎慢挽晩曼滿漫灣瞞萬蔓蠻輓饅鰻唜抹末沫茉襪靺亡妄忘忙望網罔芒茫莽輞邙埋妹媒寐昧枚梅每煤罵買賣邁魅脈貊陌驀麥孟氓猛盲盟萌冪覓免冕勉棉沔眄眠綿緬面麵滅"],
      ["d9a1", "蔑冥名命明暝椧溟皿瞑茗蓂螟酩銘鳴袂侮冒募姆帽慕摸摹暮某模母毛牟牡瑁眸矛耗芼茅謀謨貌木沐牧目睦穆鶩歿沒夢朦蒙卯墓妙廟描昴杳渺猫竗苗錨務巫憮懋戊拇撫无楙武毋無珷畝繆舞茂蕪誣貿霧鵡墨默們刎吻問文"],
      ["daa1", "汶紊紋聞蚊門雯勿沕物味媚尾嵋彌微未梶楣渼湄眉米美薇謎迷靡黴岷悶愍憫敏旻旼民泯玟珉緡閔密蜜謐剝博拍搏撲朴樸泊珀璞箔粕縛膊舶薄迫雹駁伴半反叛拌搬攀斑槃泮潘班畔瘢盤盼磐磻礬絆般蟠返頒飯勃拔撥渤潑"],
      ["dba1", "發跋醱鉢髮魃倣傍坊妨尨幇彷房放方旁昉枋榜滂磅紡肪膀舫芳蒡蚌訪謗邦防龐倍俳北培徘拜排杯湃焙盃背胚裴裵褙賠輩配陪伯佰帛柏栢白百魄幡樊煩燔番磻繁蕃藩飜伐筏罰閥凡帆梵氾汎泛犯範范法琺僻劈壁擘檗璧癖"],
      ["dca1", "碧蘗闢霹便卞弁變辨辯邊別瞥鱉鼈丙倂兵屛幷昞昺柄棅炳甁病秉竝輧餠騈保堡報寶普步洑湺潽珤甫菩補褓譜輔伏僕匐卜宓復服福腹茯蔔複覆輹輻馥鰒本乶俸奉封峯峰捧棒烽熢琫縫蓬蜂逢鋒鳳不付俯傅剖副否咐埠夫婦"],
      ["dda1", "孚孵富府復扶敷斧浮溥父符簿缶腐腑膚艀芙莩訃負賦賻赴趺部釜阜附駙鳧北分吩噴墳奔奮忿憤扮昐汾焚盆粉糞紛芬賁雰不佛弗彿拂崩朋棚硼繃鵬丕備匕匪卑妃婢庇悲憊扉批斐枇榧比毖毗毘沸泌琵痺砒碑秕秘粃緋翡肥"],
      ["dea1", "脾臂菲蜚裨誹譬費鄙非飛鼻嚬嬪彬斌檳殯浜濱瀕牝玭貧賓頻憑氷聘騁乍事些仕伺似使俟僿史司唆嗣四士奢娑寫寺射巳師徙思捨斜斯柶査梭死沙泗渣瀉獅砂社祀祠私篩紗絲肆舍莎蓑蛇裟詐詞謝賜赦辭邪飼駟麝削數朔索"],
      ["dfa1", "傘刪山散汕珊産疝算蒜酸霰乷撒殺煞薩三參杉森渗芟蔘衫揷澁鈒颯上傷像償商喪嘗孀尙峠常床庠廂想桑橡湘爽牀狀相祥箱翔裳觴詳象賞霜塞璽賽嗇塞穡索色牲生甥省笙墅壻嶼序庶徐恕抒捿敍暑曙書栖棲犀瑞筮絮緖署"],
      ["e0a1", "胥舒薯西誓逝鋤黍鼠夕奭席惜昔晳析汐淅潟石碩蓆釋錫仙僊先善嬋宣扇敾旋渲煽琁瑄璇璿癬禪線繕羨腺膳船蘚蟬詵跣選銑鐥饍鮮卨屑楔泄洩渫舌薛褻設說雪齧剡暹殲纖蟾贍閃陝攝涉燮葉城姓宬性惺成星晟猩珹盛省筬"],
      ["e1a1", "聖聲腥誠醒世勢歲洗稅笹細說貰召嘯塑宵小少巢所掃搔昭梳沼消溯瀟炤燒甦疏疎瘙笑篠簫素紹蔬蕭蘇訴逍遡邵銷韶騷俗屬束涑粟續謖贖速孫巽損蓀遜飡率宋悚松淞訟誦送頌刷殺灑碎鎖衰釗修受嗽囚垂壽嫂守岫峀帥愁"],
      ["e2a1", "戍手授搜收數樹殊水洙漱燧狩獸琇璲瘦睡秀穗竪粹綏綬繡羞脩茱蒐蓚藪袖誰讐輸遂邃酬銖銹隋隧隨雖需須首髓鬚叔塾夙孰宿淑潚熟琡璹肅菽巡徇循恂旬栒楯橓殉洵淳珣盾瞬筍純脣舜荀蓴蕣詢諄醇錞順馴戌術述鉥崇崧"],
      ["e3a1", "嵩瑟膝蝨濕拾習褶襲丞乘僧勝升承昇繩蠅陞侍匙嘶始媤尸屎屍市弑恃施是時枾柴猜矢示翅蒔蓍視試詩諡豕豺埴寔式息拭植殖湜熄篒蝕識軾食飾伸侁信呻娠宸愼新晨燼申神紳腎臣莘薪藎蜃訊身辛辰迅失室實悉審尋心沁"],
      ["e4a1", "沈深瀋甚芯諶什十拾雙氏亞俄兒啞娥峨我牙芽莪蛾衙訝阿雅餓鴉鵝堊岳嶽幄惡愕握樂渥鄂鍔顎鰐齷安岸按晏案眼雁鞍顔鮟斡謁軋閼唵岩巖庵暗癌菴闇壓押狎鴨仰央怏昻殃秧鴦厓哀埃崖愛曖涯碍艾隘靄厄扼掖液縊腋額"],
      ["e5a1", "櫻罌鶯鸚也倻冶夜惹揶椰爺耶若野弱掠略約若葯蒻藥躍亮佯兩凉壤孃恙揚攘敭暘梁楊樣洋瀁煬痒瘍禳穰糧羊良襄諒讓釀陽量養圄御於漁瘀禦語馭魚齬億憶抑檍臆偃堰彦焉言諺孼蘖俺儼嚴奄掩淹嶪業円予余勵呂女如廬"],
      ["e6a1", "旅歟汝濾璵礖礪與艅茹輿轝閭餘驪麗黎亦力域役易曆歷疫繹譯轢逆驛嚥堧姸娟宴年延憐戀捐挻撚椽沇沿涎涓淵演漣烟然煙煉燃燕璉硏硯秊筵緣練縯聯衍軟輦蓮連鉛鍊鳶列劣咽悅涅烈熱裂說閱厭廉念捻染殮炎焰琰艶苒"],
      ["e7a1", "簾閻髥鹽曄獵燁葉令囹塋寧嶺嶸影怜映暎楹榮永泳渶潁濚瀛瀯煐營獰玲瑛瑩瓔盈穎纓羚聆英詠迎鈴鍈零霙靈領乂倪例刈叡曳汭濊猊睿穢芮藝蘂禮裔詣譽豫醴銳隸霓預五伍俉傲午吾吳嗚塢墺奧娛寤悟惡懊敖旿晤梧汚澳"],
      ["e8a1", "烏熬獒筽蜈誤鰲鼇屋沃獄玉鈺溫瑥瘟穩縕蘊兀壅擁瓮甕癰翁邕雍饔渦瓦窩窪臥蛙蝸訛婉完宛梡椀浣玩琓琬碗緩翫脘腕莞豌阮頑曰往旺枉汪王倭娃歪矮外嵬巍猥畏了僚僥凹堯夭妖姚寥寮尿嶢拗搖撓擾料曜樂橈燎燿瑤療"],
      ["e9a1", "窈窯繇繞耀腰蓼蟯要謠遙遼邀饒慾欲浴縟褥辱俑傭冗勇埇墉容庸慂榕涌湧溶熔瑢用甬聳茸蓉踊鎔鏞龍于佑偶優又友右宇寓尤愚憂旴牛玗瑀盂祐禑禹紆羽芋藕虞迂遇郵釪隅雨雩勖彧旭昱栯煜稶郁頊云暈橒殞澐熉耘芸蕓"],
      ["eaa1", "運隕雲韻蔚鬱亐熊雄元原員圓園垣媛嫄寃怨愿援沅洹湲源爰猿瑗苑袁轅遠阮院願鴛月越鉞位偉僞危圍委威尉慰暐渭爲瑋緯胃萎葦蔿蝟衛褘謂違韋魏乳侑儒兪劉唯喩孺宥幼幽庾悠惟愈愉揄攸有杻柔柚柳楡楢油洧流游溜"],
      ["eba1", "濡猶猷琉瑜由留癒硫紐維臾萸裕誘諛諭踰蹂遊逾遺酉釉鍮類六堉戮毓肉育陸倫允奫尹崙淪潤玧胤贇輪鈗閏律慄栗率聿戎瀜絨融隆垠恩慇殷誾銀隱乙吟淫蔭陰音飮揖泣邑凝應膺鷹依倚儀宜意懿擬椅毅疑矣義艤薏蟻衣誼"],
      ["eca1", "議醫二以伊利吏夷姨履已弛彛怡易李梨泥爾珥理異痍痢移罹而耳肄苡荑裏裡貽貳邇里離飴餌匿溺瀷益翊翌翼謚人仁刃印吝咽因姻寅引忍湮燐璘絪茵藺蚓認隣靭靷鱗麟一佚佾壹日溢逸鎰馹任壬妊姙恁林淋稔臨荏賃入卄"],
      ["eda1", "立笠粒仍剩孕芿仔刺咨姉姿子字孜恣慈滋炙煮玆瓷疵磁紫者自茨蔗藉諮資雌作勺嚼斫昨灼炸爵綽芍酌雀鵲孱棧殘潺盞岑暫潛箴簪蠶雜丈仗匠場墻壯奬將帳庄張掌暲杖樟檣欌漿牆狀獐璋章粧腸臟臧莊葬蔣薔藏裝贓醬長"],
      ["eea1", "障再哉在宰才材栽梓渽滓災縡裁財載齋齎爭箏諍錚佇低儲咀姐底抵杵楮樗沮渚狙猪疽箸紵苧菹著藷詛貯躇這邸雎齟勣吊嫡寂摘敵滴狄炙的積笛籍績翟荻謫賊赤跡蹟迪迹適鏑佃佺傳全典前剪塡塼奠專展廛悛戰栓殿氈澱"],
      ["efa1", "煎琠田甸畑癲筌箋箭篆纏詮輾轉鈿銓錢鐫電顚顫餞切截折浙癤竊節絶占岾店漸点粘霑鮎點接摺蝶丁井亭停偵呈姃定幀庭廷征情挺政整旌晶晸柾楨檉正汀淀淨渟湞瀞炡玎珽町睛碇禎程穽精綎艇訂諪貞鄭酊釘鉦鋌錠霆靖"],
      ["f0a1", "靜頂鼎制劑啼堤帝弟悌提梯濟祭第臍薺製諸蹄醍除際霽題齊俎兆凋助嘲弔彫措操早晁曺曹朝條棗槽漕潮照燥爪璪眺祖祚租稠窕粗糟組繰肇藻蚤詔調趙躁造遭釣阻雕鳥族簇足鏃存尊卒拙猝倧宗從悰慫棕淙琮種終綜縱腫"],
      ["f1a1", "踪踵鍾鐘佐坐左座挫罪主住侏做姝胄呪周嗾奏宙州廚晝朱柱株注洲湊澍炷珠疇籌紂紬綢舟蛛註誅走躊輳週酎酒鑄駐竹粥俊儁准埈寯峻晙樽浚準濬焌畯竣蠢逡遵雋駿茁中仲衆重卽櫛楫汁葺增憎曾拯烝甑症繒蒸證贈之只"],
      ["f2a1", "咫地址志持指摯支旨智枝枳止池沚漬知砥祉祗紙肢脂至芝芷蜘誌識贄趾遲直稙稷織職唇嗔塵振搢晉晋桭榛殄津溱珍瑨璡畛疹盡眞瞋秦縉縝臻蔯袗診賑軫辰進鎭陣陳震侄叱姪嫉帙桎瓆疾秩窒膣蛭質跌迭斟朕什執潗緝輯"],
      ["f3a1", "鏶集徵懲澄且侘借叉嗟嵯差次此磋箚茶蹉車遮捉搾着窄錯鑿齪撰澯燦璨瓚竄簒纂粲纘讚贊鑽餐饌刹察擦札紮僭參塹慘慙懺斬站讒讖倉倡創唱娼廠彰愴敞昌昶暢槍滄漲猖瘡窓脹艙菖蒼債埰寀寨彩採砦綵菜蔡采釵冊柵策"],
      ["f4a1", "責凄妻悽處倜刺剔尺慽戚拓擲斥滌瘠脊蹠陟隻仟千喘天川擅泉淺玔穿舛薦賤踐遷釧闡阡韆凸哲喆徹撤澈綴輟轍鐵僉尖沾添甛瞻簽籤詹諂堞妾帖捷牒疊睫諜貼輒廳晴淸聽菁請靑鯖切剃替涕滯締諦逮遞體初剿哨憔抄招梢"],
      ["f5a1", "椒楚樵炒焦硝礁礎秒稍肖艸苕草蕉貂超酢醋醮促囑燭矗蜀觸寸忖村邨叢塚寵悤憁摠總聰蔥銃撮催崔最墜抽推椎楸樞湫皺秋芻萩諏趨追鄒酋醜錐錘鎚雛騶鰍丑畜祝竺筑築縮蓄蹙蹴軸逐春椿瑃出朮黜充忠沖蟲衝衷悴膵萃"],
      ["f6a1", "贅取吹嘴娶就炊翠聚脆臭趣醉驟鷲側仄厠惻測層侈値嗤峙幟恥梔治淄熾痔痴癡稚穉緇緻置致蚩輜雉馳齒則勅飭親七柒漆侵寢枕沈浸琛砧針鍼蟄秤稱快他咤唾墮妥惰打拖朶楕舵陀馱駝倬卓啄坼度托拓擢晫柝濁濯琢琸託"],
      ["f7a1", "鐸呑嘆坦彈憚歎灘炭綻誕奪脫探眈耽貪塔搭榻宕帑湯糖蕩兌台太怠態殆汰泰笞胎苔跆邰颱宅擇澤撑攄兎吐土討慟桶洞痛筒統通堆槌腿褪退頹偸套妬投透鬪慝特闖坡婆巴把播擺杷波派爬琶破罷芭跛頗判坂板版瓣販辦鈑"],
      ["f8a1", "阪八叭捌佩唄悖敗沛浿牌狽稗覇貝彭澎烹膨愎便偏扁片篇編翩遍鞭騙貶坪平枰萍評吠嬖幣廢弊斃肺蔽閉陛佈包匍匏咆哺圃布怖抛抱捕暴泡浦疱砲胞脯苞葡蒲袍褒逋鋪飽鮑幅暴曝瀑爆輻俵剽彪慓杓標漂瓢票表豹飇飄驃"],
      ["f9a1", "品稟楓諷豊風馮彼披疲皮被避陂匹弼必泌珌畢疋筆苾馝乏逼下何厦夏廈昰河瑕荷蝦賀遐霞鰕壑學虐謔鶴寒恨悍旱汗漢澣瀚罕翰閑閒限韓割轄函含咸啣喊檻涵緘艦銜陷鹹合哈盒蛤閤闔陜亢伉姮嫦巷恒抗杭桁沆港缸肛航"],
      ["faa1", "行降項亥偕咳垓奚孩害懈楷海瀣蟹解該諧邂駭骸劾核倖幸杏荇行享向嚮珦鄕響餉饗香噓墟虛許憲櫶獻軒歇險驗奕爀赫革俔峴弦懸晛泫炫玄玹現眩睍絃絢縣舷衒見賢鉉顯孑穴血頁嫌俠協夾峽挾浹狹脅脇莢鋏頰亨兄刑型"],
      ["fba1", "形泂滎瀅灐炯熒珩瑩荊螢衡逈邢鎣馨兮彗惠慧暳蕙蹊醯鞋乎互呼壕壺好岵弧戶扈昊晧毫浩淏湖滸澔濠濩灝狐琥瑚瓠皓祜糊縞胡芦葫蒿虎號蝴護豪鎬頀顥惑或酷婚昏混渾琿魂忽惚笏哄弘汞泓洪烘紅虹訌鴻化和嬅樺火畵"],
      ["fca1", "禍禾花華話譁貨靴廓擴攫確碻穫丸喚奐宦幻患換歡晥桓渙煥環紈還驩鰥活滑猾豁闊凰幌徨恍惶愰慌晃晄榥況湟滉潢煌璜皇篁簧荒蝗遑隍黃匯回廻徊恢悔懷晦會檜淮澮灰獪繪膾茴蛔誨賄劃獲宖橫鐄哮嚆孝效斅曉梟涍淆"],
      ["fda1", "爻肴酵驍侯候厚后吼喉嗅帿後朽煦珝逅勛勳塤壎焄熏燻薰訓暈薨喧暄煊萱卉喙毁彙徽揮暉煇諱輝麾休携烋畦虧恤譎鷸兇凶匈洶胸黑昕欣炘痕吃屹紇訖欠欽歆吸恰洽翕興僖凞喜噫囍姬嬉希憙憘戱晞曦熙熹熺犧禧稀羲詰"]
    ];
  }
});

// ../../node_modules/encoding/node_modules/iconv-lite/encodings/tables/cp950.json
var require_cp950 = __commonJS({
  "../../node_modules/encoding/node_modules/iconv-lite/encodings/tables/cp950.json"(exports, module) {
    module.exports = [
      ["0", "\0", 127],
      ["a140", "　，、。．‧；：？！︰…‥﹐﹑﹒·﹔﹕﹖﹗｜–︱—︳╴︴﹏（）︵︶｛｝︷︸〔〕︹︺【】︻︼《》︽︾〈〉︿﹀「」﹁﹂『』﹃﹄﹙﹚"],
      ["a1a1", "﹛﹜﹝﹞‘’“”〝〞‵′＃＆＊※§〃○●△▲◎☆★◇◆□■▽▼㊣℅¯￣＿ˍ﹉﹊﹍﹎﹋﹌﹟﹠﹡＋－×÷±√＜＞＝≦≧≠∞≒≡﹢", 4, "～∩∪⊥∠∟⊿㏒㏑∫∮∵∴♀♂⊕⊙↑↓←→↖↗↙↘∥∣／"],
      ["a240", "＼∕﹨＄￥〒￠￡％＠℃℉﹩﹪﹫㏕㎜㎝㎞㏎㎡㎎㎏㏄°兙兛兞兝兡兣嗧瓩糎▁", 7, "▏▎▍▌▋▊▉┼┴┬┤├▔─│▕┌┐└┘╭"],
      ["a2a1", "╮╰╯═╞╪╡◢◣◥◤╱╲╳０", 9, "Ⅰ", 9, "〡", 8, "十卄卅Ａ", 25, "ａ", 21],
      ["a340", "ｗｘｙｚΑ", 16, "Σ", 6, "α", 16, "σ", 6, "ㄅ", 10],
      ["a3a1", "ㄐ", 25, "˙ˉˊˇˋ"],
      ["a3e1", "€"],
      ["a440", "一乙丁七乃九了二人儿入八几刀刁力匕十卜又三下丈上丫丸凡久么也乞于亡兀刃勺千叉口土士夕大女子孑孓寸小尢尸山川工己已巳巾干廾弋弓才"],
      ["a4a1", "丑丐不中丰丹之尹予云井互五亢仁什仃仆仇仍今介仄元允內六兮公冗凶分切刈勻勾勿化匹午升卅卞厄友及反壬天夫太夭孔少尤尺屯巴幻廿弔引心戈戶手扎支文斗斤方日曰月木欠止歹毋比毛氏水火爪父爻片牙牛犬王丙"],
      ["a540", "世丕且丘主乍乏乎以付仔仕他仗代令仙仞充兄冉冊冬凹出凸刊加功包匆北匝仟半卉卡占卯卮去可古右召叮叩叨叼司叵叫另只史叱台句叭叻四囚外"],
      ["a5a1", "央失奴奶孕它尼巨巧左市布平幼弁弘弗必戊打扔扒扑斥旦朮本未末札正母民氐永汁汀氾犯玄玉瓜瓦甘生用甩田由甲申疋白皮皿目矛矢石示禾穴立丞丟乒乓乩亙交亦亥仿伉伙伊伕伍伐休伏仲件任仰仳份企伋光兇兆先全"],
      ["a640", "共再冰列刑划刎刖劣匈匡匠印危吉吏同吊吐吁吋各向名合吃后吆吒因回囝圳地在圭圬圯圩夙多夷夸妄奸妃好她如妁字存宇守宅安寺尖屹州帆并年"],
      ["a6a1", "式弛忙忖戎戌戍成扣扛托收早旨旬旭曲曳有朽朴朱朵次此死氖汝汗汙江池汐汕污汛汍汎灰牟牝百竹米糸缶羊羽老考而耒耳聿肉肋肌臣自至臼舌舛舟艮色艾虫血行衣西阡串亨位住佇佗佞伴佛何估佐佑伽伺伸佃佔似但佣"],
      ["a740", "作你伯低伶余佝佈佚兌克免兵冶冷別判利刪刨劫助努劬匣即卵吝吭吞吾否呎吧呆呃吳呈呂君吩告吹吻吸吮吵吶吠吼呀吱含吟听囪困囤囫坊坑址坍"],
      ["a7a1", "均坎圾坐坏圻壯夾妝妒妨妞妣妙妖妍妤妓妊妥孝孜孚孛完宋宏尬局屁尿尾岐岑岔岌巫希序庇床廷弄弟彤形彷役忘忌志忍忱快忸忪戒我抄抗抖技扶抉扭把扼找批扳抒扯折扮投抓抑抆改攻攸旱更束李杏材村杜杖杞杉杆杠"],
      ["a840", "杓杗步每求汞沙沁沈沉沅沛汪決沐汰沌汨沖沒汽沃汲汾汴沆汶沍沔沘沂灶灼災灸牢牡牠狄狂玖甬甫男甸皂盯矣私秀禿究系罕肖肓肝肘肛肚育良芒"],
      ["a8a1", "芋芍見角言谷豆豕貝赤走足身車辛辰迂迆迅迄巡邑邢邪邦那酉釆里防阮阱阪阬並乖乳事些亞享京佯依侍佳使佬供例來侃佰併侈佩佻侖佾侏侑佺兔兒兕兩具其典冽函刻券刷刺到刮制剁劾劻卒協卓卑卦卷卸卹取叔受味呵"],
      ["a940", "咖呸咕咀呻呷咄咒咆呼咐呱呶和咚呢周咋命咎固垃坷坪坩坡坦坤坼夜奉奇奈奄奔妾妻委妹妮姑姆姐姍始姓姊妯妳姒姅孟孤季宗定官宜宙宛尚屈居"],
      ["a9a1", "屆岷岡岸岩岫岱岳帘帚帖帕帛帑幸庚店府底庖延弦弧弩往征彿彼忝忠忽念忿怏怔怯怵怖怪怕怡性怩怫怛或戕房戾所承拉拌拄抿拂抹拒招披拓拔拋拈抨抽押拐拙拇拍抵拚抱拘拖拗拆抬拎放斧於旺昔易昌昆昂明昀昏昕昊"],
      ["aa40", "昇服朋杭枋枕東果杳杷枇枝林杯杰板枉松析杵枚枓杼杪杲欣武歧歿氓氛泣注泳沱泌泥河沽沾沼波沫法泓沸泄油況沮泗泅泱沿治泡泛泊沬泯泜泖泠"],
      ["aaa1", "炕炎炒炊炙爬爭爸版牧物狀狎狙狗狐玩玨玟玫玥甽疝疙疚的盂盲直知矽社祀祁秉秈空穹竺糾罔羌羋者肺肥肢肱股肫肩肴肪肯臥臾舍芳芝芙芭芽芟芹花芬芥芯芸芣芰芾芷虎虱初表軋迎返近邵邸邱邶采金長門阜陀阿阻附"],
      ["ab40", "陂隹雨青非亟亭亮信侵侯便俠俑俏保促侶俘俟俊俗侮俐俄係俚俎俞侷兗冒冑冠剎剃削前剌剋則勇勉勃勁匍南卻厚叛咬哀咨哎哉咸咦咳哇哂咽咪品"],
      ["aba1", "哄哈咯咫咱咻咩咧咿囿垂型垠垣垢城垮垓奕契奏奎奐姜姘姿姣姨娃姥姪姚姦威姻孩宣宦室客宥封屎屏屍屋峙峒巷帝帥帟幽庠度建弈弭彥很待徊律徇後徉怒思怠急怎怨恍恰恨恢恆恃恬恫恪恤扁拜挖按拼拭持拮拽指拱拷"],
      ["ac40", "拯括拾拴挑挂政故斫施既春昭映昧是星昨昱昤曷柿染柱柔某柬架枯柵柩柯柄柑枴柚查枸柏柞柳枰柙柢柝柒歪殃殆段毒毗氟泉洋洲洪流津洌洱洞洗"],
      ["aca1", "活洽派洶洛泵洹洧洸洩洮洵洎洫炫為炳炬炯炭炸炮炤爰牲牯牴狩狠狡玷珊玻玲珍珀玳甚甭畏界畎畋疫疤疥疢疣癸皆皇皈盈盆盃盅省盹相眉看盾盼眇矜砂研砌砍祆祉祈祇禹禺科秒秋穿突竿竽籽紂紅紀紉紇約紆缸美羿耄"],
      ["ad40", "耐耍耑耶胖胥胚胃胄背胡胛胎胞胤胝致舢苧范茅苣苛苦茄若茂茉苒苗英茁苜苔苑苞苓苟苯茆虐虹虻虺衍衫要觔計訂訃貞負赴赳趴軍軌述迦迢迪迥"],
      ["ada1", "迭迫迤迨郊郎郁郃酋酊重閂限陋陌降面革韋韭音頁風飛食首香乘亳倌倍倣俯倦倥俸倩倖倆值借倚倒們俺倀倔倨俱倡個候倘俳修倭倪俾倫倉兼冤冥冢凍凌准凋剖剜剔剛剝匪卿原厝叟哨唐唁唷哼哥哲唆哺唔哩哭員唉哮哪"],
      ["ae40", "哦唧唇哽唏圃圄埂埔埋埃堉夏套奘奚娑娘娜娟娛娓姬娠娣娩娥娌娉孫屘宰害家宴宮宵容宸射屑展屐峭峽峻峪峨峰島崁峴差席師庫庭座弱徒徑徐恙"],
      ["aea1", "恣恥恐恕恭恩息悄悟悚悍悔悌悅悖扇拳挈拿捎挾振捕捂捆捏捉挺捐挽挪挫挨捍捌效敉料旁旅時晉晏晃晒晌晅晁書朔朕朗校核案框桓根桂桔栩梳栗桌桑栽柴桐桀格桃株桅栓栘桁殊殉殷氣氧氨氦氤泰浪涕消涇浦浸海浙涓"],
      ["af40", "浬涉浮浚浴浩涌涊浹涅浥涔烊烘烤烙烈烏爹特狼狹狽狸狷玆班琉珮珠珪珞畔畝畜畚留疾病症疲疳疽疼疹痂疸皋皰益盍盎眩真眠眨矩砰砧砸砝破砷"],
      ["afa1", "砥砭砠砟砲祕祐祠祟祖神祝祗祚秤秣秧租秦秩秘窄窈站笆笑粉紡紗紋紊素索純紐紕級紜納紙紛缺罟羔翅翁耆耘耕耙耗耽耿胱脂胰脅胭胴脆胸胳脈能脊胼胯臭臬舀舐航舫舨般芻茫荒荔荊茸荐草茵茴荏茲茹茶茗荀茱茨荃"],
      ["b040", "虔蚊蚪蚓蚤蚩蚌蚣蚜衰衷袁袂衽衹記訐討訌訕訊託訓訖訏訑豈豺豹財貢起躬軒軔軏辱送逆迷退迺迴逃追逅迸邕郡郝郢酒配酌釘針釗釜釙閃院陣陡"],
      ["b0a1", "陛陝除陘陞隻飢馬骨高鬥鬲鬼乾偺偽停假偃偌做偉健偶偎偕偵側偷偏倏偯偭兜冕凰剪副勒務勘動匐匏匙匿區匾參曼商啪啦啄啞啡啃啊唱啖問啕唯啤唸售啜唬啣唳啁啗圈國圉域堅堊堆埠埤基堂堵執培夠奢娶婁婉婦婪婀"],
      ["b140", "娼婢婚婆婊孰寇寅寄寂宿密尉專將屠屜屝崇崆崎崛崖崢崑崩崔崙崤崧崗巢常帶帳帷康庸庶庵庾張強彗彬彩彫得徙從徘御徠徜恿患悉悠您惋悴惦悽"],
      ["b1a1", "情悻悵惜悼惘惕惆惟悸惚惇戚戛扈掠控捲掖探接捷捧掘措捱掩掉掃掛捫推掄授掙採掬排掏掀捻捩捨捺敝敖救教敗啟敏敘敕敔斜斛斬族旋旌旎晝晚晤晨晦晞曹勗望梁梯梢梓梵桿桶梱梧梗械梃棄梭梆梅梔條梨梟梡梂欲殺"],
      ["b240", "毫毬氫涎涼淳淙液淡淌淤添淺清淇淋涯淑涮淞淹涸混淵淅淒渚涵淚淫淘淪深淮淨淆淄涪淬涿淦烹焉焊烽烯爽牽犁猜猛猖猓猙率琅琊球理現琍瓠瓶"],
      ["b2a1", "瓷甜產略畦畢異疏痔痕疵痊痍皎盔盒盛眷眾眼眶眸眺硫硃硎祥票祭移窒窕笠笨笛第符笙笞笮粒粗粕絆絃統紮紹紼絀細紳組累終紲紱缽羞羚翌翎習耜聊聆脯脖脣脫脩脰脤舂舵舷舶船莎莞莘荸莢莖莽莫莒莊莓莉莠荷荻荼"],
      ["b340", "莆莧處彪蛇蛀蚶蛄蚵蛆蛋蚱蚯蛉術袞袈被袒袖袍袋覓規訪訝訣訥許設訟訛訢豉豚販責貫貨貪貧赧赦趾趺軛軟這逍通逗連速逝逐逕逞造透逢逖逛途"],
      ["b3a1", "部郭都酗野釵釦釣釧釭釩閉陪陵陳陸陰陴陶陷陬雀雪雩章竟頂頃魚鳥鹵鹿麥麻傢傍傅備傑傀傖傘傚最凱割剴創剩勞勝勛博厥啻喀喧啼喊喝喘喂喜喪喔喇喋喃喳單喟唾喲喚喻喬喱啾喉喫喙圍堯堪場堤堰報堡堝堠壹壺奠"],
      ["b440", "婷媚婿媒媛媧孳孱寒富寓寐尊尋就嵌嵐崴嵇巽幅帽幀幃幾廊廁廂廄弼彭復循徨惑惡悲悶惠愜愣惺愕惰惻惴慨惱愎惶愉愀愒戟扉掣掌描揀揩揉揆揍"],
      ["b4a1", "插揣提握揖揭揮捶援揪換摒揚揹敞敦敢散斑斐斯普晰晴晶景暑智晾晷曾替期朝棺棕棠棘棗椅棟棵森棧棹棒棲棣棋棍植椒椎棉棚楮棻款欺欽殘殖殼毯氮氯氬港游湔渡渲湧湊渠渥渣減湛湘渤湖湮渭渦湯渴湍渺測湃渝渾滋"],
      ["b540", "溉渙湎湣湄湲湩湟焙焚焦焰無然煮焜牌犄犀猶猥猴猩琺琪琳琢琥琵琶琴琯琛琦琨甥甦畫番痢痛痣痙痘痞痠登發皖皓皴盜睏短硝硬硯稍稈程稅稀窘"],
      ["b5a1", "窗窖童竣等策筆筐筒答筍筋筏筑粟粥絞結絨絕紫絮絲絡給絢絰絳善翔翕耋聒肅腕腔腋腑腎脹腆脾腌腓腴舒舜菩萃菸萍菠菅萋菁華菱菴著萊菰萌菌菽菲菊萸萎萄菜萇菔菟虛蛟蛙蛭蛔蛛蛤蛐蛞街裁裂袱覃視註詠評詞証詁"],
      ["b640", "詔詛詐詆訴診訶詖象貂貯貼貳貽賁費賀貴買貶貿貸越超趁跎距跋跚跑跌跛跆軻軸軼辜逮逵週逸進逶鄂郵鄉郾酣酥量鈔鈕鈣鈉鈞鈍鈐鈇鈑閔閏開閑"],
      ["b6a1", "間閒閎隊階隋陽隅隆隍陲隄雁雅雄集雇雯雲韌項順須飧飪飯飩飲飭馮馭黃黍黑亂傭債傲傳僅傾催傷傻傯僇剿剷剽募勦勤勢勣匯嗟嗨嗓嗦嗎嗜嗇嗑嗣嗤嗯嗚嗡嗅嗆嗥嗉園圓塞塑塘塗塚塔填塌塭塊塢塒塋奧嫁嫉嫌媾媽媼"],
      ["b740", "媳嫂媲嵩嵯幌幹廉廈弒彙徬微愚意慈感想愛惹愁愈慎慌慄慍愾愴愧愍愆愷戡戢搓搾搞搪搭搽搬搏搜搔損搶搖搗搆敬斟新暗暉暇暈暖暄暘暍會榔業"],
      ["b7a1", "楚楷楠楔極椰概楊楨楫楞楓楹榆楝楣楛歇歲毀殿毓毽溢溯滓溶滂源溝滇滅溥溘溼溺溫滑準溜滄滔溪溧溴煎煙煩煤煉照煜煬煦煌煥煞煆煨煖爺牒猷獅猿猾瑯瑚瑕瑟瑞瑁琿瑙瑛瑜當畸瘀痰瘁痲痱痺痿痴痳盞盟睛睫睦睞督"],
      ["b840", "睹睪睬睜睥睨睢矮碎碰碗碘碌碉硼碑碓硿祺祿禁萬禽稜稚稠稔稟稞窟窠筷節筠筮筧粱粳粵經絹綑綁綏絛置罩罪署義羨群聖聘肆肄腱腰腸腥腮腳腫"],
      ["b8a1", "腹腺腦舅艇蒂葷落萱葵葦葫葉葬葛萼萵葡董葩葭葆虞虜號蛹蜓蜈蜇蜀蛾蛻蜂蜃蜆蜊衙裟裔裙補裘裝裡裊裕裒覜解詫該詳試詩詰誇詼詣誠話誅詭詢詮詬詹詻訾詨豢貊貉賊資賈賄貲賃賂賅跡跟跨路跳跺跪跤跦躲較載軾輊"],
      ["b940", "辟農運遊道遂達逼違遐遇遏過遍遑逾遁鄒鄗酬酪酩釉鈷鉗鈸鈽鉀鈾鉛鉋鉤鉑鈴鉉鉍鉅鈹鈿鉚閘隘隔隕雍雋雉雊雷電雹零靖靴靶預頑頓頊頒頌飼飴"],
      ["b9a1", "飽飾馳馱馴髡鳩麂鼎鼓鼠僧僮僥僖僭僚僕像僑僱僎僩兢凳劃劂匱厭嗾嘀嘛嘗嗽嘔嘆嘉嘍嘎嗷嘖嘟嘈嘐嗶團圖塵塾境墓墊塹墅塽壽夥夢夤奪奩嫡嫦嫩嫗嫖嫘嫣孵寞寧寡寥實寨寢寤察對屢嶄嶇幛幣幕幗幔廓廖弊彆彰徹慇"],
      ["ba40", "愿態慷慢慣慟慚慘慵截撇摘摔撤摸摟摺摑摧搴摭摻敲斡旗旖暢暨暝榜榨榕槁榮槓構榛榷榻榫榴槐槍榭槌榦槃榣歉歌氳漳演滾漓滴漩漾漠漬漏漂漢"],
      ["baa1", "滿滯漆漱漸漲漣漕漫漯澈漪滬漁滲滌滷熔熙煽熊熄熒爾犒犖獄獐瑤瑣瑪瑰瑭甄疑瘧瘍瘋瘉瘓盡監瞄睽睿睡磁碟碧碳碩碣禎福禍種稱窪窩竭端管箕箋筵算箝箔箏箸箇箄粹粽精綻綰綜綽綾綠緊綴網綱綺綢綿綵綸維緒緇綬"],
      ["bb40", "罰翠翡翟聞聚肇腐膀膏膈膊腿膂臧臺與舔舞艋蓉蒿蓆蓄蒙蒞蒲蒜蓋蒸蓀蓓蒐蒼蓑蓊蜿蜜蜻蜢蜥蜴蜘蝕蜷蜩裳褂裴裹裸製裨褚裯誦誌語誣認誡誓誤"],
      ["bba1", "說誥誨誘誑誚誧豪貍貌賓賑賒赫趙趕跼輔輒輕輓辣遠遘遜遣遙遞遢遝遛鄙鄘鄞酵酸酷酴鉸銀銅銘銖鉻銓銜銨鉼銑閡閨閩閣閥閤隙障際雌雒需靼鞅韶頗領颯颱餃餅餌餉駁骯骰髦魁魂鳴鳶鳳麼鼻齊億儀僻僵價儂儈儉儅凜"],
      ["bc40", "劇劈劉劍劊勰厲嘮嘻嘹嘲嘿嘴嘩噓噎噗噴嘶嘯嘰墀墟增墳墜墮墩墦奭嬉嫻嬋嫵嬌嬈寮寬審寫層履嶝嶔幢幟幡廢廚廟廝廣廠彈影德徵慶慧慮慝慕憂"],
      ["bca1", "慼慰慫慾憧憐憫憎憬憚憤憔憮戮摩摯摹撞撲撈撐撰撥撓撕撩撒撮播撫撚撬撙撢撳敵敷數暮暫暴暱樣樟槨樁樞標槽模樓樊槳樂樅槭樑歐歎殤毅毆漿潼澄潑潦潔澆潭潛潸潮澎潺潰潤澗潘滕潯潠潟熟熬熱熨牖犛獎獗瑩璋璃"],
      ["bd40", "瑾璀畿瘠瘩瘟瘤瘦瘡瘢皚皺盤瞎瞇瞌瞑瞋磋磅確磊碾磕碼磐稿稼穀稽稷稻窯窮箭箱範箴篆篇篁箠篌糊締練緯緻緘緬緝編緣線緞緩綞緙緲緹罵罷羯"],
      ["bda1", "翩耦膛膜膝膠膚膘蔗蔽蔚蓮蔬蔭蔓蔑蔣蔡蔔蓬蔥蓿蔆螂蝴蝶蝠蝦蝸蝨蝙蝗蝌蝓衛衝褐複褒褓褕褊誼諒談諄誕請諸課諉諂調誰論諍誶誹諛豌豎豬賠賞賦賤賬賭賢賣賜質賡赭趟趣踫踐踝踢踏踩踟踡踞躺輝輛輟輩輦輪輜輞"],
      ["be40", "輥適遮遨遭遷鄰鄭鄧鄱醇醉醋醃鋅銻銷鋪銬鋤鋁銳銼鋒鋇鋰銲閭閱霄霆震霉靠鞍鞋鞏頡頫頜颳養餓餒餘駝駐駟駛駑駕駒駙骷髮髯鬧魅魄魷魯鴆鴉"],
      ["bea1", "鴃麩麾黎墨齒儒儘儔儐儕冀冪凝劑劓勳噙噫噹噩噤噸噪器噥噱噯噬噢噶壁墾壇壅奮嬝嬴學寰導彊憲憑憩憊懍憶憾懊懈戰擅擁擋撻撼據擄擇擂操撿擒擔撾整曆曉暹曄曇暸樽樸樺橙橫橘樹橄橢橡橋橇樵機橈歙歷氅濂澱澡"],
      ["bf40", "濃澤濁澧澳激澹澶澦澠澴熾燉燐燒燈燕熹燎燙燜燃燄獨璜璣璘璟璞瓢甌甍瘴瘸瘺盧盥瞠瞞瞟瞥磨磚磬磧禦積穎穆穌穋窺篙簑築篤篛篡篩篦糕糖縊"],
      ["bfa1", "縑縈縛縣縞縝縉縐罹羲翰翱翮耨膳膩膨臻興艘艙蕊蕙蕈蕨蕩蕃蕉蕭蕪蕞螃螟螞螢融衡褪褲褥褫褡親覦諦諺諫諱謀諜諧諮諾謁謂諷諭諳諶諼豫豭貓賴蹄踱踴蹂踹踵輻輯輸輳辨辦遵遴選遲遼遺鄴醒錠錶鋸錳錯錢鋼錫錄錚"],
      ["c040", "錐錦錡錕錮錙閻隧隨險雕霎霑霖霍霓霏靛靜靦鞘頰頸頻頷頭頹頤餐館餞餛餡餚駭駢駱骸骼髻髭鬨鮑鴕鴣鴦鴨鴒鴛默黔龍龜優償儡儲勵嚎嚀嚐嚅嚇"],
      ["c0a1", "嚏壕壓壑壎嬰嬪嬤孺尷屨嶼嶺嶽嶸幫彌徽應懂懇懦懋戲戴擎擊擘擠擰擦擬擱擢擭斂斃曙曖檀檔檄檢檜櫛檣橾檗檐檠歜殮毚氈濘濱濟濠濛濤濫濯澀濬濡濩濕濮濰燧營燮燦燥燭燬燴燠爵牆獰獲璩環璦璨癆療癌盪瞳瞪瞰瞬"],
      ["c140", "瞧瞭矯磷磺磴磯礁禧禪穗窿簇簍篾篷簌篠糠糜糞糢糟糙糝縮績繆縷縲繃縫總縱繅繁縴縹繈縵縿縯罄翳翼聱聲聰聯聳臆臃膺臂臀膿膽臉膾臨舉艱薪"],
      ["c1a1", "薄蕾薜薑薔薯薛薇薨薊虧蟀蟑螳蟒蟆螫螻螺蟈蟋褻褶襄褸褽覬謎謗謙講謊謠謝謄謐豁谿豳賺賽購賸賻趨蹉蹋蹈蹊轄輾轂轅輿避遽還邁邂邀鄹醣醞醜鍍鎂錨鍵鍊鍥鍋錘鍾鍬鍛鍰鍚鍔闊闋闌闈闆隱隸雖霜霞鞠韓顆颶餵騁"],
      ["c240", "駿鮮鮫鮪鮭鴻鴿麋黏點黜黝黛鼾齋叢嚕嚮壙壘嬸彝懣戳擴擲擾攆擺擻擷斷曜朦檳檬櫃檻檸櫂檮檯歟歸殯瀉瀋濾瀆濺瀑瀏燻燼燾燸獷獵璧璿甕癖癘"],
      ["c2a1", "癒瞽瞿瞻瞼礎禮穡穢穠竄竅簫簧簪簞簣簡糧織繕繞繚繡繒繙罈翹翻職聶臍臏舊藏薩藍藐藉薰薺薹薦蟯蟬蟲蟠覆覲觴謨謹謬謫豐贅蹙蹣蹦蹤蹟蹕軀轉轍邇邃邈醫醬釐鎔鎊鎖鎢鎳鎮鎬鎰鎘鎚鎗闔闖闐闕離雜雙雛雞霤鞣鞦"],
      ["c340", "鞭韹額顏題顎顓颺餾餿餽餮馥騎髁鬃鬆魏魎魍鯊鯉鯽鯈鯀鵑鵝鵠黠鼕鼬儳嚥壞壟壢寵龐廬懲懷懶懵攀攏曠曝櫥櫝櫚櫓瀛瀟瀨瀚瀝瀕瀘爆爍牘犢獸"],
      ["c3a1", "獺璽瓊瓣疇疆癟癡矇礙禱穫穩簾簿簸簽簷籀繫繭繹繩繪羅繳羶羹羸臘藩藝藪藕藤藥藷蟻蠅蠍蟹蟾襠襟襖襞譁譜識證譚譎譏譆譙贈贊蹼蹲躇蹶蹬蹺蹴轔轎辭邊邋醱醮鏡鏑鏟鏃鏈鏜鏝鏖鏢鏍鏘鏤鏗鏨關隴難霪霧靡韜韻類"],
      ["c440", "願顛颼饅饉騖騙鬍鯨鯧鯖鯛鶉鵡鵲鵪鵬麒麗麓麴勸嚨嚷嚶嚴嚼壤孀孃孽寶巉懸懺攘攔攙曦朧櫬瀾瀰瀲爐獻瓏癢癥礦礪礬礫竇競籌籃籍糯糰辮繽繼"],
      ["c4a1", "纂罌耀臚艦藻藹蘑藺蘆蘋蘇蘊蠔蠕襤覺觸議譬警譯譟譫贏贍躉躁躅躂醴釋鐘鐃鏽闡霰飄饒饑馨騫騰騷騵鰓鰍鹹麵黨鼯齟齣齡儷儸囁囀囂夔屬巍懼懾攝攜斕曩櫻欄櫺殲灌爛犧瓖瓔癩矓籐纏續羼蘗蘭蘚蠣蠢蠡蠟襪襬覽譴"],
      ["c540", "護譽贓躊躍躋轟辯醺鐮鐳鐵鐺鐸鐲鐫闢霸霹露響顧顥饗驅驃驀騾髏魔魑鰭鰥鶯鶴鷂鶸麝黯鼙齜齦齧儼儻囈囊囉孿巔巒彎懿攤權歡灑灘玀瓤疊癮癬"],
      ["c5a1", "禳籠籟聾聽臟襲襯觼讀贖贗躑躓轡酈鑄鑑鑒霽霾韃韁顫饕驕驍髒鬚鱉鰱鰾鰻鷓鷗鼴齬齪龔囌巖戀攣攫攪曬欐瓚竊籤籣籥纓纖纔臢蘸蘿蠱變邐邏鑣鑠鑤靨顯饜驚驛驗髓體髑鱔鱗鱖鷥麟黴囑壩攬灞癱癲矗罐羈蠶蠹衢讓讒"],
      ["c640", "讖艷贛釀鑪靂靈靄韆顰驟鬢魘鱟鷹鷺鹼鹽鼇齷齲廳欖灣籬籮蠻觀躡釁鑲鑰顱饞髖鬣黌灤矚讚鑷韉驢驥纜讜躪釅鑽鑾鑼鱷鱸黷豔鑿鸚爨驪鬱鸛鸞籲"],
      ["c940", "乂乜凵匚厂万丌乇亍囗兀屮彳丏冇与丮亓仂仉仈冘勼卬厹圠夃夬尐巿旡殳毌气爿丱丼仨仜仩仡仝仚刌匜卌圢圣夗夯宁宄尒尻屴屳帄庀庂忉戉扐氕"],
      ["c9a1", "氶汃氿氻犮犰玊禸肊阞伎优伬仵伔仱伀价伈伝伂伅伢伓伄仴伒冱刓刉刐劦匢匟卍厊吇囡囟圮圪圴夼妀奼妅奻奾奷奿孖尕尥屼屺屻屾巟幵庄异弚彴忕忔忏扜扞扤扡扦扢扙扠扚扥旯旮朾朹朸朻机朿朼朳氘汆汒汜汏汊汔汋"],
      ["ca40", "汌灱牞犴犵玎甪癿穵网艸艼芀艽艿虍襾邙邗邘邛邔阢阤阠阣佖伻佢佉体佤伾佧佒佟佁佘伭伳伿佡冏冹刜刞刡劭劮匉卣卲厎厏吰吷吪呔呅吙吜吥吘"],
      ["caa1", "吽呏呁吨吤呇囮囧囥坁坅坌坉坋坒夆奀妦妘妠妗妎妢妐妏妧妡宎宒尨尪岍岏岈岋岉岒岊岆岓岕巠帊帎庋庉庌庈庍弅弝彸彶忒忑忐忭忨忮忳忡忤忣忺忯忷忻怀忴戺抃抌抎抏抔抇扱扻扺扰抁抈扷扽扲扴攷旰旴旳旲旵杅杇"],
      ["cb40", "杙杕杌杈杝杍杚杋毐氙氚汸汧汫沄沋沏汱汯汩沚汭沇沕沜汦汳汥汻沎灴灺牣犿犽狃狆狁犺狅玕玗玓玔玒町甹疔疕皁礽耴肕肙肐肒肜芐芏芅芎芑芓"],
      ["cba1", "芊芃芄豸迉辿邟邡邥邞邧邠阰阨阯阭丳侘佼侅佽侀侇佶佴侉侄佷佌侗佪侚佹侁佸侐侜侔侞侒侂侕佫佮冞冼冾刵刲刳剆刱劼匊匋匼厒厔咇呿咁咑咂咈呫呺呾呥呬呴呦咍呯呡呠咘呣呧呤囷囹坯坲坭坫坱坰坶垀坵坻坳坴坢"],
      ["cc40", "坨坽夌奅妵妺姏姎妲姌姁妶妼姃姖妱妽姀姈妴姇孢孥宓宕屄屇岮岤岠岵岯岨岬岟岣岭岢岪岧岝岥岶岰岦帗帔帙弨弢弣弤彔徂彾彽忞忥怭怦怙怲怋"],
      ["cca1", "怴怊怗怳怚怞怬怢怍怐怮怓怑怌怉怜戔戽抭抴拑抾抪抶拊抮抳抯抻抩抰抸攽斨斻昉旼昄昒昈旻昃昋昍昅旽昑昐曶朊枅杬枎枒杶杻枘枆构杴枍枌杺枟枑枙枃杽极杸杹枔欥殀歾毞氝沓泬泫泮泙沶泔沭泧沷泐泂沺泃泆泭泲"],
      ["cd40", "泒泝沴沊沝沀泞泀洰泍泇沰泹泏泩泑炔炘炅炓炆炄炑炖炂炚炃牪狖狋狘狉狜狒狔狚狌狑玤玡玭玦玢玠玬玝瓝瓨甿畀甾疌疘皯盳盱盰盵矸矼矹矻矺"],
      ["cda1", "矷祂礿秅穸穻竻籵糽耵肏肮肣肸肵肭舠芠苀芫芚芘芛芵芧芮芼芞芺芴芨芡芩苂芤苃芶芢虰虯虭虮豖迒迋迓迍迖迕迗邲邴邯邳邰阹阽阼阺陃俍俅俓侲俉俋俁俔俜俙侻侳俛俇俖侺俀侹俬剄剉勀勂匽卼厗厖厙厘咺咡咭咥哏"],
      ["ce40", "哃茍咷咮哖咶哅哆咠呰咼咢咾呲哞咰垵垞垟垤垌垗垝垛垔垘垏垙垥垚垕壴复奓姡姞姮娀姱姝姺姽姼姶姤姲姷姛姩姳姵姠姾姴姭宨屌峐峘峌峗峋峛"],
      ["cea1", "峞峚峉峇峊峖峓峔峏峈峆峎峟峸巹帡帢帣帠帤庰庤庢庛庣庥弇弮彖徆怷怹恔恲恞恅恓恇恉恛恌恀恂恟怤恄恘恦恮扂扃拏挍挋拵挎挃拫拹挏挌拸拶挀挓挔拺挕拻拰敁敃斪斿昶昡昲昵昜昦昢昳昫昺昝昴昹昮朏朐柁柲柈枺"],
      ["cf40", "柜枻柸柘柀枷柅柫柤柟枵柍枳柷柶柮柣柂枹柎柧柰枲柼柆柭柌枮柦柛柺柉柊柃柪柋欨殂殄殶毖毘毠氠氡洨洴洭洟洼洿洒洊泚洳洄洙洺洚洑洀洝浂"],
      ["cfa1", "洁洘洷洃洏浀洇洠洬洈洢洉洐炷炟炾炱炰炡炴炵炩牁牉牊牬牰牳牮狊狤狨狫狟狪狦狣玅珌珂珈珅玹玶玵玴珫玿珇玾珃珆玸珋瓬瓮甮畇畈疧疪癹盄眈眃眄眅眊盷盻盺矧矨砆砑砒砅砐砏砎砉砃砓祊祌祋祅祄秕种秏秖秎窀"],
      ["d040", "穾竑笀笁籺籸籹籿粀粁紃紈紁罘羑羍羾耇耎耏耔耷胘胇胠胑胈胂胐胅胣胙胜胊胕胉胏胗胦胍臿舡芔苙苾苹茇苨茀苕茺苫苖苴苬苡苲苵茌苻苶苰苪"],
      ["d0a1", "苤苠苺苳苭虷虴虼虳衁衎衧衪衩觓訄訇赲迣迡迮迠郱邽邿郕郅邾郇郋郈釔釓陔陏陑陓陊陎倞倅倇倓倢倰倛俵俴倳倷倬俶俷倗倜倠倧倵倯倱倎党冔冓凊凄凅凈凎剡剚剒剞剟剕剢勍匎厞唦哢唗唒哧哳哤唚哿唄唈哫唑唅哱"],
      ["d140", "唊哻哷哸哠唎唃唋圁圂埌堲埕埒垺埆垽垼垸垶垿埇埐垹埁夎奊娙娖娭娮娕娏娗娊娞娳孬宧宭宬尃屖屔峬峿峮峱峷崀峹帩帨庨庮庪庬弳弰彧恝恚恧"],
      ["d1a1", "恁悢悈悀悒悁悝悃悕悛悗悇悜悎戙扆拲挐捖挬捄捅挶捃揤挹捋捊挼挩捁挴捘捔捙挭捇挳捚捑挸捗捀捈敊敆旆旃旄旂晊晟晇晑朒朓栟栚桉栲栳栻桋桏栖栱栜栵栫栭栯桎桄栴栝栒栔栦栨栮桍栺栥栠欬欯欭欱欴歭肂殈毦毤"],
      ["d240", "毨毣毢毧氥浺浣浤浶洍浡涒浘浢浭浯涑涍淯浿涆浞浧浠涗浰浼浟涂涘洯浨涋浾涀涄洖涃浻浽浵涐烜烓烑烝烋缹烢烗烒烞烠烔烍烅烆烇烚烎烡牂牸"],
      ["d2a1", "牷牶猀狺狴狾狶狳狻猁珓珙珥珖玼珧珣珩珜珒珛珔珝珚珗珘珨瓞瓟瓴瓵甡畛畟疰痁疻痄痀疿疶疺皊盉眝眛眐眓眒眣眑眕眙眚眢眧砣砬砢砵砯砨砮砫砡砩砳砪砱祔祛祏祜祓祒祑秫秬秠秮秭秪秜秞秝窆窉窅窋窌窊窇竘笐"],
      ["d340", "笄笓笅笏笈笊笎笉笒粄粑粊粌粈粍粅紞紝紑紎紘紖紓紟紒紏紌罜罡罞罠罝罛羖羒翃翂翀耖耾耹胺胲胹胵脁胻脀舁舯舥茳茭荄茙荑茥荖茿荁茦茜茢"],
      ["d3a1", "荂荎茛茪茈茼荍茖茤茠茷茯茩荇荅荌荓茞茬荋茧荈虓虒蚢蚨蚖蚍蚑蚞蚇蚗蚆蚋蚚蚅蚥蚙蚡蚧蚕蚘蚎蚝蚐蚔衃衄衭衵衶衲袀衱衿衯袃衾衴衼訒豇豗豻貤貣赶赸趵趷趶軑軓迾迵适迿迻逄迼迶郖郠郙郚郣郟郥郘郛郗郜郤酐"],
      ["d440", "酎酏釕釢釚陜陟隼飣髟鬯乿偰偪偡偞偠偓偋偝偲偈偍偁偛偊偢倕偅偟偩偫偣偤偆偀偮偳偗偑凐剫剭剬剮勖勓匭厜啵啶唼啍啐唴唪啑啢唶唵唰啒啅"],
      ["d4a1", "唌唲啥啎唹啈唭唻啀啋圊圇埻堔埢埶埜埴堀埭埽堈埸堋埳埏堇埮埣埲埥埬埡堎埼堐埧堁堌埱埩埰堍堄奜婠婘婕婧婞娸娵婭婐婟婥婬婓婤婗婃婝婒婄婛婈媎娾婍娹婌婰婩婇婑婖婂婜孲孮寁寀屙崞崋崝崚崠崌崨崍崦崥崏"],
      ["d540", "崰崒崣崟崮帾帴庱庴庹庲庳弶弸徛徖徟悊悐悆悾悰悺惓惔惏惤惙惝惈悱惛悷惊悿惃惍惀挲捥掊掂捽掽掞掭掝掗掫掎捯掇掐据掯捵掜捭掮捼掤挻掟"],
      ["d5a1", "捸掅掁掑掍捰敓旍晥晡晛晙晜晢朘桹梇梐梜桭桮梮梫楖桯梣梬梩桵桴梲梏桷梒桼桫桲梪梀桱桾梛梖梋梠梉梤桸桻梑梌梊桽欶欳欷欸殑殏殍殎殌氪淀涫涴涳湴涬淩淢涷淶淔渀淈淠淟淖涾淥淜淝淛淴淊涽淭淰涺淕淂淏淉"],
      ["d640", "淐淲淓淽淗淍淣涻烺焍烷焗烴焌烰焄烳焐烼烿焆焓焀烸烶焋焂焎牾牻牼牿猝猗猇猑猘猊猈狿猏猞玈珶珸珵琄琁珽琇琀珺珼珿琌琋珴琈畤畣痎痒痏"],
      ["d6a1", "痋痌痑痐皏皉盓眹眯眭眱眲眴眳眽眥眻眵硈硒硉硍硊硌砦硅硐祤祧祩祪祣祫祡离秺秸秶秷窏窔窐笵筇笴笥笰笢笤笳笘笪笝笱笫笭笯笲笸笚笣粔粘粖粣紵紽紸紶紺絅紬紩絁絇紾紿絊紻紨罣羕羜羝羛翊翋翍翐翑翇翏翉耟"],
      ["d740", "耞耛聇聃聈脘脥脙脛脭脟脬脞脡脕脧脝脢舑舸舳舺舴舲艴莐莣莨莍荺荳莤荴莏莁莕莙荵莔莩荽莃莌莝莛莪莋荾莥莯莈莗莰荿莦莇莮荶莚虙虖蚿蚷"],
      ["d7a1", "蛂蛁蛅蚺蚰蛈蚹蚳蚸蛌蚴蚻蚼蛃蚽蚾衒袉袕袨袢袪袚袑袡袟袘袧袙袛袗袤袬袌袓袎覂觖觙觕訰訧訬訞谹谻豜豝豽貥赽赻赹趼跂趹趿跁軘軞軝軜軗軠軡逤逋逑逜逌逡郯郪郰郴郲郳郔郫郬郩酖酘酚酓酕釬釴釱釳釸釤釹釪"],
      ["d840", "釫釷釨釮镺閆閈陼陭陫陱陯隿靪頄飥馗傛傕傔傞傋傣傃傌傎傝偨傜傒傂傇兟凔匒匑厤厧喑喨喥喭啷噅喢喓喈喏喵喁喣喒喤啽喌喦啿喕喡喎圌堩堷"],
      ["d8a1", "堙堞堧堣堨埵塈堥堜堛堳堿堶堮堹堸堭堬堻奡媯媔媟婺媢媞婸媦婼媥媬媕媮娷媄媊媗媃媋媩婻婽媌媜媏媓媝寪寍寋寔寑寊寎尌尰崷嵃嵫嵁嵋崿崵嵑嵎嵕崳崺嵒崽崱嵙嵂崹嵉崸崼崲崶嵀嵅幄幁彘徦徥徫惉悹惌惢惎惄愔"],
      ["d940", "惲愊愖愅惵愓惸惼惾惁愃愘愝愐惿愄愋扊掔掱掰揎揥揨揯揃撝揳揊揠揶揕揲揵摡揟掾揝揜揄揘揓揂揇揌揋揈揰揗揙攲敧敪敤敜敨敥斌斝斞斮旐旒"],
      ["d9a1", "晼晬晻暀晱晹晪晲朁椌棓椄棜椪棬棪棱椏棖棷棫棤棶椓椐棳棡椇棌椈楰梴椑棯棆椔棸棐棽棼棨椋椊椗棎棈棝棞棦棴棑椆棔棩椕椥棇欹欻欿欼殔殗殙殕殽毰毲毳氰淼湆湇渟湉溈渼渽湅湢渫渿湁湝湳渜渳湋湀湑渻渃渮湞"],
      ["da40", "湨湜湡渱渨湠湱湫渹渢渰湓湥渧湸湤湷湕湹湒湦渵渶湚焠焞焯烻焮焱焣焥焢焲焟焨焺焛牋牚犈犉犆犅犋猒猋猰猢猱猳猧猲猭猦猣猵猌琮琬琰琫琖"],
      ["daa1", "琚琡琭琱琤琣琝琩琠琲瓻甯畯畬痧痚痡痦痝痟痤痗皕皒盚睆睇睄睍睅睊睎睋睌矞矬硠硤硥硜硭硱硪确硰硩硨硞硢祴祳祲祰稂稊稃稌稄窙竦竤筊笻筄筈筌筎筀筘筅粢粞粨粡絘絯絣絓絖絧絪絏絭絜絫絒絔絩絑絟絎缾缿罥"],
      ["db40", "罦羢羠羡翗聑聏聐胾胔腃腊腒腏腇脽腍脺臦臮臷臸臹舄舼舽舿艵茻菏菹萣菀菨萒菧菤菼菶萐菆菈菫菣莿萁菝菥菘菿菡菋菎菖菵菉萉萏菞萑萆菂菳"],
      ["dba1", "菕菺菇菑菪萓菃菬菮菄菻菗菢萛菛菾蛘蛢蛦蛓蛣蛚蛪蛝蛫蛜蛬蛩蛗蛨蛑衈衖衕袺裗袹袸裀袾袶袼袷袽袲褁裉覕覘覗觝觚觛詎詍訹詙詀詗詘詄詅詒詈詑詊詌詏豟貁貀貺貾貰貹貵趄趀趉跘跓跍跇跖跜跏跕跙跈跗跅軯軷軺"],
      ["dc40", "軹軦軮軥軵軧軨軶軫軱軬軴軩逭逴逯鄆鄬鄄郿郼鄈郹郻鄁鄀鄇鄅鄃酡酤酟酢酠鈁鈊鈥鈃鈚鈦鈏鈌鈀鈒釿釽鈆鈄鈧鈂鈜鈤鈙鈗鈅鈖镻閍閌閐隇陾隈"],
      ["dca1", "隉隃隀雂雈雃雱雰靬靰靮頇颩飫鳦黹亃亄亶傽傿僆傮僄僊傴僈僂傰僁傺傱僋僉傶傸凗剺剸剻剼嗃嗛嗌嗐嗋嗊嗝嗀嗔嗄嗩喿嗒喍嗏嗕嗢嗖嗈嗲嗍嗙嗂圔塓塨塤塏塍塉塯塕塎塝塙塥塛堽塣塱壼嫇嫄嫋媺媸媱媵媰媿嫈媻嫆"],
      ["dd40", "媷嫀嫊媴媶嫍媹媐寖寘寙尟尳嵱嵣嵊嵥嵲嵬嵞嵨嵧嵢巰幏幎幊幍幋廅廌廆廋廇彀徯徭惷慉慊愫慅愶愲愮慆愯慏愩慀戠酨戣戥戤揅揱揫搐搒搉搠搤"],
      ["dda1", "搳摃搟搕搘搹搷搢搣搌搦搰搨摁搵搯搊搚摀搥搧搋揧搛搮搡搎敯斒旓暆暌暕暐暋暊暙暔晸朠楦楟椸楎楢楱椿楅楪椹楂楗楙楺楈楉椵楬椳椽楥棰楸椴楩楀楯楄楶楘楁楴楌椻楋椷楜楏楑椲楒椯楻椼歆歅歃歂歈歁殛嗀毻毼"],
      ["de40", "毹毷毸溛滖滈溏滀溟溓溔溠溱溹滆滒溽滁溞滉溷溰滍溦滏溲溾滃滜滘溙溒溎溍溤溡溿溳滐滊溗溮溣煇煔煒煣煠煁煝煢煲煸煪煡煂煘煃煋煰煟煐煓"],
      ["dea1", "煄煍煚牏犍犌犑犐犎猼獂猻猺獀獊獉瑄瑊瑋瑒瑑瑗瑀瑏瑐瑎瑂瑆瑍瑔瓡瓿瓾瓽甝畹畷榃痯瘏瘃痷痾痼痹痸瘐痻痶痭痵痽皙皵盝睕睟睠睒睖睚睩睧睔睙睭矠碇碚碔碏碄碕碅碆碡碃硹碙碀碖硻祼禂祽祹稑稘稙稒稗稕稢稓"],
      ["df40", "稛稐窣窢窞竫筦筤筭筴筩筲筥筳筱筰筡筸筶筣粲粴粯綈綆綀綍絿綅絺綎絻綃絼綌綔綄絽綒罭罫罧罨罬羦羥羧翛翜耡腤腠腷腜腩腛腢腲朡腞腶腧腯"],
      ["dfa1", "腄腡舝艉艄艀艂艅蓱萿葖葶葹蒏蒍葥葑葀蒆葧萰葍葽葚葙葴葳葝蔇葞萷萺萴葺葃葸萲葅萩菙葋萯葂萭葟葰萹葎葌葒葯蓅蒎萻葇萶萳葨葾葄萫葠葔葮葐蜋蜄蛷蜌蛺蛖蛵蝍蛸蜎蜉蜁蛶蜍蜅裖裋裍裎裞裛裚裌裐覅覛觟觥觤"],
      ["e040", "觡觠觢觜触詶誆詿詡訿詷誂誄詵誃誁詴詺谼豋豊豥豤豦貆貄貅賌赨赩趑趌趎趏趍趓趔趐趒跰跠跬跱跮跐跩跣跢跧跲跫跴輆軿輁輀輅輇輈輂輋遒逿"],
      ["e0a1", "遄遉逽鄐鄍鄏鄑鄖鄔鄋鄎酮酯鉈鉒鈰鈺鉦鈳鉥鉞銃鈮鉊鉆鉭鉬鉏鉠鉧鉯鈶鉡鉰鈱鉔鉣鉐鉲鉎鉓鉌鉖鈲閟閜閞閛隒隓隑隗雎雺雽雸雵靳靷靸靲頏頍頎颬飶飹馯馲馰馵骭骫魛鳪鳭鳧麀黽僦僔僗僨僳僛僪僝僤僓僬僰僯僣僠"],
      ["e140", "凘劀劁勩勫匰厬嘧嘕嘌嘒嗼嘏嘜嘁嘓嘂嗺嘝嘄嗿嗹墉塼墐墘墆墁塿塴墋塺墇墑墎塶墂墈塻墔墏壾奫嫜嫮嫥嫕嫪嫚嫭嫫嫳嫢嫠嫛嫬嫞嫝嫙嫨嫟孷寠"],
      ["e1a1", "寣屣嶂嶀嵽嶆嵺嶁嵷嶊嶉嶈嵾嵼嶍嵹嵿幘幙幓廘廑廗廎廜廕廙廒廔彄彃彯徶愬愨慁慞慱慳慒慓慲慬憀慴慔慺慛慥愻慪慡慖戩戧戫搫摍摛摝摴摶摲摳摽摵摦撦摎撂摞摜摋摓摠摐摿搿摬摫摙摥摷敳斠暡暠暟朅朄朢榱榶槉"],
      ["e240", "榠槎榖榰榬榼榑榙榎榧榍榩榾榯榿槄榽榤槔榹槊榚槏榳榓榪榡榞槙榗榐槂榵榥槆歊歍歋殞殟殠毃毄毾滎滵滱漃漥滸漷滻漮漉潎漙漚漧漘漻漒滭漊"],
      ["e2a1", "漶潳滹滮漭潀漰漼漵滫漇漎潃漅滽滶漹漜滼漺漟漍漞漈漡熇熐熉熀熅熂熏煻熆熁熗牄牓犗犕犓獃獍獑獌瑢瑳瑱瑵瑲瑧瑮甀甂甃畽疐瘖瘈瘌瘕瘑瘊瘔皸瞁睼瞅瞂睮瞀睯睾瞃碲碪碴碭碨硾碫碞碥碠碬碢碤禘禊禋禖禕禔禓"],
      ["e340", "禗禈禒禐稫穊稰稯稨稦窨窫窬竮箈箜箊箑箐箖箍箌箛箎箅箘劄箙箤箂粻粿粼粺綧綷緂綣綪緁緀緅綝緎緄緆緋緌綯綹綖綼綟綦綮綩綡緉罳翢翣翥翞"],
      ["e3a1", "耤聝聜膉膆膃膇膍膌膋舕蒗蒤蒡蒟蒺蓎蓂蒬蒮蒫蒹蒴蓁蓍蒪蒚蒱蓐蒝蒧蒻蒢蒔蓇蓌蒛蒩蒯蒨蓖蒘蒶蓏蒠蓗蓔蓒蓛蒰蒑虡蜳蜣蜨蝫蝀蜮蜞蜡蜙蜛蝃蜬蝁蜾蝆蜠蜲蜪蜭蜼蜒蜺蜱蜵蝂蜦蜧蜸蜤蜚蜰蜑裷裧裱裲裺裾裮裼裶裻"],
      ["e440", "裰裬裫覝覡覟覞觩觫觨誫誙誋誒誏誖谽豨豩賕賏賗趖踉踂跿踍跽踊踃踇踆踅跾踀踄輐輑輎輍鄣鄜鄠鄢鄟鄝鄚鄤鄡鄛酺酲酹酳銥銤鉶銛鉺銠銔銪銍"],
      ["e4a1", "銦銚銫鉹銗鉿銣鋮銎銂銕銢鉽銈銡銊銆銌銙銧鉾銇銩銝銋鈭隞隡雿靘靽靺靾鞃鞀鞂靻鞄鞁靿韎韍頖颭颮餂餀餇馝馜駃馹馻馺駂馽駇骱髣髧鬾鬿魠魡魟鳱鳲鳵麧僿儃儰僸儆儇僶僾儋儌僽儊劋劌勱勯噈噂噌嘵噁噊噉噆噘"],
      ["e540", "噚噀嘳嘽嘬嘾嘸嘪嘺圚墫墝墱墠墣墯墬墥墡壿嫿嫴嫽嫷嫶嬃嫸嬂嫹嬁嬇嬅嬏屧嶙嶗嶟嶒嶢嶓嶕嶠嶜嶡嶚嶞幩幝幠幜緳廛廞廡彉徲憋憃慹憱憰憢憉"],
      ["e5a1", "憛憓憯憭憟憒憪憡憍慦憳戭摮摰撖撠撅撗撜撏撋撊撌撣撟摨撱撘敶敺敹敻斲斳暵暰暩暲暷暪暯樀樆樗槥槸樕槱槤樠槿槬槢樛樝槾樧槲槮樔槷槧橀樈槦槻樍槼槫樉樄樘樥樏槶樦樇槴樖歑殥殣殢殦氁氀毿氂潁漦潾澇濆澒"],
      ["e640", "澍澉澌潢潏澅潚澖潶潬澂潕潲潒潐潗澔澓潝漀潡潫潽潧澐潓澋潩潿澕潣潷潪潻熲熯熛熰熠熚熩熵熝熥熞熤熡熪熜熧熳犘犚獘獒獞獟獠獝獛獡獚獙"],
      ["e6a1", "獢璇璉璊璆璁瑽璅璈瑼瑹甈甇畾瘥瘞瘙瘝瘜瘣瘚瘨瘛皜皝皞皛瞍瞏瞉瞈磍碻磏磌磑磎磔磈磃磄磉禚禡禠禜禢禛歶稹窲窴窳箷篋箾箬篎箯箹篊箵糅糈糌糋緷緛緪緧緗緡縃緺緦緶緱緰緮緟罶羬羰羭翭翫翪翬翦翨聤聧膣膟"],
      ["e740", "膞膕膢膙膗舖艏艓艒艐艎艑蔤蔻蔏蔀蔩蔎蔉蔍蔟蔊蔧蔜蓻蔫蓺蔈蔌蓴蔪蓲蔕蓷蓫蓳蓼蔒蓪蓩蔖蓾蔨蔝蔮蔂蓽蔞蓶蔱蔦蓧蓨蓰蓯蓹蔘蔠蔰蔋蔙蔯虢"],
      ["e7a1", "蝖蝣蝤蝷蟡蝳蝘蝔蝛蝒蝡蝚蝑蝞蝭蝪蝐蝎蝟蝝蝯蝬蝺蝮蝜蝥蝏蝻蝵蝢蝧蝩衚褅褌褔褋褗褘褙褆褖褑褎褉覢覤覣觭觰觬諏諆誸諓諑諔諕誻諗誾諀諅諘諃誺誽諙谾豍貏賥賟賙賨賚賝賧趠趜趡趛踠踣踥踤踮踕踛踖踑踙踦踧"],
      ["e840", "踔踒踘踓踜踗踚輬輤輘輚輠輣輖輗遳遰遯遧遫鄯鄫鄩鄪鄲鄦鄮醅醆醊醁醂醄醀鋐鋃鋄鋀鋙銶鋏鋱鋟鋘鋩鋗鋝鋌鋯鋂鋨鋊鋈鋎鋦鋍鋕鋉鋠鋞鋧鋑鋓"],
      ["e8a1", "銵鋡鋆銴镼閬閫閮閰隤隢雓霅霈霂靚鞊鞎鞈韐韏頞頝頦頩頨頠頛頧颲餈飺餑餔餖餗餕駜駍駏駓駔駎駉駖駘駋駗駌骳髬髫髳髲髱魆魃魧魴魱魦魶魵魰魨魤魬鳼鳺鳽鳿鳷鴇鴀鳹鳻鴈鴅鴄麃黓鼏鼐儜儓儗儚儑凞匴叡噰噠噮"],
      ["e940", "噳噦噣噭噲噞噷圜圛壈墽壉墿墺壂墼壆嬗嬙嬛嬡嬔嬓嬐嬖嬨嬚嬠嬞寯嶬嶱嶩嶧嶵嶰嶮嶪嶨嶲嶭嶯嶴幧幨幦幯廩廧廦廨廥彋徼憝憨憖懅憴懆懁懌憺"],
      ["e9a1", "憿憸憌擗擖擐擏擉撽撉擃擛擳擙攳敿敼斢曈暾曀曊曋曏暽暻暺曌朣樴橦橉橧樲橨樾橝橭橶橛橑樨橚樻樿橁橪橤橐橏橔橯橩橠樼橞橖橕橍橎橆歕歔歖殧殪殫毈毇氄氃氆澭濋澣濇澼濎濈潞濄澽澞濊澨瀄澥澮澺澬澪濏澿澸"],
      ["ea40", "澢濉澫濍澯澲澰燅燂熿熸燖燀燁燋燔燊燇燏熽燘熼燆燚燛犝犞獩獦獧獬獥獫獪瑿璚璠璔璒璕璡甋疀瘯瘭瘱瘽瘳瘼瘵瘲瘰皻盦瞚瞝瞡瞜瞛瞢瞣瞕瞙"],
      ["eaa1", "瞗磝磩磥磪磞磣磛磡磢磭磟磠禤穄穈穇窶窸窵窱窷篞篣篧篝篕篥篚篨篹篔篪篢篜篫篘篟糒糔糗糐糑縒縡縗縌縟縠縓縎縜縕縚縢縋縏縖縍縔縥縤罃罻罼罺羱翯耪耩聬膱膦膮膹膵膫膰膬膴膲膷膧臲艕艖艗蕖蕅蕫蕍蕓蕡蕘"],
      ["eb40", "蕀蕆蕤蕁蕢蕄蕑蕇蕣蔾蕛蕱蕎蕮蕵蕕蕧蕠薌蕦蕝蕔蕥蕬虣虥虤螛螏螗螓螒螈螁螖螘蝹螇螣螅螐螑螝螄螔螜螚螉褞褦褰褭褮褧褱褢褩褣褯褬褟觱諠"],
      ["eba1", "諢諲諴諵諝謔諤諟諰諈諞諡諨諿諯諻貑貒貐賵賮賱賰賳赬赮趥趧踳踾踸蹀蹅踶踼踽蹁踰踿躽輶輮輵輲輹輷輴遶遹遻邆郺鄳鄵鄶醓醐醑醍醏錧錞錈錟錆錏鍺錸錼錛錣錒錁鍆錭錎錍鋋錝鋺錥錓鋹鋷錴錂錤鋿錩錹錵錪錔錌"],
      ["ec40", "錋鋾錉錀鋻錖閼闍閾閹閺閶閿閵閽隩雔霋霒霐鞙鞗鞔韰韸頵頯頲餤餟餧餩馞駮駬駥駤駰駣駪駩駧骹骿骴骻髶髺髹髷鬳鮀鮅鮇魼魾魻鮂鮓鮒鮐魺鮕"],
      ["eca1", "魽鮈鴥鴗鴠鴞鴔鴩鴝鴘鴢鴐鴙鴟麈麆麇麮麭黕黖黺鼒鼽儦儥儢儤儠儩勴嚓嚌嚍嚆嚄嚃噾嚂噿嚁壖壔壏壒嬭嬥嬲嬣嬬嬧嬦嬯嬮孻寱寲嶷幬幪徾徻懃憵憼懧懠懥懤懨懞擯擩擣擫擤擨斁斀斶旚曒檍檖檁檥檉檟檛檡檞檇檓檎"],
      ["ed40", "檕檃檨檤檑橿檦檚檅檌檒歛殭氉濌澩濴濔濣濜濭濧濦濞濲濝濢濨燡燱燨燲燤燰燢獳獮獯璗璲璫璐璪璭璱璥璯甐甑甒甏疄癃癈癉癇皤盩瞵瞫瞲瞷瞶"],
      ["eda1", "瞴瞱瞨矰磳磽礂磻磼磲礅磹磾礄禫禨穜穛穖穘穔穚窾竀竁簅簏篲簀篿篻簎篴簋篳簂簉簃簁篸篽簆篰篱簐簊糨縭縼繂縳顈縸縪繉繀繇縩繌縰縻縶繄縺罅罿罾罽翴翲耬膻臄臌臊臅臇膼臩艛艚艜薃薀薏薧薕薠薋薣蕻薤薚薞"],
      ["ee40", "蕷蕼薉薡蕺蕸蕗薎薖薆薍薙薝薁薢薂薈薅蕹蕶薘薐薟虨螾螪螭蟅螰螬螹螵螼螮蟉蟃蟂蟌螷螯蟄蟊螴螶螿螸螽蟞螲褵褳褼褾襁襒褷襂覭覯覮觲觳謞"],
      ["eea1", "謘謖謑謅謋謢謏謒謕謇謍謈謆謜謓謚豏豰豲豱豯貕貔賹赯蹎蹍蹓蹐蹌蹇轃轀邅遾鄸醚醢醛醙醟醡醝醠鎡鎃鎯鍤鍖鍇鍼鍘鍜鍶鍉鍐鍑鍠鍭鎏鍌鍪鍹鍗鍕鍒鍏鍱鍷鍻鍡鍞鍣鍧鎀鍎鍙闇闀闉闃闅閷隮隰隬霠霟霘霝霙鞚鞡鞜"],
      ["ef40", "鞞鞝韕韔韱顁顄顊顉顅顃餥餫餬餪餳餲餯餭餱餰馘馣馡騂駺駴駷駹駸駶駻駽駾駼騃骾髾髽鬁髼魈鮚鮨鮞鮛鮦鮡鮥鮤鮆鮢鮠鮯鴳鵁鵧鴶鴮鴯鴱鴸鴰"],
      ["efa1", "鵅鵂鵃鴾鴷鵀鴽翵鴭麊麉麍麰黈黚黻黿鼤鼣鼢齔龠儱儭儮嚘嚜嚗嚚嚝嚙奰嬼屩屪巀幭幮懘懟懭懮懱懪懰懫懖懩擿攄擽擸攁攃擼斔旛曚曛曘櫅檹檽櫡櫆檺檶檷櫇檴檭歞毉氋瀇瀌瀍瀁瀅瀔瀎濿瀀濻瀦濼濷瀊爁燿燹爃燽獶"],
      ["f040", "璸瓀璵瓁璾璶璻瓂甔甓癜癤癙癐癓癗癚皦皽盬矂瞺磿礌礓礔礉礐礒礑禭禬穟簜簩簙簠簟簭簝簦簨簢簥簰繜繐繖繣繘繢繟繑繠繗繓羵羳翷翸聵臑臒"],
      ["f0a1", "臐艟艞薴藆藀藃藂薳薵薽藇藄薿藋藎藈藅薱薶藒蘤薸薷薾虩蟧蟦蟢蟛蟫蟪蟥蟟蟳蟤蟔蟜蟓蟭蟘蟣螤蟗蟙蠁蟴蟨蟝襓襋襏襌襆襐襑襉謪謧謣謳謰謵譇謯謼謾謱謥謷謦謶謮謤謻謽謺豂豵貙貘貗賾贄贂贀蹜蹢蹠蹗蹖蹞蹥蹧"],
      ["f140", "蹛蹚蹡蹝蹩蹔轆轇轈轋鄨鄺鄻鄾醨醥醧醯醪鎵鎌鎒鎷鎛鎝鎉鎧鎎鎪鎞鎦鎕鎈鎙鎟鎍鎱鎑鎲鎤鎨鎴鎣鎥闒闓闑隳雗雚巂雟雘雝霣霢霥鞬鞮鞨鞫鞤鞪"],
      ["f1a1", "鞢鞥韗韙韖韘韺顐顑顒颸饁餼餺騏騋騉騍騄騑騊騅騇騆髀髜鬈鬄鬅鬩鬵魊魌魋鯇鯆鯃鮿鯁鮵鮸鯓鮶鯄鮹鮽鵜鵓鵏鵊鵛鵋鵙鵖鵌鵗鵒鵔鵟鵘鵚麎麌黟鼁鼀鼖鼥鼫鼪鼩鼨齌齕儴儵劖勷厴嚫嚭嚦嚧嚪嚬壚壝壛夒嬽嬾嬿巃幰"],
      ["f240", "徿懻攇攐攍攉攌攎斄旞旝曞櫧櫠櫌櫑櫙櫋櫟櫜櫐櫫櫏櫍櫞歠殰氌瀙瀧瀠瀖瀫瀡瀢瀣瀩瀗瀤瀜瀪爌爊爇爂爅犥犦犤犣犡瓋瓅璷瓃甖癠矉矊矄矱礝礛"],
      ["f2a1", "礡礜礗礞禰穧穨簳簼簹簬簻糬糪繶繵繸繰繷繯繺繲繴繨罋罊羃羆羷翽翾聸臗臕艤艡艣藫藱藭藙藡藨藚藗藬藲藸藘藟藣藜藑藰藦藯藞藢蠀蟺蠃蟶蟷蠉蠌蠋蠆蟼蠈蟿蠊蠂襢襚襛襗襡襜襘襝襙覈覷覶觶譐譈譊譀譓譖譔譋譕"],
      ["f340", "譑譂譒譗豃豷豶貚贆贇贉趬趪趭趫蹭蹸蹳蹪蹯蹻軂轒轑轏轐轓辴酀鄿醰醭鏞鏇鏏鏂鏚鏐鏹鏬鏌鏙鎩鏦鏊鏔鏮鏣鏕鏄鏎鏀鏒鏧镽闚闛雡霩霫霬霨霦"],
      ["f3a1", "鞳鞷鞶韝韞韟顜顙顝顗颿颽颻颾饈饇饃馦馧騚騕騥騝騤騛騢騠騧騣騞騜騔髂鬋鬊鬎鬌鬷鯪鯫鯠鯞鯤鯦鯢鯰鯔鯗鯬鯜鯙鯥鯕鯡鯚鵷鶁鶊鶄鶈鵱鶀鵸鶆鶋鶌鵽鵫鵴鵵鵰鵩鶅鵳鵻鶂鵯鵹鵿鶇鵨麔麑黀黼鼭齀齁齍齖齗齘匷嚲"],
      ["f440", "嚵嚳壣孅巆巇廮廯忀忁懹攗攖攕攓旟曨曣曤櫳櫰櫪櫨櫹櫱櫮櫯瀼瀵瀯瀷瀴瀱灂瀸瀿瀺瀹灀瀻瀳灁爓爔犨獽獼璺皫皪皾盭矌矎矏矍矲礥礣礧礨礤礩"],
      ["f4a1", "禲穮穬穭竷籉籈籊籇籅糮繻繾纁纀羺翿聹臛臙舋艨艩蘢藿蘁藾蘛蘀藶蘄蘉蘅蘌藽蠙蠐蠑蠗蠓蠖襣襦覹觷譠譪譝譨譣譥譧譭趮躆躈躄轙轖轗轕轘轚邍酃酁醷醵醲醳鐋鐓鏻鐠鐏鐔鏾鐕鐐鐨鐙鐍鏵鐀鏷鐇鐎鐖鐒鏺鐉鏸鐊鏿"],
      ["f540", "鏼鐌鏶鐑鐆闞闠闟霮霯鞹鞻韽韾顠顢顣顟飁飂饐饎饙饌饋饓騲騴騱騬騪騶騩騮騸騭髇髊髆鬐鬒鬑鰋鰈鯷鰅鰒鯸鱀鰇鰎鰆鰗鰔鰉鶟鶙鶤鶝鶒鶘鶐鶛"],
      ["f5a1", "鶠鶔鶜鶪鶗鶡鶚鶢鶨鶞鶣鶿鶩鶖鶦鶧麙麛麚黥黤黧黦鼰鼮齛齠齞齝齙龑儺儹劘劗囃嚽嚾孈孇巋巏廱懽攛欂櫼欃櫸欀灃灄灊灈灉灅灆爝爚爙獾甗癪矐礭礱礯籔籓糲纊纇纈纋纆纍罍羻耰臝蘘蘪蘦蘟蘣蘜蘙蘧蘮蘡蘠蘩蘞蘥"],
      ["f640", "蠩蠝蠛蠠蠤蠜蠫衊襭襩襮襫觺譹譸譅譺譻贐贔趯躎躌轞轛轝酆酄酅醹鐿鐻鐶鐩鐽鐼鐰鐹鐪鐷鐬鑀鐱闥闤闣霵霺鞿韡顤飉飆飀饘饖騹騽驆驄驂驁騺"],
      ["f6a1", "騿髍鬕鬗鬘鬖鬺魒鰫鰝鰜鰬鰣鰨鰩鰤鰡鶷鶶鶼鷁鷇鷊鷏鶾鷅鷃鶻鶵鷎鶹鶺鶬鷈鶱鶭鷌鶳鷍鶲鹺麜黫黮黭鼛鼘鼚鼱齎齥齤龒亹囆囅囋奱孋孌巕巑廲攡攠攦攢欋欈欉氍灕灖灗灒爞爟犩獿瓘瓕瓙瓗癭皭礵禴穰穱籗籜籙籛籚"],
      ["f740", "糴糱纑罏羇臞艫蘴蘵蘳蘬蘲蘶蠬蠨蠦蠪蠥襱覿覾觻譾讄讂讆讅譿贕躕躔躚躒躐躖躗轠轢酇鑌鑐鑊鑋鑏鑇鑅鑈鑉鑆霿韣顪顩飋饔饛驎驓驔驌驏驈驊"],
      ["f7a1", "驉驒驐髐鬙鬫鬻魖魕鱆鱈鰿鱄鰹鰳鱁鰼鰷鰴鰲鰽鰶鷛鷒鷞鷚鷋鷐鷜鷑鷟鷩鷙鷘鷖鷵鷕鷝麶黰鼵鼳鼲齂齫龕龢儽劙壨壧奲孍巘蠯彏戁戃戄攩攥斖曫欑欒欏毊灛灚爢玂玁玃癰矔籧籦纕艬蘺虀蘹蘼蘱蘻蘾蠰蠲蠮蠳襶襴襳觾"],
      ["f840", "讌讎讋讈豅贙躘轤轣醼鑢鑕鑝鑗鑞韄韅頀驖驙鬞鬟鬠鱒鱘鱐鱊鱍鱋鱕鱙鱌鱎鷻鷷鷯鷣鷫鷸鷤鷶鷡鷮鷦鷲鷰鷢鷬鷴鷳鷨鷭黂黐黲黳鼆鼜鼸鼷鼶齃齏"],
      ["f8a1", "齱齰齮齯囓囍孎屭攭曭曮欓灟灡灝灠爣瓛瓥矕礸禷禶籪纗羉艭虃蠸蠷蠵衋讔讕躞躟躠躝醾醽釂鑫鑨鑩雥靆靃靇韇韥驞髕魙鱣鱧鱦鱢鱞鱠鸂鷾鸇鸃鸆鸅鸀鸁鸉鷿鷽鸄麠鼞齆齴齵齶囔攮斸欘欙欗欚灢爦犪矘矙礹籩籫糶纚"],
      ["f940", "纘纛纙臠臡虆虇虈襹襺襼襻觿讘讙躥躤躣鑮鑭鑯鑱鑳靉顲饟鱨鱮鱭鸋鸍鸐鸏鸒鸑麡黵鼉齇齸齻齺齹圞灦籯蠼趲躦釃鑴鑸鑶鑵驠鱴鱳鱱鱵鸔鸓黶鼊"],
      ["f9a1", "龤灨灥糷虪蠾蠽蠿讞貜躩軉靋顳顴飌饡馫驤驦驧鬤鸕鸗齈戇欞爧虌躨钂钀钁驩驨鬮鸙爩虋讟钃鱹麷癵驫鱺鸝灩灪麤齾齉龘碁銹裏墻恒粧嫺╔╦╗╠╬╣╚╩╝╒╤╕╞╪╡╘╧╛╓╥╖╟╫╢╙╨╜║═╭╮╰╯▓"]
    ];
  }
});

// ../../node_modules/encoding/node_modules/iconv-lite/encodings/tables/big5-added.json
var require_big5_added = __commonJS({
  "../../node_modules/encoding/node_modules/iconv-lite/encodings/tables/big5-added.json"(exports, module) {
    module.exports = [
      ["8740", "䏰䰲䘃䖦䕸𧉧䵷䖳𧲱䳢𧳅㮕䜶䝄䱇䱀𤊿𣘗𧍒𦺋𧃒䱗𪍑䝏䗚䲅𧱬䴇䪤䚡𦬣爥𥩔𡩣𣸆𣽡晍囻"],
      ["8767", "綕夝𨮹㷴霴𧯯寛𡵞媤㘥𩺰嫑宷峼杮薓𩥅瑡璝㡵𡵓𣚞𦀡㻬"],
      ["87a1", "𥣞㫵竼龗𤅡𨤍𣇪𠪊𣉞䌊蒄龖鐯䤰蘓墖靊鈘秐稲晠権袝瑌篅枂稬剏遆㓦珄𥶹瓆鿇垳䤯呌䄱𣚎堘穲𧭥讏䚮𦺈䆁𥶙箮𢒼鿈𢓁𢓉𢓌鿉蔄𣖻䂴鿊䓡𪷿拁灮鿋"],
      ["8840", "㇀", 4, "𠄌㇅𠃑𠃍㇆㇇𠃋𡿨㇈𠃊㇉㇊㇋㇌𠄎㇍㇎ĀÁǍÀĒÉĚÈŌÓǑÒ࿿Ê̄Ế࿿Ê̌ỀÊāáǎàɑēéěèīíǐìōóǒòūúǔùǖǘǚ"],
      ["88a1", "ǜü࿿ê̄ế࿿ê̌ềêɡ⏚⏛"],
      ["8940", "𪎩𡅅"],
      ["8943", "攊"],
      ["8946", "丽滝鵎釟"],
      ["894c", "𧜵撑会伨侨兖兴农凤务动医华发变团声处备夲头学实実岚庆总斉柾栄桥济炼电纤纬纺织经统缆缷艺苏药视设询车轧轮"],
      ["89a1", "琑糼緍楆竉刧"],
      ["89ab", "醌碸酞肼"],
      ["89b0", "贋胶𠧧"],
      ["89b5", "肟黇䳍鷉鸌䰾𩷶𧀎鸊𪄳㗁"],
      ["89c1", "溚舾甙"],
      ["89c5", "䤑马骏龙禇𨑬𡷊𠗐𢫦两亁亀亇亿仫伷㑌侽㹈倃傈㑽㒓㒥円夅凛凼刅争剹劐匧㗇厩㕑厰㕓参吣㕭㕲㚁咓咣咴咹哐哯唘唣唨㖘唿㖥㖿嗗㗅"],
      ["8a40", "𧶄唥"],
      ["8a43", "𠱂𠴕𥄫喐𢳆㧬𠍁蹆𤶸𩓥䁓𨂾睺𢰸㨴䟕𨅝𦧲𤷪擝𠵼𠾴𠳕𡃴撍蹾𠺖𠰋𠽤𢲩𨉖𤓓"],
      ["8a64", "𠵆𩩍𨃩䟴𤺧𢳂骲㩧𩗴㿭㔆𥋇𩟔𧣈𢵄鵮頕"],
      ["8a76", "䏙𦂥撴哣𢵌𢯊𡁷㧻𡁯"],
      ["8aa1", "𦛚𦜖𧦠擪𥁒𠱃蹨𢆡𨭌𠜱"],
      ["8aac", "䠋𠆩㿺塳𢶍"],
      ["8ab2", "𤗈𠓼𦂗𠽌𠶖啹䂻䎺"],
      ["8abb", "䪴𢩦𡂝膪飵𠶜捹㧾𢝵跀嚡摼㹃"],
      ["8ac9", "𪘁𠸉𢫏𢳉"],
      ["8ace", "𡃈𣧂㦒㨆𨊛㕸𥹉𢃇噒𠼱𢲲𩜠㒼氽𤸻"],
      ["8adf", "𧕴𢺋𢈈𪙛𨳍𠹺𠰴𦠜羓𡃏𢠃𢤹㗻𥇣𠺌𠾍𠺪㾓𠼰𠵇𡅏𠹌"],
      ["8af6", "𠺫𠮩𠵈𡃀𡄽㿹𢚖搲𠾭"],
      ["8b40", "𣏴𧘹𢯎𠵾𠵿𢱑𢱕㨘𠺘𡃇𠼮𪘲𦭐𨳒𨶙𨳊閪哌苄喹"],
      ["8b55", "𩻃鰦骶𧝞𢷮煀腭胬尜𦕲脴㞗卟𨂽醶𠻺𠸏𠹷𠻻㗝𤷫㘉𠳖嚯𢞵𡃉𠸐𠹸𡁸𡅈𨈇𡑕𠹹𤹐𢶤婔𡀝𡀞𡃵𡃶垜𠸑"],
      ["8ba1", "𧚔𨋍𠾵𠹻𥅾㜃𠾶𡆀𥋘𪊽𤧚𡠺𤅷𨉼墙剨㘚𥜽箲孨䠀䬬鼧䧧鰟鮍𥭴𣄽嗻㗲嚉丨夂𡯁屮靑𠂆乛亻㔾尣彑忄㣺扌攵歺氵氺灬爫丬犭𤣩罒礻糹罓𦉪㓁"],
      ["8bde", "𦍋耂肀𦘒𦥑卝衤见𧢲讠贝钅镸长门𨸏韦页风飞饣𩠐鱼鸟黄歯龜丷𠂇阝户钢"],
      ["8c40", "倻淾𩱳龦㷉袏𤅎灷峵䬠𥇍㕙𥴰愢𨨲辧釶熑朙玺𣊁𪄇㲋𡦀䬐磤琂冮𨜏䀉橣𪊺䈣蘏𠩯稪𩥇𨫪靕灍匤𢁾鏴盙𨧣龧矝亣俰傼丯众龨吴綋墒壐𡶶庒庙忂𢜒斋"],
      ["8ca1", "𣏹椙橃𣱣泿"],
      ["8ca7", "爀𤔅玌㻛𤨓嬕璹讃𥲤𥚕窓篬糃繬苸薗龩袐龪躹龫迏蕟駠鈡龬𨶹𡐿䁱䊢娚"],
      ["8cc9", "顨杫䉶圽"],
      ["8cce", "藖𤥻芿𧄍䲁𦵴嵻𦬕𦾾龭龮宖龯曧繛湗秊㶈䓃𣉖𢞖䎚䔶"],
      ["8ce6", "峕𣬚諹屸㴒𣕑嵸龲煗䕘𤃬𡸣䱷㥸㑊𠆤𦱁諌侴𠈹妿腬顖𩣺弻"],
      ["8d40", "𠮟"],
      ["8d42", "𢇁𨥭䄂䚻𩁹㼇龳𪆵䃸㟖䛷𦱆䅼𨚲𧏿䕭㣔𥒚䕡䔛䶉䱻䵶䗪㿈𤬏㙡䓞䒽䇭崾嵈嵖㷼㠏嶤嶹㠠㠸幂庽弥徃㤈㤔㤿㥍惗愽峥㦉憷憹懏㦸戬抐拥挘㧸嚱"],
      ["8da1", "㨃揢揻搇摚㩋擀崕嘡龟㪗斆㪽旿晓㫲暒㬢朖㭂枤栀㭘桊梄㭲㭱㭻椉楃牜楤榟榅㮼槖㯝橥橴橱檂㯬檙㯲檫檵櫔櫶殁毁毪汵沪㳋洂洆洦涁㳯涤涱渕渘温溆𨧀溻滢滚齿滨滩漤漴㵆𣽁澁澾㵪㵵熷岙㶊瀬㶑灐灔灯灿炉𠌥䏁㗱𠻘"],
      ["8e40", "𣻗垾𦻓焾𥟠㙎榢𨯩孴穉𥣡𩓙穥穽𥦬窻窰竂竃燑𦒍䇊竚竝竪䇯咲𥰁笋筕笩𥌎𥳾箢筯莜𥮴𦱿篐萡箒箸𥴠㶭𥱥蒒篺簆簵𥳁籄粃𤢂粦晽𤕸糉糇糦籴糳糵糎"],
      ["8ea1", "繧䔝𦹄絝𦻖璍綉綫焵綳緒𤁗𦀩緤㴓緵𡟹緥𨍭縝𦄡𦅚繮纒䌫鑬縧罀罁罇礶𦋐駡羗𦍑羣𡙡𠁨䕜𣝦䔃𨌺翺𦒉者耈耝耨耯𪂇𦳃耻耼聡𢜔䦉𦘦𣷣𦛨朥肧𨩈脇脚墰𢛶汿𦒘𤾸擧𡒊舘𡡞橓𤩥𤪕䑺舩𠬍𦩒𣵾俹𡓽蓢荢𦬊𤦧𣔰𡝳𣷸芪椛芳䇛"],
      ["8f40", "蕋苐茚𠸖𡞴㛁𣅽𣕚艻苢茘𣺋𦶣𦬅𦮗𣗎㶿茝嗬莅䔋𦶥莬菁菓㑾𦻔橗蕚㒖𦹂𢻯葘𥯤葱㷓䓤檧葊𣲵祘蒨𦮖𦹷𦹃蓞萏莑䒠蒓蓤𥲑䉀𥳀䕃蔴嫲𦺙䔧蕳䔖枿蘖"],
      ["8fa1", "𨘥𨘻藁𧂈蘂𡖂𧃍䕫䕪蘨㙈𡢢号𧎚虾蝱𪃸蟮𢰧螱蟚蠏噡虬桖䘏衅衆𧗠𣶹𧗤衞袜䙛袴袵揁装睷𧜏覇覊覦覩覧覼𨨥觧𧤤𧪽誜瞓釾誐𧩙竩𧬺𣾏䜓𧬸煼謌謟𥐰𥕥謿譌譍誩𤩺讐讛誯𡛟䘕衏貛𧵔𧶏貫㜥𧵓賖𧶘𧶽贒贃𡤐賛灜贑𤳉㻐起"],
      ["9040", "趩𨀂𡀔𤦊㭼𨆼𧄌竧躭躶軃鋔輙輭𨍥𨐒辥錃𪊟𠩐辳䤪𨧞𨔽𣶻廸𣉢迹𪀔𨚼𨔁𢌥㦀𦻗逷𨔼𧪾遡𨕬𨘋邨𨜓郄𨛦邮都酧㫰醩釄粬𨤳𡺉鈎沟鉁鉢𥖹銹𨫆𣲛𨬌𥗛"],
      ["90a1", "𠴱錬鍫𨫡𨯫炏嫃𨫢𨫥䥥鉄𨯬𨰹𨯿鍳鑛躼閅閦鐦閠濶䊹𢙺𨛘𡉼𣸮䧟氜陻隖䅬隣𦻕懚隶磵𨫠隽双䦡𦲸𠉴𦐐𩂯𩃥𤫑𡤕𣌊霱虂霶䨏䔽䖅𤫩灵孁霛靜𩇕靗孊𩇫靟鐥僐𣂷𣂼鞉鞟鞱鞾韀韒韠𥑬韮琜𩐳響韵𩐝𧥺䫑頴頳顋顦㬎𧅵㵑𠘰𤅜"],
      ["9140", "𥜆飊颷飈飇䫿𦴧𡛓喰飡飦飬鍸餹𤨩䭲𩡗𩤅駵騌騻騐驘𥜥㛄𩂱𩯕髠髢𩬅髴䰎鬔鬭𨘀倴鬴𦦨㣃𣁽魐魀𩴾婅𡡣鮎𤉋鰂鯿鰌𩹨鷔𩾷𪆒𪆫𪃡𪄣𪇟鵾鶃𪄴鸎梈"],
      ["91a1", "鷄𢅛𪆓𪈠𡤻𪈳鴹𪂹𪊴麐麕麞麢䴴麪麯𤍤黁㭠㧥㴝伲㞾𨰫鼂鼈䮖鐤𦶢鼗鼖鼹嚟嚊齅馸𩂋韲葿齢齩竜龎爖䮾𤥵𤦻煷𤧸𤍈𤩑玞𨯚𡣺禟𨥾𨸶鍩鏳𨩄鋬鎁鏋𨥬𤒹爗㻫睲穃烐𤑳𤏸煾𡟯炣𡢾𣖙㻇𡢅𥐯𡟸㜢𡛻𡠹㛡𡝴𡣑𥽋㜣𡛀坛𤨥𡏾𡊨"],
      ["9240", "𡏆𡒶蔃𣚦蔃葕𤦔𧅥𣸱𥕜𣻻𧁒䓴𣛮𩦝𦼦柹㜳㰕㷧塬𡤢栐䁗𣜿𤃡𤂋𤄏𦰡哋嚞𦚱嚒𠿟𠮨𠸍鏆𨬓鎜仸儫㠙𤐶亼𠑥𠍿佋侊𥙑婨𠆫𠏋㦙𠌊𠐔㐵伩𠋀𨺳𠉵諚𠈌亘"],
      ["92a1", "働儍侢伃𤨎𣺊佂倮偬傁俌俥偘僼兙兛兝兞湶𣖕𣸹𣺿浲𡢄𣺉冨凃𠗠䓝𠒣𠒒𠒑赺𨪜𠜎剙劤𠡳勡鍮䙺熌𤎌𠰠𤦬𡃤槑𠸝瑹㻞璙琔瑖玘䮎𤪼𤂍叐㖄爏𤃉喴𠍅响𠯆圝鉝雴鍦埝垍坿㘾壋媙𨩆𡛺𡝯𡜐娬妸銏婾嫏娒𥥆𡧳𡡡𤊕㛵洅瑃娡𥺃"],
      ["9340", "媁𨯗𠐓鏠璌𡌃焅䥲鐈𨧻鎽㞠尞岞幞幈𡦖𡥼𣫮廍孏𡤃𡤄㜁𡢠㛝𡛾㛓脪𨩇𡶺𣑲𨦨弌弎𡤧𡞫婫𡜻孄蘔𧗽衠恾𢡠𢘫忛㺸𢖯𢖾𩂈𦽳懀𠀾𠁆𢘛憙憘恵𢲛𢴇𤛔𩅍"],
      ["93a1", "摱𤙥𢭪㨩𢬢𣑐𩣪𢹸挷𪑛撶挱揑𤧣𢵧护𢲡搻敫楲㯴𣂎𣊭𤦉𣊫唍𣋠𡣙𩐿曎𣊉𣆳㫠䆐𥖄𨬢𥖏𡛼𥕛𥐥磮𣄃𡠪𣈴㑤𣈏𣆂𤋉暎𦴤晫䮓昰𧡰𡷫晣𣋒𣋡昞𥡲㣑𣠺𣞼㮙𣞢𣏾瓐㮖枏𤘪梶栞㯄檾㡣𣟕𤒇樳橒櫉欅𡤒攑梘橌㯗橺歗𣿀𣲚鎠鋲𨯪𨫋"],
      ["9440", "銉𨀞𨧜鑧涥漋𤧬浧𣽿㶏渄𤀼娽渊塇洤硂焻𤌚𤉶烱牐犇犔𤞏𤜥兹𤪤𠗫瑺𣻸𣙟𤩊𤤗𥿡㼆㺱𤫟𨰣𣼵悧㻳瓌琼鎇琷䒟𦷪䕑疃㽣𤳙𤴆㽘畕癳𪗆㬙瑨𨫌𤦫𤦎㫻"],
      ["94a1", "㷍𤩎㻿𤧅𤣳釺圲鍂𨫣𡡤僟𥈡𥇧睸𣈲眎眏睻𤚗𣞁㩞𤣰琸璛㺿𤪺𤫇䃈𤪖𦆮錇𥖁砞碍碈磒珐祙𧝁𥛣䄎禛蒖禥樭𣻺稺秴䅮𡛦䄲鈵秱𠵌𤦌𠊙𣶺𡝮㖗啫㕰㚪𠇔𠰍竢婙𢛵𥪯𥪜娍𠉛磰娪𥯆竾䇹籝籭䈑𥮳𥺼𥺦糍𤧹𡞰粎籼粮檲緜縇緓罎𦉡"],
      ["9540", "𦅜𧭈綗𥺂䉪𦭵𠤖柖𠁎𣗏埄𦐒𦏸𤥢翝笧𠠬𥫩𥵃笌𥸎駦虅驣樜𣐿㧢𤧷𦖭騟𦖠蒀𧄧𦳑䓪脷䐂胆脉腂𦞴飃𦩂艢艥𦩑葓𦶧蘐𧈛媆䅿𡡀嬫𡢡嫤𡣘蚠蜨𣶏蠭𧐢娂"],
      ["95a1", "衮佅袇袿裦襥襍𥚃襔𧞅𧞄𨯵𨯙𨮜𨧹㺭蒣䛵䛏㟲訽訜𩑈彍鈫𤊄旔焩烄𡡅鵭貟賩𧷜妚矃姰䍮㛔踪躧𤰉輰轊䋴汘澻𢌡䢛潹溋𡟚鯩㚵𤤯邻邗啱䤆醻鐄𨩋䁢𨫼鐧𨰝𨰻蓥訫閙閧閗閖𨴴瑅㻂𤣿𤩂𤏪㻧𣈥随𨻧𨹦𨹥㻌𤧭𤩸𣿮琒瑫㻼靁𩂰"],
      ["9640", "桇䨝𩂓𥟟靝鍨𨦉𨰦𨬯𦎾銺嬑譩䤼珹𤈛鞛靱餸𠼦巁𨯅𤪲頟𩓚鋶𩗗釥䓀𨭐𤩧𨭤飜𨩅㼀鈪䤥萔餻饍𧬆㷽馛䭯馪驜𨭥𥣈檏騡嫾騯𩣱䮐𩥈馼䮽䮗鍽塲𡌂堢𤦸"],
      ["96a1", "𡓨硄𢜟𣶸棅㵽鑘㤧慐𢞁𢥫愇鱏鱓鱻鰵鰐魿鯏𩸭鮟𪇵𪃾鴡䲮𤄄鸘䲰鴌𪆴𪃭𪃳𩤯鶥蒽𦸒𦿟𦮂藼䔳𦶤𦺄𦷰萠藮𦸀𣟗𦁤秢𣖜𣙀䤭𤧞㵢鏛銾鍈𠊿碹鉷鑍俤㑀遤𥕝砽硔碶硋𡝗𣇉𤥁㚚佲濚濙瀞瀞吔𤆵垻壳垊鴖埗焴㒯𤆬燫𦱀𤾗嬨𡞵𨩉"],
      ["9740", "愌嫎娋䊼𤒈㜬䭻𨧼鎻鎸𡣖𠼝葲𦳀𡐓𤋺𢰦𤏁妔𣶷𦝁綨𦅛𦂤𤦹𤦋𨧺鋥珢㻩璴𨭣𡢟㻡𤪳櫘珳珻㻖𤨾𤪔𡟙𤩦𠎧𡐤𤧥瑈𤤖炥𤥶銄珦鍟𠓾錱𨫎𨨖鎆𨯧𥗕䤵𨪂煫"],
      ["97a1", "𤥃𠳿嚤𠘚𠯫𠲸唂秄𡟺緾𡛂𤩐𡡒䔮鐁㜊𨫀𤦭妰𡢿𡢃𧒄媡㛢𣵛㚰鉟婹𨪁𡡢鍴㳍𠪴䪖㦊僴㵩㵌𡎜煵䋻𨈘渏𩃤䓫浗𧹏灧沯㳖𣿭𣸭渂漌㵯𠏵畑㚼㓈䚀㻚䡱姄鉮䤾轁𨰜𦯀堒埈㛖𡑒烾𤍢𤩱𢿣𡊰𢎽梹楧𡎘𣓥𧯴𣛟𨪃𣟖𣏺𤲟樚𣚭𦲷萾䓟䓎"],
      ["9840", "𦴦𦵑𦲂𦿞漗𧄉茽𡜺菭𦲀𧁓𡟛妉媂𡞳婡婱𡤅𤇼㜭姯𡜼㛇熎鎐暚𤊥婮娫𤊓樫𣻹𧜶𤑛𤋊焝𤉙𨧡侰𦴨峂𤓎𧹍𤎽樌𤉖𡌄炦焳𤏩㶥泟勇𤩏繥姫崯㷳彜𤩝𡟟綤萦"],
      ["98a1", "咅𣫺𣌀𠈔坾𠣕𠘙㿥𡾞𪊶瀃𩅛嵰玏糓𨩙𩐠俈翧狍猐𧫴猸猹𥛶獁獈㺩𧬘遬燵𤣲珡臶㻊県㻑沢国琙琞琟㻢㻰㻴㻺瓓㼎㽓畂畭畲疍㽼痈痜㿀癍㿗癴㿜発𤽜熈嘣覀塩䀝睃䀹条䁅㗛瞘䁪䁯属瞾矋売砘点砜䂨砹硇硑硦葈𥔵礳栃礲䄃"],
      ["9940", "䄉禑禙辻稆込䅧窑䆲窼艹䇄竏竛䇏両筢筬筻簒簛䉠䉺类粜䊌粸䊔糭输烀𠳏総緔緐緽羮羴犟䎗耠耥笹耮耱联㷌垴炠肷胩䏭脌猪脎脒畠脔䐁㬹腖腙腚"],
      ["99a1", "䐓堺腼膄䐥膓䐭膥埯臁臤艔䒏芦艶苊苘苿䒰荗险榊萅烵葤惣蒈䔄蒾蓡蓸蔐蔸蕒䔻蕯蕰藠䕷虲蚒蚲蛯际螋䘆䘗袮裿褤襇覑𧥧訩訸誔誴豑賔賲贜䞘塟跃䟭仮踺嗘坔蹱嗵躰䠷軎転軤軭軲辷迁迊迌逳駄䢭飠鈓䤞鈨鉘鉫銱銮銿"],
      ["9a40", "鋣鋫鋳鋴鋽鍃鎄鎭䥅䥑麿鐗匁鐝鐭鐾䥪鑔鑹锭関䦧间阳䧥枠䨤靀䨵鞲韂噔䫤惨颹䬙飱塄餎餙冴餜餷饂饝饢䭰駅䮝騼鬏窃魩鮁鯝鯱鯴䱭鰠㝯𡯂鵉鰺"],
      ["9aa1", "黾噐鶓鶽鷀鷼银辶鹻麬麱麽黆铜黢黱黸竈齄𠂔𠊷𠎠椚铃妬𠓗塀铁㞹𠗕𠘕𠙶𡚺块煳𠫂𠫍𠮿呪吆𠯋咞𠯻𠰻𠱓𠱥𠱼惧𠲍噺𠲵𠳝𠳭𠵯𠶲𠷈楕鰯螥𠸄𠸎𠻗𠾐𠼭𠹳尠𠾼帋𡁜𡁏𡁶朞𡁻𡂈𡂖㙇𡂿𡃓𡄯𡄻卤蒭𡋣𡍵𡌶讁𡕷𡘙𡟃𡟇乸炻𡠭𡥪"],
      ["9b40", "𡨭𡩅𡰪𡱰𡲬𡻈拃𡻕𡼕熘桕𢁅槩㛈𢉼𢏗𢏺𢜪𢡱𢥏苽𢥧𢦓𢫕覥𢫨辠𢬎鞸𢬿顇骽𢱌"],
      ["9b62", "𢲈𢲷𥯨𢴈𢴒𢶷𢶕𢹂𢽴𢿌𣀳𣁦𣌟𣏞徱晈暿𧩹𣕧𣗳爁𤦺矗𣘚𣜖纇𠍆墵朎"],
      ["9ba1", "椘𣪧𧙗𥿢𣸑𣺹𧗾𢂚䣐䪸𤄙𨪚𤋮𤌍𤀻𤌴𤎖𤩅𠗊凒𠘑妟𡺨㮾𣳿𤐄𤓖垈𤙴㦛𤜯𨗨𩧉㝢𢇃譞𨭎駖𤠒𤣻𤨕爉𤫀𠱸奥𤺥𤾆𠝹軚𥀬劏圿煱𥊙𥐙𣽊𤪧喼𥑆𥑮𦭒釔㑳𥔿𧘲𥕞䜘𥕢𥕦𥟇𤤿𥡝偦㓻𣏌惞𥤃䝼𨥈𥪮𥮉𥰆𡶐垡煑澶𦄂𧰒遖𦆲𤾚譢𦐂𦑊"],
      ["9c40", "嵛𦯷輶𦒄𡤜諪𤧶𦒈𣿯𦔒䯀𦖿𦚵𢜛鑥𥟡憕娧晉侻嚹𤔡𦛼乪𤤴陖涏𦲽㘘襷𦞙𦡮𦐑𦡞營𦣇筂𩃀𠨑𦤦鄄𦤹穅鷰𦧺騦𦨭㙟𦑩𠀡禃𦨴𦭛崬𣔙菏𦮝䛐𦲤画补𦶮墶"],
      ["9ca1", "㜜𢖍𧁋𧇍㱔𧊀𧊅銁𢅺𧊋錰𧋦𤧐氹钟𧑐𠻸蠧裵𢤦𨑳𡞱溸𤨪𡠠㦤㚹尐秣䔿暶𩲭𩢤襃𧟌𧡘囖䃟𡘊㦡𣜯𨃨𡏅熭荦𧧝𩆨婧䲷𧂯𨦫𧧽𧨊𧬋𧵦𤅺筃祾𨀉澵𪋟樃𨌘厢𦸇鎿栶靝𨅯𨀣𦦵𡏭𣈯𨁈嶅𨰰𨂃圕頣𨥉嶫𤦈斾槕叒𤪥𣾁㰑朶𨂐𨃴𨄮𡾡𨅏"],
      ["9d40", "𨆉𨆯𨈚𨌆𨌯𨎊㗊𨑨𨚪䣺揦𨥖砈鉕𨦸䏲𨧧䏟𨧨𨭆𨯔姸𨰉輋𨿅𩃬筑𩄐𩄼㷷𩅞𤫊运犏嚋𩓧𩗩𩖰𩖸𩜲𩣑𩥉𩥪𩧃𩨨𩬎𩵚𩶛纟𩻸𩼣䲤镇𪊓熢𪋿䶑递𪗋䶜𠲜达嗁"],
      ["9da1", "辺𢒰边𤪓䔉繿潖檱仪㓤𨬬𧢝㜺躀𡟵𨀤𨭬𨮙𧨾𦚯㷫𧙕𣲷𥘵𥥖亚𥺁𦉘嚿𠹭踎孭𣺈𤲞揞拐𡟶𡡻攰嘭𥱊吚𥌑㷆𩶘䱽嘢嘞罉𥻘奵𣵀蝰东𠿪𠵉𣚺脗鵞贘瘻鱅癎瞹鍅吲腈苷嘥脲萘肽嗪祢噃吖𠺝㗎嘅嗱曱𨋢㘭甴嗰喺咗啲𠱁𠲖廐𥅈𠹶𢱢"],
      ["9e40", "𠺢麫絚嗞𡁵抝靭咔賍燶酶揼掹揾啩𢭃鱲𢺳冚㓟𠶧冧呍唞唓癦踭𦢊疱肶蠄螆裇膶萜𡃁䓬猄𤜆宐茋𦢓噻𢛴𧴯𤆣𧵳𦻐𧊶酰𡇙鈈𣳼𪚩𠺬𠻹牦𡲢䝎𤿂𧿹𠿫䃺"],
      ["9ea1", "鱝攟𢶠䣳𤟠𩵼𠿬𠸊恢𧖣𠿭"],
      ["9ead", "𦁈𡆇熣纎鵐业丄㕷嬍沲卧㚬㧜卽㚥𤘘墚𤭮舭呋垪𥪕𠥹"],
      ["9ec5", "㩒𢑥獴𩺬䴉鯭𣳾𩼰䱛𤾩𩖞𩿞葜𣶶𧊲𦞳𣜠挮紥𣻷𣸬㨪逈勌㹴㙺䗩𠒎癀嫰𠺶硺𧼮墧䂿噼鮋嵴癔𪐴麅䳡痹㟻愙𣃚𤏲"],
      ["9ef5", "噝𡊩垧𤥣𩸆刴𧂮㖭汊鵼"],
      ["9f40", "籖鬹埞𡝬屓擓𩓐𦌵𧅤蚭𠴨𦴢𤫢𠵱"],
      ["9f4f", "凾𡼏嶎霃𡷑麁遌笟鬂峑箣扨挵髿篏鬪籾鬮籂粆鰕篼鬉鼗鰛𤤾齚啳寃俽麘俲剠㸆勑坧偖妷帒韈鶫轜呩鞴饀鞺匬愰"],
      ["9fa1", "椬叚鰊鴂䰻陁榀傦畆𡝭駚剳"],
      ["9fae", "酙隁酜"],
      ["9fb2", "酑𨺗捿𦴣櫊嘑醎畺抅𠏼獏籰𥰡𣳽"],
      ["9fc1", "𤤙盖鮝个𠳔莾衂"],
      ["9fc9", "届槀僭坺刟巵从氱𠇲伹咜哚劚趂㗾弌㗳"],
      ["9fdb", "歒酼龥鮗頮颴骺麨麄煺笔"],
      ["9fe7", "毺蠘罸"],
      ["9feb", "嘠𪙊蹷齓"],
      ["9ff0", "跔蹏鸜踁抂𨍽踨蹵竓𤩷稾磘泪詧瘇"],
      ["a040", "𨩚鼦泎蟖痃𪊲硓咢贌狢獱謭猂瓱賫𤪻蘯徺袠䒷"],
      ["a055", "𡠻𦸅"],
      ["a058", "詾𢔛"],
      ["a05b", "惽癧髗鵄鍮鮏蟵"],
      ["a063", "蠏賷猬霡鮰㗖犲䰇籑饊𦅙慙䰄麖慽"],
      ["a073", "坟慯抦戹拎㩜懢厪𣏵捤栂㗒"],
      ["a0a1", "嵗𨯂迚𨸹"],
      ["a0a6", "僙𡵆礆匲阸𠼻䁥"],
      ["a0ae", "矾"],
      ["a0b0", "糂𥼚糚稭聦聣絍甅瓲覔舚朌聢𧒆聛瓰脃眤覉𦟌畓𦻑螩蟎臈螌詉貭譃眫瓸蓚㘵榲趦"],
      ["a0d4", "覩瑨涹蟁𤀑瓧㷛煶悤憜㳑煢恷"],
      ["a0e2", "罱𨬭牐惩䭾删㰘𣳇𥻗𧙖𥔱𡥄𡋾𩤃𦷜𧂭峁𦆭𨨏𣙷𠃮𦡆𤼎䕢嬟𦍌齐麦𦉫"],
      ["a3c0", "␀", 31, "␡"],
      ["c6a1", "①", 9, "⑴", 9, "ⅰ", 9, "丶丿亅亠冂冖冫勹匸卩厶夊宀巛⼳广廴彐彡攴无疒癶辵隶¨ˆヽヾゝゞ〃仝々〆〇ー［］✽ぁ", 23],
      ["c740", "す", 58, "ァアィイ"],
      ["c7a1", "ゥ", 81, "А", 5, "ЁЖ", 4],
      ["c840", "Л", 26, "ёж", 25, "⇧↸↹㇏𠃌乚𠂊刂䒑"],
      ["c8a1", "龰冈龱𧘇"],
      ["c8cd", "￢￤＇＂㈱№℡゛゜⺀⺄⺆⺇⺈⺊⺌⺍⺕⺜⺝⺥⺧⺪⺬⺮⺶⺼⺾⻆⻊⻌⻍⻏⻖⻗⻞⻣"],
      ["c8f5", "ʃɐɛɔɵœøŋʊɪ"],
      ["f9fe", "￭"],
      ["fa40", "𠕇鋛𠗟𣿅蕌䊵珯况㙉𤥂𨧤鍄𡧛苮𣳈砼杄拟𤤳𨦪𠊠𦮳𡌅侫𢓭倈𦴩𧪄𣘀𤪱𢔓倩𠍾徤𠎀𠍇滛𠐟偽儁㑺儎顬㝃萖𤦤𠒇兠𣎴兪𠯿𢃼𠋥𢔰𠖎𣈳𡦃宂蝽𠖳𣲙冲冸"],
      ["faa1", "鴴凉减凑㳜凓𤪦决凢卂凭菍椾𣜭彻刋刦刼劵剗劔効勅簕蕂勠蘍𦬓包𨫞啉滙𣾀𠥔𣿬匳卄𠯢泋𡜦栛珕恊㺪㣌𡛨燝䒢卭却𨚫卾卿𡖖𡘓矦厓𨪛厠厫厮玧𥝲㽙玜叁叅汉义埾叙㪫𠮏叠𣿫𢶣叶𠱷吓灹唫晗浛呭𦭓𠵴啝咏咤䞦𡜍𠻝㶴𠵍"],
      ["fb40", "𨦼𢚘啇䳭启琗喆喩嘅𡣗𤀺䕒𤐵暳𡂴嘷曍𣊊暤暭噍噏磱囱鞇叾圀囯园𨭦㘣𡉏坆𤆥汮炋坂㚱𦱾埦𡐖堃𡑔𤍣堦𤯵塜墪㕡壠壜𡈼壻寿坃𪅐𤉸鏓㖡够梦㛃湙"],
      ["fba1", "𡘾娤啓𡚒蔅姉𠵎𦲁𦴪𡟜姙𡟻𡞲𦶦浱𡠨𡛕姹𦹅媫婣㛦𤦩婷㜈媖瑥嫓𦾡𢕔㶅𡤑㜲𡚸広勐孶斈孼𧨎䀄䡝𠈄寕慠𡨴𥧌𠖥寳宝䴐尅𡭄尓珎尔𡲥𦬨屉䣝岅峩峯嶋𡷹𡸷崐崘嵆𡺤岺巗苼㠭𤤁𢁉𢅳芇㠶㯂帮檊幵幺𤒼𠳓厦亷廐厨𡝱帉廴𨒂"],
      ["fc40", "廹廻㢠廼栾鐛弍𠇁弢㫞䢮𡌺强𦢈𢏐彘𢑱彣鞽𦹮彲鍀𨨶徧嶶㵟𥉐𡽪𧃸𢙨釖𠊞𨨩怱暅𡡷㥣㷇㘹垐𢞴祱㹀悞悤悳𤦂𤦏𧩓璤僡媠慤萤慂慈𦻒憁凴𠙖憇宪𣾷"],
      ["fca1", "𢡟懓𨮝𩥝懐㤲𢦀𢣁怣慜攞掋𠄘担𡝰拕𢸍捬𤧟㨗搸揸𡎎𡟼撐澊𢸶頔𤂌𥜝擡擥鑻㩦携㩗敍漖𤨨𤨣斅敭敟𣁾斵𤥀䬷旑䃘𡠩无旣忟𣐀昘𣇷𣇸晄𣆤𣆥晋𠹵晧𥇦晳晴𡸽𣈱𨗴𣇈𥌓矅𢣷馤朂𤎜𤨡㬫槺𣟂杞杧杢𤇍𩃭柗䓩栢湐鈼栁𣏦𦶠桝"],
      ["fd40", "𣑯槡樋𨫟楳棃𣗍椁椀㴲㨁𣘼㮀枬楡𨩊䋼椶榘㮡𠏉荣傐槹𣙙𢄪橅𣜃檝㯳枱櫈𩆜㰍欝𠤣惞欵歴𢟍溵𣫛𠎵𡥘㝀吡𣭚毡𣻼毜氷𢒋𤣱𦭑汚舦汹𣶼䓅𣶽𤆤𤤌𤤀"],
      ["fda1", "𣳉㛥㳫𠴲鮃𣇹𢒑羏样𦴥𦶡𦷫涖浜湼漄𤥿𤂅𦹲蔳𦽴凇沜渝萮𨬡港𣸯瑓𣾂秌湏媑𣁋濸㜍澝𣸰滺𡒗𤀽䕕鏰潄潜㵎潴𩅰㴻澟𤅄濓𤂑𤅕𤀹𣿰𣾴𤄿凟𤅖𤅗𤅀𦇝灋灾炧炁烌烕烖烟䄄㷨熴熖𤉷焫煅媈煊煮岜𤍥煏鍢𤋁焬𤑚𤨧𤨢熺𨯨炽爎"],
      ["fe40", "鑂爕夑鑃爤鍁𥘅爮牀𤥴梽牕牗㹕𣁄栍漽犂猪猫𤠣𨠫䣭𨠄猨献珏玪𠰺𦨮珉瑉𤇢𡛧𤨤昣㛅𤦷𤦍𤧻珷琕椃𤨦琹𠗃㻗瑜𢢭瑠𨺲瑇珤瑶莹瑬㜰瑴鏱樬璂䥓𤪌"],
      ["fea1", "𤅟𤩹𨮏孆𨰃𡢞瓈𡦈甎瓩甞𨻙𡩋寗𨺬鎅畍畊畧畮𤾂㼄𤴓疎瑝疞疴瘂瘬癑癏癯癶𦏵皐臯㟸𦤑𦤎皡皥皷盌𦾟葢𥂝𥅽𡸜眞眦着撯𥈠睘𣊬瞯𨥤𨥨𡛁矴砉𡍶𤨒棊碯磇磓隥礮𥗠磗礴碱𧘌辸袄𨬫𦂃𢘜禆褀椂禀𥡗禝𧬹礼禩渪𧄦㺨秆𩄍秔"]
    ];
  }
});

// ../../node_modules/encoding/node_modules/iconv-lite/encodings/dbcs-data.js
var require_dbcs_data = __commonJS({
  "../../node_modules/encoding/node_modules/iconv-lite/encodings/dbcs-data.js"(exports, module) {
    "use strict";
    module.exports = {
      // == Japanese/ShiftJIS ====================================================
      // All japanese encodings are based on JIS X set of standards:
      // JIS X 0201 - Single-byte encoding of ASCII + ¥ + Kana chars at 0xA1-0xDF.
      // JIS X 0208 - Main set of 6879 characters, placed in 94x94 plane, to be encoded by 2 bytes. 
      //              Has several variations in 1978, 1983, 1990 and 1997.
      // JIS X 0212 - Supplementary plane of 6067 chars in 94x94 plane. 1990. Effectively dead.
      // JIS X 0213 - Extension and modern replacement of 0208 and 0212. Total chars: 11233.
      //              2 planes, first is superset of 0208, second - revised 0212.
      //              Introduced in 2000, revised 2004. Some characters are in Unicode Plane 2 (0x2xxxx)
      // Byte encodings are:
      //  * Shift_JIS: Compatible with 0201, uses not defined chars in top half as lead bytes for double-byte
      //               encoding of 0208. Lead byte ranges: 0x81-0x9F, 0xE0-0xEF; Trail byte ranges: 0x40-0x7E, 0x80-0x9E, 0x9F-0xFC.
      //               Windows CP932 is a superset of Shift_JIS. Some companies added more chars, notably KDDI.
      //  * EUC-JP:    Up to 3 bytes per character. Used mostly on *nixes.
      //               0x00-0x7F       - lower part of 0201
      //               0x8E, 0xA1-0xDF - upper part of 0201
      //               (0xA1-0xFE)x2   - 0208 plane (94x94).
      //               0x8F, (0xA1-0xFE)x2 - 0212 plane (94x94).
      //  * JIS X 208: 7-bit, direct encoding of 0208. Byte ranges: 0x21-0x7E (94 values). Uncommon.
      //               Used as-is in ISO2022 family.
      //  * ISO2022-JP: Stateful encoding, with escape sequences to switch between ASCII, 
      //                0201-1976 Roman, 0208-1978, 0208-1983.
      //  * ISO2022-JP-1: Adds esc seq for 0212-1990.
      //  * ISO2022-JP-2: Adds esc seq for GB2313-1980, KSX1001-1992, ISO8859-1, ISO8859-7.
      //  * ISO2022-JP-3: Adds esc seq for 0201-1976 Kana set, 0213-2000 Planes 1, 2.
      //  * ISO2022-JP-2004: Adds 0213-2004 Plane 1.
      //
      // After JIS X 0213 appeared, Shift_JIS-2004, EUC-JISX0213 and ISO2022-JP-2004 followed, with just changing the planes.
      //
      // Overall, it seems that it's a mess :( http://www8.plala.or.jp/tkubota1/unicode-symbols-map2.html
      "shiftjis": {
        type: "_dbcs",
        table: function() {
          return require_shiftjis();
        },
        encodeAdd: { "¥": 92, "‾": 126 },
        encodeSkipVals: [{ from: 60736, to: 63808 }]
      },
      "csshiftjis": "shiftjis",
      "mskanji": "shiftjis",
      "sjis": "shiftjis",
      "windows31j": "shiftjis",
      "ms31j": "shiftjis",
      "xsjis": "shiftjis",
      "windows932": "shiftjis",
      "ms932": "shiftjis",
      "932": "shiftjis",
      "cp932": "shiftjis",
      "eucjp": {
        type: "_dbcs",
        table: function() {
          return require_eucjp();
        },
        encodeAdd: { "¥": 92, "‾": 126 }
      },
      // TODO: KDDI extension to Shift_JIS
      // TODO: IBM CCSID 942 = CP932, but F0-F9 custom chars and other char changes.
      // TODO: IBM CCSID 943 = Shift_JIS = CP932 with original Shift_JIS lower 128 chars.
      // == Chinese/GBK ==========================================================
      // http://en.wikipedia.org/wiki/GBK
      // We mostly implement W3C recommendation: https://www.w3.org/TR/encoding/#gbk-encoder
      // Oldest GB2312 (1981, ~7600 chars) is a subset of CP936
      "gb2312": "cp936",
      "gb231280": "cp936",
      "gb23121980": "cp936",
      "csgb2312": "cp936",
      "csiso58gb231280": "cp936",
      "euccn": "cp936",
      // Microsoft's CP936 is a subset and approximation of GBK.
      "windows936": "cp936",
      "ms936": "cp936",
      "936": "cp936",
      "cp936": {
        type: "_dbcs",
        table: function() {
          return require_cp936();
        }
      },
      // GBK (~22000 chars) is an extension of CP936 that added user-mapped chars and some other.
      "gbk": {
        type: "_dbcs",
        table: function() {
          return require_cp936().concat(require_gbk_added());
        }
      },
      "xgbk": "gbk",
      "isoir58": "gbk",
      // GB18030 is an algorithmic extension of GBK.
      // Main source: https://www.w3.org/TR/encoding/#gbk-encoder
      // http://icu-project.org/docs/papers/gb18030.html
      // http://source.icu-project.org/repos/icu/data/trunk/charset/data/xml/gb-18030-2000.xml
      // http://www.khngai.com/chinese/charmap/tblgbk.php?page=0
      "gb18030": {
        type: "_dbcs",
        table: function() {
          return require_cp936().concat(require_gbk_added());
        },
        gb18030: function() {
          return require_gb18030_ranges();
        },
        encodeSkipVals: [128],
        encodeAdd: { "€": 41699 }
      },
      "chinese": "gb18030",
      // == Korean ===============================================================
      // EUC-KR, KS_C_5601 and KS X 1001 are exactly the same.
      "windows949": "cp949",
      "ms949": "cp949",
      "949": "cp949",
      "cp949": {
        type: "_dbcs",
        table: function() {
          return require_cp949();
        }
      },
      "cseuckr": "cp949",
      "csksc56011987": "cp949",
      "euckr": "cp949",
      "isoir149": "cp949",
      "korean": "cp949",
      "ksc56011987": "cp949",
      "ksc56011989": "cp949",
      "ksc5601": "cp949",
      // == Big5/Taiwan/Hong Kong ================================================
      // There are lots of tables for Big5 and cp950. Please see the following links for history:
      // http://moztw.org/docs/big5/  http://www.haible.de/bruno/charsets/conversion-tables/Big5.html
      // Variations, in roughly number of defined chars:
      //  * Windows CP 950: Microsoft variant of Big5. Canonical: http://www.unicode.org/Public/MAPPINGS/VENDORS/MICSFT/WINDOWS/CP950.TXT
      //  * Windows CP 951: Microsoft variant of Big5-HKSCS-2001. Seems to be never public. http://me.abelcheung.org/articles/research/what-is-cp951/
      //  * Big5-2003 (Taiwan standard) almost superset of cp950.
      //  * Unicode-at-on (UAO) / Mozilla 1.8. Falling out of use on the Web. Not supported by other browsers.
      //  * Big5-HKSCS (-2001, -2004, -2008). Hong Kong standard. 
      //    many unicode code points moved from PUA to Supplementary plane (U+2XXXX) over the years.
      //    Plus, it has 4 combining sequences.
      //    Seems that Mozilla refused to support it for 10 yrs. https://bugzilla.mozilla.org/show_bug.cgi?id=162431 https://bugzilla.mozilla.org/show_bug.cgi?id=310299
      //    because big5-hkscs is the only encoding to include astral characters in non-algorithmic way.
      //    Implementations are not consistent within browsers; sometimes labeled as just big5.
      //    MS Internet Explorer switches from big5 to big5-hkscs when a patch applied.
      //    Great discussion & recap of what's going on https://bugzilla.mozilla.org/show_bug.cgi?id=912470#c31
      //    In the encoder, it might make sense to support encoding old PUA mappings to Big5 bytes seq-s.
      //    Official spec: http://www.ogcio.gov.hk/en/business/tech_promotion/ccli/terms/doc/2003cmp_2008.txt
      //                   http://www.ogcio.gov.hk/tc/business/tech_promotion/ccli/terms/doc/hkscs-2008-big5-iso.txt
      // 
      // Current understanding of how to deal with Big5(-HKSCS) is in the Encoding Standard, http://encoding.spec.whatwg.org/#big5-encoder
      // Unicode mapping (http://www.unicode.org/Public/MAPPINGS/OBSOLETE/EASTASIA/OTHER/BIG5.TXT) is said to be wrong.
      "windows950": "cp950",
      "ms950": "cp950",
      "950": "cp950",
      "cp950": {
        type: "_dbcs",
        table: function() {
          return require_cp950();
        }
      },
      // Big5 has many variations and is an extension of cp950. We use Encoding Standard's as a consensus.
      "big5": "big5hkscs",
      "big5hkscs": {
        type: "_dbcs",
        table: function() {
          return require_cp950().concat(require_big5_added());
        },
        encodeSkipVals: [
          // Although Encoding Standard says we should avoid encoding to HKSCS area (See Step 1 of
          // https://encoding.spec.whatwg.org/#index-big5-pointer), we still do it to increase compatibility with ICU.
          // But if a single unicode point can be encoded both as HKSCS and regular Big5, we prefer the latter.
          36457,
          36463,
          36478,
          36523,
          36532,
          36557,
          36560,
          36695,
          36713,
          36718,
          36811,
          36862,
          36973,
          36986,
          37060,
          37084,
          37105,
          37311,
          37551,
          37552,
          37553,
          37554,
          37585,
          37959,
          38090,
          38361,
          38652,
          39285,
          39798,
          39800,
          39803,
          39878,
          39902,
          39916,
          39926,
          40002,
          40019,
          40034,
          40040,
          40043,
          40055,
          40124,
          40125,
          40144,
          40279,
          40282,
          40388,
          40431,
          40443,
          40617,
          40687,
          40701,
          40800,
          40907,
          41079,
          41180,
          41183,
          36812,
          37576,
          38468,
          38637,
          // Step 2 of https://encoding.spec.whatwg.org/#index-big5-pointer: Use last pointer for U+2550, U+255E, U+2561, U+256A, U+5341, or U+5345
          41636,
          41637,
          41639,
          41638,
          41676,
          41678
        ]
      },
      "cnbig5": "big5hkscs",
      "csbig5": "big5hkscs",
      "xxbig5": "big5hkscs"
    };
  }
});

// ../../node_modules/encoding/node_modules/iconv-lite/encodings/index.js
var require_encodings = __commonJS({
  "../../node_modules/encoding/node_modules/iconv-lite/encodings/index.js"(exports, module) {
    "use strict";
    var modules = [
      require_internal(),
      require_utf32(),
      require_utf16(),
      require_utf7(),
      require_sbcs_codec(),
      require_sbcs_data(),
      require_sbcs_data_generated(),
      require_dbcs_codec(),
      require_dbcs_data()
    ];
    for (i = 0; i < modules.length; i++) {
      module = modules[i];
      for (enc in module)
        if (Object.prototype.hasOwnProperty.call(module, enc))
          exports[enc] = module[enc];
    }
    var module;
    var enc;
    var i;
  }
});

// ../../node_modules/encoding/node_modules/iconv-lite/lib/streams.js
var require_streams = __commonJS({
  "../../node_modules/encoding/node_modules/iconv-lite/lib/streams.js"(exports, module) {
    "use strict";
    var Buffer22 = require_safer().Buffer;
    module.exports = function(stream_module) {
      var Transform = stream_module.Transform;
      function IconvLiteEncoderStream(conv, options) {
        this.conv = conv;
        options = options || {};
        options.decodeStrings = false;
        Transform.call(this, options);
      }
      IconvLiteEncoderStream.prototype = Object.create(Transform.prototype, {
        constructor: { value: IconvLiteEncoderStream }
      });
      IconvLiteEncoderStream.prototype._transform = function(chunk2, encoding, done) {
        if (typeof chunk2 != "string")
          return done(new Error("Iconv encoding stream needs strings as its input."));
        try {
          var res = this.conv.write(chunk2);
          if (res && res.length)
            this.push(res);
          done();
        } catch (e2) {
          done(e2);
        }
      };
      IconvLiteEncoderStream.prototype._flush = function(done) {
        try {
          var res = this.conv.end();
          if (res && res.length)
            this.push(res);
          done();
        } catch (e2) {
          done(e2);
        }
      };
      IconvLiteEncoderStream.prototype.collect = function(cb) {
        var chunks = [];
        this.on("error", cb);
        this.on("data", function(chunk2) {
          chunks.push(chunk2);
        });
        this.on("end", function() {
          cb(null, Buffer22.concat(chunks));
        });
        return this;
      };
      function IconvLiteDecoderStream(conv, options) {
        this.conv = conv;
        options = options || {};
        options.encoding = this.encoding = "utf8";
        Transform.call(this, options);
      }
      IconvLiteDecoderStream.prototype = Object.create(Transform.prototype, {
        constructor: { value: IconvLiteDecoderStream }
      });
      IconvLiteDecoderStream.prototype._transform = function(chunk2, encoding, done) {
        if (!Buffer22.isBuffer(chunk2) && !(chunk2 instanceof Uint8Array))
          return done(new Error("Iconv decoding stream needs buffers as its input."));
        try {
          var res = this.conv.write(chunk2);
          if (res && res.length)
            this.push(res, this.encoding);
          done();
        } catch (e2) {
          done(e2);
        }
      };
      IconvLiteDecoderStream.prototype._flush = function(done) {
        try {
          var res = this.conv.end();
          if (res && res.length)
            this.push(res, this.encoding);
          done();
        } catch (e2) {
          done(e2);
        }
      };
      IconvLiteDecoderStream.prototype.collect = function(cb) {
        var res = "";
        this.on("error", cb);
        this.on("data", function(chunk2) {
          res += chunk2;
        });
        this.on("end", function() {
          cb(null, res);
        });
        return this;
      };
      return {
        IconvLiteEncoderStream,
        IconvLiteDecoderStream
      };
    };
  }
});

// ../../node_modules/encoding/node_modules/iconv-lite/lib/index.js
var require_lib2 = __commonJS({
  "../../node_modules/encoding/node_modules/iconv-lite/lib/index.js"(exports, module) {
    "use strict";
    var Buffer22 = require_safer().Buffer;
    var bomHandling = require_bom_handling();
    var iconv = module.exports;
    iconv.encodings = null;
    iconv.defaultCharUnicode = "�";
    iconv.defaultCharSingleByte = "?";
    iconv.encode = function encode2(str, encoding, options) {
      str = "" + (str || "");
      var encoder = iconv.getEncoder(encoding, options);
      var res = encoder.write(str);
      var trail = encoder.end();
      return trail && trail.length > 0 ? Buffer22.concat([res, trail]) : res;
    };
    iconv.decode = function decode2(buf, encoding, options) {
      if (typeof buf === "string") {
        if (!iconv.skipDecodeWarning) {
          console.error("Iconv-lite warning: decode()-ing strings is deprecated. Refer to https://github.com/ashtuchkin/iconv-lite/wiki/Use-Buffers-when-decoding");
          iconv.skipDecodeWarning = true;
        }
        buf = Buffer22.from("" + (buf || ""), "binary");
      }
      var decoder = iconv.getDecoder(encoding, options);
      var res = decoder.write(buf);
      var trail = decoder.end();
      return trail ? res + trail : res;
    };
    iconv.encodingExists = function encodingExists(enc) {
      try {
        iconv.getCodec(enc);
        return true;
      } catch (e2) {
        return false;
      }
    };
    iconv.toEncoding = iconv.encode;
    iconv.fromEncoding = iconv.decode;
    iconv._codecDataCache = {};
    iconv.getCodec = function getCodec(encoding) {
      if (!iconv.encodings)
        iconv.encodings = require_encodings();
      var enc = iconv._canonicalizeEncoding(encoding);
      var codecOptions = {};
      while (true) {
        var codec = iconv._codecDataCache[enc];
        if (codec)
          return codec;
        var codecDef = iconv.encodings[enc];
        switch (typeof codecDef) {
          case "string":
            enc = codecDef;
            break;
          case "object":
            for (var key in codecDef)
              codecOptions[key] = codecDef[key];
            if (!codecOptions.encodingName)
              codecOptions.encodingName = enc;
            enc = codecDef.type;
            break;
          case "function":
            if (!codecOptions.encodingName)
              codecOptions.encodingName = enc;
            codec = new codecDef(codecOptions, iconv);
            iconv._codecDataCache[codecOptions.encodingName] = codec;
            return codec;
          default:
            throw new Error("Encoding not recognized: '" + encoding + "' (searched as: '" + enc + "')");
        }
      }
    };
    iconv._canonicalizeEncoding = function(encoding) {
      return ("" + encoding).toLowerCase().replace(/:\d{4}$|[^0-9a-z]/g, "");
    };
    iconv.getEncoder = function getEncoder(encoding, options) {
      var codec = iconv.getCodec(encoding), encoder = new codec.encoder(options, codec);
      if (codec.bomAware && options && options.addBOM)
        encoder = new bomHandling.PrependBOM(encoder, options);
      return encoder;
    };
    iconv.getDecoder = function getDecoder(encoding, options) {
      var codec = iconv.getCodec(encoding), decoder = new codec.decoder(options, codec);
      if (codec.bomAware && !(options && options.stripBOM === false))
        decoder = new bomHandling.StripBOM(decoder, options);
      return decoder;
    };
    iconv.enableStreamingAPI = function enableStreamingAPI(stream_module2) {
      if (iconv.supportsStreams)
        return;
      var streams = require_streams()(stream_module2);
      iconv.IconvLiteEncoderStream = streams.IconvLiteEncoderStream;
      iconv.IconvLiteDecoderStream = streams.IconvLiteDecoderStream;
      iconv.encodeStream = function encodeStream(encoding, options) {
        return new iconv.IconvLiteEncoderStream(iconv.getEncoder(encoding, options), options);
      };
      iconv.decodeStream = function decodeStream(encoding, options) {
        return new iconv.IconvLiteDecoderStream(iconv.getDecoder(encoding, options), options);
      };
      iconv.supportsStreams = true;
    };
    var stream_module;
    try {
      stream_module = require_stream();
    } catch (e2) {
    }
    if (stream_module && stream_module.Transform) {
      iconv.enableStreamingAPI(stream_module);
    } else {
      iconv.encodeStream = iconv.decodeStream = function() {
        throw new Error("iconv-lite Streaming API is not enabled. Use iconv.enableStreamingAPI(require('stream')); to enable it.");
      };
    }
    if (false) {
      console.error("iconv-lite warning: js files use non-utf8 encoding. See https://github.com/ashtuchkin/iconv-lite/wiki/Javascript-source-file-encodings for more info.");
    }
  }
});

// ../../node_modules/encoding/lib/encoding.js
var require_encoding = __commonJS({
  "../../node_modules/encoding/lib/encoding.js"(exports, module) {
    "use strict";
    var iconvLite = require_lib2();
    module.exports.convert = convert2;
    function convert2(str, to, from) {
      from = checkEncoding(from || "UTF-8");
      to = checkEncoding(to || "UTF-8");
      str = str || "";
      var result;
      if (from !== "UTF-8" && typeof str === "string") {
        str = Buffer.from(str, "binary");
      }
      if (from === to) {
        if (typeof str === "string") {
          result = Buffer.from(str);
        } else {
          result = str;
        }
      } else {
        try {
          result = convertIconvLite(str, to, from);
        } catch (E) {
          console.error(E);
          result = str;
        }
      }
      if (typeof result === "string") {
        result = Buffer.from(result, "utf-8");
      }
      return result;
    }
    function convertIconvLite(str, to, from) {
      if (to === "UTF-8") {
        return iconvLite.decode(str, from);
      } else if (from === "UTF-8") {
        return iconvLite.encode(str, to);
      } else {
        return iconvLite.encode(iconvLite.decode(str, from), to);
      }
    }
    function checkEncoding(name) {
      return (name || "").toString().trim().replace(/^latin[\-_]?(\d+)$/i, "ISO-8859-$1").replace(/^win(?:dows)?[\-_]?(\d+)$/i, "WINDOWS-$1").replace(/^utf[\-_]?(\d+)$/i, "UTF-$1").replace(/^ks_c_5601\-1987$/i, "CP949").replace(/^us[\-_]?ascii$/i, "ASCII").toUpperCase();
    }
  }
});

// ../../node_modules/@metaplex-foundation/js/node_modules/buffer/index.js
var require_buffer2 = __commonJS({
  "../../node_modules/@metaplex-foundation/js/node_modules/buffer/index.js"(exports) {
    "use strict";
    var base64 = require_base64_js();
    var ieee7542 = require_ieee754();
    var customInspectSymbol = typeof Symbol === "function" && typeof Symbol["for"] === "function" ? Symbol["for"]("nodejs.util.inspect.custom") : null;
    exports.Buffer = Buffer22;
    exports.SlowBuffer = SlowBuffer;
    exports.INSPECT_MAX_BYTES = 50;
    var K_MAX_LENGTH = 2147483647;
    exports.kMaxLength = K_MAX_LENGTH;
    Buffer22.TYPED_ARRAY_SUPPORT = typedArraySupport();
    if (!Buffer22.TYPED_ARRAY_SUPPORT && typeof console !== "undefined" && typeof console.error === "function") {
      console.error(
        "This browser lacks typed array (Uint8Array) support which is required by `buffer` v5.x. Use `buffer` v4.x if you require old browser support."
      );
    }
    function typedArraySupport() {
      try {
        const arr = new Uint8Array(1);
        const proto = { foo: function() {
          return 42;
        } };
        Object.setPrototypeOf(proto, Uint8Array.prototype);
        Object.setPrototypeOf(arr, proto);
        return arr.foo() === 42;
      } catch (e2) {
        return false;
      }
    }
    Object.defineProperty(Buffer22.prototype, "parent", {
      enumerable: true,
      get: function() {
        if (!Buffer22.isBuffer(this))
          return void 0;
        return this.buffer;
      }
    });
    Object.defineProperty(Buffer22.prototype, "offset", {
      enumerable: true,
      get: function() {
        if (!Buffer22.isBuffer(this))
          return void 0;
        return this.byteOffset;
      }
    });
    function createBuffer(length) {
      if (length > K_MAX_LENGTH) {
        throw new RangeError('The value "' + length + '" is invalid for option "size"');
      }
      const buf = new Uint8Array(length);
      Object.setPrototypeOf(buf, Buffer22.prototype);
      return buf;
    }
    function Buffer22(arg, encodingOrOffset, length) {
      if (typeof arg === "number") {
        if (typeof encodingOrOffset === "string") {
          throw new TypeError(
            'The "string" argument must be of type string. Received type number'
          );
        }
        return allocUnsafe(arg);
      }
      return from(arg, encodingOrOffset, length);
    }
    Buffer22.poolSize = 8192;
    function from(value, encodingOrOffset, length) {
      if (typeof value === "string") {
        return fromString(value, encodingOrOffset);
      }
      if (ArrayBuffer.isView(value)) {
        return fromArrayView(value);
      }
      if (value == null) {
        throw new TypeError(
          "The first argument must be one of type string, Buffer, ArrayBuffer, Array, or Array-like Object. Received type " + typeof value
        );
      }
      if (isInstance(value, ArrayBuffer) || value && isInstance(value.buffer, ArrayBuffer)) {
        return fromArrayBuffer(value, encodingOrOffset, length);
      }
      if (typeof SharedArrayBuffer !== "undefined" && (isInstance(value, SharedArrayBuffer) || value && isInstance(value.buffer, SharedArrayBuffer))) {
        return fromArrayBuffer(value, encodingOrOffset, length);
      }
      if (typeof value === "number") {
        throw new TypeError(
          'The "value" argument must not be of type number. Received type number'
        );
      }
      const valueOf = value.valueOf && value.valueOf();
      if (valueOf != null && valueOf !== value) {
        return Buffer22.from(valueOf, encodingOrOffset, length);
      }
      const b = fromObject(value);
      if (b)
        return b;
      if (typeof Symbol !== "undefined" && Symbol.toPrimitive != null && typeof value[Symbol.toPrimitive] === "function") {
        return Buffer22.from(value[Symbol.toPrimitive]("string"), encodingOrOffset, length);
      }
      throw new TypeError(
        "The first argument must be one of type string, Buffer, ArrayBuffer, Array, or Array-like Object. Received type " + typeof value
      );
    }
    Buffer22.from = function(value, encodingOrOffset, length) {
      return from(value, encodingOrOffset, length);
    };
    Object.setPrototypeOf(Buffer22.prototype, Uint8Array.prototype);
    Object.setPrototypeOf(Buffer22, Uint8Array);
    function assertSize(size) {
      if (typeof size !== "number") {
        throw new TypeError('"size" argument must be of type number');
      } else if (size < 0) {
        throw new RangeError('The value "' + size + '" is invalid for option "size"');
      }
    }
    function alloc(size, fill, encoding) {
      assertSize(size);
      if (size <= 0) {
        return createBuffer(size);
      }
      if (fill !== void 0) {
        return typeof encoding === "string" ? createBuffer(size).fill(fill, encoding) : createBuffer(size).fill(fill);
      }
      return createBuffer(size);
    }
    Buffer22.alloc = function(size, fill, encoding) {
      return alloc(size, fill, encoding);
    };
    function allocUnsafe(size) {
      assertSize(size);
      return createBuffer(size < 0 ? 0 : checked(size) | 0);
    }
    Buffer22.allocUnsafe = function(size) {
      return allocUnsafe(size);
    };
    Buffer22.allocUnsafeSlow = function(size) {
      return allocUnsafe(size);
    };
    function fromString(string, encoding) {
      if (typeof encoding !== "string" || encoding === "") {
        encoding = "utf8";
      }
      if (!Buffer22.isEncoding(encoding)) {
        throw new TypeError("Unknown encoding: " + encoding);
      }
      const length = byteLength2(string, encoding) | 0;
      let buf = createBuffer(length);
      const actual = buf.write(string, encoding);
      if (actual !== length) {
        buf = buf.slice(0, actual);
      }
      return buf;
    }
    function fromArrayLike(array) {
      const length = array.length < 0 ? 0 : checked(array.length) | 0;
      const buf = createBuffer(length);
      for (let i = 0; i < length; i += 1) {
        buf[i] = array[i] & 255;
      }
      return buf;
    }
    function fromArrayView(arrayView) {
      if (isInstance(arrayView, Uint8Array)) {
        const copy = new Uint8Array(arrayView);
        return fromArrayBuffer(copy.buffer, copy.byteOffset, copy.byteLength);
      }
      return fromArrayLike(arrayView);
    }
    function fromArrayBuffer(array, byteOffset, length) {
      if (byteOffset < 0 || array.byteLength < byteOffset) {
        throw new RangeError('"offset" is outside of buffer bounds');
      }
      if (array.byteLength < byteOffset + (length || 0)) {
        throw new RangeError('"length" is outside of buffer bounds');
      }
      let buf;
      if (byteOffset === void 0 && length === void 0) {
        buf = new Uint8Array(array);
      } else if (length === void 0) {
        buf = new Uint8Array(array, byteOffset);
      } else {
        buf = new Uint8Array(array, byteOffset, length);
      }
      Object.setPrototypeOf(buf, Buffer22.prototype);
      return buf;
    }
    function fromObject(obj) {
      if (Buffer22.isBuffer(obj)) {
        const len = checked(obj.length) | 0;
        const buf = createBuffer(len);
        if (buf.length === 0) {
          return buf;
        }
        obj.copy(buf, 0, 0, len);
        return buf;
      }
      if (obj.length !== void 0) {
        if (typeof obj.length !== "number" || numberIsNaN(obj.length)) {
          return createBuffer(0);
        }
        return fromArrayLike(obj);
      }
      if (obj.type === "Buffer" && Array.isArray(obj.data)) {
        return fromArrayLike(obj.data);
      }
    }
    function checked(length) {
      if (length >= K_MAX_LENGTH) {
        throw new RangeError("Attempt to allocate Buffer larger than maximum size: 0x" + K_MAX_LENGTH.toString(16) + " bytes");
      }
      return length | 0;
    }
    function SlowBuffer(length) {
      if (+length != length) {
        length = 0;
      }
      return Buffer22.alloc(+length);
    }
    Buffer22.isBuffer = function isBuffer(b) {
      return b != null && b._isBuffer === true && b !== Buffer22.prototype;
    };
    Buffer22.compare = function compare2(a, b) {
      if (isInstance(a, Uint8Array))
        a = Buffer22.from(a, a.offset, a.byteLength);
      if (isInstance(b, Uint8Array))
        b = Buffer22.from(b, b.offset, b.byteLength);
      if (!Buffer22.isBuffer(a) || !Buffer22.isBuffer(b)) {
        throw new TypeError(
          'The "buf1", "buf2" arguments must be one of type Buffer or Uint8Array'
        );
      }
      if (a === b)
        return 0;
      let x = a.length;
      let y = b.length;
      for (let i = 0, len = Math.min(x, y); i < len; ++i) {
        if (a[i] !== b[i]) {
          x = a[i];
          y = b[i];
          break;
        }
      }
      if (x < y)
        return -1;
      if (y < x)
        return 1;
      return 0;
    };
    Buffer22.isEncoding = function isEncoding(encoding) {
      switch (String(encoding).toLowerCase()) {
        case "hex":
        case "utf8":
        case "utf-8":
        case "ascii":
        case "latin1":
        case "binary":
        case "base64":
        case "ucs2":
        case "ucs-2":
        case "utf16le":
        case "utf-16le":
          return true;
        default:
          return false;
      }
    };
    Buffer22.concat = function concat(list, length) {
      if (!Array.isArray(list)) {
        throw new TypeError('"list" argument must be an Array of Buffers');
      }
      if (list.length === 0) {
        return Buffer22.alloc(0);
      }
      let i;
      if (length === void 0) {
        length = 0;
        for (i = 0; i < list.length; ++i) {
          length += list[i].length;
        }
      }
      const buffer2 = Buffer22.allocUnsafe(length);
      let pos = 0;
      for (i = 0; i < list.length; ++i) {
        let buf = list[i];
        if (isInstance(buf, Uint8Array)) {
          if (pos + buf.length > buffer2.length) {
            if (!Buffer22.isBuffer(buf))
              buf = Buffer22.from(buf);
            buf.copy(buffer2, pos);
          } else {
            Uint8Array.prototype.set.call(
              buffer2,
              buf,
              pos
            );
          }
        } else if (!Buffer22.isBuffer(buf)) {
          throw new TypeError('"list" argument must be an Array of Buffers');
        } else {
          buf.copy(buffer2, pos);
        }
        pos += buf.length;
      }
      return buffer2;
    };
    function byteLength2(string, encoding) {
      if (Buffer22.isBuffer(string)) {
        return string.length;
      }
      if (ArrayBuffer.isView(string) || isInstance(string, ArrayBuffer)) {
        return string.byteLength;
      }
      if (typeof string !== "string") {
        throw new TypeError(
          'The "string" argument must be one of type string, Buffer, or ArrayBuffer. Received type ' + typeof string
        );
      }
      const len = string.length;
      const mustMatch = arguments.length > 2 && arguments[2] === true;
      if (!mustMatch && len === 0)
        return 0;
      let loweredCase = false;
      for (; ; ) {
        switch (encoding) {
          case "ascii":
          case "latin1":
          case "binary":
            return len;
          case "utf8":
          case "utf-8":
            return utf8ToBytes(string).length;
          case "ucs2":
          case "ucs-2":
          case "utf16le":
          case "utf-16le":
            return len * 2;
          case "hex":
            return len >>> 1;
          case "base64":
            return base64ToBytes(string).length;
          default:
            if (loweredCase) {
              return mustMatch ? -1 : utf8ToBytes(string).length;
            }
            encoding = ("" + encoding).toLowerCase();
            loweredCase = true;
        }
      }
    }
    Buffer22.byteLength = byteLength2;
    function slowToString(encoding, start, end) {
      let loweredCase = false;
      if (start === void 0 || start < 0) {
        start = 0;
      }
      if (start > this.length) {
        return "";
      }
      if (end === void 0 || end > this.length) {
        end = this.length;
      }
      if (end <= 0) {
        return "";
      }
      end >>>= 0;
      start >>>= 0;
      if (end <= start) {
        return "";
      }
      if (!encoding)
        encoding = "utf8";
      while (true) {
        switch (encoding) {
          case "hex":
            return hexSlice(this, start, end);
          case "utf8":
          case "utf-8":
            return utf8Slice(this, start, end);
          case "ascii":
            return asciiSlice(this, start, end);
          case "latin1":
          case "binary":
            return latin1Slice(this, start, end);
          case "base64":
            return base64Slice(this, start, end);
          case "ucs2":
          case "ucs-2":
          case "utf16le":
          case "utf-16le":
            return utf16leSlice(this, start, end);
          default:
            if (loweredCase)
              throw new TypeError("Unknown encoding: " + encoding);
            encoding = (encoding + "").toLowerCase();
            loweredCase = true;
        }
      }
    }
    Buffer22.prototype._isBuffer = true;
    function swap(b, n, m) {
      const i = b[n];
      b[n] = b[m];
      b[m] = i;
    }
    Buffer22.prototype.swap16 = function swap16() {
      const len = this.length;
      if (len % 2 !== 0) {
        throw new RangeError("Buffer size must be a multiple of 16-bits");
      }
      for (let i = 0; i < len; i += 2) {
        swap(this, i, i + 1);
      }
      return this;
    };
    Buffer22.prototype.swap32 = function swap32() {
      const len = this.length;
      if (len % 4 !== 0) {
        throw new RangeError("Buffer size must be a multiple of 32-bits");
      }
      for (let i = 0; i < len; i += 4) {
        swap(this, i, i + 3);
        swap(this, i + 1, i + 2);
      }
      return this;
    };
    Buffer22.prototype.swap64 = function swap64() {
      const len = this.length;
      if (len % 8 !== 0) {
        throw new RangeError("Buffer size must be a multiple of 64-bits");
      }
      for (let i = 0; i < len; i += 8) {
        swap(this, i, i + 7);
        swap(this, i + 1, i + 6);
        swap(this, i + 2, i + 5);
        swap(this, i + 3, i + 4);
      }
      return this;
    };
    Buffer22.prototype.toString = function toString() {
      const length = this.length;
      if (length === 0)
        return "";
      if (arguments.length === 0)
        return utf8Slice(this, 0, length);
      return slowToString.apply(this, arguments);
    };
    Buffer22.prototype.toLocaleString = Buffer22.prototype.toString;
    Buffer22.prototype.equals = function equals(b) {
      if (!Buffer22.isBuffer(b))
        throw new TypeError("Argument must be a Buffer");
      if (this === b)
        return true;
      return Buffer22.compare(this, b) === 0;
    };
    Buffer22.prototype.inspect = function inspect2() {
      let str = "";
      const max = exports.INSPECT_MAX_BYTES;
      str = this.toString("hex", 0, max).replace(/(.{2})/g, "$1 ").trim();
      if (this.length > max)
        str += " ... ";
      return "<Buffer " + str + ">";
    };
    if (customInspectSymbol) {
      Buffer22.prototype[customInspectSymbol] = Buffer22.prototype.inspect;
    }
    Buffer22.prototype.compare = function compare2(target, start, end, thisStart, thisEnd) {
      if (isInstance(target, Uint8Array)) {
        target = Buffer22.from(target, target.offset, target.byteLength);
      }
      if (!Buffer22.isBuffer(target)) {
        throw new TypeError(
          'The "target" argument must be one of type Buffer or Uint8Array. Received type ' + typeof target
        );
      }
      if (start === void 0) {
        start = 0;
      }
      if (end === void 0) {
        end = target ? target.length : 0;
      }
      if (thisStart === void 0) {
        thisStart = 0;
      }
      if (thisEnd === void 0) {
        thisEnd = this.length;
      }
      if (start < 0 || end > target.length || thisStart < 0 || thisEnd > this.length) {
        throw new RangeError("out of range index");
      }
      if (thisStart >= thisEnd && start >= end) {
        return 0;
      }
      if (thisStart >= thisEnd) {
        return -1;
      }
      if (start >= end) {
        return 1;
      }
      start >>>= 0;
      end >>>= 0;
      thisStart >>>= 0;
      thisEnd >>>= 0;
      if (this === target)
        return 0;
      let x = thisEnd - thisStart;
      let y = end - start;
      const len = Math.min(x, y);
      const thisCopy = this.slice(thisStart, thisEnd);
      const targetCopy = target.slice(start, end);
      for (let i = 0; i < len; ++i) {
        if (thisCopy[i] !== targetCopy[i]) {
          x = thisCopy[i];
          y = targetCopy[i];
          break;
        }
      }
      if (x < y)
        return -1;
      if (y < x)
        return 1;
      return 0;
    };
    function bidirectionalIndexOf(buffer2, val, byteOffset, encoding, dir) {
      if (buffer2.length === 0)
        return -1;
      if (typeof byteOffset === "string") {
        encoding = byteOffset;
        byteOffset = 0;
      } else if (byteOffset > 2147483647) {
        byteOffset = 2147483647;
      } else if (byteOffset < -2147483648) {
        byteOffset = -2147483648;
      }
      byteOffset = +byteOffset;
      if (numberIsNaN(byteOffset)) {
        byteOffset = dir ? 0 : buffer2.length - 1;
      }
      if (byteOffset < 0)
        byteOffset = buffer2.length + byteOffset;
      if (byteOffset >= buffer2.length) {
        if (dir)
          return -1;
        else
          byteOffset = buffer2.length - 1;
      } else if (byteOffset < 0) {
        if (dir)
          byteOffset = 0;
        else
          return -1;
      }
      if (typeof val === "string") {
        val = Buffer22.from(val, encoding);
      }
      if (Buffer22.isBuffer(val)) {
        if (val.length === 0) {
          return -1;
        }
        return arrayIndexOf(buffer2, val, byteOffset, encoding, dir);
      } else if (typeof val === "number") {
        val = val & 255;
        if (typeof Uint8Array.prototype.indexOf === "function") {
          if (dir) {
            return Uint8Array.prototype.indexOf.call(buffer2, val, byteOffset);
          } else {
            return Uint8Array.prototype.lastIndexOf.call(buffer2, val, byteOffset);
          }
        }
        return arrayIndexOf(buffer2, [val], byteOffset, encoding, dir);
      }
      throw new TypeError("val must be string, number or Buffer");
    }
    function arrayIndexOf(arr, val, byteOffset, encoding, dir) {
      let indexSize = 1;
      let arrLength = arr.length;
      let valLength = val.length;
      if (encoding !== void 0) {
        encoding = String(encoding).toLowerCase();
        if (encoding === "ucs2" || encoding === "ucs-2" || encoding === "utf16le" || encoding === "utf-16le") {
          if (arr.length < 2 || val.length < 2) {
            return -1;
          }
          indexSize = 2;
          arrLength /= 2;
          valLength /= 2;
          byteOffset /= 2;
        }
      }
      function read(buf, i2) {
        if (indexSize === 1) {
          return buf[i2];
        } else {
          return buf.readUInt16BE(i2 * indexSize);
        }
      }
      let i;
      if (dir) {
        let foundIndex = -1;
        for (i = byteOffset; i < arrLength; i++) {
          if (read(arr, i) === read(val, foundIndex === -1 ? 0 : i - foundIndex)) {
            if (foundIndex === -1)
              foundIndex = i;
            if (i - foundIndex + 1 === valLength)
              return foundIndex * indexSize;
          } else {
            if (foundIndex !== -1)
              i -= i - foundIndex;
            foundIndex = -1;
          }
        }
      } else {
        if (byteOffset + valLength > arrLength)
          byteOffset = arrLength - valLength;
        for (i = byteOffset; i >= 0; i--) {
          let found = true;
          for (let j = 0; j < valLength; j++) {
            if (read(arr, i + j) !== read(val, j)) {
              found = false;
              break;
            }
          }
          if (found)
            return i;
        }
      }
      return -1;
    }
    Buffer22.prototype.includes = function includes(val, byteOffset, encoding) {
      return this.indexOf(val, byteOffset, encoding) !== -1;
    };
    Buffer22.prototype.indexOf = function indexOf(val, byteOffset, encoding) {
      return bidirectionalIndexOf(this, val, byteOffset, encoding, true);
    };
    Buffer22.prototype.lastIndexOf = function lastIndexOf(val, byteOffset, encoding) {
      return bidirectionalIndexOf(this, val, byteOffset, encoding, false);
    };
    function hexWrite(buf, string, offset, length) {
      offset = Number(offset) || 0;
      const remaining = buf.length - offset;
      if (!length) {
        length = remaining;
      } else {
        length = Number(length);
        if (length > remaining) {
          length = remaining;
        }
      }
      const strLen = string.length;
      if (length > strLen / 2) {
        length = strLen / 2;
      }
      let i;
      for (i = 0; i < length; ++i) {
        const parsed = parseInt(string.substr(i * 2, 2), 16);
        if (numberIsNaN(parsed))
          return i;
        buf[offset + i] = parsed;
      }
      return i;
    }
    function utf8Write(buf, string, offset, length) {
      return blitBuffer(utf8ToBytes(string, buf.length - offset), buf, offset, length);
    }
    function asciiWrite(buf, string, offset, length) {
      return blitBuffer(asciiToBytes(string), buf, offset, length);
    }
    function base64Write(buf, string, offset, length) {
      return blitBuffer(base64ToBytes(string), buf, offset, length);
    }
    function ucs2Write(buf, string, offset, length) {
      return blitBuffer(utf16leToBytes(string, buf.length - offset), buf, offset, length);
    }
    Buffer22.prototype.write = function write(string, offset, length, encoding) {
      if (offset === void 0) {
        encoding = "utf8";
        length = this.length;
        offset = 0;
      } else if (length === void 0 && typeof offset === "string") {
        encoding = offset;
        length = this.length;
        offset = 0;
      } else if (isFinite(offset)) {
        offset = offset >>> 0;
        if (isFinite(length)) {
          length = length >>> 0;
          if (encoding === void 0)
            encoding = "utf8";
        } else {
          encoding = length;
          length = void 0;
        }
      } else {
        throw new Error(
          "Buffer.write(string, encoding, offset[, length]) is no longer supported"
        );
      }
      const remaining = this.length - offset;
      if (length === void 0 || length > remaining)
        length = remaining;
      if (string.length > 0 && (length < 0 || offset < 0) || offset > this.length) {
        throw new RangeError("Attempt to write outside buffer bounds");
      }
      if (!encoding)
        encoding = "utf8";
      let loweredCase = false;
      for (; ; ) {
        switch (encoding) {
          case "hex":
            return hexWrite(this, string, offset, length);
          case "utf8":
          case "utf-8":
            return utf8Write(this, string, offset, length);
          case "ascii":
          case "latin1":
          case "binary":
            return asciiWrite(this, string, offset, length);
          case "base64":
            return base64Write(this, string, offset, length);
          case "ucs2":
          case "ucs-2":
          case "utf16le":
          case "utf-16le":
            return ucs2Write(this, string, offset, length);
          default:
            if (loweredCase)
              throw new TypeError("Unknown encoding: " + encoding);
            encoding = ("" + encoding).toLowerCase();
            loweredCase = true;
        }
      }
    };
    Buffer22.prototype.toJSON = function toJSON() {
      return {
        type: "Buffer",
        data: Array.prototype.slice.call(this._arr || this, 0)
      };
    };
    function base64Slice(buf, start, end) {
      if (start === 0 && end === buf.length) {
        return base64.fromByteArray(buf);
      } else {
        return base64.fromByteArray(buf.slice(start, end));
      }
    }
    function utf8Slice(buf, start, end) {
      end = Math.min(buf.length, end);
      const res = [];
      let i = start;
      while (i < end) {
        const firstByte = buf[i];
        let codePoint = null;
        let bytesPerSequence = firstByte > 239 ? 4 : firstByte > 223 ? 3 : firstByte > 191 ? 2 : 1;
        if (i + bytesPerSequence <= end) {
          let secondByte, thirdByte, fourthByte, tempCodePoint;
          switch (bytesPerSequence) {
            case 1:
              if (firstByte < 128) {
                codePoint = firstByte;
              }
              break;
            case 2:
              secondByte = buf[i + 1];
              if ((secondByte & 192) === 128) {
                tempCodePoint = (firstByte & 31) << 6 | secondByte & 63;
                if (tempCodePoint > 127) {
                  codePoint = tempCodePoint;
                }
              }
              break;
            case 3:
              secondByte = buf[i + 1];
              thirdByte = buf[i + 2];
              if ((secondByte & 192) === 128 && (thirdByte & 192) === 128) {
                tempCodePoint = (firstByte & 15) << 12 | (secondByte & 63) << 6 | thirdByte & 63;
                if (tempCodePoint > 2047 && (tempCodePoint < 55296 || tempCodePoint > 57343)) {
                  codePoint = tempCodePoint;
                }
              }
              break;
            case 4:
              secondByte = buf[i + 1];
              thirdByte = buf[i + 2];
              fourthByte = buf[i + 3];
              if ((secondByte & 192) === 128 && (thirdByte & 192) === 128 && (fourthByte & 192) === 128) {
                tempCodePoint = (firstByte & 15) << 18 | (secondByte & 63) << 12 | (thirdByte & 63) << 6 | fourthByte & 63;
                if (tempCodePoint > 65535 && tempCodePoint < 1114112) {
                  codePoint = tempCodePoint;
                }
              }
          }
        }
        if (codePoint === null) {
          codePoint = 65533;
          bytesPerSequence = 1;
        } else if (codePoint > 65535) {
          codePoint -= 65536;
          res.push(codePoint >>> 10 & 1023 | 55296);
          codePoint = 56320 | codePoint & 1023;
        }
        res.push(codePoint);
        i += bytesPerSequence;
      }
      return decodeCodePointsArray(res);
    }
    var MAX_ARGUMENTS_LENGTH = 4096;
    function decodeCodePointsArray(codePoints) {
      const len = codePoints.length;
      if (len <= MAX_ARGUMENTS_LENGTH) {
        return String.fromCharCode.apply(String, codePoints);
      }
      let res = "";
      let i = 0;
      while (i < len) {
        res += String.fromCharCode.apply(
          String,
          codePoints.slice(i, i += MAX_ARGUMENTS_LENGTH)
        );
      }
      return res;
    }
    function asciiSlice(buf, start, end) {
      let ret = "";
      end = Math.min(buf.length, end);
      for (let i = start; i < end; ++i) {
        ret += String.fromCharCode(buf[i] & 127);
      }
      return ret;
    }
    function latin1Slice(buf, start, end) {
      let ret = "";
      end = Math.min(buf.length, end);
      for (let i = start; i < end; ++i) {
        ret += String.fromCharCode(buf[i]);
      }
      return ret;
    }
    function hexSlice(buf, start, end) {
      const len = buf.length;
      if (!start || start < 0)
        start = 0;
      if (!end || end < 0 || end > len)
        end = len;
      let out = "";
      for (let i = start; i < end; ++i) {
        out += hexSliceLookupTable[buf[i]];
      }
      return out;
    }
    function utf16leSlice(buf, start, end) {
      const bytes = buf.slice(start, end);
      let res = "";
      for (let i = 0; i < bytes.length - 1; i += 2) {
        res += String.fromCharCode(bytes[i] + bytes[i + 1] * 256);
      }
      return res;
    }
    Buffer22.prototype.slice = function slice(start, end) {
      const len = this.length;
      start = ~~start;
      end = end === void 0 ? len : ~~end;
      if (start < 0) {
        start += len;
        if (start < 0)
          start = 0;
      } else if (start > len) {
        start = len;
      }
      if (end < 0) {
        end += len;
        if (end < 0)
          end = 0;
      } else if (end > len) {
        end = len;
      }
      if (end < start)
        end = start;
      const newBuf = this.subarray(start, end);
      Object.setPrototypeOf(newBuf, Buffer22.prototype);
      return newBuf;
    };
    function checkOffset(offset, ext, length) {
      if (offset % 1 !== 0 || offset < 0)
        throw new RangeError("offset is not uint");
      if (offset + ext > length)
        throw new RangeError("Trying to access beyond buffer length");
    }
    Buffer22.prototype.readUintLE = Buffer22.prototype.readUIntLE = function readUIntLE(offset, byteLength3, noAssert) {
      offset = offset >>> 0;
      byteLength3 = byteLength3 >>> 0;
      if (!noAssert)
        checkOffset(offset, byteLength3, this.length);
      let val = this[offset];
      let mul = 1;
      let i = 0;
      while (++i < byteLength3 && (mul *= 256)) {
        val += this[offset + i] * mul;
      }
      return val;
    };
    Buffer22.prototype.readUintBE = Buffer22.prototype.readUIntBE = function readUIntBE(offset, byteLength3, noAssert) {
      offset = offset >>> 0;
      byteLength3 = byteLength3 >>> 0;
      if (!noAssert) {
        checkOffset(offset, byteLength3, this.length);
      }
      let val = this[offset + --byteLength3];
      let mul = 1;
      while (byteLength3 > 0 && (mul *= 256)) {
        val += this[offset + --byteLength3] * mul;
      }
      return val;
    };
    Buffer22.prototype.readUint8 = Buffer22.prototype.readUInt8 = function readUInt8(offset, noAssert) {
      offset = offset >>> 0;
      if (!noAssert)
        checkOffset(offset, 1, this.length);
      return this[offset];
    };
    Buffer22.prototype.readUint16LE = Buffer22.prototype.readUInt16LE = function readUInt16LE(offset, noAssert) {
      offset = offset >>> 0;
      if (!noAssert)
        checkOffset(offset, 2, this.length);
      return this[offset] | this[offset + 1] << 8;
    };
    Buffer22.prototype.readUint16BE = Buffer22.prototype.readUInt16BE = function readUInt16BE(offset, noAssert) {
      offset = offset >>> 0;
      if (!noAssert)
        checkOffset(offset, 2, this.length);
      return this[offset] << 8 | this[offset + 1];
    };
    Buffer22.prototype.readUint32LE = Buffer22.prototype.readUInt32LE = function readUInt32LE(offset, noAssert) {
      offset = offset >>> 0;
      if (!noAssert)
        checkOffset(offset, 4, this.length);
      return (this[offset] | this[offset + 1] << 8 | this[offset + 2] << 16) + this[offset + 3] * 16777216;
    };
    Buffer22.prototype.readUint32BE = Buffer22.prototype.readUInt32BE = function readUInt32BE(offset, noAssert) {
      offset = offset >>> 0;
      if (!noAssert)
        checkOffset(offset, 4, this.length);
      return this[offset] * 16777216 + (this[offset + 1] << 16 | this[offset + 2] << 8 | this[offset + 3]);
    };
    Buffer22.prototype.readBigUInt64LE = defineBigIntMethod(function readBigUInt64LE(offset) {
      offset = offset >>> 0;
      validateNumber(offset, "offset");
      const first = this[offset];
      const last = this[offset + 7];
      if (first === void 0 || last === void 0) {
        boundsError(offset, this.length - 8);
      }
      const lo = first + this[++offset] * 2 ** 8 + this[++offset] * 2 ** 16 + this[++offset] * 2 ** 24;
      const hi = this[++offset] + this[++offset] * 2 ** 8 + this[++offset] * 2 ** 16 + last * 2 ** 24;
      return BigInt(lo) + (BigInt(hi) << BigInt(32));
    });
    Buffer22.prototype.readBigUInt64BE = defineBigIntMethod(function readBigUInt64BE(offset) {
      offset = offset >>> 0;
      validateNumber(offset, "offset");
      const first = this[offset];
      const last = this[offset + 7];
      if (first === void 0 || last === void 0) {
        boundsError(offset, this.length - 8);
      }
      const hi = first * 2 ** 24 + this[++offset] * 2 ** 16 + this[++offset] * 2 ** 8 + this[++offset];
      const lo = this[++offset] * 2 ** 24 + this[++offset] * 2 ** 16 + this[++offset] * 2 ** 8 + last;
      return (BigInt(hi) << BigInt(32)) + BigInt(lo);
    });
    Buffer22.prototype.readIntLE = function readIntLE(offset, byteLength3, noAssert) {
      offset = offset >>> 0;
      byteLength3 = byteLength3 >>> 0;
      if (!noAssert)
        checkOffset(offset, byteLength3, this.length);
      let val = this[offset];
      let mul = 1;
      let i = 0;
      while (++i < byteLength3 && (mul *= 256)) {
        val += this[offset + i] * mul;
      }
      mul *= 128;
      if (val >= mul)
        val -= Math.pow(2, 8 * byteLength3);
      return val;
    };
    Buffer22.prototype.readIntBE = function readIntBE(offset, byteLength3, noAssert) {
      offset = offset >>> 0;
      byteLength3 = byteLength3 >>> 0;
      if (!noAssert)
        checkOffset(offset, byteLength3, this.length);
      let i = byteLength3;
      let mul = 1;
      let val = this[offset + --i];
      while (i > 0 && (mul *= 256)) {
        val += this[offset + --i] * mul;
      }
      mul *= 128;
      if (val >= mul)
        val -= Math.pow(2, 8 * byteLength3);
      return val;
    };
    Buffer22.prototype.readInt8 = function readInt8(offset, noAssert) {
      offset = offset >>> 0;
      if (!noAssert)
        checkOffset(offset, 1, this.length);
      if (!(this[offset] & 128))
        return this[offset];
      return (255 - this[offset] + 1) * -1;
    };
    Buffer22.prototype.readInt16LE = function readInt16LE(offset, noAssert) {
      offset = offset >>> 0;
      if (!noAssert)
        checkOffset(offset, 2, this.length);
      const val = this[offset] | this[offset + 1] << 8;
      return val & 32768 ? val | 4294901760 : val;
    };
    Buffer22.prototype.readInt16BE = function readInt16BE(offset, noAssert) {
      offset = offset >>> 0;
      if (!noAssert)
        checkOffset(offset, 2, this.length);
      const val = this[offset + 1] | this[offset] << 8;
      return val & 32768 ? val | 4294901760 : val;
    };
    Buffer22.prototype.readInt32LE = function readInt32LE(offset, noAssert) {
      offset = offset >>> 0;
      if (!noAssert)
        checkOffset(offset, 4, this.length);
      return this[offset] | this[offset + 1] << 8 | this[offset + 2] << 16 | this[offset + 3] << 24;
    };
    Buffer22.prototype.readInt32BE = function readInt32BE(offset, noAssert) {
      offset = offset >>> 0;
      if (!noAssert)
        checkOffset(offset, 4, this.length);
      return this[offset] << 24 | this[offset + 1] << 16 | this[offset + 2] << 8 | this[offset + 3];
    };
    Buffer22.prototype.readBigInt64LE = defineBigIntMethod(function readBigInt64LE(offset) {
      offset = offset >>> 0;
      validateNumber(offset, "offset");
      const first = this[offset];
      const last = this[offset + 7];
      if (first === void 0 || last === void 0) {
        boundsError(offset, this.length - 8);
      }
      const val = this[offset + 4] + this[offset + 5] * 2 ** 8 + this[offset + 6] * 2 ** 16 + (last << 24);
      return (BigInt(val) << BigInt(32)) + BigInt(first + this[++offset] * 2 ** 8 + this[++offset] * 2 ** 16 + this[++offset] * 2 ** 24);
    });
    Buffer22.prototype.readBigInt64BE = defineBigIntMethod(function readBigInt64BE(offset) {
      offset = offset >>> 0;
      validateNumber(offset, "offset");
      const first = this[offset];
      const last = this[offset + 7];
      if (first === void 0 || last === void 0) {
        boundsError(offset, this.length - 8);
      }
      const val = (first << 24) + // Overflow
      this[++offset] * 2 ** 16 + this[++offset] * 2 ** 8 + this[++offset];
      return (BigInt(val) << BigInt(32)) + BigInt(this[++offset] * 2 ** 24 + this[++offset] * 2 ** 16 + this[++offset] * 2 ** 8 + last);
    });
    Buffer22.prototype.readFloatLE = function readFloatLE(offset, noAssert) {
      offset = offset >>> 0;
      if (!noAssert)
        checkOffset(offset, 4, this.length);
      return ieee7542.read(this, offset, true, 23, 4);
    };
    Buffer22.prototype.readFloatBE = function readFloatBE(offset, noAssert) {
      offset = offset >>> 0;
      if (!noAssert)
        checkOffset(offset, 4, this.length);
      return ieee7542.read(this, offset, false, 23, 4);
    };
    Buffer22.prototype.readDoubleLE = function readDoubleLE(offset, noAssert) {
      offset = offset >>> 0;
      if (!noAssert)
        checkOffset(offset, 8, this.length);
      return ieee7542.read(this, offset, true, 52, 8);
    };
    Buffer22.prototype.readDoubleBE = function readDoubleBE(offset, noAssert) {
      offset = offset >>> 0;
      if (!noAssert)
        checkOffset(offset, 8, this.length);
      return ieee7542.read(this, offset, false, 52, 8);
    };
    function checkInt(buf, value, offset, ext, max, min) {
      if (!Buffer22.isBuffer(buf))
        throw new TypeError('"buffer" argument must be a Buffer instance');
      if (value > max || value < min)
        throw new RangeError('"value" argument is out of bounds');
      if (offset + ext > buf.length)
        throw new RangeError("Index out of range");
    }
    Buffer22.prototype.writeUintLE = Buffer22.prototype.writeUIntLE = function writeUIntLE(value, offset, byteLength3, noAssert) {
      value = +value;
      offset = offset >>> 0;
      byteLength3 = byteLength3 >>> 0;
      if (!noAssert) {
        const maxBytes = Math.pow(2, 8 * byteLength3) - 1;
        checkInt(this, value, offset, byteLength3, maxBytes, 0);
      }
      let mul = 1;
      let i = 0;
      this[offset] = value & 255;
      while (++i < byteLength3 && (mul *= 256)) {
        this[offset + i] = value / mul & 255;
      }
      return offset + byteLength3;
    };
    Buffer22.prototype.writeUintBE = Buffer22.prototype.writeUIntBE = function writeUIntBE(value, offset, byteLength3, noAssert) {
      value = +value;
      offset = offset >>> 0;
      byteLength3 = byteLength3 >>> 0;
      if (!noAssert) {
        const maxBytes = Math.pow(2, 8 * byteLength3) - 1;
        checkInt(this, value, offset, byteLength3, maxBytes, 0);
      }
      let i = byteLength3 - 1;
      let mul = 1;
      this[offset + i] = value & 255;
      while (--i >= 0 && (mul *= 256)) {
        this[offset + i] = value / mul & 255;
      }
      return offset + byteLength3;
    };
    Buffer22.prototype.writeUint8 = Buffer22.prototype.writeUInt8 = function writeUInt8(value, offset, noAssert) {
      value = +value;
      offset = offset >>> 0;
      if (!noAssert)
        checkInt(this, value, offset, 1, 255, 0);
      this[offset] = value & 255;
      return offset + 1;
    };
    Buffer22.prototype.writeUint16LE = Buffer22.prototype.writeUInt16LE = function writeUInt16LE(value, offset, noAssert) {
      value = +value;
      offset = offset >>> 0;
      if (!noAssert)
        checkInt(this, value, offset, 2, 65535, 0);
      this[offset] = value & 255;
      this[offset + 1] = value >>> 8;
      return offset + 2;
    };
    Buffer22.prototype.writeUint16BE = Buffer22.prototype.writeUInt16BE = function writeUInt16BE(value, offset, noAssert) {
      value = +value;
      offset = offset >>> 0;
      if (!noAssert)
        checkInt(this, value, offset, 2, 65535, 0);
      this[offset] = value >>> 8;
      this[offset + 1] = value & 255;
      return offset + 2;
    };
    Buffer22.prototype.writeUint32LE = Buffer22.prototype.writeUInt32LE = function writeUInt32LE(value, offset, noAssert) {
      value = +value;
      offset = offset >>> 0;
      if (!noAssert)
        checkInt(this, value, offset, 4, 4294967295, 0);
      this[offset + 3] = value >>> 24;
      this[offset + 2] = value >>> 16;
      this[offset + 1] = value >>> 8;
      this[offset] = value & 255;
      return offset + 4;
    };
    Buffer22.prototype.writeUint32BE = Buffer22.prototype.writeUInt32BE = function writeUInt32BE(value, offset, noAssert) {
      value = +value;
      offset = offset >>> 0;
      if (!noAssert)
        checkInt(this, value, offset, 4, 4294967295, 0);
      this[offset] = value >>> 24;
      this[offset + 1] = value >>> 16;
      this[offset + 2] = value >>> 8;
      this[offset + 3] = value & 255;
      return offset + 4;
    };
    function wrtBigUInt64LE(buf, value, offset, min, max) {
      checkIntBI(value, min, max, buf, offset, 7);
      let lo = Number(value & BigInt(4294967295));
      buf[offset++] = lo;
      lo = lo >> 8;
      buf[offset++] = lo;
      lo = lo >> 8;
      buf[offset++] = lo;
      lo = lo >> 8;
      buf[offset++] = lo;
      let hi = Number(value >> BigInt(32) & BigInt(4294967295));
      buf[offset++] = hi;
      hi = hi >> 8;
      buf[offset++] = hi;
      hi = hi >> 8;
      buf[offset++] = hi;
      hi = hi >> 8;
      buf[offset++] = hi;
      return offset;
    }
    function wrtBigUInt64BE(buf, value, offset, min, max) {
      checkIntBI(value, min, max, buf, offset, 7);
      let lo = Number(value & BigInt(4294967295));
      buf[offset + 7] = lo;
      lo = lo >> 8;
      buf[offset + 6] = lo;
      lo = lo >> 8;
      buf[offset + 5] = lo;
      lo = lo >> 8;
      buf[offset + 4] = lo;
      let hi = Number(value >> BigInt(32) & BigInt(4294967295));
      buf[offset + 3] = hi;
      hi = hi >> 8;
      buf[offset + 2] = hi;
      hi = hi >> 8;
      buf[offset + 1] = hi;
      hi = hi >> 8;
      buf[offset] = hi;
      return offset + 8;
    }
    Buffer22.prototype.writeBigUInt64LE = defineBigIntMethod(function writeBigUInt64LE(value, offset = 0) {
      return wrtBigUInt64LE(this, value, offset, BigInt(0), BigInt("0xffffffffffffffff"));
    });
    Buffer22.prototype.writeBigUInt64BE = defineBigIntMethod(function writeBigUInt64BE(value, offset = 0) {
      return wrtBigUInt64BE(this, value, offset, BigInt(0), BigInt("0xffffffffffffffff"));
    });
    Buffer22.prototype.writeIntLE = function writeIntLE(value, offset, byteLength3, noAssert) {
      value = +value;
      offset = offset >>> 0;
      if (!noAssert) {
        const limit = Math.pow(2, 8 * byteLength3 - 1);
        checkInt(this, value, offset, byteLength3, limit - 1, -limit);
      }
      let i = 0;
      let mul = 1;
      let sub = 0;
      this[offset] = value & 255;
      while (++i < byteLength3 && (mul *= 256)) {
        if (value < 0 && sub === 0 && this[offset + i - 1] !== 0) {
          sub = 1;
        }
        this[offset + i] = (value / mul >> 0) - sub & 255;
      }
      return offset + byteLength3;
    };
    Buffer22.prototype.writeIntBE = function writeIntBE(value, offset, byteLength3, noAssert) {
      value = +value;
      offset = offset >>> 0;
      if (!noAssert) {
        const limit = Math.pow(2, 8 * byteLength3 - 1);
        checkInt(this, value, offset, byteLength3, limit - 1, -limit);
      }
      let i = byteLength3 - 1;
      let mul = 1;
      let sub = 0;
      this[offset + i] = value & 255;
      while (--i >= 0 && (mul *= 256)) {
        if (value < 0 && sub === 0 && this[offset + i + 1] !== 0) {
          sub = 1;
        }
        this[offset + i] = (value / mul >> 0) - sub & 255;
      }
      return offset + byteLength3;
    };
    Buffer22.prototype.writeInt8 = function writeInt8(value, offset, noAssert) {
      value = +value;
      offset = offset >>> 0;
      if (!noAssert)
        checkInt(this, value, offset, 1, 127, -128);
      if (value < 0)
        value = 255 + value + 1;
      this[offset] = value & 255;
      return offset + 1;
    };
    Buffer22.prototype.writeInt16LE = function writeInt16LE(value, offset, noAssert) {
      value = +value;
      offset = offset >>> 0;
      if (!noAssert)
        checkInt(this, value, offset, 2, 32767, -32768);
      this[offset] = value & 255;
      this[offset + 1] = value >>> 8;
      return offset + 2;
    };
    Buffer22.prototype.writeInt16BE = function writeInt16BE(value, offset, noAssert) {
      value = +value;
      offset = offset >>> 0;
      if (!noAssert)
        checkInt(this, value, offset, 2, 32767, -32768);
      this[offset] = value >>> 8;
      this[offset + 1] = value & 255;
      return offset + 2;
    };
    Buffer22.prototype.writeInt32LE = function writeInt32LE(value, offset, noAssert) {
      value = +value;
      offset = offset >>> 0;
      if (!noAssert)
        checkInt(this, value, offset, 4, 2147483647, -2147483648);
      this[offset] = value & 255;
      this[offset + 1] = value >>> 8;
      this[offset + 2] = value >>> 16;
      this[offset + 3] = value >>> 24;
      return offset + 4;
    };
    Buffer22.prototype.writeInt32BE = function writeInt32BE(value, offset, noAssert) {
      value = +value;
      offset = offset >>> 0;
      if (!noAssert)
        checkInt(this, value, offset, 4, 2147483647, -2147483648);
      if (value < 0)
        value = 4294967295 + value + 1;
      this[offset] = value >>> 24;
      this[offset + 1] = value >>> 16;
      this[offset + 2] = value >>> 8;
      this[offset + 3] = value & 255;
      return offset + 4;
    };
    Buffer22.prototype.writeBigInt64LE = defineBigIntMethod(function writeBigInt64LE(value, offset = 0) {
      return wrtBigUInt64LE(this, value, offset, -BigInt("0x8000000000000000"), BigInt("0x7fffffffffffffff"));
    });
    Buffer22.prototype.writeBigInt64BE = defineBigIntMethod(function writeBigInt64BE(value, offset = 0) {
      return wrtBigUInt64BE(this, value, offset, -BigInt("0x8000000000000000"), BigInt("0x7fffffffffffffff"));
    });
    function checkIEEE754(buf, value, offset, ext, max, min) {
      if (offset + ext > buf.length)
        throw new RangeError("Index out of range");
      if (offset < 0)
        throw new RangeError("Index out of range");
    }
    function writeFloat(buf, value, offset, littleEndian, noAssert) {
      value = +value;
      offset = offset >>> 0;
      if (!noAssert) {
        checkIEEE754(buf, value, offset, 4, 34028234663852886e22, -34028234663852886e22);
      }
      ieee7542.write(buf, value, offset, littleEndian, 23, 4);
      return offset + 4;
    }
    Buffer22.prototype.writeFloatLE = function writeFloatLE(value, offset, noAssert) {
      return writeFloat(this, value, offset, true, noAssert);
    };
    Buffer22.prototype.writeFloatBE = function writeFloatBE(value, offset, noAssert) {
      return writeFloat(this, value, offset, false, noAssert);
    };
    function writeDouble(buf, value, offset, littleEndian, noAssert) {
      value = +value;
      offset = offset >>> 0;
      if (!noAssert) {
        checkIEEE754(buf, value, offset, 8, 17976931348623157e292, -17976931348623157e292);
      }
      ieee7542.write(buf, value, offset, littleEndian, 52, 8);
      return offset + 8;
    }
    Buffer22.prototype.writeDoubleLE = function writeDoubleLE(value, offset, noAssert) {
      return writeDouble(this, value, offset, true, noAssert);
    };
    Buffer22.prototype.writeDoubleBE = function writeDoubleBE(value, offset, noAssert) {
      return writeDouble(this, value, offset, false, noAssert);
    };
    Buffer22.prototype.copy = function copy(target, targetStart, start, end) {
      if (!Buffer22.isBuffer(target))
        throw new TypeError("argument should be a Buffer");
      if (!start)
        start = 0;
      if (!end && end !== 0)
        end = this.length;
      if (targetStart >= target.length)
        targetStart = target.length;
      if (!targetStart)
        targetStart = 0;
      if (end > 0 && end < start)
        end = start;
      if (end === start)
        return 0;
      if (target.length === 0 || this.length === 0)
        return 0;
      if (targetStart < 0) {
        throw new RangeError("targetStart out of bounds");
      }
      if (start < 0 || start >= this.length)
        throw new RangeError("Index out of range");
      if (end < 0)
        throw new RangeError("sourceEnd out of bounds");
      if (end > this.length)
        end = this.length;
      if (target.length - targetStart < end - start) {
        end = target.length - targetStart + start;
      }
      const len = end - start;
      if (this === target && typeof Uint8Array.prototype.copyWithin === "function") {
        this.copyWithin(targetStart, start, end);
      } else {
        Uint8Array.prototype.set.call(
          target,
          this.subarray(start, end),
          targetStart
        );
      }
      return len;
    };
    Buffer22.prototype.fill = function fill(val, start, end, encoding) {
      if (typeof val === "string") {
        if (typeof start === "string") {
          encoding = start;
          start = 0;
          end = this.length;
        } else if (typeof end === "string") {
          encoding = end;
          end = this.length;
        }
        if (encoding !== void 0 && typeof encoding !== "string") {
          throw new TypeError("encoding must be a string");
        }
        if (typeof encoding === "string" && !Buffer22.isEncoding(encoding)) {
          throw new TypeError("Unknown encoding: " + encoding);
        }
        if (val.length === 1) {
          const code2 = val.charCodeAt(0);
          if (encoding === "utf8" && code2 < 128 || encoding === "latin1") {
            val = code2;
          }
        }
      } else if (typeof val === "number") {
        val = val & 255;
      } else if (typeof val === "boolean") {
        val = Number(val);
      }
      if (start < 0 || this.length < start || this.length < end) {
        throw new RangeError("Out of range index");
      }
      if (end <= start) {
        return this;
      }
      start = start >>> 0;
      end = end === void 0 ? this.length : end >>> 0;
      if (!val)
        val = 0;
      let i;
      if (typeof val === "number") {
        for (i = start; i < end; ++i) {
          this[i] = val;
        }
      } else {
        const bytes = Buffer22.isBuffer(val) ? val : Buffer22.from(val, encoding);
        const len = bytes.length;
        if (len === 0) {
          throw new TypeError('The value "' + val + '" is invalid for argument "value"');
        }
        for (i = 0; i < end - start; ++i) {
          this[i + start] = bytes[i % len];
        }
      }
      return this;
    };
    var errors2 = {};
    function E(sym, getMessage2, Base) {
      errors2[sym] = class NodeError extends Base {
        constructor() {
          super();
          Object.defineProperty(this, "message", {
            value: getMessage2.apply(this, arguments),
            writable: true,
            configurable: true
          });
          this.name = `${this.name} [${sym}]`;
          this.stack;
          delete this.name;
        }
        get code() {
          return sym;
        }
        set code(value) {
          Object.defineProperty(this, "code", {
            configurable: true,
            enumerable: true,
            value,
            writable: true
          });
        }
        toString() {
          return `${this.name} [${sym}]: ${this.message}`;
        }
      };
    }
    E(
      "ERR_BUFFER_OUT_OF_BOUNDS",
      function(name) {
        if (name) {
          return `${name} is outside of buffer bounds`;
        }
        return "Attempt to access memory outside buffer bounds";
      },
      RangeError
    );
    E(
      "ERR_INVALID_ARG_TYPE",
      function(name, actual) {
        return `The "${name}" argument must be of type number. Received type ${typeof actual}`;
      },
      TypeError
    );
    E(
      "ERR_OUT_OF_RANGE",
      function(str, range, input) {
        let msg = `The value of "${str}" is out of range.`;
        let received = input;
        if (Number.isInteger(input) && Math.abs(input) > 2 ** 32) {
          received = addNumericalSeparator(String(input));
        } else if (typeof input === "bigint") {
          received = String(input);
          if (input > BigInt(2) ** BigInt(32) || input < -(BigInt(2) ** BigInt(32))) {
            received = addNumericalSeparator(received);
          }
          received += "n";
        }
        msg += ` It must be ${range}. Received ${received}`;
        return msg;
      },
      RangeError
    );
    function addNumericalSeparator(val) {
      let res = "";
      let i = val.length;
      const start = val[0] === "-" ? 1 : 0;
      for (; i >= start + 4; i -= 3) {
        res = `_${val.slice(i - 3, i)}${res}`;
      }
      return `${val.slice(0, i)}${res}`;
    }
    function checkBounds(buf, offset, byteLength3) {
      validateNumber(offset, "offset");
      if (buf[offset] === void 0 || buf[offset + byteLength3] === void 0) {
        boundsError(offset, buf.length - (byteLength3 + 1));
      }
    }
    function checkIntBI(value, min, max, buf, offset, byteLength3) {
      if (value > max || value < min) {
        const n = typeof min === "bigint" ? "n" : "";
        let range;
        if (byteLength3 > 3) {
          if (min === 0 || min === BigInt(0)) {
            range = `>= 0${n} and < 2${n} ** ${(byteLength3 + 1) * 8}${n}`;
          } else {
            range = `>= -(2${n} ** ${(byteLength3 + 1) * 8 - 1}${n}) and < 2 ** ${(byteLength3 + 1) * 8 - 1}${n}`;
          }
        } else {
          range = `>= ${min}${n} and <= ${max}${n}`;
        }
        throw new errors2.ERR_OUT_OF_RANGE("value", range, value);
      }
      checkBounds(buf, offset, byteLength3);
    }
    function validateNumber(value, name) {
      if (typeof value !== "number") {
        throw new errors2.ERR_INVALID_ARG_TYPE(name, "number", value);
      }
    }
    function boundsError(value, length, type) {
      if (Math.floor(value) !== value) {
        validateNumber(value, type);
        throw new errors2.ERR_OUT_OF_RANGE(type || "offset", "an integer", value);
      }
      if (length < 0) {
        throw new errors2.ERR_BUFFER_OUT_OF_BOUNDS();
      }
      throw new errors2.ERR_OUT_OF_RANGE(
        type || "offset",
        `>= ${type ? 1 : 0} and <= ${length}`,
        value
      );
    }
    var INVALID_BASE64_RE = /[^+/0-9A-Za-z-_]/g;
    function base64clean(str) {
      str = str.split("=")[0];
      str = str.trim().replace(INVALID_BASE64_RE, "");
      if (str.length < 2)
        return "";
      while (str.length % 4 !== 0) {
        str = str + "=";
      }
      return str;
    }
    function utf8ToBytes(string, units) {
      units = units || Infinity;
      let codePoint;
      const length = string.length;
      let leadSurrogate = null;
      const bytes = [];
      for (let i = 0; i < length; ++i) {
        codePoint = string.charCodeAt(i);
        if (codePoint > 55295 && codePoint < 57344) {
          if (!leadSurrogate) {
            if (codePoint > 56319) {
              if ((units -= 3) > -1)
                bytes.push(239, 191, 189);
              continue;
            } else if (i + 1 === length) {
              if ((units -= 3) > -1)
                bytes.push(239, 191, 189);
              continue;
            }
            leadSurrogate = codePoint;
            continue;
          }
          if (codePoint < 56320) {
            if ((units -= 3) > -1)
              bytes.push(239, 191, 189);
            leadSurrogate = codePoint;
            continue;
          }
          codePoint = (leadSurrogate - 55296 << 10 | codePoint - 56320) + 65536;
        } else if (leadSurrogate) {
          if ((units -= 3) > -1)
            bytes.push(239, 191, 189);
        }
        leadSurrogate = null;
        if (codePoint < 128) {
          if ((units -= 1) < 0)
            break;
          bytes.push(codePoint);
        } else if (codePoint < 2048) {
          if ((units -= 2) < 0)
            break;
          bytes.push(
            codePoint >> 6 | 192,
            codePoint & 63 | 128
          );
        } else if (codePoint < 65536) {
          if ((units -= 3) < 0)
            break;
          bytes.push(
            codePoint >> 12 | 224,
            codePoint >> 6 & 63 | 128,
            codePoint & 63 | 128
          );
        } else if (codePoint < 1114112) {
          if ((units -= 4) < 0)
            break;
          bytes.push(
            codePoint >> 18 | 240,
            codePoint >> 12 & 63 | 128,
            codePoint >> 6 & 63 | 128,
            codePoint & 63 | 128
          );
        } else {
          throw new Error("Invalid code point");
        }
      }
      return bytes;
    }
    function asciiToBytes(str) {
      const byteArray = [];
      for (let i = 0; i < str.length; ++i) {
        byteArray.push(str.charCodeAt(i) & 255);
      }
      return byteArray;
    }
    function utf16leToBytes(str, units) {
      let c, hi, lo;
      const byteArray = [];
      for (let i = 0; i < str.length; ++i) {
        if ((units -= 2) < 0)
          break;
        c = str.charCodeAt(i);
        hi = c >> 8;
        lo = c % 256;
        byteArray.push(lo);
        byteArray.push(hi);
      }
      return byteArray;
    }
    function base64ToBytes(str) {
      return base64.toByteArray(base64clean(str));
    }
    function blitBuffer(src, dst, offset, length) {
      let i;
      for (i = 0; i < length; ++i) {
        if (i + offset >= dst.length || i >= src.length)
          break;
        dst[i + offset] = src[i];
      }
      return i;
    }
    function isInstance(obj, type) {
      return obj instanceof type || obj != null && obj.constructor != null && obj.constructor.name != null && obj.constructor.name === type.name;
    }
    function numberIsNaN(obj) {
      return obj !== obj;
    }
    var hexSliceLookupTable = function() {
      const alphabet = "0123456789abcdef";
      const table = new Array(256);
      for (let i = 0; i < 16; ++i) {
        const i16 = i * 16;
        for (let j = 0; j < 16; ++j) {
          table[i16 + j] = alphabet[i] + alphabet[j];
        }
      }
      return table;
    }();
    function defineBigIntMethod(fn) {
      return typeof BigInt === "undefined" ? BufferBigIntNotDefined : fn;
    }
    function BufferBigIntNotDefined() {
      throw new Error("BigInt not supported");
    }
  }
});

// ../../node_modules/@metaplex-foundation/js/node_modules/mime/Mime.js
var require_Mime = __commonJS({
  "../../node_modules/@metaplex-foundation/js/node_modules/mime/Mime.js"(exports, module) {
    "use strict";
    function Mime() {
      this._types = /* @__PURE__ */ Object.create(null);
      this._extensions = /* @__PURE__ */ Object.create(null);
      for (let i = 0; i < arguments.length; i++) {
        this.define(arguments[i]);
      }
      this.define = this.define.bind(this);
      this.getType = this.getType.bind(this);
      this.getExtension = this.getExtension.bind(this);
    }
    Mime.prototype.define = function(typeMap, force) {
      for (let type in typeMap) {
        let extensions = typeMap[type].map(function(t) {
          return t.toLowerCase();
        });
        type = type.toLowerCase();
        for (let i = 0; i < extensions.length; i++) {
          const ext = extensions[i];
          if (ext[0] === "*") {
            continue;
          }
          if (!force && ext in this._types) {
            throw new Error(
              'Attempt to change mapping for "' + ext + '" extension from "' + this._types[ext] + '" to "' + type + '". Pass `force=true` to allow this, otherwise remove "' + ext + '" from the list of extensions for "' + type + '".'
            );
          }
          this._types[ext] = type;
        }
        if (force || !this._extensions[type]) {
          const ext = extensions[0];
          this._extensions[type] = ext[0] !== "*" ? ext : ext.substr(1);
        }
      }
    };
    Mime.prototype.getType = function(path) {
      path = String(path);
      let last = path.replace(/^.*[/\\]/, "").toLowerCase();
      let ext = last.replace(/^.*\./, "").toLowerCase();
      let hasPath = last.length < path.length;
      let hasDot = ext.length < last.length - 1;
      return (hasDot || !hasPath) && this._types[ext] || null;
    };
    Mime.prototype.getExtension = function(type) {
      type = /^\s*([^;\s]*)/.test(type) && RegExp.$1;
      return type && this._extensions[type.toLowerCase()] || null;
    };
    module.exports = Mime;
  }
});

// ../../node_modules/@metaplex-foundation/js/node_modules/mime/types/standard.js
var require_standard = __commonJS({
  "../../node_modules/@metaplex-foundation/js/node_modules/mime/types/standard.js"(exports, module) {
    module.exports = { "application/andrew-inset": ["ez"], "application/applixware": ["aw"], "application/atom+xml": ["atom"], "application/atomcat+xml": ["atomcat"], "application/atomdeleted+xml": ["atomdeleted"], "application/atomsvc+xml": ["atomsvc"], "application/atsc-dwd+xml": ["dwd"], "application/atsc-held+xml": ["held"], "application/atsc-rsat+xml": ["rsat"], "application/bdoc": ["bdoc"], "application/calendar+xml": ["xcs"], "application/ccxml+xml": ["ccxml"], "application/cdfx+xml": ["cdfx"], "application/cdmi-capability": ["cdmia"], "application/cdmi-container": ["cdmic"], "application/cdmi-domain": ["cdmid"], "application/cdmi-object": ["cdmio"], "application/cdmi-queue": ["cdmiq"], "application/cu-seeme": ["cu"], "application/dash+xml": ["mpd"], "application/davmount+xml": ["davmount"], "application/docbook+xml": ["dbk"], "application/dssc+der": ["dssc"], "application/dssc+xml": ["xdssc"], "application/ecmascript": ["es", "ecma"], "application/emma+xml": ["emma"], "application/emotionml+xml": ["emotionml"], "application/epub+zip": ["epub"], "application/exi": ["exi"], "application/express": ["exp"], "application/fdt+xml": ["fdt"], "application/font-tdpfr": ["pfr"], "application/geo+json": ["geojson"], "application/gml+xml": ["gml"], "application/gpx+xml": ["gpx"], "application/gxf": ["gxf"], "application/gzip": ["gz"], "application/hjson": ["hjson"], "application/hyperstudio": ["stk"], "application/inkml+xml": ["ink", "inkml"], "application/ipfix": ["ipfix"], "application/its+xml": ["its"], "application/java-archive": ["jar", "war", "ear"], "application/java-serialized-object": ["ser"], "application/java-vm": ["class"], "application/javascript": ["js", "mjs"], "application/json": ["json", "map"], "application/json5": ["json5"], "application/jsonml+json": ["jsonml"], "application/ld+json": ["jsonld"], "application/lgr+xml": ["lgr"], "application/lost+xml": ["lostxml"], "application/mac-binhex40": ["hqx"], "application/mac-compactpro": ["cpt"], "application/mads+xml": ["mads"], "application/manifest+json": ["webmanifest"], "application/marc": ["mrc"], "application/marcxml+xml": ["mrcx"], "application/mathematica": ["ma", "nb", "mb"], "application/mathml+xml": ["mathml"], "application/mbox": ["mbox"], "application/mediaservercontrol+xml": ["mscml"], "application/metalink+xml": ["metalink"], "application/metalink4+xml": ["meta4"], "application/mets+xml": ["mets"], "application/mmt-aei+xml": ["maei"], "application/mmt-usd+xml": ["musd"], "application/mods+xml": ["mods"], "application/mp21": ["m21", "mp21"], "application/mp4": ["mp4s", "m4p"], "application/msword": ["doc", "dot"], "application/mxf": ["mxf"], "application/n-quads": ["nq"], "application/n-triples": ["nt"], "application/node": ["cjs"], "application/octet-stream": ["bin", "dms", "lrf", "mar", "so", "dist", "distz", "pkg", "bpk", "dump", "elc", "deploy", "exe", "dll", "deb", "dmg", "iso", "img", "msi", "msp", "msm", "buffer"], "application/oda": ["oda"], "application/oebps-package+xml": ["opf"], "application/ogg": ["ogx"], "application/omdoc+xml": ["omdoc"], "application/onenote": ["onetoc", "onetoc2", "onetmp", "onepkg"], "application/oxps": ["oxps"], "application/p2p-overlay+xml": ["relo"], "application/patch-ops-error+xml": ["xer"], "application/pdf": ["pdf"], "application/pgp-encrypted": ["pgp"], "application/pgp-signature": ["asc", "sig"], "application/pics-rules": ["prf"], "application/pkcs10": ["p10"], "application/pkcs7-mime": ["p7m", "p7c"], "application/pkcs7-signature": ["p7s"], "application/pkcs8": ["p8"], "application/pkix-attr-cert": ["ac"], "application/pkix-cert": ["cer"], "application/pkix-crl": ["crl"], "application/pkix-pkipath": ["pkipath"], "application/pkixcmp": ["pki"], "application/pls+xml": ["pls"], "application/postscript": ["ai", "eps", "ps"], "application/provenance+xml": ["provx"], "application/pskc+xml": ["pskcxml"], "application/raml+yaml": ["raml"], "application/rdf+xml": ["rdf", "owl"], "application/reginfo+xml": ["rif"], "application/relax-ng-compact-syntax": ["rnc"], "application/resource-lists+xml": ["rl"], "application/resource-lists-diff+xml": ["rld"], "application/rls-services+xml": ["rs"], "application/route-apd+xml": ["rapd"], "application/route-s-tsid+xml": ["sls"], "application/route-usd+xml": ["rusd"], "application/rpki-ghostbusters": ["gbr"], "application/rpki-manifest": ["mft"], "application/rpki-roa": ["roa"], "application/rsd+xml": ["rsd"], "application/rss+xml": ["rss"], "application/rtf": ["rtf"], "application/sbml+xml": ["sbml"], "application/scvp-cv-request": ["scq"], "application/scvp-cv-response": ["scs"], "application/scvp-vp-request": ["spq"], "application/scvp-vp-response": ["spp"], "application/sdp": ["sdp"], "application/senml+xml": ["senmlx"], "application/sensml+xml": ["sensmlx"], "application/set-payment-initiation": ["setpay"], "application/set-registration-initiation": ["setreg"], "application/shf+xml": ["shf"], "application/sieve": ["siv", "sieve"], "application/smil+xml": ["smi", "smil"], "application/sparql-query": ["rq"], "application/sparql-results+xml": ["srx"], "application/srgs": ["gram"], "application/srgs+xml": ["grxml"], "application/sru+xml": ["sru"], "application/ssdl+xml": ["ssdl"], "application/ssml+xml": ["ssml"], "application/swid+xml": ["swidtag"], "application/tei+xml": ["tei", "teicorpus"], "application/thraud+xml": ["tfi"], "application/timestamped-data": ["tsd"], "application/toml": ["toml"], "application/trig": ["trig"], "application/ttml+xml": ["ttml"], "application/ubjson": ["ubj"], "application/urc-ressheet+xml": ["rsheet"], "application/urc-targetdesc+xml": ["td"], "application/voicexml+xml": ["vxml"], "application/wasm": ["wasm"], "application/widget": ["wgt"], "application/winhlp": ["hlp"], "application/wsdl+xml": ["wsdl"], "application/wspolicy+xml": ["wspolicy"], "application/xaml+xml": ["xaml"], "application/xcap-att+xml": ["xav"], "application/xcap-caps+xml": ["xca"], "application/xcap-diff+xml": ["xdf"], "application/xcap-el+xml": ["xel"], "application/xcap-ns+xml": ["xns"], "application/xenc+xml": ["xenc"], "application/xhtml+xml": ["xhtml", "xht"], "application/xliff+xml": ["xlf"], "application/xml": ["xml", "xsl", "xsd", "rng"], "application/xml-dtd": ["dtd"], "application/xop+xml": ["xop"], "application/xproc+xml": ["xpl"], "application/xslt+xml": ["*xsl", "xslt"], "application/xspf+xml": ["xspf"], "application/xv+xml": ["mxml", "xhvml", "xvml", "xvm"], "application/yang": ["yang"], "application/yin+xml": ["yin"], "application/zip": ["zip"], "audio/3gpp": ["*3gpp"], "audio/adpcm": ["adp"], "audio/amr": ["amr"], "audio/basic": ["au", "snd"], "audio/midi": ["mid", "midi", "kar", "rmi"], "audio/mobile-xmf": ["mxmf"], "audio/mp3": ["*mp3"], "audio/mp4": ["m4a", "mp4a"], "audio/mpeg": ["mpga", "mp2", "mp2a", "mp3", "m2a", "m3a"], "audio/ogg": ["oga", "ogg", "spx", "opus"], "audio/s3m": ["s3m"], "audio/silk": ["sil"], "audio/wav": ["wav"], "audio/wave": ["*wav"], "audio/webm": ["weba"], "audio/xm": ["xm"], "font/collection": ["ttc"], "font/otf": ["otf"], "font/ttf": ["ttf"], "font/woff": ["woff"], "font/woff2": ["woff2"], "image/aces": ["exr"], "image/apng": ["apng"], "image/avif": ["avif"], "image/bmp": ["bmp"], "image/cgm": ["cgm"], "image/dicom-rle": ["drle"], "image/emf": ["emf"], "image/fits": ["fits"], "image/g3fax": ["g3"], "image/gif": ["gif"], "image/heic": ["heic"], "image/heic-sequence": ["heics"], "image/heif": ["heif"], "image/heif-sequence": ["heifs"], "image/hej2k": ["hej2"], "image/hsj2": ["hsj2"], "image/ief": ["ief"], "image/jls": ["jls"], "image/jp2": ["jp2", "jpg2"], "image/jpeg": ["jpeg", "jpg", "jpe"], "image/jph": ["jph"], "image/jphc": ["jhc"], "image/jpm": ["jpm"], "image/jpx": ["jpx", "jpf"], "image/jxr": ["jxr"], "image/jxra": ["jxra"], "image/jxrs": ["jxrs"], "image/jxs": ["jxs"], "image/jxsc": ["jxsc"], "image/jxsi": ["jxsi"], "image/jxss": ["jxss"], "image/ktx": ["ktx"], "image/ktx2": ["ktx2"], "image/png": ["png"], "image/sgi": ["sgi"], "image/svg+xml": ["svg", "svgz"], "image/t38": ["t38"], "image/tiff": ["tif", "tiff"], "image/tiff-fx": ["tfx"], "image/webp": ["webp"], "image/wmf": ["wmf"], "message/disposition-notification": ["disposition-notification"], "message/global": ["u8msg"], "message/global-delivery-status": ["u8dsn"], "message/global-disposition-notification": ["u8mdn"], "message/global-headers": ["u8hdr"], "message/rfc822": ["eml", "mime"], "model/3mf": ["3mf"], "model/gltf+json": ["gltf"], "model/gltf-binary": ["glb"], "model/iges": ["igs", "iges"], "model/mesh": ["msh", "mesh", "silo"], "model/mtl": ["mtl"], "model/obj": ["obj"], "model/step+xml": ["stpx"], "model/step+zip": ["stpz"], "model/step-xml+zip": ["stpxz"], "model/stl": ["stl"], "model/vrml": ["wrl", "vrml"], "model/x3d+binary": ["*x3db", "x3dbz"], "model/x3d+fastinfoset": ["x3db"], "model/x3d+vrml": ["*x3dv", "x3dvz"], "model/x3d+xml": ["x3d", "x3dz"], "model/x3d-vrml": ["x3dv"], "text/cache-manifest": ["appcache", "manifest"], "text/calendar": ["ics", "ifb"], "text/coffeescript": ["coffee", "litcoffee"], "text/css": ["css"], "text/csv": ["csv"], "text/html": ["html", "htm", "shtml"], "text/jade": ["jade"], "text/jsx": ["jsx"], "text/less": ["less"], "text/markdown": ["markdown", "md"], "text/mathml": ["mml"], "text/mdx": ["mdx"], "text/n3": ["n3"], "text/plain": ["txt", "text", "conf", "def", "list", "log", "in", "ini"], "text/richtext": ["rtx"], "text/rtf": ["*rtf"], "text/sgml": ["sgml", "sgm"], "text/shex": ["shex"], "text/slim": ["slim", "slm"], "text/spdx": ["spdx"], "text/stylus": ["stylus", "styl"], "text/tab-separated-values": ["tsv"], "text/troff": ["t", "tr", "roff", "man", "me", "ms"], "text/turtle": ["ttl"], "text/uri-list": ["uri", "uris", "urls"], "text/vcard": ["vcard"], "text/vtt": ["vtt"], "text/xml": ["*xml"], "text/yaml": ["yaml", "yml"], "video/3gpp": ["3gp", "3gpp"], "video/3gpp2": ["3g2"], "video/h261": ["h261"], "video/h263": ["h263"], "video/h264": ["h264"], "video/iso.segment": ["m4s"], "video/jpeg": ["jpgv"], "video/jpm": ["*jpm", "jpgm"], "video/mj2": ["mj2", "mjp2"], "video/mp2t": ["ts"], "video/mp4": ["mp4", "mp4v", "mpg4"], "video/mpeg": ["mpeg", "mpg", "mpe", "m1v", "m2v"], "video/ogg": ["ogv"], "video/quicktime": ["qt", "mov"], "video/webm": ["webm"] };
  }
});

// ../../node_modules/@metaplex-foundation/js/node_modules/mime/types/other.js
var require_other = __commonJS({
  "../../node_modules/@metaplex-foundation/js/node_modules/mime/types/other.js"(exports, module) {
    module.exports = { "application/prs.cww": ["cww"], "application/vnd.1000minds.decision-model+xml": ["1km"], "application/vnd.3gpp.pic-bw-large": ["plb"], "application/vnd.3gpp.pic-bw-small": ["psb"], "application/vnd.3gpp.pic-bw-var": ["pvb"], "application/vnd.3gpp2.tcap": ["tcap"], "application/vnd.3m.post-it-notes": ["pwn"], "application/vnd.accpac.simply.aso": ["aso"], "application/vnd.accpac.simply.imp": ["imp"], "application/vnd.acucobol": ["acu"], "application/vnd.acucorp": ["atc", "acutc"], "application/vnd.adobe.air-application-installer-package+zip": ["air"], "application/vnd.adobe.formscentral.fcdt": ["fcdt"], "application/vnd.adobe.fxp": ["fxp", "fxpl"], "application/vnd.adobe.xdp+xml": ["xdp"], "application/vnd.adobe.xfdf": ["xfdf"], "application/vnd.ahead.space": ["ahead"], "application/vnd.airzip.filesecure.azf": ["azf"], "application/vnd.airzip.filesecure.azs": ["azs"], "application/vnd.amazon.ebook": ["azw"], "application/vnd.americandynamics.acc": ["acc"], "application/vnd.amiga.ami": ["ami"], "application/vnd.android.package-archive": ["apk"], "application/vnd.anser-web-certificate-issue-initiation": ["cii"], "application/vnd.anser-web-funds-transfer-initiation": ["fti"], "application/vnd.antix.game-component": ["atx"], "application/vnd.apple.installer+xml": ["mpkg"], "application/vnd.apple.keynote": ["key"], "application/vnd.apple.mpegurl": ["m3u8"], "application/vnd.apple.numbers": ["numbers"], "application/vnd.apple.pages": ["pages"], "application/vnd.apple.pkpass": ["pkpass"], "application/vnd.aristanetworks.swi": ["swi"], "application/vnd.astraea-software.iota": ["iota"], "application/vnd.audiograph": ["aep"], "application/vnd.balsamiq.bmml+xml": ["bmml"], "application/vnd.blueice.multipass": ["mpm"], "application/vnd.bmi": ["bmi"], "application/vnd.businessobjects": ["rep"], "application/vnd.chemdraw+xml": ["cdxml"], "application/vnd.chipnuts.karaoke-mmd": ["mmd"], "application/vnd.cinderella": ["cdy"], "application/vnd.citationstyles.style+xml": ["csl"], "application/vnd.claymore": ["cla"], "application/vnd.cloanto.rp9": ["rp9"], "application/vnd.clonk.c4group": ["c4g", "c4d", "c4f", "c4p", "c4u"], "application/vnd.cluetrust.cartomobile-config": ["c11amc"], "application/vnd.cluetrust.cartomobile-config-pkg": ["c11amz"], "application/vnd.commonspace": ["csp"], "application/vnd.contact.cmsg": ["cdbcmsg"], "application/vnd.cosmocaller": ["cmc"], "application/vnd.crick.clicker": ["clkx"], "application/vnd.crick.clicker.keyboard": ["clkk"], "application/vnd.crick.clicker.palette": ["clkp"], "application/vnd.crick.clicker.template": ["clkt"], "application/vnd.crick.clicker.wordbank": ["clkw"], "application/vnd.criticaltools.wbs+xml": ["wbs"], "application/vnd.ctc-posml": ["pml"], "application/vnd.cups-ppd": ["ppd"], "application/vnd.curl.car": ["car"], "application/vnd.curl.pcurl": ["pcurl"], "application/vnd.dart": ["dart"], "application/vnd.data-vision.rdz": ["rdz"], "application/vnd.dbf": ["dbf"], "application/vnd.dece.data": ["uvf", "uvvf", "uvd", "uvvd"], "application/vnd.dece.ttml+xml": ["uvt", "uvvt"], "application/vnd.dece.unspecified": ["uvx", "uvvx"], "application/vnd.dece.zip": ["uvz", "uvvz"], "application/vnd.denovo.fcselayout-link": ["fe_launch"], "application/vnd.dna": ["dna"], "application/vnd.dolby.mlp": ["mlp"], "application/vnd.dpgraph": ["dpg"], "application/vnd.dreamfactory": ["dfac"], "application/vnd.ds-keypoint": ["kpxx"], "application/vnd.dvb.ait": ["ait"], "application/vnd.dvb.service": ["svc"], "application/vnd.dynageo": ["geo"], "application/vnd.ecowin.chart": ["mag"], "application/vnd.enliven": ["nml"], "application/vnd.epson.esf": ["esf"], "application/vnd.epson.msf": ["msf"], "application/vnd.epson.quickanime": ["qam"], "application/vnd.epson.salt": ["slt"], "application/vnd.epson.ssf": ["ssf"], "application/vnd.eszigno3+xml": ["es3", "et3"], "application/vnd.ezpix-album": ["ez2"], "application/vnd.ezpix-package": ["ez3"], "application/vnd.fdf": ["fdf"], "application/vnd.fdsn.mseed": ["mseed"], "application/vnd.fdsn.seed": ["seed", "dataless"], "application/vnd.flographit": ["gph"], "application/vnd.fluxtime.clip": ["ftc"], "application/vnd.framemaker": ["fm", "frame", "maker", "book"], "application/vnd.frogans.fnc": ["fnc"], "application/vnd.frogans.ltf": ["ltf"], "application/vnd.fsc.weblaunch": ["fsc"], "application/vnd.fujitsu.oasys": ["oas"], "application/vnd.fujitsu.oasys2": ["oa2"], "application/vnd.fujitsu.oasys3": ["oa3"], "application/vnd.fujitsu.oasysgp": ["fg5"], "application/vnd.fujitsu.oasysprs": ["bh2"], "application/vnd.fujixerox.ddd": ["ddd"], "application/vnd.fujixerox.docuworks": ["xdw"], "application/vnd.fujixerox.docuworks.binder": ["xbd"], "application/vnd.fuzzysheet": ["fzs"], "application/vnd.genomatix.tuxedo": ["txd"], "application/vnd.geogebra.file": ["ggb"], "application/vnd.geogebra.tool": ["ggt"], "application/vnd.geometry-explorer": ["gex", "gre"], "application/vnd.geonext": ["gxt"], "application/vnd.geoplan": ["g2w"], "application/vnd.geospace": ["g3w"], "application/vnd.gmx": ["gmx"], "application/vnd.google-apps.document": ["gdoc"], "application/vnd.google-apps.presentation": ["gslides"], "application/vnd.google-apps.spreadsheet": ["gsheet"], "application/vnd.google-earth.kml+xml": ["kml"], "application/vnd.google-earth.kmz": ["kmz"], "application/vnd.grafeq": ["gqf", "gqs"], "application/vnd.groove-account": ["gac"], "application/vnd.groove-help": ["ghf"], "application/vnd.groove-identity-message": ["gim"], "application/vnd.groove-injector": ["grv"], "application/vnd.groove-tool-message": ["gtm"], "application/vnd.groove-tool-template": ["tpl"], "application/vnd.groove-vcard": ["vcg"], "application/vnd.hal+xml": ["hal"], "application/vnd.handheld-entertainment+xml": ["zmm"], "application/vnd.hbci": ["hbci"], "application/vnd.hhe.lesson-player": ["les"], "application/vnd.hp-hpgl": ["hpgl"], "application/vnd.hp-hpid": ["hpid"], "application/vnd.hp-hps": ["hps"], "application/vnd.hp-jlyt": ["jlt"], "application/vnd.hp-pcl": ["pcl"], "application/vnd.hp-pclxl": ["pclxl"], "application/vnd.hydrostatix.sof-data": ["sfd-hdstx"], "application/vnd.ibm.minipay": ["mpy"], "application/vnd.ibm.modcap": ["afp", "listafp", "list3820"], "application/vnd.ibm.rights-management": ["irm"], "application/vnd.ibm.secure-container": ["sc"], "application/vnd.iccprofile": ["icc", "icm"], "application/vnd.igloader": ["igl"], "application/vnd.immervision-ivp": ["ivp"], "application/vnd.immervision-ivu": ["ivu"], "application/vnd.insors.igm": ["igm"], "application/vnd.intercon.formnet": ["xpw", "xpx"], "application/vnd.intergeo": ["i2g"], "application/vnd.intu.qbo": ["qbo"], "application/vnd.intu.qfx": ["qfx"], "application/vnd.ipunplugged.rcprofile": ["rcprofile"], "application/vnd.irepository.package+xml": ["irp"], "application/vnd.is-xpr": ["xpr"], "application/vnd.isac.fcs": ["fcs"], "application/vnd.jam": ["jam"], "application/vnd.jcp.javame.midlet-rms": ["rms"], "application/vnd.jisp": ["jisp"], "application/vnd.joost.joda-archive": ["joda"], "application/vnd.kahootz": ["ktz", "ktr"], "application/vnd.kde.karbon": ["karbon"], "application/vnd.kde.kchart": ["chrt"], "application/vnd.kde.kformula": ["kfo"], "application/vnd.kde.kivio": ["flw"], "application/vnd.kde.kontour": ["kon"], "application/vnd.kde.kpresenter": ["kpr", "kpt"], "application/vnd.kde.kspread": ["ksp"], "application/vnd.kde.kword": ["kwd", "kwt"], "application/vnd.kenameaapp": ["htke"], "application/vnd.kidspiration": ["kia"], "application/vnd.kinar": ["kne", "knp"], "application/vnd.koan": ["skp", "skd", "skt", "skm"], "application/vnd.kodak-descriptor": ["sse"], "application/vnd.las.las+xml": ["lasxml"], "application/vnd.llamagraphics.life-balance.desktop": ["lbd"], "application/vnd.llamagraphics.life-balance.exchange+xml": ["lbe"], "application/vnd.lotus-1-2-3": ["123"], "application/vnd.lotus-approach": ["apr"], "application/vnd.lotus-freelance": ["pre"], "application/vnd.lotus-notes": ["nsf"], "application/vnd.lotus-organizer": ["org"], "application/vnd.lotus-screencam": ["scm"], "application/vnd.lotus-wordpro": ["lwp"], "application/vnd.macports.portpkg": ["portpkg"], "application/vnd.mapbox-vector-tile": ["mvt"], "application/vnd.mcd": ["mcd"], "application/vnd.medcalcdata": ["mc1"], "application/vnd.mediastation.cdkey": ["cdkey"], "application/vnd.mfer": ["mwf"], "application/vnd.mfmp": ["mfm"], "application/vnd.micrografx.flo": ["flo"], "application/vnd.micrografx.igx": ["igx"], "application/vnd.mif": ["mif"], "application/vnd.mobius.daf": ["daf"], "application/vnd.mobius.dis": ["dis"], "application/vnd.mobius.mbk": ["mbk"], "application/vnd.mobius.mqy": ["mqy"], "application/vnd.mobius.msl": ["msl"], "application/vnd.mobius.plc": ["plc"], "application/vnd.mobius.txf": ["txf"], "application/vnd.mophun.application": ["mpn"], "application/vnd.mophun.certificate": ["mpc"], "application/vnd.mozilla.xul+xml": ["xul"], "application/vnd.ms-artgalry": ["cil"], "application/vnd.ms-cab-compressed": ["cab"], "application/vnd.ms-excel": ["xls", "xlm", "xla", "xlc", "xlt", "xlw"], "application/vnd.ms-excel.addin.macroenabled.12": ["xlam"], "application/vnd.ms-excel.sheet.binary.macroenabled.12": ["xlsb"], "application/vnd.ms-excel.sheet.macroenabled.12": ["xlsm"], "application/vnd.ms-excel.template.macroenabled.12": ["xltm"], "application/vnd.ms-fontobject": ["eot"], "application/vnd.ms-htmlhelp": ["chm"], "application/vnd.ms-ims": ["ims"], "application/vnd.ms-lrm": ["lrm"], "application/vnd.ms-officetheme": ["thmx"], "application/vnd.ms-outlook": ["msg"], "application/vnd.ms-pki.seccat": ["cat"], "application/vnd.ms-pki.stl": ["*stl"], "application/vnd.ms-powerpoint": ["ppt", "pps", "pot"], "application/vnd.ms-powerpoint.addin.macroenabled.12": ["ppam"], "application/vnd.ms-powerpoint.presentation.macroenabled.12": ["pptm"], "application/vnd.ms-powerpoint.slide.macroenabled.12": ["sldm"], "application/vnd.ms-powerpoint.slideshow.macroenabled.12": ["ppsm"], "application/vnd.ms-powerpoint.template.macroenabled.12": ["potm"], "application/vnd.ms-project": ["mpp", "mpt"], "application/vnd.ms-word.document.macroenabled.12": ["docm"], "application/vnd.ms-word.template.macroenabled.12": ["dotm"], "application/vnd.ms-works": ["wps", "wks", "wcm", "wdb"], "application/vnd.ms-wpl": ["wpl"], "application/vnd.ms-xpsdocument": ["xps"], "application/vnd.mseq": ["mseq"], "application/vnd.musician": ["mus"], "application/vnd.muvee.style": ["msty"], "application/vnd.mynfc": ["taglet"], "application/vnd.neurolanguage.nlu": ["nlu"], "application/vnd.nitf": ["ntf", "nitf"], "application/vnd.noblenet-directory": ["nnd"], "application/vnd.noblenet-sealer": ["nns"], "application/vnd.noblenet-web": ["nnw"], "application/vnd.nokia.n-gage.ac+xml": ["*ac"], "application/vnd.nokia.n-gage.data": ["ngdat"], "application/vnd.nokia.n-gage.symbian.install": ["n-gage"], "application/vnd.nokia.radio-preset": ["rpst"], "application/vnd.nokia.radio-presets": ["rpss"], "application/vnd.novadigm.edm": ["edm"], "application/vnd.novadigm.edx": ["edx"], "application/vnd.novadigm.ext": ["ext"], "application/vnd.oasis.opendocument.chart": ["odc"], "application/vnd.oasis.opendocument.chart-template": ["otc"], "application/vnd.oasis.opendocument.database": ["odb"], "application/vnd.oasis.opendocument.formula": ["odf"], "application/vnd.oasis.opendocument.formula-template": ["odft"], "application/vnd.oasis.opendocument.graphics": ["odg"], "application/vnd.oasis.opendocument.graphics-template": ["otg"], "application/vnd.oasis.opendocument.image": ["odi"], "application/vnd.oasis.opendocument.image-template": ["oti"], "application/vnd.oasis.opendocument.presentation": ["odp"], "application/vnd.oasis.opendocument.presentation-template": ["otp"], "application/vnd.oasis.opendocument.spreadsheet": ["ods"], "application/vnd.oasis.opendocument.spreadsheet-template": ["ots"], "application/vnd.oasis.opendocument.text": ["odt"], "application/vnd.oasis.opendocument.text-master": ["odm"], "application/vnd.oasis.opendocument.text-template": ["ott"], "application/vnd.oasis.opendocument.text-web": ["oth"], "application/vnd.olpc-sugar": ["xo"], "application/vnd.oma.dd2+xml": ["dd2"], "application/vnd.openblox.game+xml": ["obgx"], "application/vnd.openofficeorg.extension": ["oxt"], "application/vnd.openstreetmap.data+xml": ["osm"], "application/vnd.openxmlformats-officedocument.presentationml.presentation": ["pptx"], "application/vnd.openxmlformats-officedocument.presentationml.slide": ["sldx"], "application/vnd.openxmlformats-officedocument.presentationml.slideshow": ["ppsx"], "application/vnd.openxmlformats-officedocument.presentationml.template": ["potx"], "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet": ["xlsx"], "application/vnd.openxmlformats-officedocument.spreadsheetml.template": ["xltx"], "application/vnd.openxmlformats-officedocument.wordprocessingml.document": ["docx"], "application/vnd.openxmlformats-officedocument.wordprocessingml.template": ["dotx"], "application/vnd.osgeo.mapguide.package": ["mgp"], "application/vnd.osgi.dp": ["dp"], "application/vnd.osgi.subsystem": ["esa"], "application/vnd.palm": ["pdb", "pqa", "oprc"], "application/vnd.pawaafile": ["paw"], "application/vnd.pg.format": ["str"], "application/vnd.pg.osasli": ["ei6"], "application/vnd.picsel": ["efif"], "application/vnd.pmi.widget": ["wg"], "application/vnd.pocketlearn": ["plf"], "application/vnd.powerbuilder6": ["pbd"], "application/vnd.previewsystems.box": ["box"], "application/vnd.proteus.magazine": ["mgz"], "application/vnd.publishare-delta-tree": ["qps"], "application/vnd.pvi.ptid1": ["ptid"], "application/vnd.quark.quarkxpress": ["qxd", "qxt", "qwd", "qwt", "qxl", "qxb"], "application/vnd.rar": ["rar"], "application/vnd.realvnc.bed": ["bed"], "application/vnd.recordare.musicxml": ["mxl"], "application/vnd.recordare.musicxml+xml": ["musicxml"], "application/vnd.rig.cryptonote": ["cryptonote"], "application/vnd.rim.cod": ["cod"], "application/vnd.rn-realmedia": ["rm"], "application/vnd.rn-realmedia-vbr": ["rmvb"], "application/vnd.route66.link66+xml": ["link66"], "application/vnd.sailingtracker.track": ["st"], "application/vnd.seemail": ["see"], "application/vnd.sema": ["sema"], "application/vnd.semd": ["semd"], "application/vnd.semf": ["semf"], "application/vnd.shana.informed.formdata": ["ifm"], "application/vnd.shana.informed.formtemplate": ["itp"], "application/vnd.shana.informed.interchange": ["iif"], "application/vnd.shana.informed.package": ["ipk"], "application/vnd.simtech-mindmapper": ["twd", "twds"], "application/vnd.smaf": ["mmf"], "application/vnd.smart.teacher": ["teacher"], "application/vnd.software602.filler.form+xml": ["fo"], "application/vnd.solent.sdkm+xml": ["sdkm", "sdkd"], "application/vnd.spotfire.dxp": ["dxp"], "application/vnd.spotfire.sfs": ["sfs"], "application/vnd.stardivision.calc": ["sdc"], "application/vnd.stardivision.draw": ["sda"], "application/vnd.stardivision.impress": ["sdd"], "application/vnd.stardivision.math": ["smf"], "application/vnd.stardivision.writer": ["sdw", "vor"], "application/vnd.stardivision.writer-global": ["sgl"], "application/vnd.stepmania.package": ["smzip"], "application/vnd.stepmania.stepchart": ["sm"], "application/vnd.sun.wadl+xml": ["wadl"], "application/vnd.sun.xml.calc": ["sxc"], "application/vnd.sun.xml.calc.template": ["stc"], "application/vnd.sun.xml.draw": ["sxd"], "application/vnd.sun.xml.draw.template": ["std"], "application/vnd.sun.xml.impress": ["sxi"], "application/vnd.sun.xml.impress.template": ["sti"], "application/vnd.sun.xml.math": ["sxm"], "application/vnd.sun.xml.writer": ["sxw"], "application/vnd.sun.xml.writer.global": ["sxg"], "application/vnd.sun.xml.writer.template": ["stw"], "application/vnd.sus-calendar": ["sus", "susp"], "application/vnd.svd": ["svd"], "application/vnd.symbian.install": ["sis", "sisx"], "application/vnd.syncml+xml": ["xsm"], "application/vnd.syncml.dm+wbxml": ["bdm"], "application/vnd.syncml.dm+xml": ["xdm"], "application/vnd.syncml.dmddf+xml": ["ddf"], "application/vnd.tao.intent-module-archive": ["tao"], "application/vnd.tcpdump.pcap": ["pcap", "cap", "dmp"], "application/vnd.tmobile-livetv": ["tmo"], "application/vnd.trid.tpt": ["tpt"], "application/vnd.triscape.mxs": ["mxs"], "application/vnd.trueapp": ["tra"], "application/vnd.ufdl": ["ufd", "ufdl"], "application/vnd.uiq.theme": ["utz"], "application/vnd.umajin": ["umj"], "application/vnd.unity": ["unityweb"], "application/vnd.uoml+xml": ["uoml"], "application/vnd.vcx": ["vcx"], "application/vnd.visio": ["vsd", "vst", "vss", "vsw"], "application/vnd.visionary": ["vis"], "application/vnd.vsf": ["vsf"], "application/vnd.wap.wbxml": ["wbxml"], "application/vnd.wap.wmlc": ["wmlc"], "application/vnd.wap.wmlscriptc": ["wmlsc"], "application/vnd.webturbo": ["wtb"], "application/vnd.wolfram.player": ["nbp"], "application/vnd.wordperfect": ["wpd"], "application/vnd.wqd": ["wqd"], "application/vnd.wt.stf": ["stf"], "application/vnd.xara": ["xar"], "application/vnd.xfdl": ["xfdl"], "application/vnd.yamaha.hv-dic": ["hvd"], "application/vnd.yamaha.hv-script": ["hvs"], "application/vnd.yamaha.hv-voice": ["hvp"], "application/vnd.yamaha.openscoreformat": ["osf"], "application/vnd.yamaha.openscoreformat.osfpvg+xml": ["osfpvg"], "application/vnd.yamaha.smaf-audio": ["saf"], "application/vnd.yamaha.smaf-phrase": ["spf"], "application/vnd.yellowriver-custom-menu": ["cmp"], "application/vnd.zul": ["zir", "zirz"], "application/vnd.zzazz.deck+xml": ["zaz"], "application/x-7z-compressed": ["7z"], "application/x-abiword": ["abw"], "application/x-ace-compressed": ["ace"], "application/x-apple-diskimage": ["*dmg"], "application/x-arj": ["arj"], "application/x-authorware-bin": ["aab", "x32", "u32", "vox"], "application/x-authorware-map": ["aam"], "application/x-authorware-seg": ["aas"], "application/x-bcpio": ["bcpio"], "application/x-bdoc": ["*bdoc"], "application/x-bittorrent": ["torrent"], "application/x-blorb": ["blb", "blorb"], "application/x-bzip": ["bz"], "application/x-bzip2": ["bz2", "boz"], "application/x-cbr": ["cbr", "cba", "cbt", "cbz", "cb7"], "application/x-cdlink": ["vcd"], "application/x-cfs-compressed": ["cfs"], "application/x-chat": ["chat"], "application/x-chess-pgn": ["pgn"], "application/x-chrome-extension": ["crx"], "application/x-cocoa": ["cco"], "application/x-conference": ["nsc"], "application/x-cpio": ["cpio"], "application/x-csh": ["csh"], "application/x-debian-package": ["*deb", "udeb"], "application/x-dgc-compressed": ["dgc"], "application/x-director": ["dir", "dcr", "dxr", "cst", "cct", "cxt", "w3d", "fgd", "swa"], "application/x-doom": ["wad"], "application/x-dtbncx+xml": ["ncx"], "application/x-dtbook+xml": ["dtb"], "application/x-dtbresource+xml": ["res"], "application/x-dvi": ["dvi"], "application/x-envoy": ["evy"], "application/x-eva": ["eva"], "application/x-font-bdf": ["bdf"], "application/x-font-ghostscript": ["gsf"], "application/x-font-linux-psf": ["psf"], "application/x-font-pcf": ["pcf"], "application/x-font-snf": ["snf"], "application/x-font-type1": ["pfa", "pfb", "pfm", "afm"], "application/x-freearc": ["arc"], "application/x-futuresplash": ["spl"], "application/x-gca-compressed": ["gca"], "application/x-glulx": ["ulx"], "application/x-gnumeric": ["gnumeric"], "application/x-gramps-xml": ["gramps"], "application/x-gtar": ["gtar"], "application/x-hdf": ["hdf"], "application/x-httpd-php": ["php"], "application/x-install-instructions": ["install"], "application/x-iso9660-image": ["*iso"], "application/x-iwork-keynote-sffkey": ["*key"], "application/x-iwork-numbers-sffnumbers": ["*numbers"], "application/x-iwork-pages-sffpages": ["*pages"], "application/x-java-archive-diff": ["jardiff"], "application/x-java-jnlp-file": ["jnlp"], "application/x-keepass2": ["kdbx"], "application/x-latex": ["latex"], "application/x-lua-bytecode": ["luac"], "application/x-lzh-compressed": ["lzh", "lha"], "application/x-makeself": ["run"], "application/x-mie": ["mie"], "application/x-mobipocket-ebook": ["prc", "mobi"], "application/x-ms-application": ["application"], "application/x-ms-shortcut": ["lnk"], "application/x-ms-wmd": ["wmd"], "application/x-ms-wmz": ["wmz"], "application/x-ms-xbap": ["xbap"], "application/x-msaccess": ["mdb"], "application/x-msbinder": ["obd"], "application/x-mscardfile": ["crd"], "application/x-msclip": ["clp"], "application/x-msdos-program": ["*exe"], "application/x-msdownload": ["*exe", "*dll", "com", "bat", "*msi"], "application/x-msmediaview": ["mvb", "m13", "m14"], "application/x-msmetafile": ["*wmf", "*wmz", "*emf", "emz"], "application/x-msmoney": ["mny"], "application/x-mspublisher": ["pub"], "application/x-msschedule": ["scd"], "application/x-msterminal": ["trm"], "application/x-mswrite": ["wri"], "application/x-netcdf": ["nc", "cdf"], "application/x-ns-proxy-autoconfig": ["pac"], "application/x-nzb": ["nzb"], "application/x-perl": ["pl", "pm"], "application/x-pilot": ["*prc", "*pdb"], "application/x-pkcs12": ["p12", "pfx"], "application/x-pkcs7-certificates": ["p7b", "spc"], "application/x-pkcs7-certreqresp": ["p7r"], "application/x-rar-compressed": ["*rar"], "application/x-redhat-package-manager": ["rpm"], "application/x-research-info-systems": ["ris"], "application/x-sea": ["sea"], "application/x-sh": ["sh"], "application/x-shar": ["shar"], "application/x-shockwave-flash": ["swf"], "application/x-silverlight-app": ["xap"], "application/x-sql": ["sql"], "application/x-stuffit": ["sit"], "application/x-stuffitx": ["sitx"], "application/x-subrip": ["srt"], "application/x-sv4cpio": ["sv4cpio"], "application/x-sv4crc": ["sv4crc"], "application/x-t3vm-image": ["t3"], "application/x-tads": ["gam"], "application/x-tar": ["tar"], "application/x-tcl": ["tcl", "tk"], "application/x-tex": ["tex"], "application/x-tex-tfm": ["tfm"], "application/x-texinfo": ["texinfo", "texi"], "application/x-tgif": ["*obj"], "application/x-ustar": ["ustar"], "application/x-virtualbox-hdd": ["hdd"], "application/x-virtualbox-ova": ["ova"], "application/x-virtualbox-ovf": ["ovf"], "application/x-virtualbox-vbox": ["vbox"], "application/x-virtualbox-vbox-extpack": ["vbox-extpack"], "application/x-virtualbox-vdi": ["vdi"], "application/x-virtualbox-vhd": ["vhd"], "application/x-virtualbox-vmdk": ["vmdk"], "application/x-wais-source": ["src"], "application/x-web-app-manifest+json": ["webapp"], "application/x-x509-ca-cert": ["der", "crt", "pem"], "application/x-xfig": ["fig"], "application/x-xliff+xml": ["*xlf"], "application/x-xpinstall": ["xpi"], "application/x-xz": ["xz"], "application/x-zmachine": ["z1", "z2", "z3", "z4", "z5", "z6", "z7", "z8"], "audio/vnd.dece.audio": ["uva", "uvva"], "audio/vnd.digital-winds": ["eol"], "audio/vnd.dra": ["dra"], "audio/vnd.dts": ["dts"], "audio/vnd.dts.hd": ["dtshd"], "audio/vnd.lucent.voice": ["lvp"], "audio/vnd.ms-playready.media.pya": ["pya"], "audio/vnd.nuera.ecelp4800": ["ecelp4800"], "audio/vnd.nuera.ecelp7470": ["ecelp7470"], "audio/vnd.nuera.ecelp9600": ["ecelp9600"], "audio/vnd.rip": ["rip"], "audio/x-aac": ["aac"], "audio/x-aiff": ["aif", "aiff", "aifc"], "audio/x-caf": ["caf"], "audio/x-flac": ["flac"], "audio/x-m4a": ["*m4a"], "audio/x-matroska": ["mka"], "audio/x-mpegurl": ["m3u"], "audio/x-ms-wax": ["wax"], "audio/x-ms-wma": ["wma"], "audio/x-pn-realaudio": ["ram", "ra"], "audio/x-pn-realaudio-plugin": ["rmp"], "audio/x-realaudio": ["*ra"], "audio/x-wav": ["*wav"], "chemical/x-cdx": ["cdx"], "chemical/x-cif": ["cif"], "chemical/x-cmdf": ["cmdf"], "chemical/x-cml": ["cml"], "chemical/x-csml": ["csml"], "chemical/x-xyz": ["xyz"], "image/prs.btif": ["btif"], "image/prs.pti": ["pti"], "image/vnd.adobe.photoshop": ["psd"], "image/vnd.airzip.accelerator.azv": ["azv"], "image/vnd.dece.graphic": ["uvi", "uvvi", "uvg", "uvvg"], "image/vnd.djvu": ["djvu", "djv"], "image/vnd.dvb.subtitle": ["*sub"], "image/vnd.dwg": ["dwg"], "image/vnd.dxf": ["dxf"], "image/vnd.fastbidsheet": ["fbs"], "image/vnd.fpx": ["fpx"], "image/vnd.fst": ["fst"], "image/vnd.fujixerox.edmics-mmr": ["mmr"], "image/vnd.fujixerox.edmics-rlc": ["rlc"], "image/vnd.microsoft.icon": ["ico"], "image/vnd.ms-dds": ["dds"], "image/vnd.ms-modi": ["mdi"], "image/vnd.ms-photo": ["wdp"], "image/vnd.net-fpx": ["npx"], "image/vnd.pco.b16": ["b16"], "image/vnd.tencent.tap": ["tap"], "image/vnd.valve.source.texture": ["vtf"], "image/vnd.wap.wbmp": ["wbmp"], "image/vnd.xiff": ["xif"], "image/vnd.zbrush.pcx": ["pcx"], "image/x-3ds": ["3ds"], "image/x-cmu-raster": ["ras"], "image/x-cmx": ["cmx"], "image/x-freehand": ["fh", "fhc", "fh4", "fh5", "fh7"], "image/x-icon": ["*ico"], "image/x-jng": ["jng"], "image/x-mrsid-image": ["sid"], "image/x-ms-bmp": ["*bmp"], "image/x-pcx": ["*pcx"], "image/x-pict": ["pic", "pct"], "image/x-portable-anymap": ["pnm"], "image/x-portable-bitmap": ["pbm"], "image/x-portable-graymap": ["pgm"], "image/x-portable-pixmap": ["ppm"], "image/x-rgb": ["rgb"], "image/x-tga": ["tga"], "image/x-xbitmap": ["xbm"], "image/x-xpixmap": ["xpm"], "image/x-xwindowdump": ["xwd"], "message/vnd.wfa.wsc": ["wsc"], "model/vnd.collada+xml": ["dae"], "model/vnd.dwf": ["dwf"], "model/vnd.gdl": ["gdl"], "model/vnd.gtw": ["gtw"], "model/vnd.mts": ["mts"], "model/vnd.opengex": ["ogex"], "model/vnd.parasolid.transmit.binary": ["x_b"], "model/vnd.parasolid.transmit.text": ["x_t"], "model/vnd.sap.vds": ["vds"], "model/vnd.usdz+zip": ["usdz"], "model/vnd.valve.source.compiled-map": ["bsp"], "model/vnd.vtu": ["vtu"], "text/prs.lines.tag": ["dsc"], "text/vnd.curl": ["curl"], "text/vnd.curl.dcurl": ["dcurl"], "text/vnd.curl.mcurl": ["mcurl"], "text/vnd.curl.scurl": ["scurl"], "text/vnd.dvb.subtitle": ["sub"], "text/vnd.fly": ["fly"], "text/vnd.fmi.flexstor": ["flx"], "text/vnd.graphviz": ["gv"], "text/vnd.in3d.3dml": ["3dml"], "text/vnd.in3d.spot": ["spot"], "text/vnd.sun.j2me.app-descriptor": ["jad"], "text/vnd.wap.wml": ["wml"], "text/vnd.wap.wmlscript": ["wmls"], "text/x-asm": ["s", "asm"], "text/x-c": ["c", "cc", "cxx", "cpp", "h", "hh", "dic"], "text/x-component": ["htc"], "text/x-fortran": ["f", "for", "f77", "f90"], "text/x-handlebars-template": ["hbs"], "text/x-java-source": ["java"], "text/x-lua": ["lua"], "text/x-markdown": ["mkd"], "text/x-nfo": ["nfo"], "text/x-opml": ["opml"], "text/x-org": ["*org"], "text/x-pascal": ["p", "pas"], "text/x-processing": ["pde"], "text/x-sass": ["sass"], "text/x-scss": ["scss"], "text/x-setext": ["etx"], "text/x-sfv": ["sfv"], "text/x-suse-ymp": ["ymp"], "text/x-uuencode": ["uu"], "text/x-vcalendar": ["vcs"], "text/x-vcard": ["vcf"], "video/vnd.dece.hd": ["uvh", "uvvh"], "video/vnd.dece.mobile": ["uvm", "uvvm"], "video/vnd.dece.pd": ["uvp", "uvvp"], "video/vnd.dece.sd": ["uvs", "uvvs"], "video/vnd.dece.video": ["uvv", "uvvv"], "video/vnd.dvb.file": ["dvb"], "video/vnd.fvt": ["fvt"], "video/vnd.mpegurl": ["mxu", "m4u"], "video/vnd.ms-playready.media.pyv": ["pyv"], "video/vnd.uvvu.mp4": ["uvu", "uvvu"], "video/vnd.vivo": ["viv"], "video/x-f4v": ["f4v"], "video/x-fli": ["fli"], "video/x-flv": ["flv"], "video/x-m4v": ["m4v"], "video/x-matroska": ["mkv", "mk3d", "mks"], "video/x-mng": ["mng"], "video/x-ms-asf": ["asf", "asx"], "video/x-ms-vob": ["vob"], "video/x-ms-wm": ["wm"], "video/x-ms-wmv": ["wmv"], "video/x-ms-wmx": ["wmx"], "video/x-ms-wvx": ["wvx"], "video/x-msvideo": ["avi"], "video/x-sgi-movie": ["movie"], "video/x-smv": ["smv"], "x-conference/x-cooltalk": ["ice"] };
  }
});

// ../../node_modules/@metaplex-foundation/js/node_modules/mime/index.js
var require_mime = __commonJS({
  "../../node_modules/@metaplex-foundation/js/node_modules/mime/index.js"(exports, module) {
    "use strict";
    var Mime = require_Mime();
    module.exports = new Mime(require_standard(), require_other());
  }
});

// ../../node_modules/@metaplex-foundation/cusper/dist/src/parse-error.js
var require_parse_error = __commonJS({
  "../../node_modules/@metaplex-foundation/cusper/dist/src/parse-error.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.errorCodeFromLogs = void 0;
    var errorLineRx = /Custom program error: (0x[a-f0-9]+)/i;
    function errorCodeFromLogs(logs) {
      for (const line of logs) {
        const match = line.match(errorLineRx);
        if (match == null)
          continue;
        const hexCode = match[1];
        try {
          return parseInt(hexCode);
        } catch (_) {
        }
      }
      return null;
    }
    exports.errorCodeFromLogs = errorCodeFromLogs;
  }
});

// ../../node_modules/@metaplex-foundation/cusper/dist/src/errors/anchor.js
var require_anchor = __commonJS({
  "../../node_modules/@metaplex-foundation/cusper/dist/src/errors/anchor.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.LangErrorMessage = exports.LangErrorCode = void 0;
    exports.LangErrorCode = {
      // Instructions.
      InstructionMissing: 100,
      InstructionFallbackNotFound: 101,
      InstructionDidNotDeserialize: 102,
      InstructionDidNotSerialize: 103,
      // IDL instructions.
      IdlInstructionStub: 1e3,
      IdlInstructionInvalidProgram: 1001,
      // Constraints.
      ConstraintMut: 2e3,
      ConstraintHasOne: 2001,
      ConstraintSigner: 2002,
      ConstraintRaw: 2003,
      ConstraintOwner: 2004,
      ConstraintRentExempt: 2005,
      ConstraintSeeds: 2006,
      ConstraintExecutable: 2007,
      ConstraintState: 2008,
      ConstraintAssociated: 2009,
      ConstraintAssociatedInit: 2010,
      ConstraintClose: 2011,
      ConstraintAddress: 2012,
      ConstraintZero: 2013,
      ConstraintTokenMint: 2014,
      ConstraintTokenOwner: 2015,
      ConstraintMintMintAuthority: 2016,
      ConstraintMintFreezeAuthority: 2017,
      ConstraintMintDecimals: 2018,
      ConstraintSpace: 2019,
      // Accounts.
      AccountDiscriminatorAlreadySet: 3e3,
      AccountDiscriminatorNotFound: 3001,
      AccountDiscriminatorMismatch: 3002,
      AccountDidNotDeserialize: 3003,
      AccountDidNotSerialize: 3004,
      AccountNotEnoughKeys: 3005,
      AccountNotMutable: 3006,
      AccountOwnedByWrongProgram: 3007,
      InvalidProgramId: 3008,
      InvalidProgramExecutable: 3009,
      AccountNotSigner: 3010,
      AccountNotSystemOwned: 3011,
      AccountNotInitialized: 3012,
      AccountNotProgramData: 3013,
      // State.
      StateInvalidAddress: 4e3,
      // Used for APIs that shouldn't be used anymore.
      Deprecated: 5e3
    };
    exports.LangErrorMessage = /* @__PURE__ */ new Map([
      // Instructions.
      [
        exports.LangErrorCode.InstructionMissing,
        "8 byte instruction identifier not provided"
      ],
      [
        exports.LangErrorCode.InstructionFallbackNotFound,
        "Fallback functions are not supported"
      ],
      [
        exports.LangErrorCode.InstructionDidNotDeserialize,
        "The program could not deserialize the given instruction"
      ],
      [
        exports.LangErrorCode.InstructionDidNotSerialize,
        "The program could not serialize the given instruction"
      ],
      // Idl instructions.
      [
        exports.LangErrorCode.IdlInstructionStub,
        "The program was compiled without idl instructions"
      ],
      [
        exports.LangErrorCode.IdlInstructionInvalidProgram,
        "The transaction was given an invalid program for the IDL instruction"
      ],
      // Constraints.
      [exports.LangErrorCode.ConstraintMut, "A mut constraint was violated"],
      [exports.LangErrorCode.ConstraintHasOne, "A has_one constraint was violated"],
      [exports.LangErrorCode.ConstraintSigner, "A signer constraint was violated"],
      [exports.LangErrorCode.ConstraintRaw, "A raw constraint was violated"],
      [exports.LangErrorCode.ConstraintOwner, "An owner constraint was violated"],
      [exports.LangErrorCode.ConstraintRentExempt, "A rent exempt constraint was violated"],
      [exports.LangErrorCode.ConstraintSeeds, "A seeds constraint was violated"],
      [exports.LangErrorCode.ConstraintExecutable, "An executable constraint was violated"],
      [exports.LangErrorCode.ConstraintState, "A state constraint was violated"],
      [exports.LangErrorCode.ConstraintAssociated, "An associated constraint was violated"],
      [
        exports.LangErrorCode.ConstraintAssociatedInit,
        "An associated init constraint was violated"
      ],
      [exports.LangErrorCode.ConstraintClose, "A close constraint was violated"],
      [exports.LangErrorCode.ConstraintAddress, "An address constraint was violated"],
      [exports.LangErrorCode.ConstraintZero, "Expected zero account discriminant"],
      [exports.LangErrorCode.ConstraintTokenMint, "A token mint constraint was violated"],
      [exports.LangErrorCode.ConstraintTokenOwner, "A token owner constraint was violated"],
      [
        exports.LangErrorCode.ConstraintMintMintAuthority,
        "A mint mint authority constraint was violated"
      ],
      [
        exports.LangErrorCode.ConstraintMintFreezeAuthority,
        "A mint freeze authority constraint was violated"
      ],
      [
        exports.LangErrorCode.ConstraintMintDecimals,
        "A mint decimals constraint was violated"
      ],
      [exports.LangErrorCode.ConstraintSpace, "A space constraint was violated"],
      // Accounts.
      [
        exports.LangErrorCode.AccountDiscriminatorAlreadySet,
        "The account discriminator was already set on this account"
      ],
      [
        exports.LangErrorCode.AccountDiscriminatorNotFound,
        "No 8 byte discriminator was found on the account"
      ],
      [
        exports.LangErrorCode.AccountDiscriminatorMismatch,
        "8 byte discriminator did not match what was expected"
      ],
      [exports.LangErrorCode.AccountDidNotDeserialize, "Failed to deserialize the account"],
      [exports.LangErrorCode.AccountDidNotSerialize, "Failed to serialize the account"],
      [
        exports.LangErrorCode.AccountNotEnoughKeys,
        "Not enough account keys given to the instruction"
      ],
      [exports.LangErrorCode.AccountNotMutable, "The given account is not mutable"],
      [
        exports.LangErrorCode.AccountOwnedByWrongProgram,
        "The given account is owned by a different program than expected"
      ],
      [exports.LangErrorCode.InvalidProgramId, "Program ID was not as expected"],
      [exports.LangErrorCode.InvalidProgramExecutable, "Program account is not executable"],
      [exports.LangErrorCode.AccountNotSigner, "The given account did not sign"],
      [
        exports.LangErrorCode.AccountNotSystemOwned,
        "The given account is not owned by the system program"
      ],
      [
        exports.LangErrorCode.AccountNotInitialized,
        "The program expected this account to be already initialized"
      ],
      [
        exports.LangErrorCode.AccountNotProgramData,
        "The given account is not a program data account"
      ],
      // State.
      [
        exports.LangErrorCode.StateInvalidAddress,
        "The given state account does not have the correct address"
      ],
      // Misc.
      [
        exports.LangErrorCode.Deprecated,
        "The API being used is deprecated and should no longer be used"
      ]
    ]);
  }
});

// ../../node_modules/@metaplex-foundation/cusper/dist/src/errors/token-lending.js
var require_token_lending = __commonJS({
  "../../node_modules/@metaplex-foundation/cusper/dist/src/errors/token-lending.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.tokenLendingErrors = void 0;
    exports.tokenLendingErrors = /* @__PURE__ */ new Map([
      [
        0,
        {
          code: 0,
          message: 'Failed to unpack instruction data"',
          name: "InstructionUnpackError"
        }
      ],
      [
        1,
        {
          code: 1,
          message: 'Account is already initialized"',
          name: "AlreadyInitialized"
        }
      ],
      [
        2,
        {
          code: 2,
          message: 'Lamport balance below rent-exempt threshold"',
          name: "NotRentExempt"
        }
      ],
      [
        3,
        {
          code: 3,
          message: 'Market authority is invalid"',
          name: "InvalidMarketAuthority"
        }
      ],
      [
        4,
        {
          code: 4,
          message: 'Market owner is invalid"',
          name: "InvalidMarketOwner"
        }
      ],
      [
        5,
        {
          code: 5,
          message: 'Input account owner is not the program address"',
          name: "InvalidAccountOwner"
        }
      ],
      [
        6,
        {
          code: 6,
          message: 'Input token account is not owned by the correct token program id"',
          name: "InvalidTokenOwner"
        }
      ],
      [
        7,
        {
          code: 7,
          message: 'Input token account is not valid"',
          name: "InvalidTokenAccount"
        }
      ],
      [
        8,
        {
          code: 8,
          message: 'Input token mint account is not valid"',
          name: "InvalidTokenMint"
        }
      ],
      [
        9,
        {
          code: 9,
          message: 'Input token program account is not valid"',
          name: "InvalidTokenProgram"
        }
      ],
      [
        10,
        {
          code: 10,
          message: 'Input amount is invalid"',
          name: "InvalidAmount"
        }
      ],
      [
        11,
        {
          code: 11,
          message: 'Input config value is invalid"',
          name: "InvalidConfig"
        }
      ],
      [
        12,
        {
          code: 12,
          message: 'Input account must be a signer"',
          name: "InvalidSigner"
        }
      ],
      [
        13,
        {
          code: 13,
          message: 'Invalid account input"',
          name: "InvalidAccountInput"
        }
      ],
      [
        14,
        {
          code: 14,
          message: 'Math operation overflow"',
          name: "MathOverflow"
        }
      ],
      [
        15,
        {
          code: 15,
          message: 'Token initialize mint failed"',
          name: "TokenInitializeMintFailed"
        }
      ],
      [
        16,
        {
          code: 16,
          message: 'Token initialize account failed"',
          name: "TokenInitializeAccountFailed"
        }
      ],
      [
        17,
        {
          code: 17,
          message: 'Token transfer failed"',
          name: "TokenTransferFailed"
        }
      ],
      [
        18,
        {
          code: 18,
          message: 'Token mint to failed"',
          name: "TokenMintToFailed"
        }
      ],
      [
        19,
        {
          code: 19,
          message: 'Token burn failed"',
          name: "TokenBurnFailed"
        }
      ],
      [
        20,
        {
          code: 20,
          message: 'Insufficient liquidity available"',
          name: "InsufficientLiquidity"
        }
      ],
      [
        21,
        {
          code: 21,
          message: 'Input reserve has collateral disabled"',
          name: "ReserveCollateralDisabled"
        }
      ],
      [
        22,
        {
          code: 22,
          message: 'Reserve state needs to be refreshed"',
          name: "ReserveStale"
        }
      ],
      [
        23,
        {
          code: 23,
          message: 'Withdraw amount too small"',
          name: "WithdrawTooSmall"
        }
      ],
      [
        24,
        {
          code: 24,
          message: 'Withdraw amount too large"',
          name: "WithdrawTooLarge"
        }
      ],
      [
        25,
        {
          code: 25,
          message: 'Borrow amount too small to receive liquidity after fees"',
          name: "BorrowTooSmall"
        }
      ],
      [
        26,
        {
          code: 26,
          message: 'Borrow amount too large for deposited collateral"',
          name: "BorrowTooLarge"
        }
      ],
      [
        27,
        {
          code: 27,
          message: 'Repay amount too small to transfer liquidity"',
          name: "RepayTooSmall"
        }
      ],
      [
        28,
        {
          code: 28,
          message: 'Liquidation amount too small to receive collateral"',
          name: "LiquidationTooSmall"
        }
      ],
      [
        29,
        {
          code: 29,
          message: 'Cannot liquidate healthy obligations"',
          name: "ObligationHealthy"
        }
      ],
      [
        30,
        {
          code: 30,
          message: 'Obligation state needs to be refreshed"',
          name: "ObligationStale"
        }
      ],
      [
        31,
        {
          code: 31,
          message: 'Obligation reserve limit exceeded"',
          name: "ObligationReserveLimit"
        }
      ],
      [
        32,
        {
          code: 32,
          message: 'Obligation owner is invalid"',
          name: "InvalidObligationOwner"
        }
      ],
      [
        33,
        {
          code: 33,
          message: 'Obligation deposits are empty"',
          name: "ObligationDepositsEmpty"
        }
      ],
      [
        34,
        {
          code: 34,
          message: 'Obligation borrows are empty"',
          name: "ObligationBorrowsEmpty"
        }
      ],
      [
        35,
        {
          code: 35,
          message: 'Obligation deposits have zero value"',
          name: "ObligationDepositsZero"
        }
      ],
      [
        36,
        {
          code: 36,
          message: 'Obligation borrows have zero value"',
          name: "ObligationBorrowsZero"
        }
      ],
      [
        37,
        {
          code: 37,
          message: 'Invalid obligation collateral"',
          name: "InvalidObligationCollateral"
        }
      ],
      [
        38,
        {
          code: 38,
          message: 'Invalid obligation liquidity"',
          name: "InvalidObligationLiquidity"
        }
      ],
      [
        39,
        {
          code: 39,
          message: 'Obligation collateral is empty"',
          name: "ObligationCollateralEmpty"
        }
      ],
      [
        40,
        {
          code: 40,
          message: 'Obligation liquidity is empty"',
          name: "ObligationLiquidityEmpty"
        }
      ],
      [
        41,
        {
          code: 41,
          message: 'Interest rate is negative"',
          name: "NegativeInterestRate"
        }
      ],
      [
        42,
        {
          code: 42,
          message: 'Input oracle config is invalid"',
          name: "InvalidOracleConfig"
        }
      ],
      [
        43,
        {
          code: 43,
          message: 'Input flash loan receiver program account is not valid"',
          name: "InvalidFlashLoanReceiverProgram"
        }
      ],
      [
        44,
        {
          code: 44,
          message: 'Not enough liquidity after flash loan"',
          name: "NotEnoughLiquidityAfterFlashLoan"
        }
      ]
    ]);
  }
});

// ../../node_modules/@metaplex-foundation/cusper/dist/src/resolve-error.js
var require_resolve_error = __commonJS({
  "../../node_modules/@metaplex-foundation/cusper/dist/src/resolve-error.js"(exports) {
    "use strict";
    var __createBinding = exports && exports.__createBinding || (Object.create ? function(o2, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      Object.defineProperty(o2, k2, { enumerable: true, get: function() {
        return m[k];
      } });
    } : function(o2, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      o2[k2] = m[k];
    });
    var __setModuleDefault = exports && exports.__setModuleDefault || (Object.create ? function(o2, v) {
      Object.defineProperty(o2, "default", { enumerable: true, value: v });
    } : function(o2, v) {
      o2["default"] = v;
    });
    var __importStar = exports && exports.__importStar || function(mod) {
      if (mod && mod.__esModule)
        return mod;
      var result = {};
      if (mod != null) {
        for (var k in mod)
          if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k))
            __createBinding(result, mod, k);
      }
      __setModuleDefault(result, mod);
      return result;
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.TokenLendingError = exports.AnchorError = exports.CustomProgramError = exports.CusperUnknownError = exports.initCusper = exports.ErrorResolver = void 0;
    var parse_error_1 = require_parse_error();
    var anchor = __importStar(require_anchor());
    var token_lending_1 = require_token_lending();
    var ErrorResolver = class {
      constructor(resolveErrorFromCode) {
        this.resolveErrorFromCode = resolveErrorFromCode;
      }
      /**
       * Attempts to resolve the provided error code to a known or custom error.
       *
       * @param captureBoundaryFn is used to exclude everything after (including)
       * that function from the stack trace if possible
       * @param fallbackToUnknown unless `false` a {@link CusperUnknownError} is
       * returned when resolution fails
       */
      errorFromCode(code2, captureBoundaryFn, fallbackToUnknown = true) {
        let err = this.resolveErrorFromCode != null ? this.resolveErrorFromCode(code2) : null;
        if (err != null) {
          return this.passPreparedError(err, captureBoundaryFn !== null && captureBoundaryFn !== void 0 ? captureBoundaryFn : this.errorFromCode);
        }
        err = AnchorError.fromCode(code2);
        if (err != null) {
          return this.passPreparedError(err, captureBoundaryFn !== null && captureBoundaryFn !== void 0 ? captureBoundaryFn : this.errorFromCode);
        }
        err = TokenLendingError.fromCode(code2);
        if (err != null) {
          return this.passPreparedError(err, captureBoundaryFn !== null && captureBoundaryFn !== void 0 ? captureBoundaryFn : this.errorFromCode);
        }
        if (fallbackToUnknown) {
          err = new CusperUnknownError(code2, "CusperUnknownError", "cusper does not know this error");
          return this.passPreparedError(err, captureBoundaryFn !== null && captureBoundaryFn !== void 0 ? captureBoundaryFn : this.errorFromCode);
        }
      }
      /**
       * Attempts to parse the error code from the provied logs and then resolve it
       * to a known or custom error.
       * @param fallbackToUnknown unless `false` a {@link CusperUnknownError} is
       * returned when resolution fails
       */
      errorFromProgramLogs(logs, fallbackToUnknown = true) {
        const code2 = (0, parse_error_1.errorCodeFromLogs)(logs);
        return code2 == null ? null : this.errorFromCode(code2, this.errorFromProgramLogs, fallbackToUnknown);
      }
      /**
       * Throws an error that it attempts to resolve from the logs of the provided error.
       * If no error can be resolved it throws a {@link CusperUnknownError} instead
       */
      throwError(error2) {
        const err = error2.logs != null && this.errorFromProgramLogs(error2.logs, true) || new CusperUnknownError(-1, "Error created without logs and thus without error code");
        throw this.passPreparedError(err, this.throwError);
      }
      passPreparedError(err, captureBoundaryFn) {
        if (err == null)
          return null;
        if (typeof Error.captureStackTrace === "function") {
          Error.captureStackTrace(err, captureBoundaryFn);
        }
        return err;
      }
    };
    exports.ErrorResolver = ErrorResolver;
    function initCusper(resolveErrorFromCode) {
      return new ErrorResolver(resolveErrorFromCode);
    }
    exports.initCusper = initCusper;
    var CusperUnknownError = class extends Error {
      constructor(code2, ...params) {
        super(...params);
        this.code = code2;
        this.name = "CusperUnknownError";
      }
    };
    exports.CusperUnknownError = CusperUnknownError;
    var CustomProgramError = class extends Error {
      /**
       * Creates an instance of a {@link CustomProgramError}.
       *
       * @param code the error code for which this error was resolved
       * @param name the name of the error
       */
      constructor(code2, name, ...params) {
        super(...params);
        this.code = code2;
        this.name = `CustomProgramError#${name}`;
      }
    };
    exports.CustomProgramError = CustomProgramError;
    var AnchorError = class _AnchorError extends Error {
      constructor(code2, name, ...params) {
        super(...params);
        this.code = code2;
        this.name = `AnchorError#${name}`;
      }
      static fromCode(code2) {
        const errorMeta = _AnchorError.errorMap.get(code2);
        return errorMeta != null ? new _AnchorError(errorMeta.code, errorMeta.name, errorMeta.message) : null;
      }
      toString() {
        return `${this.name}: ${this.message}`;
      }
    };
    exports.AnchorError = AnchorError;
    AnchorError.errorMap = Object.entries(anchor.LangErrorCode).reduce((acc, [key, code2]) => {
      acc.set(code2, {
        code: code2,
        name: key,
        message: anchor.LangErrorMessage.get(code2)
      });
      return acc;
    }, /* @__PURE__ */ new Map());
    var TokenLendingError = class _TokenLendingError extends Error {
      constructor(code2, name, ...params) {
        super(...params);
        this.code = code2;
        this.name = `TokenLendingError#${name}`;
      }
      static fromCode(code2) {
        const errorMeta = _TokenLendingError.errorMap.get(code2);
        return errorMeta != null ? new _TokenLendingError(errorMeta.code, errorMeta.name, errorMeta.message) : null;
      }
      toString() {
        return `${this.name}: ${this.message}`;
      }
    };
    exports.TokenLendingError = TokenLendingError;
    TokenLendingError.errorMap = token_lending_1.tokenLendingErrors;
  }
});

// ../../node_modules/@metaplex-foundation/cusper/dist/src/types.js
var require_types = __commonJS({
  "../../node_modules/@metaplex-foundation/cusper/dist/src/types.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
  }
});

// ../../node_modules/@metaplex-foundation/cusper/dist/src/cusper.js
var require_cusper = __commonJS({
  "../../node_modules/@metaplex-foundation/cusper/dist/src/cusper.js"(exports) {
    "use strict";
    var __createBinding = exports && exports.__createBinding || (Object.create ? function(o2, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      Object.defineProperty(o2, k2, { enumerable: true, get: function() {
        return m[k];
      } });
    } : function(o2, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      o2[k2] = m[k];
    });
    var __exportStar = exports && exports.__exportStar || function(m, exports2) {
      for (var p in m)
        if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports2, p))
          __createBinding(exports2, m, p);
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    __exportStar(require_resolve_error(), exports);
    __exportStar(require_types(), exports);
  }
});

// browser-external:assert
var require_assert = __commonJS({
  "browser-external:assert"(exports, module) {
    module.exports = Object.create(new Proxy({}, {
      get(_, key) {
        if (key !== "__esModule" && key !== "__proto__" && key !== "constructor" && key !== "splice") {
          console.warn(`Module "assert" has been externalized for browser compatibility. Cannot access "assert.${key}" in client code. See http://vitejs.dev/guide/troubleshooting.html#module-externalized-for-browser-compatibility for more details.`);
        }
      }
    }));
  }
});

// ../../node_modules/@metaplex-foundation/beet/dist/cjs/src/types.js
var require_types2 = __commonJS({
  "../../node_modules/@metaplex-foundation/beet/dist/cjs/src/types.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.isElementCollectionFixedSizeBeet = exports.isFixableBeet = exports.assertFixedSizeBeet = exports.isFixedSizeBeet = exports.BEET_TYPE_ARG_INNER = exports.BEET_TYPE_ARG_LEN = exports.BEET_PACKAGE = void 0;
    var assert_1 = require_assert();
    exports.BEET_PACKAGE = "@metaplex-foundation/beet";
    exports.BEET_TYPE_ARG_LEN = "len";
    exports.BEET_TYPE_ARG_INNER = "Beet<{innner}>";
    function isFixedSizeBeet(x) {
      return Object.keys(x).includes("byteSize");
    }
    exports.isFixedSizeBeet = isFixedSizeBeet;
    function assertFixedSizeBeet(x, msg = `${x} should have been a fixed beet`) {
      (0, assert_1.strict)(isFixedSizeBeet(x), msg);
    }
    exports.assertFixedSizeBeet = assertFixedSizeBeet;
    function isFixableBeet2(x) {
      return typeof x.toFixedFromData === "function" && typeof x.toFixedFromValue === "function";
    }
    exports.isFixableBeet = isFixableBeet2;
    function isElementCollectionFixedSizeBeet(x) {
      const keys = Object.keys(x);
      return keys.includes("length") && keys.includes("elementByteSize") && keys.includes("lenPrefixByteSize");
    }
    exports.isElementCollectionFixedSizeBeet = isElementCollectionFixedSizeBeet;
  }
});

// ../../node_modules/@metaplex-foundation/beet/dist/cjs/src/beets/numbers.js
var require_numbers = __commonJS({
  "../../node_modules/@metaplex-foundation/beet/dist/cjs/src/beets/numbers.js"(exports) {
    "use strict";
    var __importDefault = exports && exports.__importDefault || function(mod) {
      return mod && mod.__esModule ? mod : { "default": mod };
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.numbersTypeMap = exports.bool = exports.i512 = exports.i256 = exports.i128 = exports.i64 = exports.i32 = exports.i16 = exports.i8 = exports.u512 = exports.u256 = exports.u128 = exports.u64 = exports.u32 = exports.u16 = exports.u8 = void 0;
    var bn_js_1 = __importDefault(require_bn());
    var types_1 = require_types2();
    exports.u8 = {
      write: function(buf, offset, value) {
        buf.writeUInt8(value, offset);
      },
      read: function(buf, offset) {
        return buf.readUInt8(offset);
      },
      byteSize: 1,
      description: "u8"
    };
    exports.u16 = {
      write: function(buf, offset, value) {
        buf.writeUInt16LE(value, offset);
      },
      read: function(buf, offset) {
        return buf.readUInt16LE(offset);
      },
      byteSize: 2,
      description: "u16"
    };
    exports.u32 = {
      write: function(buf, offset, value) {
        buf.writeUInt32LE(value, offset);
      },
      read: function(buf, offset) {
        return buf.readUInt32LE(offset);
      },
      byteSize: 4,
      description: "u32"
    };
    function unsignedLargeBeet(byteSize, description) {
      return {
        write: function(buf, offset, value) {
          const bn = bn_js_1.default.isBN(value) ? value : new bn_js_1.default(value);
          const bytesArray = bn.toArray("le", this.byteSize);
          const bytesArrayBuf = Buffer.from(bytesArray);
          bytesArrayBuf.copy(buf, offset, 0, this.byteSize);
        },
        read: function(buf, offset) {
          const slice = buf.slice(offset, offset + this.byteSize);
          return new bn_js_1.default(slice, "le");
        },
        byteSize,
        description
      };
    }
    exports.u64 = unsignedLargeBeet(8, "u64");
    exports.u128 = unsignedLargeBeet(16, "u128");
    exports.u256 = unsignedLargeBeet(32, "u256");
    exports.u512 = unsignedLargeBeet(64, "u512");
    exports.i8 = {
      write: function(buf, offset, value) {
        buf.writeInt8(value, offset);
      },
      read: function(buf, offset) {
        return buf.readInt8(offset);
      },
      byteSize: 1,
      description: "i8"
    };
    exports.i16 = {
      write: function(buf, offset, value) {
        buf.writeInt16LE(value, offset);
      },
      read: function(buf, offset) {
        return buf.readInt16LE(offset);
      },
      byteSize: 2,
      description: "i16"
    };
    exports.i32 = {
      write: function(buf, offset, value) {
        buf.writeInt32LE(value, offset);
      },
      read: function(buf, offset) {
        return buf.readInt32LE(offset);
      },
      byteSize: 4,
      description: "i32"
    };
    function signedLargeBeet(byteSize, description) {
      const bitSize = byteSize * 8;
      return {
        write: function(buf, offset, value) {
          const bn = (bn_js_1.default.isBN(value) ? value : new bn_js_1.default(value)).toTwos(bitSize);
          const bytesArray = bn.toArray("le", this.byteSize);
          const bytesArrayBuf = Buffer.from(bytesArray);
          bytesArrayBuf.copy(buf, offset, 0, this.byteSize);
        },
        read: function(buf, offset) {
          const slice = buf.slice(offset, offset + this.byteSize);
          const x = new bn_js_1.default(slice, "le");
          return x.fromTwos(bitSize);
        },
        byteSize,
        description
      };
    }
    exports.i64 = signedLargeBeet(8, "i64");
    exports.i128 = signedLargeBeet(16, "i128");
    exports.i256 = signedLargeBeet(32, "i256");
    exports.i512 = signedLargeBeet(64, "i512");
    exports.bool = {
      write: function(buf, offset, value) {
        const n = value ? 1 : 0;
        exports.u8.write(buf, offset, n);
      },
      read: function(buf, offset) {
        return exports.u8.read(buf, offset) === 1;
      },
      byteSize: 1,
      description: "bool"
    };
    exports.numbersTypeMap = {
      // <= 32-bit numbers and boolean
      u8: { beet: "u8", isFixable: false, sourcePack: types_1.BEET_PACKAGE, ts: "number" },
      u16: { beet: "u16", isFixable: false, sourcePack: types_1.BEET_PACKAGE, ts: "number" },
      u32: { beet: "u32", isFixable: false, sourcePack: types_1.BEET_PACKAGE, ts: "number" },
      i8: { beet: "i8", isFixable: false, sourcePack: types_1.BEET_PACKAGE, ts: "number" },
      i16: { beet: "i16", isFixable: false, sourcePack: types_1.BEET_PACKAGE, ts: "number" },
      i32: { beet: "i32", isFixable: false, sourcePack: types_1.BEET_PACKAGE, ts: "number" },
      bool: { beet: "bool", isFixable: false, sourcePack: types_1.BEET_PACKAGE, ts: "boolean" },
      // Big Number, they use, the 'bignum' type which is defined in this package
      u64: { beet: "u64", isFixable: false, sourcePack: types_1.BEET_PACKAGE, ts: "bignum", pack: types_1.BEET_PACKAGE },
      u128: { beet: "u128", isFixable: false, sourcePack: types_1.BEET_PACKAGE, ts: "bignum", pack: types_1.BEET_PACKAGE },
      u256: { beet: "u256", isFixable: false, sourcePack: types_1.BEET_PACKAGE, ts: "bignum", pack: types_1.BEET_PACKAGE },
      u512: { beet: "u512", isFixable: false, sourcePack: types_1.BEET_PACKAGE, ts: "bignum", pack: types_1.BEET_PACKAGE },
      i64: { beet: "i64", isFixable: false, sourcePack: types_1.BEET_PACKAGE, ts: "bignum", pack: types_1.BEET_PACKAGE },
      i128: { beet: "i128", isFixable: false, sourcePack: types_1.BEET_PACKAGE, ts: "bignum", pack: types_1.BEET_PACKAGE },
      i256: { beet: "i256", isFixable: false, sourcePack: types_1.BEET_PACKAGE, ts: "bignum", pack: types_1.BEET_PACKAGE },
      i512: { beet: "i512", isFixable: false, sourcePack: types_1.BEET_PACKAGE, ts: "bignum", pack: types_1.BEET_PACKAGE }
    };
  }
});

// ../../node_modules/ms/index.js
var require_ms = __commonJS({
  "../../node_modules/ms/index.js"(exports, module) {
    var s = 1e3;
    var m = s * 60;
    var h = m * 60;
    var d = h * 24;
    var w = d * 7;
    var y = d * 365.25;
    module.exports = function(val, options) {
      options = options || {};
      var type = typeof val;
      if (type === "string" && val.length > 0) {
        return parse(val);
      } else if (type === "number" && isFinite(val)) {
        return options.long ? fmtLong(val) : fmtShort(val);
      }
      throw new Error(
        "val is not a non-empty string or a valid number. val=" + JSON.stringify(val)
      );
    };
    function parse(str) {
      str = String(str);
      if (str.length > 100) {
        return;
      }
      var match = /^(-?(?:\d+)?\.?\d+) *(milliseconds?|msecs?|ms|seconds?|secs?|s|minutes?|mins?|m|hours?|hrs?|h|days?|d|weeks?|w|years?|yrs?|y)?$/i.exec(
        str
      );
      if (!match) {
        return;
      }
      var n = parseFloat(match[1]);
      var type = (match[2] || "ms").toLowerCase();
      switch (type) {
        case "years":
        case "year":
        case "yrs":
        case "yr":
        case "y":
          return n * y;
        case "weeks":
        case "week":
        case "w":
          return n * w;
        case "days":
        case "day":
        case "d":
          return n * d;
        case "hours":
        case "hour":
        case "hrs":
        case "hr":
        case "h":
          return n * h;
        case "minutes":
        case "minute":
        case "mins":
        case "min":
        case "m":
          return n * m;
        case "seconds":
        case "second":
        case "secs":
        case "sec":
        case "s":
          return n * s;
        case "milliseconds":
        case "millisecond":
        case "msecs":
        case "msec":
        case "ms":
          return n;
        default:
          return void 0;
      }
    }
    function fmtShort(ms) {
      var msAbs = Math.abs(ms);
      if (msAbs >= d) {
        return Math.round(ms / d) + "d";
      }
      if (msAbs >= h) {
        return Math.round(ms / h) + "h";
      }
      if (msAbs >= m) {
        return Math.round(ms / m) + "m";
      }
      if (msAbs >= s) {
        return Math.round(ms / s) + "s";
      }
      return ms + "ms";
    }
    function fmtLong(ms) {
      var msAbs = Math.abs(ms);
      if (msAbs >= d) {
        return plural(ms, msAbs, d, "day");
      }
      if (msAbs >= h) {
        return plural(ms, msAbs, h, "hour");
      }
      if (msAbs >= m) {
        return plural(ms, msAbs, m, "minute");
      }
      if (msAbs >= s) {
        return plural(ms, msAbs, s, "second");
      }
      return ms + " ms";
    }
    function plural(ms, msAbs, n, name) {
      var isPlural = msAbs >= n * 1.5;
      return Math.round(ms / n) + " " + name + (isPlural ? "s" : "");
    }
  }
});

// ../../node_modules/debug/src/common.js
var require_common = __commonJS({
  "../../node_modules/debug/src/common.js"(exports, module) {
    function setup(env) {
      createDebug.debug = createDebug;
      createDebug.default = createDebug;
      createDebug.coerce = coerce;
      createDebug.disable = disable;
      createDebug.enable = enable;
      createDebug.enabled = enabled;
      createDebug.humanize = require_ms();
      createDebug.destroy = destroy;
      Object.keys(env).forEach((key) => {
        createDebug[key] = env[key];
      });
      createDebug.names = [];
      createDebug.skips = [];
      createDebug.formatters = {};
      function selectColor(namespace) {
        let hash = 0;
        for (let i = 0; i < namespace.length; i++) {
          hash = (hash << 5) - hash + namespace.charCodeAt(i);
          hash |= 0;
        }
        return createDebug.colors[Math.abs(hash) % createDebug.colors.length];
      }
      createDebug.selectColor = selectColor;
      function createDebug(namespace) {
        let prevTime;
        let enableOverride = null;
        let namespacesCache;
        let enabledCache;
        function debug2(...args) {
          if (!debug2.enabled) {
            return;
          }
          const self2 = debug2;
          const curr = Number(/* @__PURE__ */ new Date());
          const ms = curr - (prevTime || curr);
          self2.diff = ms;
          self2.prev = prevTime;
          self2.curr = curr;
          prevTime = curr;
          args[0] = createDebug.coerce(args[0]);
          if (typeof args[0] !== "string") {
            args.unshift("%O");
          }
          let index = 0;
          args[0] = args[0].replace(/%([a-zA-Z%])/g, (match, format) => {
            if (match === "%%") {
              return "%";
            }
            index++;
            const formatter = createDebug.formatters[format];
            if (typeof formatter === "function") {
              const val = args[index];
              match = formatter.call(self2, val);
              args.splice(index, 1);
              index--;
            }
            return match;
          });
          createDebug.formatArgs.call(self2, args);
          const logFn = self2.log || createDebug.log;
          logFn.apply(self2, args);
        }
        debug2.namespace = namespace;
        debug2.useColors = createDebug.useColors();
        debug2.color = createDebug.selectColor(namespace);
        debug2.extend = extend;
        debug2.destroy = createDebug.destroy;
        Object.defineProperty(debug2, "enabled", {
          enumerable: true,
          configurable: false,
          get: () => {
            if (enableOverride !== null) {
              return enableOverride;
            }
            if (namespacesCache !== createDebug.namespaces) {
              namespacesCache = createDebug.namespaces;
              enabledCache = createDebug.enabled(namespace);
            }
            return enabledCache;
          },
          set: (v) => {
            enableOverride = v;
          }
        });
        if (typeof createDebug.init === "function") {
          createDebug.init(debug2);
        }
        return debug2;
      }
      function extend(namespace, delimiter2) {
        const newDebug = createDebug(this.namespace + (typeof delimiter2 === "undefined" ? ":" : delimiter2) + namespace);
        newDebug.log = this.log;
        return newDebug;
      }
      function enable(namespaces) {
        createDebug.save(namespaces);
        createDebug.namespaces = namespaces;
        createDebug.names = [];
        createDebug.skips = [];
        let i;
        const split = (typeof namespaces === "string" ? namespaces : "").split(/[\s,]+/);
        const len = split.length;
        for (i = 0; i < len; i++) {
          if (!split[i]) {
            continue;
          }
          namespaces = split[i].replace(/\*/g, ".*?");
          if (namespaces[0] === "-") {
            createDebug.skips.push(new RegExp("^" + namespaces.slice(1) + "$"));
          } else {
            createDebug.names.push(new RegExp("^" + namespaces + "$"));
          }
        }
      }
      function disable() {
        const namespaces = [
          ...createDebug.names.map(toNamespace),
          ...createDebug.skips.map(toNamespace).map((namespace) => "-" + namespace)
        ].join(",");
        createDebug.enable("");
        return namespaces;
      }
      function enabled(name) {
        if (name[name.length - 1] === "*") {
          return true;
        }
        let i;
        let len;
        for (i = 0, len = createDebug.skips.length; i < len; i++) {
          if (createDebug.skips[i].test(name)) {
            return false;
          }
        }
        for (i = 0, len = createDebug.names.length; i < len; i++) {
          if (createDebug.names[i].test(name)) {
            return true;
          }
        }
        return false;
      }
      function toNamespace(regexp) {
        return regexp.toString().substring(2, regexp.toString().length - 2).replace(/\.\*\?$/, "*");
      }
      function coerce(val) {
        if (val instanceof Error) {
          return val.stack || val.message;
        }
        return val;
      }
      function destroy() {
        console.warn("Instance method `debug.destroy()` is deprecated and no longer does anything. It will be removed in the next major version of `debug`.");
      }
      createDebug.enable(createDebug.load());
      return createDebug;
    }
    module.exports = setup;
  }
});

// ../../node_modules/debug/src/browser.js
var require_browser2 = __commonJS({
  "../../node_modules/debug/src/browser.js"(exports, module) {
    exports.formatArgs = formatArgs;
    exports.save = save;
    exports.load = load;
    exports.useColors = useColors;
    exports.storage = localstorage();
    exports.destroy = (() => {
      let warned = false;
      return () => {
        if (!warned) {
          warned = true;
          console.warn("Instance method `debug.destroy()` is deprecated and no longer does anything. It will be removed in the next major version of `debug`.");
        }
      };
    })();
    exports.colors = [
      "#0000CC",
      "#0000FF",
      "#0033CC",
      "#0033FF",
      "#0066CC",
      "#0066FF",
      "#0099CC",
      "#0099FF",
      "#00CC00",
      "#00CC33",
      "#00CC66",
      "#00CC99",
      "#00CCCC",
      "#00CCFF",
      "#3300CC",
      "#3300FF",
      "#3333CC",
      "#3333FF",
      "#3366CC",
      "#3366FF",
      "#3399CC",
      "#3399FF",
      "#33CC00",
      "#33CC33",
      "#33CC66",
      "#33CC99",
      "#33CCCC",
      "#33CCFF",
      "#6600CC",
      "#6600FF",
      "#6633CC",
      "#6633FF",
      "#66CC00",
      "#66CC33",
      "#9900CC",
      "#9900FF",
      "#9933CC",
      "#9933FF",
      "#99CC00",
      "#99CC33",
      "#CC0000",
      "#CC0033",
      "#CC0066",
      "#CC0099",
      "#CC00CC",
      "#CC00FF",
      "#CC3300",
      "#CC3333",
      "#CC3366",
      "#CC3399",
      "#CC33CC",
      "#CC33FF",
      "#CC6600",
      "#CC6633",
      "#CC9900",
      "#CC9933",
      "#CCCC00",
      "#CCCC33",
      "#FF0000",
      "#FF0033",
      "#FF0066",
      "#FF0099",
      "#FF00CC",
      "#FF00FF",
      "#FF3300",
      "#FF3333",
      "#FF3366",
      "#FF3399",
      "#FF33CC",
      "#FF33FF",
      "#FF6600",
      "#FF6633",
      "#FF9900",
      "#FF9933",
      "#FFCC00",
      "#FFCC33"
    ];
    function useColors() {
      if (typeof window !== "undefined" && window.process && (window.process.type === "renderer" || window.process.__nwjs)) {
        return true;
      }
      if (typeof navigator !== "undefined" && navigator.userAgent && navigator.userAgent.toLowerCase().match(/(edge|trident)\/(\d+)/)) {
        return false;
      }
      return typeof document !== "undefined" && document.documentElement && document.documentElement.style && document.documentElement.style.WebkitAppearance || // Is firebug? http://stackoverflow.com/a/398120/376773
      typeof window !== "undefined" && window.console && (window.console.firebug || window.console.exception && window.console.table) || // Is firefox >= v31?
      // https://developer.mozilla.org/en-US/docs/Tools/Web_Console#Styling_messages
      typeof navigator !== "undefined" && navigator.userAgent && navigator.userAgent.toLowerCase().match(/firefox\/(\d+)/) && parseInt(RegExp.$1, 10) >= 31 || // Double check webkit in userAgent just in case we are in a worker
      typeof navigator !== "undefined" && navigator.userAgent && navigator.userAgent.toLowerCase().match(/applewebkit\/(\d+)/);
    }
    function formatArgs(args) {
      args[0] = (this.useColors ? "%c" : "") + this.namespace + (this.useColors ? " %c" : " ") + args[0] + (this.useColors ? "%c " : " ") + "+" + module.exports.humanize(this.diff);
      if (!this.useColors) {
        return;
      }
      const c = "color: " + this.color;
      args.splice(1, 0, c, "color: inherit");
      let index = 0;
      let lastC = 0;
      args[0].replace(/%[a-zA-Z%]/g, (match) => {
        if (match === "%%") {
          return;
        }
        index++;
        if (match === "%c") {
          lastC = index;
        }
      });
      args.splice(lastC, 0, c);
    }
    exports.log = console.debug || console.log || (() => {
    });
    function save(namespaces) {
      try {
        if (namespaces) {
          exports.storage.setItem("debug", namespaces);
        } else {
          exports.storage.removeItem("debug");
        }
      } catch (error2) {
      }
    }
    function load() {
      let r;
      try {
        r = exports.storage.getItem("debug");
      } catch (error2) {
      }
      if (!r && typeof process !== "undefined" && "env" in process) {
        r = process.env.DEBUG;
      }
      return r;
    }
    function localstorage() {
      try {
        return localStorage;
      } catch (error2) {
      }
    }
    module.exports = require_common()(exports);
    var { formatters } = module.exports;
    formatters.j = function(v) {
      try {
        return JSON.stringify(v);
      } catch (error2) {
        return "[UnexpectedJSONParseError]: " + error2.message;
      }
    };
  }
});

// ../../node_modules/ansicolors/ansicolors.js
var require_ansicolors = __commonJS({
  "../../node_modules/ansicolors/ansicolors.js"(exports, module) {
    "use strict";
    var colorNums = {
      white: 37,
      black: 30,
      blue: 34,
      cyan: 36,
      green: 32,
      magenta: 35,
      red: 31,
      yellow: 33,
      brightBlack: 90,
      brightRed: 91,
      brightGreen: 92,
      brightYellow: 93,
      brightBlue: 94,
      brightMagenta: 95,
      brightCyan: 96,
      brightWhite: 97
    };
    var backgroundColorNums = {
      bgBlack: 40,
      bgRed: 41,
      bgGreen: 42,
      bgYellow: 43,
      bgBlue: 44,
      bgMagenta: 45,
      bgCyan: 46,
      bgWhite: 47,
      bgBrightBlack: 100,
      bgBrightRed: 101,
      bgBrightGreen: 102,
      bgBrightYellow: 103,
      bgBrightBlue: 104,
      bgBrightMagenta: 105,
      bgBrightCyan: 106,
      bgBrightWhite: 107
    };
    var open = {};
    var close = {};
    var colors = {};
    Object.keys(colorNums).forEach(function(k) {
      var o2 = open[k] = "\x1B[" + colorNums[k] + "m";
      var c = close[k] = "\x1B[39m";
      colors[k] = function(s) {
        return o2 + s + c;
      };
    });
    Object.keys(backgroundColorNums).forEach(function(k) {
      var o2 = open[k] = "\x1B[" + backgroundColorNums[k] + "m";
      var c = close[k] = "\x1B[49m";
      colors[k] = function(s) {
        return o2 + s + c;
      };
    });
    module.exports = colors;
    colors.open = open;
    colors.close = close;
  }
});

// ../../node_modules/@metaplex-foundation/beet/dist/cjs/src/utils.js
var require_utils2 = __commonJS({
  "../../node_modules/@metaplex-foundation/beet/dist/cjs/src/utils.js"(exports) {
    "use strict";
    var __importDefault = exports && exports.__importDefault || function(mod) {
      return mod && mod.__esModule ? mod : { "default": mod };
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.UnreachableCaseError = exports.stringify = exports.bytes = exports.beetBytes = exports.logTrace = exports.logDebug = exports.logInfo = exports.logError = void 0;
    var debug_1 = __importDefault(require_browser2());
    var ansicolors_1 = __importDefault(require_ansicolors());
    var types_1 = require_types2();
    var { brightBlack } = ansicolors_1.default;
    exports.logError = (0, debug_1.default)("beet:error");
    exports.logInfo = (0, debug_1.default)("beet:info");
    exports.logDebug = (0, debug_1.default)("beet:debug");
    exports.logTrace = (0, debug_1.default)("beet:trace");
    function beetBytes(beet9, isFixable = false) {
      let bytes2;
      if ((0, types_1.isFixableBeet)(beet9)) {
        bytes2 = "? B";
      } else if ((0, types_1.isElementCollectionFixedSizeBeet)(beet9)) {
        const len = isFixable ? "length" : beet9.length;
        const lenBytes = beet9.lenPrefixByteSize;
        bytes2 = lenBytes > 0 ? `${lenBytes} + (${beet9.elementByteSize} * ${len}) B  (${beet9.byteSize} B)` : `(${beet9.elementByteSize} * ${len}) B (${beet9.byteSize} B)`;
      } else {
        bytes2 = `${beet9.byteSize} B`;
      }
      return brightBlack(bytes2);
    }
    exports.beetBytes = beetBytes;
    function bytes(n) {
      return brightBlack(`${n} B`);
    }
    exports.bytes = bytes;
    function stringify(x) {
      return x.toString === "function" ? x.toString() : x;
    }
    exports.stringify = stringify;
    var UnreachableCaseError2 = class extends Error {
      constructor(value) {
        super(`Unreachable case: ${value}`);
      }
    };
    exports.UnreachableCaseError = UnreachableCaseError2;
  }
});

// ../../node_modules/@metaplex-foundation/beet/dist/cjs/src/beet.fixable.js
var require_beet_fixable = __commonJS({
  "../../node_modules/@metaplex-foundation/beet/dist/cjs/src/beet.fixable.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.fixBeetFromValue = exports.fixBeetFromData = void 0;
    var types_1 = require_types2();
    var utils_1 = require_utils2();
    function fixBeetFromData(beet9, buf, offset) {
      if ((0, types_1.isFixedSizeBeet)(beet9)) {
        return beet9;
      }
      if ((0, types_1.isFixableBeet)(beet9)) {
        return beet9.toFixedFromData(buf, offset);
      }
      throw new utils_1.UnreachableCaseError(beet9);
    }
    exports.fixBeetFromData = fixBeetFromData;
    function fixBeetFromValue(beet9, val) {
      if ((0, types_1.isFixedSizeBeet)(beet9)) {
        return beet9;
      }
      if ((0, types_1.isFixableBeet)(beet9)) {
        return beet9.toFixedFromValue(val);
      }
      throw new utils_1.UnreachableCaseError(beet9);
    }
    exports.fixBeetFromValue = fixBeetFromValue;
  }
});

// ../../node_modules/@metaplex-foundation/beet/dist/cjs/src/beets/collections.js
var require_collections = __commonJS({
  "../../node_modules/@metaplex-foundation/beet/dist/cjs/src/beets/collections.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.collectionsTypeMap = exports.uint8Array = exports.fixedSizeUint8Array = exports.fixedSizeBuffer = exports.array = exports.fixedSizeArray = exports.uniformFixedSizeArray = void 0;
    var types_1 = require_types2();
    var assert_1 = require_assert();
    var numbers_1 = require_numbers();
    var types_2 = require_types2();
    var utils_1 = require_utils2();
    var beet_fixable_1 = require_beet_fixable();
    function uniformFixedSizeArray3(element, len, lenPrefix = false) {
      const arraySize = element.byteSize * len;
      const byteSize = lenPrefix ? 4 + arraySize : arraySize;
      return {
        write: function(buf, offset, value) {
          assert_1.strict.equal(value.length, len, `array length ${value.length} should match len ${len}`);
          if (lenPrefix) {
            numbers_1.u32.write(buf, offset, len);
            offset += 4;
          }
          for (let i = 0; i < len; i++) {
            element.write(buf, offset + i * element.byteSize, value[i]);
          }
        },
        read: function(buf, offset) {
          if (lenPrefix) {
            const size = numbers_1.u32.read(buf, offset);
            assert_1.strict.equal(size, len, "invalid byte size");
            offset += 4;
          }
          const arr = new Array(len);
          for (let i = 0; i < len; i++) {
            arr[i] = element.read(buf, offset + i * element.byteSize);
          }
          return arr;
        },
        byteSize,
        length: len,
        elementByteSize: element.byteSize,
        lenPrefixByteSize: 4,
        description: `Array<${element.description}>(${len})`
      };
    }
    exports.uniformFixedSizeArray = uniformFixedSizeArray3;
    function fixedSizeArray(elements, elementsByteSize) {
      const len = elements.length;
      const firstElement = len === 0 ? "<EMPTY>" : elements[0].description;
      return {
        write: function(buf, offset, value) {
          assert_1.strict.equal(value.length, len, `array length ${value.length} should match len ${len}`);
          numbers_1.u32.write(buf, offset, len);
          let cursor = offset + 4;
          for (let i = 0; i < len; i++) {
            const element = elements[i];
            element.write(buf, cursor, value[i]);
            cursor += element.byteSize;
          }
        },
        read: function(buf, offset) {
          const size = numbers_1.u32.read(buf, offset);
          assert_1.strict.equal(size, len, "invalid byte size");
          let cursor = offset + 4;
          const arr = new Array(len);
          for (let i = 0; i < len; i++) {
            const element = elements[i];
            arr[i] = element.read(buf, cursor);
            cursor += element.byteSize;
          }
          return arr;
        },
        byteSize: 4 + elementsByteSize,
        length: len,
        description: `Array<${firstElement}>(${len})[ 4 + ${elementsByteSize} ]`
      };
    }
    exports.fixedSizeArray = fixedSizeArray;
    function array(element) {
      return {
        toFixedFromData(buf, offset) {
          const len = numbers_1.u32.read(buf, offset);
          (0, utils_1.logTrace)(`${this.description}[${len}]`);
          const cursorStart = offset + 4;
          let cursor = cursorStart;
          const fixedElements = new Array(len);
          for (let i = 0; i < len; i++) {
            const fixedElement = (0, beet_fixable_1.fixBeetFromData)(element, buf, cursor);
            fixedElements[i] = fixedElement;
            cursor += fixedElement.byteSize;
          }
          return fixedSizeArray(fixedElements, cursor - cursorStart);
        },
        toFixedFromValue(vals) {
          (0, assert_1.strict)(Array.isArray(vals), `${vals} should be an array`);
          let elementsSize = 0;
          const fixedElements = new Array(vals.length);
          for (let i = 0; i < vals.length; i++) {
            const fixedElement = (0, beet_fixable_1.fixBeetFromValue)(element, vals[i]);
            fixedElements[i] = fixedElement;
            elementsSize += fixedElement.byteSize;
          }
          return fixedSizeArray(fixedElements, elementsSize);
        },
        description: `array`
      };
    }
    exports.array = array;
    function fixedSizeBuffer(bytes) {
      return {
        write: function(buf, offset, value) {
          value.copy(buf, offset, 0, bytes);
        },
        read: function(buf, offset) {
          return buf.slice(offset, offset + bytes);
        },
        byteSize: bytes,
        description: `Buffer(${bytes})`
      };
    }
    exports.fixedSizeBuffer = fixedSizeBuffer;
    function fixedSizeUint8Array(len, lenPrefix = false) {
      const arrayBufferBeet = fixedSizeBuffer(len);
      const byteSize = lenPrefix ? len + 4 : len;
      return {
        write: function(buf, offset, value) {
          assert_1.strict.equal(value.byteLength, len, `Uint8Array length ${value.byteLength} should match len ${len}`);
          if (lenPrefix) {
            numbers_1.u32.write(buf, offset, len);
            offset += 4;
          }
          const valueBuf = Buffer.from(value);
          arrayBufferBeet.write(buf, offset, valueBuf);
        },
        read: function(buf, offset) {
          if (lenPrefix) {
            const size = numbers_1.u32.read(buf, offset);
            assert_1.strict.equal(size, len, "invalid byte size");
            offset += 4;
          }
          const arrayBuffer = arrayBufferBeet.read(buf, offset);
          return Uint8Array.from(arrayBuffer);
        },
        byteSize,
        description: `Uint8Array(${len})`
      };
    }
    exports.fixedSizeUint8Array = fixedSizeUint8Array;
    exports.uint8Array = {
      toFixedFromData(buf, offset) {
        const len = numbers_1.u32.read(buf, offset);
        (0, utils_1.logTrace)(`${this.description}[${len}]`);
        return fixedSizeUint8Array(len, true);
      },
      toFixedFromValue(val) {
        const len = val.byteLength;
        return fixedSizeUint8Array(len, true);
      },
      description: `Uint8Array`
    };
    exports.collectionsTypeMap = {
      Array: {
        beet: "array",
        isFixable: true,
        sourcePack: types_2.BEET_PACKAGE,
        ts: "Array",
        arg: types_1.BEET_TYPE_ARG_LEN
      },
      FixedSizeArray: {
        beet: "fixedSizeArray",
        isFixable: false,
        sourcePack: types_2.BEET_PACKAGE,
        ts: "Array",
        arg: types_1.BEET_TYPE_ARG_LEN
      },
      UniformFixedSizeArray: {
        beet: "uniformFixedSizeArray",
        isFixable: false,
        sourcePack: types_2.BEET_PACKAGE,
        ts: "Array",
        arg: types_1.BEET_TYPE_ARG_LEN
      },
      Buffer: {
        beet: "fixedSizeBuffer",
        isFixable: false,
        sourcePack: types_2.BEET_PACKAGE,
        ts: "Buffer",
        arg: types_1.BEET_TYPE_ARG_LEN
      },
      FixedSizeUint8Array: {
        beet: "fixedSizeUint8Array",
        isFixable: false,
        sourcePack: types_2.BEET_PACKAGE,
        ts: "Uint8Array",
        arg: types_1.BEET_TYPE_ARG_LEN
      },
      Uint8Array: {
        beet: "uint8Array",
        isFixable: true,
        sourcePack: types_2.BEET_PACKAGE,
        ts: "Uint8Array",
        arg: types_1.BEET_TYPE_ARG_LEN
      }
    };
  }
});

// ../../node_modules/@metaplex-foundation/beet/dist/cjs/src/beets/composites.js
var require_composites = __commonJS({
  "../../node_modules/@metaplex-foundation/beet/dist/cjs/src/beets/composites.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.compositesTypeMap = exports.coption = exports.coptionSome = exports.coptionNone = exports.isNoneBuffer = exports.isSomeBuffer = void 0;
    var assert_1 = require_assert();
    var types_1 = require_types2();
    var types_2 = require_types2();
    var utils_1 = require_utils2();
    var beet_fixable_1 = require_beet_fixable();
    var NONE = 0;
    var SOME = 1;
    function isSomeBuffer(buf, offset) {
      return buf[offset] === SOME;
    }
    exports.isSomeBuffer = isSomeBuffer;
    function isNoneBuffer(buf, offset) {
      return buf[offset] === NONE;
    }
    exports.isNoneBuffer = isNoneBuffer;
    function coptionNone(description) {
      (0, utils_1.logTrace)(`coptionNone(${description})`);
      return {
        write: function(buf, offset, value) {
          (0, assert_1.strict)(value == null, "coptionNone can only handle `null` values");
          buf[offset] = NONE;
        },
        read: function(buf, offset) {
          (0, assert_1.strict)(isNoneBuffer(buf, offset), "coptionNone can only handle `NONE` data");
          return null;
        },
        byteSize: 1,
        description: `COption<None(${description})>`
      };
    }
    exports.coptionNone = coptionNone;
    function coptionSome(inner) {
      const byteSize = 1 + inner.byteSize;
      const beet9 = {
        write: function(buf, offset, value) {
          (0, types_1.assertFixedSizeBeet)(inner, `coption inner type ${inner.description} needs to be fixed before calling write`);
          (0, assert_1.strict)(value != null, "coptionSome cannot handle `null` values");
          buf[offset] = SOME;
          inner.write(buf, offset + 1, value);
        },
        read: function(buf, offset) {
          (0, types_1.assertFixedSizeBeet)(inner, `coption inner type ${inner.description} needs to be fixed before calling read`);
          (0, assert_1.strict)(isSomeBuffer(buf, offset), "coptionSome can only handle `SOME` data");
          return inner.read(buf, offset + 1);
        },
        description: `COption<${inner.description}>[1 + ${inner.byteSize}]`,
        byteSize,
        inner
      };
      (0, utils_1.logTrace)(beet9.description);
      return beet9;
    }
    exports.coptionSome = coptionSome;
    function coption(inner) {
      return {
        toFixedFromData(buf, offset) {
          if (isSomeBuffer(buf, offset)) {
            const innerFixed = (0, beet_fixable_1.fixBeetFromData)(inner, buf, offset + 1);
            return coptionSome(innerFixed);
          } else {
            (0, assert_1.strict)(isNoneBuffer(buf, offset), `Expected ${buf} to hold a COption`);
            return coptionNone(inner.description);
          }
        },
        toFixedFromValue(val) {
          return val == null ? coptionNone(inner.description) : coptionSome((0, beet_fixable_1.fixBeetFromValue)(inner, val));
        },
        description: `COption<${inner.description}>`
      };
    }
    exports.coption = coption;
    exports.compositesTypeMap = {
      option: {
        beet: "coption",
        isFixable: true,
        sourcePack: types_2.BEET_PACKAGE,
        ts: "COption<Inner>",
        arg: types_1.BEET_TYPE_ARG_INNER,
        pack: types_2.BEET_PACKAGE
      }
    };
  }
});

// ../../node_modules/@metaplex-foundation/beet/dist/cjs/src/beets/string.js
var require_string = __commonJS({
  "../../node_modules/@metaplex-foundation/beet/dist/cjs/src/beets/string.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.stringTypeMap = exports.utf8String = exports.fixedSizeUtf8String = void 0;
    var types_1 = require_types2();
    var assert_1 = require_assert();
    var numbers_1 = require_numbers();
    var utils_1 = require_utils2();
    var fixedSizeUtf8String = (stringByteLength) => {
      return {
        write: function(buf, offset, value) {
          const stringBuf = Buffer.from(value, "utf8");
          assert_1.strict.equal(stringBuf.byteLength, stringByteLength, `${value} has invalid byte size`);
          numbers_1.u32.write(buf, offset, stringByteLength);
          stringBuf.copy(buf, offset + 4, 0, stringByteLength);
        },
        read: function(buf, offset) {
          const size = numbers_1.u32.read(buf, offset);
          assert_1.strict.equal(size, stringByteLength, `invalid byte size`);
          const stringSlice = buf.slice(offset + 4, offset + 4 + stringByteLength);
          return stringSlice.toString("utf8");
        },
        elementByteSize: 1,
        length: stringByteLength,
        lenPrefixByteSize: 4,
        byteSize: 4 + stringByteLength,
        description: `Utf8String(4 + ${stringByteLength})`
      };
    };
    exports.fixedSizeUtf8String = fixedSizeUtf8String;
    exports.utf8String = {
      toFixedFromData(buf, offset) {
        const len = numbers_1.u32.read(buf, offset);
        (0, utils_1.logTrace)(`${this.description}[${len}]`);
        return (0, exports.fixedSizeUtf8String)(len);
      },
      toFixedFromValue(val) {
        const len = Buffer.from(val).byteLength;
        return (0, exports.fixedSizeUtf8String)(len);
      },
      description: `Utf8String`
    };
    exports.stringTypeMap = {
      fixedSizeString: {
        beet: "fixedSizeUtf8String",
        isFixable: false,
        sourcePack: types_1.BEET_PACKAGE,
        ts: "string",
        arg: types_1.BEET_TYPE_ARG_LEN
      },
      string: {
        beet: "utf8String",
        isFixable: true,
        sourcePack: types_1.BEET_PACKAGE,
        ts: "string"
      }
    };
  }
});

// ../../node_modules/@metaplex-foundation/beet/dist/cjs/src/read-write.js
var require_read_write = __commonJS({
  "../../node_modules/@metaplex-foundation/beet/dist/cjs/src/read-write.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.BeetReader = exports.BeetWriter = void 0;
    var assert_1 = require_assert();
    var BeetWriter3 = class {
      constructor(byteSize) {
        this.buf = Buffer.alloc(byteSize);
        this._offset = 0;
      }
      get buffer() {
        return this.buf;
      }
      get offset() {
        return this._offset;
      }
      maybeResize(bytesNeeded) {
        if (this._offset + bytesNeeded > this.buf.length) {
          assert_1.strict.fail(`We shouldn't ever need to resize, but ${this._offset + bytesNeeded} > ${this.buf.length}`);
        }
      }
      write(beet9, value) {
        this.maybeResize(beet9.byteSize);
        beet9.write(this.buf, this._offset, value);
        this._offset += beet9.byteSize;
      }
      writeStruct(instance, fields) {
        for (const [key, beet9] of fields) {
          const value = instance[key];
          this.write(beet9, value);
        }
      }
    };
    exports.BeetWriter = BeetWriter3;
    var BeetReader3 = class {
      constructor(buffer2, _offset = 0) {
        this.buffer = buffer2;
        this._offset = _offset;
      }
      get offset() {
        return this._offset;
      }
      read(beet9) {
        const value = beet9.read(this.buffer, this._offset);
        this._offset += beet9.byteSize;
        return value;
      }
      readStruct(fields) {
        const acc = {};
        for (const [key, beet9] of fields) {
          acc[key] = this.read(beet9);
        }
        return acc;
      }
    };
    exports.BeetReader = BeetReader3;
  }
});

// ../../node_modules/@metaplex-foundation/beet/dist/cjs/src/struct.js
var require_struct = __commonJS({
  "../../node_modules/@metaplex-foundation/beet/dist/cjs/src/struct.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.BeetArgsStruct = exports.isBeetStruct = exports.BeetStruct = void 0;
    var read_write_1 = require_read_write();
    var utils_1 = require_utils2();
    var BeetStruct = class _BeetStruct {
      /**
       * Creates an instance of the BeetStruct.
       *
       * @param fields de/serializers for each field of the {@link Class}
       * @param construct the function that creates an instance of {@link Class}
       * from the args
       * @param description identifies this struct for diagnostics/debugging
       * purposes
       */
      constructor(fields, construct, description = _BeetStruct.description) {
        this.fields = fields;
        this.construct = construct;
        this.description = description;
        this.byteSize = this.getByteSize();
        if (utils_1.logDebug.enabled) {
          const flds = fields.map(([key, val]) => `${String(key)}: ${val.description} ${(0, utils_1.beetBytes)(val)}`).join("\n  ");
          (0, utils_1.logDebug)(`struct ${description} {
  ${flds}
} ${(0, utils_1.beetBytes)(this)}`);
        }
      }
      /**
       * Along with `write` this allows structs to be treated as {@link Beet}s and
       * thus supports composing/nesting them the same way.
       * @private
       */
      read(buf, offset) {
        const [value] = this.deserialize(buf, offset);
        return value;
      }
      /**
       * Along with `read` this allows structs to be treated as {@link Beet}s and
       * thus supports composing/nesting them the same way.
       * @private
       */
      write(buf, offset, value) {
        const [innerBuf, innerOffset] = this.serialize(value);
        innerBuf.copy(buf, offset, 0, innerOffset);
      }
      /**
       * Deserializes an instance of the Class from the provided buffer starting to
       * read at the provided offset.
       *
       * @returns `[instance of Class, offset into buffer after deserialization completed]`
       */
      deserialize(buffer2, offset = 0) {
        if (utils_1.logTrace.enabled) {
          (0, utils_1.logTrace)("deserializing [%s] from %d bytes buffer", this.description, buffer2.byteLength);
          (0, utils_1.logTrace)(buffer2);
          (0, utils_1.logTrace)(buffer2.toJSON().data);
        }
        const reader = new read_write_1.BeetReader(buffer2, offset);
        const args = reader.readStruct(this.fields);
        return [this.construct(args), reader.offset];
      }
      /**
       * Serializes the provided instance into a new {@link Buffer}
       *
       * @param instance of the struct to serialize
       * @param byteSize allows to override the size fo the created Buffer and
       * defaults to the size of the struct to serialize
       */
      serialize(instance, byteSize = this.byteSize) {
        (0, utils_1.logTrace)("serializing [%s] %o to %d bytes buffer", this.description, instance, byteSize);
        const writer = new read_write_1.BeetWriter(byteSize);
        writer.writeStruct(instance, this.fields);
        return [writer.buffer, writer.offset];
      }
      getByteSize() {
        return this.fields.reduce((acc, [_, beet9]) => acc + beet9.byteSize, 0);
      }
      get type() {
        return _BeetStruct.TYPE;
      }
    };
    exports.BeetStruct = BeetStruct;
    BeetStruct.description = "BeetStruct";
    BeetStruct.TYPE = "BeetStruct";
    function isBeetStruct(beet9) {
      return beet9.type === BeetStruct.TYPE;
    }
    exports.isBeetStruct = isBeetStruct;
    var BeetArgsStruct = class _BeetArgsStruct extends BeetStruct {
      constructor(fields, description = _BeetArgsStruct.description) {
        super(fields, (args) => args, description);
      }
    };
    exports.BeetArgsStruct = BeetArgsStruct;
    BeetArgsStruct.description = "BeetArgsStruct";
  }
});

// ../../node_modules/@metaplex-foundation/beet/dist/cjs/src/struct.fixable.js
var require_struct_fixable = __commonJS({
  "../../node_modules/@metaplex-foundation/beet/dist/cjs/src/struct.fixable.js"(exports) {
    "use strict";
    var __importDefault = exports && exports.__importDefault || function(mod) {
      return mod && mod.__esModule ? mod : { "default": mod };
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.FixableBeetArgsStruct = exports.isFixableBeetStruct = exports.FixableBeetStruct = void 0;
    var beet_fixable_1 = require_beet_fixable();
    var struct_1 = require_struct();
    var types_1 = require_types2();
    var assert_1 = require_assert();
    var utils_1 = require_utils2();
    var ansicolors_1 = __importDefault(require_ansicolors());
    var { brightBlack } = ansicolors_1.default;
    var FixableBeetStruct = class _FixableBeetStruct {
      /**
       * Creates an instance of the {@link FixableBeetStruct}.
       *
       * @param fields fixed or fixable de/serializers for each field of the {@link Class}
       * @param construct the function that creates an instance of {@link Class}
       * from the args
       * @param description identifies this struct for diagnostics/debugging
       * purposes
       */
      constructor(fields, construct, description = _FixableBeetStruct.description) {
        this.fields = fields;
        this.construct = construct;
        this.description = description;
        let minByteSize = 0;
        if (utils_1.logDebug.enabled) {
          const flds = fields.map(([key, val]) => {
            if ((0, types_1.isFixedSizeBeet)(val)) {
              minByteSize += val.byteSize;
            }
            return `${key}: ${val.description} ${(0, utils_1.beetBytes)(val)}`;
          }).join("\n  ");
          const bytes = `> ${minByteSize} B`;
          (0, utils_1.logDebug)(`struct ${description} {
  ${flds}
} ${brightBlack(bytes)}`);
        }
      }
      /**
       * Deserializes an instance of the Class from the provided buffer starting to
       * read at the provided offset.
       *
       * @returns `[instance of Class, offset into buffer after deserialization completed]`
       */
      deserialize(buffer2, offset = 0) {
        return this.toFixedFromData(buffer2, offset).deserialize(buffer2, offset);
      }
      /**
       * Serializes the provided instance into a new {@link Buffer}
       *
       * **NOTE:** that the `instance` is traversed and each of its fields accessed
       * twice, once to derive a _fixed size_ {@link BeetStruct} and then use it to
       * serialize the `instance`.
       * Therefore ensure that none of the properties that are part of the struct
       * have side effects, i.e. via `Getter`s.
       *
       * @param instance of the struct to serialize
       * @param byteSize allows to override the size fo the created Buffer and
       * defaults to the size of the struct to serialize
       */
      serialize(instance, byteSize) {
        return this.toFixedFromValue(instance).serialize(instance, byteSize);
      }
      toFixedFromData(buf, offset) {
        let cursor = offset;
        const fixedFields = new Array(this.fields.length);
        for (let i = 0; i < this.fields.length; i++) {
          const [key, beet9] = this.fields[i];
          const fixedBeet = (0, beet_fixable_1.fixBeetFromData)(beet9, buf, cursor);
          fixedFields[i] = [key, fixedBeet];
          cursor += fixedBeet.byteSize;
        }
        return this.description !== _FixableBeetStruct.description ? new struct_1.BeetStruct(fixedFields, this.construct, this.description) : new struct_1.BeetStruct(fixedFields, this.construct);
      }
      toFixedFromValue(args) {
        const argsKeys = Object.keys(args);
        const fixedFields = new Array(this.fields.length);
        for (let i = 0; i < this.fields.length; i++) {
          const [key, beet9] = this.fields[i];
          (0, assert_1.strict)(argsKeys.includes(key), `Value with keys [ ${argsKeys} ] should include struct key '${key}' but doesn't.`);
          const val = args[key];
          const fixedBeet = (0, beet_fixable_1.fixBeetFromValue)(beet9, val);
          fixedFields[i] = [key, fixedBeet];
        }
        return this.description !== _FixableBeetStruct.description ? new struct_1.BeetStruct(fixedFields, this.construct, this.description) : new struct_1.BeetStruct(fixedFields, this.construct);
      }
      get type() {
        return _FixableBeetStruct.TYPE;
      }
    };
    exports.FixableBeetStruct = FixableBeetStruct;
    FixableBeetStruct.description = "FixableBeetStruct";
    FixableBeetStruct.TYPE = "FixableBeetStruct";
    function isFixableBeetStruct(beet9) {
      return beet9.type === FixableBeetStruct.TYPE;
    }
    exports.isFixableBeetStruct = isFixableBeetStruct;
    var FixableBeetArgsStruct = class _FixableBeetArgsStruct extends FixableBeetStruct {
      constructor(fields, description = _FixableBeetArgsStruct.description) {
        super(fields, (args) => args, description);
      }
    };
    exports.FixableBeetArgsStruct = FixableBeetArgsStruct;
    FixableBeetArgsStruct.description = "FixableBeetArgsStruct";
  }
});

// ../../node_modules/@metaplex-foundation/beet/dist/cjs/src/beets/unit.js
var require_unit = __commonJS({
  "../../node_modules/@metaplex-foundation/beet/dist/cjs/src/beets/unit.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.unitTypeMap = exports.unit = void 0;
    var types_1 = require_types2();
    exports.unit = {
      write: function(_buf, _offset, _value) {
      },
      read: function(_buf, _offset) {
        return void 0;
      },
      byteSize: 0,
      description: "unit"
    };
    exports.unitTypeMap = {
      unit: {
        beet: "unit",
        isFixable: false,
        sourcePack: types_1.BEET_PACKAGE,
        ts: "void"
      }
    };
  }
});

// ../../node_modules/@metaplex-foundation/beet/dist/cjs/src/beets/enums.js
var require_enums = __commonJS({
  "../../node_modules/@metaplex-foundation/beet/dist/cjs/src/beets/enums.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.enumsTypeMap = exports.dataEnum = exports.uniformDataEnum = exports.fixedScalarEnum = void 0;
    var types_1 = require_types2();
    var numbers_1 = require_numbers();
    var assert_1 = require_assert();
    var struct_1 = require_struct();
    var struct_fixable_1 = require_struct_fixable();
    var unit_1 = require_unit();
    function resolveEnumVariant(value, isNumVariant) {
      return isNumVariant ? `${value}` : value;
    }
    function fixedScalarEnum(enumType) {
      const keys = Object.keys(enumType);
      return {
        write(buf, offset, value) {
          const isNumVariant = typeof value === "number";
          const variantKey = resolveEnumVariant(value, isNumVariant);
          if (!keys.includes(variantKey)) {
            assert_1.strict.fail(`${value} should be a variant of the provided enum type, i.e. [ ${Object.values(enumType).join(", ")} ], but isn't`);
          }
          if (isNumVariant) {
            numbers_1.u8.write(buf, offset, value);
          } else {
            const enumValue = enumType[variantKey];
            numbers_1.u8.write(buf, offset, enumValue);
          }
        },
        read(buf, offset) {
          const value = numbers_1.u8.read(buf, offset);
          const isNumVariant = typeof value === "number";
          const variantKey = resolveEnumVariant(value, isNumVariant);
          if (!keys.includes(variantKey)) {
            assert_1.strict.fail(`${value} should be a of a variant of the provided enum type, i.e. [ ${Object.values(enumType).join(", ")} ], but isn't`);
          }
          return isNumVariant ? value : enumType[variantKey];
        },
        byteSize: numbers_1.u8.byteSize,
        description: "Enum"
      };
    }
    exports.fixedScalarEnum = fixedScalarEnum;
    function uniformDataEnum(inner) {
      return {
        write: function(buf, offset, value) {
          numbers_1.u8.write(buf, offset, value.kind);
          inner.write(buf, offset + 1, value.data);
        },
        read: function(buf, offset) {
          const kind = numbers_1.u8.read(buf, offset);
          const data = inner.read(buf, offset + 1);
          return { kind, data };
        },
        byteSize: 1 + inner.byteSize,
        description: `UniformDataEnum<${inner.description}>`
      };
    }
    exports.uniformDataEnum = uniformDataEnum;
    function enumDataVariantBeet(inner, discriminant, kind) {
      return {
        write(buf, offset, value) {
          numbers_1.u8.write(buf, offset, discriminant);
          inner.write(buf, offset + numbers_1.u8.byteSize, value);
        },
        read(buf, offset) {
          const val = inner.read(buf, offset + numbers_1.u8.byteSize);
          return __spreadValues({ __kind: kind }, val);
        },
        byteSize: inner.byteSize + numbers_1.u8.byteSize,
        description: `EnumData<${inner.description}>`
      };
    }
    function dataEnum(variants) {
      for (const [_, beet9] of variants) {
        (0, assert_1.strict)((0, struct_1.isBeetStruct)(beet9) || (0, struct_fixable_1.isFixableBeetStruct)(beet9) || // scalar variant
        beet9 === unit_1.unit, "dataEnum: variants must be a data beet struct or a scalar unit");
      }
      return {
        toFixedFromData(buf, offset) {
          const discriminant = numbers_1.u8.read(buf, offset);
          const variant = variants[discriminant];
          (0, assert_1.strict)(variant != null, `Discriminant ${discriminant} out of range for ${variants.length} variants`);
          const [__kind, dataBeet] = variant;
          const fixed = (0, types_1.isFixedSizeBeet)(dataBeet) ? dataBeet : dataBeet.toFixedFromData(buf, offset + 1);
          return enumDataVariantBeet(fixed, discriminant, __kind);
        },
        toFixedFromValue(val) {
          if (val.__kind == null) {
            const keys = Object.keys(val).join(", ");
            const validKinds = variants.map(([__kind2]) => __kind2).join(", ");
            assert_1.strict.fail(`Value with fields [ ${keys} ] is missing __kind, which needs to be set to one of [ ${validKinds} ]`);
          }
          const discriminant = variants.findIndex(([__kind2]) => __kind2 === val.__kind);
          if (discriminant < 0) {
            const validKinds = variants.map(([__kind2]) => __kind2).join(", ");
            assert_1.strict.fail(`${val.__kind} is not a valid kind, needs to be one of [ ${validKinds} ]`);
          }
          const variant = variants[discriminant];
          const _a = val, { __kind } = _a, dataValue = __objRest(_a, ["__kind"]);
          const [__variantKind, dataBeet] = variant;
          const fixed = (0, types_1.isFixedSizeBeet)(dataBeet) ? dataBeet : dataBeet.toFixedFromValue(dataValue);
          return enumDataVariantBeet(fixed, discriminant, __variantKind);
        },
        description: `DataEnum<${variants.length} variants>`
      };
    }
    exports.dataEnum = dataEnum;
    exports.enumsTypeMap = {
      fixedScalarEnum: {
        beet: "fixedScalarEnum",
        isFixable: false,
        sourcePack: types_1.BEET_PACKAGE,
        ts: "<TypeName>",
        arg: types_1.BEET_TYPE_ARG_INNER,
        pack: types_1.BEET_PACKAGE
      },
      dataEnum: {
        beet: "dataEnum",
        isFixable: false,
        sourcePack: types_1.BEET_PACKAGE,
        ts: "DataEnum<Kind, Inner>",
        arg: types_1.BEET_TYPE_ARG_INNER,
        pack: types_1.BEET_PACKAGE
      }
    };
  }
});

// ../../node_modules/@metaplex-foundation/beet/dist/cjs/src/beets/aliases.js
var require_aliases = __commonJS({
  "../../node_modules/@metaplex-foundation/beet/dist/cjs/src/beets/aliases.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.aliasesTypeMap = exports.bytes = void 0;
    var collections_1 = require_collections();
    exports.bytes = collections_1.uint8Array;
    exports.aliasesTypeMap = {
      // @ts-ignore
      bytes: collections_1.collectionsTypeMap.Uint8Array
    };
  }
});

// ../../node_modules/@metaplex-foundation/beet/dist/cjs/src/beets/tuples.js
var require_tuples = __commonJS({
  "../../node_modules/@metaplex-foundation/beet/dist/cjs/src/beets/tuples.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.tuplesTypeMap = exports.tuple = exports.fixedSizeTuple = void 0;
    var types_1 = require_types2();
    var assert_1 = require_assert();
    var beet_fixable_1 = require_beet_fixable();
    function fixedSizeTuple(elements) {
      const len = elements.length;
      const elDescs = elements.map((x) => x.description);
      const byteSizes = elements.map((x) => x.byteSize);
      const byteSize = byteSizes.reduce((acc, x) => acc + x, 0);
      return {
        write: function(buf, offset, value) {
          assert_1.strict.equal(value.length, len, `tuple value element size ${value.length} should match len ${len}`);
          let cursor = offset;
          for (let i = 0; i < len; i++) {
            const v = value[i];
            const beetEl = elements[i];
            beetEl.write(buf, cursor, v);
            cursor += beetEl.byteSize;
          }
        },
        read: function(buf, offset) {
          const els = [];
          let cursor = offset;
          for (let i = 0; i < len; i++) {
            const elBeet = elements[i];
            els[i] = elBeet.read(buf, cursor);
            cursor += elBeet.byteSize;
          }
          return els;
        },
        byteSize,
        length: len,
        description: `FixedSizeTuple<${elDescs.join(",")}>[ ${byteSizes.join(", ")} ]`
      };
    }
    exports.fixedSizeTuple = fixedSizeTuple;
    function tuple(elements) {
      const len = elements.length;
      const elDescs = elements.map((x) => x.description);
      return {
        toFixedFromData(buf, offset) {
          let cursor = offset;
          const fixedElements = new Array(len);
          for (let i = 0; i < len; i++) {
            const fixedElement = (0, beet_fixable_1.fixBeetFromData)(elements[i], buf, cursor);
            fixedElements[i] = fixedElement;
            cursor += fixedElement.byteSize;
          }
          return fixedSizeTuple(fixedElements);
        },
        toFixedFromValue(vals) {
          (0, assert_1.strict)(Array.isArray(vals), `${vals} should be an array of tuple values`);
          assert_1.strict.equal(vals.length, len, `There should be ${len} tuple values, but there are ${vals.length}`);
          const fixedElements = new Array(len);
          for (let i = 0; i < vals.length; i++) {
            const fixedElement = (0, beet_fixable_1.fixBeetFromValue)(elements[i], vals[i]);
            fixedElements[i] = fixedElement;
          }
          return fixedSizeTuple(fixedElements);
        },
        description: `Tuple<${elDescs.join(",")}>`
      };
    }
    exports.tuple = tuple;
    exports.tuplesTypeMap = {
      Tuple: {
        beet: "tuple",
        isFixable: true,
        sourcePack: types_1.BEET_PACKAGE,
        ts: "[__tuple_elements__]"
      },
      FixedSizeTuple: {
        beet: "fixedSizeTuple",
        isFixable: false,
        sourcePack: types_1.BEET_PACKAGE,
        ts: "[__tuple_elements__]"
      }
    };
  }
});

// ../../node_modules/@metaplex-foundation/beet/dist/cjs/src/beets/maps.js
var require_maps = __commonJS({
  "../../node_modules/@metaplex-foundation/beet/dist/cjs/src/beets/maps.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.mapsTypeMap = exports.map = void 0;
    var types_1 = require_types2();
    var numbers_1 = require_numbers();
    var utils_1 = require_utils2();
    var assert_1 = require_assert();
    function fixedSizeMap(keyElement, valElement, fixedElements, len) {
      const keyElementFixed = (0, types_1.isFixedSizeBeet)(keyElement);
      const valElementFixed = (0, types_1.isFixedSizeBeet)(valElement);
      function determineSizes() {
        if (keyElementFixed && valElementFixed) {
          const elementByteSize2 = keyElement.byteSize + valElement.byteSize;
          return {
            elementByteSize: elementByteSize2,
            byteSize: 4 + len * elementByteSize2
          };
        } else if (keyElementFixed) {
          let valsByteSize = 0;
          for (const [_, v] of fixedElements.values()) {
            valsByteSize += v.byteSize;
          }
          const elementByteSize2 = keyElement.byteSize + Math.ceil(valsByteSize / len);
          return {
            elementByteSize: elementByteSize2,
            byteSize: 4 + keyElement.byteSize * len + valsByteSize
          };
        } else if (valElementFixed) {
          let keysByteSize = 0;
          for (const [k, _] of fixedElements.values()) {
            keysByteSize += k.byteSize;
          }
          const elementByteSize2 = Math.ceil(keysByteSize / len) + valElement.byteSize;
          return {
            elementByteSize: elementByteSize2,
            byteSize: 4 + keysByteSize + valElement.byteSize * len
          };
        } else {
          let keysByteSize = 0;
          let valsByteSize = 0;
          for (const [k, v] of fixedElements.values()) {
            keysByteSize += k.byteSize;
            valsByteSize += v.byteSize;
          }
          const elementByteSize2 = Math.ceil(keysByteSize / len + valsByteSize / len);
          return {
            elementByteSize: elementByteSize2,
            byteSize: 4 + keysByteSize + valsByteSize
          };
        }
      }
      const { elementByteSize, byteSize } = determineSizes();
      return {
        write: function(buf, offset, map3) {
          let cursor = offset + 4;
          let size = 0;
          for (const [k, v] of map3.entries()) {
            let fixedKey = keyElementFixed ? keyElement : null;
            let fixedVal = valElementFixed ? valElement : null;
            if (fixedKey == null || fixedVal == null) {
              const els = fixedElements.get(k);
              (0, assert_1.strict)(els != null, `Should be able to find beet els for ${(0, utils_1.stringify)(k)}, but could not`);
              fixedKey !== null && fixedKey !== void 0 ? fixedKey : fixedKey = els[0];
              fixedVal !== null && fixedVal !== void 0 ? fixedVal : fixedVal = els[1];
            }
            fixedKey.write(buf, cursor, k);
            cursor += fixedKey.byteSize;
            fixedVal.write(buf, cursor, v);
            cursor += fixedVal.byteSize;
            size++;
          }
          numbers_1.u32.write(buf, offset, size);
          assert_1.strict.equal(size, len, `Expected map to have size ${len}, but has ${size}.`);
        },
        read: function(buf, offset) {
          const size = numbers_1.u32.read(buf, offset);
          assert_1.strict.equal(size, len, `Expected map to have size ${len}, but has ${size}.`);
          let cursor = offset + 4;
          const map3 = /* @__PURE__ */ new Map();
          for (let i = 0; i < size; i++) {
            const fixedKey = keyElementFixed ? keyElement : keyElement.toFixedFromData(buf, cursor);
            const k = fixedKey.read(buf, cursor);
            cursor += fixedKey.byteSize;
            const fixedVal = valElementFixed ? valElement : valElement.toFixedFromData(buf, cursor);
            const v = fixedVal.read(buf, cursor);
            cursor += fixedVal.byteSize;
            map3.set(k, v);
          }
          return map3;
        },
        elementByteSize,
        byteSize,
        length: len,
        lenPrefixByteSize: 4,
        description: `Map<${keyElement.description}, ${valElement.description}>`
      };
    }
    function map2(keyElement, valElement) {
      const keyIsFixed = (0, types_1.isFixedSizeBeet)(keyElement);
      const valIsFixed = (0, types_1.isFixedSizeBeet)(valElement);
      return {
        toFixedFromData(buf, offset) {
          const len = numbers_1.u32.read(buf, offset);
          let cursor = offset + 4;
          if (keyIsFixed && valIsFixed) {
            return fixedSizeMap(keyElement, valElement, /* @__PURE__ */ new Map(), len);
          }
          const fixedBeets = /* @__PURE__ */ new Map();
          for (let i = 0; i < len; i++) {
            const keyFixed = keyIsFixed ? keyElement : keyElement.toFixedFromData(buf, cursor);
            const key = keyFixed.read(buf, cursor);
            cursor += keyFixed.byteSize;
            const valFixed = valIsFixed ? valElement : valElement.toFixedFromData(buf, cursor);
            cursor += valFixed.byteSize;
            fixedBeets.set(key, [keyFixed, valFixed]);
          }
          return fixedSizeMap(keyElement, valElement, fixedBeets, len);
        },
        toFixedFromValue(mapVal) {
          const len = mapVal.size;
          if (keyIsFixed && valIsFixed) {
            return fixedSizeMap(keyElement, valElement, /* @__PURE__ */ new Map(), len);
          }
          const fixedBeets = /* @__PURE__ */ new Map();
          for (const [k, v] of mapVal) {
            const keyFixed = keyIsFixed ? keyElement : keyElement.toFixedFromValue(k);
            const valFixed = valIsFixed ? valElement : valElement.toFixedFromValue(v);
            fixedBeets.set(k, [keyFixed, valFixed]);
          }
          return fixedSizeMap(keyElement, valElement, fixedBeets, len);
        },
        description: `FixableMap<${keyElement.description}, ${valElement.description}>`
      };
    }
    exports.map = map2;
    exports.mapsTypeMap = {
      Map: {
        beet: "map",
        isFixable: true,
        sourcePack: types_1.BEET_PACKAGE,
        ts: "Map"
      }
    };
  }
});

// ../../node_modules/@metaplex-foundation/beet/dist/cjs/src/beets/sets.js
var require_sets = __commonJS({
  "../../node_modules/@metaplex-foundation/beet/dist/cjs/src/beets/sets.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.setsTypeMap = exports.set = void 0;
    var types_1 = require_types2();
    var numbers_1 = require_numbers();
    var utils_1 = require_utils2();
    var assert_1 = require_assert();
    function fixedSizeSet(keyElement, fixedElements, len) {
      const keyElementFixed = (0, types_1.isFixedSizeBeet)(keyElement);
      function determineSizes() {
        if (keyElementFixed) {
          const elementByteSize2 = keyElement.byteSize;
          return {
            elementByteSize: elementByteSize2,
            byteSize: 4 + len * elementByteSize2
          };
        } else {
          let keysByteSize = 0;
          for (const k of fixedElements.values()) {
            keysByteSize += k.byteSize;
          }
          const elementByteSize2 = Math.ceil(keysByteSize / len);
          return {
            elementByteSize: elementByteSize2,
            byteSize: 4 + keysByteSize
          };
        }
      }
      const { elementByteSize, byteSize } = determineSizes();
      return {
        write: function(buf, offset, set2) {
          let cursor = offset + 4;
          let size = 0;
          for (const k of set2.keys()) {
            let fixedKey = keyElementFixed ? keyElement : null;
            if (fixedKey == null) {
              const el = fixedElements.get(k);
              (0, assert_1.strict)(el != null, `Should be able to find beet el for ${(0, utils_1.stringify)(k)}, but could not`);
              fixedKey !== null && fixedKey !== void 0 ? fixedKey : fixedKey = el;
            }
            fixedKey.write(buf, cursor, k);
            cursor += fixedKey.byteSize;
            size++;
          }
          numbers_1.u32.write(buf, offset, size);
          assert_1.strict.equal(size, len, `Expected set to have size ${len}, but has ${size}.`);
        },
        read: function(buf, offset) {
          const size = numbers_1.u32.read(buf, offset);
          assert_1.strict.equal(size, len, `Expected set to have size ${len}, but has ${size}.`);
          let cursor = offset + 4;
          const set2 = /* @__PURE__ */ new Set();
          for (let i = 0; i < size; i++) {
            const fixedKey = keyElementFixed ? keyElement : keyElement.toFixedFromData(buf, cursor);
            const k = fixedKey.read(buf, cursor);
            cursor += fixedKey.byteSize;
            set2.add(k);
          }
          return set2;
        },
        elementByteSize,
        byteSize,
        length: len,
        lenPrefixByteSize: 4,
        description: `Set<${keyElement.description}>`
      };
    }
    function set(keyElement) {
      const keyIsFixed = (0, types_1.isFixedSizeBeet)(keyElement);
      return {
        toFixedFromData(buf, offset) {
          const len = numbers_1.u32.read(buf, offset);
          let cursor = offset + 4;
          if (keyIsFixed) {
            return fixedSizeSet(keyElement, /* @__PURE__ */ new Map(), len);
          }
          const fixedBeets = /* @__PURE__ */ new Map();
          for (let i = 0; i < len; i++) {
            const keyFixed = keyIsFixed ? keyElement : keyElement.toFixedFromData(buf, cursor);
            const key = keyFixed.read(buf, cursor);
            cursor += keyFixed.byteSize;
            fixedBeets.set(key, keyFixed);
          }
          return fixedSizeSet(keyElement, fixedBeets, len);
        },
        toFixedFromValue(setVal) {
          const len = setVal.size;
          if (keyIsFixed) {
            return fixedSizeSet(keyElement, /* @__PURE__ */ new Map(), len);
          }
          const fixedBeets = /* @__PURE__ */ new Map();
          for (const k of setVal) {
            const keyFixed = keyIsFixed ? keyElement : keyElement.toFixedFromValue(k);
            fixedBeets.set(k, keyFixed);
          }
          return fixedSizeSet(keyElement, fixedBeets, len);
        },
        description: `FixableSet<${keyElement.description}>`
      };
    }
    exports.set = set;
    exports.setsTypeMap = {
      Set: {
        beet: "set",
        isFixable: true,
        sourcePack: types_1.BEET_PACKAGE,
        ts: "Set"
      }
    };
  }
});

// ../../node_modules/@metaplex-foundation/beet/dist/cjs/src/beet.js
var require_beet = __commonJS({
  "../../node_modules/@metaplex-foundation/beet/dist/cjs/src/beet.js"(exports) {
    "use strict";
    var __createBinding = exports && exports.__createBinding || (Object.create ? function(o2, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      var desc = Object.getOwnPropertyDescriptor(m, k);
      if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m[k];
        } };
      }
      Object.defineProperty(o2, k2, desc);
    } : function(o2, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      o2[k2] = m[k];
    });
    var __exportStar = exports && exports.__exportStar || function(m, exports2) {
      for (var p in m)
        if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports2, p))
          __createBinding(exports2, m, p);
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.supportedTypeMap = void 0;
    var collections_1 = require_collections();
    var composites_1 = require_composites();
    var numbers_1 = require_numbers();
    var string_1 = require_string();
    var enums_1 = require_enums();
    var aliases_1 = require_aliases();
    var tuples_1 = require_tuples();
    var maps_1 = require_maps();
    var unit_1 = require_unit();
    var sets_1 = require_sets();
    __exportStar(require_aliases(), exports);
    __exportStar(require_collections(), exports);
    __exportStar(require_composites(), exports);
    __exportStar(require_enums(), exports);
    __exportStar(require_maps(), exports);
    __exportStar(require_numbers(), exports);
    __exportStar(require_sets(), exports);
    __exportStar(require_string(), exports);
    __exportStar(require_tuples(), exports);
    __exportStar(require_unit(), exports);
    __exportStar(require_beet_fixable(), exports);
    __exportStar(require_read_write(), exports);
    __exportStar(require_struct(), exports);
    __exportStar(require_struct_fixable(), exports);
    __exportStar(require_types2(), exports);
    exports.supportedTypeMap = __spreadValues(__spreadValues(__spreadValues(__spreadValues(__spreadValues(__spreadValues(__spreadValues(__spreadValues(__spreadValues(__spreadValues({}, collections_1.collectionsTypeMap), string_1.stringTypeMap), composites_1.compositesTypeMap), enums_1.enumsTypeMap), numbers_1.numbersTypeMap), aliases_1.aliasesTypeMap), tuples_1.tuplesTypeMap), maps_1.mapsTypeMap), sets_1.setsTypeMap), unit_1.unitTypeMap);
  }
});

// ../../node_modules/@metaplex-foundation/mpl-token-metadata/node_modules/@metaplex-foundation/beet-solana/dist/cjs/src/keys.js
var require_keys = __commonJS({
  "../../node_modules/@metaplex-foundation/mpl-token-metadata/node_modules/@metaplex-foundation/beet-solana/dist/cjs/src/keys.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.keysTypeMap = exports.publicKey = void 0;
    var web3_js_1 = (init_index_browser_esm(), __toCommonJS(index_browser_esm_exports));
    var beet_1 = require_beet();
    var BEET_SOLANA_PACKAGE = "@metaplex-foundation/beet-solana";
    var SOLANA_WEB3_PACKAGE = "@solana/web3.js";
    var uint8Array32 = (0, beet_1.fixedSizeUint8Array)(32);
    exports.publicKey = {
      write: function(buf, offset, value) {
        const arr = value.toBytes();
        uint8Array32.write(buf, offset, arr);
      },
      read: function(buf, offset) {
        const bytes = uint8Array32.read(buf, offset);
        return new web3_js_1.PublicKey(bytes);
      },
      byteSize: uint8Array32.byteSize,
      description: "PublicKey"
    };
    exports.keysTypeMap = {
      publicKey: {
        beet: "publicKey",
        isFixable: false,
        sourcePack: BEET_SOLANA_PACKAGE,
        ts: "PublicKey",
        pack: SOLANA_WEB3_PACKAGE
      }
    };
  }
});

// ../../node_modules/@metaplex-foundation/mpl-token-metadata/node_modules/@metaplex-foundation/beet-solana/dist/cjs/src/utils.js
var require_utils3 = __commonJS({
  "../../node_modules/@metaplex-foundation/mpl-token-metadata/node_modules/@metaplex-foundation/beet-solana/dist/cjs/src/utils.js"(exports) {
    "use strict";
    var __importDefault = exports && exports.__importDefault || function(mod) {
      return mod && mod.__esModule ? mod : { "default": mod };
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.logTrace = exports.logDebug = exports.logInfo = exports.logError = void 0;
    var debug_1 = __importDefault(require_browser2());
    exports.logError = (0, debug_1.default)("beet:error");
    exports.logInfo = (0, debug_1.default)("beet:info");
    exports.logDebug = (0, debug_1.default)("beet:debug");
    exports.logTrace = (0, debug_1.default)("beet:trace");
  }
});

// ../../node_modules/@metaplex-foundation/mpl-token-metadata/node_modules/@metaplex-foundation/beet-solana/dist/cjs/src/gpa/util.js
var require_util = __commonJS({
  "../../node_modules/@metaplex-foundation/mpl-token-metadata/node_modules/@metaplex-foundation/beet-solana/dist/cjs/src/gpa/util.js"(exports) {
    "use strict";
    var __importDefault = exports && exports.__importDefault || function(mod) {
      return mod && mod.__esModule ? mod : { "default": mod };
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.encodeFixedBeet = void 0;
    var bs58_1 = __importDefault(require_bs58());
    function encodeFixedBeet(beet9, val) {
      const buf = Buffer.alloc(beet9.byteSize);
      beet9.write(buf, 0, val);
      return bs58_1.default.encode(buf);
    }
    exports.encodeFixedBeet = encodeFixedBeet;
  }
});

// ../../node_modules/@metaplex-foundation/mpl-token-metadata/node_modules/@metaplex-foundation/beet-solana/dist/cjs/src/gpa/index.js
var require_gpa = __commonJS({
  "../../node_modules/@metaplex-foundation/mpl-token-metadata/node_modules/@metaplex-foundation/beet-solana/dist/cjs/src/gpa/index.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.GpaBuilder = void 0;
    var beet_1 = require_beet();
    var assert_1 = require_assert();
    var utils_1 = require_utils3();
    var util_1 = require_util();
    var GpaBuilder2 = class _GpaBuilder {
      constructor(programId, beets, accountSize) {
        this.programId = programId;
        this.beets = beets;
        this.accountSize = accountSize;
        this.config = {};
      }
      _addFilter(filter) {
        if (this.config.filters == null) {
          this.config.filters = [];
        }
        this.config.filters.push(filter);
        return this;
      }
      _addInnerFilter(key, innerKey, val) {
        (0, utils_1.logTrace)(`gpa.addInnerFilter: ${key}.${innerKey}`);
        const outerBeetInfo = this.beets.get(key);
        (0, assert_1.strict)(outerBeetInfo != null, "Outer filter key needs to be an existing field name");
        const beetInfo = outerBeetInfo.beet;
        let offset = outerBeetInfo.offset;
        const outerBeet = (0, beet_1.isFixedSizeBeet)(beetInfo) ? beetInfo : beetInfo.toFixedFromValue(val);
        let beet9;
        for (const [k, v] of outerBeet.fields) {
          if (k === innerKey) {
            beet9 = v;
            break;
          }
          offset += v.byteSize;
        }
        (0, assert_1.strict)(beet9 != null, `${innerKey} is not a field of the ${key} struct`);
        const bytes = (0, util_1.encodeFixedBeet)(beet9, val);
        this._addFilter({ memcmp: { offset, bytes } });
        return this;
      }
      /**
       * Adds a _memcmp_ filter for a field inside a field which is a struct value.
       * The provided keys need to be separated by a `.` and only one level of
       * nesting is supported at this point.
       *
       * The filter is applied to the inner value.
       *
       * ## Example
       *
       * ### Given:
       *
       * ```typescript
       * type Inner = {
       *   a: number
       * }
       * type Outer = {
       *   idx: number
       *   inner: Inner
       * }
       * ```
       * ### Apply a filter on `a` of the `Inner` type:
       *
       * ```typescript
       * gpaBuilder.addInnerFilter('inner.a', 2)
       * ```
       *
       * @param keys - the names of the fields by which to filter, i.e. `'outer.inner'`
       * @param val - the field value that the filter should match
       */
      addInnerFilter(keys, val) {
        const parts = keys.split(".");
        assert_1.strict.equal(parts.length, 2, `inner filters can go only one level deep, i.e. 'outer.inner' is ok, but 'outer.inner.deep' is not`);
        const [ka, kb] = parts;
        return this._addInnerFilter(ka, kb, val);
      }
      /**
       * Adds a _memcmp_ filter for the provided {@link key} of the struct.
       *
       * @param key - the name of the field by which to filter
       * @param val - the field value that the filter should match
       */
      addFilter(key, val) {
        const beetInfo = this.beets.get(key);
        (0, assert_1.strict)(beetInfo != null, "Filter key needs to be an existing field name");
        const beet9 = (0, beet_1.isFixedSizeBeet)(beetInfo.beet) ? beetInfo.beet : beetInfo.beet.toFixedFromValue(val);
        const bytes = (0, util_1.encodeFixedBeet)(beet9, val);
        this._addFilter({ memcmp: { offset: beetInfo.offset, bytes } });
        return this;
      }
      /**
       * Adds a `dataSize` filter which will match on account's sizes.
       * You have to provide that {@link size} for accounts that don't have a fixed size.
       * For _fixed_ size accounts that size is determined for you.
       *
       * @param size - the account size to match for
       */
      dataSize(size) {
        size = size !== null && size !== void 0 ? size : this.accountSize;
        (0, assert_1.strict)(size != null, "for accounts of dynamic size the dataSize arg needs to be provided");
        return this._addFilter({ dataSize: size });
      }
      /**
       * Attempts to find the accounts matching the configured filters.
       *
       * @param connection used to query the program accounts on the cluster
       */
      run(connection) {
        return connection.getProgramAccounts(this.programId, this.config);
      }
      /**
       * Creates a GPA builder that supports adding up to four filters for
       * fixed size fields.
       *
       * Once a non-fixed field is encountered, the remaining fields following it
       * will not be included as a filter option since their position in the
       * bytes array will change depending on the content of the non-fixed field.
       *
       * @param programId - the id of the program that owns the accounts we are querying
       * @param beetFields - the beet fields that make up the structure of the account data
       */
      static fromBeetFields(programId, beetFields) {
        const map2 = /* @__PURE__ */ new Map();
        let offset = 0;
        let encounteredNonFixed = false;
        for (const [k, v] of beetFields) {
          map2.set(k, { beet: v, offset });
          if (!(0, beet_1.isFixedSizeBeet)(v)) {
            encounteredNonFixed = true;
            break;
          }
          offset += v.byteSize;
        }
        const accountSize = encounteredNonFixed ? void 0 : offset;
        return new _GpaBuilder(programId, map2, accountSize);
      }
      /**
       * Convenience wrapper around {@link GpaBuilder.fromBeetFields} that allows
       * providing a struct which contains the beet fields.
       *
       * @param programId - the id of the program that owns the accounts we are querying
       * @param struct - containing the beet `fields` specifying the layout of the account
       */
      static fromStruct(programId, struct51) {
        return _GpaBuilder.fromBeetFields(programId, struct51.fields);
      }
    };
    exports.GpaBuilder = GpaBuilder2;
  }
});

// ../../node_modules/@metaplex-foundation/mpl-token-metadata/node_modules/@metaplex-foundation/beet-solana/dist/cjs/src/beet-solana.js
var require_beet_solana = __commonJS({
  "../../node_modules/@metaplex-foundation/mpl-token-metadata/node_modules/@metaplex-foundation/beet-solana/dist/cjs/src/beet-solana.js"(exports) {
    "use strict";
    var __createBinding = exports && exports.__createBinding || (Object.create ? function(o2, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      var desc = Object.getOwnPropertyDescriptor(m, k);
      if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m[k];
        } };
      }
      Object.defineProperty(o2, k2, desc);
    } : function(o2, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      o2[k2] = m[k];
    });
    var __exportStar = exports && exports.__exportStar || function(m, exports2) {
      for (var p in m)
        if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports2, p))
          __createBinding(exports2, m, p);
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.supportedTypeMap = void 0;
    var keys_1 = require_keys();
    __exportStar(require_keys(), exports);
    __exportStar(require_gpa(), exports);
    exports.supportedTypeMap = keys_1.keysTypeMap;
  }
});

// ../../node_modules/@metaplex-foundation/mpl-token-metadata/dist/src/generated/types/Key.js
var require_Key = __commonJS({
  "../../node_modules/@metaplex-foundation/mpl-token-metadata/dist/src/generated/types/Key.js"(exports) {
    "use strict";
    var __createBinding = exports && exports.__createBinding || (Object.create ? function(o2, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      var desc = Object.getOwnPropertyDescriptor(m, k);
      if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m[k];
        } };
      }
      Object.defineProperty(o2, k2, desc);
    } : function(o2, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      o2[k2] = m[k];
    });
    var __setModuleDefault = exports && exports.__setModuleDefault || (Object.create ? function(o2, v) {
      Object.defineProperty(o2, "default", { enumerable: true, value: v });
    } : function(o2, v) {
      o2["default"] = v;
    });
    var __importStar = exports && exports.__importStar || function(mod) {
      if (mod && mod.__esModule)
        return mod;
      var result = {};
      if (mod != null) {
        for (var k in mod)
          if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k))
            __createBinding(result, mod, k);
      }
      __setModuleDefault(result, mod);
      return result;
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.keyBeet = exports.Key = void 0;
    var beet9 = __importStar(require_beet());
    var Key104;
    (function(Key105) {
      Key105[Key105["Uninitialized"] = 0] = "Uninitialized";
      Key105[Key105["EditionV1"] = 1] = "EditionV1";
      Key105[Key105["MasterEditionV1"] = 2] = "MasterEditionV1";
      Key105[Key105["ReservationListV1"] = 3] = "ReservationListV1";
      Key105[Key105["MetadataV1"] = 4] = "MetadataV1";
      Key105[Key105["ReservationListV2"] = 5] = "ReservationListV2";
      Key105[Key105["MasterEditionV2"] = 6] = "MasterEditionV2";
      Key105[Key105["EditionMarker"] = 7] = "EditionMarker";
      Key105[Key105["UseAuthorityRecord"] = 8] = "UseAuthorityRecord";
      Key105[Key105["CollectionAuthorityRecord"] = 9] = "CollectionAuthorityRecord";
      Key105[Key105["TokenOwnedEscrow"] = 10] = "TokenOwnedEscrow";
      Key105[Key105["TokenRecord"] = 11] = "TokenRecord";
      Key105[Key105["MetadataDelegate"] = 12] = "MetadataDelegate";
      Key105[Key105["EditionMarkerV2"] = 13] = "EditionMarkerV2";
    })(Key104 = exports.Key || (exports.Key = {}));
    exports.keyBeet = beet9.fixedScalarEnum(Key104);
  }
});

// ../../node_modules/@metaplex-foundation/mpl-token-metadata/dist/src/generated/accounts/CollectionAuthorityRecord.js
var require_CollectionAuthorityRecord = __commonJS({
  "../../node_modules/@metaplex-foundation/mpl-token-metadata/dist/src/generated/accounts/CollectionAuthorityRecord.js"(exports) {
    "use strict";
    var __createBinding = exports && exports.__createBinding || (Object.create ? function(o2, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      var desc = Object.getOwnPropertyDescriptor(m, k);
      if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m[k];
        } };
      }
      Object.defineProperty(o2, k2, desc);
    } : function(o2, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      o2[k2] = m[k];
    });
    var __setModuleDefault = exports && exports.__setModuleDefault || (Object.create ? function(o2, v) {
      Object.defineProperty(o2, "default", { enumerable: true, value: v });
    } : function(o2, v) {
      o2["default"] = v;
    });
    var __importStar = exports && exports.__importStar || function(mod) {
      if (mod && mod.__esModule)
        return mod;
      var result = {};
      if (mod != null) {
        for (var k in mod)
          if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k))
            __createBinding(result, mod, k);
      }
      __setModuleDefault(result, mod);
      return result;
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.collectionAuthorityRecordBeet = exports.CollectionAuthorityRecord = void 0;
    var web3 = __importStar((init_index_browser_esm(), __toCommonJS(index_browser_esm_exports)));
    var beet9 = __importStar(require_beet());
    var beetSolana = __importStar(require_beet_solana());
    var Key_1 = require_Key();
    var CollectionAuthorityRecord = class _CollectionAuthorityRecord {
      constructor(key, bump, updateAuthority) {
        this.key = key;
        this.bump = bump;
        this.updateAuthority = updateAuthority;
      }
      static fromArgs(args) {
        return new _CollectionAuthorityRecord(args.key, args.bump, args.updateAuthority);
      }
      static fromAccountInfo(accountInfo, offset = 0) {
        return _CollectionAuthorityRecord.deserialize(accountInfo.data, offset);
      }
      static fromAccountAddress(connection, address, commitmentOrConfig) {
        return __async(this, null, function* () {
          const accountInfo = yield connection.getAccountInfo(address, commitmentOrConfig);
          if (accountInfo == null) {
            throw new Error(`Unable to find CollectionAuthorityRecord account at ${address}`);
          }
          return _CollectionAuthorityRecord.fromAccountInfo(accountInfo, 0)[0];
        });
      }
      static gpaBuilder(programId = new web3.PublicKey("metaqbxxUerdq28cj1RbAWkYQm3ybzjb6a8bt518x1s")) {
        return beetSolana.GpaBuilder.fromStruct(programId, exports.collectionAuthorityRecordBeet);
      }
      static deserialize(buf, offset = 0) {
        return exports.collectionAuthorityRecordBeet.deserialize(buf, offset);
      }
      serialize() {
        return exports.collectionAuthorityRecordBeet.serialize(this);
      }
      static byteSize(args) {
        const instance = _CollectionAuthorityRecord.fromArgs(args);
        return exports.collectionAuthorityRecordBeet.toFixedFromValue(instance).byteSize;
      }
      static getMinimumBalanceForRentExemption(args, connection, commitment) {
        return __async(this, null, function* () {
          return connection.getMinimumBalanceForRentExemption(_CollectionAuthorityRecord.byteSize(args), commitment);
        });
      }
      pretty() {
        return {
          key: "Key." + Key_1.Key[this.key],
          bump: this.bump,
          updateAuthority: this.updateAuthority
        };
      }
    };
    exports.CollectionAuthorityRecord = CollectionAuthorityRecord;
    exports.collectionAuthorityRecordBeet = new beet9.FixableBeetStruct([
      ["key", Key_1.keyBeet],
      ["bump", beet9.u8],
      ["updateAuthority", beet9.coption(beetSolana.publicKey)]
    ], CollectionAuthorityRecord.fromArgs, "CollectionAuthorityRecord");
  }
});

// ../../node_modules/@metaplex-foundation/mpl-token-metadata/dist/src/generated/accounts/Edition.js
var require_Edition = __commonJS({
  "../../node_modules/@metaplex-foundation/mpl-token-metadata/dist/src/generated/accounts/Edition.js"(exports) {
    "use strict";
    var __createBinding = exports && exports.__createBinding || (Object.create ? function(o2, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      var desc = Object.getOwnPropertyDescriptor(m, k);
      if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m[k];
        } };
      }
      Object.defineProperty(o2, k2, desc);
    } : function(o2, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      o2[k2] = m[k];
    });
    var __setModuleDefault = exports && exports.__setModuleDefault || (Object.create ? function(o2, v) {
      Object.defineProperty(o2, "default", { enumerable: true, value: v });
    } : function(o2, v) {
      o2["default"] = v;
    });
    var __importStar = exports && exports.__importStar || function(mod) {
      if (mod && mod.__esModule)
        return mod;
      var result = {};
      if (mod != null) {
        for (var k in mod)
          if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k))
            __createBinding(result, mod, k);
      }
      __setModuleDefault(result, mod);
      return result;
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.editionBeet = exports.Edition = void 0;
    var web3 = __importStar((init_index_browser_esm(), __toCommonJS(index_browser_esm_exports)));
    var beet9 = __importStar(require_beet());
    var beetSolana = __importStar(require_beet_solana());
    var Key_1 = require_Key();
    var Edition2 = class _Edition {
      constructor(key, parent, edition) {
        this.key = key;
        this.parent = parent;
        this.edition = edition;
      }
      static fromArgs(args) {
        return new _Edition(args.key, args.parent, args.edition);
      }
      static fromAccountInfo(accountInfo, offset = 0) {
        return _Edition.deserialize(accountInfo.data, offset);
      }
      static fromAccountAddress(connection, address, commitmentOrConfig) {
        return __async(this, null, function* () {
          const accountInfo = yield connection.getAccountInfo(address, commitmentOrConfig);
          if (accountInfo == null) {
            throw new Error(`Unable to find Edition account at ${address}`);
          }
          return _Edition.fromAccountInfo(accountInfo, 0)[0];
        });
      }
      static gpaBuilder(programId = new web3.PublicKey("metaqbxxUerdq28cj1RbAWkYQm3ybzjb6a8bt518x1s")) {
        return beetSolana.GpaBuilder.fromStruct(programId, exports.editionBeet);
      }
      static deserialize(buf, offset = 0) {
        return exports.editionBeet.deserialize(buf, offset);
      }
      serialize() {
        return exports.editionBeet.serialize(this);
      }
      static get byteSize() {
        return exports.editionBeet.byteSize;
      }
      static getMinimumBalanceForRentExemption(connection, commitment) {
        return __async(this, null, function* () {
          return connection.getMinimumBalanceForRentExemption(_Edition.byteSize, commitment);
        });
      }
      static hasCorrectByteSize(buf, offset = 0) {
        return buf.byteLength - offset === _Edition.byteSize;
      }
      pretty() {
        return {
          key: "Key." + Key_1.Key[this.key],
          parent: this.parent.toBase58(),
          edition: (() => {
            const x = this.edition;
            if (typeof x.toNumber === "function") {
              try {
                return x.toNumber();
              } catch (_) {
                return x;
              }
            }
            return x;
          })()
        };
      }
    };
    exports.Edition = Edition2;
    exports.editionBeet = new beet9.BeetStruct([
      ["key", Key_1.keyBeet],
      ["parent", beetSolana.publicKey],
      ["edition", beet9.u64]
    ], Edition2.fromArgs, "Edition");
  }
});

// ../../node_modules/@metaplex-foundation/mpl-token-metadata/dist/src/generated/accounts/EditionMarker.js
var require_EditionMarker = __commonJS({
  "../../node_modules/@metaplex-foundation/mpl-token-metadata/dist/src/generated/accounts/EditionMarker.js"(exports) {
    "use strict";
    var __createBinding = exports && exports.__createBinding || (Object.create ? function(o2, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      var desc = Object.getOwnPropertyDescriptor(m, k);
      if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m[k];
        } };
      }
      Object.defineProperty(o2, k2, desc);
    } : function(o2, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      o2[k2] = m[k];
    });
    var __setModuleDefault = exports && exports.__setModuleDefault || (Object.create ? function(o2, v) {
      Object.defineProperty(o2, "default", { enumerable: true, value: v });
    } : function(o2, v) {
      o2["default"] = v;
    });
    var __importStar = exports && exports.__importStar || function(mod) {
      if (mod && mod.__esModule)
        return mod;
      var result = {};
      if (mod != null) {
        for (var k in mod)
          if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k))
            __createBinding(result, mod, k);
      }
      __setModuleDefault(result, mod);
      return result;
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.editionMarkerBeet = exports.EditionMarker = void 0;
    var beet9 = __importStar(require_beet());
    var web3 = __importStar((init_index_browser_esm(), __toCommonJS(index_browser_esm_exports)));
    var beetSolana = __importStar(require_beet_solana());
    var Key_1 = require_Key();
    var EditionMarker = class _EditionMarker {
      constructor(key, ledger) {
        this.key = key;
        this.ledger = ledger;
      }
      static fromArgs(args) {
        return new _EditionMarker(args.key, args.ledger);
      }
      static fromAccountInfo(accountInfo, offset = 0) {
        return _EditionMarker.deserialize(accountInfo.data, offset);
      }
      static fromAccountAddress(connection, address, commitmentOrConfig) {
        return __async(this, null, function* () {
          const accountInfo = yield connection.getAccountInfo(address, commitmentOrConfig);
          if (accountInfo == null) {
            throw new Error(`Unable to find EditionMarker account at ${address}`);
          }
          return _EditionMarker.fromAccountInfo(accountInfo, 0)[0];
        });
      }
      static gpaBuilder(programId = new web3.PublicKey("metaqbxxUerdq28cj1RbAWkYQm3ybzjb6a8bt518x1s")) {
        return beetSolana.GpaBuilder.fromStruct(programId, exports.editionMarkerBeet);
      }
      static deserialize(buf, offset = 0) {
        return exports.editionMarkerBeet.deserialize(buf, offset);
      }
      serialize() {
        return exports.editionMarkerBeet.serialize(this);
      }
      static get byteSize() {
        return exports.editionMarkerBeet.byteSize;
      }
      static getMinimumBalanceForRentExemption(connection, commitment) {
        return __async(this, null, function* () {
          return connection.getMinimumBalanceForRentExemption(_EditionMarker.byteSize, commitment);
        });
      }
      static hasCorrectByteSize(buf, offset = 0) {
        return buf.byteLength - offset === _EditionMarker.byteSize;
      }
      pretty() {
        return {
          key: "Key." + Key_1.Key[this.key],
          ledger: this.ledger
        };
      }
    };
    exports.EditionMarker = EditionMarker;
    exports.editionMarkerBeet = new beet9.BeetStruct([
      ["key", Key_1.keyBeet],
      ["ledger", beet9.uniformFixedSizeArray(beet9.u8, 31)]
    ], EditionMarker.fromArgs, "EditionMarker");
  }
});

// ../../node_modules/@metaplex-foundation/mpl-token-metadata/dist/src/generated/accounts/EditionMarkerV2.js
var require_EditionMarkerV2 = __commonJS({
  "../../node_modules/@metaplex-foundation/mpl-token-metadata/dist/src/generated/accounts/EditionMarkerV2.js"(exports) {
    "use strict";
    var __createBinding = exports && exports.__createBinding || (Object.create ? function(o2, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      var desc = Object.getOwnPropertyDescriptor(m, k);
      if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m[k];
        } };
      }
      Object.defineProperty(o2, k2, desc);
    } : function(o2, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      o2[k2] = m[k];
    });
    var __setModuleDefault = exports && exports.__setModuleDefault || (Object.create ? function(o2, v) {
      Object.defineProperty(o2, "default", { enumerable: true, value: v });
    } : function(o2, v) {
      o2["default"] = v;
    });
    var __importStar = exports && exports.__importStar || function(mod) {
      if (mod && mod.__esModule)
        return mod;
      var result = {};
      if (mod != null) {
        for (var k in mod)
          if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k))
            __createBinding(result, mod, k);
      }
      __setModuleDefault(result, mod);
      return result;
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.editionMarkerV2Beet = exports.EditionMarkerV2 = void 0;
    var beet9 = __importStar(require_beet());
    var web3 = __importStar((init_index_browser_esm(), __toCommonJS(index_browser_esm_exports)));
    var beetSolana = __importStar(require_beet_solana());
    var Key_1 = require_Key();
    var EditionMarkerV2 = class _EditionMarkerV2 {
      constructor(key, ledger) {
        this.key = key;
        this.ledger = ledger;
      }
      static fromArgs(args) {
        return new _EditionMarkerV2(args.key, args.ledger);
      }
      static fromAccountInfo(accountInfo, offset = 0) {
        return _EditionMarkerV2.deserialize(accountInfo.data, offset);
      }
      static fromAccountAddress(connection, address, commitmentOrConfig) {
        return __async(this, null, function* () {
          const accountInfo = yield connection.getAccountInfo(address, commitmentOrConfig);
          if (accountInfo == null) {
            throw new Error(`Unable to find EditionMarkerV2 account at ${address}`);
          }
          return _EditionMarkerV2.fromAccountInfo(accountInfo, 0)[0];
        });
      }
      static gpaBuilder(programId = new web3.PublicKey("metaqbxxUerdq28cj1RbAWkYQm3ybzjb6a8bt518x1s")) {
        return beetSolana.GpaBuilder.fromStruct(programId, exports.editionMarkerV2Beet);
      }
      static deserialize(buf, offset = 0) {
        return exports.editionMarkerV2Beet.deserialize(buf, offset);
      }
      serialize() {
        return exports.editionMarkerV2Beet.serialize(this);
      }
      static byteSize(args) {
        const instance = _EditionMarkerV2.fromArgs(args);
        return exports.editionMarkerV2Beet.toFixedFromValue(instance).byteSize;
      }
      static getMinimumBalanceForRentExemption(args, connection, commitment) {
        return __async(this, null, function* () {
          return connection.getMinimumBalanceForRentExemption(_EditionMarkerV2.byteSize(args), commitment);
        });
      }
      pretty() {
        return {
          key: "Key." + Key_1.Key[this.key],
          ledger: this.ledger
        };
      }
    };
    exports.EditionMarkerV2 = EditionMarkerV2;
    exports.editionMarkerV2Beet = new beet9.FixableBeetStruct([
      ["key", Key_1.keyBeet],
      ["ledger", beet9.bytes]
    ], EditionMarkerV2.fromArgs, "EditionMarkerV2");
  }
});

// ../../node_modules/@metaplex-foundation/mpl-token-metadata/dist/src/generated/accounts/MasterEditionV1.js
var require_MasterEditionV1 = __commonJS({
  "../../node_modules/@metaplex-foundation/mpl-token-metadata/dist/src/generated/accounts/MasterEditionV1.js"(exports) {
    "use strict";
    var __createBinding = exports && exports.__createBinding || (Object.create ? function(o2, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      var desc = Object.getOwnPropertyDescriptor(m, k);
      if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m[k];
        } };
      }
      Object.defineProperty(o2, k2, desc);
    } : function(o2, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      o2[k2] = m[k];
    });
    var __setModuleDefault = exports && exports.__setModuleDefault || (Object.create ? function(o2, v) {
      Object.defineProperty(o2, "default", { enumerable: true, value: v });
    } : function(o2, v) {
      o2["default"] = v;
    });
    var __importStar = exports && exports.__importStar || function(mod) {
      if (mod && mod.__esModule)
        return mod;
      var result = {};
      if (mod != null) {
        for (var k in mod)
          if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k))
            __createBinding(result, mod, k);
      }
      __setModuleDefault(result, mod);
      return result;
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.masterEditionV1Beet = exports.MasterEditionV1 = void 0;
    var beet9 = __importStar(require_beet());
    var web3 = __importStar((init_index_browser_esm(), __toCommonJS(index_browser_esm_exports)));
    var beetSolana = __importStar(require_beet_solana());
    var Key_1 = require_Key();
    var MasterEditionV12 = class _MasterEditionV1 {
      constructor(key, supply, maxSupply, printingMint, oneTimePrintingAuthorizationMint) {
        this.key = key;
        this.supply = supply;
        this.maxSupply = maxSupply;
        this.printingMint = printingMint;
        this.oneTimePrintingAuthorizationMint = oneTimePrintingAuthorizationMint;
      }
      static fromArgs(args) {
        return new _MasterEditionV1(args.key, args.supply, args.maxSupply, args.printingMint, args.oneTimePrintingAuthorizationMint);
      }
      static fromAccountInfo(accountInfo, offset = 0) {
        return _MasterEditionV1.deserialize(accountInfo.data, offset);
      }
      static fromAccountAddress(connection, address, commitmentOrConfig) {
        return __async(this, null, function* () {
          const accountInfo = yield connection.getAccountInfo(address, commitmentOrConfig);
          if (accountInfo == null) {
            throw new Error(`Unable to find MasterEditionV1 account at ${address}`);
          }
          return _MasterEditionV1.fromAccountInfo(accountInfo, 0)[0];
        });
      }
      static gpaBuilder(programId = new web3.PublicKey("metaqbxxUerdq28cj1RbAWkYQm3ybzjb6a8bt518x1s")) {
        return beetSolana.GpaBuilder.fromStruct(programId, exports.masterEditionV1Beet);
      }
      static deserialize(buf, offset = 0) {
        return exports.masterEditionV1Beet.deserialize(buf, offset);
      }
      serialize() {
        return exports.masterEditionV1Beet.serialize(this);
      }
      static byteSize(args) {
        const instance = _MasterEditionV1.fromArgs(args);
        return exports.masterEditionV1Beet.toFixedFromValue(instance).byteSize;
      }
      static getMinimumBalanceForRentExemption(args, connection, commitment) {
        return __async(this, null, function* () {
          return connection.getMinimumBalanceForRentExemption(_MasterEditionV1.byteSize(args), commitment);
        });
      }
      pretty() {
        return {
          key: "Key." + Key_1.Key[this.key],
          supply: (() => {
            const x = this.supply;
            if (typeof x.toNumber === "function") {
              try {
                return x.toNumber();
              } catch (_) {
                return x;
              }
            }
            return x;
          })(),
          maxSupply: this.maxSupply,
          printingMint: this.printingMint.toBase58(),
          oneTimePrintingAuthorizationMint: this.oneTimePrintingAuthorizationMint.toBase58()
        };
      }
    };
    exports.MasterEditionV1 = MasterEditionV12;
    exports.masterEditionV1Beet = new beet9.FixableBeetStruct([
      ["key", Key_1.keyBeet],
      ["supply", beet9.u64],
      ["maxSupply", beet9.coption(beet9.u64)],
      ["printingMint", beetSolana.publicKey],
      ["oneTimePrintingAuthorizationMint", beetSolana.publicKey]
    ], MasterEditionV12.fromArgs, "MasterEditionV1");
  }
});

// ../../node_modules/@metaplex-foundation/mpl-token-metadata/dist/src/generated/accounts/MasterEditionV2.js
var require_MasterEditionV2 = __commonJS({
  "../../node_modules/@metaplex-foundation/mpl-token-metadata/dist/src/generated/accounts/MasterEditionV2.js"(exports) {
    "use strict";
    var __createBinding = exports && exports.__createBinding || (Object.create ? function(o2, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      var desc = Object.getOwnPropertyDescriptor(m, k);
      if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m[k];
        } };
      }
      Object.defineProperty(o2, k2, desc);
    } : function(o2, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      o2[k2] = m[k];
    });
    var __setModuleDefault = exports && exports.__setModuleDefault || (Object.create ? function(o2, v) {
      Object.defineProperty(o2, "default", { enumerable: true, value: v });
    } : function(o2, v) {
      o2["default"] = v;
    });
    var __importStar = exports && exports.__importStar || function(mod) {
      if (mod && mod.__esModule)
        return mod;
      var result = {};
      if (mod != null) {
        for (var k in mod)
          if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k))
            __createBinding(result, mod, k);
      }
      __setModuleDefault(result, mod);
      return result;
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.masterEditionV2Beet = exports.MasterEditionV2 = void 0;
    var beet9 = __importStar(require_beet());
    var web3 = __importStar((init_index_browser_esm(), __toCommonJS(index_browser_esm_exports)));
    var beetSolana = __importStar(require_beet_solana());
    var Key_1 = require_Key();
    var MasterEditionV22 = class _MasterEditionV2 {
      constructor(key, supply, maxSupply) {
        this.key = key;
        this.supply = supply;
        this.maxSupply = maxSupply;
      }
      static fromArgs(args) {
        return new _MasterEditionV2(args.key, args.supply, args.maxSupply);
      }
      static fromAccountInfo(accountInfo, offset = 0) {
        return _MasterEditionV2.deserialize(accountInfo.data, offset);
      }
      static fromAccountAddress(connection, address, commitmentOrConfig) {
        return __async(this, null, function* () {
          const accountInfo = yield connection.getAccountInfo(address, commitmentOrConfig);
          if (accountInfo == null) {
            throw new Error(`Unable to find MasterEditionV2 account at ${address}`);
          }
          return _MasterEditionV2.fromAccountInfo(accountInfo, 0)[0];
        });
      }
      static gpaBuilder(programId = new web3.PublicKey("metaqbxxUerdq28cj1RbAWkYQm3ybzjb6a8bt518x1s")) {
        return beetSolana.GpaBuilder.fromStruct(programId, exports.masterEditionV2Beet);
      }
      static deserialize(buf, offset = 0) {
        return exports.masterEditionV2Beet.deserialize(buf, offset);
      }
      serialize() {
        return exports.masterEditionV2Beet.serialize(this);
      }
      static byteSize(args) {
        const instance = _MasterEditionV2.fromArgs(args);
        return exports.masterEditionV2Beet.toFixedFromValue(instance).byteSize;
      }
      static getMinimumBalanceForRentExemption(args, connection, commitment) {
        return __async(this, null, function* () {
          return connection.getMinimumBalanceForRentExemption(_MasterEditionV2.byteSize(args), commitment);
        });
      }
      pretty() {
        return {
          key: "Key." + Key_1.Key[this.key],
          supply: (() => {
            const x = this.supply;
            if (typeof x.toNumber === "function") {
              try {
                return x.toNumber();
              } catch (_) {
                return x;
              }
            }
            return x;
          })(),
          maxSupply: this.maxSupply
        };
      }
    };
    exports.MasterEditionV2 = MasterEditionV22;
    exports.masterEditionV2Beet = new beet9.FixableBeetStruct([
      ["key", Key_1.keyBeet],
      ["supply", beet9.u64],
      ["maxSupply", beet9.coption(beet9.u64)]
    ], MasterEditionV22.fromArgs, "MasterEditionV2");
  }
});

// ../../node_modules/@metaplex-foundation/mpl-token-metadata/dist/src/generated/types/Creator.js
var require_Creator = __commonJS({
  "../../node_modules/@metaplex-foundation/mpl-token-metadata/dist/src/generated/types/Creator.js"(exports) {
    "use strict";
    var __createBinding = exports && exports.__createBinding || (Object.create ? function(o2, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      var desc = Object.getOwnPropertyDescriptor(m, k);
      if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m[k];
        } };
      }
      Object.defineProperty(o2, k2, desc);
    } : function(o2, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      o2[k2] = m[k];
    });
    var __setModuleDefault = exports && exports.__setModuleDefault || (Object.create ? function(o2, v) {
      Object.defineProperty(o2, "default", { enumerable: true, value: v });
    } : function(o2, v) {
      o2["default"] = v;
    });
    var __importStar = exports && exports.__importStar || function(mod) {
      if (mod && mod.__esModule)
        return mod;
      var result = {};
      if (mod != null) {
        for (var k in mod)
          if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k))
            __createBinding(result, mod, k);
      }
      __setModuleDefault(result, mod);
      return result;
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.creatorBeet = void 0;
    var beetSolana = __importStar(require_beet_solana());
    var beet9 = __importStar(require_beet());
    exports.creatorBeet = new beet9.BeetArgsStruct([
      ["address", beetSolana.publicKey],
      ["verified", beet9.bool],
      ["share", beet9.u8]
    ], "Creator");
  }
});

// ../../node_modules/@metaplex-foundation/mpl-token-metadata/dist/src/generated/types/Data.js
var require_Data = __commonJS({
  "../../node_modules/@metaplex-foundation/mpl-token-metadata/dist/src/generated/types/Data.js"(exports) {
    "use strict";
    var __createBinding = exports && exports.__createBinding || (Object.create ? function(o2, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      var desc = Object.getOwnPropertyDescriptor(m, k);
      if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m[k];
        } };
      }
      Object.defineProperty(o2, k2, desc);
    } : function(o2, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      o2[k2] = m[k];
    });
    var __setModuleDefault = exports && exports.__setModuleDefault || (Object.create ? function(o2, v) {
      Object.defineProperty(o2, "default", { enumerable: true, value: v });
    } : function(o2, v) {
      o2["default"] = v;
    });
    var __importStar = exports && exports.__importStar || function(mod) {
      if (mod && mod.__esModule)
        return mod;
      var result = {};
      if (mod != null) {
        for (var k in mod)
          if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k))
            __createBinding(result, mod, k);
      }
      __setModuleDefault(result, mod);
      return result;
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.dataBeet = void 0;
    var beet9 = __importStar(require_beet());
    var Creator_1 = require_Creator();
    exports.dataBeet = new beet9.FixableBeetArgsStruct([
      ["name", beet9.utf8String],
      ["symbol", beet9.utf8String],
      ["uri", beet9.utf8String],
      ["sellerFeeBasisPoints", beet9.u16],
      ["creators", beet9.coption(beet9.array(Creator_1.creatorBeet))]
    ], "Data");
  }
});

// ../../node_modules/@metaplex-foundation/mpl-token-metadata/dist/src/generated/types/TokenStandard.js
var require_TokenStandard = __commonJS({
  "../../node_modules/@metaplex-foundation/mpl-token-metadata/dist/src/generated/types/TokenStandard.js"(exports) {
    "use strict";
    var __createBinding = exports && exports.__createBinding || (Object.create ? function(o2, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      var desc = Object.getOwnPropertyDescriptor(m, k);
      if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m[k];
        } };
      }
      Object.defineProperty(o2, k2, desc);
    } : function(o2, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      o2[k2] = m[k];
    });
    var __setModuleDefault = exports && exports.__setModuleDefault || (Object.create ? function(o2, v) {
      Object.defineProperty(o2, "default", { enumerable: true, value: v });
    } : function(o2, v) {
      o2["default"] = v;
    });
    var __importStar = exports && exports.__importStar || function(mod) {
      if (mod && mod.__esModule)
        return mod;
      var result = {};
      if (mod != null) {
        for (var k in mod)
          if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k))
            __createBinding(result, mod, k);
      }
      __setModuleDefault(result, mod);
      return result;
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.tokenStandardBeet = exports.TokenStandard = void 0;
    var beet9 = __importStar(require_beet());
    var TokenStandard6;
    (function(TokenStandard7) {
      TokenStandard7[TokenStandard7["NonFungible"] = 0] = "NonFungible";
      TokenStandard7[TokenStandard7["FungibleAsset"] = 1] = "FungibleAsset";
      TokenStandard7[TokenStandard7["Fungible"] = 2] = "Fungible";
      TokenStandard7[TokenStandard7["NonFungibleEdition"] = 3] = "NonFungibleEdition";
      TokenStandard7[TokenStandard7["ProgrammableNonFungible"] = 4] = "ProgrammableNonFungible";
      TokenStandard7[TokenStandard7["ProgrammableNonFungibleEdition"] = 5] = "ProgrammableNonFungibleEdition";
    })(TokenStandard6 = exports.TokenStandard || (exports.TokenStandard = {}));
    exports.tokenStandardBeet = beet9.fixedScalarEnum(TokenStandard6);
  }
});

// ../../node_modules/@metaplex-foundation/mpl-token-metadata/dist/src/generated/types/Collection.js
var require_Collection = __commonJS({
  "../../node_modules/@metaplex-foundation/mpl-token-metadata/dist/src/generated/types/Collection.js"(exports) {
    "use strict";
    var __createBinding = exports && exports.__createBinding || (Object.create ? function(o2, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      var desc = Object.getOwnPropertyDescriptor(m, k);
      if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m[k];
        } };
      }
      Object.defineProperty(o2, k2, desc);
    } : function(o2, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      o2[k2] = m[k];
    });
    var __setModuleDefault = exports && exports.__setModuleDefault || (Object.create ? function(o2, v) {
      Object.defineProperty(o2, "default", { enumerable: true, value: v });
    } : function(o2, v) {
      o2["default"] = v;
    });
    var __importStar = exports && exports.__importStar || function(mod) {
      if (mod && mod.__esModule)
        return mod;
      var result = {};
      if (mod != null) {
        for (var k in mod)
          if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k))
            __createBinding(result, mod, k);
      }
      __setModuleDefault(result, mod);
      return result;
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.collectionBeet = void 0;
    var beet9 = __importStar(require_beet());
    var beetSolana = __importStar(require_beet_solana());
    exports.collectionBeet = new beet9.BeetArgsStruct([
      ["verified", beet9.bool],
      ["key", beetSolana.publicKey]
    ], "Collection");
  }
});

// ../../node_modules/@metaplex-foundation/mpl-token-metadata/dist/src/generated/types/UseMethod.js
var require_UseMethod = __commonJS({
  "../../node_modules/@metaplex-foundation/mpl-token-metadata/dist/src/generated/types/UseMethod.js"(exports) {
    "use strict";
    var __createBinding = exports && exports.__createBinding || (Object.create ? function(o2, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      var desc = Object.getOwnPropertyDescriptor(m, k);
      if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m[k];
        } };
      }
      Object.defineProperty(o2, k2, desc);
    } : function(o2, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      o2[k2] = m[k];
    });
    var __setModuleDefault = exports && exports.__setModuleDefault || (Object.create ? function(o2, v) {
      Object.defineProperty(o2, "default", { enumerable: true, value: v });
    } : function(o2, v) {
      o2["default"] = v;
    });
    var __importStar = exports && exports.__importStar || function(mod) {
      if (mod && mod.__esModule)
        return mod;
      var result = {};
      if (mod != null) {
        for (var k in mod)
          if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k))
            __createBinding(result, mod, k);
      }
      __setModuleDefault(result, mod);
      return result;
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.useMethodBeet = exports.UseMethod = void 0;
    var beet9 = __importStar(require_beet());
    var UseMethod;
    (function(UseMethod2) {
      UseMethod2[UseMethod2["Burn"] = 0] = "Burn";
      UseMethod2[UseMethod2["Multiple"] = 1] = "Multiple";
      UseMethod2[UseMethod2["Single"] = 2] = "Single";
    })(UseMethod = exports.UseMethod || (exports.UseMethod = {}));
    exports.useMethodBeet = beet9.fixedScalarEnum(UseMethod);
  }
});

// ../../node_modules/@metaplex-foundation/mpl-token-metadata/dist/src/generated/types/Uses.js
var require_Uses = __commonJS({
  "../../node_modules/@metaplex-foundation/mpl-token-metadata/dist/src/generated/types/Uses.js"(exports) {
    "use strict";
    var __createBinding = exports && exports.__createBinding || (Object.create ? function(o2, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      var desc = Object.getOwnPropertyDescriptor(m, k);
      if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m[k];
        } };
      }
      Object.defineProperty(o2, k2, desc);
    } : function(o2, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      o2[k2] = m[k];
    });
    var __setModuleDefault = exports && exports.__setModuleDefault || (Object.create ? function(o2, v) {
      Object.defineProperty(o2, "default", { enumerable: true, value: v });
    } : function(o2, v) {
      o2["default"] = v;
    });
    var __importStar = exports && exports.__importStar || function(mod) {
      if (mod && mod.__esModule)
        return mod;
      var result = {};
      if (mod != null) {
        for (var k in mod)
          if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k))
            __createBinding(result, mod, k);
      }
      __setModuleDefault(result, mod);
      return result;
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.usesBeet = void 0;
    var beet9 = __importStar(require_beet());
    var UseMethod_1 = require_UseMethod();
    exports.usesBeet = new beet9.BeetArgsStruct([
      ["useMethod", UseMethod_1.useMethodBeet],
      ["remaining", beet9.u64],
      ["total", beet9.u64]
    ], "Uses");
  }
});

// ../../node_modules/@metaplex-foundation/mpl-token-metadata/dist/src/generated/types/CollectionDetails.js
var require_CollectionDetails = __commonJS({
  "../../node_modules/@metaplex-foundation/mpl-token-metadata/dist/src/generated/types/CollectionDetails.js"(exports) {
    "use strict";
    var __createBinding = exports && exports.__createBinding || (Object.create ? function(o2, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      var desc = Object.getOwnPropertyDescriptor(m, k);
      if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m[k];
        } };
      }
      Object.defineProperty(o2, k2, desc);
    } : function(o2, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      o2[k2] = m[k];
    });
    var __setModuleDefault = exports && exports.__setModuleDefault || (Object.create ? function(o2, v) {
      Object.defineProperty(o2, "default", { enumerable: true, value: v });
    } : function(o2, v) {
      o2["default"] = v;
    });
    var __importStar = exports && exports.__importStar || function(mod) {
      if (mod && mod.__esModule)
        return mod;
      var result = {};
      if (mod != null) {
        for (var k in mod)
          if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k))
            __createBinding(result, mod, k);
      }
      __setModuleDefault(result, mod);
      return result;
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.collectionDetailsBeet = exports.isCollectionDetailsV1 = void 0;
    var beet9 = __importStar(require_beet());
    var isCollectionDetailsV1 = (x) => x.__kind === "V1";
    exports.isCollectionDetailsV1 = isCollectionDetailsV1;
    exports.collectionDetailsBeet = beet9.dataEnum([
      [
        "V1",
        new beet9.BeetArgsStruct([["size", beet9.u64]], 'CollectionDetailsRecord["V1"]')
      ]
    ]);
  }
});

// ../../node_modules/@metaplex-foundation/mpl-token-metadata/dist/src/generated/types/ProgrammableConfig.js
var require_ProgrammableConfig = __commonJS({
  "../../node_modules/@metaplex-foundation/mpl-token-metadata/dist/src/generated/types/ProgrammableConfig.js"(exports) {
    "use strict";
    var __createBinding = exports && exports.__createBinding || (Object.create ? function(o2, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      var desc = Object.getOwnPropertyDescriptor(m, k);
      if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m[k];
        } };
      }
      Object.defineProperty(o2, k2, desc);
    } : function(o2, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      o2[k2] = m[k];
    });
    var __setModuleDefault = exports && exports.__setModuleDefault || (Object.create ? function(o2, v) {
      Object.defineProperty(o2, "default", { enumerable: true, value: v });
    } : function(o2, v) {
      o2["default"] = v;
    });
    var __importStar = exports && exports.__importStar || function(mod) {
      if (mod && mod.__esModule)
        return mod;
      var result = {};
      if (mod != null) {
        for (var k in mod)
          if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k))
            __createBinding(result, mod, k);
      }
      __setModuleDefault(result, mod);
      return result;
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.programmableConfigBeet = exports.isProgrammableConfigV1 = void 0;
    var beet9 = __importStar(require_beet());
    var beetSolana = __importStar(require_beet_solana());
    var isProgrammableConfigV1 = (x) => x.__kind === "V1";
    exports.isProgrammableConfigV1 = isProgrammableConfigV1;
    exports.programmableConfigBeet = beet9.dataEnum([
      [
        "V1",
        new beet9.FixableBeetArgsStruct([["ruleSet", beet9.coption(beetSolana.publicKey)]], 'ProgrammableConfigRecord["V1"]')
      ]
    ]);
  }
});

// ../../node_modules/@metaplex-foundation/mpl-token-metadata/dist/src/custom/metadata-deserializer.js
var require_metadata_deserializer = __commonJS({
  "../../node_modules/@metaplex-foundation/mpl-token-metadata/dist/src/custom/metadata-deserializer.js"(exports) {
    "use strict";
    var __createBinding = exports && exports.__createBinding || (Object.create ? function(o2, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      var desc = Object.getOwnPropertyDescriptor(m, k);
      if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m[k];
        } };
      }
      Object.defineProperty(o2, k2, desc);
    } : function(o2, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      o2[k2] = m[k];
    });
    var __setModuleDefault = exports && exports.__setModuleDefault || (Object.create ? function(o2, v) {
      Object.defineProperty(o2, "default", { enumerable: true, value: v });
    } : function(o2, v) {
      o2["default"] = v;
    });
    var __importStar = exports && exports.__importStar || function(mod) {
      if (mod && mod.__esModule)
        return mod;
      var result = {};
      if (mod != null) {
        for (var k in mod)
          if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k))
            __createBinding(result, mod, k);
      }
      __setModuleDefault(result, mod);
      return result;
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.deserialize = void 0;
    var beet9 = __importStar(require_beet());
    var beetSolana = __importStar(require_beet_solana());
    var Metadata_1 = require_Metadata();
    var Collection_1 = require_Collection();
    var CollectionDetails_1 = require_CollectionDetails();
    var ProgrammableConfig_1 = require_ProgrammableConfig();
    var Data_1 = require_Data();
    var Key_1 = require_Key();
    var TokenStandard_1 = require_TokenStandard();
    var Uses_1 = require_Uses();
    var NONE_BYTE_SIZE = beet9.coptionNone("").byteSize;
    function deserialize2(buf, offset = 0) {
      let cursor = offset;
      const key = Key_1.keyBeet.read(buf, cursor);
      cursor += Key_1.keyBeet.byteSize;
      const updateAuthority = beetSolana.publicKey.read(buf, cursor);
      cursor += beetSolana.publicKey.byteSize;
      const mint = beetSolana.publicKey.read(buf, cursor);
      cursor += beetSolana.publicKey.byteSize;
      const [data, dataDelta] = Data_1.dataBeet.deserialize(buf, cursor);
      cursor = dataDelta;
      const primarySaleHappened = beet9.bool.read(buf, cursor);
      cursor += beet9.bool.byteSize;
      const isMutable = beet9.bool.read(buf, cursor);
      cursor += beet9.bool.byteSize;
      const editionNonceBeet = beet9.coption(beet9.u8).toFixedFromData(buf, cursor);
      const editionNonce = editionNonceBeet.read(buf, cursor);
      cursor += editionNonceBeet.byteSize;
      const [tokenStandard, tokenDelta, tokenCorrupted] = tryReadOption(beet9.coption(TokenStandard_1.tokenStandardBeet), buf, cursor);
      cursor += tokenDelta;
      const [collection, collectionDelta, collectionCorrupted] = tokenCorrupted ? [null, NONE_BYTE_SIZE, true] : tryReadOption(beet9.coption(Collection_1.collectionBeet), buf, cursor);
      cursor += collectionDelta;
      const [uses, usesDelta, usesCorrupted] = tokenCorrupted || collectionCorrupted ? [null, NONE_BYTE_SIZE, true] : tryReadOption(beet9.coption(Uses_1.usesBeet), buf, cursor);
      cursor += usesDelta;
      const [collectionDetails, collectionDetailsDelta, collectionDetailsCorrupted] = tokenCorrupted || collectionCorrupted || usesCorrupted ? [null, NONE_BYTE_SIZE, true] : tryReadOption(beet9.coption(CollectionDetails_1.collectionDetailsBeet), buf, cursor);
      cursor += collectionDetailsDelta;
      const [programmableConfig, programmableConfigDelta, programmableConfigCorrupted] = tokenCorrupted || collectionCorrupted || usesCorrupted ? [null, NONE_BYTE_SIZE, true] : tryReadOption(beet9.coption(ProgrammableConfig_1.programmableConfigBeet), buf, cursor);
      cursor += programmableConfigDelta;
      const anyCorrupted = tokenCorrupted || collectionCorrupted || usesCorrupted || collectionDetailsCorrupted || programmableConfigCorrupted;
      const args = {
        key,
        updateAuthority,
        mint,
        data,
        primarySaleHappened,
        isMutable,
        editionNonce,
        tokenStandard: anyCorrupted ? null : tokenStandard,
        collection: anyCorrupted ? null : collection,
        uses: anyCorrupted ? null : uses,
        collectionDetails: anyCorrupted ? null : collectionDetails,
        programmableConfig: anyCorrupted ? null : programmableConfig
      };
      return [Metadata_1.Metadata.fromArgs(args), cursor];
    }
    exports.deserialize = deserialize2;
    function tryReadOption(optionBeet, buf, offset) {
      try {
        const fixed = optionBeet.toFixedFromData(buf, offset);
        const value = fixed.read(buf, offset);
        return [value, fixed.byteSize, false];
      } catch (e2) {
        return [null, NONE_BYTE_SIZE, true];
      }
    }
  }
});

// ../../node_modules/@metaplex-foundation/mpl-token-metadata/dist/src/generated/accounts/Metadata.js
var require_Metadata = __commonJS({
  "../../node_modules/@metaplex-foundation/mpl-token-metadata/dist/src/generated/accounts/Metadata.js"(exports) {
    "use strict";
    var __createBinding = exports && exports.__createBinding || (Object.create ? function(o2, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      var desc = Object.getOwnPropertyDescriptor(m, k);
      if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m[k];
        } };
      }
      Object.defineProperty(o2, k2, desc);
    } : function(o2, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      o2[k2] = m[k];
    });
    var __setModuleDefault = exports && exports.__setModuleDefault || (Object.create ? function(o2, v) {
      Object.defineProperty(o2, "default", { enumerable: true, value: v });
    } : function(o2, v) {
      o2["default"] = v;
    });
    var __importStar = exports && exports.__importStar || function(mod) {
      if (mod && mod.__esModule)
        return mod;
      var result = {};
      if (mod != null) {
        for (var k in mod)
          if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k))
            __createBinding(result, mod, k);
      }
      __setModuleDefault(result, mod);
      return result;
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.metadataBeet = exports.Metadata = void 0;
    var web3 = __importStar((init_index_browser_esm(), __toCommonJS(index_browser_esm_exports)));
    var beet9 = __importStar(require_beet());
    var beetSolana = __importStar(require_beet_solana());
    var Key_1 = require_Key();
    var Data_1 = require_Data();
    var TokenStandard_1 = require_TokenStandard();
    var Collection_1 = require_Collection();
    var Uses_1 = require_Uses();
    var CollectionDetails_1 = require_CollectionDetails();
    var ProgrammableConfig_1 = require_ProgrammableConfig();
    var customSerializer = __importStar(require_metadata_deserializer());
    var Metadata2 = class _Metadata {
      constructor(key, updateAuthority, mint, data, primarySaleHappened, isMutable, editionNonce, tokenStandard, collection, uses, collectionDetails, programmableConfig) {
        this.key = key;
        this.updateAuthority = updateAuthority;
        this.mint = mint;
        this.data = data;
        this.primarySaleHappened = primarySaleHappened;
        this.isMutable = isMutable;
        this.editionNonce = editionNonce;
        this.tokenStandard = tokenStandard;
        this.collection = collection;
        this.uses = uses;
        this.collectionDetails = collectionDetails;
        this.programmableConfig = programmableConfig;
      }
      static fromArgs(args) {
        return new _Metadata(args.key, args.updateAuthority, args.mint, args.data, args.primarySaleHappened, args.isMutable, args.editionNonce, args.tokenStandard, args.collection, args.uses, args.collectionDetails, args.programmableConfig);
      }
      static fromAccountInfo(accountInfo, offset = 0) {
        return _Metadata.deserialize(accountInfo.data, offset);
      }
      static fromAccountAddress(connection, address, commitmentOrConfig) {
        return __async(this, null, function* () {
          const accountInfo = yield connection.getAccountInfo(address, commitmentOrConfig);
          if (accountInfo == null) {
            throw new Error(`Unable to find Metadata account at ${address}`);
          }
          return _Metadata.fromAccountInfo(accountInfo, 0)[0];
        });
      }
      static gpaBuilder(programId = new web3.PublicKey("metaqbxxUerdq28cj1RbAWkYQm3ybzjb6a8bt518x1s")) {
        return beetSolana.GpaBuilder.fromStruct(programId, exports.metadataBeet);
      }
      static deserialize(buf, offset = 0) {
        return resolvedDeserialize(buf, offset);
      }
      serialize() {
        return resolvedSerialize(this);
      }
      static byteSize(args) {
        const instance = _Metadata.fromArgs(args);
        return exports.metadataBeet.toFixedFromValue(instance).byteSize;
      }
      static getMinimumBalanceForRentExemption(args, connection, commitment) {
        return __async(this, null, function* () {
          return connection.getMinimumBalanceForRentExemption(_Metadata.byteSize(args), commitment);
        });
      }
      pretty() {
        return {
          key: "Key." + Key_1.Key[this.key],
          updateAuthority: this.updateAuthority.toBase58(),
          mint: this.mint.toBase58(),
          data: this.data,
          primarySaleHappened: this.primarySaleHappened,
          isMutable: this.isMutable,
          editionNonce: this.editionNonce,
          tokenStandard: this.tokenStandard,
          collection: this.collection,
          uses: this.uses,
          collectionDetails: this.collectionDetails,
          programmableConfig: this.programmableConfig
        };
      }
    };
    exports.Metadata = Metadata2;
    exports.metadataBeet = new beet9.FixableBeetStruct([
      ["key", Key_1.keyBeet],
      ["updateAuthority", beetSolana.publicKey],
      ["mint", beetSolana.publicKey],
      ["data", Data_1.dataBeet],
      ["primarySaleHappened", beet9.bool],
      ["isMutable", beet9.bool],
      ["editionNonce", beet9.coption(beet9.u8)],
      ["tokenStandard", beet9.coption(TokenStandard_1.tokenStandardBeet)],
      ["collection", beet9.coption(Collection_1.collectionBeet)],
      ["uses", beet9.coption(Uses_1.usesBeet)],
      ["collectionDetails", beet9.coption(CollectionDetails_1.collectionDetailsBeet)],
      ["programmableConfig", beet9.coption(ProgrammableConfig_1.programmableConfigBeet)]
    ], Metadata2.fromArgs, "Metadata");
    var serializer = customSerializer;
    var resolvedSerialize = typeof serializer.serialize === "function" ? serializer.serialize.bind(serializer) : exports.metadataBeet.serialize.bind(exports.metadataBeet);
    var resolvedDeserialize = typeof serializer.deserialize === "function" ? serializer.deserialize.bind(serializer) : exports.metadataBeet.deserialize.bind(exports.metadataBeet);
  }
});

// ../../node_modules/@metaplex-foundation/mpl-token-metadata/dist/src/generated/accounts/MetadataDelegateRecord.js
var require_MetadataDelegateRecord = __commonJS({
  "../../node_modules/@metaplex-foundation/mpl-token-metadata/dist/src/generated/accounts/MetadataDelegateRecord.js"(exports) {
    "use strict";
    var __createBinding = exports && exports.__createBinding || (Object.create ? function(o2, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      var desc = Object.getOwnPropertyDescriptor(m, k);
      if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m[k];
        } };
      }
      Object.defineProperty(o2, k2, desc);
    } : function(o2, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      o2[k2] = m[k];
    });
    var __setModuleDefault = exports && exports.__setModuleDefault || (Object.create ? function(o2, v) {
      Object.defineProperty(o2, "default", { enumerable: true, value: v });
    } : function(o2, v) {
      o2["default"] = v;
    });
    var __importStar = exports && exports.__importStar || function(mod) {
      if (mod && mod.__esModule)
        return mod;
      var result = {};
      if (mod != null) {
        for (var k in mod)
          if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k))
            __createBinding(result, mod, k);
      }
      __setModuleDefault(result, mod);
      return result;
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.metadataDelegateRecordBeet = exports.MetadataDelegateRecord = void 0;
    var web3 = __importStar((init_index_browser_esm(), __toCommonJS(index_browser_esm_exports)));
    var beet9 = __importStar(require_beet());
    var beetSolana = __importStar(require_beet_solana());
    var Key_1 = require_Key();
    var MetadataDelegateRecord = class _MetadataDelegateRecord {
      constructor(key, bump, mint, delegate, updateAuthority) {
        this.key = key;
        this.bump = bump;
        this.mint = mint;
        this.delegate = delegate;
        this.updateAuthority = updateAuthority;
      }
      static fromArgs(args) {
        return new _MetadataDelegateRecord(args.key, args.bump, args.mint, args.delegate, args.updateAuthority);
      }
      static fromAccountInfo(accountInfo, offset = 0) {
        return _MetadataDelegateRecord.deserialize(accountInfo.data, offset);
      }
      static fromAccountAddress(connection, address, commitmentOrConfig) {
        return __async(this, null, function* () {
          const accountInfo = yield connection.getAccountInfo(address, commitmentOrConfig);
          if (accountInfo == null) {
            throw new Error(`Unable to find MetadataDelegateRecord account at ${address}`);
          }
          return _MetadataDelegateRecord.fromAccountInfo(accountInfo, 0)[0];
        });
      }
      static gpaBuilder(programId = new web3.PublicKey("metaqbxxUerdq28cj1RbAWkYQm3ybzjb6a8bt518x1s")) {
        return beetSolana.GpaBuilder.fromStruct(programId, exports.metadataDelegateRecordBeet);
      }
      static deserialize(buf, offset = 0) {
        return exports.metadataDelegateRecordBeet.deserialize(buf, offset);
      }
      serialize() {
        return exports.metadataDelegateRecordBeet.serialize(this);
      }
      static get byteSize() {
        return exports.metadataDelegateRecordBeet.byteSize;
      }
      static getMinimumBalanceForRentExemption(connection, commitment) {
        return __async(this, null, function* () {
          return connection.getMinimumBalanceForRentExemption(_MetadataDelegateRecord.byteSize, commitment);
        });
      }
      static hasCorrectByteSize(buf, offset = 0) {
        return buf.byteLength - offset === _MetadataDelegateRecord.byteSize;
      }
      pretty() {
        return {
          key: "Key." + Key_1.Key[this.key],
          bump: this.bump,
          mint: this.mint.toBase58(),
          delegate: this.delegate.toBase58(),
          updateAuthority: this.updateAuthority.toBase58()
        };
      }
    };
    exports.MetadataDelegateRecord = MetadataDelegateRecord;
    exports.metadataDelegateRecordBeet = new beet9.BeetStruct([
      ["key", Key_1.keyBeet],
      ["bump", beet9.u8],
      ["mint", beetSolana.publicKey],
      ["delegate", beetSolana.publicKey],
      ["updateAuthority", beetSolana.publicKey]
    ], MetadataDelegateRecord.fromArgs, "MetadataDelegateRecord");
  }
});

// ../../node_modules/@metaplex-foundation/mpl-token-metadata/dist/src/generated/types/ReservationV1.js
var require_ReservationV1 = __commonJS({
  "../../node_modules/@metaplex-foundation/mpl-token-metadata/dist/src/generated/types/ReservationV1.js"(exports) {
    "use strict";
    var __createBinding = exports && exports.__createBinding || (Object.create ? function(o2, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      var desc = Object.getOwnPropertyDescriptor(m, k);
      if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m[k];
        } };
      }
      Object.defineProperty(o2, k2, desc);
    } : function(o2, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      o2[k2] = m[k];
    });
    var __setModuleDefault = exports && exports.__setModuleDefault || (Object.create ? function(o2, v) {
      Object.defineProperty(o2, "default", { enumerable: true, value: v });
    } : function(o2, v) {
      o2["default"] = v;
    });
    var __importStar = exports && exports.__importStar || function(mod) {
      if (mod && mod.__esModule)
        return mod;
      var result = {};
      if (mod != null) {
        for (var k in mod)
          if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k))
            __createBinding(result, mod, k);
      }
      __setModuleDefault(result, mod);
      return result;
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.reservationV1Beet = void 0;
    var beetSolana = __importStar(require_beet_solana());
    var beet9 = __importStar(require_beet());
    exports.reservationV1Beet = new beet9.BeetArgsStruct([
      ["address", beetSolana.publicKey],
      ["spotsRemaining", beet9.u8],
      ["totalSpots", beet9.u8]
    ], "ReservationV1");
  }
});

// ../../node_modules/@metaplex-foundation/mpl-token-metadata/dist/src/generated/accounts/ReservationListV1.js
var require_ReservationListV1 = __commonJS({
  "../../node_modules/@metaplex-foundation/mpl-token-metadata/dist/src/generated/accounts/ReservationListV1.js"(exports) {
    "use strict";
    var __createBinding = exports && exports.__createBinding || (Object.create ? function(o2, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      var desc = Object.getOwnPropertyDescriptor(m, k);
      if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m[k];
        } };
      }
      Object.defineProperty(o2, k2, desc);
    } : function(o2, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      o2[k2] = m[k];
    });
    var __setModuleDefault = exports && exports.__setModuleDefault || (Object.create ? function(o2, v) {
      Object.defineProperty(o2, "default", { enumerable: true, value: v });
    } : function(o2, v) {
      o2["default"] = v;
    });
    var __importStar = exports && exports.__importStar || function(mod) {
      if (mod && mod.__esModule)
        return mod;
      var result = {};
      if (mod != null) {
        for (var k in mod)
          if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k))
            __createBinding(result, mod, k);
      }
      __setModuleDefault(result, mod);
      return result;
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.reservationListV1Beet = exports.ReservationListV1 = void 0;
    var web3 = __importStar((init_index_browser_esm(), __toCommonJS(index_browser_esm_exports)));
    var beet9 = __importStar(require_beet());
    var beetSolana = __importStar(require_beet_solana());
    var Key_1 = require_Key();
    var ReservationV1_1 = require_ReservationV1();
    var ReservationListV1 = class _ReservationListV1 {
      constructor(key, masterEdition, supplySnapshot, reservations) {
        this.key = key;
        this.masterEdition = masterEdition;
        this.supplySnapshot = supplySnapshot;
        this.reservations = reservations;
      }
      static fromArgs(args) {
        return new _ReservationListV1(args.key, args.masterEdition, args.supplySnapshot, args.reservations);
      }
      static fromAccountInfo(accountInfo, offset = 0) {
        return _ReservationListV1.deserialize(accountInfo.data, offset);
      }
      static fromAccountAddress(connection, address, commitmentOrConfig) {
        return __async(this, null, function* () {
          const accountInfo = yield connection.getAccountInfo(address, commitmentOrConfig);
          if (accountInfo == null) {
            throw new Error(`Unable to find ReservationListV1 account at ${address}`);
          }
          return _ReservationListV1.fromAccountInfo(accountInfo, 0)[0];
        });
      }
      static gpaBuilder(programId = new web3.PublicKey("metaqbxxUerdq28cj1RbAWkYQm3ybzjb6a8bt518x1s")) {
        return beetSolana.GpaBuilder.fromStruct(programId, exports.reservationListV1Beet);
      }
      static deserialize(buf, offset = 0) {
        return exports.reservationListV1Beet.deserialize(buf, offset);
      }
      serialize() {
        return exports.reservationListV1Beet.serialize(this);
      }
      static byteSize(args) {
        const instance = _ReservationListV1.fromArgs(args);
        return exports.reservationListV1Beet.toFixedFromValue(instance).byteSize;
      }
      static getMinimumBalanceForRentExemption(args, connection, commitment) {
        return __async(this, null, function* () {
          return connection.getMinimumBalanceForRentExemption(_ReservationListV1.byteSize(args), commitment);
        });
      }
      pretty() {
        return {
          key: "Key." + Key_1.Key[this.key],
          masterEdition: this.masterEdition.toBase58(),
          supplySnapshot: this.supplySnapshot,
          reservations: this.reservations
        };
      }
    };
    exports.ReservationListV1 = ReservationListV1;
    exports.reservationListV1Beet = new beet9.FixableBeetStruct([
      ["key", Key_1.keyBeet],
      ["masterEdition", beetSolana.publicKey],
      ["supplySnapshot", beet9.coption(beet9.u64)],
      ["reservations", beet9.array(ReservationV1_1.reservationV1Beet)]
    ], ReservationListV1.fromArgs, "ReservationListV1");
  }
});

// ../../node_modules/@metaplex-foundation/mpl-token-metadata/dist/src/generated/types/Reservation.js
var require_Reservation = __commonJS({
  "../../node_modules/@metaplex-foundation/mpl-token-metadata/dist/src/generated/types/Reservation.js"(exports) {
    "use strict";
    var __createBinding = exports && exports.__createBinding || (Object.create ? function(o2, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      var desc = Object.getOwnPropertyDescriptor(m, k);
      if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m[k];
        } };
      }
      Object.defineProperty(o2, k2, desc);
    } : function(o2, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      o2[k2] = m[k];
    });
    var __setModuleDefault = exports && exports.__setModuleDefault || (Object.create ? function(o2, v) {
      Object.defineProperty(o2, "default", { enumerable: true, value: v });
    } : function(o2, v) {
      o2["default"] = v;
    });
    var __importStar = exports && exports.__importStar || function(mod) {
      if (mod && mod.__esModule)
        return mod;
      var result = {};
      if (mod != null) {
        for (var k in mod)
          if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k))
            __createBinding(result, mod, k);
      }
      __setModuleDefault(result, mod);
      return result;
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.reservationBeet = void 0;
    var beet9 = __importStar(require_beet());
    var beetSolana = __importStar(require_beet_solana());
    exports.reservationBeet = new beet9.BeetArgsStruct([
      ["address", beetSolana.publicKey],
      ["spotsRemaining", beet9.u64],
      ["totalSpots", beet9.u64]
    ], "Reservation");
  }
});

// ../../node_modules/@metaplex-foundation/mpl-token-metadata/dist/src/generated/accounts/ReservationListV2.js
var require_ReservationListV2 = __commonJS({
  "../../node_modules/@metaplex-foundation/mpl-token-metadata/dist/src/generated/accounts/ReservationListV2.js"(exports) {
    "use strict";
    var __createBinding = exports && exports.__createBinding || (Object.create ? function(o2, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      var desc = Object.getOwnPropertyDescriptor(m, k);
      if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m[k];
        } };
      }
      Object.defineProperty(o2, k2, desc);
    } : function(o2, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      o2[k2] = m[k];
    });
    var __setModuleDefault = exports && exports.__setModuleDefault || (Object.create ? function(o2, v) {
      Object.defineProperty(o2, "default", { enumerable: true, value: v });
    } : function(o2, v) {
      o2["default"] = v;
    });
    var __importStar = exports && exports.__importStar || function(mod) {
      if (mod && mod.__esModule)
        return mod;
      var result = {};
      if (mod != null) {
        for (var k in mod)
          if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k))
            __createBinding(result, mod, k);
      }
      __setModuleDefault(result, mod);
      return result;
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.reservationListV2Beet = exports.ReservationListV2 = void 0;
    var web3 = __importStar((init_index_browser_esm(), __toCommonJS(index_browser_esm_exports)));
    var beet9 = __importStar(require_beet());
    var beetSolana = __importStar(require_beet_solana());
    var Key_1 = require_Key();
    var Reservation_1 = require_Reservation();
    var ReservationListV2 = class _ReservationListV2 {
      constructor(key, masterEdition, supplySnapshot, reservations, totalReservationSpots, currentReservationSpots) {
        this.key = key;
        this.masterEdition = masterEdition;
        this.supplySnapshot = supplySnapshot;
        this.reservations = reservations;
        this.totalReservationSpots = totalReservationSpots;
        this.currentReservationSpots = currentReservationSpots;
      }
      static fromArgs(args) {
        return new _ReservationListV2(args.key, args.masterEdition, args.supplySnapshot, args.reservations, args.totalReservationSpots, args.currentReservationSpots);
      }
      static fromAccountInfo(accountInfo, offset = 0) {
        return _ReservationListV2.deserialize(accountInfo.data, offset);
      }
      static fromAccountAddress(connection, address, commitmentOrConfig) {
        return __async(this, null, function* () {
          const accountInfo = yield connection.getAccountInfo(address, commitmentOrConfig);
          if (accountInfo == null) {
            throw new Error(`Unable to find ReservationListV2 account at ${address}`);
          }
          return _ReservationListV2.fromAccountInfo(accountInfo, 0)[0];
        });
      }
      static gpaBuilder(programId = new web3.PublicKey("metaqbxxUerdq28cj1RbAWkYQm3ybzjb6a8bt518x1s")) {
        return beetSolana.GpaBuilder.fromStruct(programId, exports.reservationListV2Beet);
      }
      static deserialize(buf, offset = 0) {
        return exports.reservationListV2Beet.deserialize(buf, offset);
      }
      serialize() {
        return exports.reservationListV2Beet.serialize(this);
      }
      static byteSize(args) {
        const instance = _ReservationListV2.fromArgs(args);
        return exports.reservationListV2Beet.toFixedFromValue(instance).byteSize;
      }
      static getMinimumBalanceForRentExemption(args, connection, commitment) {
        return __async(this, null, function* () {
          return connection.getMinimumBalanceForRentExemption(_ReservationListV2.byteSize(args), commitment);
        });
      }
      pretty() {
        return {
          key: "Key." + Key_1.Key[this.key],
          masterEdition: this.masterEdition.toBase58(),
          supplySnapshot: this.supplySnapshot,
          reservations: this.reservations,
          totalReservationSpots: (() => {
            const x = this.totalReservationSpots;
            if (typeof x.toNumber === "function") {
              try {
                return x.toNumber();
              } catch (_) {
                return x;
              }
            }
            return x;
          })(),
          currentReservationSpots: (() => {
            const x = this.currentReservationSpots;
            if (typeof x.toNumber === "function") {
              try {
                return x.toNumber();
              } catch (_) {
                return x;
              }
            }
            return x;
          })()
        };
      }
    };
    exports.ReservationListV2 = ReservationListV2;
    exports.reservationListV2Beet = new beet9.FixableBeetStruct([
      ["key", Key_1.keyBeet],
      ["masterEdition", beetSolana.publicKey],
      ["supplySnapshot", beet9.coption(beet9.u64)],
      ["reservations", beet9.array(Reservation_1.reservationBeet)],
      ["totalReservationSpots", beet9.u64],
      ["currentReservationSpots", beet9.u64]
    ], ReservationListV2.fromArgs, "ReservationListV2");
  }
});

// ../../node_modules/@metaplex-foundation/mpl-token-metadata/dist/src/generated/types/EscrowAuthority.js
var require_EscrowAuthority = __commonJS({
  "../../node_modules/@metaplex-foundation/mpl-token-metadata/dist/src/generated/types/EscrowAuthority.js"(exports) {
    "use strict";
    var __createBinding = exports && exports.__createBinding || (Object.create ? function(o2, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      var desc = Object.getOwnPropertyDescriptor(m, k);
      if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m[k];
        } };
      }
      Object.defineProperty(o2, k2, desc);
    } : function(o2, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      o2[k2] = m[k];
    });
    var __setModuleDefault = exports && exports.__setModuleDefault || (Object.create ? function(o2, v) {
      Object.defineProperty(o2, "default", { enumerable: true, value: v });
    } : function(o2, v) {
      o2["default"] = v;
    });
    var __importStar = exports && exports.__importStar || function(mod) {
      if (mod && mod.__esModule)
        return mod;
      var result = {};
      if (mod != null) {
        for (var k in mod)
          if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k))
            __createBinding(result, mod, k);
      }
      __setModuleDefault(result, mod);
      return result;
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.escrowAuthorityBeet = exports.isEscrowAuthorityCreator = exports.isEscrowAuthorityTokenOwner = void 0;
    var beet9 = __importStar(require_beet());
    var beetSolana = __importStar(require_beet_solana());
    var isEscrowAuthorityTokenOwner = (x) => x.__kind === "TokenOwner";
    exports.isEscrowAuthorityTokenOwner = isEscrowAuthorityTokenOwner;
    var isEscrowAuthorityCreator = (x) => x.__kind === "Creator";
    exports.isEscrowAuthorityCreator = isEscrowAuthorityCreator;
    exports.escrowAuthorityBeet = beet9.dataEnum([
      ["TokenOwner", beet9.unit],
      [
        "Creator",
        new beet9.BeetArgsStruct([["fields", beet9.fixedSizeTuple([beetSolana.publicKey])]], 'EscrowAuthorityRecord["Creator"]')
      ]
    ]);
  }
});

// ../../node_modules/@metaplex-foundation/mpl-token-metadata/dist/src/generated/accounts/TokenOwnedEscrow.js
var require_TokenOwnedEscrow = __commonJS({
  "../../node_modules/@metaplex-foundation/mpl-token-metadata/dist/src/generated/accounts/TokenOwnedEscrow.js"(exports) {
    "use strict";
    var __createBinding = exports && exports.__createBinding || (Object.create ? function(o2, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      var desc = Object.getOwnPropertyDescriptor(m, k);
      if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m[k];
        } };
      }
      Object.defineProperty(o2, k2, desc);
    } : function(o2, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      o2[k2] = m[k];
    });
    var __setModuleDefault = exports && exports.__setModuleDefault || (Object.create ? function(o2, v) {
      Object.defineProperty(o2, "default", { enumerable: true, value: v });
    } : function(o2, v) {
      o2["default"] = v;
    });
    var __importStar = exports && exports.__importStar || function(mod) {
      if (mod && mod.__esModule)
        return mod;
      var result = {};
      if (mod != null) {
        for (var k in mod)
          if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k))
            __createBinding(result, mod, k);
      }
      __setModuleDefault(result, mod);
      return result;
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.tokenOwnedEscrowBeet = exports.TokenOwnedEscrow = void 0;
    var web3 = __importStar((init_index_browser_esm(), __toCommonJS(index_browser_esm_exports)));
    var beetSolana = __importStar(require_beet_solana());
    var beet9 = __importStar(require_beet());
    var Key_1 = require_Key();
    var EscrowAuthority_1 = require_EscrowAuthority();
    var TokenOwnedEscrow = class _TokenOwnedEscrow {
      constructor(key, baseToken, authority, bump) {
        this.key = key;
        this.baseToken = baseToken;
        this.authority = authority;
        this.bump = bump;
      }
      static fromArgs(args) {
        return new _TokenOwnedEscrow(args.key, args.baseToken, args.authority, args.bump);
      }
      static fromAccountInfo(accountInfo, offset = 0) {
        return _TokenOwnedEscrow.deserialize(accountInfo.data, offset);
      }
      static fromAccountAddress(connection, address, commitmentOrConfig) {
        return __async(this, null, function* () {
          const accountInfo = yield connection.getAccountInfo(address, commitmentOrConfig);
          if (accountInfo == null) {
            throw new Error(`Unable to find TokenOwnedEscrow account at ${address}`);
          }
          return _TokenOwnedEscrow.fromAccountInfo(accountInfo, 0)[0];
        });
      }
      static gpaBuilder(programId = new web3.PublicKey("metaqbxxUerdq28cj1RbAWkYQm3ybzjb6a8bt518x1s")) {
        return beetSolana.GpaBuilder.fromStruct(programId, exports.tokenOwnedEscrowBeet);
      }
      static deserialize(buf, offset = 0) {
        return exports.tokenOwnedEscrowBeet.deserialize(buf, offset);
      }
      serialize() {
        return exports.tokenOwnedEscrowBeet.serialize(this);
      }
      static byteSize(args) {
        const instance = _TokenOwnedEscrow.fromArgs(args);
        return exports.tokenOwnedEscrowBeet.toFixedFromValue(instance).byteSize;
      }
      static getMinimumBalanceForRentExemption(args, connection, commitment) {
        return __async(this, null, function* () {
          return connection.getMinimumBalanceForRentExemption(_TokenOwnedEscrow.byteSize(args), commitment);
        });
      }
      pretty() {
        return {
          key: "Key." + Key_1.Key[this.key],
          baseToken: this.baseToken.toBase58(),
          authority: this.authority.__kind,
          bump: this.bump
        };
      }
    };
    exports.TokenOwnedEscrow = TokenOwnedEscrow;
    exports.tokenOwnedEscrowBeet = new beet9.FixableBeetStruct([
      ["key", Key_1.keyBeet],
      ["baseToken", beetSolana.publicKey],
      ["authority", EscrowAuthority_1.escrowAuthorityBeet],
      ["bump", beet9.u8]
    ], TokenOwnedEscrow.fromArgs, "TokenOwnedEscrow");
  }
});

// ../../node_modules/@metaplex-foundation/mpl-token-metadata/dist/src/generated/types/TokenState.js
var require_TokenState = __commonJS({
  "../../node_modules/@metaplex-foundation/mpl-token-metadata/dist/src/generated/types/TokenState.js"(exports) {
    "use strict";
    var __createBinding = exports && exports.__createBinding || (Object.create ? function(o2, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      var desc = Object.getOwnPropertyDescriptor(m, k);
      if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m[k];
        } };
      }
      Object.defineProperty(o2, k2, desc);
    } : function(o2, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      o2[k2] = m[k];
    });
    var __setModuleDefault = exports && exports.__setModuleDefault || (Object.create ? function(o2, v) {
      Object.defineProperty(o2, "default", { enumerable: true, value: v });
    } : function(o2, v) {
      o2["default"] = v;
    });
    var __importStar = exports && exports.__importStar || function(mod) {
      if (mod && mod.__esModule)
        return mod;
      var result = {};
      if (mod != null) {
        for (var k in mod)
          if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k))
            __createBinding(result, mod, k);
      }
      __setModuleDefault(result, mod);
      return result;
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.tokenStateBeet = exports.TokenState = void 0;
    var beet9 = __importStar(require_beet());
    var TokenState;
    (function(TokenState2) {
      TokenState2[TokenState2["Unlocked"] = 0] = "Unlocked";
      TokenState2[TokenState2["Locked"] = 1] = "Locked";
      TokenState2[TokenState2["Listed"] = 2] = "Listed";
    })(TokenState = exports.TokenState || (exports.TokenState = {}));
    exports.tokenStateBeet = beet9.fixedScalarEnum(TokenState);
  }
});

// ../../node_modules/@metaplex-foundation/mpl-token-metadata/dist/src/generated/types/TokenDelegateRole.js
var require_TokenDelegateRole = __commonJS({
  "../../node_modules/@metaplex-foundation/mpl-token-metadata/dist/src/generated/types/TokenDelegateRole.js"(exports) {
    "use strict";
    var __createBinding = exports && exports.__createBinding || (Object.create ? function(o2, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      var desc = Object.getOwnPropertyDescriptor(m, k);
      if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m[k];
        } };
      }
      Object.defineProperty(o2, k2, desc);
    } : function(o2, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      o2[k2] = m[k];
    });
    var __setModuleDefault = exports && exports.__setModuleDefault || (Object.create ? function(o2, v) {
      Object.defineProperty(o2, "default", { enumerable: true, value: v });
    } : function(o2, v) {
      o2["default"] = v;
    });
    var __importStar = exports && exports.__importStar || function(mod) {
      if (mod && mod.__esModule)
        return mod;
      var result = {};
      if (mod != null) {
        for (var k in mod)
          if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k))
            __createBinding(result, mod, k);
      }
      __setModuleDefault(result, mod);
      return result;
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.tokenDelegateRoleBeet = exports.TokenDelegateRole = void 0;
    var beet9 = __importStar(require_beet());
    var TokenDelegateRole2;
    (function(TokenDelegateRole3) {
      TokenDelegateRole3[TokenDelegateRole3["Sale"] = 0] = "Sale";
      TokenDelegateRole3[TokenDelegateRole3["Transfer"] = 1] = "Transfer";
      TokenDelegateRole3[TokenDelegateRole3["Utility"] = 2] = "Utility";
      TokenDelegateRole3[TokenDelegateRole3["Staking"] = 3] = "Staking";
      TokenDelegateRole3[TokenDelegateRole3["Standard"] = 4] = "Standard";
      TokenDelegateRole3[TokenDelegateRole3["LockedTransfer"] = 5] = "LockedTransfer";
      TokenDelegateRole3[TokenDelegateRole3["Migration"] = 6] = "Migration";
    })(TokenDelegateRole2 = exports.TokenDelegateRole || (exports.TokenDelegateRole = {}));
    exports.tokenDelegateRoleBeet = beet9.fixedScalarEnum(TokenDelegateRole2);
  }
});

// ../../node_modules/@metaplex-foundation/mpl-token-metadata/dist/src/custom/index.js
var require_custom = __commonJS({
  "../../node_modules/@metaplex-foundation/mpl-token-metadata/dist/src/custom/index.js"(exports) {
    "use strict";
    var __createBinding = exports && exports.__createBinding || (Object.create ? function(o2, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      var desc = Object.getOwnPropertyDescriptor(m, k);
      if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m[k];
        } };
      }
      Object.defineProperty(o2, k2, desc);
    } : function(o2, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      o2[k2] = m[k];
    });
    var __setModuleDefault = exports && exports.__setModuleDefault || (Object.create ? function(o2, v) {
      Object.defineProperty(o2, "default", { enumerable: true, value: v });
    } : function(o2, v) {
      o2["default"] = v;
    });
    var __importStar = exports && exports.__importStar || function(mod) {
      if (mod && mod.__esModule)
        return mod;
      var result = {};
      if (mod != null) {
        for (var k in mod)
          if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k))
            __createBinding(result, mod, k);
      }
      __setModuleDefault(result, mod);
      return result;
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.tryReadOption = void 0;
    var beet9 = __importStar(require_beet());
    var NONE_BYTE_SIZE = beet9.coptionNone("").byteSize;
    function tryReadOption(optionBeet, buf, offset) {
      if (buf.subarray(offset).length == 0) {
        return [null, NONE_BYTE_SIZE, true];
      }
      const fixed = optionBeet.toFixedFromData(buf, offset);
      const value = fixed.read(buf, offset);
      return [value, fixed.byteSize, false];
    }
    exports.tryReadOption = tryReadOption;
  }
});

// ../../node_modules/@metaplex-foundation/mpl-token-metadata/dist/src/custom/token-record-deserializer.js
var require_token_record_deserializer = __commonJS({
  "../../node_modules/@metaplex-foundation/mpl-token-metadata/dist/src/custom/token-record-deserializer.js"(exports) {
    "use strict";
    var __createBinding = exports && exports.__createBinding || (Object.create ? function(o2, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      var desc = Object.getOwnPropertyDescriptor(m, k);
      if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m[k];
        } };
      }
      Object.defineProperty(o2, k2, desc);
    } : function(o2, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      o2[k2] = m[k];
    });
    var __setModuleDefault = exports && exports.__setModuleDefault || (Object.create ? function(o2, v) {
      Object.defineProperty(o2, "default", { enumerable: true, value: v });
    } : function(o2, v) {
      o2["default"] = v;
    });
    var __importStar = exports && exports.__importStar || function(mod) {
      if (mod && mod.__esModule)
        return mod;
      var result = {};
      if (mod != null) {
        for (var k in mod)
          if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k))
            __createBinding(result, mod, k);
      }
      __setModuleDefault(result, mod);
      return result;
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.deserialize = void 0;
    var beet9 = __importStar(require_beet());
    var beetSolana = __importStar(require_beet_solana());
    var Key_1 = require_Key();
    var TokenRecord_1 = require_TokenRecord();
    var generated_1 = require_generated();
    var _1 = require_custom();
    function deserialize2(buf, offset = 0) {
      let cursor = offset;
      const key = Key_1.keyBeet.read(buf, cursor);
      cursor += Key_1.keyBeet.byteSize;
      const bump = beet9.u8.read(buf, cursor);
      cursor += beet9.u8.byteSize;
      const state = generated_1.tokenStateBeet.read(buf, cursor);
      cursor += generated_1.tokenStateBeet.byteSize;
      const [ruleSetRevision, ruleSetRevisionDelta] = (0, _1.tryReadOption)(beet9.coption(beet9.u64), buf, cursor);
      cursor += ruleSetRevisionDelta;
      const [delegate, delegateDelta] = (0, _1.tryReadOption)(beet9.coption(beetSolana.publicKey), buf, cursor);
      cursor += delegateDelta;
      const [delegateRole, delegateRoleDelta] = (0, _1.tryReadOption)(beet9.coption(generated_1.tokenDelegateRoleBeet), buf, cursor);
      cursor += delegateRoleDelta;
      const [lockedTransfer, lockedTransferDelta, lockedTransferCorrupted] = (0, _1.tryReadOption)(beet9.coption(beetSolana.publicKey), buf, cursor);
      cursor += lockedTransferDelta;
      const args = {
        key,
        bump,
        state,
        ruleSetRevision,
        delegate,
        delegateRole,
        lockedTransfer: lockedTransferCorrupted ? null : lockedTransfer
      };
      return [TokenRecord_1.TokenRecord.fromArgs(args), cursor];
    }
    exports.deserialize = deserialize2;
  }
});

// ../../node_modules/@metaplex-foundation/mpl-token-metadata/dist/src/generated/accounts/TokenRecord.js
var require_TokenRecord = __commonJS({
  "../../node_modules/@metaplex-foundation/mpl-token-metadata/dist/src/generated/accounts/TokenRecord.js"(exports) {
    "use strict";
    var __createBinding = exports && exports.__createBinding || (Object.create ? function(o2, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      var desc = Object.getOwnPropertyDescriptor(m, k);
      if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m[k];
        } };
      }
      Object.defineProperty(o2, k2, desc);
    } : function(o2, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      o2[k2] = m[k];
    });
    var __setModuleDefault = exports && exports.__setModuleDefault || (Object.create ? function(o2, v) {
      Object.defineProperty(o2, "default", { enumerable: true, value: v });
    } : function(o2, v) {
      o2["default"] = v;
    });
    var __importStar = exports && exports.__importStar || function(mod) {
      if (mod && mod.__esModule)
        return mod;
      var result = {};
      if (mod != null) {
        for (var k in mod)
          if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k))
            __createBinding(result, mod, k);
      }
      __setModuleDefault(result, mod);
      return result;
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.tokenRecordBeet = exports.TokenRecord = void 0;
    var beet9 = __importStar(require_beet());
    var web3 = __importStar((init_index_browser_esm(), __toCommonJS(index_browser_esm_exports)));
    var beetSolana = __importStar(require_beet_solana());
    var Key_1 = require_Key();
    var TokenState_1 = require_TokenState();
    var TokenDelegateRole_1 = require_TokenDelegateRole();
    var customSerializer = __importStar(require_token_record_deserializer());
    var TokenRecord = class _TokenRecord {
      constructor(key, bump, state, ruleSetRevision, delegate, delegateRole, lockedTransfer) {
        this.key = key;
        this.bump = bump;
        this.state = state;
        this.ruleSetRevision = ruleSetRevision;
        this.delegate = delegate;
        this.delegateRole = delegateRole;
        this.lockedTransfer = lockedTransfer;
      }
      static fromArgs(args) {
        return new _TokenRecord(args.key, args.bump, args.state, args.ruleSetRevision, args.delegate, args.delegateRole, args.lockedTransfer);
      }
      static fromAccountInfo(accountInfo, offset = 0) {
        return _TokenRecord.deserialize(accountInfo.data, offset);
      }
      static fromAccountAddress(connection, address, commitmentOrConfig) {
        return __async(this, null, function* () {
          const accountInfo = yield connection.getAccountInfo(address, commitmentOrConfig);
          if (accountInfo == null) {
            throw new Error(`Unable to find TokenRecord account at ${address}`);
          }
          return _TokenRecord.fromAccountInfo(accountInfo, 0)[0];
        });
      }
      static gpaBuilder(programId = new web3.PublicKey("metaqbxxUerdq28cj1RbAWkYQm3ybzjb6a8bt518x1s")) {
        return beetSolana.GpaBuilder.fromStruct(programId, exports.tokenRecordBeet);
      }
      static deserialize(buf, offset = 0) {
        return resolvedDeserialize(buf, offset);
      }
      serialize() {
        return resolvedSerialize(this);
      }
      static byteSize(args) {
        const instance = _TokenRecord.fromArgs(args);
        return exports.tokenRecordBeet.toFixedFromValue(instance).byteSize;
      }
      static getMinimumBalanceForRentExemption(args, connection, commitment) {
        return __async(this, null, function* () {
          return connection.getMinimumBalanceForRentExemption(_TokenRecord.byteSize(args), commitment);
        });
      }
      pretty() {
        return {
          key: "Key." + Key_1.Key[this.key],
          bump: this.bump,
          state: "TokenState." + TokenState_1.TokenState[this.state],
          ruleSetRevision: this.ruleSetRevision,
          delegate: this.delegate,
          delegateRole: this.delegateRole,
          lockedTransfer: this.lockedTransfer
        };
      }
    };
    exports.TokenRecord = TokenRecord;
    exports.tokenRecordBeet = new beet9.FixableBeetStruct([
      ["key", Key_1.keyBeet],
      ["bump", beet9.u8],
      ["state", TokenState_1.tokenStateBeet],
      ["ruleSetRevision", beet9.coption(beet9.u64)],
      ["delegate", beet9.coption(beetSolana.publicKey)],
      ["delegateRole", beet9.coption(TokenDelegateRole_1.tokenDelegateRoleBeet)],
      ["lockedTransfer", beet9.coption(beetSolana.publicKey)]
    ], TokenRecord.fromArgs, "TokenRecord");
    var serializer = customSerializer;
    var resolvedSerialize = typeof serializer.serialize === "function" ? serializer.serialize.bind(serializer) : exports.tokenRecordBeet.serialize.bind(exports.tokenRecordBeet);
    var resolvedDeserialize = typeof serializer.deserialize === "function" ? serializer.deserialize.bind(serializer) : exports.tokenRecordBeet.deserialize.bind(exports.tokenRecordBeet);
  }
});

// ../../node_modules/@metaplex-foundation/mpl-token-metadata/dist/src/generated/accounts/UseAuthorityRecord.js
var require_UseAuthorityRecord = __commonJS({
  "../../node_modules/@metaplex-foundation/mpl-token-metadata/dist/src/generated/accounts/UseAuthorityRecord.js"(exports) {
    "use strict";
    var __createBinding = exports && exports.__createBinding || (Object.create ? function(o2, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      var desc = Object.getOwnPropertyDescriptor(m, k);
      if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m[k];
        } };
      }
      Object.defineProperty(o2, k2, desc);
    } : function(o2, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      o2[k2] = m[k];
    });
    var __setModuleDefault = exports && exports.__setModuleDefault || (Object.create ? function(o2, v) {
      Object.defineProperty(o2, "default", { enumerable: true, value: v });
    } : function(o2, v) {
      o2["default"] = v;
    });
    var __importStar = exports && exports.__importStar || function(mod) {
      if (mod && mod.__esModule)
        return mod;
      var result = {};
      if (mod != null) {
        for (var k in mod)
          if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k))
            __createBinding(result, mod, k);
      }
      __setModuleDefault(result, mod);
      return result;
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.useAuthorityRecordBeet = exports.UseAuthorityRecord = void 0;
    var beet9 = __importStar(require_beet());
    var web3 = __importStar((init_index_browser_esm(), __toCommonJS(index_browser_esm_exports)));
    var beetSolana = __importStar(require_beet_solana());
    var Key_1 = require_Key();
    var UseAuthorityRecord = class _UseAuthorityRecord {
      constructor(key, allowedUses, bump) {
        this.key = key;
        this.allowedUses = allowedUses;
        this.bump = bump;
      }
      static fromArgs(args) {
        return new _UseAuthorityRecord(args.key, args.allowedUses, args.bump);
      }
      static fromAccountInfo(accountInfo, offset = 0) {
        return _UseAuthorityRecord.deserialize(accountInfo.data, offset);
      }
      static fromAccountAddress(connection, address, commitmentOrConfig) {
        return __async(this, null, function* () {
          const accountInfo = yield connection.getAccountInfo(address, commitmentOrConfig);
          if (accountInfo == null) {
            throw new Error(`Unable to find UseAuthorityRecord account at ${address}`);
          }
          return _UseAuthorityRecord.fromAccountInfo(accountInfo, 0)[0];
        });
      }
      static gpaBuilder(programId = new web3.PublicKey("metaqbxxUerdq28cj1RbAWkYQm3ybzjb6a8bt518x1s")) {
        return beetSolana.GpaBuilder.fromStruct(programId, exports.useAuthorityRecordBeet);
      }
      static deserialize(buf, offset = 0) {
        return exports.useAuthorityRecordBeet.deserialize(buf, offset);
      }
      serialize() {
        return exports.useAuthorityRecordBeet.serialize(this);
      }
      static get byteSize() {
        return exports.useAuthorityRecordBeet.byteSize;
      }
      static getMinimumBalanceForRentExemption(connection, commitment) {
        return __async(this, null, function* () {
          return connection.getMinimumBalanceForRentExemption(_UseAuthorityRecord.byteSize, commitment);
        });
      }
      static hasCorrectByteSize(buf, offset = 0) {
        return buf.byteLength - offset === _UseAuthorityRecord.byteSize;
      }
      pretty() {
        return {
          key: "Key." + Key_1.Key[this.key],
          allowedUses: (() => {
            const x = this.allowedUses;
            if (typeof x.toNumber === "function") {
              try {
                return x.toNumber();
              } catch (_) {
                return x;
              }
            }
            return x;
          })(),
          bump: this.bump
        };
      }
    };
    exports.UseAuthorityRecord = UseAuthorityRecord;
    exports.useAuthorityRecordBeet = new beet9.BeetStruct([
      ["key", Key_1.keyBeet],
      ["allowedUses", beet9.u64],
      ["bump", beet9.u8]
    ], UseAuthorityRecord.fromArgs, "UseAuthorityRecord");
  }
});

// ../../node_modules/@metaplex-foundation/mpl-token-metadata/dist/src/generated/accounts/index.js
var require_accounts = __commonJS({
  "../../node_modules/@metaplex-foundation/mpl-token-metadata/dist/src/generated/accounts/index.js"(exports) {
    "use strict";
    var __createBinding = exports && exports.__createBinding || (Object.create ? function(o2, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      var desc = Object.getOwnPropertyDescriptor(m, k);
      if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m[k];
        } };
      }
      Object.defineProperty(o2, k2, desc);
    } : function(o2, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      o2[k2] = m[k];
    });
    var __exportStar = exports && exports.__exportStar || function(m, exports2) {
      for (var p in m)
        if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports2, p))
          __createBinding(exports2, m, p);
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.accountProviders = void 0;
    __exportStar(require_CollectionAuthorityRecord(), exports);
    __exportStar(require_Edition(), exports);
    __exportStar(require_EditionMarker(), exports);
    __exportStar(require_EditionMarkerV2(), exports);
    __exportStar(require_MasterEditionV1(), exports);
    __exportStar(require_MasterEditionV2(), exports);
    __exportStar(require_Metadata(), exports);
    __exportStar(require_MetadataDelegateRecord(), exports);
    __exportStar(require_ReservationListV1(), exports);
    __exportStar(require_ReservationListV2(), exports);
    __exportStar(require_TokenOwnedEscrow(), exports);
    __exportStar(require_TokenRecord(), exports);
    __exportStar(require_UseAuthorityRecord(), exports);
    var CollectionAuthorityRecord_1 = require_CollectionAuthorityRecord();
    var MetadataDelegateRecord_1 = require_MetadataDelegateRecord();
    var Edition_1 = require_Edition();
    var EditionMarker_1 = require_EditionMarker();
    var EditionMarkerV2_1 = require_EditionMarkerV2();
    var TokenOwnedEscrow_1 = require_TokenOwnedEscrow();
    var MasterEditionV2_1 = require_MasterEditionV2();
    var MasterEditionV1_1 = require_MasterEditionV1();
    var Metadata_1 = require_Metadata();
    var TokenRecord_1 = require_TokenRecord();
    var ReservationListV2_1 = require_ReservationListV2();
    var ReservationListV1_1 = require_ReservationListV1();
    var UseAuthorityRecord_1 = require_UseAuthorityRecord();
    exports.accountProviders = {
      CollectionAuthorityRecord: CollectionAuthorityRecord_1.CollectionAuthorityRecord,
      MetadataDelegateRecord: MetadataDelegateRecord_1.MetadataDelegateRecord,
      Edition: Edition_1.Edition,
      EditionMarker: EditionMarker_1.EditionMarker,
      EditionMarkerV2: EditionMarkerV2_1.EditionMarkerV2,
      TokenOwnedEscrow: TokenOwnedEscrow_1.TokenOwnedEscrow,
      MasterEditionV2: MasterEditionV2_1.MasterEditionV2,
      MasterEditionV1: MasterEditionV1_1.MasterEditionV1,
      Metadata: Metadata_1.Metadata,
      TokenRecord: TokenRecord_1.TokenRecord,
      ReservationListV2: ReservationListV2_1.ReservationListV2,
      ReservationListV1: ReservationListV1_1.ReservationListV1,
      UseAuthorityRecord: UseAuthorityRecord_1.UseAuthorityRecord
    };
  }
});

// ../../node_modules/@metaplex-foundation/mpl-token-metadata/dist/src/generated/errors/index.js
var require_errors = __commonJS({
  "../../node_modules/@metaplex-foundation/mpl-token-metadata/dist/src/generated/errors/index.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.ReservationAlreadyMadeError = exports.ReservationNotSetError = exports.ReservationDoesNotExistError = exports.ReservationExistsError = exports.ShareTotalMustBe100Error = exports.NoBalanceInAccountForAuthorizationError = exports.OwnerMismatchError = exports.PrimarySaleCanOnlyBeFlippedToTrueError = exports.InvalidBasisPointsError = exports.CreatorNotFoundError = exports.NoCreatorsPresentOnMetadataError = exports.MustBeOneOfCreatorsError = exports.CreatorsMustBeAtleastOneError = exports.CreatorsTooLongError = exports.DisabledError = exports.AuthorizationTokenAccountOwnerMismatchError = exports.PrintingMintAuthorizationAccountMismatchError = exports.NotEnoughTokensError = exports.TokenAccountMintMismatchV2Error = exports.TokenAccountMintMismatchError = exports.OneTimePrintingAuthMintMismatchError = exports.PrintingMintMismatchError = exports.DerivedKeyInvalidError = exports.TokenAccountOneTimeAuthMintMismatchError = exports.TokenBurnFailedError = exports.EditionMintDecimalsShouldBeZeroError = exports.OneTimePrintingAuthorizationMintDecimalsShouldBeZeroError = exports.PrintingMintDecimalsShouldBeZeroError = exports.EditionAlreadyMintedError = exports.DestinationMintMismatchError = exports.MasterRecordMismatchError = exports.TokenMintToFailedError = exports.MaxEditionsMintedAlreadyError = exports.EditionsMustHaveExactlyOneTokenError = exports.MintMismatchError = exports.UpdateAuthorityMustBeEqualToMetadataAuthorityAndSignerError = exports.UriTooLongError = exports.SymbolTooLongError = exports.NameTooLongError = exports.InvalidMintAuthorityError = exports.NotMintAuthorityError = exports.UpdateAuthorityIsNotSignerError = exports.UpdateAuthorityIncorrectError = exports.InvalidEditionKeyError = exports.InvalidMetadataKeyError = exports.UninitializedError = exports.AlreadyInitializedError = exports.NotRentExemptError = exports.InstructionPackErrorError = exports.InstructionUnpackErrorError = void 0;
    exports.RevokeCollectionAuthoritySignerIncorrectError = exports.InvalidUserError = exports.EditionOverrideCannotBeZeroError = exports.NotAllowedToChangeSellerFeeBasisPointsError = exports.CannotWipeVerifiedCreatorsError = exports.CannotRemoveVerifiedCreatorError = exports.CannotAdjustVerifiedCreatorError = exports.InvalidDelegateError = exports.InvalidFreezeAuthorityError = exports.InvalidCollectionAuthorityRecordError = exports.InvalidUseAuthorityRecordError = exports.CollectionAuthorityDoesNotExistError = exports.CollectionAuthorityRecordAlreadyExistsError = exports.NotEnoughUsesError = exports.UnusableError = exports.UseAuthorityRecordAlreadyRevokedError = exports.UseAuthorityRecordAlreadyExistsError = exports.CollectionMustBeAUniqueMasterEditionError = exports.InvalidCollectionUpdateAuthorityError = exports.CollectionNotFoundError = exports.CannotChangeUsesAfterFirstUseError = exports.CannotChangeUseMethodAfterFirstUseError = exports.InvalidUseMethodError = exports.MustBeBurnedError = exports.RemovedError = exports.CollectionCannotBeVerifiedInThisInstructionError = exports.IsMutableCanOnlyBeFlippedToFalseError = exports.ReservationArrayShouldBeSizeOneError = exports.InvalidEditionIndexError = exports.OneTimeAuthMintSupplyMustBeZeroForConversionError = exports.PrintingMintSupplyMustBeZeroForConversionError = exports.InvalidOwnerError = exports.InvalidOperationError = exports.TriedToReplaceAnExistingReservationError = exports.ReservationNotCompleteError = exports.BeyondAlottedAddressSizeError = exports.DataTypeMismatchError = exports.InvalidTokenProgramError = exports.ReservationSpotsRemainingShouldMatchTotalSpotsAtStartError = exports.DuplicateCreatorAddressError = exports.DataIsImmutableError = exports.PrintingWouldBreachMaximumSupplyError = exports.IncorrectOwnerError = exports.SpotMismatchError = exports.CannotUnverifyAnotherCreatorError = exports.CannotVerifyAnotherCreatorError = exports.AddressNotInReservationError = exports.ReservationBreachesMaximumSupplyError = exports.NumericalOverflowErrorError = exports.BeyondMaxAddressSizeError = void 0;
    exports.MissingSplTokenProgramError = exports.MissingTokenAccountError = exports.OnlySaleDelegateCanTransferError = exports.InvalidSystemWalletError = exports.FeatureNotSupportedError = exports.MissingArgumentInBuilderError = exports.MissingAccountInBuilderError = exports.DelegateNotFoundError = exports.DelegateAlreadyExistsError = exports.InvalidProgrammableConfigError = exports.MissingProgrammableConfigError = exports.MissingAuthorizationRulesError = exports.InvalidAuthorizationRulesError = exports.InvalidMintForTokenStandardError = exports.InvalidTokenStandardError = exports.MintIsNotSignerError = exports.EscrowParentHasDelegateError = exports.InvalidBubblegumSignerError = exports.InvalidCollectionSizeChangeError = exports.NoFreezeAuthoritySetError = exports.BorshSerializationErrorError = exports.InsufficientTokensError = exports.MustBeNonFungibleError = exports.InvalidSystemProgramError = exports.MustBeEscrowAuthorityError = exports.InvalidEscrowBumpSeedError = exports.MustUnverifyError = exports.EditionNumberGreaterThanMaxSupplyError = exports.PrintEditionDoesNotMatchMasterEditionError = exports.ReservationListDeprecatedError = exports.InvalidEditionMarkerError = exports.InvalidPrintEditionError = exports.InvalidMasterEditionError = exports.NotAPrintEditionError = exports.AlreadyUnverifiedError = exports.AlreadyVerifiedError = exports.CollectionMasterEditionAccountInvalidError = exports.CannotUpdateVerifiedCollectionError = exports.BorshDeserializationErrorError = exports.MasterEditionHasPrintsError = exports.NotAMasterEditionError = exports.MissingEditionAccountError = exports.CouldNotDetermineTokenStandardError = exports.NotACollectionParentError = exports.NotVerifiedMemberOfCollectionError = exports.NotAMemberOfCollectionError = exports.MissingCollectionMetadataError = exports.SizedCollectionError = exports.UnsizedCollectionError = exports.TokenCloseFailedError = void 0;
    exports.errorFromName = exports.errorFromCode = exports.InvalidMetadataFlagsError = exports.InvalidFeeAccountError = exports.MissingDelegateRecordError = exports.InvalidInstructionError = exports.InvalidCloseAuthorityError = exports.InvalidTokenRecordError = exports.MissingCollectionMasterEditionError = exports.MissingCollectionMintError = exports.InsufficientTokenBalanceError = exports.InvalidUpdateArgsError = exports.InvalidParentAccountsError = exports.InvalidInstructionsSysvarError = exports.InvalidAssociatedTokenAccountProgramError = exports.MissingEditionError = exports.CannotBurnWithDelegateError = exports.MissingEditionMarkerAccountError = exports.MissingMasterEditionTokenAccountError = exports.MissingMasterEditionMintAccountError = exports.InvalidAmountError = exports.CannotUpdateAssetWithDelegateError = exports.DataIncrementLimitExceededError = exports.InvalidLockedTransferAddressError = exports.MissingLockedTransferAddressError = exports.InvalidDelegateArgsError = exports.AmountMustBeGreaterThanZeroError = exports.MissingMasterEditionAccountError = exports.MissingPrintSupplyError = exports.InvalidDelegateRoleError = exports.IncorrectTokenStateError = exports.InvalidMasterEditionAccountLengthError = exports.MissingTokenOwnerAccountError = exports.DataIsEmptyOrZeroedError = exports.MintSupplyMustBeZeroError = exports.MissingTokenRecordError = exports.InvalidAuthorityTypeError = exports.MissingDelegateRoleError = exports.UnlockedTokenError = exports.LockedTokenError = exports.KeyMismatchError = exports.InstructionNotSupportedError = exports.InvalidTransferAuthorityError = exports.InvalidDelegateRoleForTransferError = exports.MissingAuthorizationRulesProgramError = void 0;
    var createErrorFromCodeLookup = /* @__PURE__ */ new Map();
    var createErrorFromNameLookup = /* @__PURE__ */ new Map();
    var InstructionUnpackErrorError = class _InstructionUnpackErrorError extends Error {
      constructor() {
        super("");
        this.code = 0;
        this.name = "InstructionUnpackError";
        if (typeof Error.captureStackTrace === "function") {
          Error.captureStackTrace(this, _InstructionUnpackErrorError);
        }
      }
    };
    exports.InstructionUnpackErrorError = InstructionUnpackErrorError;
    createErrorFromCodeLookup.set(0, () => new InstructionUnpackErrorError());
    createErrorFromNameLookup.set("InstructionUnpackError", () => new InstructionUnpackErrorError());
    var InstructionPackErrorError = class _InstructionPackErrorError extends Error {
      constructor() {
        super("");
        this.code = 1;
        this.name = "InstructionPackError";
        if (typeof Error.captureStackTrace === "function") {
          Error.captureStackTrace(this, _InstructionPackErrorError);
        }
      }
    };
    exports.InstructionPackErrorError = InstructionPackErrorError;
    createErrorFromCodeLookup.set(1, () => new InstructionPackErrorError());
    createErrorFromNameLookup.set("InstructionPackError", () => new InstructionPackErrorError());
    var NotRentExemptError = class _NotRentExemptError extends Error {
      constructor() {
        super("Lamport balance below rent-exempt threshold");
        this.code = 2;
        this.name = "NotRentExempt";
        if (typeof Error.captureStackTrace === "function") {
          Error.captureStackTrace(this, _NotRentExemptError);
        }
      }
    };
    exports.NotRentExemptError = NotRentExemptError;
    createErrorFromCodeLookup.set(2, () => new NotRentExemptError());
    createErrorFromNameLookup.set("NotRentExempt", () => new NotRentExemptError());
    var AlreadyInitializedError = class _AlreadyInitializedError extends Error {
      constructor() {
        super("Already initialized");
        this.code = 3;
        this.name = "AlreadyInitialized";
        if (typeof Error.captureStackTrace === "function") {
          Error.captureStackTrace(this, _AlreadyInitializedError);
        }
      }
    };
    exports.AlreadyInitializedError = AlreadyInitializedError;
    createErrorFromCodeLookup.set(3, () => new AlreadyInitializedError());
    createErrorFromNameLookup.set("AlreadyInitialized", () => new AlreadyInitializedError());
    var UninitializedError = class _UninitializedError extends Error {
      constructor() {
        super("Uninitialized");
        this.code = 4;
        this.name = "Uninitialized";
        if (typeof Error.captureStackTrace === "function") {
          Error.captureStackTrace(this, _UninitializedError);
        }
      }
    };
    exports.UninitializedError = UninitializedError;
    createErrorFromCodeLookup.set(4, () => new UninitializedError());
    createErrorFromNameLookup.set("Uninitialized", () => new UninitializedError());
    var InvalidMetadataKeyError = class _InvalidMetadataKeyError extends Error {
      constructor() {
        super(" Metadata's key must match seed of ['metadata', program id, mint] provided");
        this.code = 5;
        this.name = "InvalidMetadataKey";
        if (typeof Error.captureStackTrace === "function") {
          Error.captureStackTrace(this, _InvalidMetadataKeyError);
        }
      }
    };
    exports.InvalidMetadataKeyError = InvalidMetadataKeyError;
    createErrorFromCodeLookup.set(5, () => new InvalidMetadataKeyError());
    createErrorFromNameLookup.set("InvalidMetadataKey", () => new InvalidMetadataKeyError());
    var InvalidEditionKeyError = class _InvalidEditionKeyError extends Error {
      constructor() {
        super("Edition's key must match seed of ['metadata', program id, name, 'edition'] provided");
        this.code = 6;
        this.name = "InvalidEditionKey";
        if (typeof Error.captureStackTrace === "function") {
          Error.captureStackTrace(this, _InvalidEditionKeyError);
        }
      }
    };
    exports.InvalidEditionKeyError = InvalidEditionKeyError;
    createErrorFromCodeLookup.set(6, () => new InvalidEditionKeyError());
    createErrorFromNameLookup.set("InvalidEditionKey", () => new InvalidEditionKeyError());
    var UpdateAuthorityIncorrectError = class _UpdateAuthorityIncorrectError extends Error {
      constructor() {
        super("Update Authority given does not match");
        this.code = 7;
        this.name = "UpdateAuthorityIncorrect";
        if (typeof Error.captureStackTrace === "function") {
          Error.captureStackTrace(this, _UpdateAuthorityIncorrectError);
        }
      }
    };
    exports.UpdateAuthorityIncorrectError = UpdateAuthorityIncorrectError;
    createErrorFromCodeLookup.set(7, () => new UpdateAuthorityIncorrectError());
    createErrorFromNameLookup.set("UpdateAuthorityIncorrect", () => new UpdateAuthorityIncorrectError());
    var UpdateAuthorityIsNotSignerError = class _UpdateAuthorityIsNotSignerError extends Error {
      constructor() {
        super("Update Authority needs to be signer to update metadata");
        this.code = 8;
        this.name = "UpdateAuthorityIsNotSigner";
        if (typeof Error.captureStackTrace === "function") {
          Error.captureStackTrace(this, _UpdateAuthorityIsNotSignerError);
        }
      }
    };
    exports.UpdateAuthorityIsNotSignerError = UpdateAuthorityIsNotSignerError;
    createErrorFromCodeLookup.set(8, () => new UpdateAuthorityIsNotSignerError());
    createErrorFromNameLookup.set("UpdateAuthorityIsNotSigner", () => new UpdateAuthorityIsNotSignerError());
    var NotMintAuthorityError = class _NotMintAuthorityError extends Error {
      constructor() {
        super("You must be the mint authority and signer on this transaction");
        this.code = 9;
        this.name = "NotMintAuthority";
        if (typeof Error.captureStackTrace === "function") {
          Error.captureStackTrace(this, _NotMintAuthorityError);
        }
      }
    };
    exports.NotMintAuthorityError = NotMintAuthorityError;
    createErrorFromCodeLookup.set(9, () => new NotMintAuthorityError());
    createErrorFromNameLookup.set("NotMintAuthority", () => new NotMintAuthorityError());
    var InvalidMintAuthorityError = class _InvalidMintAuthorityError extends Error {
      constructor() {
        super("Mint authority provided does not match the authority on the mint");
        this.code = 10;
        this.name = "InvalidMintAuthority";
        if (typeof Error.captureStackTrace === "function") {
          Error.captureStackTrace(this, _InvalidMintAuthorityError);
        }
      }
    };
    exports.InvalidMintAuthorityError = InvalidMintAuthorityError;
    createErrorFromCodeLookup.set(10, () => new InvalidMintAuthorityError());
    createErrorFromNameLookup.set("InvalidMintAuthority", () => new InvalidMintAuthorityError());
    var NameTooLongError = class _NameTooLongError extends Error {
      constructor() {
        super("Name too long");
        this.code = 11;
        this.name = "NameTooLong";
        if (typeof Error.captureStackTrace === "function") {
          Error.captureStackTrace(this, _NameTooLongError);
        }
      }
    };
    exports.NameTooLongError = NameTooLongError;
    createErrorFromCodeLookup.set(11, () => new NameTooLongError());
    createErrorFromNameLookup.set("NameTooLong", () => new NameTooLongError());
    var SymbolTooLongError = class _SymbolTooLongError extends Error {
      constructor() {
        super("Symbol too long");
        this.code = 12;
        this.name = "SymbolTooLong";
        if (typeof Error.captureStackTrace === "function") {
          Error.captureStackTrace(this, _SymbolTooLongError);
        }
      }
    };
    exports.SymbolTooLongError = SymbolTooLongError;
    createErrorFromCodeLookup.set(12, () => new SymbolTooLongError());
    createErrorFromNameLookup.set("SymbolTooLong", () => new SymbolTooLongError());
    var UriTooLongError = class _UriTooLongError extends Error {
      constructor() {
        super("URI too long");
        this.code = 13;
        this.name = "UriTooLong";
        if (typeof Error.captureStackTrace === "function") {
          Error.captureStackTrace(this, _UriTooLongError);
        }
      }
    };
    exports.UriTooLongError = UriTooLongError;
    createErrorFromCodeLookup.set(13, () => new UriTooLongError());
    createErrorFromNameLookup.set("UriTooLong", () => new UriTooLongError());
    var UpdateAuthorityMustBeEqualToMetadataAuthorityAndSignerError = class _UpdateAuthorityMustBeEqualToMetadataAuthorityAndSignerError extends Error {
      constructor() {
        super("");
        this.code = 14;
        this.name = "UpdateAuthorityMustBeEqualToMetadataAuthorityAndSigner";
        if (typeof Error.captureStackTrace === "function") {
          Error.captureStackTrace(this, _UpdateAuthorityMustBeEqualToMetadataAuthorityAndSignerError);
        }
      }
    };
    exports.UpdateAuthorityMustBeEqualToMetadataAuthorityAndSignerError = UpdateAuthorityMustBeEqualToMetadataAuthorityAndSignerError;
    createErrorFromCodeLookup.set(14, () => new UpdateAuthorityMustBeEqualToMetadataAuthorityAndSignerError());
    createErrorFromNameLookup.set("UpdateAuthorityMustBeEqualToMetadataAuthorityAndSigner", () => new UpdateAuthorityMustBeEqualToMetadataAuthorityAndSignerError());
    var MintMismatchError = class _MintMismatchError extends Error {
      constructor() {
        super("Mint given does not match mint on Metadata");
        this.code = 15;
        this.name = "MintMismatch";
        if (typeof Error.captureStackTrace === "function") {
          Error.captureStackTrace(this, _MintMismatchError);
        }
      }
    };
    exports.MintMismatchError = MintMismatchError;
    createErrorFromCodeLookup.set(15, () => new MintMismatchError());
    createErrorFromNameLookup.set("MintMismatch", () => new MintMismatchError());
    var EditionsMustHaveExactlyOneTokenError = class _EditionsMustHaveExactlyOneTokenError extends Error {
      constructor() {
        super("Editions must have exactly one token");
        this.code = 16;
        this.name = "EditionsMustHaveExactlyOneToken";
        if (typeof Error.captureStackTrace === "function") {
          Error.captureStackTrace(this, _EditionsMustHaveExactlyOneTokenError);
        }
      }
    };
    exports.EditionsMustHaveExactlyOneTokenError = EditionsMustHaveExactlyOneTokenError;
    createErrorFromCodeLookup.set(16, () => new EditionsMustHaveExactlyOneTokenError());
    createErrorFromNameLookup.set("EditionsMustHaveExactlyOneToken", () => new EditionsMustHaveExactlyOneTokenError());
    var MaxEditionsMintedAlreadyError = class _MaxEditionsMintedAlreadyError extends Error {
      constructor() {
        super("");
        this.code = 17;
        this.name = "MaxEditionsMintedAlready";
        if (typeof Error.captureStackTrace === "function") {
          Error.captureStackTrace(this, _MaxEditionsMintedAlreadyError);
        }
      }
    };
    exports.MaxEditionsMintedAlreadyError = MaxEditionsMintedAlreadyError;
    createErrorFromCodeLookup.set(17, () => new MaxEditionsMintedAlreadyError());
    createErrorFromNameLookup.set("MaxEditionsMintedAlready", () => new MaxEditionsMintedAlreadyError());
    var TokenMintToFailedError = class _TokenMintToFailedError extends Error {
      constructor() {
        super("");
        this.code = 18;
        this.name = "TokenMintToFailed";
        if (typeof Error.captureStackTrace === "function") {
          Error.captureStackTrace(this, _TokenMintToFailedError);
        }
      }
    };
    exports.TokenMintToFailedError = TokenMintToFailedError;
    createErrorFromCodeLookup.set(18, () => new TokenMintToFailedError());
    createErrorFromNameLookup.set("TokenMintToFailed", () => new TokenMintToFailedError());
    var MasterRecordMismatchError = class _MasterRecordMismatchError extends Error {
      constructor() {
        super("");
        this.code = 19;
        this.name = "MasterRecordMismatch";
        if (typeof Error.captureStackTrace === "function") {
          Error.captureStackTrace(this, _MasterRecordMismatchError);
        }
      }
    };
    exports.MasterRecordMismatchError = MasterRecordMismatchError;
    createErrorFromCodeLookup.set(19, () => new MasterRecordMismatchError());
    createErrorFromNameLookup.set("MasterRecordMismatch", () => new MasterRecordMismatchError());
    var DestinationMintMismatchError = class _DestinationMintMismatchError extends Error {
      constructor() {
        super("");
        this.code = 20;
        this.name = "DestinationMintMismatch";
        if (typeof Error.captureStackTrace === "function") {
          Error.captureStackTrace(this, _DestinationMintMismatchError);
        }
      }
    };
    exports.DestinationMintMismatchError = DestinationMintMismatchError;
    createErrorFromCodeLookup.set(20, () => new DestinationMintMismatchError());
    createErrorFromNameLookup.set("DestinationMintMismatch", () => new DestinationMintMismatchError());
    var EditionAlreadyMintedError = class _EditionAlreadyMintedError extends Error {
      constructor() {
        super("");
        this.code = 21;
        this.name = "EditionAlreadyMinted";
        if (typeof Error.captureStackTrace === "function") {
          Error.captureStackTrace(this, _EditionAlreadyMintedError);
        }
      }
    };
    exports.EditionAlreadyMintedError = EditionAlreadyMintedError;
    createErrorFromCodeLookup.set(21, () => new EditionAlreadyMintedError());
    createErrorFromNameLookup.set("EditionAlreadyMinted", () => new EditionAlreadyMintedError());
    var PrintingMintDecimalsShouldBeZeroError = class _PrintingMintDecimalsShouldBeZeroError extends Error {
      constructor() {
        super("");
        this.code = 22;
        this.name = "PrintingMintDecimalsShouldBeZero";
        if (typeof Error.captureStackTrace === "function") {
          Error.captureStackTrace(this, _PrintingMintDecimalsShouldBeZeroError);
        }
      }
    };
    exports.PrintingMintDecimalsShouldBeZeroError = PrintingMintDecimalsShouldBeZeroError;
    createErrorFromCodeLookup.set(22, () => new PrintingMintDecimalsShouldBeZeroError());
    createErrorFromNameLookup.set("PrintingMintDecimalsShouldBeZero", () => new PrintingMintDecimalsShouldBeZeroError());
    var OneTimePrintingAuthorizationMintDecimalsShouldBeZeroError = class _OneTimePrintingAuthorizationMintDecimalsShouldBeZeroError extends Error {
      constructor() {
        super("");
        this.code = 23;
        this.name = "OneTimePrintingAuthorizationMintDecimalsShouldBeZero";
        if (typeof Error.captureStackTrace === "function") {
          Error.captureStackTrace(this, _OneTimePrintingAuthorizationMintDecimalsShouldBeZeroError);
        }
      }
    };
    exports.OneTimePrintingAuthorizationMintDecimalsShouldBeZeroError = OneTimePrintingAuthorizationMintDecimalsShouldBeZeroError;
    createErrorFromCodeLookup.set(23, () => new OneTimePrintingAuthorizationMintDecimalsShouldBeZeroError());
    createErrorFromNameLookup.set("OneTimePrintingAuthorizationMintDecimalsShouldBeZero", () => new OneTimePrintingAuthorizationMintDecimalsShouldBeZeroError());
    var EditionMintDecimalsShouldBeZeroError = class _EditionMintDecimalsShouldBeZeroError extends Error {
      constructor() {
        super("EditionMintDecimalsShouldBeZero");
        this.code = 24;
        this.name = "EditionMintDecimalsShouldBeZero";
        if (typeof Error.captureStackTrace === "function") {
          Error.captureStackTrace(this, _EditionMintDecimalsShouldBeZeroError);
        }
      }
    };
    exports.EditionMintDecimalsShouldBeZeroError = EditionMintDecimalsShouldBeZeroError;
    createErrorFromCodeLookup.set(24, () => new EditionMintDecimalsShouldBeZeroError());
    createErrorFromNameLookup.set("EditionMintDecimalsShouldBeZero", () => new EditionMintDecimalsShouldBeZeroError());
    var TokenBurnFailedError = class _TokenBurnFailedError extends Error {
      constructor() {
        super("");
        this.code = 25;
        this.name = "TokenBurnFailed";
        if (typeof Error.captureStackTrace === "function") {
          Error.captureStackTrace(this, _TokenBurnFailedError);
        }
      }
    };
    exports.TokenBurnFailedError = TokenBurnFailedError;
    createErrorFromCodeLookup.set(25, () => new TokenBurnFailedError());
    createErrorFromNameLookup.set("TokenBurnFailed", () => new TokenBurnFailedError());
    var TokenAccountOneTimeAuthMintMismatchError = class _TokenAccountOneTimeAuthMintMismatchError extends Error {
      constructor() {
        super("");
        this.code = 26;
        this.name = "TokenAccountOneTimeAuthMintMismatch";
        if (typeof Error.captureStackTrace === "function") {
          Error.captureStackTrace(this, _TokenAccountOneTimeAuthMintMismatchError);
        }
      }
    };
    exports.TokenAccountOneTimeAuthMintMismatchError = TokenAccountOneTimeAuthMintMismatchError;
    createErrorFromCodeLookup.set(26, () => new TokenAccountOneTimeAuthMintMismatchError());
    createErrorFromNameLookup.set("TokenAccountOneTimeAuthMintMismatch", () => new TokenAccountOneTimeAuthMintMismatchError());
    var DerivedKeyInvalidError = class _DerivedKeyInvalidError extends Error {
      constructor() {
        super("Derived key invalid");
        this.code = 27;
        this.name = "DerivedKeyInvalid";
        if (typeof Error.captureStackTrace === "function") {
          Error.captureStackTrace(this, _DerivedKeyInvalidError);
        }
      }
    };
    exports.DerivedKeyInvalidError = DerivedKeyInvalidError;
    createErrorFromCodeLookup.set(27, () => new DerivedKeyInvalidError());
    createErrorFromNameLookup.set("DerivedKeyInvalid", () => new DerivedKeyInvalidError());
    var PrintingMintMismatchError = class _PrintingMintMismatchError extends Error {
      constructor() {
        super("The Printing mint does not match that on the master edition!");
        this.code = 28;
        this.name = "PrintingMintMismatch";
        if (typeof Error.captureStackTrace === "function") {
          Error.captureStackTrace(this, _PrintingMintMismatchError);
        }
      }
    };
    exports.PrintingMintMismatchError = PrintingMintMismatchError;
    createErrorFromCodeLookup.set(28, () => new PrintingMintMismatchError());
    createErrorFromNameLookup.set("PrintingMintMismatch", () => new PrintingMintMismatchError());
    var OneTimePrintingAuthMintMismatchError = class _OneTimePrintingAuthMintMismatchError extends Error {
      constructor() {
        super("The One Time Printing Auth mint does not match that on the master edition!");
        this.code = 29;
        this.name = "OneTimePrintingAuthMintMismatch";
        if (typeof Error.captureStackTrace === "function") {
          Error.captureStackTrace(this, _OneTimePrintingAuthMintMismatchError);
        }
      }
    };
    exports.OneTimePrintingAuthMintMismatchError = OneTimePrintingAuthMintMismatchError;
    createErrorFromCodeLookup.set(29, () => new OneTimePrintingAuthMintMismatchError());
    createErrorFromNameLookup.set("OneTimePrintingAuthMintMismatch", () => new OneTimePrintingAuthMintMismatchError());
    var TokenAccountMintMismatchError = class _TokenAccountMintMismatchError extends Error {
      constructor() {
        super("The mint of the token account does not match the Printing mint!");
        this.code = 30;
        this.name = "TokenAccountMintMismatch";
        if (typeof Error.captureStackTrace === "function") {
          Error.captureStackTrace(this, _TokenAccountMintMismatchError);
        }
      }
    };
    exports.TokenAccountMintMismatchError = TokenAccountMintMismatchError;
    createErrorFromCodeLookup.set(30, () => new TokenAccountMintMismatchError());
    createErrorFromNameLookup.set("TokenAccountMintMismatch", () => new TokenAccountMintMismatchError());
    var TokenAccountMintMismatchV2Error = class _TokenAccountMintMismatchV2Error extends Error {
      constructor() {
        super("The mint of the token account does not match the master metadata mint!");
        this.code = 31;
        this.name = "TokenAccountMintMismatchV2";
        if (typeof Error.captureStackTrace === "function") {
          Error.captureStackTrace(this, _TokenAccountMintMismatchV2Error);
        }
      }
    };
    exports.TokenAccountMintMismatchV2Error = TokenAccountMintMismatchV2Error;
    createErrorFromCodeLookup.set(31, () => new TokenAccountMintMismatchV2Error());
    createErrorFromNameLookup.set("TokenAccountMintMismatchV2", () => new TokenAccountMintMismatchV2Error());
    var NotEnoughTokensError = class _NotEnoughTokensError extends Error {
      constructor() {
        super("Not enough tokens to mint a limited edition");
        this.code = 32;
        this.name = "NotEnoughTokens";
        if (typeof Error.captureStackTrace === "function") {
          Error.captureStackTrace(this, _NotEnoughTokensError);
        }
      }
    };
    exports.NotEnoughTokensError = NotEnoughTokensError;
    createErrorFromCodeLookup.set(32, () => new NotEnoughTokensError());
    createErrorFromNameLookup.set("NotEnoughTokens", () => new NotEnoughTokensError());
    var PrintingMintAuthorizationAccountMismatchError = class _PrintingMintAuthorizationAccountMismatchError extends Error {
      constructor() {
        super("");
        this.code = 33;
        this.name = "PrintingMintAuthorizationAccountMismatch";
        if (typeof Error.captureStackTrace === "function") {
          Error.captureStackTrace(this, _PrintingMintAuthorizationAccountMismatchError);
        }
      }
    };
    exports.PrintingMintAuthorizationAccountMismatchError = PrintingMintAuthorizationAccountMismatchError;
    createErrorFromCodeLookup.set(33, () => new PrintingMintAuthorizationAccountMismatchError());
    createErrorFromNameLookup.set("PrintingMintAuthorizationAccountMismatch", () => new PrintingMintAuthorizationAccountMismatchError());
    var AuthorizationTokenAccountOwnerMismatchError = class _AuthorizationTokenAccountOwnerMismatchError extends Error {
      constructor() {
        super("");
        this.code = 34;
        this.name = "AuthorizationTokenAccountOwnerMismatch";
        if (typeof Error.captureStackTrace === "function") {
          Error.captureStackTrace(this, _AuthorizationTokenAccountOwnerMismatchError);
        }
      }
    };
    exports.AuthorizationTokenAccountOwnerMismatchError = AuthorizationTokenAccountOwnerMismatchError;
    createErrorFromCodeLookup.set(34, () => new AuthorizationTokenAccountOwnerMismatchError());
    createErrorFromNameLookup.set("AuthorizationTokenAccountOwnerMismatch", () => new AuthorizationTokenAccountOwnerMismatchError());
    var DisabledError = class _DisabledError extends Error {
      constructor() {
        super("");
        this.code = 35;
        this.name = "Disabled";
        if (typeof Error.captureStackTrace === "function") {
          Error.captureStackTrace(this, _DisabledError);
        }
      }
    };
    exports.DisabledError = DisabledError;
    createErrorFromCodeLookup.set(35, () => new DisabledError());
    createErrorFromNameLookup.set("Disabled", () => new DisabledError());
    var CreatorsTooLongError = class _CreatorsTooLongError extends Error {
      constructor() {
        super("Creators list too long");
        this.code = 36;
        this.name = "CreatorsTooLong";
        if (typeof Error.captureStackTrace === "function") {
          Error.captureStackTrace(this, _CreatorsTooLongError);
        }
      }
    };
    exports.CreatorsTooLongError = CreatorsTooLongError;
    createErrorFromCodeLookup.set(36, () => new CreatorsTooLongError());
    createErrorFromNameLookup.set("CreatorsTooLong", () => new CreatorsTooLongError());
    var CreatorsMustBeAtleastOneError = class _CreatorsMustBeAtleastOneError extends Error {
      constructor() {
        super("Creators must be at least one if set");
        this.code = 37;
        this.name = "CreatorsMustBeAtleastOne";
        if (typeof Error.captureStackTrace === "function") {
          Error.captureStackTrace(this, _CreatorsMustBeAtleastOneError);
        }
      }
    };
    exports.CreatorsMustBeAtleastOneError = CreatorsMustBeAtleastOneError;
    createErrorFromCodeLookup.set(37, () => new CreatorsMustBeAtleastOneError());
    createErrorFromNameLookup.set("CreatorsMustBeAtleastOne", () => new CreatorsMustBeAtleastOneError());
    var MustBeOneOfCreatorsError = class _MustBeOneOfCreatorsError extends Error {
      constructor() {
        super("");
        this.code = 38;
        this.name = "MustBeOneOfCreators";
        if (typeof Error.captureStackTrace === "function") {
          Error.captureStackTrace(this, _MustBeOneOfCreatorsError);
        }
      }
    };
    exports.MustBeOneOfCreatorsError = MustBeOneOfCreatorsError;
    createErrorFromCodeLookup.set(38, () => new MustBeOneOfCreatorsError());
    createErrorFromNameLookup.set("MustBeOneOfCreators", () => new MustBeOneOfCreatorsError());
    var NoCreatorsPresentOnMetadataError = class _NoCreatorsPresentOnMetadataError extends Error {
      constructor() {
        super("This metadata does not have creators");
        this.code = 39;
        this.name = "NoCreatorsPresentOnMetadata";
        if (typeof Error.captureStackTrace === "function") {
          Error.captureStackTrace(this, _NoCreatorsPresentOnMetadataError);
        }
      }
    };
    exports.NoCreatorsPresentOnMetadataError = NoCreatorsPresentOnMetadataError;
    createErrorFromCodeLookup.set(39, () => new NoCreatorsPresentOnMetadataError());
    createErrorFromNameLookup.set("NoCreatorsPresentOnMetadata", () => new NoCreatorsPresentOnMetadataError());
    var CreatorNotFoundError = class _CreatorNotFoundError extends Error {
      constructor() {
        super("This creator address was not found");
        this.code = 40;
        this.name = "CreatorNotFound";
        if (typeof Error.captureStackTrace === "function") {
          Error.captureStackTrace(this, _CreatorNotFoundError);
        }
      }
    };
    exports.CreatorNotFoundError = CreatorNotFoundError;
    createErrorFromCodeLookup.set(40, () => new CreatorNotFoundError());
    createErrorFromNameLookup.set("CreatorNotFound", () => new CreatorNotFoundError());
    var InvalidBasisPointsError = class _InvalidBasisPointsError extends Error {
      constructor() {
        super("Basis points cannot be more than 10000");
        this.code = 41;
        this.name = "InvalidBasisPoints";
        if (typeof Error.captureStackTrace === "function") {
          Error.captureStackTrace(this, _InvalidBasisPointsError);
        }
      }
    };
    exports.InvalidBasisPointsError = InvalidBasisPointsError;
    createErrorFromCodeLookup.set(41, () => new InvalidBasisPointsError());
    createErrorFromNameLookup.set("InvalidBasisPoints", () => new InvalidBasisPointsError());
    var PrimarySaleCanOnlyBeFlippedToTrueError = class _PrimarySaleCanOnlyBeFlippedToTrueError extends Error {
      constructor() {
        super("Primary sale can only be flipped to true and is immutable");
        this.code = 42;
        this.name = "PrimarySaleCanOnlyBeFlippedToTrue";
        if (typeof Error.captureStackTrace === "function") {
          Error.captureStackTrace(this, _PrimarySaleCanOnlyBeFlippedToTrueError);
        }
      }
    };
    exports.PrimarySaleCanOnlyBeFlippedToTrueError = PrimarySaleCanOnlyBeFlippedToTrueError;
    createErrorFromCodeLookup.set(42, () => new PrimarySaleCanOnlyBeFlippedToTrueError());
    createErrorFromNameLookup.set("PrimarySaleCanOnlyBeFlippedToTrue", () => new PrimarySaleCanOnlyBeFlippedToTrueError());
    var OwnerMismatchError = class _OwnerMismatchError extends Error {
      constructor() {
        super("Owner does not match that on the account given");
        this.code = 43;
        this.name = "OwnerMismatch";
        if (typeof Error.captureStackTrace === "function") {
          Error.captureStackTrace(this, _OwnerMismatchError);
        }
      }
    };
    exports.OwnerMismatchError = OwnerMismatchError;
    createErrorFromCodeLookup.set(43, () => new OwnerMismatchError());
    createErrorFromNameLookup.set("OwnerMismatch", () => new OwnerMismatchError());
    var NoBalanceInAccountForAuthorizationError = class _NoBalanceInAccountForAuthorizationError extends Error {
      constructor() {
        super("This account has no tokens to be used for authorization");
        this.code = 44;
        this.name = "NoBalanceInAccountForAuthorization";
        if (typeof Error.captureStackTrace === "function") {
          Error.captureStackTrace(this, _NoBalanceInAccountForAuthorizationError);
        }
      }
    };
    exports.NoBalanceInAccountForAuthorizationError = NoBalanceInAccountForAuthorizationError;
    createErrorFromCodeLookup.set(44, () => new NoBalanceInAccountForAuthorizationError());
    createErrorFromNameLookup.set("NoBalanceInAccountForAuthorization", () => new NoBalanceInAccountForAuthorizationError());
    var ShareTotalMustBe100Error = class _ShareTotalMustBe100Error extends Error {
      constructor() {
        super("Share total must equal 100 for creator array");
        this.code = 45;
        this.name = "ShareTotalMustBe100";
        if (typeof Error.captureStackTrace === "function") {
          Error.captureStackTrace(this, _ShareTotalMustBe100Error);
        }
      }
    };
    exports.ShareTotalMustBe100Error = ShareTotalMustBe100Error;
    createErrorFromCodeLookup.set(45, () => new ShareTotalMustBe100Error());
    createErrorFromNameLookup.set("ShareTotalMustBe100", () => new ShareTotalMustBe100Error());
    var ReservationExistsError = class _ReservationExistsError extends Error {
      constructor() {
        super("");
        this.code = 46;
        this.name = "ReservationExists";
        if (typeof Error.captureStackTrace === "function") {
          Error.captureStackTrace(this, _ReservationExistsError);
        }
      }
    };
    exports.ReservationExistsError = ReservationExistsError;
    createErrorFromCodeLookup.set(46, () => new ReservationExistsError());
    createErrorFromNameLookup.set("ReservationExists", () => new ReservationExistsError());
    var ReservationDoesNotExistError = class _ReservationDoesNotExistError extends Error {
      constructor() {
        super("");
        this.code = 47;
        this.name = "ReservationDoesNotExist";
        if (typeof Error.captureStackTrace === "function") {
          Error.captureStackTrace(this, _ReservationDoesNotExistError);
        }
      }
    };
    exports.ReservationDoesNotExistError = ReservationDoesNotExistError;
    createErrorFromCodeLookup.set(47, () => new ReservationDoesNotExistError());
    createErrorFromNameLookup.set("ReservationDoesNotExist", () => new ReservationDoesNotExistError());
    var ReservationNotSetError = class _ReservationNotSetError extends Error {
      constructor() {
        super("");
        this.code = 48;
        this.name = "ReservationNotSet";
        if (typeof Error.captureStackTrace === "function") {
          Error.captureStackTrace(this, _ReservationNotSetError);
        }
      }
    };
    exports.ReservationNotSetError = ReservationNotSetError;
    createErrorFromCodeLookup.set(48, () => new ReservationNotSetError());
    createErrorFromNameLookup.set("ReservationNotSet", () => new ReservationNotSetError());
    var ReservationAlreadyMadeError = class _ReservationAlreadyMadeError extends Error {
      constructor() {
        super("");
        this.code = 49;
        this.name = "ReservationAlreadyMade";
        if (typeof Error.captureStackTrace === "function") {
          Error.captureStackTrace(this, _ReservationAlreadyMadeError);
        }
      }
    };
    exports.ReservationAlreadyMadeError = ReservationAlreadyMadeError;
    createErrorFromCodeLookup.set(49, () => new ReservationAlreadyMadeError());
    createErrorFromNameLookup.set("ReservationAlreadyMade", () => new ReservationAlreadyMadeError());
    var BeyondMaxAddressSizeError = class _BeyondMaxAddressSizeError extends Error {
      constructor() {
        super("");
        this.code = 50;
        this.name = "BeyondMaxAddressSize";
        if (typeof Error.captureStackTrace === "function") {
          Error.captureStackTrace(this, _BeyondMaxAddressSizeError);
        }
      }
    };
    exports.BeyondMaxAddressSizeError = BeyondMaxAddressSizeError;
    createErrorFromCodeLookup.set(50, () => new BeyondMaxAddressSizeError());
    createErrorFromNameLookup.set("BeyondMaxAddressSize", () => new BeyondMaxAddressSizeError());
    var NumericalOverflowErrorError = class _NumericalOverflowErrorError extends Error {
      constructor() {
        super("NumericalOverflowError");
        this.code = 51;
        this.name = "NumericalOverflowError";
        if (typeof Error.captureStackTrace === "function") {
          Error.captureStackTrace(this, _NumericalOverflowErrorError);
        }
      }
    };
    exports.NumericalOverflowErrorError = NumericalOverflowErrorError;
    createErrorFromCodeLookup.set(51, () => new NumericalOverflowErrorError());
    createErrorFromNameLookup.set("NumericalOverflowError", () => new NumericalOverflowErrorError());
    var ReservationBreachesMaximumSupplyError = class _ReservationBreachesMaximumSupplyError extends Error {
      constructor() {
        super("");
        this.code = 52;
        this.name = "ReservationBreachesMaximumSupply";
        if (typeof Error.captureStackTrace === "function") {
          Error.captureStackTrace(this, _ReservationBreachesMaximumSupplyError);
        }
      }
    };
    exports.ReservationBreachesMaximumSupplyError = ReservationBreachesMaximumSupplyError;
    createErrorFromCodeLookup.set(52, () => new ReservationBreachesMaximumSupplyError());
    createErrorFromNameLookup.set("ReservationBreachesMaximumSupply", () => new ReservationBreachesMaximumSupplyError());
    var AddressNotInReservationError = class _AddressNotInReservationError extends Error {
      constructor() {
        super("");
        this.code = 53;
        this.name = "AddressNotInReservation";
        if (typeof Error.captureStackTrace === "function") {
          Error.captureStackTrace(this, _AddressNotInReservationError);
        }
      }
    };
    exports.AddressNotInReservationError = AddressNotInReservationError;
    createErrorFromCodeLookup.set(53, () => new AddressNotInReservationError());
    createErrorFromNameLookup.set("AddressNotInReservation", () => new AddressNotInReservationError());
    var CannotVerifyAnotherCreatorError = class _CannotVerifyAnotherCreatorError extends Error {
      constructor() {
        super("You cannot unilaterally verify another creator, they must sign");
        this.code = 54;
        this.name = "CannotVerifyAnotherCreator";
        if (typeof Error.captureStackTrace === "function") {
          Error.captureStackTrace(this, _CannotVerifyAnotherCreatorError);
        }
      }
    };
    exports.CannotVerifyAnotherCreatorError = CannotVerifyAnotherCreatorError;
    createErrorFromCodeLookup.set(54, () => new CannotVerifyAnotherCreatorError());
    createErrorFromNameLookup.set("CannotVerifyAnotherCreator", () => new CannotVerifyAnotherCreatorError());
    var CannotUnverifyAnotherCreatorError = class _CannotUnverifyAnotherCreatorError extends Error {
      constructor() {
        super("You cannot unilaterally unverify another creator");
        this.code = 55;
        this.name = "CannotUnverifyAnotherCreator";
        if (typeof Error.captureStackTrace === "function") {
          Error.captureStackTrace(this, _CannotUnverifyAnotherCreatorError);
        }
      }
    };
    exports.CannotUnverifyAnotherCreatorError = CannotUnverifyAnotherCreatorError;
    createErrorFromCodeLookup.set(55, () => new CannotUnverifyAnotherCreatorError());
    createErrorFromNameLookup.set("CannotUnverifyAnotherCreator", () => new CannotUnverifyAnotherCreatorError());
    var SpotMismatchError = class _SpotMismatchError extends Error {
      constructor() {
        super("");
        this.code = 56;
        this.name = "SpotMismatch";
        if (typeof Error.captureStackTrace === "function") {
          Error.captureStackTrace(this, _SpotMismatchError);
        }
      }
    };
    exports.SpotMismatchError = SpotMismatchError;
    createErrorFromCodeLookup.set(56, () => new SpotMismatchError());
    createErrorFromNameLookup.set("SpotMismatch", () => new SpotMismatchError());
    var IncorrectOwnerError = class _IncorrectOwnerError extends Error {
      constructor() {
        super("Incorrect account owner");
        this.code = 57;
        this.name = "IncorrectOwner";
        if (typeof Error.captureStackTrace === "function") {
          Error.captureStackTrace(this, _IncorrectOwnerError);
        }
      }
    };
    exports.IncorrectOwnerError = IncorrectOwnerError;
    createErrorFromCodeLookup.set(57, () => new IncorrectOwnerError());
    createErrorFromNameLookup.set("IncorrectOwner", () => new IncorrectOwnerError());
    var PrintingWouldBreachMaximumSupplyError = class _PrintingWouldBreachMaximumSupplyError extends Error {
      constructor() {
        super("");
        this.code = 58;
        this.name = "PrintingWouldBreachMaximumSupply";
        if (typeof Error.captureStackTrace === "function") {
          Error.captureStackTrace(this, _PrintingWouldBreachMaximumSupplyError);
        }
      }
    };
    exports.PrintingWouldBreachMaximumSupplyError = PrintingWouldBreachMaximumSupplyError;
    createErrorFromCodeLookup.set(58, () => new PrintingWouldBreachMaximumSupplyError());
    createErrorFromNameLookup.set("PrintingWouldBreachMaximumSupply", () => new PrintingWouldBreachMaximumSupplyError());
    var DataIsImmutableError = class _DataIsImmutableError extends Error {
      constructor() {
        super("Data is immutable");
        this.code = 59;
        this.name = "DataIsImmutable";
        if (typeof Error.captureStackTrace === "function") {
          Error.captureStackTrace(this, _DataIsImmutableError);
        }
      }
    };
    exports.DataIsImmutableError = DataIsImmutableError;
    createErrorFromCodeLookup.set(59, () => new DataIsImmutableError());
    createErrorFromNameLookup.set("DataIsImmutable", () => new DataIsImmutableError());
    var DuplicateCreatorAddressError = class _DuplicateCreatorAddressError extends Error {
      constructor() {
        super("No duplicate creator addresses");
        this.code = 60;
        this.name = "DuplicateCreatorAddress";
        if (typeof Error.captureStackTrace === "function") {
          Error.captureStackTrace(this, _DuplicateCreatorAddressError);
        }
      }
    };
    exports.DuplicateCreatorAddressError = DuplicateCreatorAddressError;
    createErrorFromCodeLookup.set(60, () => new DuplicateCreatorAddressError());
    createErrorFromNameLookup.set("DuplicateCreatorAddress", () => new DuplicateCreatorAddressError());
    var ReservationSpotsRemainingShouldMatchTotalSpotsAtStartError = class _ReservationSpotsRemainingShouldMatchTotalSpotsAtStartError extends Error {
      constructor() {
        super("");
        this.code = 61;
        this.name = "ReservationSpotsRemainingShouldMatchTotalSpotsAtStart";
        if (typeof Error.captureStackTrace === "function") {
          Error.captureStackTrace(this, _ReservationSpotsRemainingShouldMatchTotalSpotsAtStartError);
        }
      }
    };
    exports.ReservationSpotsRemainingShouldMatchTotalSpotsAtStartError = ReservationSpotsRemainingShouldMatchTotalSpotsAtStartError;
    createErrorFromCodeLookup.set(61, () => new ReservationSpotsRemainingShouldMatchTotalSpotsAtStartError());
    createErrorFromNameLookup.set("ReservationSpotsRemainingShouldMatchTotalSpotsAtStart", () => new ReservationSpotsRemainingShouldMatchTotalSpotsAtStartError());
    var InvalidTokenProgramError = class _InvalidTokenProgramError extends Error {
      constructor() {
        super("Invalid token program");
        this.code = 62;
        this.name = "InvalidTokenProgram";
        if (typeof Error.captureStackTrace === "function") {
          Error.captureStackTrace(this, _InvalidTokenProgramError);
        }
      }
    };
    exports.InvalidTokenProgramError = InvalidTokenProgramError;
    createErrorFromCodeLookup.set(62, () => new InvalidTokenProgramError());
    createErrorFromNameLookup.set("InvalidTokenProgram", () => new InvalidTokenProgramError());
    var DataTypeMismatchError = class _DataTypeMismatchError extends Error {
      constructor() {
        super("Data type mismatch");
        this.code = 63;
        this.name = "DataTypeMismatch";
        if (typeof Error.captureStackTrace === "function") {
          Error.captureStackTrace(this, _DataTypeMismatchError);
        }
      }
    };
    exports.DataTypeMismatchError = DataTypeMismatchError;
    createErrorFromCodeLookup.set(63, () => new DataTypeMismatchError());
    createErrorFromNameLookup.set("DataTypeMismatch", () => new DataTypeMismatchError());
    var BeyondAlottedAddressSizeError = class _BeyondAlottedAddressSizeError extends Error {
      constructor() {
        super("");
        this.code = 64;
        this.name = "BeyondAlottedAddressSize";
        if (typeof Error.captureStackTrace === "function") {
          Error.captureStackTrace(this, _BeyondAlottedAddressSizeError);
        }
      }
    };
    exports.BeyondAlottedAddressSizeError = BeyondAlottedAddressSizeError;
    createErrorFromCodeLookup.set(64, () => new BeyondAlottedAddressSizeError());
    createErrorFromNameLookup.set("BeyondAlottedAddressSize", () => new BeyondAlottedAddressSizeError());
    var ReservationNotCompleteError = class _ReservationNotCompleteError extends Error {
      constructor() {
        super("");
        this.code = 65;
        this.name = "ReservationNotComplete";
        if (typeof Error.captureStackTrace === "function") {
          Error.captureStackTrace(this, _ReservationNotCompleteError);
        }
      }
    };
    exports.ReservationNotCompleteError = ReservationNotCompleteError;
    createErrorFromCodeLookup.set(65, () => new ReservationNotCompleteError());
    createErrorFromNameLookup.set("ReservationNotComplete", () => new ReservationNotCompleteError());
    var TriedToReplaceAnExistingReservationError = class _TriedToReplaceAnExistingReservationError extends Error {
      constructor() {
        super("");
        this.code = 66;
        this.name = "TriedToReplaceAnExistingReservation";
        if (typeof Error.captureStackTrace === "function") {
          Error.captureStackTrace(this, _TriedToReplaceAnExistingReservationError);
        }
      }
    };
    exports.TriedToReplaceAnExistingReservationError = TriedToReplaceAnExistingReservationError;
    createErrorFromCodeLookup.set(66, () => new TriedToReplaceAnExistingReservationError());
    createErrorFromNameLookup.set("TriedToReplaceAnExistingReservation", () => new TriedToReplaceAnExistingReservationError());
    var InvalidOperationError = class _InvalidOperationError extends Error {
      constructor() {
        super("Invalid operation");
        this.code = 67;
        this.name = "InvalidOperation";
        if (typeof Error.captureStackTrace === "function") {
          Error.captureStackTrace(this, _InvalidOperationError);
        }
      }
    };
    exports.InvalidOperationError = InvalidOperationError;
    createErrorFromCodeLookup.set(67, () => new InvalidOperationError());
    createErrorFromNameLookup.set("InvalidOperation", () => new InvalidOperationError());
    var InvalidOwnerError = class _InvalidOwnerError extends Error {
      constructor() {
        super("Invalid Owner");
        this.code = 68;
        this.name = "InvalidOwner";
        if (typeof Error.captureStackTrace === "function") {
          Error.captureStackTrace(this, _InvalidOwnerError);
        }
      }
    };
    exports.InvalidOwnerError = InvalidOwnerError;
    createErrorFromCodeLookup.set(68, () => new InvalidOwnerError());
    createErrorFromNameLookup.set("InvalidOwner", () => new InvalidOwnerError());
    var PrintingMintSupplyMustBeZeroForConversionError = class _PrintingMintSupplyMustBeZeroForConversionError extends Error {
      constructor() {
        super("Printing mint supply must be zero for conversion");
        this.code = 69;
        this.name = "PrintingMintSupplyMustBeZeroForConversion";
        if (typeof Error.captureStackTrace === "function") {
          Error.captureStackTrace(this, _PrintingMintSupplyMustBeZeroForConversionError);
        }
      }
    };
    exports.PrintingMintSupplyMustBeZeroForConversionError = PrintingMintSupplyMustBeZeroForConversionError;
    createErrorFromCodeLookup.set(69, () => new PrintingMintSupplyMustBeZeroForConversionError());
    createErrorFromNameLookup.set("PrintingMintSupplyMustBeZeroForConversion", () => new PrintingMintSupplyMustBeZeroForConversionError());
    var OneTimeAuthMintSupplyMustBeZeroForConversionError = class _OneTimeAuthMintSupplyMustBeZeroForConversionError extends Error {
      constructor() {
        super("One Time Auth mint supply must be zero for conversion");
        this.code = 70;
        this.name = "OneTimeAuthMintSupplyMustBeZeroForConversion";
        if (typeof Error.captureStackTrace === "function") {
          Error.captureStackTrace(this, _OneTimeAuthMintSupplyMustBeZeroForConversionError);
        }
      }
    };
    exports.OneTimeAuthMintSupplyMustBeZeroForConversionError = OneTimeAuthMintSupplyMustBeZeroForConversionError;
    createErrorFromCodeLookup.set(70, () => new OneTimeAuthMintSupplyMustBeZeroForConversionError());
    createErrorFromNameLookup.set("OneTimeAuthMintSupplyMustBeZeroForConversion", () => new OneTimeAuthMintSupplyMustBeZeroForConversionError());
    var InvalidEditionIndexError = class _InvalidEditionIndexError extends Error {
      constructor() {
        super("You tried to insert one edition too many into an edition mark pda");
        this.code = 71;
        this.name = "InvalidEditionIndex";
        if (typeof Error.captureStackTrace === "function") {
          Error.captureStackTrace(this, _InvalidEditionIndexError);
        }
      }
    };
    exports.InvalidEditionIndexError = InvalidEditionIndexError;
    createErrorFromCodeLookup.set(71, () => new InvalidEditionIndexError());
    createErrorFromNameLookup.set("InvalidEditionIndex", () => new InvalidEditionIndexError());
    var ReservationArrayShouldBeSizeOneError = class _ReservationArrayShouldBeSizeOneError extends Error {
      constructor() {
        super("");
        this.code = 72;
        this.name = "ReservationArrayShouldBeSizeOne";
        if (typeof Error.captureStackTrace === "function") {
          Error.captureStackTrace(this, _ReservationArrayShouldBeSizeOneError);
        }
      }
    };
    exports.ReservationArrayShouldBeSizeOneError = ReservationArrayShouldBeSizeOneError;
    createErrorFromCodeLookup.set(72, () => new ReservationArrayShouldBeSizeOneError());
    createErrorFromNameLookup.set("ReservationArrayShouldBeSizeOne", () => new ReservationArrayShouldBeSizeOneError());
    var IsMutableCanOnlyBeFlippedToFalseError = class _IsMutableCanOnlyBeFlippedToFalseError extends Error {
      constructor() {
        super("Is Mutable can only be flipped to false");
        this.code = 73;
        this.name = "IsMutableCanOnlyBeFlippedToFalse";
        if (typeof Error.captureStackTrace === "function") {
          Error.captureStackTrace(this, _IsMutableCanOnlyBeFlippedToFalseError);
        }
      }
    };
    exports.IsMutableCanOnlyBeFlippedToFalseError = IsMutableCanOnlyBeFlippedToFalseError;
    createErrorFromCodeLookup.set(73, () => new IsMutableCanOnlyBeFlippedToFalseError());
    createErrorFromNameLookup.set("IsMutableCanOnlyBeFlippedToFalse", () => new IsMutableCanOnlyBeFlippedToFalseError());
    var CollectionCannotBeVerifiedInThisInstructionError = class _CollectionCannotBeVerifiedInThisInstructionError extends Error {
      constructor() {
        super("Collection cannot be verified in this instruction");
        this.code = 74;
        this.name = "CollectionCannotBeVerifiedInThisInstruction";
        if (typeof Error.captureStackTrace === "function") {
          Error.captureStackTrace(this, _CollectionCannotBeVerifiedInThisInstructionError);
        }
      }
    };
    exports.CollectionCannotBeVerifiedInThisInstructionError = CollectionCannotBeVerifiedInThisInstructionError;
    createErrorFromCodeLookup.set(74, () => new CollectionCannotBeVerifiedInThisInstructionError());
    createErrorFromNameLookup.set("CollectionCannotBeVerifiedInThisInstruction", () => new CollectionCannotBeVerifiedInThisInstructionError());
    var RemovedError = class _RemovedError extends Error {
      constructor() {
        super("This instruction was deprecated in a previous release and is now removed");
        this.code = 75;
        this.name = "Removed";
        if (typeof Error.captureStackTrace === "function") {
          Error.captureStackTrace(this, _RemovedError);
        }
      }
    };
    exports.RemovedError = RemovedError;
    createErrorFromCodeLookup.set(75, () => new RemovedError());
    createErrorFromNameLookup.set("Removed", () => new RemovedError());
    var MustBeBurnedError = class _MustBeBurnedError extends Error {
      constructor() {
        super("");
        this.code = 76;
        this.name = "MustBeBurned";
        if (typeof Error.captureStackTrace === "function") {
          Error.captureStackTrace(this, _MustBeBurnedError);
        }
      }
    };
    exports.MustBeBurnedError = MustBeBurnedError;
    createErrorFromCodeLookup.set(76, () => new MustBeBurnedError());
    createErrorFromNameLookup.set("MustBeBurned", () => new MustBeBurnedError());
    var InvalidUseMethodError = class _InvalidUseMethodError extends Error {
      constructor() {
        super("This use method is invalid");
        this.code = 77;
        this.name = "InvalidUseMethod";
        if (typeof Error.captureStackTrace === "function") {
          Error.captureStackTrace(this, _InvalidUseMethodError);
        }
      }
    };
    exports.InvalidUseMethodError = InvalidUseMethodError;
    createErrorFromCodeLookup.set(77, () => new InvalidUseMethodError());
    createErrorFromNameLookup.set("InvalidUseMethod", () => new InvalidUseMethodError());
    var CannotChangeUseMethodAfterFirstUseError = class _CannotChangeUseMethodAfterFirstUseError extends Error {
      constructor() {
        super("Cannot Change Use Method after the first use");
        this.code = 78;
        this.name = "CannotChangeUseMethodAfterFirstUse";
        if (typeof Error.captureStackTrace === "function") {
          Error.captureStackTrace(this, _CannotChangeUseMethodAfterFirstUseError);
        }
      }
    };
    exports.CannotChangeUseMethodAfterFirstUseError = CannotChangeUseMethodAfterFirstUseError;
    createErrorFromCodeLookup.set(78, () => new CannotChangeUseMethodAfterFirstUseError());
    createErrorFromNameLookup.set("CannotChangeUseMethodAfterFirstUse", () => new CannotChangeUseMethodAfterFirstUseError());
    var CannotChangeUsesAfterFirstUseError = class _CannotChangeUsesAfterFirstUseError extends Error {
      constructor() {
        super("Cannot Change Remaining or Available uses after the first use");
        this.code = 79;
        this.name = "CannotChangeUsesAfterFirstUse";
        if (typeof Error.captureStackTrace === "function") {
          Error.captureStackTrace(this, _CannotChangeUsesAfterFirstUseError);
        }
      }
    };
    exports.CannotChangeUsesAfterFirstUseError = CannotChangeUsesAfterFirstUseError;
    createErrorFromCodeLookup.set(79, () => new CannotChangeUsesAfterFirstUseError());
    createErrorFromNameLookup.set("CannotChangeUsesAfterFirstUse", () => new CannotChangeUsesAfterFirstUseError());
    var CollectionNotFoundError = class _CollectionNotFoundError extends Error {
      constructor() {
        super("Collection Not Found on Metadata");
        this.code = 80;
        this.name = "CollectionNotFound";
        if (typeof Error.captureStackTrace === "function") {
          Error.captureStackTrace(this, _CollectionNotFoundError);
        }
      }
    };
    exports.CollectionNotFoundError = CollectionNotFoundError;
    createErrorFromCodeLookup.set(80, () => new CollectionNotFoundError());
    createErrorFromNameLookup.set("CollectionNotFound", () => new CollectionNotFoundError());
    var InvalidCollectionUpdateAuthorityError = class _InvalidCollectionUpdateAuthorityError extends Error {
      constructor() {
        super("Collection Update Authority is invalid");
        this.code = 81;
        this.name = "InvalidCollectionUpdateAuthority";
        if (typeof Error.captureStackTrace === "function") {
          Error.captureStackTrace(this, _InvalidCollectionUpdateAuthorityError);
        }
      }
    };
    exports.InvalidCollectionUpdateAuthorityError = InvalidCollectionUpdateAuthorityError;
    createErrorFromCodeLookup.set(81, () => new InvalidCollectionUpdateAuthorityError());
    createErrorFromNameLookup.set("InvalidCollectionUpdateAuthority", () => new InvalidCollectionUpdateAuthorityError());
    var CollectionMustBeAUniqueMasterEditionError = class _CollectionMustBeAUniqueMasterEditionError extends Error {
      constructor() {
        super("Collection Must Be a Unique Master Edition v2");
        this.code = 82;
        this.name = "CollectionMustBeAUniqueMasterEdition";
        if (typeof Error.captureStackTrace === "function") {
          Error.captureStackTrace(this, _CollectionMustBeAUniqueMasterEditionError);
        }
      }
    };
    exports.CollectionMustBeAUniqueMasterEditionError = CollectionMustBeAUniqueMasterEditionError;
    createErrorFromCodeLookup.set(82, () => new CollectionMustBeAUniqueMasterEditionError());
    createErrorFromNameLookup.set("CollectionMustBeAUniqueMasterEdition", () => new CollectionMustBeAUniqueMasterEditionError());
    var UseAuthorityRecordAlreadyExistsError = class _UseAuthorityRecordAlreadyExistsError extends Error {
      constructor() {
        super("The Use Authority Record Already Exists, to modify it Revoke, then Approve");
        this.code = 83;
        this.name = "UseAuthorityRecordAlreadyExists";
        if (typeof Error.captureStackTrace === "function") {
          Error.captureStackTrace(this, _UseAuthorityRecordAlreadyExistsError);
        }
      }
    };
    exports.UseAuthorityRecordAlreadyExistsError = UseAuthorityRecordAlreadyExistsError;
    createErrorFromCodeLookup.set(83, () => new UseAuthorityRecordAlreadyExistsError());
    createErrorFromNameLookup.set("UseAuthorityRecordAlreadyExists", () => new UseAuthorityRecordAlreadyExistsError());
    var UseAuthorityRecordAlreadyRevokedError = class _UseAuthorityRecordAlreadyRevokedError extends Error {
      constructor() {
        super("The Use Authority Record is empty or already revoked");
        this.code = 84;
        this.name = "UseAuthorityRecordAlreadyRevoked";
        if (typeof Error.captureStackTrace === "function") {
          Error.captureStackTrace(this, _UseAuthorityRecordAlreadyRevokedError);
        }
      }
    };
    exports.UseAuthorityRecordAlreadyRevokedError = UseAuthorityRecordAlreadyRevokedError;
    createErrorFromCodeLookup.set(84, () => new UseAuthorityRecordAlreadyRevokedError());
    createErrorFromNameLookup.set("UseAuthorityRecordAlreadyRevoked", () => new UseAuthorityRecordAlreadyRevokedError());
    var UnusableError = class _UnusableError extends Error {
      constructor() {
        super("This token has no uses");
        this.code = 85;
        this.name = "Unusable";
        if (typeof Error.captureStackTrace === "function") {
          Error.captureStackTrace(this, _UnusableError);
        }
      }
    };
    exports.UnusableError = UnusableError;
    createErrorFromCodeLookup.set(85, () => new UnusableError());
    createErrorFromNameLookup.set("Unusable", () => new UnusableError());
    var NotEnoughUsesError = class _NotEnoughUsesError extends Error {
      constructor() {
        super("There are not enough Uses left on this token.");
        this.code = 86;
        this.name = "NotEnoughUses";
        if (typeof Error.captureStackTrace === "function") {
          Error.captureStackTrace(this, _NotEnoughUsesError);
        }
      }
    };
    exports.NotEnoughUsesError = NotEnoughUsesError;
    createErrorFromCodeLookup.set(86, () => new NotEnoughUsesError());
    createErrorFromNameLookup.set("NotEnoughUses", () => new NotEnoughUsesError());
    var CollectionAuthorityRecordAlreadyExistsError = class _CollectionAuthorityRecordAlreadyExistsError extends Error {
      constructor() {
        super("This Collection Authority Record Already Exists.");
        this.code = 87;
        this.name = "CollectionAuthorityRecordAlreadyExists";
        if (typeof Error.captureStackTrace === "function") {
          Error.captureStackTrace(this, _CollectionAuthorityRecordAlreadyExistsError);
        }
      }
    };
    exports.CollectionAuthorityRecordAlreadyExistsError = CollectionAuthorityRecordAlreadyExistsError;
    createErrorFromCodeLookup.set(87, () => new CollectionAuthorityRecordAlreadyExistsError());
    createErrorFromNameLookup.set("CollectionAuthorityRecordAlreadyExists", () => new CollectionAuthorityRecordAlreadyExistsError());
    var CollectionAuthorityDoesNotExistError = class _CollectionAuthorityDoesNotExistError extends Error {
      constructor() {
        super("This Collection Authority Record Does Not Exist.");
        this.code = 88;
        this.name = "CollectionAuthorityDoesNotExist";
        if (typeof Error.captureStackTrace === "function") {
          Error.captureStackTrace(this, _CollectionAuthorityDoesNotExistError);
        }
      }
    };
    exports.CollectionAuthorityDoesNotExistError = CollectionAuthorityDoesNotExistError;
    createErrorFromCodeLookup.set(88, () => new CollectionAuthorityDoesNotExistError());
    createErrorFromNameLookup.set("CollectionAuthorityDoesNotExist", () => new CollectionAuthorityDoesNotExistError());
    var InvalidUseAuthorityRecordError = class _InvalidUseAuthorityRecordError extends Error {
      constructor() {
        super("This Use Authority Record is invalid.");
        this.code = 89;
        this.name = "InvalidUseAuthorityRecord";
        if (typeof Error.captureStackTrace === "function") {
          Error.captureStackTrace(this, _InvalidUseAuthorityRecordError);
        }
      }
    };
    exports.InvalidUseAuthorityRecordError = InvalidUseAuthorityRecordError;
    createErrorFromCodeLookup.set(89, () => new InvalidUseAuthorityRecordError());
    createErrorFromNameLookup.set("InvalidUseAuthorityRecord", () => new InvalidUseAuthorityRecordError());
    var InvalidCollectionAuthorityRecordError = class _InvalidCollectionAuthorityRecordError extends Error {
      constructor() {
        super("");
        this.code = 90;
        this.name = "InvalidCollectionAuthorityRecord";
        if (typeof Error.captureStackTrace === "function") {
          Error.captureStackTrace(this, _InvalidCollectionAuthorityRecordError);
        }
      }
    };
    exports.InvalidCollectionAuthorityRecordError = InvalidCollectionAuthorityRecordError;
    createErrorFromCodeLookup.set(90, () => new InvalidCollectionAuthorityRecordError());
    createErrorFromNameLookup.set("InvalidCollectionAuthorityRecord", () => new InvalidCollectionAuthorityRecordError());
    var InvalidFreezeAuthorityError = class _InvalidFreezeAuthorityError extends Error {
      constructor() {
        super("Metadata does not match the freeze authority on the mint");
        this.code = 91;
        this.name = "InvalidFreezeAuthority";
        if (typeof Error.captureStackTrace === "function") {
          Error.captureStackTrace(this, _InvalidFreezeAuthorityError);
        }
      }
    };
    exports.InvalidFreezeAuthorityError = InvalidFreezeAuthorityError;
    createErrorFromCodeLookup.set(91, () => new InvalidFreezeAuthorityError());
    createErrorFromNameLookup.set("InvalidFreezeAuthority", () => new InvalidFreezeAuthorityError());
    var InvalidDelegateError = class _InvalidDelegateError extends Error {
      constructor() {
        super("All tokens in this account have not been delegated to this user.");
        this.code = 92;
        this.name = "InvalidDelegate";
        if (typeof Error.captureStackTrace === "function") {
          Error.captureStackTrace(this, _InvalidDelegateError);
        }
      }
    };
    exports.InvalidDelegateError = InvalidDelegateError;
    createErrorFromCodeLookup.set(92, () => new InvalidDelegateError());
    createErrorFromNameLookup.set("InvalidDelegate", () => new InvalidDelegateError());
    var CannotAdjustVerifiedCreatorError = class _CannotAdjustVerifiedCreatorError extends Error {
      constructor() {
        super("");
        this.code = 93;
        this.name = "CannotAdjustVerifiedCreator";
        if (typeof Error.captureStackTrace === "function") {
          Error.captureStackTrace(this, _CannotAdjustVerifiedCreatorError);
        }
      }
    };
    exports.CannotAdjustVerifiedCreatorError = CannotAdjustVerifiedCreatorError;
    createErrorFromCodeLookup.set(93, () => new CannotAdjustVerifiedCreatorError());
    createErrorFromNameLookup.set("CannotAdjustVerifiedCreator", () => new CannotAdjustVerifiedCreatorError());
    var CannotRemoveVerifiedCreatorError = class _CannotRemoveVerifiedCreatorError extends Error {
      constructor() {
        super("Verified creators cannot be removed.");
        this.code = 94;
        this.name = "CannotRemoveVerifiedCreator";
        if (typeof Error.captureStackTrace === "function") {
          Error.captureStackTrace(this, _CannotRemoveVerifiedCreatorError);
        }
      }
    };
    exports.CannotRemoveVerifiedCreatorError = CannotRemoveVerifiedCreatorError;
    createErrorFromCodeLookup.set(94, () => new CannotRemoveVerifiedCreatorError());
    createErrorFromNameLookup.set("CannotRemoveVerifiedCreator", () => new CannotRemoveVerifiedCreatorError());
    var CannotWipeVerifiedCreatorsError = class _CannotWipeVerifiedCreatorsError extends Error {
      constructor() {
        super("");
        this.code = 95;
        this.name = "CannotWipeVerifiedCreators";
        if (typeof Error.captureStackTrace === "function") {
          Error.captureStackTrace(this, _CannotWipeVerifiedCreatorsError);
        }
      }
    };
    exports.CannotWipeVerifiedCreatorsError = CannotWipeVerifiedCreatorsError;
    createErrorFromCodeLookup.set(95, () => new CannotWipeVerifiedCreatorsError());
    createErrorFromNameLookup.set("CannotWipeVerifiedCreators", () => new CannotWipeVerifiedCreatorsError());
    var NotAllowedToChangeSellerFeeBasisPointsError = class _NotAllowedToChangeSellerFeeBasisPointsError extends Error {
      constructor() {
        super("");
        this.code = 96;
        this.name = "NotAllowedToChangeSellerFeeBasisPoints";
        if (typeof Error.captureStackTrace === "function") {
          Error.captureStackTrace(this, _NotAllowedToChangeSellerFeeBasisPointsError);
        }
      }
    };
    exports.NotAllowedToChangeSellerFeeBasisPointsError = NotAllowedToChangeSellerFeeBasisPointsError;
    createErrorFromCodeLookup.set(96, () => new NotAllowedToChangeSellerFeeBasisPointsError());
    createErrorFromNameLookup.set("NotAllowedToChangeSellerFeeBasisPoints", () => new NotAllowedToChangeSellerFeeBasisPointsError());
    var EditionOverrideCannotBeZeroError = class _EditionOverrideCannotBeZeroError extends Error {
      constructor() {
        super("Edition override cannot be zero");
        this.code = 97;
        this.name = "EditionOverrideCannotBeZero";
        if (typeof Error.captureStackTrace === "function") {
          Error.captureStackTrace(this, _EditionOverrideCannotBeZeroError);
        }
      }
    };
    exports.EditionOverrideCannotBeZeroError = EditionOverrideCannotBeZeroError;
    createErrorFromCodeLookup.set(97, () => new EditionOverrideCannotBeZeroError());
    createErrorFromNameLookup.set("EditionOverrideCannotBeZero", () => new EditionOverrideCannotBeZeroError());
    var InvalidUserError = class _InvalidUserError extends Error {
      constructor() {
        super("Invalid User");
        this.code = 98;
        this.name = "InvalidUser";
        if (typeof Error.captureStackTrace === "function") {
          Error.captureStackTrace(this, _InvalidUserError);
        }
      }
    };
    exports.InvalidUserError = InvalidUserError;
    createErrorFromCodeLookup.set(98, () => new InvalidUserError());
    createErrorFromNameLookup.set("InvalidUser", () => new InvalidUserError());
    var RevokeCollectionAuthoritySignerIncorrectError = class _RevokeCollectionAuthoritySignerIncorrectError extends Error {
      constructor() {
        super("Revoke Collection Authority signer is incorrect");
        this.code = 99;
        this.name = "RevokeCollectionAuthoritySignerIncorrect";
        if (typeof Error.captureStackTrace === "function") {
          Error.captureStackTrace(this, _RevokeCollectionAuthoritySignerIncorrectError);
        }
      }
    };
    exports.RevokeCollectionAuthoritySignerIncorrectError = RevokeCollectionAuthoritySignerIncorrectError;
    createErrorFromCodeLookup.set(99, () => new RevokeCollectionAuthoritySignerIncorrectError());
    createErrorFromNameLookup.set("RevokeCollectionAuthoritySignerIncorrect", () => new RevokeCollectionAuthoritySignerIncorrectError());
    var TokenCloseFailedError = class _TokenCloseFailedError extends Error {
      constructor() {
        super("");
        this.code = 100;
        this.name = "TokenCloseFailed";
        if (typeof Error.captureStackTrace === "function") {
          Error.captureStackTrace(this, _TokenCloseFailedError);
        }
      }
    };
    exports.TokenCloseFailedError = TokenCloseFailedError;
    createErrorFromCodeLookup.set(100, () => new TokenCloseFailedError());
    createErrorFromNameLookup.set("TokenCloseFailed", () => new TokenCloseFailedError());
    var UnsizedCollectionError = class _UnsizedCollectionError extends Error {
      constructor() {
        super("Can't use this function on unsized collection");
        this.code = 101;
        this.name = "UnsizedCollection";
        if (typeof Error.captureStackTrace === "function") {
          Error.captureStackTrace(this, _UnsizedCollectionError);
        }
      }
    };
    exports.UnsizedCollectionError = UnsizedCollectionError;
    createErrorFromCodeLookup.set(101, () => new UnsizedCollectionError());
    createErrorFromNameLookup.set("UnsizedCollection", () => new UnsizedCollectionError());
    var SizedCollectionError = class _SizedCollectionError extends Error {
      constructor() {
        super("Can't use this function on a sized collection");
        this.code = 102;
        this.name = "SizedCollection";
        if (typeof Error.captureStackTrace === "function") {
          Error.captureStackTrace(this, _SizedCollectionError);
        }
      }
    };
    exports.SizedCollectionError = SizedCollectionError;
    createErrorFromCodeLookup.set(102, () => new SizedCollectionError());
    createErrorFromNameLookup.set("SizedCollection", () => new SizedCollectionError());
    var MissingCollectionMetadataError = class _MissingCollectionMetadataError extends Error {
      constructor() {
        super("Missing collection metadata account");
        this.code = 103;
        this.name = "MissingCollectionMetadata";
        if (typeof Error.captureStackTrace === "function") {
          Error.captureStackTrace(this, _MissingCollectionMetadataError);
        }
      }
    };
    exports.MissingCollectionMetadataError = MissingCollectionMetadataError;
    createErrorFromCodeLookup.set(103, () => new MissingCollectionMetadataError());
    createErrorFromNameLookup.set("MissingCollectionMetadata", () => new MissingCollectionMetadataError());
    var NotAMemberOfCollectionError = class _NotAMemberOfCollectionError extends Error {
      constructor() {
        super("This NFT is not a member of the specified collection.");
        this.code = 104;
        this.name = "NotAMemberOfCollection";
        if (typeof Error.captureStackTrace === "function") {
          Error.captureStackTrace(this, _NotAMemberOfCollectionError);
        }
      }
    };
    exports.NotAMemberOfCollectionError = NotAMemberOfCollectionError;
    createErrorFromCodeLookup.set(104, () => new NotAMemberOfCollectionError());
    createErrorFromNameLookup.set("NotAMemberOfCollection", () => new NotAMemberOfCollectionError());
    var NotVerifiedMemberOfCollectionError = class _NotVerifiedMemberOfCollectionError extends Error {
      constructor() {
        super("This NFT is not a verified member of the specified collection.");
        this.code = 105;
        this.name = "NotVerifiedMemberOfCollection";
        if (typeof Error.captureStackTrace === "function") {
          Error.captureStackTrace(this, _NotVerifiedMemberOfCollectionError);
        }
      }
    };
    exports.NotVerifiedMemberOfCollectionError = NotVerifiedMemberOfCollectionError;
    createErrorFromCodeLookup.set(105, () => new NotVerifiedMemberOfCollectionError());
    createErrorFromNameLookup.set("NotVerifiedMemberOfCollection", () => new NotVerifiedMemberOfCollectionError());
    var NotACollectionParentError = class _NotACollectionParentError extends Error {
      constructor() {
        super("This NFT is not a collection parent NFT.");
        this.code = 106;
        this.name = "NotACollectionParent";
        if (typeof Error.captureStackTrace === "function") {
          Error.captureStackTrace(this, _NotACollectionParentError);
        }
      }
    };
    exports.NotACollectionParentError = NotACollectionParentError;
    createErrorFromCodeLookup.set(106, () => new NotACollectionParentError());
    createErrorFromNameLookup.set("NotACollectionParent", () => new NotACollectionParentError());
    var CouldNotDetermineTokenStandardError = class _CouldNotDetermineTokenStandardError extends Error {
      constructor() {
        super("Could not determine a TokenStandard type.");
        this.code = 107;
        this.name = "CouldNotDetermineTokenStandard";
        if (typeof Error.captureStackTrace === "function") {
          Error.captureStackTrace(this, _CouldNotDetermineTokenStandardError);
        }
      }
    };
    exports.CouldNotDetermineTokenStandardError = CouldNotDetermineTokenStandardError;
    createErrorFromCodeLookup.set(107, () => new CouldNotDetermineTokenStandardError());
    createErrorFromNameLookup.set("CouldNotDetermineTokenStandard", () => new CouldNotDetermineTokenStandardError());
    var MissingEditionAccountError = class _MissingEditionAccountError extends Error {
      constructor() {
        super("This mint account has an edition but none was provided.");
        this.code = 108;
        this.name = "MissingEditionAccount";
        if (typeof Error.captureStackTrace === "function") {
          Error.captureStackTrace(this, _MissingEditionAccountError);
        }
      }
    };
    exports.MissingEditionAccountError = MissingEditionAccountError;
    createErrorFromCodeLookup.set(108, () => new MissingEditionAccountError());
    createErrorFromNameLookup.set("MissingEditionAccount", () => new MissingEditionAccountError());
    var NotAMasterEditionError = class _NotAMasterEditionError extends Error {
      constructor() {
        super("This edition is not a Master Edition");
        this.code = 109;
        this.name = "NotAMasterEdition";
        if (typeof Error.captureStackTrace === "function") {
          Error.captureStackTrace(this, _NotAMasterEditionError);
        }
      }
    };
    exports.NotAMasterEditionError = NotAMasterEditionError;
    createErrorFromCodeLookup.set(109, () => new NotAMasterEditionError());
    createErrorFromNameLookup.set("NotAMasterEdition", () => new NotAMasterEditionError());
    var MasterEditionHasPrintsError = class _MasterEditionHasPrintsError extends Error {
      constructor() {
        super("This Master Edition has existing prints");
        this.code = 110;
        this.name = "MasterEditionHasPrints";
        if (typeof Error.captureStackTrace === "function") {
          Error.captureStackTrace(this, _MasterEditionHasPrintsError);
        }
      }
    };
    exports.MasterEditionHasPrintsError = MasterEditionHasPrintsError;
    createErrorFromCodeLookup.set(110, () => new MasterEditionHasPrintsError());
    createErrorFromNameLookup.set("MasterEditionHasPrints", () => new MasterEditionHasPrintsError());
    var BorshDeserializationErrorError = class _BorshDeserializationErrorError extends Error {
      constructor() {
        super("");
        this.code = 111;
        this.name = "BorshDeserializationError";
        if (typeof Error.captureStackTrace === "function") {
          Error.captureStackTrace(this, _BorshDeserializationErrorError);
        }
      }
    };
    exports.BorshDeserializationErrorError = BorshDeserializationErrorError;
    createErrorFromCodeLookup.set(111, () => new BorshDeserializationErrorError());
    createErrorFromNameLookup.set("BorshDeserializationError", () => new BorshDeserializationErrorError());
    var CannotUpdateVerifiedCollectionError = class _CannotUpdateVerifiedCollectionError extends Error {
      constructor() {
        super("Cannot update a verified collection in this command");
        this.code = 112;
        this.name = "CannotUpdateVerifiedCollection";
        if (typeof Error.captureStackTrace === "function") {
          Error.captureStackTrace(this, _CannotUpdateVerifiedCollectionError);
        }
      }
    };
    exports.CannotUpdateVerifiedCollectionError = CannotUpdateVerifiedCollectionError;
    createErrorFromCodeLookup.set(112, () => new CannotUpdateVerifiedCollectionError());
    createErrorFromNameLookup.set("CannotUpdateVerifiedCollection", () => new CannotUpdateVerifiedCollectionError());
    var CollectionMasterEditionAccountInvalidError = class _CollectionMasterEditionAccountInvalidError extends Error {
      constructor() {
        super("Edition account doesnt match collection ");
        this.code = 113;
        this.name = "CollectionMasterEditionAccountInvalid";
        if (typeof Error.captureStackTrace === "function") {
          Error.captureStackTrace(this, _CollectionMasterEditionAccountInvalidError);
        }
      }
    };
    exports.CollectionMasterEditionAccountInvalidError = CollectionMasterEditionAccountInvalidError;
    createErrorFromCodeLookup.set(113, () => new CollectionMasterEditionAccountInvalidError());
    createErrorFromNameLookup.set("CollectionMasterEditionAccountInvalid", () => new CollectionMasterEditionAccountInvalidError());
    var AlreadyVerifiedError = class _AlreadyVerifiedError extends Error {
      constructor() {
        super("Item is already verified.");
        this.code = 114;
        this.name = "AlreadyVerified";
        if (typeof Error.captureStackTrace === "function") {
          Error.captureStackTrace(this, _AlreadyVerifiedError);
        }
      }
    };
    exports.AlreadyVerifiedError = AlreadyVerifiedError;
    createErrorFromCodeLookup.set(114, () => new AlreadyVerifiedError());
    createErrorFromNameLookup.set("AlreadyVerified", () => new AlreadyVerifiedError());
    var AlreadyUnverifiedError = class _AlreadyUnverifiedError extends Error {
      constructor() {
        super("");
        this.code = 115;
        this.name = "AlreadyUnverified";
        if (typeof Error.captureStackTrace === "function") {
          Error.captureStackTrace(this, _AlreadyUnverifiedError);
        }
      }
    };
    exports.AlreadyUnverifiedError = AlreadyUnverifiedError;
    createErrorFromCodeLookup.set(115, () => new AlreadyUnverifiedError());
    createErrorFromNameLookup.set("AlreadyUnverified", () => new AlreadyUnverifiedError());
    var NotAPrintEditionError = class _NotAPrintEditionError extends Error {
      constructor() {
        super("This edition is not a Print Edition");
        this.code = 116;
        this.name = "NotAPrintEdition";
        if (typeof Error.captureStackTrace === "function") {
          Error.captureStackTrace(this, _NotAPrintEditionError);
        }
      }
    };
    exports.NotAPrintEditionError = NotAPrintEditionError;
    createErrorFromCodeLookup.set(116, () => new NotAPrintEditionError());
    createErrorFromNameLookup.set("NotAPrintEdition", () => new NotAPrintEditionError());
    var InvalidMasterEditionError = class _InvalidMasterEditionError extends Error {
      constructor() {
        super("Invalid Master Edition");
        this.code = 117;
        this.name = "InvalidMasterEdition";
        if (typeof Error.captureStackTrace === "function") {
          Error.captureStackTrace(this, _InvalidMasterEditionError);
        }
      }
    };
    exports.InvalidMasterEditionError = InvalidMasterEditionError;
    createErrorFromCodeLookup.set(117, () => new InvalidMasterEditionError());
    createErrorFromNameLookup.set("InvalidMasterEdition", () => new InvalidMasterEditionError());
    var InvalidPrintEditionError = class _InvalidPrintEditionError extends Error {
      constructor() {
        super("Invalid Print Edition");
        this.code = 118;
        this.name = "InvalidPrintEdition";
        if (typeof Error.captureStackTrace === "function") {
          Error.captureStackTrace(this, _InvalidPrintEditionError);
        }
      }
    };
    exports.InvalidPrintEditionError = InvalidPrintEditionError;
    createErrorFromCodeLookup.set(118, () => new InvalidPrintEditionError());
    createErrorFromNameLookup.set("InvalidPrintEdition", () => new InvalidPrintEditionError());
    var InvalidEditionMarkerError = class _InvalidEditionMarkerError extends Error {
      constructor() {
        super("Invalid Edition Marker");
        this.code = 119;
        this.name = "InvalidEditionMarker";
        if (typeof Error.captureStackTrace === "function") {
          Error.captureStackTrace(this, _InvalidEditionMarkerError);
        }
      }
    };
    exports.InvalidEditionMarkerError = InvalidEditionMarkerError;
    createErrorFromCodeLookup.set(119, () => new InvalidEditionMarkerError());
    createErrorFromNameLookup.set("InvalidEditionMarker", () => new InvalidEditionMarkerError());
    var ReservationListDeprecatedError = class _ReservationListDeprecatedError extends Error {
      constructor() {
        super("Reservation List is Deprecated");
        this.code = 120;
        this.name = "ReservationListDeprecated";
        if (typeof Error.captureStackTrace === "function") {
          Error.captureStackTrace(this, _ReservationListDeprecatedError);
        }
      }
    };
    exports.ReservationListDeprecatedError = ReservationListDeprecatedError;
    createErrorFromCodeLookup.set(120, () => new ReservationListDeprecatedError());
    createErrorFromNameLookup.set("ReservationListDeprecated", () => new ReservationListDeprecatedError());
    var PrintEditionDoesNotMatchMasterEditionError = class _PrintEditionDoesNotMatchMasterEditionError extends Error {
      constructor() {
        super("Print Edition does not match Master Edition");
        this.code = 121;
        this.name = "PrintEditionDoesNotMatchMasterEdition";
        if (typeof Error.captureStackTrace === "function") {
          Error.captureStackTrace(this, _PrintEditionDoesNotMatchMasterEditionError);
        }
      }
    };
    exports.PrintEditionDoesNotMatchMasterEditionError = PrintEditionDoesNotMatchMasterEditionError;
    createErrorFromCodeLookup.set(121, () => new PrintEditionDoesNotMatchMasterEditionError());
    createErrorFromNameLookup.set("PrintEditionDoesNotMatchMasterEdition", () => new PrintEditionDoesNotMatchMasterEditionError());
    var EditionNumberGreaterThanMaxSupplyError = class _EditionNumberGreaterThanMaxSupplyError extends Error {
      constructor() {
        super("Edition Number greater than max supply");
        this.code = 122;
        this.name = "EditionNumberGreaterThanMaxSupply";
        if (typeof Error.captureStackTrace === "function") {
          Error.captureStackTrace(this, _EditionNumberGreaterThanMaxSupplyError);
        }
      }
    };
    exports.EditionNumberGreaterThanMaxSupplyError = EditionNumberGreaterThanMaxSupplyError;
    createErrorFromCodeLookup.set(122, () => new EditionNumberGreaterThanMaxSupplyError());
    createErrorFromNameLookup.set("EditionNumberGreaterThanMaxSupply", () => new EditionNumberGreaterThanMaxSupplyError());
    var MustUnverifyError = class _MustUnverifyError extends Error {
      constructor() {
        super("Must unverify before migrating collections.");
        this.code = 123;
        this.name = "MustUnverify";
        if (typeof Error.captureStackTrace === "function") {
          Error.captureStackTrace(this, _MustUnverifyError);
        }
      }
    };
    exports.MustUnverifyError = MustUnverifyError;
    createErrorFromCodeLookup.set(123, () => new MustUnverifyError());
    createErrorFromNameLookup.set("MustUnverify", () => new MustUnverifyError());
    var InvalidEscrowBumpSeedError = class _InvalidEscrowBumpSeedError extends Error {
      constructor() {
        super("Invalid Escrow Account Bump Seed");
        this.code = 124;
        this.name = "InvalidEscrowBumpSeed";
        if (typeof Error.captureStackTrace === "function") {
          Error.captureStackTrace(this, _InvalidEscrowBumpSeedError);
        }
      }
    };
    exports.InvalidEscrowBumpSeedError = InvalidEscrowBumpSeedError;
    createErrorFromCodeLookup.set(124, () => new InvalidEscrowBumpSeedError());
    createErrorFromNameLookup.set("InvalidEscrowBumpSeed", () => new InvalidEscrowBumpSeedError());
    var MustBeEscrowAuthorityError = class _MustBeEscrowAuthorityError extends Error {
      constructor() {
        super("Must Escrow Authority");
        this.code = 125;
        this.name = "MustBeEscrowAuthority";
        if (typeof Error.captureStackTrace === "function") {
          Error.captureStackTrace(this, _MustBeEscrowAuthorityError);
        }
      }
    };
    exports.MustBeEscrowAuthorityError = MustBeEscrowAuthorityError;
    createErrorFromCodeLookup.set(125, () => new MustBeEscrowAuthorityError());
    createErrorFromNameLookup.set("MustBeEscrowAuthority", () => new MustBeEscrowAuthorityError());
    var InvalidSystemProgramError = class _InvalidSystemProgramError extends Error {
      constructor() {
        super("Invalid System Program");
        this.code = 126;
        this.name = "InvalidSystemProgram";
        if (typeof Error.captureStackTrace === "function") {
          Error.captureStackTrace(this, _InvalidSystemProgramError);
        }
      }
    };
    exports.InvalidSystemProgramError = InvalidSystemProgramError;
    createErrorFromCodeLookup.set(126, () => new InvalidSystemProgramError());
    createErrorFromNameLookup.set("InvalidSystemProgram", () => new InvalidSystemProgramError());
    var MustBeNonFungibleError = class _MustBeNonFungibleError extends Error {
      constructor() {
        super("Must be a Non Fungible Token");
        this.code = 127;
        this.name = "MustBeNonFungible";
        if (typeof Error.captureStackTrace === "function") {
          Error.captureStackTrace(this, _MustBeNonFungibleError);
        }
      }
    };
    exports.MustBeNonFungibleError = MustBeNonFungibleError;
    createErrorFromCodeLookup.set(127, () => new MustBeNonFungibleError());
    createErrorFromNameLookup.set("MustBeNonFungible", () => new MustBeNonFungibleError());
    var InsufficientTokensError = class _InsufficientTokensError extends Error {
      constructor() {
        super("Insufficient tokens for transfer");
        this.code = 128;
        this.name = "InsufficientTokens";
        if (typeof Error.captureStackTrace === "function") {
          Error.captureStackTrace(this, _InsufficientTokensError);
        }
      }
    };
    exports.InsufficientTokensError = InsufficientTokensError;
    createErrorFromCodeLookup.set(128, () => new InsufficientTokensError());
    createErrorFromNameLookup.set("InsufficientTokens", () => new InsufficientTokensError());
    var BorshSerializationErrorError = class _BorshSerializationErrorError extends Error {
      constructor() {
        super("Borsh Serialization Error");
        this.code = 129;
        this.name = "BorshSerializationError";
        if (typeof Error.captureStackTrace === "function") {
          Error.captureStackTrace(this, _BorshSerializationErrorError);
        }
      }
    };
    exports.BorshSerializationErrorError = BorshSerializationErrorError;
    createErrorFromCodeLookup.set(129, () => new BorshSerializationErrorError());
    createErrorFromNameLookup.set("BorshSerializationError", () => new BorshSerializationErrorError());
    var NoFreezeAuthoritySetError = class _NoFreezeAuthoritySetError extends Error {
      constructor() {
        super("Cannot create NFT with no Freeze Authority.");
        this.code = 130;
        this.name = "NoFreezeAuthoritySet";
        if (typeof Error.captureStackTrace === "function") {
          Error.captureStackTrace(this, _NoFreezeAuthoritySetError);
        }
      }
    };
    exports.NoFreezeAuthoritySetError = NoFreezeAuthoritySetError;
    createErrorFromCodeLookup.set(130, () => new NoFreezeAuthoritySetError());
    createErrorFromNameLookup.set("NoFreezeAuthoritySet", () => new NoFreezeAuthoritySetError());
    var InvalidCollectionSizeChangeError = class _InvalidCollectionSizeChangeError extends Error {
      constructor() {
        super("Invalid collection size change");
        this.code = 131;
        this.name = "InvalidCollectionSizeChange";
        if (typeof Error.captureStackTrace === "function") {
          Error.captureStackTrace(this, _InvalidCollectionSizeChangeError);
        }
      }
    };
    exports.InvalidCollectionSizeChangeError = InvalidCollectionSizeChangeError;
    createErrorFromCodeLookup.set(131, () => new InvalidCollectionSizeChangeError());
    createErrorFromNameLookup.set("InvalidCollectionSizeChange", () => new InvalidCollectionSizeChangeError());
    var InvalidBubblegumSignerError = class _InvalidBubblegumSignerError extends Error {
      constructor() {
        super("Invalid bubblegum signer");
        this.code = 132;
        this.name = "InvalidBubblegumSigner";
        if (typeof Error.captureStackTrace === "function") {
          Error.captureStackTrace(this, _InvalidBubblegumSignerError);
        }
      }
    };
    exports.InvalidBubblegumSignerError = InvalidBubblegumSignerError;
    createErrorFromCodeLookup.set(132, () => new InvalidBubblegumSignerError());
    createErrorFromNameLookup.set("InvalidBubblegumSigner", () => new InvalidBubblegumSignerError());
    var EscrowParentHasDelegateError = class _EscrowParentHasDelegateError extends Error {
      constructor() {
        super("Escrow parent cannot have a delegate");
        this.code = 133;
        this.name = "EscrowParentHasDelegate";
        if (typeof Error.captureStackTrace === "function") {
          Error.captureStackTrace(this, _EscrowParentHasDelegateError);
        }
      }
    };
    exports.EscrowParentHasDelegateError = EscrowParentHasDelegateError;
    createErrorFromCodeLookup.set(133, () => new EscrowParentHasDelegateError());
    createErrorFromNameLookup.set("EscrowParentHasDelegate", () => new EscrowParentHasDelegateError());
    var MintIsNotSignerError = class _MintIsNotSignerError extends Error {
      constructor() {
        super("Mint needs to be signer to initialize the account");
        this.code = 134;
        this.name = "MintIsNotSigner";
        if (typeof Error.captureStackTrace === "function") {
          Error.captureStackTrace(this, _MintIsNotSignerError);
        }
      }
    };
    exports.MintIsNotSignerError = MintIsNotSignerError;
    createErrorFromCodeLookup.set(134, () => new MintIsNotSignerError());
    createErrorFromNameLookup.set("MintIsNotSigner", () => new MintIsNotSignerError());
    var InvalidTokenStandardError = class _InvalidTokenStandardError extends Error {
      constructor() {
        super("Invalid token standard");
        this.code = 135;
        this.name = "InvalidTokenStandard";
        if (typeof Error.captureStackTrace === "function") {
          Error.captureStackTrace(this, _InvalidTokenStandardError);
        }
      }
    };
    exports.InvalidTokenStandardError = InvalidTokenStandardError;
    createErrorFromCodeLookup.set(135, () => new InvalidTokenStandardError());
    createErrorFromNameLookup.set("InvalidTokenStandard", () => new InvalidTokenStandardError());
    var InvalidMintForTokenStandardError = class _InvalidMintForTokenStandardError extends Error {
      constructor() {
        super("Invalid mint account for specified token standard");
        this.code = 136;
        this.name = "InvalidMintForTokenStandard";
        if (typeof Error.captureStackTrace === "function") {
          Error.captureStackTrace(this, _InvalidMintForTokenStandardError);
        }
      }
    };
    exports.InvalidMintForTokenStandardError = InvalidMintForTokenStandardError;
    createErrorFromCodeLookup.set(136, () => new InvalidMintForTokenStandardError());
    createErrorFromNameLookup.set("InvalidMintForTokenStandard", () => new InvalidMintForTokenStandardError());
    var InvalidAuthorizationRulesError = class _InvalidAuthorizationRulesError extends Error {
      constructor() {
        super("Invalid authorization rules account");
        this.code = 137;
        this.name = "InvalidAuthorizationRules";
        if (typeof Error.captureStackTrace === "function") {
          Error.captureStackTrace(this, _InvalidAuthorizationRulesError);
        }
      }
    };
    exports.InvalidAuthorizationRulesError = InvalidAuthorizationRulesError;
    createErrorFromCodeLookup.set(137, () => new InvalidAuthorizationRulesError());
    createErrorFromNameLookup.set("InvalidAuthorizationRules", () => new InvalidAuthorizationRulesError());
    var MissingAuthorizationRulesError = class _MissingAuthorizationRulesError extends Error {
      constructor() {
        super("Missing authorization rules account");
        this.code = 138;
        this.name = "MissingAuthorizationRules";
        if (typeof Error.captureStackTrace === "function") {
          Error.captureStackTrace(this, _MissingAuthorizationRulesError);
        }
      }
    };
    exports.MissingAuthorizationRulesError = MissingAuthorizationRulesError;
    createErrorFromCodeLookup.set(138, () => new MissingAuthorizationRulesError());
    createErrorFromNameLookup.set("MissingAuthorizationRules", () => new MissingAuthorizationRulesError());
    var MissingProgrammableConfigError = class _MissingProgrammableConfigError extends Error {
      constructor() {
        super("Missing programmable configuration");
        this.code = 139;
        this.name = "MissingProgrammableConfig";
        if (typeof Error.captureStackTrace === "function") {
          Error.captureStackTrace(this, _MissingProgrammableConfigError);
        }
      }
    };
    exports.MissingProgrammableConfigError = MissingProgrammableConfigError;
    createErrorFromCodeLookup.set(139, () => new MissingProgrammableConfigError());
    createErrorFromNameLookup.set("MissingProgrammableConfig", () => new MissingProgrammableConfigError());
    var InvalidProgrammableConfigError = class _InvalidProgrammableConfigError extends Error {
      constructor() {
        super("Invalid programmable configuration");
        this.code = 140;
        this.name = "InvalidProgrammableConfig";
        if (typeof Error.captureStackTrace === "function") {
          Error.captureStackTrace(this, _InvalidProgrammableConfigError);
        }
      }
    };
    exports.InvalidProgrammableConfigError = InvalidProgrammableConfigError;
    createErrorFromCodeLookup.set(140, () => new InvalidProgrammableConfigError());
    createErrorFromNameLookup.set("InvalidProgrammableConfig", () => new InvalidProgrammableConfigError());
    var DelegateAlreadyExistsError = class _DelegateAlreadyExistsError extends Error {
      constructor() {
        super("Delegate already exists");
        this.code = 141;
        this.name = "DelegateAlreadyExists";
        if (typeof Error.captureStackTrace === "function") {
          Error.captureStackTrace(this, _DelegateAlreadyExistsError);
        }
      }
    };
    exports.DelegateAlreadyExistsError = DelegateAlreadyExistsError;
    createErrorFromCodeLookup.set(141, () => new DelegateAlreadyExistsError());
    createErrorFromNameLookup.set("DelegateAlreadyExists", () => new DelegateAlreadyExistsError());
    var DelegateNotFoundError = class _DelegateNotFoundError extends Error {
      constructor() {
        super("Delegate not found");
        this.code = 142;
        this.name = "DelegateNotFound";
        if (typeof Error.captureStackTrace === "function") {
          Error.captureStackTrace(this, _DelegateNotFoundError);
        }
      }
    };
    exports.DelegateNotFoundError = DelegateNotFoundError;
    createErrorFromCodeLookup.set(142, () => new DelegateNotFoundError());
    createErrorFromNameLookup.set("DelegateNotFound", () => new DelegateNotFoundError());
    var MissingAccountInBuilderError = class _MissingAccountInBuilderError extends Error {
      constructor() {
        super("Required account not set in instruction builder");
        this.code = 143;
        this.name = "MissingAccountInBuilder";
        if (typeof Error.captureStackTrace === "function") {
          Error.captureStackTrace(this, _MissingAccountInBuilderError);
        }
      }
    };
    exports.MissingAccountInBuilderError = MissingAccountInBuilderError;
    createErrorFromCodeLookup.set(143, () => new MissingAccountInBuilderError());
    createErrorFromNameLookup.set("MissingAccountInBuilder", () => new MissingAccountInBuilderError());
    var MissingArgumentInBuilderError = class _MissingArgumentInBuilderError extends Error {
      constructor() {
        super("Required argument not set in instruction builder");
        this.code = 144;
        this.name = "MissingArgumentInBuilder";
        if (typeof Error.captureStackTrace === "function") {
          Error.captureStackTrace(this, _MissingArgumentInBuilderError);
        }
      }
    };
    exports.MissingArgumentInBuilderError = MissingArgumentInBuilderError;
    createErrorFromCodeLookup.set(144, () => new MissingArgumentInBuilderError());
    createErrorFromNameLookup.set("MissingArgumentInBuilder", () => new MissingArgumentInBuilderError());
    var FeatureNotSupportedError = class _FeatureNotSupportedError extends Error {
      constructor() {
        super("Feature not supported currently");
        this.code = 145;
        this.name = "FeatureNotSupported";
        if (typeof Error.captureStackTrace === "function") {
          Error.captureStackTrace(this, _FeatureNotSupportedError);
        }
      }
    };
    exports.FeatureNotSupportedError = FeatureNotSupportedError;
    createErrorFromCodeLookup.set(145, () => new FeatureNotSupportedError());
    createErrorFromNameLookup.set("FeatureNotSupported", () => new FeatureNotSupportedError());
    var InvalidSystemWalletError = class _InvalidSystemWalletError extends Error {
      constructor() {
        super("Invalid system wallet");
        this.code = 146;
        this.name = "InvalidSystemWallet";
        if (typeof Error.captureStackTrace === "function") {
          Error.captureStackTrace(this, _InvalidSystemWalletError);
        }
      }
    };
    exports.InvalidSystemWalletError = InvalidSystemWalletError;
    createErrorFromCodeLookup.set(146, () => new InvalidSystemWalletError());
    createErrorFromNameLookup.set("InvalidSystemWallet", () => new InvalidSystemWalletError());
    var OnlySaleDelegateCanTransferError = class _OnlySaleDelegateCanTransferError extends Error {
      constructor() {
        super("Only the sale delegate can transfer while its set");
        this.code = 147;
        this.name = "OnlySaleDelegateCanTransfer";
        if (typeof Error.captureStackTrace === "function") {
          Error.captureStackTrace(this, _OnlySaleDelegateCanTransferError);
        }
      }
    };
    exports.OnlySaleDelegateCanTransferError = OnlySaleDelegateCanTransferError;
    createErrorFromCodeLookup.set(147, () => new OnlySaleDelegateCanTransferError());
    createErrorFromNameLookup.set("OnlySaleDelegateCanTransfer", () => new OnlySaleDelegateCanTransferError());
    var MissingTokenAccountError = class _MissingTokenAccountError extends Error {
      constructor() {
        super("Missing token account");
        this.code = 148;
        this.name = "MissingTokenAccount";
        if (typeof Error.captureStackTrace === "function") {
          Error.captureStackTrace(this, _MissingTokenAccountError);
        }
      }
    };
    exports.MissingTokenAccountError = MissingTokenAccountError;
    createErrorFromCodeLookup.set(148, () => new MissingTokenAccountError());
    createErrorFromNameLookup.set("MissingTokenAccount", () => new MissingTokenAccountError());
    var MissingSplTokenProgramError = class _MissingSplTokenProgramError extends Error {
      constructor() {
        super("Missing SPL token program");
        this.code = 149;
        this.name = "MissingSplTokenProgram";
        if (typeof Error.captureStackTrace === "function") {
          Error.captureStackTrace(this, _MissingSplTokenProgramError);
        }
      }
    };
    exports.MissingSplTokenProgramError = MissingSplTokenProgramError;
    createErrorFromCodeLookup.set(149, () => new MissingSplTokenProgramError());
    createErrorFromNameLookup.set("MissingSplTokenProgram", () => new MissingSplTokenProgramError());
    var MissingAuthorizationRulesProgramError = class _MissingAuthorizationRulesProgramError extends Error {
      constructor() {
        super("Missing authorization rules program");
        this.code = 150;
        this.name = "MissingAuthorizationRulesProgram";
        if (typeof Error.captureStackTrace === "function") {
          Error.captureStackTrace(this, _MissingAuthorizationRulesProgramError);
        }
      }
    };
    exports.MissingAuthorizationRulesProgramError = MissingAuthorizationRulesProgramError;
    createErrorFromCodeLookup.set(150, () => new MissingAuthorizationRulesProgramError());
    createErrorFromNameLookup.set("MissingAuthorizationRulesProgram", () => new MissingAuthorizationRulesProgramError());
    var InvalidDelegateRoleForTransferError = class _InvalidDelegateRoleForTransferError extends Error {
      constructor() {
        super("Invalid delegate role for transfer");
        this.code = 151;
        this.name = "InvalidDelegateRoleForTransfer";
        if (typeof Error.captureStackTrace === "function") {
          Error.captureStackTrace(this, _InvalidDelegateRoleForTransferError);
        }
      }
    };
    exports.InvalidDelegateRoleForTransferError = InvalidDelegateRoleForTransferError;
    createErrorFromCodeLookup.set(151, () => new InvalidDelegateRoleForTransferError());
    createErrorFromNameLookup.set("InvalidDelegateRoleForTransfer", () => new InvalidDelegateRoleForTransferError());
    var InvalidTransferAuthorityError = class _InvalidTransferAuthorityError extends Error {
      constructor() {
        super("Invalid transfer authority");
        this.code = 152;
        this.name = "InvalidTransferAuthority";
        if (typeof Error.captureStackTrace === "function") {
          Error.captureStackTrace(this, _InvalidTransferAuthorityError);
        }
      }
    };
    exports.InvalidTransferAuthorityError = InvalidTransferAuthorityError;
    createErrorFromCodeLookup.set(152, () => new InvalidTransferAuthorityError());
    createErrorFromNameLookup.set("InvalidTransferAuthority", () => new InvalidTransferAuthorityError());
    var InstructionNotSupportedError = class _InstructionNotSupportedError extends Error {
      constructor() {
        super("Instruction not supported for ProgrammableNonFungible assets");
        this.code = 153;
        this.name = "InstructionNotSupported";
        if (typeof Error.captureStackTrace === "function") {
          Error.captureStackTrace(this, _InstructionNotSupportedError);
        }
      }
    };
    exports.InstructionNotSupportedError = InstructionNotSupportedError;
    createErrorFromCodeLookup.set(153, () => new InstructionNotSupportedError());
    createErrorFromNameLookup.set("InstructionNotSupported", () => new InstructionNotSupportedError());
    var KeyMismatchError = class _KeyMismatchError extends Error {
      constructor() {
        super("Public key does not match expected value");
        this.code = 154;
        this.name = "KeyMismatch";
        if (typeof Error.captureStackTrace === "function") {
          Error.captureStackTrace(this, _KeyMismatchError);
        }
      }
    };
    exports.KeyMismatchError = KeyMismatchError;
    createErrorFromCodeLookup.set(154, () => new KeyMismatchError());
    createErrorFromNameLookup.set("KeyMismatch", () => new KeyMismatchError());
    var LockedTokenError = class _LockedTokenError extends Error {
      constructor() {
        super("Token is locked");
        this.code = 155;
        this.name = "LockedToken";
        if (typeof Error.captureStackTrace === "function") {
          Error.captureStackTrace(this, _LockedTokenError);
        }
      }
    };
    exports.LockedTokenError = LockedTokenError;
    createErrorFromCodeLookup.set(155, () => new LockedTokenError());
    createErrorFromNameLookup.set("LockedToken", () => new LockedTokenError());
    var UnlockedTokenError = class _UnlockedTokenError extends Error {
      constructor() {
        super("Token is unlocked");
        this.code = 156;
        this.name = "UnlockedToken";
        if (typeof Error.captureStackTrace === "function") {
          Error.captureStackTrace(this, _UnlockedTokenError);
        }
      }
    };
    exports.UnlockedTokenError = UnlockedTokenError;
    createErrorFromCodeLookup.set(156, () => new UnlockedTokenError());
    createErrorFromNameLookup.set("UnlockedToken", () => new UnlockedTokenError());
    var MissingDelegateRoleError = class _MissingDelegateRoleError extends Error {
      constructor() {
        super("Missing delegate role");
        this.code = 157;
        this.name = "MissingDelegateRole";
        if (typeof Error.captureStackTrace === "function") {
          Error.captureStackTrace(this, _MissingDelegateRoleError);
        }
      }
    };
    exports.MissingDelegateRoleError = MissingDelegateRoleError;
    createErrorFromCodeLookup.set(157, () => new MissingDelegateRoleError());
    createErrorFromNameLookup.set("MissingDelegateRole", () => new MissingDelegateRoleError());
    var InvalidAuthorityTypeError = class _InvalidAuthorityTypeError extends Error {
      constructor() {
        super("Invalid authority type");
        this.code = 158;
        this.name = "InvalidAuthorityType";
        if (typeof Error.captureStackTrace === "function") {
          Error.captureStackTrace(this, _InvalidAuthorityTypeError);
        }
      }
    };
    exports.InvalidAuthorityTypeError = InvalidAuthorityTypeError;
    createErrorFromCodeLookup.set(158, () => new InvalidAuthorityTypeError());
    createErrorFromNameLookup.set("InvalidAuthorityType", () => new InvalidAuthorityTypeError());
    var MissingTokenRecordError = class _MissingTokenRecordError extends Error {
      constructor() {
        super("Missing token record account");
        this.code = 159;
        this.name = "MissingTokenRecord";
        if (typeof Error.captureStackTrace === "function") {
          Error.captureStackTrace(this, _MissingTokenRecordError);
        }
      }
    };
    exports.MissingTokenRecordError = MissingTokenRecordError;
    createErrorFromCodeLookup.set(159, () => new MissingTokenRecordError());
    createErrorFromNameLookup.set("MissingTokenRecord", () => new MissingTokenRecordError());
    var MintSupplyMustBeZeroError = class _MintSupplyMustBeZeroError extends Error {
      constructor() {
        super("Mint supply must be zero for programmable assets");
        this.code = 160;
        this.name = "MintSupplyMustBeZero";
        if (typeof Error.captureStackTrace === "function") {
          Error.captureStackTrace(this, _MintSupplyMustBeZeroError);
        }
      }
    };
    exports.MintSupplyMustBeZeroError = MintSupplyMustBeZeroError;
    createErrorFromCodeLookup.set(160, () => new MintSupplyMustBeZeroError());
    createErrorFromNameLookup.set("MintSupplyMustBeZero", () => new MintSupplyMustBeZeroError());
    var DataIsEmptyOrZeroedError = class _DataIsEmptyOrZeroedError extends Error {
      constructor() {
        super("Data is empty or zeroed");
        this.code = 161;
        this.name = "DataIsEmptyOrZeroed";
        if (typeof Error.captureStackTrace === "function") {
          Error.captureStackTrace(this, _DataIsEmptyOrZeroedError);
        }
      }
    };
    exports.DataIsEmptyOrZeroedError = DataIsEmptyOrZeroedError;
    createErrorFromCodeLookup.set(161, () => new DataIsEmptyOrZeroedError());
    createErrorFromNameLookup.set("DataIsEmptyOrZeroed", () => new DataIsEmptyOrZeroedError());
    var MissingTokenOwnerAccountError = class _MissingTokenOwnerAccountError extends Error {
      constructor() {
        super("Missing token owner");
        this.code = 162;
        this.name = "MissingTokenOwnerAccount";
        if (typeof Error.captureStackTrace === "function") {
          Error.captureStackTrace(this, _MissingTokenOwnerAccountError);
        }
      }
    };
    exports.MissingTokenOwnerAccountError = MissingTokenOwnerAccountError;
    createErrorFromCodeLookup.set(162, () => new MissingTokenOwnerAccountError());
    createErrorFromNameLookup.set("MissingTokenOwnerAccount", () => new MissingTokenOwnerAccountError());
    var InvalidMasterEditionAccountLengthError = class _InvalidMasterEditionAccountLengthError extends Error {
      constructor() {
        super("Master edition account has an invalid length");
        this.code = 163;
        this.name = "InvalidMasterEditionAccountLength";
        if (typeof Error.captureStackTrace === "function") {
          Error.captureStackTrace(this, _InvalidMasterEditionAccountLengthError);
        }
      }
    };
    exports.InvalidMasterEditionAccountLengthError = InvalidMasterEditionAccountLengthError;
    createErrorFromCodeLookup.set(163, () => new InvalidMasterEditionAccountLengthError());
    createErrorFromNameLookup.set("InvalidMasterEditionAccountLength", () => new InvalidMasterEditionAccountLengthError());
    var IncorrectTokenStateError = class _IncorrectTokenStateError extends Error {
      constructor() {
        super("Incorrect token state");
        this.code = 164;
        this.name = "IncorrectTokenState";
        if (typeof Error.captureStackTrace === "function") {
          Error.captureStackTrace(this, _IncorrectTokenStateError);
        }
      }
    };
    exports.IncorrectTokenStateError = IncorrectTokenStateError;
    createErrorFromCodeLookup.set(164, () => new IncorrectTokenStateError());
    createErrorFromNameLookup.set("IncorrectTokenState", () => new IncorrectTokenStateError());
    var InvalidDelegateRoleError = class _InvalidDelegateRoleError extends Error {
      constructor() {
        super("Invalid delegate role");
        this.code = 165;
        this.name = "InvalidDelegateRole";
        if (typeof Error.captureStackTrace === "function") {
          Error.captureStackTrace(this, _InvalidDelegateRoleError);
        }
      }
    };
    exports.InvalidDelegateRoleError = InvalidDelegateRoleError;
    createErrorFromCodeLookup.set(165, () => new InvalidDelegateRoleError());
    createErrorFromNameLookup.set("InvalidDelegateRole", () => new InvalidDelegateRoleError());
    var MissingPrintSupplyError = class _MissingPrintSupplyError extends Error {
      constructor() {
        super("Print supply is required for non-fungibles");
        this.code = 166;
        this.name = "MissingPrintSupply";
        if (typeof Error.captureStackTrace === "function") {
          Error.captureStackTrace(this, _MissingPrintSupplyError);
        }
      }
    };
    exports.MissingPrintSupplyError = MissingPrintSupplyError;
    createErrorFromCodeLookup.set(166, () => new MissingPrintSupplyError());
    createErrorFromNameLookup.set("MissingPrintSupply", () => new MissingPrintSupplyError());
    var MissingMasterEditionAccountError = class _MissingMasterEditionAccountError extends Error {
      constructor() {
        super("Missing master edition account");
        this.code = 167;
        this.name = "MissingMasterEditionAccount";
        if (typeof Error.captureStackTrace === "function") {
          Error.captureStackTrace(this, _MissingMasterEditionAccountError);
        }
      }
    };
    exports.MissingMasterEditionAccountError = MissingMasterEditionAccountError;
    createErrorFromCodeLookup.set(167, () => new MissingMasterEditionAccountError());
    createErrorFromNameLookup.set("MissingMasterEditionAccount", () => new MissingMasterEditionAccountError());
    var AmountMustBeGreaterThanZeroError = class _AmountMustBeGreaterThanZeroError extends Error {
      constructor() {
        super("Amount must be greater than zero");
        this.code = 168;
        this.name = "AmountMustBeGreaterThanZero";
        if (typeof Error.captureStackTrace === "function") {
          Error.captureStackTrace(this, _AmountMustBeGreaterThanZeroError);
        }
      }
    };
    exports.AmountMustBeGreaterThanZeroError = AmountMustBeGreaterThanZeroError;
    createErrorFromCodeLookup.set(168, () => new AmountMustBeGreaterThanZeroError());
    createErrorFromNameLookup.set("AmountMustBeGreaterThanZero", () => new AmountMustBeGreaterThanZeroError());
    var InvalidDelegateArgsError = class _InvalidDelegateArgsError extends Error {
      constructor() {
        super("Invalid delegate args");
        this.code = 169;
        this.name = "InvalidDelegateArgs";
        if (typeof Error.captureStackTrace === "function") {
          Error.captureStackTrace(this, _InvalidDelegateArgsError);
        }
      }
    };
    exports.InvalidDelegateArgsError = InvalidDelegateArgsError;
    createErrorFromCodeLookup.set(169, () => new InvalidDelegateArgsError());
    createErrorFromNameLookup.set("InvalidDelegateArgs", () => new InvalidDelegateArgsError());
    var MissingLockedTransferAddressError = class _MissingLockedTransferAddressError extends Error {
      constructor() {
        super("Missing address for locked transfer");
        this.code = 170;
        this.name = "MissingLockedTransferAddress";
        if (typeof Error.captureStackTrace === "function") {
          Error.captureStackTrace(this, _MissingLockedTransferAddressError);
        }
      }
    };
    exports.MissingLockedTransferAddressError = MissingLockedTransferAddressError;
    createErrorFromCodeLookup.set(170, () => new MissingLockedTransferAddressError());
    createErrorFromNameLookup.set("MissingLockedTransferAddress", () => new MissingLockedTransferAddressError());
    var InvalidLockedTransferAddressError = class _InvalidLockedTransferAddressError extends Error {
      constructor() {
        super("Invalid destination address for locked transfer");
        this.code = 171;
        this.name = "InvalidLockedTransferAddress";
        if (typeof Error.captureStackTrace === "function") {
          Error.captureStackTrace(this, _InvalidLockedTransferAddressError);
        }
      }
    };
    exports.InvalidLockedTransferAddressError = InvalidLockedTransferAddressError;
    createErrorFromCodeLookup.set(171, () => new InvalidLockedTransferAddressError());
    createErrorFromNameLookup.set("InvalidLockedTransferAddress", () => new InvalidLockedTransferAddressError());
    var DataIncrementLimitExceededError = class _DataIncrementLimitExceededError extends Error {
      constructor() {
        super("Exceeded account realloc increase limit");
        this.code = 172;
        this.name = "DataIncrementLimitExceeded";
        if (typeof Error.captureStackTrace === "function") {
          Error.captureStackTrace(this, _DataIncrementLimitExceededError);
        }
      }
    };
    exports.DataIncrementLimitExceededError = DataIncrementLimitExceededError;
    createErrorFromCodeLookup.set(172, () => new DataIncrementLimitExceededError());
    createErrorFromNameLookup.set("DataIncrementLimitExceeded", () => new DataIncrementLimitExceededError());
    var CannotUpdateAssetWithDelegateError = class _CannotUpdateAssetWithDelegateError extends Error {
      constructor() {
        super("Cannot update the rule set of a programmable asset that has a delegate");
        this.code = 173;
        this.name = "CannotUpdateAssetWithDelegate";
        if (typeof Error.captureStackTrace === "function") {
          Error.captureStackTrace(this, _CannotUpdateAssetWithDelegateError);
        }
      }
    };
    exports.CannotUpdateAssetWithDelegateError = CannotUpdateAssetWithDelegateError;
    createErrorFromCodeLookup.set(173, () => new CannotUpdateAssetWithDelegateError());
    createErrorFromNameLookup.set("CannotUpdateAssetWithDelegate", () => new CannotUpdateAssetWithDelegateError());
    var InvalidAmountError = class _InvalidAmountError extends Error {
      constructor() {
        super("Invalid token amount for this operation or token standard");
        this.code = 174;
        this.name = "InvalidAmount";
        if (typeof Error.captureStackTrace === "function") {
          Error.captureStackTrace(this, _InvalidAmountError);
        }
      }
    };
    exports.InvalidAmountError = InvalidAmountError;
    createErrorFromCodeLookup.set(174, () => new InvalidAmountError());
    createErrorFromNameLookup.set("InvalidAmount", () => new InvalidAmountError());
    var MissingMasterEditionMintAccountError = class _MissingMasterEditionMintAccountError extends Error {
      constructor() {
        super("Missing master edition mint account");
        this.code = 175;
        this.name = "MissingMasterEditionMintAccount";
        if (typeof Error.captureStackTrace === "function") {
          Error.captureStackTrace(this, _MissingMasterEditionMintAccountError);
        }
      }
    };
    exports.MissingMasterEditionMintAccountError = MissingMasterEditionMintAccountError;
    createErrorFromCodeLookup.set(175, () => new MissingMasterEditionMintAccountError());
    createErrorFromNameLookup.set("MissingMasterEditionMintAccount", () => new MissingMasterEditionMintAccountError());
    var MissingMasterEditionTokenAccountError = class _MissingMasterEditionTokenAccountError extends Error {
      constructor() {
        super("Missing master edition token account");
        this.code = 176;
        this.name = "MissingMasterEditionTokenAccount";
        if (typeof Error.captureStackTrace === "function") {
          Error.captureStackTrace(this, _MissingMasterEditionTokenAccountError);
        }
      }
    };
    exports.MissingMasterEditionTokenAccountError = MissingMasterEditionTokenAccountError;
    createErrorFromCodeLookup.set(176, () => new MissingMasterEditionTokenAccountError());
    createErrorFromNameLookup.set("MissingMasterEditionTokenAccount", () => new MissingMasterEditionTokenAccountError());
    var MissingEditionMarkerAccountError = class _MissingEditionMarkerAccountError extends Error {
      constructor() {
        super("Missing edition marker account");
        this.code = 177;
        this.name = "MissingEditionMarkerAccount";
        if (typeof Error.captureStackTrace === "function") {
          Error.captureStackTrace(this, _MissingEditionMarkerAccountError);
        }
      }
    };
    exports.MissingEditionMarkerAccountError = MissingEditionMarkerAccountError;
    createErrorFromCodeLookup.set(177, () => new MissingEditionMarkerAccountError());
    createErrorFromNameLookup.set("MissingEditionMarkerAccount", () => new MissingEditionMarkerAccountError());
    var CannotBurnWithDelegateError = class _CannotBurnWithDelegateError extends Error {
      constructor() {
        super("Cannot burn while persistent delegate is set");
        this.code = 178;
        this.name = "CannotBurnWithDelegate";
        if (typeof Error.captureStackTrace === "function") {
          Error.captureStackTrace(this, _CannotBurnWithDelegateError);
        }
      }
    };
    exports.CannotBurnWithDelegateError = CannotBurnWithDelegateError;
    createErrorFromCodeLookup.set(178, () => new CannotBurnWithDelegateError());
    createErrorFromNameLookup.set("CannotBurnWithDelegate", () => new CannotBurnWithDelegateError());
    var MissingEditionError = class _MissingEditionError extends Error {
      constructor() {
        super("Missing edition account");
        this.code = 179;
        this.name = "MissingEdition";
        if (typeof Error.captureStackTrace === "function") {
          Error.captureStackTrace(this, _MissingEditionError);
        }
      }
    };
    exports.MissingEditionError = MissingEditionError;
    createErrorFromCodeLookup.set(179, () => new MissingEditionError());
    createErrorFromNameLookup.set("MissingEdition", () => new MissingEditionError());
    var InvalidAssociatedTokenAccountProgramError = class _InvalidAssociatedTokenAccountProgramError extends Error {
      constructor() {
        super("Invalid Associated Token Account Program");
        this.code = 180;
        this.name = "InvalidAssociatedTokenAccountProgram";
        if (typeof Error.captureStackTrace === "function") {
          Error.captureStackTrace(this, _InvalidAssociatedTokenAccountProgramError);
        }
      }
    };
    exports.InvalidAssociatedTokenAccountProgramError = InvalidAssociatedTokenAccountProgramError;
    createErrorFromCodeLookup.set(180, () => new InvalidAssociatedTokenAccountProgramError());
    createErrorFromNameLookup.set("InvalidAssociatedTokenAccountProgram", () => new InvalidAssociatedTokenAccountProgramError());
    var InvalidInstructionsSysvarError = class _InvalidInstructionsSysvarError extends Error {
      constructor() {
        super("Invalid InstructionsSysvar");
        this.code = 181;
        this.name = "InvalidInstructionsSysvar";
        if (typeof Error.captureStackTrace === "function") {
          Error.captureStackTrace(this, _InvalidInstructionsSysvarError);
        }
      }
    };
    exports.InvalidInstructionsSysvarError = InvalidInstructionsSysvarError;
    createErrorFromCodeLookup.set(181, () => new InvalidInstructionsSysvarError());
    createErrorFromNameLookup.set("InvalidInstructionsSysvar", () => new InvalidInstructionsSysvarError());
    var InvalidParentAccountsError = class _InvalidParentAccountsError extends Error {
      constructor() {
        super("Invalid or Unneeded parent accounts");
        this.code = 182;
        this.name = "InvalidParentAccounts";
        if (typeof Error.captureStackTrace === "function") {
          Error.captureStackTrace(this, _InvalidParentAccountsError);
        }
      }
    };
    exports.InvalidParentAccountsError = InvalidParentAccountsError;
    createErrorFromCodeLookup.set(182, () => new InvalidParentAccountsError());
    createErrorFromNameLookup.set("InvalidParentAccounts", () => new InvalidParentAccountsError());
    var InvalidUpdateArgsError = class _InvalidUpdateArgsError extends Error {
      constructor() {
        super("Authority cannot apply all update args");
        this.code = 183;
        this.name = "InvalidUpdateArgs";
        if (typeof Error.captureStackTrace === "function") {
          Error.captureStackTrace(this, _InvalidUpdateArgsError);
        }
      }
    };
    exports.InvalidUpdateArgsError = InvalidUpdateArgsError;
    createErrorFromCodeLookup.set(183, () => new InvalidUpdateArgsError());
    createErrorFromNameLookup.set("InvalidUpdateArgs", () => new InvalidUpdateArgsError());
    var InsufficientTokenBalanceError = class _InsufficientTokenBalanceError extends Error {
      constructor() {
        super("Token account does not have enough tokens");
        this.code = 184;
        this.name = "InsufficientTokenBalance";
        if (typeof Error.captureStackTrace === "function") {
          Error.captureStackTrace(this, _InsufficientTokenBalanceError);
        }
      }
    };
    exports.InsufficientTokenBalanceError = InsufficientTokenBalanceError;
    createErrorFromCodeLookup.set(184, () => new InsufficientTokenBalanceError());
    createErrorFromNameLookup.set("InsufficientTokenBalance", () => new InsufficientTokenBalanceError());
    var MissingCollectionMintError = class _MissingCollectionMintError extends Error {
      constructor() {
        super("Missing collection account");
        this.code = 185;
        this.name = "MissingCollectionMint";
        if (typeof Error.captureStackTrace === "function") {
          Error.captureStackTrace(this, _MissingCollectionMintError);
        }
      }
    };
    exports.MissingCollectionMintError = MissingCollectionMintError;
    createErrorFromCodeLookup.set(185, () => new MissingCollectionMintError());
    createErrorFromNameLookup.set("MissingCollectionMint", () => new MissingCollectionMintError());
    var MissingCollectionMasterEditionError = class _MissingCollectionMasterEditionError extends Error {
      constructor() {
        super("Missing collection master edition account");
        this.code = 186;
        this.name = "MissingCollectionMasterEdition";
        if (typeof Error.captureStackTrace === "function") {
          Error.captureStackTrace(this, _MissingCollectionMasterEditionError);
        }
      }
    };
    exports.MissingCollectionMasterEditionError = MissingCollectionMasterEditionError;
    createErrorFromCodeLookup.set(186, () => new MissingCollectionMasterEditionError());
    createErrorFromNameLookup.set("MissingCollectionMasterEdition", () => new MissingCollectionMasterEditionError());
    var InvalidTokenRecordError = class _InvalidTokenRecordError extends Error {
      constructor() {
        super("Invalid token record account");
        this.code = 187;
        this.name = "InvalidTokenRecord";
        if (typeof Error.captureStackTrace === "function") {
          Error.captureStackTrace(this, _InvalidTokenRecordError);
        }
      }
    };
    exports.InvalidTokenRecordError = InvalidTokenRecordError;
    createErrorFromCodeLookup.set(187, () => new InvalidTokenRecordError());
    createErrorFromNameLookup.set("InvalidTokenRecord", () => new InvalidTokenRecordError());
    var InvalidCloseAuthorityError = class _InvalidCloseAuthorityError extends Error {
      constructor() {
        super("The close authority needs to be revoked by the Utility Delegate");
        this.code = 188;
        this.name = "InvalidCloseAuthority";
        if (typeof Error.captureStackTrace === "function") {
          Error.captureStackTrace(this, _InvalidCloseAuthorityError);
        }
      }
    };
    exports.InvalidCloseAuthorityError = InvalidCloseAuthorityError;
    createErrorFromCodeLookup.set(188, () => new InvalidCloseAuthorityError());
    createErrorFromNameLookup.set("InvalidCloseAuthority", () => new InvalidCloseAuthorityError());
    var InvalidInstructionError = class _InvalidInstructionError extends Error {
      constructor() {
        super("Invalid or removed instruction");
        this.code = 189;
        this.name = "InvalidInstruction";
        if (typeof Error.captureStackTrace === "function") {
          Error.captureStackTrace(this, _InvalidInstructionError);
        }
      }
    };
    exports.InvalidInstructionError = InvalidInstructionError;
    createErrorFromCodeLookup.set(189, () => new InvalidInstructionError());
    createErrorFromNameLookup.set("InvalidInstruction", () => new InvalidInstructionError());
    var MissingDelegateRecordError = class _MissingDelegateRecordError extends Error {
      constructor() {
        super("Missing delegate record");
        this.code = 190;
        this.name = "MissingDelegateRecord";
        if (typeof Error.captureStackTrace === "function") {
          Error.captureStackTrace(this, _MissingDelegateRecordError);
        }
      }
    };
    exports.MissingDelegateRecordError = MissingDelegateRecordError;
    createErrorFromCodeLookup.set(190, () => new MissingDelegateRecordError());
    createErrorFromNameLookup.set("MissingDelegateRecord", () => new MissingDelegateRecordError());
    var InvalidFeeAccountError = class _InvalidFeeAccountError extends Error {
      constructor() {
        super("");
        this.code = 191;
        this.name = "InvalidFeeAccount";
        if (typeof Error.captureStackTrace === "function") {
          Error.captureStackTrace(this, _InvalidFeeAccountError);
        }
      }
    };
    exports.InvalidFeeAccountError = InvalidFeeAccountError;
    createErrorFromCodeLookup.set(191, () => new InvalidFeeAccountError());
    createErrorFromNameLookup.set("InvalidFeeAccount", () => new InvalidFeeAccountError());
    var InvalidMetadataFlagsError = class _InvalidMetadataFlagsError extends Error {
      constructor() {
        super("");
        this.code = 192;
        this.name = "InvalidMetadataFlags";
        if (typeof Error.captureStackTrace === "function") {
          Error.captureStackTrace(this, _InvalidMetadataFlagsError);
        }
      }
    };
    exports.InvalidMetadataFlagsError = InvalidMetadataFlagsError;
    createErrorFromCodeLookup.set(192, () => new InvalidMetadataFlagsError());
    createErrorFromNameLookup.set("InvalidMetadataFlags", () => new InvalidMetadataFlagsError());
    function errorFromCode(code2) {
      const createError = createErrorFromCodeLookup.get(code2);
      return createError != null ? createError() : null;
    }
    exports.errorFromCode = errorFromCode;
    function errorFromName(name) {
      const createError = createErrorFromNameLookup.get(name);
      return createError != null ? createError() : null;
    }
    exports.errorFromName = errorFromName;
  }
});

// ../../node_modules/@metaplex-foundation/mpl-token-metadata/dist/src/generated/instructions/ApproveCollectionAuthority.js
var require_ApproveCollectionAuthority = __commonJS({
  "../../node_modules/@metaplex-foundation/mpl-token-metadata/dist/src/generated/instructions/ApproveCollectionAuthority.js"(exports) {
    "use strict";
    var __createBinding = exports && exports.__createBinding || (Object.create ? function(o2, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      var desc = Object.getOwnPropertyDescriptor(m, k);
      if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m[k];
        } };
      }
      Object.defineProperty(o2, k2, desc);
    } : function(o2, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      o2[k2] = m[k];
    });
    var __setModuleDefault = exports && exports.__setModuleDefault || (Object.create ? function(o2, v) {
      Object.defineProperty(o2, "default", { enumerable: true, value: v });
    } : function(o2, v) {
      o2["default"] = v;
    });
    var __importStar = exports && exports.__importStar || function(mod) {
      if (mod && mod.__esModule)
        return mod;
      var result = {};
      if (mod != null) {
        for (var k in mod)
          if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k))
            __createBinding(result, mod, k);
      }
      __setModuleDefault(result, mod);
      return result;
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.createApproveCollectionAuthorityInstruction = exports.approveCollectionAuthorityInstructionDiscriminator = exports.ApproveCollectionAuthorityStruct = void 0;
    var beet9 = __importStar(require_beet());
    var web3 = __importStar((init_index_browser_esm(), __toCommonJS(index_browser_esm_exports)));
    exports.ApproveCollectionAuthorityStruct = new beet9.BeetArgsStruct([["instructionDiscriminator", beet9.u8]], "ApproveCollectionAuthorityInstructionArgs");
    exports.approveCollectionAuthorityInstructionDiscriminator = 23;
    function createApproveCollectionAuthorityInstruction2(accounts, programId = new web3.PublicKey("metaqbxxUerdq28cj1RbAWkYQm3ybzjb6a8bt518x1s")) {
      var _a;
      const [data] = exports.ApproveCollectionAuthorityStruct.serialize({
        instructionDiscriminator: exports.approveCollectionAuthorityInstructionDiscriminator
      });
      const keys = [
        {
          pubkey: accounts.collectionAuthorityRecord,
          isWritable: true,
          isSigner: false
        },
        {
          pubkey: accounts.newCollectionAuthority,
          isWritable: false,
          isSigner: false
        },
        {
          pubkey: accounts.updateAuthority,
          isWritable: true,
          isSigner: true
        },
        {
          pubkey: accounts.payer,
          isWritable: true,
          isSigner: true
        },
        {
          pubkey: accounts.metadata,
          isWritable: false,
          isSigner: false
        },
        {
          pubkey: accounts.mint,
          isWritable: false,
          isSigner: false
        },
        {
          pubkey: (_a = accounts.systemProgram) !== null && _a !== void 0 ? _a : web3.SystemProgram.programId,
          isWritable: false,
          isSigner: false
        }
      ];
      if (accounts.rent != null) {
        keys.push({
          pubkey: accounts.rent,
          isWritable: false,
          isSigner: false
        });
      }
      const ix = new web3.TransactionInstruction({
        programId,
        keys,
        data
      });
      return ix;
    }
    exports.createApproveCollectionAuthorityInstruction = createApproveCollectionAuthorityInstruction2;
  }
});

// ../../node_modules/@solana/spl-token/lib/cjs/constants.js
var require_constants = __commonJS({
  "../../node_modules/@solana/spl-token/lib/cjs/constants.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.programSupportsExtensions = exports.NATIVE_MINT_2022 = exports.NATIVE_MINT = exports.ASSOCIATED_TOKEN_PROGRAM_ID = exports.TOKEN_2022_PROGRAM_ID = exports.TOKEN_PROGRAM_ID = void 0;
    var web3_js_1 = (init_index_browser_esm(), __toCommonJS(index_browser_esm_exports));
    exports.TOKEN_PROGRAM_ID = new web3_js_1.PublicKey("TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA");
    exports.TOKEN_2022_PROGRAM_ID = new web3_js_1.PublicKey("TokenzQdBNbLqP5VEhdkAS6EPFLC1PHnBqCXEpPxuEb");
    exports.ASSOCIATED_TOKEN_PROGRAM_ID = new web3_js_1.PublicKey("ATokenGPvbdGVxr1b2hvZbsiqW5xWH25efTNsLJA8knL");
    exports.NATIVE_MINT = new web3_js_1.PublicKey("So11111111111111111111111111111111111111112");
    exports.NATIVE_MINT_2022 = new web3_js_1.PublicKey("9pan9bMn5HatX4EJdBwg9VgCa7Uz5HL8N1m5D3NdXejP");
    function programSupportsExtensions2(programId) {
      if (programId === exports.TOKEN_PROGRAM_ID) {
        return false;
      } else {
        return true;
      }
    }
    exports.programSupportsExtensions = programSupportsExtensions2;
  }
});

// ../../node_modules/@solana/buffer-layout-utils/lib/cjs/base.js
var require_base = __commonJS({
  "../../node_modules/@solana/buffer-layout-utils/lib/cjs/base.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.encodeDecode = void 0;
    var encodeDecode2 = (layout) => {
      const decode2 = layout.decode.bind(layout);
      const encode2 = layout.encode.bind(layout);
      return { decode: decode2, encode: encode2 };
    };
    exports.encodeDecode = encodeDecode2;
  }
});

// ../../node_modules/@solana/buffer-layout-utils/lib/cjs/bigint.js
var require_bigint = __commonJS({
  "../../node_modules/@solana/buffer-layout-utils/lib/cjs/bigint.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.u256be = exports.u256 = exports.u192be = exports.u192 = exports.u128be = exports.u128 = exports.u64be = exports.u64 = exports.bigIntBE = exports.bigInt = void 0;
    var buffer_layout_1 = require_Layout();
    var bigint_buffer_1 = require_browser();
    var base_1 = require_base();
    var bigInt2 = (length) => (property) => {
      const layout = (0, buffer_layout_1.blob)(length, property);
      const { encode: encode2, decode: decode2 } = (0, base_1.encodeDecode)(layout);
      const bigIntLayout = layout;
      bigIntLayout.decode = (buffer2, offset) => {
        const src = decode2(buffer2, offset);
        return (0, bigint_buffer_1.toBigIntLE)(Buffer.from(src));
      };
      bigIntLayout.encode = (bigInt3, buffer2, offset) => {
        const src = (0, bigint_buffer_1.toBufferLE)(bigInt3, length);
        return encode2(src, buffer2, offset);
      };
      return bigIntLayout;
    };
    exports.bigInt = bigInt2;
    var bigIntBE2 = (length) => (property) => {
      const layout = (0, buffer_layout_1.blob)(length, property);
      const { encode: encode2, decode: decode2 } = (0, base_1.encodeDecode)(layout);
      const bigIntLayout = layout;
      bigIntLayout.decode = (buffer2, offset) => {
        const src = decode2(buffer2, offset);
        return (0, bigint_buffer_1.toBigIntBE)(Buffer.from(src));
      };
      bigIntLayout.encode = (bigInt3, buffer2, offset) => {
        const src = (0, bigint_buffer_1.toBufferBE)(bigInt3, length);
        return encode2(src, buffer2, offset);
      };
      return bigIntLayout;
    };
    exports.bigIntBE = bigIntBE2;
    exports.u64 = (0, exports.bigInt)(8);
    exports.u64be = (0, exports.bigIntBE)(8);
    exports.u128 = (0, exports.bigInt)(16);
    exports.u128be = (0, exports.bigIntBE)(16);
    exports.u192 = (0, exports.bigInt)(24);
    exports.u192be = (0, exports.bigIntBE)(24);
    exports.u256 = (0, exports.bigInt)(32);
    exports.u256be = (0, exports.bigIntBE)(32);
  }
});

// ../../node_modules/bignumber.js/bignumber.js
var require_bignumber = __commonJS({
  "../../node_modules/bignumber.js/bignumber.js"(exports, module) {
    (function(globalObject) {
      "use strict";
      var BigNumber, isNumeric = /^-?(?:\d+(?:\.\d*)?|\.\d+)(?:e[+-]?\d+)?$/i, mathceil = Math.ceil, mathfloor = Math.floor, bignumberError = "[BigNumber Error] ", tooManyDigits = bignumberError + "Number primitive has more than 15 significant digits: ", BASE = 1e14, LOG_BASE = 14, MAX_SAFE_INTEGER = 9007199254740991, POWS_TEN = [1, 10, 100, 1e3, 1e4, 1e5, 1e6, 1e7, 1e8, 1e9, 1e10, 1e11, 1e12, 1e13], SQRT_BASE = 1e7, MAX = 1e9;
      function clone2(configObject) {
        var div, convertBase, parseNumeric, P = BigNumber2.prototype = { constructor: BigNumber2, toString: null, valueOf: null }, ONE = new BigNumber2(1), DECIMAL_PLACES = 20, ROUNDING_MODE = 4, TO_EXP_NEG = -7, TO_EXP_POS = 21, MIN_EXP = -1e7, MAX_EXP = 1e7, CRYPTO = false, MODULO_MODE = 1, POW_PRECISION = 0, FORMAT = {
          prefix: "",
          groupSize: 3,
          secondaryGroupSize: 0,
          groupSeparator: ",",
          decimalSeparator: ".",
          fractionGroupSize: 0,
          fractionGroupSeparator: " ",
          // non-breaking space
          suffix: ""
        }, ALPHABET = "0123456789abcdefghijklmnopqrstuvwxyz", alphabetHasNormalDecimalDigits = true;
        function BigNumber2(v, b) {
          var alphabet, c, caseChanged, e2, i, isNum, len, str, x = this;
          if (!(x instanceof BigNumber2))
            return new BigNumber2(v, b);
          if (b == null) {
            if (v && v._isBigNumber === true) {
              x.s = v.s;
              if (!v.c || v.e > MAX_EXP) {
                x.c = x.e = null;
              } else if (v.e < MIN_EXP) {
                x.c = [x.e = 0];
              } else {
                x.e = v.e;
                x.c = v.c.slice();
              }
              return;
            }
            if ((isNum = typeof v == "number") && v * 0 == 0) {
              x.s = 1 / v < 0 ? (v = -v, -1) : 1;
              if (v === ~~v) {
                for (e2 = 0, i = v; i >= 10; i /= 10, e2++)
                  ;
                if (e2 > MAX_EXP) {
                  x.c = x.e = null;
                } else {
                  x.e = e2;
                  x.c = [v];
                }
                return;
              }
              str = String(v);
            } else {
              if (!isNumeric.test(str = String(v)))
                return parseNumeric(x, str, isNum);
              x.s = str.charCodeAt(0) == 45 ? (str = str.slice(1), -1) : 1;
            }
            if ((e2 = str.indexOf(".")) > -1)
              str = str.replace(".", "");
            if ((i = str.search(/e/i)) > 0) {
              if (e2 < 0)
                e2 = i;
              e2 += +str.slice(i + 1);
              str = str.substring(0, i);
            } else if (e2 < 0) {
              e2 = str.length;
            }
          } else {
            intCheck(b, 2, ALPHABET.length, "Base");
            if (b == 10 && alphabetHasNormalDecimalDigits) {
              x = new BigNumber2(v);
              return round(x, DECIMAL_PLACES + x.e + 1, ROUNDING_MODE);
            }
            str = String(v);
            if (isNum = typeof v == "number") {
              if (v * 0 != 0)
                return parseNumeric(x, str, isNum, b);
              x.s = 1 / v < 0 ? (str = str.slice(1), -1) : 1;
              if (BigNumber2.DEBUG && str.replace(/^0\.0*|\./, "").length > 15) {
                throw Error(tooManyDigits + v);
              }
            } else {
              x.s = str.charCodeAt(0) === 45 ? (str = str.slice(1), -1) : 1;
            }
            alphabet = ALPHABET.slice(0, b);
            e2 = i = 0;
            for (len = str.length; i < len; i++) {
              if (alphabet.indexOf(c = str.charAt(i)) < 0) {
                if (c == ".") {
                  if (i > e2) {
                    e2 = len;
                    continue;
                  }
                } else if (!caseChanged) {
                  if (str == str.toUpperCase() && (str = str.toLowerCase()) || str == str.toLowerCase() && (str = str.toUpperCase())) {
                    caseChanged = true;
                    i = -1;
                    e2 = 0;
                    continue;
                  }
                }
                return parseNumeric(x, String(v), isNum, b);
              }
            }
            isNum = false;
            str = convertBase(str, b, 10, x.s);
            if ((e2 = str.indexOf(".")) > -1)
              str = str.replace(".", "");
            else
              e2 = str.length;
          }
          for (i = 0; str.charCodeAt(i) === 48; i++)
            ;
          for (len = str.length; str.charCodeAt(--len) === 48; )
            ;
          if (str = str.slice(i, ++len)) {
            len -= i;
            if (isNum && BigNumber2.DEBUG && len > 15 && (v > MAX_SAFE_INTEGER || v !== mathfloor(v))) {
              throw Error(tooManyDigits + x.s * v);
            }
            if ((e2 = e2 - i - 1) > MAX_EXP) {
              x.c = x.e = null;
            } else if (e2 < MIN_EXP) {
              x.c = [x.e = 0];
            } else {
              x.e = e2;
              x.c = [];
              i = (e2 + 1) % LOG_BASE;
              if (e2 < 0)
                i += LOG_BASE;
              if (i < len) {
                if (i)
                  x.c.push(+str.slice(0, i));
                for (len -= LOG_BASE; i < len; ) {
                  x.c.push(+str.slice(i, i += LOG_BASE));
                }
                i = LOG_BASE - (str = str.slice(i)).length;
              } else {
                i -= len;
              }
              for (; i--; str += "0")
                ;
              x.c.push(+str);
            }
          } else {
            x.c = [x.e = 0];
          }
        }
        BigNumber2.clone = clone2;
        BigNumber2.ROUND_UP = 0;
        BigNumber2.ROUND_DOWN = 1;
        BigNumber2.ROUND_CEIL = 2;
        BigNumber2.ROUND_FLOOR = 3;
        BigNumber2.ROUND_HALF_UP = 4;
        BigNumber2.ROUND_HALF_DOWN = 5;
        BigNumber2.ROUND_HALF_EVEN = 6;
        BigNumber2.ROUND_HALF_CEIL = 7;
        BigNumber2.ROUND_HALF_FLOOR = 8;
        BigNumber2.EUCLID = 9;
        BigNumber2.config = BigNumber2.set = function(obj) {
          var p, v;
          if (obj != null) {
            if (typeof obj == "object") {
              if (obj.hasOwnProperty(p = "DECIMAL_PLACES")) {
                v = obj[p];
                intCheck(v, 0, MAX, p);
                DECIMAL_PLACES = v;
              }
              if (obj.hasOwnProperty(p = "ROUNDING_MODE")) {
                v = obj[p];
                intCheck(v, 0, 8, p);
                ROUNDING_MODE = v;
              }
              if (obj.hasOwnProperty(p = "EXPONENTIAL_AT")) {
                v = obj[p];
                if (v && v.pop) {
                  intCheck(v[0], -MAX, 0, p);
                  intCheck(v[1], 0, MAX, p);
                  TO_EXP_NEG = v[0];
                  TO_EXP_POS = v[1];
                } else {
                  intCheck(v, -MAX, MAX, p);
                  TO_EXP_NEG = -(TO_EXP_POS = v < 0 ? -v : v);
                }
              }
              if (obj.hasOwnProperty(p = "RANGE")) {
                v = obj[p];
                if (v && v.pop) {
                  intCheck(v[0], -MAX, -1, p);
                  intCheck(v[1], 1, MAX, p);
                  MIN_EXP = v[0];
                  MAX_EXP = v[1];
                } else {
                  intCheck(v, -MAX, MAX, p);
                  if (v) {
                    MIN_EXP = -(MAX_EXP = v < 0 ? -v : v);
                  } else {
                    throw Error(bignumberError + p + " cannot be zero: " + v);
                  }
                }
              }
              if (obj.hasOwnProperty(p = "CRYPTO")) {
                v = obj[p];
                if (v === !!v) {
                  if (v) {
                    if (typeof crypto != "undefined" && crypto && (crypto.getRandomValues || crypto.randomBytes)) {
                      CRYPTO = v;
                    } else {
                      CRYPTO = !v;
                      throw Error(bignumberError + "crypto unavailable");
                    }
                  } else {
                    CRYPTO = v;
                  }
                } else {
                  throw Error(bignumberError + p + " not true or false: " + v);
                }
              }
              if (obj.hasOwnProperty(p = "MODULO_MODE")) {
                v = obj[p];
                intCheck(v, 0, 9, p);
                MODULO_MODE = v;
              }
              if (obj.hasOwnProperty(p = "POW_PRECISION")) {
                v = obj[p];
                intCheck(v, 0, MAX, p);
                POW_PRECISION = v;
              }
              if (obj.hasOwnProperty(p = "FORMAT")) {
                v = obj[p];
                if (typeof v == "object")
                  FORMAT = v;
                else
                  throw Error(bignumberError + p + " not an object: " + v);
              }
              if (obj.hasOwnProperty(p = "ALPHABET")) {
                v = obj[p];
                if (typeof v == "string" && !/^.?$|[+\-.\s]|(.).*\1/.test(v)) {
                  alphabetHasNormalDecimalDigits = v.slice(0, 10) == "0123456789";
                  ALPHABET = v;
                } else {
                  throw Error(bignumberError + p + " invalid: " + v);
                }
              }
            } else {
              throw Error(bignumberError + "Object expected: " + obj);
            }
          }
          return {
            DECIMAL_PLACES,
            ROUNDING_MODE,
            EXPONENTIAL_AT: [TO_EXP_NEG, TO_EXP_POS],
            RANGE: [MIN_EXP, MAX_EXP],
            CRYPTO,
            MODULO_MODE,
            POW_PRECISION,
            FORMAT,
            ALPHABET
          };
        };
        BigNumber2.isBigNumber = function(v) {
          if (!v || v._isBigNumber !== true)
            return false;
          if (!BigNumber2.DEBUG)
            return true;
          var i, n, c = v.c, e2 = v.e, s = v.s;
          out:
            if ({}.toString.call(c) == "[object Array]") {
              if ((s === 1 || s === -1) && e2 >= -MAX && e2 <= MAX && e2 === mathfloor(e2)) {
                if (c[0] === 0) {
                  if (e2 === 0 && c.length === 1)
                    return true;
                  break out;
                }
                i = (e2 + 1) % LOG_BASE;
                if (i < 1)
                  i += LOG_BASE;
                if (String(c[0]).length == i) {
                  for (i = 0; i < c.length; i++) {
                    n = c[i];
                    if (n < 0 || n >= BASE || n !== mathfloor(n))
                      break out;
                  }
                  if (n !== 0)
                    return true;
                }
              }
            } else if (c === null && e2 === null && (s === null || s === 1 || s === -1)) {
              return true;
            }
          throw Error(bignumberError + "Invalid BigNumber: " + v);
        };
        BigNumber2.maximum = BigNumber2.max = function() {
          return maxOrMin(arguments, -1);
        };
        BigNumber2.minimum = BigNumber2.min = function() {
          return maxOrMin(arguments, 1);
        };
        BigNumber2.random = function() {
          var pow2_53 = 9007199254740992;
          var random53bitInt = Math.random() * pow2_53 & 2097151 ? function() {
            return mathfloor(Math.random() * pow2_53);
          } : function() {
            return (Math.random() * 1073741824 | 0) * 8388608 + (Math.random() * 8388608 | 0);
          };
          return function(dp) {
            var a, b, e2, k, v, i = 0, c = [], rand = new BigNumber2(ONE);
            if (dp == null)
              dp = DECIMAL_PLACES;
            else
              intCheck(dp, 0, MAX);
            k = mathceil(dp / LOG_BASE);
            if (CRYPTO) {
              if (crypto.getRandomValues) {
                a = crypto.getRandomValues(new Uint32Array(k *= 2));
                for (; i < k; ) {
                  v = a[i] * 131072 + (a[i + 1] >>> 11);
                  if (v >= 9e15) {
                    b = crypto.getRandomValues(new Uint32Array(2));
                    a[i] = b[0];
                    a[i + 1] = b[1];
                  } else {
                    c.push(v % 1e14);
                    i += 2;
                  }
                }
                i = k / 2;
              } else if (crypto.randomBytes) {
                a = crypto.randomBytes(k *= 7);
                for (; i < k; ) {
                  v = (a[i] & 31) * 281474976710656 + a[i + 1] * 1099511627776 + a[i + 2] * 4294967296 + a[i + 3] * 16777216 + (a[i + 4] << 16) + (a[i + 5] << 8) + a[i + 6];
                  if (v >= 9e15) {
                    crypto.randomBytes(7).copy(a, i);
                  } else {
                    c.push(v % 1e14);
                    i += 7;
                  }
                }
                i = k / 7;
              } else {
                CRYPTO = false;
                throw Error(bignumberError + "crypto unavailable");
              }
            }
            if (!CRYPTO) {
              for (; i < k; ) {
                v = random53bitInt();
                if (v < 9e15)
                  c[i++] = v % 1e14;
              }
            }
            k = c[--i];
            dp %= LOG_BASE;
            if (k && dp) {
              v = POWS_TEN[LOG_BASE - dp];
              c[i] = mathfloor(k / v) * v;
            }
            for (; c[i] === 0; c.pop(), i--)
              ;
            if (i < 0) {
              c = [e2 = 0];
            } else {
              for (e2 = -1; c[0] === 0; c.splice(0, 1), e2 -= LOG_BASE)
                ;
              for (i = 1, v = c[0]; v >= 10; v /= 10, i++)
                ;
              if (i < LOG_BASE)
                e2 -= LOG_BASE - i;
            }
            rand.e = e2;
            rand.c = c;
            return rand;
          };
        }();
        BigNumber2.sum = function() {
          var i = 1, args = arguments, sum = new BigNumber2(args[0]);
          for (; i < args.length; )
            sum = sum.plus(args[i++]);
          return sum;
        };
        convertBase = function() {
          var decimal = "0123456789";
          function toBaseOut(str, baseIn, baseOut, alphabet) {
            var j, arr = [0], arrL, i = 0, len = str.length;
            for (; i < len; ) {
              for (arrL = arr.length; arrL--; arr[arrL] *= baseIn)
                ;
              arr[0] += alphabet.indexOf(str.charAt(i++));
              for (j = 0; j < arr.length; j++) {
                if (arr[j] > baseOut - 1) {
                  if (arr[j + 1] == null)
                    arr[j + 1] = 0;
                  arr[j + 1] += arr[j] / baseOut | 0;
                  arr[j] %= baseOut;
                }
              }
            }
            return arr.reverse();
          }
          return function(str, baseIn, baseOut, sign, callerIsToString) {
            var alphabet, d, e2, k, r, x, xc, y, i = str.indexOf("."), dp = DECIMAL_PLACES, rm = ROUNDING_MODE;
            if (i >= 0) {
              k = POW_PRECISION;
              POW_PRECISION = 0;
              str = str.replace(".", "");
              y = new BigNumber2(baseIn);
              x = y.pow(str.length - i);
              POW_PRECISION = k;
              y.c = toBaseOut(
                toFixedPoint(coeffToString(x.c), x.e, "0"),
                10,
                baseOut,
                decimal
              );
              y.e = y.c.length;
            }
            xc = toBaseOut(str, baseIn, baseOut, callerIsToString ? (alphabet = ALPHABET, decimal) : (alphabet = decimal, ALPHABET));
            e2 = k = xc.length;
            for (; xc[--k] == 0; xc.pop())
              ;
            if (!xc[0])
              return alphabet.charAt(0);
            if (i < 0) {
              --e2;
            } else {
              x.c = xc;
              x.e = e2;
              x.s = sign;
              x = div(x, y, dp, rm, baseOut);
              xc = x.c;
              r = x.r;
              e2 = x.e;
            }
            d = e2 + dp + 1;
            i = xc[d];
            k = baseOut / 2;
            r = r || d < 0 || xc[d + 1] != null;
            r = rm < 4 ? (i != null || r) && (rm == 0 || rm == (x.s < 0 ? 3 : 2)) : i > k || i == k && (rm == 4 || r || rm == 6 && xc[d - 1] & 1 || rm == (x.s < 0 ? 8 : 7));
            if (d < 1 || !xc[0]) {
              str = r ? toFixedPoint(alphabet.charAt(1), -dp, alphabet.charAt(0)) : alphabet.charAt(0);
            } else {
              xc.length = d;
              if (r) {
                for (--baseOut; ++xc[--d] > baseOut; ) {
                  xc[d] = 0;
                  if (!d) {
                    ++e2;
                    xc = [1].concat(xc);
                  }
                }
              }
              for (k = xc.length; !xc[--k]; )
                ;
              for (i = 0, str = ""; i <= k; str += alphabet.charAt(xc[i++]))
                ;
              str = toFixedPoint(str, e2, alphabet.charAt(0));
            }
            return str;
          };
        }();
        div = function() {
          function multiply(x, k, base2) {
            var m, temp, xlo, xhi, carry = 0, i = x.length, klo = k % SQRT_BASE, khi = k / SQRT_BASE | 0;
            for (x = x.slice(); i--; ) {
              xlo = x[i] % SQRT_BASE;
              xhi = x[i] / SQRT_BASE | 0;
              m = khi * xlo + xhi * klo;
              temp = klo * xlo + m % SQRT_BASE * SQRT_BASE + carry;
              carry = (temp / base2 | 0) + (m / SQRT_BASE | 0) + khi * xhi;
              x[i] = temp % base2;
            }
            if (carry)
              x = [carry].concat(x);
            return x;
          }
          function compare3(a, b, aL, bL) {
            var i, cmp;
            if (aL != bL) {
              cmp = aL > bL ? 1 : -1;
            } else {
              for (i = cmp = 0; i < aL; i++) {
                if (a[i] != b[i]) {
                  cmp = a[i] > b[i] ? 1 : -1;
                  break;
                }
              }
            }
            return cmp;
          }
          function subtract(a, b, aL, base2) {
            var i = 0;
            for (; aL--; ) {
              a[aL] -= i;
              i = a[aL] < b[aL] ? 1 : 0;
              a[aL] = i * base2 + a[aL] - b[aL];
            }
            for (; !a[0] && a.length > 1; a.splice(0, 1))
              ;
          }
          return function(x, y, dp, rm, base2) {
            var cmp, e2, i, more, n, prod, prodL, q, qc, rem, remL, rem0, xi, xL, yc0, yL, yz, s = x.s == y.s ? 1 : -1, xc = x.c, yc = y.c;
            if (!xc || !xc[0] || !yc || !yc[0]) {
              return new BigNumber2(
                // Return NaN if either NaN, or both Infinity or 0.
                !x.s || !y.s || (xc ? yc && xc[0] == yc[0] : !yc) ? NaN : (
                  // Return ±0 if x is ±0 or y is ±Infinity, or return ±Infinity as y is ±0.
                  xc && xc[0] == 0 || !yc ? s * 0 : s / 0
                )
              );
            }
            q = new BigNumber2(s);
            qc = q.c = [];
            e2 = x.e - y.e;
            s = dp + e2 + 1;
            if (!base2) {
              base2 = BASE;
              e2 = bitFloor(x.e / LOG_BASE) - bitFloor(y.e / LOG_BASE);
              s = s / LOG_BASE | 0;
            }
            for (i = 0; yc[i] == (xc[i] || 0); i++)
              ;
            if (yc[i] > (xc[i] || 0))
              e2--;
            if (s < 0) {
              qc.push(1);
              more = true;
            } else {
              xL = xc.length;
              yL = yc.length;
              i = 0;
              s += 2;
              n = mathfloor(base2 / (yc[0] + 1));
              if (n > 1) {
                yc = multiply(yc, n, base2);
                xc = multiply(xc, n, base2);
                yL = yc.length;
                xL = xc.length;
              }
              xi = yL;
              rem = xc.slice(0, yL);
              remL = rem.length;
              for (; remL < yL; rem[remL++] = 0)
                ;
              yz = yc.slice();
              yz = [0].concat(yz);
              yc0 = yc[0];
              if (yc[1] >= base2 / 2)
                yc0++;
              do {
                n = 0;
                cmp = compare3(yc, rem, yL, remL);
                if (cmp < 0) {
                  rem0 = rem[0];
                  if (yL != remL)
                    rem0 = rem0 * base2 + (rem[1] || 0);
                  n = mathfloor(rem0 / yc0);
                  if (n > 1) {
                    if (n >= base2)
                      n = base2 - 1;
                    prod = multiply(yc, n, base2);
                    prodL = prod.length;
                    remL = rem.length;
                    while (compare3(prod, rem, prodL, remL) == 1) {
                      n--;
                      subtract(prod, yL < prodL ? yz : yc, prodL, base2);
                      prodL = prod.length;
                      cmp = 1;
                    }
                  } else {
                    if (n == 0) {
                      cmp = n = 1;
                    }
                    prod = yc.slice();
                    prodL = prod.length;
                  }
                  if (prodL < remL)
                    prod = [0].concat(prod);
                  subtract(rem, prod, remL, base2);
                  remL = rem.length;
                  if (cmp == -1) {
                    while (compare3(yc, rem, yL, remL) < 1) {
                      n++;
                      subtract(rem, yL < remL ? yz : yc, remL, base2);
                      remL = rem.length;
                    }
                  }
                } else if (cmp === 0) {
                  n++;
                  rem = [0];
                }
                qc[i++] = n;
                if (rem[0]) {
                  rem[remL++] = xc[xi] || 0;
                } else {
                  rem = [xc[xi]];
                  remL = 1;
                }
              } while ((xi++ < xL || rem[0] != null) && s--);
              more = rem[0] != null;
              if (!qc[0])
                qc.splice(0, 1);
            }
            if (base2 == BASE) {
              for (i = 1, s = qc[0]; s >= 10; s /= 10, i++)
                ;
              round(q, dp + (q.e = i + e2 * LOG_BASE - 1) + 1, rm, more);
            } else {
              q.e = e2;
              q.r = +more;
            }
            return q;
          };
        }();
        function format(n, i, rm, id) {
          var c0, e2, ne, len, str;
          if (rm == null)
            rm = ROUNDING_MODE;
          else
            intCheck(rm, 0, 8);
          if (!n.c)
            return n.toString();
          c0 = n.c[0];
          ne = n.e;
          if (i == null) {
            str = coeffToString(n.c);
            str = id == 1 || id == 2 && (ne <= TO_EXP_NEG || ne >= TO_EXP_POS) ? toExponential(str, ne) : toFixedPoint(str, ne, "0");
          } else {
            n = round(new BigNumber2(n), i, rm);
            e2 = n.e;
            str = coeffToString(n.c);
            len = str.length;
            if (id == 1 || id == 2 && (i <= e2 || e2 <= TO_EXP_NEG)) {
              for (; len < i; str += "0", len++)
                ;
              str = toExponential(str, e2);
            } else {
              i -= ne;
              str = toFixedPoint(str, e2, "0");
              if (e2 + 1 > len) {
                if (--i > 0)
                  for (str += "."; i--; str += "0")
                    ;
              } else {
                i += e2 - len;
                if (i > 0) {
                  if (e2 + 1 == len)
                    str += ".";
                  for (; i--; str += "0")
                    ;
                }
              }
            }
          }
          return n.s < 0 && c0 ? "-" + str : str;
        }
        function maxOrMin(args, n) {
          var k, y, i = 1, x = new BigNumber2(args[0]);
          for (; i < args.length; i++) {
            y = new BigNumber2(args[i]);
            if (!y.s || (k = compare2(x, y)) === n || k === 0 && x.s === n) {
              x = y;
            }
          }
          return x;
        }
        function normalise(n, c, e2) {
          var i = 1, j = c.length;
          for (; !c[--j]; c.pop())
            ;
          for (j = c[0]; j >= 10; j /= 10, i++)
            ;
          if ((e2 = i + e2 * LOG_BASE - 1) > MAX_EXP) {
            n.c = n.e = null;
          } else if (e2 < MIN_EXP) {
            n.c = [n.e = 0];
          } else {
            n.e = e2;
            n.c = c;
          }
          return n;
        }
        parseNumeric = function() {
          var basePrefix = /^(-?)0([xbo])(?=\w[\w.]*$)/i, dotAfter = /^([^.]+)\.$/, dotBefore = /^\.([^.]+)$/, isInfinityOrNaN = /^-?(Infinity|NaN)$/, whitespaceOrPlus = /^\s*\+(?=[\w.])|^\s+|\s+$/g;
          return function(x, str, isNum, b) {
            var base2, s = isNum ? str : str.replace(whitespaceOrPlus, "");
            if (isInfinityOrNaN.test(s)) {
              x.s = isNaN(s) ? null : s < 0 ? -1 : 1;
            } else {
              if (!isNum) {
                s = s.replace(basePrefix, function(m, p1, p2) {
                  base2 = (p2 = p2.toLowerCase()) == "x" ? 16 : p2 == "b" ? 2 : 8;
                  return !b || b == base2 ? p1 : m;
                });
                if (b) {
                  base2 = b;
                  s = s.replace(dotAfter, "$1").replace(dotBefore, "0.$1");
                }
                if (str != s)
                  return new BigNumber2(s, base2);
              }
              if (BigNumber2.DEBUG) {
                throw Error(bignumberError + "Not a" + (b ? " base " + b : "") + " number: " + str);
              }
              x.s = null;
            }
            x.c = x.e = null;
          };
        }();
        function round(x, sd, rm, r) {
          var d, i, j, k, n, ni, rd, xc = x.c, pows10 = POWS_TEN;
          if (xc) {
            out: {
              for (d = 1, k = xc[0]; k >= 10; k /= 10, d++)
                ;
              i = sd - d;
              if (i < 0) {
                i += LOG_BASE;
                j = sd;
                n = xc[ni = 0];
                rd = mathfloor(n / pows10[d - j - 1] % 10);
              } else {
                ni = mathceil((i + 1) / LOG_BASE);
                if (ni >= xc.length) {
                  if (r) {
                    for (; xc.length <= ni; xc.push(0))
                      ;
                    n = rd = 0;
                    d = 1;
                    i %= LOG_BASE;
                    j = i - LOG_BASE + 1;
                  } else {
                    break out;
                  }
                } else {
                  n = k = xc[ni];
                  for (d = 1; k >= 10; k /= 10, d++)
                    ;
                  i %= LOG_BASE;
                  j = i - LOG_BASE + d;
                  rd = j < 0 ? 0 : mathfloor(n / pows10[d - j - 1] % 10);
                }
              }
              r = r || sd < 0 || // Are there any non-zero digits after the rounding digit?
              // The expression  n % pows10[d - j - 1]  returns all digits of n to the right
              // of the digit at j, e.g. if n is 908714 and j is 2, the expression gives 714.
              xc[ni + 1] != null || (j < 0 ? n : n % pows10[d - j - 1]);
              r = rm < 4 ? (rd || r) && (rm == 0 || rm == (x.s < 0 ? 3 : 2)) : rd > 5 || rd == 5 && (rm == 4 || r || rm == 6 && // Check whether the digit to the left of the rounding digit is odd.
              (i > 0 ? j > 0 ? n / pows10[d - j] : 0 : xc[ni - 1]) % 10 & 1 || rm == (x.s < 0 ? 8 : 7));
              if (sd < 1 || !xc[0]) {
                xc.length = 0;
                if (r) {
                  sd -= x.e + 1;
                  xc[0] = pows10[(LOG_BASE - sd % LOG_BASE) % LOG_BASE];
                  x.e = -sd || 0;
                } else {
                  xc[0] = x.e = 0;
                }
                return x;
              }
              if (i == 0) {
                xc.length = ni;
                k = 1;
                ni--;
              } else {
                xc.length = ni + 1;
                k = pows10[LOG_BASE - i];
                xc[ni] = j > 0 ? mathfloor(n / pows10[d - j] % pows10[j]) * k : 0;
              }
              if (r) {
                for (; ; ) {
                  if (ni == 0) {
                    for (i = 1, j = xc[0]; j >= 10; j /= 10, i++)
                      ;
                    j = xc[0] += k;
                    for (k = 1; j >= 10; j /= 10, k++)
                      ;
                    if (i != k) {
                      x.e++;
                      if (xc[0] == BASE)
                        xc[0] = 1;
                    }
                    break;
                  } else {
                    xc[ni] += k;
                    if (xc[ni] != BASE)
                      break;
                    xc[ni--] = 0;
                    k = 1;
                  }
                }
              }
              for (i = xc.length; xc[--i] === 0; xc.pop())
                ;
            }
            if (x.e > MAX_EXP) {
              x.c = x.e = null;
            } else if (x.e < MIN_EXP) {
              x.c = [x.e = 0];
            }
          }
          return x;
        }
        function valueOf(n) {
          var str, e2 = n.e;
          if (e2 === null)
            return n.toString();
          str = coeffToString(n.c);
          str = e2 <= TO_EXP_NEG || e2 >= TO_EXP_POS ? toExponential(str, e2) : toFixedPoint(str, e2, "0");
          return n.s < 0 ? "-" + str : str;
        }
        P.absoluteValue = P.abs = function() {
          var x = new BigNumber2(this);
          if (x.s < 0)
            x.s = 1;
          return x;
        };
        P.comparedTo = function(y, b) {
          return compare2(this, new BigNumber2(y, b));
        };
        P.decimalPlaces = P.dp = function(dp, rm) {
          var c, n, v, x = this;
          if (dp != null) {
            intCheck(dp, 0, MAX);
            if (rm == null)
              rm = ROUNDING_MODE;
            else
              intCheck(rm, 0, 8);
            return round(new BigNumber2(x), dp + x.e + 1, rm);
          }
          if (!(c = x.c))
            return null;
          n = ((v = c.length - 1) - bitFloor(this.e / LOG_BASE)) * LOG_BASE;
          if (v = c[v])
            for (; v % 10 == 0; v /= 10, n--)
              ;
          if (n < 0)
            n = 0;
          return n;
        };
        P.dividedBy = P.div = function(y, b) {
          return div(this, new BigNumber2(y, b), DECIMAL_PLACES, ROUNDING_MODE);
        };
        P.dividedToIntegerBy = P.idiv = function(y, b) {
          return div(this, new BigNumber2(y, b), 0, 1);
        };
        P.exponentiatedBy = P.pow = function(n, m) {
          var half, isModExp, i, k, more, nIsBig, nIsNeg, nIsOdd, y, x = this;
          n = new BigNumber2(n);
          if (n.c && !n.isInteger()) {
            throw Error(bignumberError + "Exponent not an integer: " + valueOf(n));
          }
          if (m != null)
            m = new BigNumber2(m);
          nIsBig = n.e > 14;
          if (!x.c || !x.c[0] || x.c[0] == 1 && !x.e && x.c.length == 1 || !n.c || !n.c[0]) {
            y = new BigNumber2(Math.pow(+valueOf(x), nIsBig ? n.s * (2 - isOdd(n)) : +valueOf(n)));
            return m ? y.mod(m) : y;
          }
          nIsNeg = n.s < 0;
          if (m) {
            if (m.c ? !m.c[0] : !m.s)
              return new BigNumber2(NaN);
            isModExp = !nIsNeg && x.isInteger() && m.isInteger();
            if (isModExp)
              x = x.mod(m);
          } else if (n.e > 9 && (x.e > 0 || x.e < -1 || (x.e == 0 ? x.c[0] > 1 || nIsBig && x.c[1] >= 24e7 : x.c[0] < 8e13 || nIsBig && x.c[0] <= 9999975e7))) {
            k = x.s < 0 && isOdd(n) ? -0 : 0;
            if (x.e > -1)
              k = 1 / k;
            return new BigNumber2(nIsNeg ? 1 / k : k);
          } else if (POW_PRECISION) {
            k = mathceil(POW_PRECISION / LOG_BASE + 2);
          }
          if (nIsBig) {
            half = new BigNumber2(0.5);
            if (nIsNeg)
              n.s = 1;
            nIsOdd = isOdd(n);
          } else {
            i = Math.abs(+valueOf(n));
            nIsOdd = i % 2;
          }
          y = new BigNumber2(ONE);
          for (; ; ) {
            if (nIsOdd) {
              y = y.times(x);
              if (!y.c)
                break;
              if (k) {
                if (y.c.length > k)
                  y.c.length = k;
              } else if (isModExp) {
                y = y.mod(m);
              }
            }
            if (i) {
              i = mathfloor(i / 2);
              if (i === 0)
                break;
              nIsOdd = i % 2;
            } else {
              n = n.times(half);
              round(n, n.e + 1, 1);
              if (n.e > 14) {
                nIsOdd = isOdd(n);
              } else {
                i = +valueOf(n);
                if (i === 0)
                  break;
                nIsOdd = i % 2;
              }
            }
            x = x.times(x);
            if (k) {
              if (x.c && x.c.length > k)
                x.c.length = k;
            } else if (isModExp) {
              x = x.mod(m);
            }
          }
          if (isModExp)
            return y;
          if (nIsNeg)
            y = ONE.div(y);
          return m ? y.mod(m) : k ? round(y, POW_PRECISION, ROUNDING_MODE, more) : y;
        };
        P.integerValue = function(rm) {
          var n = new BigNumber2(this);
          if (rm == null)
            rm = ROUNDING_MODE;
          else
            intCheck(rm, 0, 8);
          return round(n, n.e + 1, rm);
        };
        P.isEqualTo = P.eq = function(y, b) {
          return compare2(this, new BigNumber2(y, b)) === 0;
        };
        P.isFinite = function() {
          return !!this.c;
        };
        P.isGreaterThan = P.gt = function(y, b) {
          return compare2(this, new BigNumber2(y, b)) > 0;
        };
        P.isGreaterThanOrEqualTo = P.gte = function(y, b) {
          return (b = compare2(this, new BigNumber2(y, b))) === 1 || b === 0;
        };
        P.isInteger = function() {
          return !!this.c && bitFloor(this.e / LOG_BASE) > this.c.length - 2;
        };
        P.isLessThan = P.lt = function(y, b) {
          return compare2(this, new BigNumber2(y, b)) < 0;
        };
        P.isLessThanOrEqualTo = P.lte = function(y, b) {
          return (b = compare2(this, new BigNumber2(y, b))) === -1 || b === 0;
        };
        P.isNaN = function() {
          return !this.s;
        };
        P.isNegative = function() {
          return this.s < 0;
        };
        P.isPositive = function() {
          return this.s > 0;
        };
        P.isZero = function() {
          return !!this.c && this.c[0] == 0;
        };
        P.minus = function(y, b) {
          var i, j, t, xLTy, x = this, a = x.s;
          y = new BigNumber2(y, b);
          b = y.s;
          if (!a || !b)
            return new BigNumber2(NaN);
          if (a != b) {
            y.s = -b;
            return x.plus(y);
          }
          var xe = x.e / LOG_BASE, ye = y.e / LOG_BASE, xc = x.c, yc = y.c;
          if (!xe || !ye) {
            if (!xc || !yc)
              return xc ? (y.s = -b, y) : new BigNumber2(yc ? x : NaN);
            if (!xc[0] || !yc[0]) {
              return yc[0] ? (y.s = -b, y) : new BigNumber2(xc[0] ? x : (
                // IEEE 754 (2008) 6.3: n - n = -0 when rounding to -Infinity
                ROUNDING_MODE == 3 ? -0 : 0
              ));
            }
          }
          xe = bitFloor(xe);
          ye = bitFloor(ye);
          xc = xc.slice();
          if (a = xe - ye) {
            if (xLTy = a < 0) {
              a = -a;
              t = xc;
            } else {
              ye = xe;
              t = yc;
            }
            t.reverse();
            for (b = a; b--; t.push(0))
              ;
            t.reverse();
          } else {
            j = (xLTy = (a = xc.length) < (b = yc.length)) ? a : b;
            for (a = b = 0; b < j; b++) {
              if (xc[b] != yc[b]) {
                xLTy = xc[b] < yc[b];
                break;
              }
            }
          }
          if (xLTy) {
            t = xc;
            xc = yc;
            yc = t;
            y.s = -y.s;
          }
          b = (j = yc.length) - (i = xc.length);
          if (b > 0)
            for (; b--; xc[i++] = 0)
              ;
          b = BASE - 1;
          for (; j > a; ) {
            if (xc[--j] < yc[j]) {
              for (i = j; i && !xc[--i]; xc[i] = b)
                ;
              --xc[i];
              xc[j] += BASE;
            }
            xc[j] -= yc[j];
          }
          for (; xc[0] == 0; xc.splice(0, 1), --ye)
            ;
          if (!xc[0]) {
            y.s = ROUNDING_MODE == 3 ? -1 : 1;
            y.c = [y.e = 0];
            return y;
          }
          return normalise(y, xc, ye);
        };
        P.modulo = P.mod = function(y, b) {
          var q, s, x = this;
          y = new BigNumber2(y, b);
          if (!x.c || !y.s || y.c && !y.c[0]) {
            return new BigNumber2(NaN);
          } else if (!y.c || x.c && !x.c[0]) {
            return new BigNumber2(x);
          }
          if (MODULO_MODE == 9) {
            s = y.s;
            y.s = 1;
            q = div(x, y, 0, 3);
            y.s = s;
            q.s *= s;
          } else {
            q = div(x, y, 0, MODULO_MODE);
          }
          y = x.minus(q.times(y));
          if (!y.c[0] && MODULO_MODE == 1)
            y.s = x.s;
          return y;
        };
        P.multipliedBy = P.times = function(y, b) {
          var c, e2, i, j, k, m, xcL, xlo, xhi, ycL, ylo, yhi, zc, base2, sqrtBase, x = this, xc = x.c, yc = (y = new BigNumber2(y, b)).c;
          if (!xc || !yc || !xc[0] || !yc[0]) {
            if (!x.s || !y.s || xc && !xc[0] && !yc || yc && !yc[0] && !xc) {
              y.c = y.e = y.s = null;
            } else {
              y.s *= x.s;
              if (!xc || !yc) {
                y.c = y.e = null;
              } else {
                y.c = [0];
                y.e = 0;
              }
            }
            return y;
          }
          e2 = bitFloor(x.e / LOG_BASE) + bitFloor(y.e / LOG_BASE);
          y.s *= x.s;
          xcL = xc.length;
          ycL = yc.length;
          if (xcL < ycL) {
            zc = xc;
            xc = yc;
            yc = zc;
            i = xcL;
            xcL = ycL;
            ycL = i;
          }
          for (i = xcL + ycL, zc = []; i--; zc.push(0))
            ;
          base2 = BASE;
          sqrtBase = SQRT_BASE;
          for (i = ycL; --i >= 0; ) {
            c = 0;
            ylo = yc[i] % sqrtBase;
            yhi = yc[i] / sqrtBase | 0;
            for (k = xcL, j = i + k; j > i; ) {
              xlo = xc[--k] % sqrtBase;
              xhi = xc[k] / sqrtBase | 0;
              m = yhi * xlo + xhi * ylo;
              xlo = ylo * xlo + m % sqrtBase * sqrtBase + zc[j] + c;
              c = (xlo / base2 | 0) + (m / sqrtBase | 0) + yhi * xhi;
              zc[j--] = xlo % base2;
            }
            zc[j] = c;
          }
          if (c) {
            ++e2;
          } else {
            zc.splice(0, 1);
          }
          return normalise(y, zc, e2);
        };
        P.negated = function() {
          var x = new BigNumber2(this);
          x.s = -x.s || null;
          return x;
        };
        P.plus = function(y, b) {
          var t, x = this, a = x.s;
          y = new BigNumber2(y, b);
          b = y.s;
          if (!a || !b)
            return new BigNumber2(NaN);
          if (a != b) {
            y.s = -b;
            return x.minus(y);
          }
          var xe = x.e / LOG_BASE, ye = y.e / LOG_BASE, xc = x.c, yc = y.c;
          if (!xe || !ye) {
            if (!xc || !yc)
              return new BigNumber2(a / 0);
            if (!xc[0] || !yc[0])
              return yc[0] ? y : new BigNumber2(xc[0] ? x : a * 0);
          }
          xe = bitFloor(xe);
          ye = bitFloor(ye);
          xc = xc.slice();
          if (a = xe - ye) {
            if (a > 0) {
              ye = xe;
              t = yc;
            } else {
              a = -a;
              t = xc;
            }
            t.reverse();
            for (; a--; t.push(0))
              ;
            t.reverse();
          }
          a = xc.length;
          b = yc.length;
          if (a - b < 0) {
            t = yc;
            yc = xc;
            xc = t;
            b = a;
          }
          for (a = 0; b; ) {
            a = (xc[--b] = xc[b] + yc[b] + a) / BASE | 0;
            xc[b] = BASE === xc[b] ? 0 : xc[b] % BASE;
          }
          if (a) {
            xc = [a].concat(xc);
            ++ye;
          }
          return normalise(y, xc, ye);
        };
        P.precision = P.sd = function(sd, rm) {
          var c, n, v, x = this;
          if (sd != null && sd !== !!sd) {
            intCheck(sd, 1, MAX);
            if (rm == null)
              rm = ROUNDING_MODE;
            else
              intCheck(rm, 0, 8);
            return round(new BigNumber2(x), sd, rm);
          }
          if (!(c = x.c))
            return null;
          v = c.length - 1;
          n = v * LOG_BASE + 1;
          if (v = c[v]) {
            for (; v % 10 == 0; v /= 10, n--)
              ;
            for (v = c[0]; v >= 10; v /= 10, n++)
              ;
          }
          if (sd && x.e + 1 > n)
            n = x.e + 1;
          return n;
        };
        P.shiftedBy = function(k) {
          intCheck(k, -MAX_SAFE_INTEGER, MAX_SAFE_INTEGER);
          return this.times("1e" + k);
        };
        P.squareRoot = P.sqrt = function() {
          var m, n, r, rep, t, x = this, c = x.c, s = x.s, e2 = x.e, dp = DECIMAL_PLACES + 4, half = new BigNumber2("0.5");
          if (s !== 1 || !c || !c[0]) {
            return new BigNumber2(!s || s < 0 && (!c || c[0]) ? NaN : c ? x : 1 / 0);
          }
          s = Math.sqrt(+valueOf(x));
          if (s == 0 || s == 1 / 0) {
            n = coeffToString(c);
            if ((n.length + e2) % 2 == 0)
              n += "0";
            s = Math.sqrt(+n);
            e2 = bitFloor((e2 + 1) / 2) - (e2 < 0 || e2 % 2);
            if (s == 1 / 0) {
              n = "5e" + e2;
            } else {
              n = s.toExponential();
              n = n.slice(0, n.indexOf("e") + 1) + e2;
            }
            r = new BigNumber2(n);
          } else {
            r = new BigNumber2(s + "");
          }
          if (r.c[0]) {
            e2 = r.e;
            s = e2 + dp;
            if (s < 3)
              s = 0;
            for (; ; ) {
              t = r;
              r = half.times(t.plus(div(x, t, dp, 1)));
              if (coeffToString(t.c).slice(0, s) === (n = coeffToString(r.c)).slice(0, s)) {
                if (r.e < e2)
                  --s;
                n = n.slice(s - 3, s + 1);
                if (n == "9999" || !rep && n == "4999") {
                  if (!rep) {
                    round(t, t.e + DECIMAL_PLACES + 2, 0);
                    if (t.times(t).eq(x)) {
                      r = t;
                      break;
                    }
                  }
                  dp += 4;
                  s += 4;
                  rep = 1;
                } else {
                  if (!+n || !+n.slice(1) && n.charAt(0) == "5") {
                    round(r, r.e + DECIMAL_PLACES + 2, 1);
                    m = !r.times(r).eq(x);
                  }
                  break;
                }
              }
            }
          }
          return round(r, r.e + DECIMAL_PLACES + 1, ROUNDING_MODE, m);
        };
        P.toExponential = function(dp, rm) {
          if (dp != null) {
            intCheck(dp, 0, MAX);
            dp++;
          }
          return format(this, dp, rm, 1);
        };
        P.toFixed = function(dp, rm) {
          if (dp != null) {
            intCheck(dp, 0, MAX);
            dp = dp + this.e + 1;
          }
          return format(this, dp, rm);
        };
        P.toFormat = function(dp, rm, format2) {
          var str, x = this;
          if (format2 == null) {
            if (dp != null && rm && typeof rm == "object") {
              format2 = rm;
              rm = null;
            } else if (dp && typeof dp == "object") {
              format2 = dp;
              dp = rm = null;
            } else {
              format2 = FORMAT;
            }
          } else if (typeof format2 != "object") {
            throw Error(bignumberError + "Argument not an object: " + format2);
          }
          str = x.toFixed(dp, rm);
          if (x.c) {
            var i, arr = str.split("."), g1 = +format2.groupSize, g2 = +format2.secondaryGroupSize, groupSeparator = format2.groupSeparator || "", intPart = arr[0], fractionPart = arr[1], isNeg = x.s < 0, intDigits = isNeg ? intPart.slice(1) : intPart, len = intDigits.length;
            if (g2) {
              i = g1;
              g1 = g2;
              g2 = i;
              len -= i;
            }
            if (g1 > 0 && len > 0) {
              i = len % g1 || g1;
              intPart = intDigits.substr(0, i);
              for (; i < len; i += g1)
                intPart += groupSeparator + intDigits.substr(i, g1);
              if (g2 > 0)
                intPart += groupSeparator + intDigits.slice(i);
              if (isNeg)
                intPart = "-" + intPart;
            }
            str = fractionPart ? intPart + (format2.decimalSeparator || "") + ((g2 = +format2.fractionGroupSize) ? fractionPart.replace(
              new RegExp("\\d{" + g2 + "}\\B", "g"),
              "$&" + (format2.fractionGroupSeparator || "")
            ) : fractionPart) : intPart;
          }
          return (format2.prefix || "") + str + (format2.suffix || "");
        };
        P.toFraction = function(md) {
          var d, d0, d1, d2, e2, exp, n, n0, n1, q, r, s, x = this, xc = x.c;
          if (md != null) {
            n = new BigNumber2(md);
            if (!n.isInteger() && (n.c || n.s !== 1) || n.lt(ONE)) {
              throw Error(bignumberError + "Argument " + (n.isInteger() ? "out of range: " : "not an integer: ") + valueOf(n));
            }
          }
          if (!xc)
            return new BigNumber2(x);
          d = new BigNumber2(ONE);
          n1 = d0 = new BigNumber2(ONE);
          d1 = n0 = new BigNumber2(ONE);
          s = coeffToString(xc);
          e2 = d.e = s.length - x.e - 1;
          d.c[0] = POWS_TEN[(exp = e2 % LOG_BASE) < 0 ? LOG_BASE + exp : exp];
          md = !md || n.comparedTo(d) > 0 ? e2 > 0 ? d : n1 : n;
          exp = MAX_EXP;
          MAX_EXP = 1 / 0;
          n = new BigNumber2(s);
          n0.c[0] = 0;
          for (; ; ) {
            q = div(n, d, 0, 1);
            d2 = d0.plus(q.times(d1));
            if (d2.comparedTo(md) == 1)
              break;
            d0 = d1;
            d1 = d2;
            n1 = n0.plus(q.times(d2 = n1));
            n0 = d2;
            d = n.minus(q.times(d2 = d));
            n = d2;
          }
          d2 = div(md.minus(d0), d1, 0, 1);
          n0 = n0.plus(d2.times(n1));
          d0 = d0.plus(d2.times(d1));
          n0.s = n1.s = x.s;
          e2 = e2 * 2;
          r = div(n1, d1, e2, ROUNDING_MODE).minus(x).abs().comparedTo(
            div(n0, d0, e2, ROUNDING_MODE).minus(x).abs()
          ) < 1 ? [n1, d1] : [n0, d0];
          MAX_EXP = exp;
          return r;
        };
        P.toNumber = function() {
          return +valueOf(this);
        };
        P.toPrecision = function(sd, rm) {
          if (sd != null)
            intCheck(sd, 1, MAX);
          return format(this, sd, rm, 2);
        };
        P.toString = function(b) {
          var str, n = this, s = n.s, e2 = n.e;
          if (e2 === null) {
            if (s) {
              str = "Infinity";
              if (s < 0)
                str = "-" + str;
            } else {
              str = "NaN";
            }
          } else {
            if (b == null) {
              str = e2 <= TO_EXP_NEG || e2 >= TO_EXP_POS ? toExponential(coeffToString(n.c), e2) : toFixedPoint(coeffToString(n.c), e2, "0");
            } else if (b === 10 && alphabetHasNormalDecimalDigits) {
              n = round(new BigNumber2(n), DECIMAL_PLACES + e2 + 1, ROUNDING_MODE);
              str = toFixedPoint(coeffToString(n.c), n.e, "0");
            } else {
              intCheck(b, 2, ALPHABET.length, "Base");
              str = convertBase(toFixedPoint(coeffToString(n.c), e2, "0"), 10, b, s, true);
            }
            if (s < 0 && n.c[0])
              str = "-" + str;
          }
          return str;
        };
        P.valueOf = P.toJSON = function() {
          return valueOf(this);
        };
        P._isBigNumber = true;
        if (configObject != null)
          BigNumber2.set(configObject);
        return BigNumber2;
      }
      function bitFloor(n) {
        var i = n | 0;
        return n > 0 || n === i ? i : i - 1;
      }
      function coeffToString(a) {
        var s, z, i = 1, j = a.length, r = a[0] + "";
        for (; i < j; ) {
          s = a[i++] + "";
          z = LOG_BASE - s.length;
          for (; z--; s = "0" + s)
            ;
          r += s;
        }
        for (j = r.length; r.charCodeAt(--j) === 48; )
          ;
        return r.slice(0, j + 1 || 1);
      }
      function compare2(x, y) {
        var a, b, xc = x.c, yc = y.c, i = x.s, j = y.s, k = x.e, l = y.e;
        if (!i || !j)
          return null;
        a = xc && !xc[0];
        b = yc && !yc[0];
        if (a || b)
          return a ? b ? 0 : -j : i;
        if (i != j)
          return i;
        a = i < 0;
        b = k == l;
        if (!xc || !yc)
          return b ? 0 : !xc ^ a ? 1 : -1;
        if (!b)
          return k > l ^ a ? 1 : -1;
        j = (k = xc.length) < (l = yc.length) ? k : l;
        for (i = 0; i < j; i++)
          if (xc[i] != yc[i])
            return xc[i] > yc[i] ^ a ? 1 : -1;
        return k == l ? 0 : k > l ^ a ? 1 : -1;
      }
      function intCheck(n, min, max, name) {
        if (n < min || n > max || n !== mathfloor(n)) {
          throw Error(bignumberError + (name || "Argument") + (typeof n == "number" ? n < min || n > max ? " out of range: " : " not an integer: " : " not a primitive number: ") + String(n));
        }
      }
      function isOdd(n) {
        var k = n.c.length - 1;
        return bitFloor(n.e / LOG_BASE) == k && n.c[k] % 2 != 0;
      }
      function toExponential(str, e2) {
        return (str.length > 1 ? str.charAt(0) + "." + str.slice(1) : str) + (e2 < 0 ? "e" : "e+") + e2;
      }
      function toFixedPoint(str, e2, z) {
        var len, zs;
        if (e2 < 0) {
          for (zs = z + "."; ++e2; zs += z)
            ;
          str = zs + str;
        } else {
          len = str.length;
          if (++e2 > len) {
            for (zs = z, e2 -= len; --e2; zs += z)
              ;
            str += zs;
          } else if (e2 < len) {
            str = str.slice(0, e2) + "." + str.slice(e2);
          }
        }
        return str;
      }
      BigNumber = clone2();
      BigNumber["default"] = BigNumber.BigNumber = BigNumber;
      if (typeof define == "function" && define.amd) {
        define(function() {
          return BigNumber;
        });
      } else if (typeof module != "undefined" && module.exports) {
        module.exports = BigNumber;
      } else {
        if (!globalObject) {
          globalObject = typeof self != "undefined" && self ? self : window;
        }
        globalObject.BigNumber = BigNumber;
      }
    })(exports);
  }
});

// ../../node_modules/@solana/buffer-layout-utils/lib/cjs/decimal.js
var require_decimal = __commonJS({
  "../../node_modules/@solana/buffer-layout-utils/lib/cjs/decimal.js"(exports) {
    "use strict";
    var __importDefault = exports && exports.__importDefault || function(mod) {
      return mod && mod.__esModule ? mod : { "default": mod };
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.decimal = exports.WAD = void 0;
    var bignumber_js_1 = __importDefault(require_bignumber());
    var base_1 = require_base();
    var bigint_1 = require_bigint();
    exports.WAD = new bignumber_js_1.default("1e+18");
    var decimal = (property) => {
      const layout = (0, bigint_1.u128)(property);
      const { encode: encode2, decode: decode2 } = (0, base_1.encodeDecode)(layout);
      const decimalLayout = layout;
      decimalLayout.decode = (buffer2, offset) => {
        const src = decode2(buffer2, offset).toString();
        return new bignumber_js_1.default(src).div(exports.WAD);
      };
      decimalLayout.encode = (decimal2, buffer2, offset) => {
        const src = BigInt(decimal2.times(exports.WAD).integerValue().toString());
        return encode2(src, buffer2, offset);
      };
      return decimalLayout;
    };
    exports.decimal = decimal;
  }
});

// ../../node_modules/@solana/buffer-layout-utils/lib/cjs/native.js
var require_native = __commonJS({
  "../../node_modules/@solana/buffer-layout-utils/lib/cjs/native.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.bool = void 0;
    var buffer_layout_1 = require_Layout();
    var base_1 = require_base();
    var bool2 = (property) => {
      const layout = (0, buffer_layout_1.u8)(property);
      const { encode: encode2, decode: decode2 } = (0, base_1.encodeDecode)(layout);
      const boolLayout = layout;
      boolLayout.decode = (buffer2, offset) => {
        const src = decode2(buffer2, offset);
        return !!src;
      };
      boolLayout.encode = (bool3, buffer2, offset) => {
        const src = Number(bool3);
        return encode2(src, buffer2, offset);
      };
      return boolLayout;
    };
    exports.bool = bool2;
  }
});

// ../../node_modules/@solana/buffer-layout-utils/lib/cjs/web3.js
var require_web3 = __commonJS({
  "../../node_modules/@solana/buffer-layout-utils/lib/cjs/web3.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.publicKey = void 0;
    var buffer_layout_1 = require_Layout();
    var web3_js_1 = (init_index_browser_esm(), __toCommonJS(index_browser_esm_exports));
    var base_1 = require_base();
    var publicKey3 = (property) => {
      const layout = (0, buffer_layout_1.blob)(32, property);
      const { encode: encode2, decode: decode2 } = (0, base_1.encodeDecode)(layout);
      const publicKeyLayout = layout;
      publicKeyLayout.decode = (buffer2, offset) => {
        const src = decode2(buffer2, offset);
        return new web3_js_1.PublicKey(src);
      };
      publicKeyLayout.encode = (publicKey4, buffer2, offset) => {
        const src = publicKey4.toBuffer();
        return encode2(src, buffer2, offset);
      };
      return publicKeyLayout;
    };
    exports.publicKey = publicKey3;
  }
});

// ../../node_modules/@solana/buffer-layout-utils/lib/cjs/index.js
var require_cjs = __commonJS({
  "../../node_modules/@solana/buffer-layout-utils/lib/cjs/index.js"(exports) {
    "use strict";
    var __createBinding = exports && exports.__createBinding || (Object.create ? function(o2, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      Object.defineProperty(o2, k2, { enumerable: true, get: function() {
        return m[k];
      } });
    } : function(o2, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      o2[k2] = m[k];
    });
    var __exportStar = exports && exports.__exportStar || function(m, exports2) {
      for (var p in m)
        if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports2, p))
          __createBinding(exports2, m, p);
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    __exportStar(require_base(), exports);
    __exportStar(require_bigint(), exports);
    __exportStar(require_decimal(), exports);
    __exportStar(require_native(), exports);
    __exportStar(require_web3(), exports);
  }
});

// ../../node_modules/@solana/spl-token/lib/cjs/errors.js
var require_errors2 = __commonJS({
  "../../node_modules/@solana/spl-token/lib/cjs/errors.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.TokenTransferHookAccountDataNotFound = exports.TokenTransferHookInvalidSeed = exports.TokenTransferHookAccountNotFound = exports.TokenUnsupportedInstructionError = exports.TokenInvalidInstructionTypeError = exports.TokenInvalidInstructionDataError = exports.TokenInvalidInstructionKeysError = exports.TokenInvalidInstructionProgramError = exports.TokenOwnerOffCurveError = exports.TokenInvalidOwnerError = exports.TokenInvalidMintError = exports.TokenInvalidAccountSizeError = exports.TokenInvalidAccountOwnerError = exports.TokenInvalidAccountDataError = exports.TokenInvalidAccountError = exports.TokenAccountNotFoundError = exports.TokenError = void 0;
    var TokenError2 = class extends Error {
      constructor(message) {
        super(message);
      }
    };
    exports.TokenError = TokenError2;
    var TokenAccountNotFoundError2 = class extends TokenError2 {
      constructor() {
        super(...arguments);
        this.name = "TokenAccountNotFoundError";
      }
    };
    exports.TokenAccountNotFoundError = TokenAccountNotFoundError2;
    var TokenInvalidAccountError2 = class extends TokenError2 {
      constructor() {
        super(...arguments);
        this.name = "TokenInvalidAccountError";
      }
    };
    exports.TokenInvalidAccountError = TokenInvalidAccountError2;
    var TokenInvalidAccountDataError = class extends TokenError2 {
      constructor() {
        super(...arguments);
        this.name = "TokenInvalidAccountDataError";
      }
    };
    exports.TokenInvalidAccountDataError = TokenInvalidAccountDataError;
    var TokenInvalidAccountOwnerError2 = class extends TokenError2 {
      constructor() {
        super(...arguments);
        this.name = "TokenInvalidAccountOwnerError";
      }
    };
    exports.TokenInvalidAccountOwnerError = TokenInvalidAccountOwnerError2;
    var TokenInvalidAccountSizeError2 = class extends TokenError2 {
      constructor() {
        super(...arguments);
        this.name = "TokenInvalidAccountSizeError";
      }
    };
    exports.TokenInvalidAccountSizeError = TokenInvalidAccountSizeError2;
    var TokenInvalidMintError2 = class extends TokenError2 {
      constructor() {
        super(...arguments);
        this.name = "TokenInvalidMintError";
      }
    };
    exports.TokenInvalidMintError = TokenInvalidMintError2;
    var TokenInvalidOwnerError2 = class extends TokenError2 {
      constructor() {
        super(...arguments);
        this.name = "TokenInvalidOwnerError";
      }
    };
    exports.TokenInvalidOwnerError = TokenInvalidOwnerError2;
    var TokenOwnerOffCurveError2 = class extends TokenError2 {
      constructor() {
        super(...arguments);
        this.name = "TokenOwnerOffCurveError";
      }
    };
    exports.TokenOwnerOffCurveError = TokenOwnerOffCurveError2;
    var TokenInvalidInstructionProgramError2 = class extends TokenError2 {
      constructor() {
        super(...arguments);
        this.name = "TokenInvalidInstructionProgramError";
      }
    };
    exports.TokenInvalidInstructionProgramError = TokenInvalidInstructionProgramError2;
    var TokenInvalidInstructionKeysError2 = class extends TokenError2 {
      constructor() {
        super(...arguments);
        this.name = "TokenInvalidInstructionKeysError";
      }
    };
    exports.TokenInvalidInstructionKeysError = TokenInvalidInstructionKeysError2;
    var TokenInvalidInstructionDataError2 = class extends TokenError2 {
      constructor() {
        super(...arguments);
        this.name = "TokenInvalidInstructionDataError";
      }
    };
    exports.TokenInvalidInstructionDataError = TokenInvalidInstructionDataError2;
    var TokenInvalidInstructionTypeError2 = class extends TokenError2 {
      constructor() {
        super(...arguments);
        this.name = "TokenInvalidInstructionTypeError";
      }
    };
    exports.TokenInvalidInstructionTypeError = TokenInvalidInstructionTypeError2;
    var TokenUnsupportedInstructionError2 = class extends TokenError2 {
      constructor() {
        super(...arguments);
        this.name = "TokenUnsupportedInstructionError";
      }
    };
    exports.TokenUnsupportedInstructionError = TokenUnsupportedInstructionError2;
    var TokenTransferHookAccountNotFound2 = class extends TokenError2 {
      constructor() {
        super(...arguments);
        this.name = "TokenTransferHookAccountNotFound";
      }
    };
    exports.TokenTransferHookAccountNotFound = TokenTransferHookAccountNotFound2;
    var TokenTransferHookInvalidSeed2 = class extends TokenError2 {
      constructor() {
        super(...arguments);
        this.name = "TokenTransferHookInvalidSeed";
      }
    };
    exports.TokenTransferHookInvalidSeed = TokenTransferHookInvalidSeed2;
    var TokenTransferHookAccountDataNotFound2 = class extends TokenError2 {
      constructor() {
        super(...arguments);
        this.name = "TokenTransferHookAccountDataNotFound";
      }
    };
    exports.TokenTransferHookAccountDataNotFound = TokenTransferHookAccountDataNotFound2;
  }
});

// ../../node_modules/@solana/spl-token/lib/cjs/instructions/types.js
var require_types3 = __commonJS({
  "../../node_modules/@solana/spl-token/lib/cjs/instructions/types.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.TokenInstruction = void 0;
    var TokenInstruction2;
    (function(TokenInstruction3) {
      TokenInstruction3[TokenInstruction3["InitializeMint"] = 0] = "InitializeMint";
      TokenInstruction3[TokenInstruction3["InitializeAccount"] = 1] = "InitializeAccount";
      TokenInstruction3[TokenInstruction3["InitializeMultisig"] = 2] = "InitializeMultisig";
      TokenInstruction3[TokenInstruction3["Transfer"] = 3] = "Transfer";
      TokenInstruction3[TokenInstruction3["Approve"] = 4] = "Approve";
      TokenInstruction3[TokenInstruction3["Revoke"] = 5] = "Revoke";
      TokenInstruction3[TokenInstruction3["SetAuthority"] = 6] = "SetAuthority";
      TokenInstruction3[TokenInstruction3["MintTo"] = 7] = "MintTo";
      TokenInstruction3[TokenInstruction3["Burn"] = 8] = "Burn";
      TokenInstruction3[TokenInstruction3["CloseAccount"] = 9] = "CloseAccount";
      TokenInstruction3[TokenInstruction3["FreezeAccount"] = 10] = "FreezeAccount";
      TokenInstruction3[TokenInstruction3["ThawAccount"] = 11] = "ThawAccount";
      TokenInstruction3[TokenInstruction3["TransferChecked"] = 12] = "TransferChecked";
      TokenInstruction3[TokenInstruction3["ApproveChecked"] = 13] = "ApproveChecked";
      TokenInstruction3[TokenInstruction3["MintToChecked"] = 14] = "MintToChecked";
      TokenInstruction3[TokenInstruction3["BurnChecked"] = 15] = "BurnChecked";
      TokenInstruction3[TokenInstruction3["InitializeAccount2"] = 16] = "InitializeAccount2";
      TokenInstruction3[TokenInstruction3["SyncNative"] = 17] = "SyncNative";
      TokenInstruction3[TokenInstruction3["InitializeAccount3"] = 18] = "InitializeAccount3";
      TokenInstruction3[TokenInstruction3["InitializeMultisig2"] = 19] = "InitializeMultisig2";
      TokenInstruction3[TokenInstruction3["InitializeMint2"] = 20] = "InitializeMint2";
      TokenInstruction3[TokenInstruction3["GetAccountDataSize"] = 21] = "GetAccountDataSize";
      TokenInstruction3[TokenInstruction3["InitializeImmutableOwner"] = 22] = "InitializeImmutableOwner";
      TokenInstruction3[TokenInstruction3["AmountToUiAmount"] = 23] = "AmountToUiAmount";
      TokenInstruction3[TokenInstruction3["UiAmountToAmount"] = 24] = "UiAmountToAmount";
      TokenInstruction3[TokenInstruction3["InitializeMintCloseAuthority"] = 25] = "InitializeMintCloseAuthority";
      TokenInstruction3[TokenInstruction3["TransferFeeExtension"] = 26] = "TransferFeeExtension";
      TokenInstruction3[TokenInstruction3["ConfidentialTransferExtension"] = 27] = "ConfidentialTransferExtension";
      TokenInstruction3[TokenInstruction3["DefaultAccountStateExtension"] = 28] = "DefaultAccountStateExtension";
      TokenInstruction3[TokenInstruction3["Reallocate"] = 29] = "Reallocate";
      TokenInstruction3[TokenInstruction3["MemoTransferExtension"] = 30] = "MemoTransferExtension";
      TokenInstruction3[TokenInstruction3["CreateNativeMint"] = 31] = "CreateNativeMint";
      TokenInstruction3[TokenInstruction3["InitializeNonTransferableMint"] = 32] = "InitializeNonTransferableMint";
      TokenInstruction3[TokenInstruction3["InterestBearingMintExtension"] = 33] = "InterestBearingMintExtension";
      TokenInstruction3[TokenInstruction3["CpiGuardExtension"] = 34] = "CpiGuardExtension";
      TokenInstruction3[TokenInstruction3["InitializePermanentDelegate"] = 35] = "InitializePermanentDelegate";
      TokenInstruction3[TokenInstruction3["TransferHookExtension"] = 36] = "TransferHookExtension";
      TokenInstruction3[TokenInstruction3["MetadataPointerExtension"] = 39] = "MetadataPointerExtension";
    })(TokenInstruction2 || (exports.TokenInstruction = TokenInstruction2 = {}));
  }
});

// ../../node_modules/@solana/spl-token/lib/cjs/instructions/amountToUiAmount.js
var require_amountToUiAmount = __commonJS({
  "../../node_modules/@solana/spl-token/lib/cjs/instructions/amountToUiAmount.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.decodeAmountToUiAmountInstructionUnchecked = exports.decodeAmountToUiAmountInstruction = exports.createAmountToUiAmountInstruction = exports.amountToUiAmountInstructionData = void 0;
    var buffer_layout_1 = require_Layout();
    var buffer_layout_utils_1 = require_cjs();
    var web3_js_1 = (init_index_browser_esm(), __toCommonJS(index_browser_esm_exports));
    var constants_js_1 = require_constants();
    var errors_js_1 = require_errors2();
    var types_js_1 = require_types3();
    exports.amountToUiAmountInstructionData = (0, buffer_layout_1.struct)([
      (0, buffer_layout_1.u8)("instruction"),
      (0, buffer_layout_utils_1.u64)("amount")
    ]);
    function createAmountToUiAmountInstruction2(mint, amount2, programId = constants_js_1.TOKEN_PROGRAM_ID) {
      const keys = [{ pubkey: mint, isSigner: false, isWritable: false }];
      const data = Buffer.alloc(exports.amountToUiAmountInstructionData.span);
      exports.amountToUiAmountInstructionData.encode({
        instruction: types_js_1.TokenInstruction.AmountToUiAmount,
        amount: BigInt(amount2)
      }, data);
      return new web3_js_1.TransactionInstruction({ keys, programId, data });
    }
    exports.createAmountToUiAmountInstruction = createAmountToUiAmountInstruction2;
    function decodeAmountToUiAmountInstruction2(instruction, programId = constants_js_1.TOKEN_PROGRAM_ID) {
      if (!instruction.programId.equals(programId))
        throw new errors_js_1.TokenInvalidInstructionProgramError();
      if (instruction.data.length !== exports.amountToUiAmountInstructionData.span)
        throw new errors_js_1.TokenInvalidInstructionDataError();
      const { keys: { mint }, data } = decodeAmountToUiAmountInstructionUnchecked(instruction);
      if (data.instruction !== types_js_1.TokenInstruction.AmountToUiAmount)
        throw new errors_js_1.TokenInvalidInstructionTypeError();
      if (!mint)
        throw new errors_js_1.TokenInvalidInstructionKeysError();
      return {
        programId,
        keys: {
          mint
        },
        data
      };
    }
    exports.decodeAmountToUiAmountInstruction = decodeAmountToUiAmountInstruction2;
    function decodeAmountToUiAmountInstructionUnchecked({ programId, keys: [mint], data }) {
      return {
        programId,
        keys: {
          mint
        },
        data: exports.amountToUiAmountInstructionData.decode(data)
      };
    }
    exports.decodeAmountToUiAmountInstructionUnchecked = decodeAmountToUiAmountInstructionUnchecked;
  }
});

// ../../node_modules/@solana/spl-token/lib/cjs/actions/amountToUiAmount.js
var require_amountToUiAmount2 = __commonJS({
  "../../node_modules/@solana/spl-token/lib/cjs/actions/amountToUiAmount.js"(exports) {
    "use strict";
    var __awaiter = exports && exports.__awaiter || function(thisArg, _arguments, P, generator) {
      function adopt(value) {
        return value instanceof P ? value : new P(function(resolve) {
          resolve(value);
        });
      }
      return new (P || (P = Promise))(function(resolve, reject) {
        function fulfilled(value) {
          try {
            step(generator.next(value));
          } catch (e2) {
            reject(e2);
          }
        }
        function rejected(value) {
          try {
            step(generator["throw"](value));
          } catch (e2) {
            reject(e2);
          }
        }
        function step(result) {
          result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
        }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
      });
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.amountToUiAmount = void 0;
    var web3_js_1 = (init_index_browser_esm(), __toCommonJS(index_browser_esm_exports));
    var constants_js_1 = require_constants();
    var amountToUiAmount_js_1 = require_amountToUiAmount();
    function amountToUiAmount(connection, payer, mint, amount2, programId = constants_js_1.TOKEN_PROGRAM_ID) {
      return __awaiter(this, void 0, void 0, function* () {
        const transaction = new web3_js_1.Transaction().add((0, amountToUiAmount_js_1.createAmountToUiAmountInstruction)(mint, amount2, programId));
        const { returnData, err } = (yield connection.simulateTransaction(transaction, [payer], false)).value;
        if (returnData === null || returnData === void 0 ? void 0 : returnData.data) {
          return Buffer.from(returnData.data[0], returnData.data[1]).toString("utf-8");
        }
        return err;
      });
    }
    exports.amountToUiAmount = amountToUiAmount;
  }
});

// ../../node_modules/@solana/spl-token/lib/cjs/instructions/internal.js
var require_internal2 = __commonJS({
  "../../node_modules/@solana/spl-token/lib/cjs/instructions/internal.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.addSigners = void 0;
    var web3_js_1 = (init_index_browser_esm(), __toCommonJS(index_browser_esm_exports));
    function addSigners2(keys, ownerOrAuthority, multiSigners) {
      if (multiSigners.length) {
        keys.push({ pubkey: ownerOrAuthority, isSigner: false, isWritable: false });
        for (const signer of multiSigners) {
          keys.push({
            pubkey: signer instanceof web3_js_1.PublicKey ? signer : signer.publicKey,
            isSigner: true,
            isWritable: false
          });
        }
      } else {
        keys.push({ pubkey: ownerOrAuthority, isSigner: true, isWritable: false });
      }
      return keys;
    }
    exports.addSigners = addSigners2;
  }
});

// ../../node_modules/@solana/spl-token/lib/cjs/instructions/approve.js
var require_approve = __commonJS({
  "../../node_modules/@solana/spl-token/lib/cjs/instructions/approve.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.decodeApproveInstructionUnchecked = exports.decodeApproveInstruction = exports.createApproveInstruction = exports.approveInstructionData = void 0;
    var buffer_layout_1 = require_Layout();
    var buffer_layout_utils_1 = require_cjs();
    var web3_js_1 = (init_index_browser_esm(), __toCommonJS(index_browser_esm_exports));
    var constants_js_1 = require_constants();
    var errors_js_1 = require_errors2();
    var internal_js_1 = require_internal2();
    var types_js_1 = require_types3();
    exports.approveInstructionData = (0, buffer_layout_1.struct)([(0, buffer_layout_1.u8)("instruction"), (0, buffer_layout_utils_1.u64)("amount")]);
    function createApproveInstruction2(account, delegate, owner, amount2, multiSigners = [], programId = constants_js_1.TOKEN_PROGRAM_ID) {
      const keys = (0, internal_js_1.addSigners)([
        { pubkey: account, isSigner: false, isWritable: true },
        { pubkey: delegate, isSigner: false, isWritable: false }
      ], owner, multiSigners);
      const data = Buffer.alloc(exports.approveInstructionData.span);
      exports.approveInstructionData.encode({
        instruction: types_js_1.TokenInstruction.Approve,
        amount: BigInt(amount2)
      }, data);
      return new web3_js_1.TransactionInstruction({ keys, programId, data });
    }
    exports.createApproveInstruction = createApproveInstruction2;
    function decodeApproveInstruction2(instruction, programId = constants_js_1.TOKEN_PROGRAM_ID) {
      if (!instruction.programId.equals(programId))
        throw new errors_js_1.TokenInvalidInstructionProgramError();
      if (instruction.data.length !== exports.approveInstructionData.span)
        throw new errors_js_1.TokenInvalidInstructionDataError();
      const { keys: { account, delegate, owner, multiSigners }, data } = decodeApproveInstructionUnchecked(instruction);
      if (data.instruction !== types_js_1.TokenInstruction.Approve)
        throw new errors_js_1.TokenInvalidInstructionTypeError();
      if (!account || !delegate || !owner)
        throw new errors_js_1.TokenInvalidInstructionKeysError();
      return {
        programId,
        keys: {
          account,
          delegate,
          owner,
          multiSigners
        },
        data
      };
    }
    exports.decodeApproveInstruction = decodeApproveInstruction2;
    function decodeApproveInstructionUnchecked({ programId, keys: [account, delegate, owner, ...multiSigners], data }) {
      return {
        programId,
        keys: {
          account,
          delegate,
          owner,
          multiSigners
        },
        data: exports.approveInstructionData.decode(data)
      };
    }
    exports.decodeApproveInstructionUnchecked = decodeApproveInstructionUnchecked;
  }
});

// ../../node_modules/@solana/spl-token/lib/cjs/actions/internal.js
var require_internal3 = __commonJS({
  "../../node_modules/@solana/spl-token/lib/cjs/actions/internal.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.getSigners = void 0;
    var web3_js_1 = (init_index_browser_esm(), __toCommonJS(index_browser_esm_exports));
    function getSigners2(signerOrMultisig, multiSigners) {
      return signerOrMultisig instanceof web3_js_1.PublicKey ? [signerOrMultisig, multiSigners] : [signerOrMultisig.publicKey, [signerOrMultisig]];
    }
    exports.getSigners = getSigners2;
  }
});

// ../../node_modules/@solana/spl-token/lib/cjs/actions/approve.js
var require_approve2 = __commonJS({
  "../../node_modules/@solana/spl-token/lib/cjs/actions/approve.js"(exports) {
    "use strict";
    var __awaiter = exports && exports.__awaiter || function(thisArg, _arguments, P, generator) {
      function adopt(value) {
        return value instanceof P ? value : new P(function(resolve) {
          resolve(value);
        });
      }
      return new (P || (P = Promise))(function(resolve, reject) {
        function fulfilled(value) {
          try {
            step(generator.next(value));
          } catch (e2) {
            reject(e2);
          }
        }
        function rejected(value) {
          try {
            step(generator["throw"](value));
          } catch (e2) {
            reject(e2);
          }
        }
        function step(result) {
          result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
        }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
      });
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.approve = void 0;
    var web3_js_1 = (init_index_browser_esm(), __toCommonJS(index_browser_esm_exports));
    var constants_js_1 = require_constants();
    var approve_js_1 = require_approve();
    var internal_js_1 = require_internal3();
    function approve(connection, payer, account, delegate, owner, amount2, multiSigners = [], confirmOptions, programId = constants_js_1.TOKEN_PROGRAM_ID) {
      return __awaiter(this, void 0, void 0, function* () {
        const [ownerPublicKey, signers] = (0, internal_js_1.getSigners)(owner, multiSigners);
        const transaction = new web3_js_1.Transaction().add((0, approve_js_1.createApproveInstruction)(account, delegate, ownerPublicKey, amount2, multiSigners, programId));
        return yield (0, web3_js_1.sendAndConfirmTransaction)(connection, transaction, [payer, ...signers], confirmOptions);
      });
    }
    exports.approve = approve;
  }
});

// ../../node_modules/@solana/spl-token/lib/cjs/instructions/approveChecked.js
var require_approveChecked = __commonJS({
  "../../node_modules/@solana/spl-token/lib/cjs/instructions/approveChecked.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.decodeApproveCheckedInstructionUnchecked = exports.decodeApproveCheckedInstruction = exports.createApproveCheckedInstruction = exports.approveCheckedInstructionData = void 0;
    var buffer_layout_1 = require_Layout();
    var buffer_layout_utils_1 = require_cjs();
    var web3_js_1 = (init_index_browser_esm(), __toCommonJS(index_browser_esm_exports));
    var constants_js_1 = require_constants();
    var errors_js_1 = require_errors2();
    var internal_js_1 = require_internal2();
    var types_js_1 = require_types3();
    exports.approveCheckedInstructionData = (0, buffer_layout_1.struct)([
      (0, buffer_layout_1.u8)("instruction"),
      (0, buffer_layout_utils_1.u64)("amount"),
      (0, buffer_layout_1.u8)("decimals")
    ]);
    function createApproveCheckedInstruction2(account, mint, delegate, owner, amount2, decimals, multiSigners = [], programId = constants_js_1.TOKEN_PROGRAM_ID) {
      const keys = (0, internal_js_1.addSigners)([
        { pubkey: account, isSigner: false, isWritable: true },
        { pubkey: mint, isSigner: false, isWritable: false },
        { pubkey: delegate, isSigner: false, isWritable: false }
      ], owner, multiSigners);
      const data = Buffer.alloc(exports.approveCheckedInstructionData.span);
      exports.approveCheckedInstructionData.encode({
        instruction: types_js_1.TokenInstruction.ApproveChecked,
        amount: BigInt(amount2),
        decimals
      }, data);
      return new web3_js_1.TransactionInstruction({ keys, programId, data });
    }
    exports.createApproveCheckedInstruction = createApproveCheckedInstruction2;
    function decodeApproveCheckedInstruction2(instruction, programId = constants_js_1.TOKEN_PROGRAM_ID) {
      if (!instruction.programId.equals(programId))
        throw new errors_js_1.TokenInvalidInstructionProgramError();
      if (instruction.data.length !== exports.approveCheckedInstructionData.span)
        throw new errors_js_1.TokenInvalidInstructionDataError();
      const { keys: { account, mint, delegate, owner, multiSigners }, data } = decodeApproveCheckedInstructionUnchecked(instruction);
      if (data.instruction !== types_js_1.TokenInstruction.ApproveChecked)
        throw new errors_js_1.TokenInvalidInstructionTypeError();
      if (!account || !mint || !delegate || !owner)
        throw new errors_js_1.TokenInvalidInstructionKeysError();
      return {
        programId,
        keys: {
          account,
          mint,
          delegate,
          owner,
          multiSigners
        },
        data
      };
    }
    exports.decodeApproveCheckedInstruction = decodeApproveCheckedInstruction2;
    function decodeApproveCheckedInstructionUnchecked({ programId, keys: [account, mint, delegate, owner, ...multiSigners], data }) {
      return {
        programId,
        keys: {
          account,
          mint,
          delegate,
          owner,
          multiSigners
        },
        data: exports.approveCheckedInstructionData.decode(data)
      };
    }
    exports.decodeApproveCheckedInstructionUnchecked = decodeApproveCheckedInstructionUnchecked;
  }
});

// ../../node_modules/@solana/spl-token/lib/cjs/actions/approveChecked.js
var require_approveChecked2 = __commonJS({
  "../../node_modules/@solana/spl-token/lib/cjs/actions/approveChecked.js"(exports) {
    "use strict";
    var __awaiter = exports && exports.__awaiter || function(thisArg, _arguments, P, generator) {
      function adopt(value) {
        return value instanceof P ? value : new P(function(resolve) {
          resolve(value);
        });
      }
      return new (P || (P = Promise))(function(resolve, reject) {
        function fulfilled(value) {
          try {
            step(generator.next(value));
          } catch (e2) {
            reject(e2);
          }
        }
        function rejected(value) {
          try {
            step(generator["throw"](value));
          } catch (e2) {
            reject(e2);
          }
        }
        function step(result) {
          result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
        }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
      });
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.approveChecked = void 0;
    var web3_js_1 = (init_index_browser_esm(), __toCommonJS(index_browser_esm_exports));
    var constants_js_1 = require_constants();
    var approveChecked_js_1 = require_approveChecked();
    var internal_js_1 = require_internal3();
    function approveChecked(connection, payer, mint, account, delegate, owner, amount2, decimals, multiSigners = [], confirmOptions, programId = constants_js_1.TOKEN_PROGRAM_ID) {
      return __awaiter(this, void 0, void 0, function* () {
        const [ownerPublicKey, signers] = (0, internal_js_1.getSigners)(owner, multiSigners);
        const transaction = new web3_js_1.Transaction().add((0, approveChecked_js_1.createApproveCheckedInstruction)(account, mint, delegate, ownerPublicKey, amount2, decimals, multiSigners, programId));
        return yield (0, web3_js_1.sendAndConfirmTransaction)(connection, transaction, [payer, ...signers], confirmOptions);
      });
    }
    exports.approveChecked = approveChecked;
  }
});

// ../../node_modules/@solana/spl-token/lib/cjs/instructions/burn.js
var require_burn = __commonJS({
  "../../node_modules/@solana/spl-token/lib/cjs/instructions/burn.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.decodeBurnInstructionUnchecked = exports.decodeBurnInstruction = exports.createBurnInstruction = exports.burnInstructionData = void 0;
    var buffer_layout_1 = require_Layout();
    var buffer_layout_utils_1 = require_cjs();
    var web3_js_1 = (init_index_browser_esm(), __toCommonJS(index_browser_esm_exports));
    var constants_js_1 = require_constants();
    var errors_js_1 = require_errors2();
    var internal_js_1 = require_internal2();
    var types_js_1 = require_types3();
    exports.burnInstructionData = (0, buffer_layout_1.struct)([(0, buffer_layout_1.u8)("instruction"), (0, buffer_layout_utils_1.u64)("amount")]);
    function createBurnInstruction3(account, mint, owner, amount2, multiSigners = [], programId = constants_js_1.TOKEN_PROGRAM_ID) {
      const keys = (0, internal_js_1.addSigners)([
        { pubkey: account, isSigner: false, isWritable: true },
        { pubkey: mint, isSigner: false, isWritable: true }
      ], owner, multiSigners);
      const data = Buffer.alloc(exports.burnInstructionData.span);
      exports.burnInstructionData.encode({
        instruction: types_js_1.TokenInstruction.Burn,
        amount: BigInt(amount2)
      }, data);
      return new web3_js_1.TransactionInstruction({ keys, programId, data });
    }
    exports.createBurnInstruction = createBurnInstruction3;
    function decodeBurnInstruction2(instruction, programId = constants_js_1.TOKEN_PROGRAM_ID) {
      if (!instruction.programId.equals(programId))
        throw new errors_js_1.TokenInvalidInstructionProgramError();
      if (instruction.data.length !== exports.burnInstructionData.span)
        throw new errors_js_1.TokenInvalidInstructionDataError();
      const { keys: { account, mint, owner, multiSigners }, data } = decodeBurnInstructionUnchecked(instruction);
      if (data.instruction !== types_js_1.TokenInstruction.Burn)
        throw new errors_js_1.TokenInvalidInstructionTypeError();
      if (!account || !mint || !owner)
        throw new errors_js_1.TokenInvalidInstructionKeysError();
      return {
        programId,
        keys: {
          account,
          mint,
          owner,
          multiSigners
        },
        data
      };
    }
    exports.decodeBurnInstruction = decodeBurnInstruction2;
    function decodeBurnInstructionUnchecked({ programId, keys: [account, mint, owner, ...multiSigners], data }) {
      return {
        programId,
        keys: {
          account,
          mint,
          owner,
          multiSigners
        },
        data: exports.burnInstructionData.decode(data)
      };
    }
    exports.decodeBurnInstructionUnchecked = decodeBurnInstructionUnchecked;
  }
});

// ../../node_modules/@solana/spl-token/lib/cjs/actions/burn.js
var require_burn2 = __commonJS({
  "../../node_modules/@solana/spl-token/lib/cjs/actions/burn.js"(exports) {
    "use strict";
    var __awaiter = exports && exports.__awaiter || function(thisArg, _arguments, P, generator) {
      function adopt(value) {
        return value instanceof P ? value : new P(function(resolve) {
          resolve(value);
        });
      }
      return new (P || (P = Promise))(function(resolve, reject) {
        function fulfilled(value) {
          try {
            step(generator.next(value));
          } catch (e2) {
            reject(e2);
          }
        }
        function rejected(value) {
          try {
            step(generator["throw"](value));
          } catch (e2) {
            reject(e2);
          }
        }
        function step(result) {
          result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
        }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
      });
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.burn = void 0;
    var web3_js_1 = (init_index_browser_esm(), __toCommonJS(index_browser_esm_exports));
    var constants_js_1 = require_constants();
    var burn_js_1 = require_burn();
    var internal_js_1 = require_internal3();
    function burn(connection, payer, account, mint, owner, amount2, multiSigners = [], confirmOptions, programId = constants_js_1.TOKEN_PROGRAM_ID) {
      return __awaiter(this, void 0, void 0, function* () {
        const [ownerPublicKey, signers] = (0, internal_js_1.getSigners)(owner, multiSigners);
        const transaction = new web3_js_1.Transaction().add((0, burn_js_1.createBurnInstruction)(account, mint, ownerPublicKey, amount2, multiSigners, programId));
        return yield (0, web3_js_1.sendAndConfirmTransaction)(connection, transaction, [payer, ...signers], confirmOptions);
      });
    }
    exports.burn = burn;
  }
});

// ../../node_modules/@solana/spl-token/lib/cjs/instructions/burnChecked.js
var require_burnChecked = __commonJS({
  "../../node_modules/@solana/spl-token/lib/cjs/instructions/burnChecked.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.decodeBurnCheckedInstructionUnchecked = exports.decodeBurnCheckedInstruction = exports.createBurnCheckedInstruction = exports.burnCheckedInstructionData = void 0;
    var buffer_layout_1 = require_Layout();
    var buffer_layout_utils_1 = require_cjs();
    var web3_js_1 = (init_index_browser_esm(), __toCommonJS(index_browser_esm_exports));
    var constants_js_1 = require_constants();
    var errors_js_1 = require_errors2();
    var internal_js_1 = require_internal2();
    var types_js_1 = require_types3();
    exports.burnCheckedInstructionData = (0, buffer_layout_1.struct)([
      (0, buffer_layout_1.u8)("instruction"),
      (0, buffer_layout_utils_1.u64)("amount"),
      (0, buffer_layout_1.u8)("decimals")
    ]);
    function createBurnCheckedInstruction2(account, mint, owner, amount2, decimals, multiSigners = [], programId = constants_js_1.TOKEN_PROGRAM_ID) {
      const keys = (0, internal_js_1.addSigners)([
        { pubkey: account, isSigner: false, isWritable: true },
        { pubkey: mint, isSigner: false, isWritable: true }
      ], owner, multiSigners);
      const data = Buffer.alloc(exports.burnCheckedInstructionData.span);
      exports.burnCheckedInstructionData.encode({
        instruction: types_js_1.TokenInstruction.BurnChecked,
        amount: BigInt(amount2),
        decimals
      }, data);
      return new web3_js_1.TransactionInstruction({ keys, programId, data });
    }
    exports.createBurnCheckedInstruction = createBurnCheckedInstruction2;
    function decodeBurnCheckedInstruction2(instruction, programId = constants_js_1.TOKEN_PROGRAM_ID) {
      if (!instruction.programId.equals(programId))
        throw new errors_js_1.TokenInvalidInstructionProgramError();
      if (instruction.data.length !== exports.burnCheckedInstructionData.span)
        throw new errors_js_1.TokenInvalidInstructionDataError();
      const { keys: { account, mint, owner, multiSigners }, data } = decodeBurnCheckedInstructionUnchecked(instruction);
      if (data.instruction !== types_js_1.TokenInstruction.BurnChecked)
        throw new errors_js_1.TokenInvalidInstructionTypeError();
      if (!account || !mint || !owner)
        throw new errors_js_1.TokenInvalidInstructionKeysError();
      return {
        programId,
        keys: {
          account,
          mint,
          owner,
          multiSigners
        },
        data
      };
    }
    exports.decodeBurnCheckedInstruction = decodeBurnCheckedInstruction2;
    function decodeBurnCheckedInstructionUnchecked({ programId, keys: [account, mint, owner, ...multiSigners], data }) {
      return {
        programId,
        keys: {
          account,
          mint,
          owner,
          multiSigners
        },
        data: exports.burnCheckedInstructionData.decode(data)
      };
    }
    exports.decodeBurnCheckedInstructionUnchecked = decodeBurnCheckedInstructionUnchecked;
  }
});

// ../../node_modules/@solana/spl-token/lib/cjs/actions/burnChecked.js
var require_burnChecked2 = __commonJS({
  "../../node_modules/@solana/spl-token/lib/cjs/actions/burnChecked.js"(exports) {
    "use strict";
    var __awaiter = exports && exports.__awaiter || function(thisArg, _arguments, P, generator) {
      function adopt(value) {
        return value instanceof P ? value : new P(function(resolve) {
          resolve(value);
        });
      }
      return new (P || (P = Promise))(function(resolve, reject) {
        function fulfilled(value) {
          try {
            step(generator.next(value));
          } catch (e2) {
            reject(e2);
          }
        }
        function rejected(value) {
          try {
            step(generator["throw"](value));
          } catch (e2) {
            reject(e2);
          }
        }
        function step(result) {
          result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
        }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
      });
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.burnChecked = void 0;
    var web3_js_1 = (init_index_browser_esm(), __toCommonJS(index_browser_esm_exports));
    var constants_js_1 = require_constants();
    var burnChecked_js_1 = require_burnChecked();
    var internal_js_1 = require_internal3();
    function burnChecked(connection, payer, account, mint, owner, amount2, decimals, multiSigners = [], confirmOptions, programId = constants_js_1.TOKEN_PROGRAM_ID) {
      return __awaiter(this, void 0, void 0, function* () {
        const [ownerPublicKey, signers] = (0, internal_js_1.getSigners)(owner, multiSigners);
        const transaction = new web3_js_1.Transaction().add((0, burnChecked_js_1.createBurnCheckedInstruction)(account, mint, ownerPublicKey, amount2, decimals, multiSigners, programId));
        return yield (0, web3_js_1.sendAndConfirmTransaction)(connection, transaction, [payer, ...signers], confirmOptions);
      });
    }
    exports.burnChecked = burnChecked;
  }
});

// ../../node_modules/@solana/spl-token/lib/cjs/instructions/closeAccount.js
var require_closeAccount = __commonJS({
  "../../node_modules/@solana/spl-token/lib/cjs/instructions/closeAccount.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.decodeCloseAccountInstructionUnchecked = exports.decodeCloseAccountInstruction = exports.createCloseAccountInstruction = exports.closeAccountInstructionData = void 0;
    var buffer_layout_1 = require_Layout();
    var web3_js_1 = (init_index_browser_esm(), __toCommonJS(index_browser_esm_exports));
    var constants_js_1 = require_constants();
    var errors_js_1 = require_errors2();
    var internal_js_1 = require_internal2();
    var types_js_1 = require_types3();
    exports.closeAccountInstructionData = (0, buffer_layout_1.struct)([(0, buffer_layout_1.u8)("instruction")]);
    function createCloseAccountInstruction2(account, destination, authority, multiSigners = [], programId = constants_js_1.TOKEN_PROGRAM_ID) {
      const keys = (0, internal_js_1.addSigners)([
        { pubkey: account, isSigner: false, isWritable: true },
        { pubkey: destination, isSigner: false, isWritable: true }
      ], authority, multiSigners);
      const data = Buffer.alloc(exports.closeAccountInstructionData.span);
      exports.closeAccountInstructionData.encode({ instruction: types_js_1.TokenInstruction.CloseAccount }, data);
      return new web3_js_1.TransactionInstruction({ keys, programId, data });
    }
    exports.createCloseAccountInstruction = createCloseAccountInstruction2;
    function decodeCloseAccountInstruction2(instruction, programId = constants_js_1.TOKEN_PROGRAM_ID) {
      if (!instruction.programId.equals(programId))
        throw new errors_js_1.TokenInvalidInstructionProgramError();
      if (instruction.data.length !== exports.closeAccountInstructionData.span)
        throw new errors_js_1.TokenInvalidInstructionDataError();
      const { keys: { account, destination, authority, multiSigners }, data } = decodeCloseAccountInstructionUnchecked(instruction);
      if (data.instruction !== types_js_1.TokenInstruction.CloseAccount)
        throw new errors_js_1.TokenInvalidInstructionTypeError();
      if (!account || !destination || !authority)
        throw new errors_js_1.TokenInvalidInstructionKeysError();
      return {
        programId,
        keys: {
          account,
          destination,
          authority,
          multiSigners
        },
        data
      };
    }
    exports.decodeCloseAccountInstruction = decodeCloseAccountInstruction2;
    function decodeCloseAccountInstructionUnchecked({ programId, keys: [account, destination, authority, ...multiSigners], data }) {
      return {
        programId,
        keys: {
          account,
          destination,
          authority,
          multiSigners
        },
        data: exports.closeAccountInstructionData.decode(data)
      };
    }
    exports.decodeCloseAccountInstructionUnchecked = decodeCloseAccountInstructionUnchecked;
  }
});

// ../../node_modules/@solana/spl-token/lib/cjs/actions/closeAccount.js
var require_closeAccount2 = __commonJS({
  "../../node_modules/@solana/spl-token/lib/cjs/actions/closeAccount.js"(exports) {
    "use strict";
    var __awaiter = exports && exports.__awaiter || function(thisArg, _arguments, P, generator) {
      function adopt(value) {
        return value instanceof P ? value : new P(function(resolve) {
          resolve(value);
        });
      }
      return new (P || (P = Promise))(function(resolve, reject) {
        function fulfilled(value) {
          try {
            step(generator.next(value));
          } catch (e2) {
            reject(e2);
          }
        }
        function rejected(value) {
          try {
            step(generator["throw"](value));
          } catch (e2) {
            reject(e2);
          }
        }
        function step(result) {
          result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
        }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
      });
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.closeAccount = void 0;
    var web3_js_1 = (init_index_browser_esm(), __toCommonJS(index_browser_esm_exports));
    var constants_js_1 = require_constants();
    var closeAccount_js_1 = require_closeAccount();
    var internal_js_1 = require_internal3();
    function closeAccount(connection, payer, account, destination, authority, multiSigners = [], confirmOptions, programId = constants_js_1.TOKEN_PROGRAM_ID) {
      return __awaiter(this, void 0, void 0, function* () {
        const [authorityPublicKey, signers] = (0, internal_js_1.getSigners)(authority, multiSigners);
        const transaction = new web3_js_1.Transaction().add((0, closeAccount_js_1.createCloseAccountInstruction)(account, destination, authorityPublicKey, multiSigners, programId));
        return yield (0, web3_js_1.sendAndConfirmTransaction)(connection, transaction, [payer, ...signers], confirmOptions);
      });
    }
    exports.closeAccount = closeAccount;
  }
});

// ../../node_modules/@solana/spl-token/lib/cjs/extensions/accountType.js
var require_accountType = __commonJS({
  "../../node_modules/@solana/spl-token/lib/cjs/extensions/accountType.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.ACCOUNT_TYPE_SIZE = exports.AccountType = void 0;
    var AccountType2;
    (function(AccountType3) {
      AccountType3[AccountType3["Uninitialized"] = 0] = "Uninitialized";
      AccountType3[AccountType3["Mint"] = 1] = "Mint";
      AccountType3[AccountType3["Account"] = 2] = "Account";
    })(AccountType2 || (exports.AccountType = AccountType2 = {}));
    exports.ACCOUNT_TYPE_SIZE = 1;
  }
});

// ../../node_modules/@solana/spl-token/lib/cjs/state/multisig.js
var require_multisig = __commonJS({
  "../../node_modules/@solana/spl-token/lib/cjs/state/multisig.js"(exports) {
    "use strict";
    var __awaiter = exports && exports.__awaiter || function(thisArg, _arguments, P, generator) {
      function adopt(value) {
        return value instanceof P ? value : new P(function(resolve) {
          resolve(value);
        });
      }
      return new (P || (P = Promise))(function(resolve, reject) {
        function fulfilled(value) {
          try {
            step(generator.next(value));
          } catch (e2) {
            reject(e2);
          }
        }
        function rejected(value) {
          try {
            step(generator["throw"](value));
          } catch (e2) {
            reject(e2);
          }
        }
        function step(result) {
          result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
        }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
      });
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.getMinimumBalanceForRentExemptMultisig = exports.unpackMultisig = exports.getMultisig = exports.MULTISIG_SIZE = exports.MultisigLayout = void 0;
    var buffer_layout_1 = require_Layout();
    var buffer_layout_utils_1 = require_cjs();
    var constants_js_1 = require_constants();
    var errors_js_1 = require_errors2();
    exports.MultisigLayout = (0, buffer_layout_1.struct)([
      (0, buffer_layout_1.u8)("m"),
      (0, buffer_layout_1.u8)("n"),
      (0, buffer_layout_utils_1.bool)("isInitialized"),
      (0, buffer_layout_utils_1.publicKey)("signer1"),
      (0, buffer_layout_utils_1.publicKey)("signer2"),
      (0, buffer_layout_utils_1.publicKey)("signer3"),
      (0, buffer_layout_utils_1.publicKey)("signer4"),
      (0, buffer_layout_utils_1.publicKey)("signer5"),
      (0, buffer_layout_utils_1.publicKey)("signer6"),
      (0, buffer_layout_utils_1.publicKey)("signer7"),
      (0, buffer_layout_utils_1.publicKey)("signer8"),
      (0, buffer_layout_utils_1.publicKey)("signer9"),
      (0, buffer_layout_utils_1.publicKey)("signer10"),
      (0, buffer_layout_utils_1.publicKey)("signer11")
    ]);
    exports.MULTISIG_SIZE = exports.MultisigLayout.span;
    function getMultisig(connection, address, commitment, programId = constants_js_1.TOKEN_PROGRAM_ID) {
      return __awaiter(this, void 0, void 0, function* () {
        const info = yield connection.getAccountInfo(address, commitment);
        return unpackMultisig(address, info, programId);
      });
    }
    exports.getMultisig = getMultisig;
    function unpackMultisig(address, info, programId = constants_js_1.TOKEN_PROGRAM_ID) {
      if (!info)
        throw new errors_js_1.TokenAccountNotFoundError();
      if (!info.owner.equals(programId))
        throw new errors_js_1.TokenInvalidAccountOwnerError();
      if (info.data.length != exports.MULTISIG_SIZE)
        throw new errors_js_1.TokenInvalidAccountSizeError();
      const multisig = exports.MultisigLayout.decode(info.data);
      return Object.assign({ address }, multisig);
    }
    exports.unpackMultisig = unpackMultisig;
    function getMinimumBalanceForRentExemptMultisig2(connection, commitment) {
      return __awaiter(this, void 0, void 0, function* () {
        return yield connection.getMinimumBalanceForRentExemption(exports.MULTISIG_SIZE, commitment);
      });
    }
    exports.getMinimumBalanceForRentExemptMultisig = getMinimumBalanceForRentExemptMultisig2;
  }
});

// ../../node_modules/@solana/spl-token/lib/cjs/state/account.js
var require_account = __commonJS({
  "../../node_modules/@solana/spl-token/lib/cjs/state/account.js"(exports) {
    "use strict";
    var __awaiter = exports && exports.__awaiter || function(thisArg, _arguments, P, generator) {
      function adopt(value) {
        return value instanceof P ? value : new P(function(resolve) {
          resolve(value);
        });
      }
      return new (P || (P = Promise))(function(resolve, reject) {
        function fulfilled(value) {
          try {
            step(generator.next(value));
          } catch (e2) {
            reject(e2);
          }
        }
        function rejected(value) {
          try {
            step(generator["throw"](value));
          } catch (e2) {
            reject(e2);
          }
        }
        function step(result) {
          result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
        }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
      });
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.unpackAccount = exports.getMinimumBalanceForRentExemptAccountWithExtensions = exports.getMinimumBalanceForRentExemptAccount = exports.getMultipleAccounts = exports.getAccount = exports.ACCOUNT_SIZE = exports.AccountLayout = exports.AccountState = void 0;
    var buffer_layout_1 = require_Layout();
    var buffer_layout_utils_1 = require_cjs();
    var constants_js_1 = require_constants();
    var errors_js_1 = require_errors2();
    var accountType_js_1 = require_accountType();
    var extensionType_js_1 = require_extensionType();
    var multisig_js_1 = require_multisig();
    var AccountState2;
    (function(AccountState3) {
      AccountState3[AccountState3["Uninitialized"] = 0] = "Uninitialized";
      AccountState3[AccountState3["Initialized"] = 1] = "Initialized";
      AccountState3[AccountState3["Frozen"] = 2] = "Frozen";
    })(AccountState2 || (exports.AccountState = AccountState2 = {}));
    exports.AccountLayout = (0, buffer_layout_1.struct)([
      (0, buffer_layout_utils_1.publicKey)("mint"),
      (0, buffer_layout_utils_1.publicKey)("owner"),
      (0, buffer_layout_utils_1.u64)("amount"),
      (0, buffer_layout_1.u32)("delegateOption"),
      (0, buffer_layout_utils_1.publicKey)("delegate"),
      (0, buffer_layout_1.u8)("state"),
      (0, buffer_layout_1.u32)("isNativeOption"),
      (0, buffer_layout_utils_1.u64)("isNative"),
      (0, buffer_layout_utils_1.u64)("delegatedAmount"),
      (0, buffer_layout_1.u32)("closeAuthorityOption"),
      (0, buffer_layout_utils_1.publicKey)("closeAuthority")
    ]);
    exports.ACCOUNT_SIZE = exports.AccountLayout.span;
    function getAccount2(connection, address, commitment, programId = constants_js_1.TOKEN_PROGRAM_ID) {
      return __awaiter(this, void 0, void 0, function* () {
        const info = yield connection.getAccountInfo(address, commitment);
        return unpackAccount(address, info, programId);
      });
    }
    exports.getAccount = getAccount2;
    function getMultipleAccounts(connection, addresses, commitment, programId = constants_js_1.TOKEN_PROGRAM_ID) {
      return __awaiter(this, void 0, void 0, function* () {
        const infos = yield connection.getMultipleAccountsInfo(addresses, commitment);
        return addresses.map((address, i) => unpackAccount(address, infos[i], programId));
      });
    }
    exports.getMultipleAccounts = getMultipleAccounts;
    function getMinimumBalanceForRentExemptAccount2(connection, commitment) {
      return __awaiter(this, void 0, void 0, function* () {
        return yield getMinimumBalanceForRentExemptAccountWithExtensions(connection, [], commitment);
      });
    }
    exports.getMinimumBalanceForRentExemptAccount = getMinimumBalanceForRentExemptAccount2;
    function getMinimumBalanceForRentExemptAccountWithExtensions(connection, extensions, commitment) {
      return __awaiter(this, void 0, void 0, function* () {
        const accountLen = (0, extensionType_js_1.getAccountLen)(extensions);
        return yield connection.getMinimumBalanceForRentExemption(accountLen, commitment);
      });
    }
    exports.getMinimumBalanceForRentExemptAccountWithExtensions = getMinimumBalanceForRentExemptAccountWithExtensions;
    function unpackAccount(address, info, programId = constants_js_1.TOKEN_PROGRAM_ID) {
      if (!info)
        throw new errors_js_1.TokenAccountNotFoundError();
      if (!info.owner.equals(programId))
        throw new errors_js_1.TokenInvalidAccountOwnerError();
      if (info.data.length < exports.ACCOUNT_SIZE)
        throw new errors_js_1.TokenInvalidAccountSizeError();
      const rawAccount = exports.AccountLayout.decode(info.data.slice(0, exports.ACCOUNT_SIZE));
      let tlvData = Buffer.alloc(0);
      if (info.data.length > exports.ACCOUNT_SIZE) {
        if (info.data.length === multisig_js_1.MULTISIG_SIZE)
          throw new errors_js_1.TokenInvalidAccountSizeError();
        if (info.data[exports.ACCOUNT_SIZE] != accountType_js_1.AccountType.Account)
          throw new errors_js_1.TokenInvalidAccountError();
        tlvData = info.data.slice(exports.ACCOUNT_SIZE + accountType_js_1.ACCOUNT_TYPE_SIZE);
      }
      return {
        address,
        mint: rawAccount.mint,
        owner: rawAccount.owner,
        amount: rawAccount.amount,
        delegate: rawAccount.delegateOption ? rawAccount.delegate : null,
        delegatedAmount: rawAccount.delegatedAmount,
        isInitialized: rawAccount.state !== AccountState2.Uninitialized,
        isFrozen: rawAccount.state === AccountState2.Frozen,
        isNative: !!rawAccount.isNativeOption,
        rentExemptReserve: rawAccount.isNativeOption ? rawAccount.isNative : null,
        closeAuthority: rawAccount.closeAuthorityOption ? rawAccount.closeAuthority : null,
        tlvData
      };
    }
    exports.unpackAccount = unpackAccount;
  }
});

// ../../node_modules/@solana/spl-token/lib/cjs/state/mint.js
var require_mint = __commonJS({
  "../../node_modules/@solana/spl-token/lib/cjs/state/mint.js"(exports) {
    "use strict";
    var __awaiter = exports && exports.__awaiter || function(thisArg, _arguments, P, generator) {
      function adopt(value) {
        return value instanceof P ? value : new P(function(resolve) {
          resolve(value);
        });
      }
      return new (P || (P = Promise))(function(resolve, reject) {
        function fulfilled(value) {
          try {
            step(generator.next(value));
          } catch (e2) {
            reject(e2);
          }
        }
        function rejected(value) {
          try {
            step(generator["throw"](value));
          } catch (e2) {
            reject(e2);
          }
        }
        function step(result) {
          result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
        }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
      });
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.getAssociatedTokenAddressSync = exports.getAssociatedTokenAddress = exports.getMinimumBalanceForRentExemptMintWithExtensions = exports.getMinimumBalanceForRentExemptMint = exports.unpackMint = exports.getMint = exports.MINT_SIZE = exports.MintLayout = void 0;
    var buffer_layout_1 = require_Layout();
    var buffer_layout_utils_1 = require_cjs();
    var web3_js_1 = (init_index_browser_esm(), __toCommonJS(index_browser_esm_exports));
    var constants_js_1 = require_constants();
    var errors_js_1 = require_errors2();
    var accountType_js_1 = require_accountType();
    var extensionType_js_1 = require_extensionType();
    var account_js_1 = require_account();
    var multisig_js_1 = require_multisig();
    exports.MintLayout = (0, buffer_layout_1.struct)([
      (0, buffer_layout_1.u32)("mintAuthorityOption"),
      (0, buffer_layout_utils_1.publicKey)("mintAuthority"),
      (0, buffer_layout_utils_1.u64)("supply"),
      (0, buffer_layout_1.u8)("decimals"),
      (0, buffer_layout_utils_1.bool)("isInitialized"),
      (0, buffer_layout_1.u32)("freezeAuthorityOption"),
      (0, buffer_layout_utils_1.publicKey)("freezeAuthority")
    ]);
    exports.MINT_SIZE = exports.MintLayout.span;
    function getMint2(connection, address, commitment, programId = constants_js_1.TOKEN_PROGRAM_ID) {
      return __awaiter(this, void 0, void 0, function* () {
        const info = yield connection.getAccountInfo(address, commitment);
        return unpackMint2(address, info, programId);
      });
    }
    exports.getMint = getMint2;
    function unpackMint2(address, info, programId = constants_js_1.TOKEN_PROGRAM_ID) {
      if (!info)
        throw new errors_js_1.TokenAccountNotFoundError();
      if (!info.owner.equals(programId))
        throw new errors_js_1.TokenInvalidAccountOwnerError();
      if (info.data.length < exports.MINT_SIZE)
        throw new errors_js_1.TokenInvalidAccountSizeError();
      const rawMint = exports.MintLayout.decode(info.data.slice(0, exports.MINT_SIZE));
      let tlvData = Buffer.alloc(0);
      if (info.data.length > exports.MINT_SIZE) {
        if (info.data.length <= account_js_1.ACCOUNT_SIZE)
          throw new errors_js_1.TokenInvalidAccountSizeError();
        if (info.data.length === multisig_js_1.MULTISIG_SIZE)
          throw new errors_js_1.TokenInvalidAccountSizeError();
        if (info.data[account_js_1.ACCOUNT_SIZE] != accountType_js_1.AccountType.Mint)
          throw new errors_js_1.TokenInvalidMintError();
        tlvData = info.data.slice(account_js_1.ACCOUNT_SIZE + accountType_js_1.ACCOUNT_TYPE_SIZE);
      }
      return {
        address,
        mintAuthority: rawMint.mintAuthorityOption ? rawMint.mintAuthority : null,
        supply: rawMint.supply,
        decimals: rawMint.decimals,
        isInitialized: rawMint.isInitialized,
        freezeAuthority: rawMint.freezeAuthorityOption ? rawMint.freezeAuthority : null,
        tlvData
      };
    }
    exports.unpackMint = unpackMint2;
    function getMinimumBalanceForRentExemptMint2(connection, commitment) {
      return __awaiter(this, void 0, void 0, function* () {
        return yield getMinimumBalanceForRentExemptMintWithExtensions(connection, [], commitment);
      });
    }
    exports.getMinimumBalanceForRentExemptMint = getMinimumBalanceForRentExemptMint2;
    function getMinimumBalanceForRentExemptMintWithExtensions(connection, extensions, commitment) {
      return __awaiter(this, void 0, void 0, function* () {
        const mintLen = (0, extensionType_js_1.getMintLen)(extensions);
        return yield connection.getMinimumBalanceForRentExemption(mintLen, commitment);
      });
    }
    exports.getMinimumBalanceForRentExemptMintWithExtensions = getMinimumBalanceForRentExemptMintWithExtensions;
    function getAssociatedTokenAddress(mint, owner, allowOwnerOffCurve = false, programId = constants_js_1.TOKEN_PROGRAM_ID, associatedTokenProgramId = constants_js_1.ASSOCIATED_TOKEN_PROGRAM_ID) {
      return __awaiter(this, void 0, void 0, function* () {
        if (!allowOwnerOffCurve && !web3_js_1.PublicKey.isOnCurve(owner.toBuffer()))
          throw new errors_js_1.TokenOwnerOffCurveError();
        const [address] = yield web3_js_1.PublicKey.findProgramAddress([owner.toBuffer(), programId.toBuffer(), mint.toBuffer()], associatedTokenProgramId);
        return address;
      });
    }
    exports.getAssociatedTokenAddress = getAssociatedTokenAddress;
    function getAssociatedTokenAddressSync2(mint, owner, allowOwnerOffCurve = false, programId = constants_js_1.TOKEN_PROGRAM_ID, associatedTokenProgramId = constants_js_1.ASSOCIATED_TOKEN_PROGRAM_ID) {
      if (!allowOwnerOffCurve && !web3_js_1.PublicKey.isOnCurve(owner.toBuffer()))
        throw new errors_js_1.TokenOwnerOffCurveError();
      const [address] = web3_js_1.PublicKey.findProgramAddressSync([owner.toBuffer(), programId.toBuffer(), mint.toBuffer()], associatedTokenProgramId);
      return address;
    }
    exports.getAssociatedTokenAddressSync = getAssociatedTokenAddressSync2;
  }
});

// ../../node_modules/@solana/spl-token/lib/cjs/extensions/cpiGuard/instructions.js
var require_instructions = __commonJS({
  "../../node_modules/@solana/spl-token/lib/cjs/extensions/cpiGuard/instructions.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.createDisableCpiGuardInstruction = exports.createEnableCpiGuardInstruction = exports.cpiGuardInstructionData = exports.CpiGuardInstruction = void 0;
    var buffer_layout_1 = require_Layout();
    var web3_js_1 = (init_index_browser_esm(), __toCommonJS(index_browser_esm_exports));
    var constants_js_1 = require_constants();
    var errors_js_1 = require_errors2();
    var internal_js_1 = require_internal2();
    var types_js_1 = require_types3();
    var CpiGuardInstruction2;
    (function(CpiGuardInstruction3) {
      CpiGuardInstruction3[CpiGuardInstruction3["Enable"] = 0] = "Enable";
      CpiGuardInstruction3[CpiGuardInstruction3["Disable"] = 1] = "Disable";
    })(CpiGuardInstruction2 || (exports.CpiGuardInstruction = CpiGuardInstruction2 = {}));
    exports.cpiGuardInstructionData = (0, buffer_layout_1.struct)([(0, buffer_layout_1.u8)("instruction"), (0, buffer_layout_1.u8)("cpiGuardInstruction")]);
    function createEnableCpiGuardInstruction2(account, authority, multiSigners = [], programId = constants_js_1.TOKEN_2022_PROGRAM_ID) {
      return createCpiGuardInstruction(CpiGuardInstruction2.Enable, account, authority, multiSigners, programId);
    }
    exports.createEnableCpiGuardInstruction = createEnableCpiGuardInstruction2;
    function createDisableCpiGuardInstruction2(account, authority, multiSigners = [], programId = constants_js_1.TOKEN_2022_PROGRAM_ID) {
      return createCpiGuardInstruction(CpiGuardInstruction2.Disable, account, authority, multiSigners, programId);
    }
    exports.createDisableCpiGuardInstruction = createDisableCpiGuardInstruction2;
    function createCpiGuardInstruction(cpiGuardInstruction, account, authority, multiSigners, programId) {
      if (!(0, constants_js_1.programSupportsExtensions)(programId)) {
        throw new errors_js_1.TokenUnsupportedInstructionError();
      }
      const keys = (0, internal_js_1.addSigners)([{ pubkey: account, isSigner: false, isWritable: true }], authority, multiSigners);
      const data = Buffer.alloc(exports.cpiGuardInstructionData.span);
      exports.cpiGuardInstructionData.encode({
        instruction: types_js_1.TokenInstruction.CpiGuardExtension,
        cpiGuardInstruction
      }, data);
      return new web3_js_1.TransactionInstruction({ keys, programId, data });
    }
  }
});

// ../../node_modules/@solana/spl-token/lib/cjs/extensions/cpiGuard/actions.js
var require_actions = __commonJS({
  "../../node_modules/@solana/spl-token/lib/cjs/extensions/cpiGuard/actions.js"(exports) {
    "use strict";
    var __awaiter = exports && exports.__awaiter || function(thisArg, _arguments, P, generator) {
      function adopt(value) {
        return value instanceof P ? value : new P(function(resolve) {
          resolve(value);
        });
      }
      return new (P || (P = Promise))(function(resolve, reject) {
        function fulfilled(value) {
          try {
            step(generator.next(value));
          } catch (e2) {
            reject(e2);
          }
        }
        function rejected(value) {
          try {
            step(generator["throw"](value));
          } catch (e2) {
            reject(e2);
          }
        }
        function step(result) {
          result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
        }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
      });
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.disableCpiGuard = exports.enableCpiGuard = void 0;
    var web3_js_1 = (init_index_browser_esm(), __toCommonJS(index_browser_esm_exports));
    var internal_js_1 = require_internal3();
    var constants_js_1 = require_constants();
    var instructions_js_1 = require_instructions();
    function enableCpiGuard(connection, payer, account, owner, multiSigners = [], confirmOptions, programId = constants_js_1.TOKEN_2022_PROGRAM_ID) {
      return __awaiter(this, void 0, void 0, function* () {
        const [ownerPublicKey, signers] = (0, internal_js_1.getSigners)(owner, multiSigners);
        const transaction = new web3_js_1.Transaction().add((0, instructions_js_1.createEnableCpiGuardInstruction)(account, ownerPublicKey, signers, programId));
        return yield (0, web3_js_1.sendAndConfirmTransaction)(connection, transaction, [payer, ...signers], confirmOptions);
      });
    }
    exports.enableCpiGuard = enableCpiGuard;
    function disableCpiGuard(connection, payer, account, owner, multiSigners = [], confirmOptions, programId = constants_js_1.TOKEN_2022_PROGRAM_ID) {
      return __awaiter(this, void 0, void 0, function* () {
        const [ownerPublicKey, signers] = (0, internal_js_1.getSigners)(owner, multiSigners);
        const transaction = new web3_js_1.Transaction().add((0, instructions_js_1.createDisableCpiGuardInstruction)(account, ownerPublicKey, signers, programId));
        return yield (0, web3_js_1.sendAndConfirmTransaction)(connection, transaction, [payer, ...signers], confirmOptions);
      });
    }
    exports.disableCpiGuard = disableCpiGuard;
  }
});

// ../../node_modules/@solana/spl-token/lib/cjs/extensions/cpiGuard/state.js
var require_state = __commonJS({
  "../../node_modules/@solana/spl-token/lib/cjs/extensions/cpiGuard/state.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.getCpiGuard = exports.CPI_GUARD_SIZE = exports.CpiGuardLayout = void 0;
    var buffer_layout_1 = require_Layout();
    var buffer_layout_utils_1 = require_cjs();
    var extensionType_js_1 = require_extensionType();
    exports.CpiGuardLayout = (0, buffer_layout_1.struct)([(0, buffer_layout_utils_1.bool)("lockCpi")]);
    exports.CPI_GUARD_SIZE = exports.CpiGuardLayout.span;
    function getCpiGuard(account) {
      const extensionData = (0, extensionType_js_1.getExtensionData)(extensionType_js_1.ExtensionType.CpiGuard, account.tlvData);
      if (extensionData !== null) {
        return exports.CpiGuardLayout.decode(extensionData);
      } else {
        return null;
      }
    }
    exports.getCpiGuard = getCpiGuard;
  }
});

// ../../node_modules/@solana/spl-token/lib/cjs/extensions/cpiGuard/index.js
var require_cpiGuard = __commonJS({
  "../../node_modules/@solana/spl-token/lib/cjs/extensions/cpiGuard/index.js"(exports) {
    "use strict";
    var __createBinding = exports && exports.__createBinding || (Object.create ? function(o2, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      var desc = Object.getOwnPropertyDescriptor(m, k);
      if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m[k];
        } };
      }
      Object.defineProperty(o2, k2, desc);
    } : function(o2, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      o2[k2] = m[k];
    });
    var __exportStar = exports && exports.__exportStar || function(m, exports2) {
      for (var p in m)
        if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports2, p))
          __createBinding(exports2, m, p);
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    __exportStar(require_actions(), exports);
    __exportStar(require_instructions(), exports);
    __exportStar(require_state(), exports);
  }
});

// ../../node_modules/@solana/spl-token/lib/cjs/extensions/defaultAccountState/instructions.js
var require_instructions2 = __commonJS({
  "../../node_modules/@solana/spl-token/lib/cjs/extensions/defaultAccountState/instructions.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.createUpdateDefaultAccountStateInstruction = exports.createInitializeDefaultAccountStateInstruction = exports.defaultAccountStateInstructionData = exports.DefaultAccountStateInstruction = void 0;
    var buffer_layout_1 = require_Layout();
    var web3_js_1 = (init_index_browser_esm(), __toCommonJS(index_browser_esm_exports));
    var constants_js_1 = require_constants();
    var errors_js_1 = require_errors2();
    var internal_js_1 = require_internal2();
    var types_js_1 = require_types3();
    var DefaultAccountStateInstruction2;
    (function(DefaultAccountStateInstruction3) {
      DefaultAccountStateInstruction3[DefaultAccountStateInstruction3["Initialize"] = 0] = "Initialize";
      DefaultAccountStateInstruction3[DefaultAccountStateInstruction3["Update"] = 1] = "Update";
    })(DefaultAccountStateInstruction2 || (exports.DefaultAccountStateInstruction = DefaultAccountStateInstruction2 = {}));
    exports.defaultAccountStateInstructionData = (0, buffer_layout_1.struct)([
      (0, buffer_layout_1.u8)("instruction"),
      (0, buffer_layout_1.u8)("defaultAccountStateInstruction"),
      (0, buffer_layout_1.u8)("accountState")
    ]);
    function createInitializeDefaultAccountStateInstruction2(mint, accountState, programId = constants_js_1.TOKEN_2022_PROGRAM_ID) {
      if (!(0, constants_js_1.programSupportsExtensions)(programId)) {
        throw new errors_js_1.TokenUnsupportedInstructionError();
      }
      const keys = [{ pubkey: mint, isSigner: false, isWritable: true }];
      const data = Buffer.alloc(exports.defaultAccountStateInstructionData.span);
      exports.defaultAccountStateInstructionData.encode({
        instruction: types_js_1.TokenInstruction.DefaultAccountStateExtension,
        defaultAccountStateInstruction: DefaultAccountStateInstruction2.Initialize,
        accountState
      }, data);
      return new web3_js_1.TransactionInstruction({ keys, programId, data });
    }
    exports.createInitializeDefaultAccountStateInstruction = createInitializeDefaultAccountStateInstruction2;
    function createUpdateDefaultAccountStateInstruction2(mint, accountState, freezeAuthority, multiSigners = [], programId = constants_js_1.TOKEN_2022_PROGRAM_ID) {
      if (!(0, constants_js_1.programSupportsExtensions)(programId)) {
        throw new errors_js_1.TokenUnsupportedInstructionError();
      }
      const keys = (0, internal_js_1.addSigners)([{ pubkey: mint, isSigner: false, isWritable: true }], freezeAuthority, multiSigners);
      const data = Buffer.alloc(exports.defaultAccountStateInstructionData.span);
      exports.defaultAccountStateInstructionData.encode({
        instruction: types_js_1.TokenInstruction.DefaultAccountStateExtension,
        defaultAccountStateInstruction: DefaultAccountStateInstruction2.Update,
        accountState
      }, data);
      return new web3_js_1.TransactionInstruction({ keys, programId, data });
    }
    exports.createUpdateDefaultAccountStateInstruction = createUpdateDefaultAccountStateInstruction2;
  }
});

// ../../node_modules/@solana/spl-token/lib/cjs/extensions/defaultAccountState/actions.js
var require_actions2 = __commonJS({
  "../../node_modules/@solana/spl-token/lib/cjs/extensions/defaultAccountState/actions.js"(exports) {
    "use strict";
    var __awaiter = exports && exports.__awaiter || function(thisArg, _arguments, P, generator) {
      function adopt(value) {
        return value instanceof P ? value : new P(function(resolve) {
          resolve(value);
        });
      }
      return new (P || (P = Promise))(function(resolve, reject) {
        function fulfilled(value) {
          try {
            step(generator.next(value));
          } catch (e2) {
            reject(e2);
          }
        }
        function rejected(value) {
          try {
            step(generator["throw"](value));
          } catch (e2) {
            reject(e2);
          }
        }
        function step(result) {
          result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
        }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
      });
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.updateDefaultAccountState = exports.initializeDefaultAccountState = void 0;
    var web3_js_1 = (init_index_browser_esm(), __toCommonJS(index_browser_esm_exports));
    var internal_js_1 = require_internal3();
    var constants_js_1 = require_constants();
    var instructions_js_1 = require_instructions2();
    function initializeDefaultAccountState(connection, payer, mint, state, confirmOptions, programId = constants_js_1.TOKEN_2022_PROGRAM_ID) {
      return __awaiter(this, void 0, void 0, function* () {
        const transaction = new web3_js_1.Transaction().add((0, instructions_js_1.createInitializeDefaultAccountStateInstruction)(mint, state, programId));
        return yield (0, web3_js_1.sendAndConfirmTransaction)(connection, transaction, [payer], confirmOptions);
      });
    }
    exports.initializeDefaultAccountState = initializeDefaultAccountState;
    function updateDefaultAccountState(connection, payer, mint, state, freezeAuthority, multiSigners = [], confirmOptions, programId = constants_js_1.TOKEN_2022_PROGRAM_ID) {
      return __awaiter(this, void 0, void 0, function* () {
        const [freezeAuthorityPublicKey, signers] = (0, internal_js_1.getSigners)(freezeAuthority, multiSigners);
        const transaction = new web3_js_1.Transaction().add((0, instructions_js_1.createUpdateDefaultAccountStateInstruction)(mint, state, freezeAuthorityPublicKey, signers, programId));
        return yield (0, web3_js_1.sendAndConfirmTransaction)(connection, transaction, [payer, ...signers], confirmOptions);
      });
    }
    exports.updateDefaultAccountState = updateDefaultAccountState;
  }
});

// ../../node_modules/@solana/spl-token/lib/cjs/extensions/defaultAccountState/state.js
var require_state2 = __commonJS({
  "../../node_modules/@solana/spl-token/lib/cjs/extensions/defaultAccountState/state.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.getDefaultAccountState = exports.DEFAULT_ACCOUNT_STATE_SIZE = exports.DefaultAccountStateLayout = void 0;
    var buffer_layout_1 = require_Layout();
    var extensionType_js_1 = require_extensionType();
    exports.DefaultAccountStateLayout = (0, buffer_layout_1.struct)([(0, buffer_layout_1.u8)("state")]);
    exports.DEFAULT_ACCOUNT_STATE_SIZE = exports.DefaultAccountStateLayout.span;
    function getDefaultAccountState(mint) {
      const extensionData = (0, extensionType_js_1.getExtensionData)(extensionType_js_1.ExtensionType.DefaultAccountState, mint.tlvData);
      if (extensionData !== null) {
        return exports.DefaultAccountStateLayout.decode(extensionData);
      } else {
        return null;
      }
    }
    exports.getDefaultAccountState = getDefaultAccountState;
  }
});

// ../../node_modules/@solana/spl-token/lib/cjs/extensions/defaultAccountState/index.js
var require_defaultAccountState = __commonJS({
  "../../node_modules/@solana/spl-token/lib/cjs/extensions/defaultAccountState/index.js"(exports) {
    "use strict";
    var __createBinding = exports && exports.__createBinding || (Object.create ? function(o2, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      var desc = Object.getOwnPropertyDescriptor(m, k);
      if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m[k];
        } };
      }
      Object.defineProperty(o2, k2, desc);
    } : function(o2, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      o2[k2] = m[k];
    });
    var __exportStar = exports && exports.__exportStar || function(m, exports2) {
      for (var p in m)
        if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports2, p))
          __createBinding(exports2, m, p);
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    __exportStar(require_actions2(), exports);
    __exportStar(require_instructions2(), exports);
    __exportStar(require_state2(), exports);
  }
});

// ../../node_modules/@solana/spl-token/lib/cjs/extensions/immutableOwner.js
var require_immutableOwner = __commonJS({
  "../../node_modules/@solana/spl-token/lib/cjs/extensions/immutableOwner.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.getImmutableOwner = exports.IMMUTABLE_OWNER_SIZE = exports.ImmutableOwnerLayout = void 0;
    var buffer_layout_1 = require_Layout();
    var extensionType_js_1 = require_extensionType();
    exports.ImmutableOwnerLayout = (0, buffer_layout_1.struct)([]);
    exports.IMMUTABLE_OWNER_SIZE = exports.ImmutableOwnerLayout.span;
    function getImmutableOwner(account) {
      const extensionData = (0, extensionType_js_1.getExtensionData)(extensionType_js_1.ExtensionType.ImmutableOwner, account.tlvData);
      if (extensionData !== null) {
        return exports.ImmutableOwnerLayout.decode(extensionData);
      } else {
        return null;
      }
    }
    exports.getImmutableOwner = getImmutableOwner;
  }
});

// ../../node_modules/@solana/spl-token/lib/cjs/extensions/interestBearingMint/state.js
var require_state3 = __commonJS({
  "../../node_modules/@solana/spl-token/lib/cjs/extensions/interestBearingMint/state.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.getInterestBearingMintConfigState = exports.INTEREST_BEARING_MINT_CONFIG_STATE_SIZE = exports.InterestBearingMintConfigStateLayout = void 0;
    var buffer_layout_1 = require_Layout();
    var buffer_layout_utils_1 = require_cjs();
    var extensionType_js_1 = require_extensionType();
    exports.InterestBearingMintConfigStateLayout = (0, buffer_layout_1.struct)([
      (0, buffer_layout_utils_1.publicKey)("rateAuthority"),
      (0, buffer_layout_1.ns64)("initializationTimestamp"),
      (0, buffer_layout_1.s16)("preUpdateAverageRate"),
      (0, buffer_layout_1.ns64)("lastUpdateTimestamp"),
      (0, buffer_layout_1.s16)("currentRate")
    ]);
    exports.INTEREST_BEARING_MINT_CONFIG_STATE_SIZE = exports.InterestBearingMintConfigStateLayout.span;
    function getInterestBearingMintConfigState(mint) {
      const extensionData = (0, extensionType_js_1.getExtensionData)(extensionType_js_1.ExtensionType.InterestBearingConfig, mint.tlvData);
      if (extensionData !== null) {
        return exports.InterestBearingMintConfigStateLayout.decode(extensionData);
      }
      return null;
    }
    exports.getInterestBearingMintConfigState = getInterestBearingMintConfigState;
  }
});

// ../../node_modules/@solana/spl-token/lib/cjs/extensions/memoTransfer/instructions.js
var require_instructions3 = __commonJS({
  "../../node_modules/@solana/spl-token/lib/cjs/extensions/memoTransfer/instructions.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.createDisableRequiredMemoTransfersInstruction = exports.createEnableRequiredMemoTransfersInstruction = exports.memoTransferInstructionData = exports.MemoTransferInstruction = void 0;
    var buffer_layout_1 = require_Layout();
    var web3_js_1 = (init_index_browser_esm(), __toCommonJS(index_browser_esm_exports));
    var constants_js_1 = require_constants();
    var errors_js_1 = require_errors2();
    var internal_js_1 = require_internal2();
    var types_js_1 = require_types3();
    var MemoTransferInstruction2;
    (function(MemoTransferInstruction3) {
      MemoTransferInstruction3[MemoTransferInstruction3["Enable"] = 0] = "Enable";
      MemoTransferInstruction3[MemoTransferInstruction3["Disable"] = 1] = "Disable";
    })(MemoTransferInstruction2 || (exports.MemoTransferInstruction = MemoTransferInstruction2 = {}));
    exports.memoTransferInstructionData = (0, buffer_layout_1.struct)([
      (0, buffer_layout_1.u8)("instruction"),
      (0, buffer_layout_1.u8)("memoTransferInstruction")
    ]);
    function createEnableRequiredMemoTransfersInstruction2(account, authority, multiSigners = [], programId = constants_js_1.TOKEN_2022_PROGRAM_ID) {
      return createMemoTransferInstruction(MemoTransferInstruction2.Enable, account, authority, multiSigners, programId);
    }
    exports.createEnableRequiredMemoTransfersInstruction = createEnableRequiredMemoTransfersInstruction2;
    function createDisableRequiredMemoTransfersInstruction2(account, authority, multiSigners = [], programId = constants_js_1.TOKEN_2022_PROGRAM_ID) {
      return createMemoTransferInstruction(MemoTransferInstruction2.Disable, account, authority, multiSigners, programId);
    }
    exports.createDisableRequiredMemoTransfersInstruction = createDisableRequiredMemoTransfersInstruction2;
    function createMemoTransferInstruction(memoTransferInstruction, account, authority, multiSigners, programId) {
      if (!(0, constants_js_1.programSupportsExtensions)(programId)) {
        throw new errors_js_1.TokenUnsupportedInstructionError();
      }
      const keys = (0, internal_js_1.addSigners)([{ pubkey: account, isSigner: false, isWritable: true }], authority, multiSigners);
      const data = Buffer.alloc(exports.memoTransferInstructionData.span);
      exports.memoTransferInstructionData.encode({
        instruction: types_js_1.TokenInstruction.MemoTransferExtension,
        memoTransferInstruction
      }, data);
      return new web3_js_1.TransactionInstruction({ keys, programId, data });
    }
  }
});

// ../../node_modules/@solana/spl-token/lib/cjs/extensions/memoTransfer/actions.js
var require_actions3 = __commonJS({
  "../../node_modules/@solana/spl-token/lib/cjs/extensions/memoTransfer/actions.js"(exports) {
    "use strict";
    var __awaiter = exports && exports.__awaiter || function(thisArg, _arguments, P, generator) {
      function adopt(value) {
        return value instanceof P ? value : new P(function(resolve) {
          resolve(value);
        });
      }
      return new (P || (P = Promise))(function(resolve, reject) {
        function fulfilled(value) {
          try {
            step(generator.next(value));
          } catch (e2) {
            reject(e2);
          }
        }
        function rejected(value) {
          try {
            step(generator["throw"](value));
          } catch (e2) {
            reject(e2);
          }
        }
        function step(result) {
          result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
        }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
      });
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.disableRequiredMemoTransfers = exports.enableRequiredMemoTransfers = void 0;
    var web3_js_1 = (init_index_browser_esm(), __toCommonJS(index_browser_esm_exports));
    var internal_js_1 = require_internal3();
    var constants_js_1 = require_constants();
    var instructions_js_1 = require_instructions3();
    function enableRequiredMemoTransfers(connection, payer, account, owner, multiSigners = [], confirmOptions, programId = constants_js_1.TOKEN_2022_PROGRAM_ID) {
      return __awaiter(this, void 0, void 0, function* () {
        const [ownerPublicKey, signers] = (0, internal_js_1.getSigners)(owner, multiSigners);
        const transaction = new web3_js_1.Transaction().add((0, instructions_js_1.createEnableRequiredMemoTransfersInstruction)(account, ownerPublicKey, signers, programId));
        return yield (0, web3_js_1.sendAndConfirmTransaction)(connection, transaction, [payer, ...signers], confirmOptions);
      });
    }
    exports.enableRequiredMemoTransfers = enableRequiredMemoTransfers;
    function disableRequiredMemoTransfers(connection, payer, account, owner, multiSigners = [], confirmOptions, programId = constants_js_1.TOKEN_2022_PROGRAM_ID) {
      return __awaiter(this, void 0, void 0, function* () {
        const [ownerPublicKey, signers] = (0, internal_js_1.getSigners)(owner, multiSigners);
        const transaction = new web3_js_1.Transaction().add((0, instructions_js_1.createDisableRequiredMemoTransfersInstruction)(account, ownerPublicKey, signers, programId));
        return yield (0, web3_js_1.sendAndConfirmTransaction)(connection, transaction, [payer, ...signers], confirmOptions);
      });
    }
    exports.disableRequiredMemoTransfers = disableRequiredMemoTransfers;
  }
});

// ../../node_modules/@solana/spl-token/lib/cjs/extensions/memoTransfer/state.js
var require_state4 = __commonJS({
  "../../node_modules/@solana/spl-token/lib/cjs/extensions/memoTransfer/state.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.getMemoTransfer = exports.MEMO_TRANSFER_SIZE = exports.MemoTransferLayout = void 0;
    var buffer_layout_1 = require_Layout();
    var buffer_layout_utils_1 = require_cjs();
    var extensionType_js_1 = require_extensionType();
    exports.MemoTransferLayout = (0, buffer_layout_1.struct)([(0, buffer_layout_utils_1.bool)("requireIncomingTransferMemos")]);
    exports.MEMO_TRANSFER_SIZE = exports.MemoTransferLayout.span;
    function getMemoTransfer(account) {
      const extensionData = (0, extensionType_js_1.getExtensionData)(extensionType_js_1.ExtensionType.MemoTransfer, account.tlvData);
      if (extensionData !== null) {
        return exports.MemoTransferLayout.decode(extensionData);
      } else {
        return null;
      }
    }
    exports.getMemoTransfer = getMemoTransfer;
  }
});

// ../../node_modules/@solana/spl-token/lib/cjs/extensions/memoTransfer/index.js
var require_memoTransfer = __commonJS({
  "../../node_modules/@solana/spl-token/lib/cjs/extensions/memoTransfer/index.js"(exports) {
    "use strict";
    var __createBinding = exports && exports.__createBinding || (Object.create ? function(o2, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      var desc = Object.getOwnPropertyDescriptor(m, k);
      if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m[k];
        } };
      }
      Object.defineProperty(o2, k2, desc);
    } : function(o2, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      o2[k2] = m[k];
    });
    var __exportStar = exports && exports.__exportStar || function(m, exports2) {
      for (var p in m)
        if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports2, p))
          __createBinding(exports2, m, p);
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    __exportStar(require_actions3(), exports);
    __exportStar(require_instructions3(), exports);
    __exportStar(require_state4(), exports);
  }
});

// ../../node_modules/@solana/spl-token/lib/cjs/extensions/metadataPointer/state.js
var require_state5 = __commonJS({
  "../../node_modules/@solana/spl-token/lib/cjs/extensions/metadataPointer/state.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.getMetadataPointerState = exports.METADATA_POINTER_SIZE = exports.MetadataPointerLayout = void 0;
    var buffer_layout_1 = require_Layout();
    var buffer_layout_utils_1 = require_cjs();
    var web3_js_1 = (init_index_browser_esm(), __toCommonJS(index_browser_esm_exports));
    var extensionType_js_1 = require_extensionType();
    exports.MetadataPointerLayout = (0, buffer_layout_1.struct)([
      (0, buffer_layout_utils_1.publicKey)("authority"),
      (0, buffer_layout_utils_1.publicKey)("metadataAddress")
    ]);
    exports.METADATA_POINTER_SIZE = exports.MetadataPointerLayout.span;
    function getMetadataPointerState(mint) {
      const extensionData = (0, extensionType_js_1.getExtensionData)(extensionType_js_1.ExtensionType.MetadataPointer, mint.tlvData);
      if (extensionData !== null) {
        const { authority, metadataAddress } = exports.MetadataPointerLayout.decode(extensionData);
        return {
          authority: authority.equals(web3_js_1.PublicKey.default) ? null : authority,
          metadataAddress: metadataAddress.equals(web3_js_1.PublicKey.default) ? null : metadataAddress
        };
      } else {
        return null;
      }
    }
    exports.getMetadataPointerState = getMetadataPointerState;
  }
});

// ../../node_modules/@solana/spl-token/lib/cjs/extensions/mintCloseAuthority.js
var require_mintCloseAuthority = __commonJS({
  "../../node_modules/@solana/spl-token/lib/cjs/extensions/mintCloseAuthority.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.getMintCloseAuthority = exports.MINT_CLOSE_AUTHORITY_SIZE = exports.MintCloseAuthorityLayout = void 0;
    var buffer_layout_1 = require_Layout();
    var buffer_layout_utils_1 = require_cjs();
    var extensionType_js_1 = require_extensionType();
    exports.MintCloseAuthorityLayout = (0, buffer_layout_1.struct)([(0, buffer_layout_utils_1.publicKey)("closeAuthority")]);
    exports.MINT_CLOSE_AUTHORITY_SIZE = exports.MintCloseAuthorityLayout.span;
    function getMintCloseAuthority(mint) {
      const extensionData = (0, extensionType_js_1.getExtensionData)(extensionType_js_1.ExtensionType.MintCloseAuthority, mint.tlvData);
      if (extensionData !== null) {
        return exports.MintCloseAuthorityLayout.decode(extensionData);
      } else {
        return null;
      }
    }
    exports.getMintCloseAuthority = getMintCloseAuthority;
  }
});

// ../../node_modules/@solana/spl-token/lib/cjs/extensions/nonTransferable.js
var require_nonTransferable = __commonJS({
  "../../node_modules/@solana/spl-token/lib/cjs/extensions/nonTransferable.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.getNonTransferableAccount = exports.getNonTransferable = exports.NON_TRANSFERABLE_ACCOUNT_SIZE = exports.NON_TRANSFERABLE_SIZE = exports.NonTransferableLayout = void 0;
    var buffer_layout_1 = require_Layout();
    var extensionType_js_1 = require_extensionType();
    exports.NonTransferableLayout = (0, buffer_layout_1.struct)([]);
    exports.NON_TRANSFERABLE_SIZE = exports.NonTransferableLayout.span;
    exports.NON_TRANSFERABLE_ACCOUNT_SIZE = exports.NonTransferableLayout.span;
    function getNonTransferable(mint) {
      const extensionData = (0, extensionType_js_1.getExtensionData)(extensionType_js_1.ExtensionType.NonTransferable, mint.tlvData);
      if (extensionData !== null) {
        return exports.NonTransferableLayout.decode(extensionData);
      } else {
        return null;
      }
    }
    exports.getNonTransferable = getNonTransferable;
    function getNonTransferableAccount(account) {
      const extensionData = (0, extensionType_js_1.getExtensionData)(extensionType_js_1.ExtensionType.NonTransferableAccount, account.tlvData);
      if (extensionData !== null) {
        return exports.NonTransferableLayout.decode(extensionData);
      } else {
        return null;
      }
    }
    exports.getNonTransferableAccount = getNonTransferableAccount;
  }
});

// ../../node_modules/@solana/spl-token/lib/cjs/extensions/permanentDelegate.js
var require_permanentDelegate = __commonJS({
  "../../node_modules/@solana/spl-token/lib/cjs/extensions/permanentDelegate.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.getPermanentDelegate = exports.PERMANENT_DELEGATE_SIZE = exports.PermanentDelegateLayout = void 0;
    var buffer_layout_1 = require_Layout();
    var buffer_layout_utils_1 = require_cjs();
    var extensionType_js_1 = require_extensionType();
    exports.PermanentDelegateLayout = (0, buffer_layout_1.struct)([(0, buffer_layout_utils_1.publicKey)("delegate")]);
    exports.PERMANENT_DELEGATE_SIZE = exports.PermanentDelegateLayout.span;
    function getPermanentDelegate(mint) {
      const extensionData = (0, extensionType_js_1.getExtensionData)(extensionType_js_1.ExtensionType.PermanentDelegate, mint.tlvData);
      if (extensionData !== null) {
        return exports.PermanentDelegateLayout.decode(extensionData);
      } else {
        return null;
      }
    }
    exports.getPermanentDelegate = getPermanentDelegate;
  }
});

// ../../node_modules/@solana/spl-token/lib/cjs/extensions/transferFee/instructions.js
var require_instructions4 = __commonJS({
  "../../node_modules/@solana/spl-token/lib/cjs/extensions/transferFee/instructions.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.decodeHarvestWithheldTokensToMintInstructionUnchecked = exports.decodeHarvestWithheldTokensToMintInstruction = exports.createHarvestWithheldTokensToMintInstruction = exports.harvestWithheldTokensToMintInstructionData = exports.decodeWithdrawWithheldTokensFromAccountsInstructionUnchecked = exports.decodeWithdrawWithheldTokensFromAccountsInstruction = exports.createWithdrawWithheldTokensFromAccountsInstruction = exports.withdrawWithheldTokensFromAccountsInstructionData = exports.decodeWithdrawWithheldTokensFromMintInstructionUnchecked = exports.decodeWithdrawWithheldTokensFromMintInstruction = exports.createWithdrawWithheldTokensFromMintInstruction = exports.withdrawWithheldTokensFromMintInstructionData = exports.decodeTransferCheckedWithFeeInstructionUnchecked = exports.decodeTransferCheckedWithFeeInstruction = exports.createTransferCheckedWithFeeInstruction = exports.transferCheckedWithFeeInstructionData = exports.decodeInitializeTransferFeeConfigInstructionUnchecked = exports.decodeInitializeTransferFeeConfigInstruction = exports.createInitializeTransferFeeConfigInstruction = exports.initializeTransferFeeConfigInstructionData = exports.TransferFeeInstruction = void 0;
    var buffer_layout_1 = require_Layout();
    var buffer_layout_utils_1 = require_cjs();
    var web3_js_1 = (init_index_browser_esm(), __toCommonJS(index_browser_esm_exports));
    var constants_js_1 = require_constants();
    var errors_js_1 = require_errors2();
    var internal_js_1 = require_internal2();
    var types_js_1 = require_types3();
    var TransferFeeInstruction2;
    (function(TransferFeeInstruction3) {
      TransferFeeInstruction3[TransferFeeInstruction3["InitializeTransferFeeConfig"] = 0] = "InitializeTransferFeeConfig";
      TransferFeeInstruction3[TransferFeeInstruction3["TransferCheckedWithFee"] = 1] = "TransferCheckedWithFee";
      TransferFeeInstruction3[TransferFeeInstruction3["WithdrawWithheldTokensFromMint"] = 2] = "WithdrawWithheldTokensFromMint";
      TransferFeeInstruction3[TransferFeeInstruction3["WithdrawWithheldTokensFromAccounts"] = 3] = "WithdrawWithheldTokensFromAccounts";
      TransferFeeInstruction3[TransferFeeInstruction3["HarvestWithheldTokensToMint"] = 4] = "HarvestWithheldTokensToMint";
      TransferFeeInstruction3[TransferFeeInstruction3["SetTransferFee"] = 5] = "SetTransferFee";
    })(TransferFeeInstruction2 || (exports.TransferFeeInstruction = TransferFeeInstruction2 = {}));
    exports.initializeTransferFeeConfigInstructionData = (0, buffer_layout_1.struct)([
      (0, buffer_layout_1.u8)("instruction"),
      (0, buffer_layout_1.u8)("transferFeeInstruction"),
      (0, buffer_layout_1.u8)("transferFeeConfigAuthorityOption"),
      (0, buffer_layout_utils_1.publicKey)("transferFeeConfigAuthority"),
      (0, buffer_layout_1.u8)("withdrawWithheldAuthorityOption"),
      (0, buffer_layout_utils_1.publicKey)("withdrawWithheldAuthority"),
      (0, buffer_layout_1.u16)("transferFeeBasisPoints"),
      (0, buffer_layout_utils_1.u64)("maximumFee")
    ]);
    function createInitializeTransferFeeConfigInstruction(mint, transferFeeConfigAuthority, withdrawWithheldAuthority, transferFeeBasisPoints, maximumFee, programId = constants_js_1.TOKEN_2022_PROGRAM_ID) {
      if (!(0, constants_js_1.programSupportsExtensions)(programId)) {
        throw new errors_js_1.TokenUnsupportedInstructionError();
      }
      const keys = [{ pubkey: mint, isSigner: false, isWritable: true }];
      const data = Buffer.alloc(exports.initializeTransferFeeConfigInstructionData.span);
      exports.initializeTransferFeeConfigInstructionData.encode({
        instruction: types_js_1.TokenInstruction.TransferFeeExtension,
        transferFeeInstruction: TransferFeeInstruction2.InitializeTransferFeeConfig,
        transferFeeConfigAuthorityOption: transferFeeConfigAuthority ? 1 : 0,
        transferFeeConfigAuthority: transferFeeConfigAuthority || new web3_js_1.PublicKey(0),
        withdrawWithheldAuthorityOption: withdrawWithheldAuthority ? 1 : 0,
        withdrawWithheldAuthority: withdrawWithheldAuthority || new web3_js_1.PublicKey(0),
        transferFeeBasisPoints,
        maximumFee
      }, data);
      return new web3_js_1.TransactionInstruction({ keys, programId, data });
    }
    exports.createInitializeTransferFeeConfigInstruction = createInitializeTransferFeeConfigInstruction;
    function decodeInitializeTransferFeeConfigInstruction(instruction, programId) {
      if (!instruction.programId.equals(programId))
        throw new errors_js_1.TokenInvalidInstructionProgramError();
      if (instruction.data.length !== exports.initializeTransferFeeConfigInstructionData.span)
        throw new errors_js_1.TokenInvalidInstructionDataError();
      const { keys: { mint }, data } = decodeInitializeTransferFeeConfigInstructionUnchecked(instruction);
      if (data.instruction !== types_js_1.TokenInstruction.TransferFeeExtension || data.transferFeeInstruction !== TransferFeeInstruction2.InitializeTransferFeeConfig)
        throw new errors_js_1.TokenInvalidInstructionTypeError();
      if (!mint)
        throw new errors_js_1.TokenInvalidInstructionKeysError();
      return {
        programId,
        keys: {
          mint
        },
        data
      };
    }
    exports.decodeInitializeTransferFeeConfigInstruction = decodeInitializeTransferFeeConfigInstruction;
    function decodeInitializeTransferFeeConfigInstructionUnchecked({ programId, keys: [mint], data }) {
      const { instruction, transferFeeInstruction, transferFeeConfigAuthorityOption, transferFeeConfigAuthority, withdrawWithheldAuthorityOption, withdrawWithheldAuthority, transferFeeBasisPoints, maximumFee } = exports.initializeTransferFeeConfigInstructionData.decode(data);
      return {
        programId,
        keys: {
          mint
        },
        data: {
          instruction,
          transferFeeInstruction,
          transferFeeConfigAuthority: transferFeeConfigAuthorityOption ? transferFeeConfigAuthority : null,
          withdrawWithheldAuthority: withdrawWithheldAuthorityOption ? withdrawWithheldAuthority : null,
          transferFeeBasisPoints,
          maximumFee
        }
      };
    }
    exports.decodeInitializeTransferFeeConfigInstructionUnchecked = decodeInitializeTransferFeeConfigInstructionUnchecked;
    exports.transferCheckedWithFeeInstructionData = (0, buffer_layout_1.struct)([
      (0, buffer_layout_1.u8)("instruction"),
      (0, buffer_layout_1.u8)("transferFeeInstruction"),
      (0, buffer_layout_utils_1.u64)("amount"),
      (0, buffer_layout_1.u8)("decimals"),
      (0, buffer_layout_utils_1.u64)("fee")
    ]);
    function createTransferCheckedWithFeeInstruction2(source, mint, destination, authority, amount2, decimals, fee, multiSigners = [], programId = constants_js_1.TOKEN_2022_PROGRAM_ID) {
      if (!(0, constants_js_1.programSupportsExtensions)(programId)) {
        throw new errors_js_1.TokenUnsupportedInstructionError();
      }
      const data = Buffer.alloc(exports.transferCheckedWithFeeInstructionData.span);
      exports.transferCheckedWithFeeInstructionData.encode({
        instruction: types_js_1.TokenInstruction.TransferFeeExtension,
        transferFeeInstruction: TransferFeeInstruction2.TransferCheckedWithFee,
        amount: amount2,
        decimals,
        fee
      }, data);
      const keys = (0, internal_js_1.addSigners)([
        { pubkey: source, isSigner: false, isWritable: true },
        { pubkey: mint, isSigner: false, isWritable: false },
        { pubkey: destination, isSigner: false, isWritable: true }
      ], authority, multiSigners);
      return new web3_js_1.TransactionInstruction({ keys, programId, data });
    }
    exports.createTransferCheckedWithFeeInstruction = createTransferCheckedWithFeeInstruction2;
    function decodeTransferCheckedWithFeeInstruction(instruction, programId) {
      if (!instruction.programId.equals(programId))
        throw new errors_js_1.TokenInvalidInstructionProgramError();
      if (instruction.data.length !== exports.transferCheckedWithFeeInstructionData.span)
        throw new errors_js_1.TokenInvalidInstructionDataError();
      const { keys: { source, mint, destination, authority, signers }, data } = decodeTransferCheckedWithFeeInstructionUnchecked(instruction);
      if (data.instruction !== types_js_1.TokenInstruction.TransferFeeExtension || data.transferFeeInstruction !== TransferFeeInstruction2.TransferCheckedWithFee)
        throw new errors_js_1.TokenInvalidInstructionTypeError();
      if (!mint)
        throw new errors_js_1.TokenInvalidInstructionKeysError();
      return {
        programId,
        keys: {
          source,
          mint,
          destination,
          authority,
          signers: signers ? signers : null
        },
        data
      };
    }
    exports.decodeTransferCheckedWithFeeInstruction = decodeTransferCheckedWithFeeInstruction;
    function decodeTransferCheckedWithFeeInstructionUnchecked({ programId, keys: [source, mint, destination, authority, ...signers], data }) {
      const { instruction, transferFeeInstruction, amount: amount2, decimals, fee } = exports.transferCheckedWithFeeInstructionData.decode(data);
      return {
        programId,
        keys: {
          source,
          mint,
          destination,
          authority,
          signers
        },
        data: {
          instruction,
          transferFeeInstruction,
          amount: amount2,
          decimals,
          fee
        }
      };
    }
    exports.decodeTransferCheckedWithFeeInstructionUnchecked = decodeTransferCheckedWithFeeInstructionUnchecked;
    exports.withdrawWithheldTokensFromMintInstructionData = (0, buffer_layout_1.struct)([
      (0, buffer_layout_1.u8)("instruction"),
      (0, buffer_layout_1.u8)("transferFeeInstruction")
    ]);
    function createWithdrawWithheldTokensFromMintInstruction2(mint, destination, authority, signers = [], programId = constants_js_1.TOKEN_2022_PROGRAM_ID) {
      if (!(0, constants_js_1.programSupportsExtensions)(programId)) {
        throw new errors_js_1.TokenUnsupportedInstructionError();
      }
      const data = Buffer.alloc(exports.withdrawWithheldTokensFromMintInstructionData.span);
      exports.withdrawWithheldTokensFromMintInstructionData.encode({
        instruction: types_js_1.TokenInstruction.TransferFeeExtension,
        transferFeeInstruction: TransferFeeInstruction2.WithdrawWithheldTokensFromMint
      }, data);
      const keys = (0, internal_js_1.addSigners)([
        { pubkey: mint, isSigner: false, isWritable: true },
        { pubkey: destination, isSigner: false, isWritable: true }
      ], authority, signers);
      return new web3_js_1.TransactionInstruction({ keys, programId, data });
    }
    exports.createWithdrawWithheldTokensFromMintInstruction = createWithdrawWithheldTokensFromMintInstruction2;
    function decodeWithdrawWithheldTokensFromMintInstruction(instruction, programId) {
      if (!instruction.programId.equals(programId))
        throw new errors_js_1.TokenInvalidInstructionProgramError();
      if (instruction.data.length !== exports.withdrawWithheldTokensFromMintInstructionData.span)
        throw new errors_js_1.TokenInvalidInstructionDataError();
      const { keys: { mint, destination, authority, signers }, data } = decodeWithdrawWithheldTokensFromMintInstructionUnchecked(instruction);
      if (data.instruction !== types_js_1.TokenInstruction.TransferFeeExtension || data.transferFeeInstruction !== TransferFeeInstruction2.WithdrawWithheldTokensFromMint)
        throw new errors_js_1.TokenInvalidInstructionTypeError();
      if (!mint)
        throw new errors_js_1.TokenInvalidInstructionKeysError();
      return {
        programId,
        keys: {
          mint,
          destination,
          authority,
          signers: signers ? signers : null
        },
        data
      };
    }
    exports.decodeWithdrawWithheldTokensFromMintInstruction = decodeWithdrawWithheldTokensFromMintInstruction;
    function decodeWithdrawWithheldTokensFromMintInstructionUnchecked({ programId, keys: [mint, destination, authority, ...signers], data }) {
      const { instruction, transferFeeInstruction } = exports.withdrawWithheldTokensFromMintInstructionData.decode(data);
      return {
        programId,
        keys: {
          mint,
          destination,
          authority,
          signers
        },
        data: {
          instruction,
          transferFeeInstruction
        }
      };
    }
    exports.decodeWithdrawWithheldTokensFromMintInstructionUnchecked = decodeWithdrawWithheldTokensFromMintInstructionUnchecked;
    exports.withdrawWithheldTokensFromAccountsInstructionData = (0, buffer_layout_1.struct)([
      (0, buffer_layout_1.u8)("instruction"),
      (0, buffer_layout_1.u8)("transferFeeInstruction"),
      (0, buffer_layout_1.u8)("numTokenAccounts")
    ]);
    function createWithdrawWithheldTokensFromAccountsInstruction2(mint, destination, authority, signers, sources, programId = constants_js_1.TOKEN_2022_PROGRAM_ID) {
      if (!(0, constants_js_1.programSupportsExtensions)(programId)) {
        throw new errors_js_1.TokenUnsupportedInstructionError();
      }
      const data = Buffer.alloc(exports.withdrawWithheldTokensFromAccountsInstructionData.span);
      exports.withdrawWithheldTokensFromAccountsInstructionData.encode({
        instruction: types_js_1.TokenInstruction.TransferFeeExtension,
        transferFeeInstruction: TransferFeeInstruction2.WithdrawWithheldTokensFromAccounts,
        numTokenAccounts: sources.length
      }, data);
      const keys = (0, internal_js_1.addSigners)([
        { pubkey: mint, isSigner: false, isWritable: true },
        { pubkey: destination, isSigner: false, isWritable: true }
      ], authority, signers);
      for (const source of sources) {
        keys.push({ pubkey: source, isSigner: false, isWritable: true });
      }
      return new web3_js_1.TransactionInstruction({ keys, programId, data });
    }
    exports.createWithdrawWithheldTokensFromAccountsInstruction = createWithdrawWithheldTokensFromAccountsInstruction2;
    function decodeWithdrawWithheldTokensFromAccountsInstruction(instruction, programId) {
      if (!instruction.programId.equals(programId))
        throw new errors_js_1.TokenInvalidInstructionProgramError();
      if (instruction.data.length !== exports.withdrawWithheldTokensFromAccountsInstructionData.span)
        throw new errors_js_1.TokenInvalidInstructionDataError();
      const { keys: { mint, destination, authority, signers, sources }, data } = decodeWithdrawWithheldTokensFromAccountsInstructionUnchecked(instruction);
      if (data.instruction !== types_js_1.TokenInstruction.TransferFeeExtension || data.transferFeeInstruction !== TransferFeeInstruction2.WithdrawWithheldTokensFromAccounts)
        throw new errors_js_1.TokenInvalidInstructionTypeError();
      if (!mint)
        throw new errors_js_1.TokenInvalidInstructionKeysError();
      return {
        programId,
        keys: {
          mint,
          destination,
          authority,
          signers: signers ? signers : null,
          sources: sources ? sources : null
        },
        data
      };
    }
    exports.decodeWithdrawWithheldTokensFromAccountsInstruction = decodeWithdrawWithheldTokensFromAccountsInstruction;
    function decodeWithdrawWithheldTokensFromAccountsInstructionUnchecked({ programId, keys, data }) {
      const { instruction, transferFeeInstruction, numTokenAccounts } = exports.withdrawWithheldTokensFromAccountsInstructionData.decode(data);
      const [mint, destination, authority, signers, sources] = [
        keys[0],
        keys[1],
        keys[2],
        keys.slice(3, 3 + numTokenAccounts),
        keys.slice(-1 * numTokenAccounts)
      ];
      return {
        programId,
        keys: {
          mint,
          destination,
          authority,
          signers,
          sources
        },
        data: {
          instruction,
          transferFeeInstruction,
          numTokenAccounts
        }
      };
    }
    exports.decodeWithdrawWithheldTokensFromAccountsInstructionUnchecked = decodeWithdrawWithheldTokensFromAccountsInstructionUnchecked;
    exports.harvestWithheldTokensToMintInstructionData = (0, buffer_layout_1.struct)([
      (0, buffer_layout_1.u8)("instruction"),
      (0, buffer_layout_1.u8)("transferFeeInstruction")
    ]);
    function createHarvestWithheldTokensToMintInstruction2(mint, sources, programId = constants_js_1.TOKEN_2022_PROGRAM_ID) {
      if (!(0, constants_js_1.programSupportsExtensions)(programId)) {
        throw new errors_js_1.TokenUnsupportedInstructionError();
      }
      const data = Buffer.alloc(exports.harvestWithheldTokensToMintInstructionData.span);
      exports.harvestWithheldTokensToMintInstructionData.encode({
        instruction: types_js_1.TokenInstruction.TransferFeeExtension,
        transferFeeInstruction: TransferFeeInstruction2.HarvestWithheldTokensToMint
      }, data);
      const keys = [];
      keys.push({ pubkey: mint, isSigner: false, isWritable: true });
      for (const source of sources) {
        keys.push({ pubkey: source, isSigner: false, isWritable: true });
      }
      return new web3_js_1.TransactionInstruction({ keys, programId, data });
    }
    exports.createHarvestWithheldTokensToMintInstruction = createHarvestWithheldTokensToMintInstruction2;
    function decodeHarvestWithheldTokensToMintInstruction(instruction, programId) {
      if (!instruction.programId.equals(programId))
        throw new errors_js_1.TokenInvalidInstructionProgramError();
      if (instruction.data.length !== exports.harvestWithheldTokensToMintInstructionData.span)
        throw new errors_js_1.TokenInvalidInstructionDataError();
      const { keys: { mint, sources }, data } = decodeHarvestWithheldTokensToMintInstructionUnchecked(instruction);
      if (data.instruction !== types_js_1.TokenInstruction.TransferFeeExtension || data.transferFeeInstruction !== TransferFeeInstruction2.HarvestWithheldTokensToMint)
        throw new errors_js_1.TokenInvalidInstructionTypeError();
      if (!mint)
        throw new errors_js_1.TokenInvalidInstructionKeysError();
      return {
        programId,
        keys: {
          mint,
          sources
        },
        data
      };
    }
    exports.decodeHarvestWithheldTokensToMintInstruction = decodeHarvestWithheldTokensToMintInstruction;
    function decodeHarvestWithheldTokensToMintInstructionUnchecked({ programId, keys: [mint, ...sources], data }) {
      const { instruction, transferFeeInstruction } = exports.harvestWithheldTokensToMintInstructionData.decode(data);
      return {
        programId,
        keys: {
          mint,
          sources
        },
        data: {
          instruction,
          transferFeeInstruction
        }
      };
    }
    exports.decodeHarvestWithheldTokensToMintInstructionUnchecked = decodeHarvestWithheldTokensToMintInstructionUnchecked;
  }
});

// ../../node_modules/@solana/spl-token/lib/cjs/extensions/transferFee/actions.js
var require_actions4 = __commonJS({
  "../../node_modules/@solana/spl-token/lib/cjs/extensions/transferFee/actions.js"(exports) {
    "use strict";
    var __awaiter = exports && exports.__awaiter || function(thisArg, _arguments, P, generator) {
      function adopt(value) {
        return value instanceof P ? value : new P(function(resolve) {
          resolve(value);
        });
      }
      return new (P || (P = Promise))(function(resolve, reject) {
        function fulfilled(value) {
          try {
            step(generator.next(value));
          } catch (e2) {
            reject(e2);
          }
        }
        function rejected(value) {
          try {
            step(generator["throw"](value));
          } catch (e2) {
            reject(e2);
          }
        }
        function step(result) {
          result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
        }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
      });
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.harvestWithheldTokensToMint = exports.withdrawWithheldTokensFromAccounts = exports.withdrawWithheldTokensFromMint = exports.transferCheckedWithFee = void 0;
    var web3_js_1 = (init_index_browser_esm(), __toCommonJS(index_browser_esm_exports));
    var internal_js_1 = require_internal3();
    var constants_js_1 = require_constants();
    var instructions_js_1 = require_instructions4();
    function transferCheckedWithFee(connection, payer, source, mint, destination, owner, amount2, decimals, fee, multiSigners = [], confirmOptions, programId = constants_js_1.TOKEN_2022_PROGRAM_ID) {
      return __awaiter(this, void 0, void 0, function* () {
        const [ownerPublicKey, signers] = (0, internal_js_1.getSigners)(owner, multiSigners);
        const transaction = new web3_js_1.Transaction().add((0, instructions_js_1.createTransferCheckedWithFeeInstruction)(source, mint, destination, ownerPublicKey, amount2, decimals, fee, multiSigners, programId));
        return yield (0, web3_js_1.sendAndConfirmTransaction)(connection, transaction, [payer, ...signers], confirmOptions);
      });
    }
    exports.transferCheckedWithFee = transferCheckedWithFee;
    function withdrawWithheldTokensFromMint(connection, payer, mint, destination, authority, multiSigners = [], confirmOptions, programId = constants_js_1.TOKEN_2022_PROGRAM_ID) {
      return __awaiter(this, void 0, void 0, function* () {
        const [authorityPublicKey, signers] = (0, internal_js_1.getSigners)(authority, multiSigners);
        const transaction = new web3_js_1.Transaction().add((0, instructions_js_1.createWithdrawWithheldTokensFromMintInstruction)(mint, destination, authorityPublicKey, signers, programId));
        return yield (0, web3_js_1.sendAndConfirmTransaction)(connection, transaction, [payer, ...signers], confirmOptions);
      });
    }
    exports.withdrawWithheldTokensFromMint = withdrawWithheldTokensFromMint;
    function withdrawWithheldTokensFromAccounts(connection, payer, mint, destination, authority, multiSigners, sources, confirmOptions, programId = constants_js_1.TOKEN_2022_PROGRAM_ID) {
      return __awaiter(this, void 0, void 0, function* () {
        const [authorityPublicKey, signers] = (0, internal_js_1.getSigners)(authority, multiSigners);
        const transaction = new web3_js_1.Transaction().add((0, instructions_js_1.createWithdrawWithheldTokensFromAccountsInstruction)(mint, destination, authorityPublicKey, signers, sources, programId));
        return yield (0, web3_js_1.sendAndConfirmTransaction)(connection, transaction, [payer, ...signers], confirmOptions);
      });
    }
    exports.withdrawWithheldTokensFromAccounts = withdrawWithheldTokensFromAccounts;
    function harvestWithheldTokensToMint(connection, payer, mint, sources, confirmOptions, programId = constants_js_1.TOKEN_2022_PROGRAM_ID) {
      return __awaiter(this, void 0, void 0, function* () {
        const transaction = new web3_js_1.Transaction().add((0, instructions_js_1.createHarvestWithheldTokensToMintInstruction)(mint, sources, programId));
        return yield (0, web3_js_1.sendAndConfirmTransaction)(connection, transaction, [payer], confirmOptions);
      });
    }
    exports.harvestWithheldTokensToMint = harvestWithheldTokensToMint;
  }
});

// ../../node_modules/@solana/spl-token/lib/cjs/extensions/transferFee/state.js
var require_state6 = __commonJS({
  "../../node_modules/@solana/spl-token/lib/cjs/extensions/transferFee/state.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.getTransferFeeAmount = exports.getTransferFeeConfig = exports.TRANSFER_FEE_AMOUNT_SIZE = exports.TransferFeeAmountLayout = exports.calculateEpochFee = exports.getEpochFee = exports.TRANSFER_FEE_CONFIG_SIZE = exports.TransferFeeConfigLayout = exports.calculateFee = exports.transferFeeLayout = exports.ONE_IN_BASIS_POINTS = exports.MAX_FEE_BASIS_POINTS = void 0;
    var buffer_layout_1 = require_Layout();
    var buffer_layout_utils_1 = require_cjs();
    var extensionType_js_1 = require_extensionType();
    exports.MAX_FEE_BASIS_POINTS = 1e4;
    exports.ONE_IN_BASIS_POINTS = BigInt(exports.MAX_FEE_BASIS_POINTS);
    function transferFeeLayout2(property) {
      return (0, buffer_layout_1.struct)([(0, buffer_layout_utils_1.u64)("epoch"), (0, buffer_layout_utils_1.u64)("maximumFee"), (0, buffer_layout_1.u16)("transferFeeBasisPoints")], property);
    }
    exports.transferFeeLayout = transferFeeLayout2;
    function calculateFee(transferFee, preFeeAmount) {
      const transferFeeBasisPoints = transferFee.transferFeeBasisPoints;
      if (transferFeeBasisPoints === 0 || preFeeAmount === BigInt(0)) {
        return BigInt(0);
      } else {
        const numerator = preFeeAmount * BigInt(transferFeeBasisPoints);
        const rawFee = (numerator + exports.ONE_IN_BASIS_POINTS - BigInt(1)) / exports.ONE_IN_BASIS_POINTS;
        const fee = rawFee > transferFee.maximumFee ? transferFee.maximumFee : rawFee;
        return BigInt(fee);
      }
    }
    exports.calculateFee = calculateFee;
    exports.TransferFeeConfigLayout = (0, buffer_layout_1.struct)([
      (0, buffer_layout_utils_1.publicKey)("transferFeeConfigAuthority"),
      (0, buffer_layout_utils_1.publicKey)("withdrawWithheldAuthority"),
      (0, buffer_layout_utils_1.u64)("withheldAmount"),
      transferFeeLayout2("olderTransferFee"),
      transferFeeLayout2("newerTransferFee")
    ]);
    exports.TRANSFER_FEE_CONFIG_SIZE = exports.TransferFeeConfigLayout.span;
    function getEpochFee(transferFeeConfig, epoch) {
      if (epoch >= transferFeeConfig.newerTransferFee.epoch) {
        return transferFeeConfig.newerTransferFee;
      } else {
        return transferFeeConfig.olderTransferFee;
      }
    }
    exports.getEpochFee = getEpochFee;
    function calculateEpochFee(transferFeeConfig, epoch, preFeeAmount) {
      const transferFee = getEpochFee(transferFeeConfig, epoch);
      return calculateFee(transferFee, preFeeAmount);
    }
    exports.calculateEpochFee = calculateEpochFee;
    exports.TransferFeeAmountLayout = (0, buffer_layout_1.struct)([(0, buffer_layout_utils_1.u64)("withheldAmount")]);
    exports.TRANSFER_FEE_AMOUNT_SIZE = exports.TransferFeeAmountLayout.span;
    function getTransferFeeConfig(mint) {
      const extensionData = (0, extensionType_js_1.getExtensionData)(extensionType_js_1.ExtensionType.TransferFeeConfig, mint.tlvData);
      if (extensionData !== null) {
        return exports.TransferFeeConfigLayout.decode(extensionData);
      } else {
        return null;
      }
    }
    exports.getTransferFeeConfig = getTransferFeeConfig;
    function getTransferFeeAmount(account) {
      const extensionData = (0, extensionType_js_1.getExtensionData)(extensionType_js_1.ExtensionType.TransferFeeAmount, account.tlvData);
      if (extensionData !== null) {
        return exports.TransferFeeAmountLayout.decode(extensionData);
      } else {
        return null;
      }
    }
    exports.getTransferFeeAmount = getTransferFeeAmount;
  }
});

// ../../node_modules/@solana/spl-token/lib/cjs/extensions/transferFee/index.js
var require_transferFee = __commonJS({
  "../../node_modules/@solana/spl-token/lib/cjs/extensions/transferFee/index.js"(exports) {
    "use strict";
    var __createBinding = exports && exports.__createBinding || (Object.create ? function(o2, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      var desc = Object.getOwnPropertyDescriptor(m, k);
      if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m[k];
        } };
      }
      Object.defineProperty(o2, k2, desc);
    } : function(o2, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      o2[k2] = m[k];
    });
    var __exportStar = exports && exports.__exportStar || function(m, exports2) {
      for (var p in m)
        if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports2, p))
          __createBinding(exports2, m, p);
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    __exportStar(require_actions4(), exports);
    __exportStar(require_instructions4(), exports);
    __exportStar(require_state6(), exports);
  }
});

// ../../node_modules/@solana/spl-token/lib/cjs/instructions/transferChecked.js
var require_transferChecked = __commonJS({
  "../../node_modules/@solana/spl-token/lib/cjs/instructions/transferChecked.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.decodeTransferCheckedInstructionUnchecked = exports.decodeTransferCheckedInstruction = exports.createTransferCheckedInstruction = exports.transferCheckedInstructionData = void 0;
    var buffer_layout_1 = require_Layout();
    var buffer_layout_utils_1 = require_cjs();
    var web3_js_1 = (init_index_browser_esm(), __toCommonJS(index_browser_esm_exports));
    var constants_js_1 = require_constants();
    var errors_js_1 = require_errors2();
    var internal_js_1 = require_internal2();
    var types_js_1 = require_types3();
    exports.transferCheckedInstructionData = (0, buffer_layout_1.struct)([
      (0, buffer_layout_1.u8)("instruction"),
      (0, buffer_layout_utils_1.u64)("amount"),
      (0, buffer_layout_1.u8)("decimals")
    ]);
    function createTransferCheckedInstruction2(source, mint, destination, owner, amount2, decimals, multiSigners = [], programId = constants_js_1.TOKEN_PROGRAM_ID) {
      const keys = (0, internal_js_1.addSigners)([
        { pubkey: source, isSigner: false, isWritable: true },
        { pubkey: mint, isSigner: false, isWritable: false },
        { pubkey: destination, isSigner: false, isWritable: true }
      ], owner, multiSigners);
      const data = Buffer.alloc(exports.transferCheckedInstructionData.span);
      exports.transferCheckedInstructionData.encode({
        instruction: types_js_1.TokenInstruction.TransferChecked,
        amount: BigInt(amount2),
        decimals
      }, data);
      return new web3_js_1.TransactionInstruction({ keys, programId, data });
    }
    exports.createTransferCheckedInstruction = createTransferCheckedInstruction2;
    function decodeTransferCheckedInstruction2(instruction, programId = constants_js_1.TOKEN_PROGRAM_ID) {
      if (!instruction.programId.equals(programId))
        throw new errors_js_1.TokenInvalidInstructionProgramError();
      if (instruction.data.length !== exports.transferCheckedInstructionData.span)
        throw new errors_js_1.TokenInvalidInstructionDataError();
      const { keys: { source, mint, destination, owner, multiSigners }, data } = decodeTransferCheckedInstructionUnchecked(instruction);
      if (data.instruction !== types_js_1.TokenInstruction.TransferChecked)
        throw new errors_js_1.TokenInvalidInstructionTypeError();
      if (!source || !mint || !destination || !owner)
        throw new errors_js_1.TokenInvalidInstructionKeysError();
      return {
        programId,
        keys: {
          source,
          mint,
          destination,
          owner,
          multiSigners
        },
        data
      };
    }
    exports.decodeTransferCheckedInstruction = decodeTransferCheckedInstruction2;
    function decodeTransferCheckedInstructionUnchecked({ programId, keys: [source, mint, destination, owner, ...multiSigners], data }) {
      return {
        programId,
        keys: {
          source,
          mint,
          destination,
          owner,
          multiSigners
        },
        data: exports.transferCheckedInstructionData.decode(data)
      };
    }
    exports.decodeTransferCheckedInstructionUnchecked = decodeTransferCheckedInstructionUnchecked;
  }
});

// ../../node_modules/@solana/spl-token/lib/cjs/extensions/transferHook/seeds.js
var require_seeds = __commonJS({
  "../../node_modules/@solana/spl-token/lib/cjs/extensions/transferHook/seeds.js"(exports) {
    "use strict";
    var __awaiter = exports && exports.__awaiter || function(thisArg, _arguments, P, generator) {
      function adopt(value) {
        return value instanceof P ? value : new P(function(resolve) {
          resolve(value);
        });
      }
      return new (P || (P = Promise))(function(resolve, reject) {
        function fulfilled(value) {
          try {
            step(generator.next(value));
          } catch (e2) {
            reject(e2);
          }
        }
        function rejected(value) {
          try {
            step(generator["throw"](value));
          } catch (e2) {
            reject(e2);
          }
        }
        function step(result) {
          result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
        }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
      });
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.unpackSeeds = void 0;
    var errors_js_1 = require_errors2();
    var DISCRIMINATOR_SPAN = 1;
    var LITERAL_LENGTH_SPAN = 1;
    var INSTRUCTION_ARG_OFFSET_SPAN = 1;
    var INSTRUCTION_ARG_LENGTH_SPAN = 1;
    var ACCOUNT_KEY_INDEX_SPAN = 1;
    var ACCOUNT_DATA_ACCOUNT_INDEX_SPAN = 1;
    var ACCOUNT_DATA_OFFSET_SPAN = 1;
    var ACCOUNT_DATA_LENGTH_SPAN = 1;
    function unpackSeedLiteral(seeds) {
      if (seeds.length < 1) {
        throw new errors_js_1.TokenTransferHookInvalidSeed();
      }
      const [length, ...rest] = seeds;
      if (rest.length < length) {
        throw new errors_js_1.TokenTransferHookInvalidSeed();
      }
      return {
        data: Buffer.from(rest.slice(0, length)),
        packedLength: DISCRIMINATOR_SPAN + LITERAL_LENGTH_SPAN + length
      };
    }
    function unpackSeedInstructionArg(seeds, instructionData) {
      if (seeds.length < 2) {
        throw new errors_js_1.TokenTransferHookInvalidSeed();
      }
      const [index, length] = seeds;
      if (instructionData.length < length + index) {
        throw new errors_js_1.TokenTransferHookInvalidSeed();
      }
      return {
        data: instructionData.subarray(index, index + length),
        packedLength: DISCRIMINATOR_SPAN + INSTRUCTION_ARG_OFFSET_SPAN + INSTRUCTION_ARG_LENGTH_SPAN
      };
    }
    function unpackSeedAccountKey(seeds, previousMetas) {
      if (seeds.length < 1) {
        throw new errors_js_1.TokenTransferHookInvalidSeed();
      }
      const [index] = seeds;
      if (previousMetas.length <= index) {
        throw new errors_js_1.TokenTransferHookInvalidSeed();
      }
      return {
        data: previousMetas[index].pubkey.toBuffer(),
        packedLength: DISCRIMINATOR_SPAN + ACCOUNT_KEY_INDEX_SPAN
      };
    }
    function unpackSeedAccountData(seeds, previousMetas, connection) {
      return __awaiter(this, void 0, void 0, function* () {
        if (seeds.length < 3) {
          throw new errors_js_1.TokenTransferHookInvalidSeed();
        }
        const [accountIndex, dataIndex, length] = seeds;
        if (previousMetas.length <= accountIndex) {
          throw new errors_js_1.TokenTransferHookInvalidSeed();
        }
        const accountInfo = yield connection.getAccountInfo(previousMetas[accountIndex].pubkey);
        if (accountInfo == null) {
          throw new errors_js_1.TokenTransferHookAccountDataNotFound();
        }
        if (accountInfo.data.length < dataIndex + length) {
          throw new errors_js_1.TokenTransferHookInvalidSeed();
        }
        return {
          data: accountInfo.data.subarray(dataIndex, dataIndex + length),
          packedLength: DISCRIMINATOR_SPAN + ACCOUNT_DATA_ACCOUNT_INDEX_SPAN + ACCOUNT_DATA_OFFSET_SPAN + ACCOUNT_DATA_LENGTH_SPAN
        };
      });
    }
    function unpackFirstSeed(seeds, previousMetas, instructionData, connection) {
      return __awaiter(this, void 0, void 0, function* () {
        const [discriminator, ...rest] = seeds;
        const remaining = new Uint8Array(rest);
        switch (discriminator) {
          case 0:
            return null;
          case 1:
            return unpackSeedLiteral(remaining);
          case 2:
            return unpackSeedInstructionArg(remaining, instructionData);
          case 3:
            return unpackSeedAccountKey(remaining, previousMetas);
          case 4:
            return unpackSeedAccountData(remaining, previousMetas, connection);
          default:
            throw new errors_js_1.TokenTransferHookInvalidSeed();
        }
      });
    }
    function unpackSeeds2(seeds, previousMetas, instructionData, connection) {
      return __awaiter(this, void 0, void 0, function* () {
        const unpackedSeeds = [];
        let i = 0;
        while (i < 32) {
          const seed = yield unpackFirstSeed(seeds.slice(i), previousMetas, instructionData, connection);
          if (seed == null) {
            break;
          }
          unpackedSeeds.push(seed.data);
          i += seed.packedLength;
        }
        return unpackedSeeds;
      });
    }
    exports.unpackSeeds = unpackSeeds2;
  }
});

// ../../node_modules/@solana/spl-token/lib/cjs/extensions/transferHook/state.js
var require_state7 = __commonJS({
  "../../node_modules/@solana/spl-token/lib/cjs/extensions/transferHook/state.js"(exports) {
    "use strict";
    var __awaiter = exports && exports.__awaiter || function(thisArg, _arguments, P, generator) {
      function adopt(value) {
        return value instanceof P ? value : new P(function(resolve) {
          resolve(value);
        });
      }
      return new (P || (P = Promise))(function(resolve, reject) {
        function fulfilled(value) {
          try {
            step(generator.next(value));
          } catch (e2) {
            reject(e2);
          }
        }
        function rejected(value) {
          try {
            step(generator["throw"](value));
          } catch (e2) {
            reject(e2);
          }
        }
        function step(result) {
          result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
        }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
      });
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.resolveExtraAccountMeta = exports.getExtraAccountMetas = exports.ExtraAccountMetaAccountDataLayout = exports.ExtraAccountMetaListLayout = exports.ExtraAccountMetaLayout = exports.getExtraAccountMetaAddress = exports.getTransferHookAccount = exports.TRANSFER_HOOK_ACCOUNT_SIZE = exports.TransferHookAccountLayout = exports.getTransferHook = exports.TRANSFER_HOOK_SIZE = exports.TransferHookLayout = void 0;
    var buffer_layout_1 = require_Layout();
    var extensionType_js_1 = require_extensionType();
    var web3_js_1 = (init_index_browser_esm(), __toCommonJS(index_browser_esm_exports));
    var buffer_layout_utils_1 = require_cjs();
    var errors_js_1 = require_errors2();
    var seeds_js_1 = require_seeds();
    exports.TransferHookLayout = (0, buffer_layout_1.struct)([(0, buffer_layout_utils_1.publicKey)("authority"), (0, buffer_layout_utils_1.publicKey)("programId")]);
    exports.TRANSFER_HOOK_SIZE = exports.TransferHookLayout.span;
    function getTransferHook2(mint) {
      const extensionData = (0, extensionType_js_1.getExtensionData)(extensionType_js_1.ExtensionType.TransferHook, mint.tlvData);
      if (extensionData !== null) {
        return exports.TransferHookLayout.decode(extensionData);
      } else {
        return null;
      }
    }
    exports.getTransferHook = getTransferHook2;
    exports.TransferHookAccountLayout = (0, buffer_layout_1.struct)([(0, buffer_layout_utils_1.bool)("transferring")]);
    exports.TRANSFER_HOOK_ACCOUNT_SIZE = exports.TransferHookAccountLayout.span;
    function getTransferHookAccount(account) {
      const extensionData = (0, extensionType_js_1.getExtensionData)(extensionType_js_1.ExtensionType.TransferHookAccount, account.tlvData);
      if (extensionData !== null) {
        return exports.TransferHookAccountLayout.decode(extensionData);
      } else {
        return null;
      }
    }
    exports.getTransferHookAccount = getTransferHookAccount;
    function getExtraAccountMetaAddress2(mint, programId) {
      const seeds = [Buffer.from("extra-account-metas"), mint.toBuffer()];
      return web3_js_1.PublicKey.findProgramAddressSync(seeds, programId)[0];
    }
    exports.getExtraAccountMetaAddress = getExtraAccountMetaAddress2;
    exports.ExtraAccountMetaLayout = (0, buffer_layout_1.struct)([
      (0, buffer_layout_1.u8)("discriminator"),
      (0, buffer_layout_1.blob)(32, "addressConfig"),
      (0, buffer_layout_utils_1.bool)("isSigner"),
      (0, buffer_layout_utils_1.bool)("isWritable")
    ]);
    exports.ExtraAccountMetaListLayout = (0, buffer_layout_1.struct)([
      (0, buffer_layout_1.u32)("count"),
      (0, buffer_layout_1.seq)(exports.ExtraAccountMetaLayout, (0, buffer_layout_1.greedy)(exports.ExtraAccountMetaLayout.span), "extraAccounts")
    ]);
    exports.ExtraAccountMetaAccountDataLayout = (0, buffer_layout_1.struct)([
      (0, buffer_layout_utils_1.u64)("instructionDiscriminator"),
      (0, buffer_layout_1.u32)("length"),
      exports.ExtraAccountMetaListLayout.replicate("extraAccountsList")
    ]);
    function getExtraAccountMetas2(account) {
      const extraAccountsList = exports.ExtraAccountMetaAccountDataLayout.decode(account.data).extraAccountsList;
      return extraAccountsList.extraAccounts.slice(0, extraAccountsList.count);
    }
    exports.getExtraAccountMetas = getExtraAccountMetas2;
    function resolveExtraAccountMeta2(connection, extraMeta, previousMetas, instructionData, transferHookProgramId) {
      return __awaiter(this, void 0, void 0, function* () {
        if (extraMeta.discriminator === 0) {
          return {
            pubkey: new web3_js_1.PublicKey(extraMeta.addressConfig),
            isSigner: extraMeta.isSigner,
            isWritable: extraMeta.isWritable
          };
        }
        let programId = web3_js_1.PublicKey.default;
        if (extraMeta.discriminator === 1) {
          programId = transferHookProgramId;
        } else {
          const accountIndex = extraMeta.discriminator - (1 << 7);
          if (previousMetas.length <= accountIndex) {
            throw new errors_js_1.TokenTransferHookAccountNotFound();
          }
          programId = previousMetas[accountIndex].pubkey;
        }
        const seeds = yield (0, seeds_js_1.unpackSeeds)(extraMeta.addressConfig, previousMetas, instructionData, connection);
        const pubkey = web3_js_1.PublicKey.findProgramAddressSync(seeds, programId)[0];
        return { pubkey, isSigner: extraMeta.isSigner, isWritable: extraMeta.isWritable };
      });
    }
    exports.resolveExtraAccountMeta = resolveExtraAccountMeta2;
  }
});

// ../../node_modules/@solana/spl-token/lib/cjs/extensions/transferHook/instructions.js
var require_instructions5 = __commonJS({
  "../../node_modules/@solana/spl-token/lib/cjs/extensions/transferHook/instructions.js"(exports) {
    "use strict";
    var __awaiter = exports && exports.__awaiter || function(thisArg, _arguments, P, generator) {
      function adopt(value) {
        return value instanceof P ? value : new P(function(resolve) {
          resolve(value);
        });
      }
      return new (P || (P = Promise))(function(resolve, reject) {
        function fulfilled(value) {
          try {
            step(generator.next(value));
          } catch (e2) {
            reject(e2);
          }
        }
        function rejected(value) {
          try {
            step(generator["throw"](value));
          } catch (e2) {
            reject(e2);
          }
        }
        function step(result) {
          result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
        }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
      });
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.createTransferCheckedWithFeeAndTransferHookInstruction = exports.createTransferCheckedWithTransferHookInstruction = exports.addExtraAccountsToInstruction = exports.createUpdateTransferHookInstruction = exports.updateTransferHookInstructionData = exports.createInitializeTransferHookInstruction = exports.initializeTransferHookInstructionData = exports.TransferHookInstruction = void 0;
    var buffer_layout_1 = require_Layout();
    var web3_js_1 = (init_index_browser_esm(), __toCommonJS(index_browser_esm_exports));
    var constants_js_1 = require_constants();
    var errors_js_1 = require_errors2();
    var internal_js_1 = require_internal2();
    var types_js_1 = require_types3();
    var buffer_layout_utils_1 = require_cjs();
    var transferChecked_js_1 = require_transferChecked();
    var instructions_js_1 = require_instructions4();
    var mint_js_1 = require_mint();
    var state_js_1 = require_state7();
    var TransferHookInstruction2;
    (function(TransferHookInstruction3) {
      TransferHookInstruction3[TransferHookInstruction3["Initialize"] = 0] = "Initialize";
      TransferHookInstruction3[TransferHookInstruction3["Update"] = 1] = "Update";
    })(TransferHookInstruction2 || (exports.TransferHookInstruction = TransferHookInstruction2 = {}));
    exports.initializeTransferHookInstructionData = (0, buffer_layout_1.struct)([
      (0, buffer_layout_1.u8)("instruction"),
      (0, buffer_layout_1.u8)("transferHookInstruction"),
      (0, buffer_layout_utils_1.publicKey)("authority"),
      (0, buffer_layout_utils_1.publicKey)("transferHookProgramId")
    ]);
    function createInitializeTransferHookInstruction2(mint, authority, transferHookProgramId, programId) {
      if (!(0, constants_js_1.programSupportsExtensions)(programId)) {
        throw new errors_js_1.TokenUnsupportedInstructionError();
      }
      const keys = [{ pubkey: mint, isSigner: false, isWritable: true }];
      const data = Buffer.alloc(exports.initializeTransferHookInstructionData.span);
      exports.initializeTransferHookInstructionData.encode({
        instruction: types_js_1.TokenInstruction.TransferHookExtension,
        transferHookInstruction: TransferHookInstruction2.Initialize,
        authority,
        transferHookProgramId
      }, data);
      return new web3_js_1.TransactionInstruction({ keys, programId, data });
    }
    exports.createInitializeTransferHookInstruction = createInitializeTransferHookInstruction2;
    exports.updateTransferHookInstructionData = (0, buffer_layout_1.struct)([
      (0, buffer_layout_1.u8)("instruction"),
      (0, buffer_layout_1.u8)("transferHookInstruction"),
      (0, buffer_layout_utils_1.publicKey)("transferHookProgramId")
    ]);
    function createUpdateTransferHookInstruction2(mint, authority, transferHookProgramId, multiSigners = [], programId = constants_js_1.TOKEN_2022_PROGRAM_ID) {
      if (!(0, constants_js_1.programSupportsExtensions)(programId)) {
        throw new errors_js_1.TokenUnsupportedInstructionError();
      }
      const keys = (0, internal_js_1.addSigners)([{ pubkey: mint, isSigner: false, isWritable: true }], authority, multiSigners);
      const data = Buffer.alloc(exports.updateTransferHookInstructionData.span);
      exports.updateTransferHookInstructionData.encode({
        instruction: types_js_1.TokenInstruction.TransferHookExtension,
        transferHookInstruction: TransferHookInstruction2.Update,
        transferHookProgramId
      }, data);
      return new web3_js_1.TransactionInstruction({ keys, programId, data });
    }
    exports.createUpdateTransferHookInstruction = createUpdateTransferHookInstruction2;
    function deEscalateAccountMeta(accountMeta, accountMetas) {
      const maybeHighestPrivileges = accountMetas.filter((x) => x.pubkey === accountMeta.pubkey).reduce((acc, x) => {
        if (!acc)
          return { isSigner: x.isSigner, isWritable: x.isWritable };
        return { isSigner: acc.isSigner || x.isSigner, isWritable: acc.isWritable || x.isWritable };
      }, void 0);
      if (maybeHighestPrivileges) {
        const { isSigner: isSigner2, isWritable } = maybeHighestPrivileges;
        if (!isSigner2 && isSigner2 !== accountMeta.isSigner) {
          accountMeta.isSigner = false;
        }
        if (!isWritable && isWritable !== accountMeta.isWritable) {
          accountMeta.isWritable = false;
        }
      }
      return accountMeta;
    }
    function addExtraAccountsToInstruction(connection, instruction, mint, commitment, programId = constants_js_1.TOKEN_PROGRAM_ID) {
      return __awaiter(this, void 0, void 0, function* () {
        if (!(0, constants_js_1.programSupportsExtensions)(programId)) {
          throw new errors_js_1.TokenUnsupportedInstructionError();
        }
        const mintInfo = yield (0, mint_js_1.getMint)(connection, mint, commitment, programId);
        const transferHook = (0, state_js_1.getTransferHook)(mintInfo);
        if (transferHook == null) {
          return instruction;
        }
        const extraAccountsAccount = (0, state_js_1.getExtraAccountMetaAddress)(mint, transferHook.programId);
        const extraAccountsInfo = yield connection.getAccountInfo(extraAccountsAccount, commitment);
        if (extraAccountsInfo == null) {
          return instruction;
        }
        const extraAccountMetas = (0, state_js_1.getExtraAccountMetas)(extraAccountsInfo);
        const accountMetas = instruction.keys;
        for (const extraAccountMeta of extraAccountMetas) {
          const accountMetaUnchecked = yield (0, state_js_1.resolveExtraAccountMeta)(connection, extraAccountMeta, accountMetas, instruction.data, transferHook.programId);
          const accountMeta = deEscalateAccountMeta(accountMetaUnchecked, accountMetas);
          accountMetas.push(accountMeta);
        }
        accountMetas.push({ pubkey: transferHook.programId, isSigner: false, isWritable: false });
        accountMetas.push({ pubkey: extraAccountsAccount, isSigner: false, isWritable: false });
        return new web3_js_1.TransactionInstruction({ keys: accountMetas, programId, data: instruction.data });
      });
    }
    exports.addExtraAccountsToInstruction = addExtraAccountsToInstruction;
    function createTransferCheckedWithTransferHookInstruction2(connection, source, mint, destination, authority, amount2, decimals, multiSigners = [], commitment, programId = constants_js_1.TOKEN_PROGRAM_ID) {
      return __awaiter(this, void 0, void 0, function* () {
        const rawInstruction = (0, transferChecked_js_1.createTransferCheckedInstruction)(source, mint, destination, authority, amount2, decimals, multiSigners, programId);
        const hydratedInstruction = yield addExtraAccountsToInstruction(connection, rawInstruction, mint, commitment, programId);
        return hydratedInstruction;
      });
    }
    exports.createTransferCheckedWithTransferHookInstruction = createTransferCheckedWithTransferHookInstruction2;
    function createTransferCheckedWithFeeAndTransferHookInstruction2(connection, source, mint, destination, authority, amount2, decimals, fee, multiSigners = [], commitment, programId = constants_js_1.TOKEN_PROGRAM_ID) {
      return __awaiter(this, void 0, void 0, function* () {
        const rawInstruction = (0, instructions_js_1.createTransferCheckedWithFeeInstruction)(source, mint, destination, authority, amount2, decimals, fee, multiSigners, programId);
        const hydratedInstruction = yield addExtraAccountsToInstruction(connection, rawInstruction, mint, commitment, programId);
        return hydratedInstruction;
      });
    }
    exports.createTransferCheckedWithFeeAndTransferHookInstruction = createTransferCheckedWithFeeAndTransferHookInstruction2;
  }
});

// ../../node_modules/@solana/spl-token/lib/cjs/extensions/transferHook/actions.js
var require_actions5 = __commonJS({
  "../../node_modules/@solana/spl-token/lib/cjs/extensions/transferHook/actions.js"(exports) {
    "use strict";
    var __awaiter = exports && exports.__awaiter || function(thisArg, _arguments, P, generator) {
      function adopt(value) {
        return value instanceof P ? value : new P(function(resolve) {
          resolve(value);
        });
      }
      return new (P || (P = Promise))(function(resolve, reject) {
        function fulfilled(value) {
          try {
            step(generator.next(value));
          } catch (e2) {
            reject(e2);
          }
        }
        function rejected(value) {
          try {
            step(generator["throw"](value));
          } catch (e2) {
            reject(e2);
          }
        }
        function step(result) {
          result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
        }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
      });
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.transferCheckedWithFeeAndTransferHook = exports.transferCheckedWithTransferHook = exports.updateTransferHook = exports.initializeTransferHook = void 0;
    var web3_js_1 = (init_index_browser_esm(), __toCommonJS(index_browser_esm_exports));
    var internal_js_1 = require_internal3();
    var constants_js_1 = require_constants();
    var instructions_js_1 = require_instructions5();
    function initializeTransferHook(connection, payer, mint, authority, transferHookProgramId, confirmOptions, programId = constants_js_1.TOKEN_2022_PROGRAM_ID) {
      return __awaiter(this, void 0, void 0, function* () {
        const transaction = new web3_js_1.Transaction().add((0, instructions_js_1.createInitializeTransferHookInstruction)(mint, authority, transferHookProgramId, programId));
        return yield (0, web3_js_1.sendAndConfirmTransaction)(connection, transaction, [payer], confirmOptions);
      });
    }
    exports.initializeTransferHook = initializeTransferHook;
    function updateTransferHook(connection, payer, mint, transferHookProgramId, authority, multiSigners = [], confirmOptions, programId = constants_js_1.TOKEN_2022_PROGRAM_ID) {
      return __awaiter(this, void 0, void 0, function* () {
        const [authorityPublicKey, signers] = (0, internal_js_1.getSigners)(authority, multiSigners);
        const transaction = new web3_js_1.Transaction().add((0, instructions_js_1.createUpdateTransferHookInstruction)(mint, authorityPublicKey, transferHookProgramId, signers, programId));
        return yield (0, web3_js_1.sendAndConfirmTransaction)(connection, transaction, [payer, ...signers], confirmOptions);
      });
    }
    exports.updateTransferHook = updateTransferHook;
    function transferCheckedWithTransferHook(connection, payer, source, mint, destination, authority, amount2, decimals, multiSigners = [], confirmOptions, programId = constants_js_1.TOKEN_PROGRAM_ID) {
      return __awaiter(this, void 0, void 0, function* () {
        const [authorityPublicKey, signers] = (0, internal_js_1.getSigners)(authority, multiSigners);
        const transaction = new web3_js_1.Transaction().add(yield (0, instructions_js_1.createTransferCheckedWithTransferHookInstruction)(connection, source, mint, destination, authorityPublicKey, amount2, decimals, signers, confirmOptions === null || confirmOptions === void 0 ? void 0 : confirmOptions.commitment, programId));
        return yield (0, web3_js_1.sendAndConfirmTransaction)(connection, transaction, [payer, ...signers], confirmOptions);
      });
    }
    exports.transferCheckedWithTransferHook = transferCheckedWithTransferHook;
    function transferCheckedWithFeeAndTransferHook(connection, payer, source, mint, destination, authority, amount2, decimals, fee, multiSigners = [], confirmOptions, programId = constants_js_1.TOKEN_PROGRAM_ID) {
      return __awaiter(this, void 0, void 0, function* () {
        const [authorityPublicKey, signers] = (0, internal_js_1.getSigners)(authority, multiSigners);
        const transaction = new web3_js_1.Transaction().add(yield (0, instructions_js_1.createTransferCheckedWithFeeAndTransferHookInstruction)(connection, source, mint, destination, authorityPublicKey, amount2, decimals, fee, signers, confirmOptions === null || confirmOptions === void 0 ? void 0 : confirmOptions.commitment, programId));
        return yield (0, web3_js_1.sendAndConfirmTransaction)(connection, transaction, [payer, ...signers], confirmOptions);
      });
    }
    exports.transferCheckedWithFeeAndTransferHook = transferCheckedWithFeeAndTransferHook;
  }
});

// ../../node_modules/@solana/spl-token/lib/cjs/extensions/transferHook/index.js
var require_transferHook = __commonJS({
  "../../node_modules/@solana/spl-token/lib/cjs/extensions/transferHook/index.js"(exports) {
    "use strict";
    var __createBinding = exports && exports.__createBinding || (Object.create ? function(o2, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      var desc = Object.getOwnPropertyDescriptor(m, k);
      if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m[k];
        } };
      }
      Object.defineProperty(o2, k2, desc);
    } : function(o2, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      o2[k2] = m[k];
    });
    var __exportStar = exports && exports.__exportStar || function(m, exports2) {
      for (var p in m)
        if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports2, p))
          __createBinding(exports2, m, p);
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    __exportStar(require_actions5(), exports);
    __exportStar(require_instructions5(), exports);
    __exportStar(require_seeds(), exports);
    __exportStar(require_state7(), exports);
  }
});

// ../../node_modules/@solana/spl-token/lib/cjs/extensions/extensionType.js
var require_extensionType = __commonJS({
  "../../node_modules/@solana/spl-token/lib/cjs/extensions/extensionType.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.getNewAccountLenForExtensionLen = exports.getAccountLenForMint = exports.getExtensionTypes = exports.getExtensionData = exports.getAccountLen = exports.getMintLen = exports.getAccountTypeOfMintType = exports.isAccountExtension = exports.isMintExtension = exports.getTypeLen = exports.LENGTH_SIZE = exports.TYPE_SIZE = exports.ExtensionType = void 0;
    var account_js_1 = require_account();
    var mint_js_1 = require_mint();
    var multisig_js_1 = require_multisig();
    var accountType_js_1 = require_accountType();
    var index_js_1 = require_cpiGuard();
    var index_js_2 = require_defaultAccountState();
    var immutableOwner_js_1 = require_immutableOwner();
    var state_js_1 = require_state3();
    var index_js_3 = require_memoTransfer();
    var state_js_2 = require_state5();
    var mintCloseAuthority_js_1 = require_mintCloseAuthority();
    var nonTransferable_js_1 = require_nonTransferable();
    var permanentDelegate_js_1 = require_permanentDelegate();
    var index_js_4 = require_transferFee();
    var index_js_5 = require_transferHook();
    var constants_js_1 = require_constants();
    var ExtensionType2;
    (function(ExtensionType3) {
      ExtensionType3[ExtensionType3["Uninitialized"] = 0] = "Uninitialized";
      ExtensionType3[ExtensionType3["TransferFeeConfig"] = 1] = "TransferFeeConfig";
      ExtensionType3[ExtensionType3["TransferFeeAmount"] = 2] = "TransferFeeAmount";
      ExtensionType3[ExtensionType3["MintCloseAuthority"] = 3] = "MintCloseAuthority";
      ExtensionType3[ExtensionType3["ConfidentialTransferMint"] = 4] = "ConfidentialTransferMint";
      ExtensionType3[ExtensionType3["ConfidentialTransferAccount"] = 5] = "ConfidentialTransferAccount";
      ExtensionType3[ExtensionType3["DefaultAccountState"] = 6] = "DefaultAccountState";
      ExtensionType3[ExtensionType3["ImmutableOwner"] = 7] = "ImmutableOwner";
      ExtensionType3[ExtensionType3["MemoTransfer"] = 8] = "MemoTransfer";
      ExtensionType3[ExtensionType3["NonTransferable"] = 9] = "NonTransferable";
      ExtensionType3[ExtensionType3["InterestBearingConfig"] = 10] = "InterestBearingConfig";
      ExtensionType3[ExtensionType3["CpiGuard"] = 11] = "CpiGuard";
      ExtensionType3[ExtensionType3["PermanentDelegate"] = 12] = "PermanentDelegate";
      ExtensionType3[ExtensionType3["NonTransferableAccount"] = 13] = "NonTransferableAccount";
      ExtensionType3[ExtensionType3["TransferHook"] = 14] = "TransferHook";
      ExtensionType3[ExtensionType3["TransferHookAccount"] = 15] = "TransferHookAccount";
      ExtensionType3[ExtensionType3["MetadataPointer"] = 18] = "MetadataPointer";
      ExtensionType3[ExtensionType3["TokenMetadata"] = 19] = "TokenMetadata";
    })(ExtensionType2 || (exports.ExtensionType = ExtensionType2 = {}));
    exports.TYPE_SIZE = 2;
    exports.LENGTH_SIZE = 2;
    function addTypeAndLengthToLen(len) {
      return len + exports.TYPE_SIZE + exports.LENGTH_SIZE;
    }
    function isVariableLengthExtension(e2) {
      switch (e2) {
        case ExtensionType2.TokenMetadata:
          return true;
        default:
          return false;
      }
    }
    function getTypeLen(e2) {
      switch (e2) {
        case ExtensionType2.Uninitialized:
          return 0;
        case ExtensionType2.TransferFeeConfig:
          return index_js_4.TRANSFER_FEE_CONFIG_SIZE;
        case ExtensionType2.TransferFeeAmount:
          return index_js_4.TRANSFER_FEE_AMOUNT_SIZE;
        case ExtensionType2.MintCloseAuthority:
          return mintCloseAuthority_js_1.MINT_CLOSE_AUTHORITY_SIZE;
        case ExtensionType2.ConfidentialTransferMint:
          return 97;
        case ExtensionType2.ConfidentialTransferAccount:
          return 286;
        case ExtensionType2.CpiGuard:
          return index_js_1.CPI_GUARD_SIZE;
        case ExtensionType2.DefaultAccountState:
          return index_js_2.DEFAULT_ACCOUNT_STATE_SIZE;
        case ExtensionType2.ImmutableOwner:
          return immutableOwner_js_1.IMMUTABLE_OWNER_SIZE;
        case ExtensionType2.MemoTransfer:
          return index_js_3.MEMO_TRANSFER_SIZE;
        case ExtensionType2.MetadataPointer:
          return state_js_2.METADATA_POINTER_SIZE;
        case ExtensionType2.NonTransferable:
          return nonTransferable_js_1.NON_TRANSFERABLE_SIZE;
        case ExtensionType2.InterestBearingConfig:
          return state_js_1.INTEREST_BEARING_MINT_CONFIG_STATE_SIZE;
        case ExtensionType2.PermanentDelegate:
          return permanentDelegate_js_1.PERMANENT_DELEGATE_SIZE;
        case ExtensionType2.NonTransferableAccount:
          return nonTransferable_js_1.NON_TRANSFERABLE_ACCOUNT_SIZE;
        case ExtensionType2.TransferHook:
          return index_js_5.TRANSFER_HOOK_SIZE;
        case ExtensionType2.TransferHookAccount:
          return index_js_5.TRANSFER_HOOK_ACCOUNT_SIZE;
        case ExtensionType2.TokenMetadata:
          throw Error(`Cannot get type length for variable extension type: ${e2}`);
        default:
          throw Error(`Unknown extension type: ${e2}`);
      }
    }
    exports.getTypeLen = getTypeLen;
    function isMintExtension(e2) {
      switch (e2) {
        case ExtensionType2.TransferFeeConfig:
        case ExtensionType2.MintCloseAuthority:
        case ExtensionType2.ConfidentialTransferMint:
        case ExtensionType2.DefaultAccountState:
        case ExtensionType2.NonTransferable:
        case ExtensionType2.InterestBearingConfig:
        case ExtensionType2.PermanentDelegate:
        case ExtensionType2.TransferHook:
        case ExtensionType2.MetadataPointer:
        case ExtensionType2.TokenMetadata:
          return true;
        case ExtensionType2.Uninitialized:
        case ExtensionType2.TransferFeeAmount:
        case ExtensionType2.ConfidentialTransferAccount:
        case ExtensionType2.ImmutableOwner:
        case ExtensionType2.MemoTransfer:
        case ExtensionType2.CpiGuard:
        case ExtensionType2.NonTransferableAccount:
        case ExtensionType2.TransferHookAccount:
          return false;
        default:
          throw Error(`Unknown extension type: ${e2}`);
      }
    }
    exports.isMintExtension = isMintExtension;
    function isAccountExtension(e2) {
      switch (e2) {
        case ExtensionType2.TransferFeeAmount:
        case ExtensionType2.ConfidentialTransferAccount:
        case ExtensionType2.ImmutableOwner:
        case ExtensionType2.MemoTransfer:
        case ExtensionType2.CpiGuard:
        case ExtensionType2.NonTransferableAccount:
        case ExtensionType2.TransferHookAccount:
          return true;
        case ExtensionType2.Uninitialized:
        case ExtensionType2.TransferFeeConfig:
        case ExtensionType2.MintCloseAuthority:
        case ExtensionType2.ConfidentialTransferMint:
        case ExtensionType2.DefaultAccountState:
        case ExtensionType2.NonTransferable:
        case ExtensionType2.InterestBearingConfig:
        case ExtensionType2.PermanentDelegate:
        case ExtensionType2.TransferHook:
        case ExtensionType2.MetadataPointer:
        case ExtensionType2.TokenMetadata:
          return false;
        default:
          throw Error(`Unknown extension type: ${e2}`);
      }
    }
    exports.isAccountExtension = isAccountExtension;
    function getAccountTypeOfMintType(e2) {
      switch (e2) {
        case ExtensionType2.TransferFeeConfig:
          return ExtensionType2.TransferFeeAmount;
        case ExtensionType2.ConfidentialTransferMint:
          return ExtensionType2.ConfidentialTransferAccount;
        case ExtensionType2.NonTransferable:
          return ExtensionType2.NonTransferableAccount;
        case ExtensionType2.TransferHook:
          return ExtensionType2.TransferHookAccount;
        case ExtensionType2.TransferFeeAmount:
        case ExtensionType2.ConfidentialTransferAccount:
        case ExtensionType2.CpiGuard:
        case ExtensionType2.DefaultAccountState:
        case ExtensionType2.ImmutableOwner:
        case ExtensionType2.MemoTransfer:
        case ExtensionType2.MintCloseAuthority:
        case ExtensionType2.MetadataPointer:
        case ExtensionType2.TokenMetadata:
        case ExtensionType2.Uninitialized:
        case ExtensionType2.InterestBearingConfig:
        case ExtensionType2.PermanentDelegate:
        case ExtensionType2.NonTransferableAccount:
        case ExtensionType2.TransferHookAccount:
          return ExtensionType2.Uninitialized;
      }
    }
    exports.getAccountTypeOfMintType = getAccountTypeOfMintType;
    function getLen(extensionTypes, baseSize, variableLengthExtensions = {}) {
      if (extensionTypes.length === 0 && Object.keys(variableLengthExtensions).length === 0) {
        return baseSize;
      } else {
        const accountLength = account_js_1.ACCOUNT_SIZE + accountType_js_1.ACCOUNT_TYPE_SIZE + extensionTypes.filter((element, i) => i === extensionTypes.indexOf(element)).map((element) => addTypeAndLengthToLen(getTypeLen(element))).reduce((a, b) => a + b, 0) + Object.entries(variableLengthExtensions).map(([extension, len]) => {
          if (!isVariableLengthExtension(Number(extension))) {
            throw Error(`Extension ${extension} is not variable length`);
          }
          return addTypeAndLengthToLen(len);
        }).reduce((a, b) => a + b, 0);
        if (accountLength === multisig_js_1.MULTISIG_SIZE) {
          return accountLength + exports.TYPE_SIZE;
        } else {
          return accountLength;
        }
      }
    }
    function getMintLen2(extensionTypes, variableLengthExtensions = {}) {
      return getLen(extensionTypes, mint_js_1.MINT_SIZE, variableLengthExtensions);
    }
    exports.getMintLen = getMintLen2;
    function getAccountLen2(extensionTypes) {
      return getLen(extensionTypes, account_js_1.ACCOUNT_SIZE);
    }
    exports.getAccountLen = getAccountLen2;
    function getExtensionData2(extension, tlvData) {
      let extensionTypeIndex = 0;
      while (addTypeAndLengthToLen(extensionTypeIndex) <= tlvData.length) {
        const entryType = tlvData.readUInt16LE(extensionTypeIndex);
        const entryLength = tlvData.readUInt16LE(extensionTypeIndex + exports.TYPE_SIZE);
        const typeIndex = addTypeAndLengthToLen(extensionTypeIndex);
        if (entryType == extension) {
          return tlvData.slice(typeIndex, typeIndex + entryLength);
        }
        extensionTypeIndex = typeIndex + entryLength;
      }
      return null;
    }
    exports.getExtensionData = getExtensionData2;
    function getExtensionTypes(tlvData) {
      const extensionTypes = [];
      let extensionTypeIndex = 0;
      while (extensionTypeIndex < tlvData.length) {
        const entryType = tlvData.readUInt16LE(extensionTypeIndex);
        extensionTypes.push(entryType);
        const entryLength = tlvData.readUInt16LE(extensionTypeIndex + exports.TYPE_SIZE);
        extensionTypeIndex += addTypeAndLengthToLen(entryLength);
      }
      return extensionTypes;
    }
    exports.getExtensionTypes = getExtensionTypes;
    function getAccountLenForMint2(mint) {
      const extensionTypes = getExtensionTypes(mint.tlvData);
      const accountExtensions = extensionTypes.map(getAccountTypeOfMintType);
      return getAccountLen2(accountExtensions);
    }
    exports.getAccountLenForMint = getAccountLenForMint2;
    function getNewAccountLenForExtensionLen2(info, address, extensionType, extensionLen, programId = constants_js_1.TOKEN_2022_PROGRAM_ID) {
      const mint = (0, mint_js_1.unpackMint)(address, info, programId);
      const extensionData = getExtensionData2(extensionType, mint.tlvData);
      const currentExtensionLen = extensionData ? addTypeAndLengthToLen(extensionData.length) : 0;
      const newExtensionLen = addTypeAndLengthToLen(extensionLen);
      return info.data.length + newExtensionLen - currentExtensionLen;
    }
    exports.getNewAccountLenForExtensionLen = getNewAccountLenForExtensionLen2;
  }
});

// ../../node_modules/@solana/spl-token/lib/cjs/instructions/initializeAccount.js
var require_initializeAccount = __commonJS({
  "../../node_modules/@solana/spl-token/lib/cjs/instructions/initializeAccount.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.decodeInitializeAccountInstructionUnchecked = exports.decodeInitializeAccountInstruction = exports.createInitializeAccountInstruction = exports.initializeAccountInstructionData = void 0;
    var buffer_layout_1 = require_Layout();
    var web3_js_1 = (init_index_browser_esm(), __toCommonJS(index_browser_esm_exports));
    var constants_js_1 = require_constants();
    var errors_js_1 = require_errors2();
    var types_js_1 = require_types3();
    exports.initializeAccountInstructionData = (0, buffer_layout_1.struct)([(0, buffer_layout_1.u8)("instruction")]);
    function createInitializeAccountInstruction2(account, mint, owner, programId = constants_js_1.TOKEN_PROGRAM_ID) {
      const keys = [
        { pubkey: account, isSigner: false, isWritable: true },
        { pubkey: mint, isSigner: false, isWritable: false },
        { pubkey: owner, isSigner: false, isWritable: false },
        { pubkey: web3_js_1.SYSVAR_RENT_PUBKEY, isSigner: false, isWritable: false }
      ];
      const data = Buffer.alloc(exports.initializeAccountInstructionData.span);
      exports.initializeAccountInstructionData.encode({ instruction: types_js_1.TokenInstruction.InitializeAccount }, data);
      return new web3_js_1.TransactionInstruction({ keys, programId, data });
    }
    exports.createInitializeAccountInstruction = createInitializeAccountInstruction2;
    function decodeInitializeAccountInstruction2(instruction, programId = constants_js_1.TOKEN_PROGRAM_ID) {
      if (!instruction.programId.equals(programId))
        throw new errors_js_1.TokenInvalidInstructionProgramError();
      if (instruction.data.length !== exports.initializeAccountInstructionData.span)
        throw new errors_js_1.TokenInvalidInstructionDataError();
      const { keys: { account, mint, owner, rent }, data } = decodeInitializeAccountInstructionUnchecked(instruction);
      if (data.instruction !== types_js_1.TokenInstruction.InitializeAccount)
        throw new errors_js_1.TokenInvalidInstructionTypeError();
      if (!account || !mint || !owner || !rent)
        throw new errors_js_1.TokenInvalidInstructionKeysError();
      return {
        programId,
        keys: {
          account,
          mint,
          owner,
          rent
        },
        data
      };
    }
    exports.decodeInitializeAccountInstruction = decodeInitializeAccountInstruction2;
    function decodeInitializeAccountInstructionUnchecked({ programId, keys: [account, mint, owner, rent], data }) {
      return {
        programId,
        keys: {
          account,
          mint,
          owner,
          rent
        },
        data: exports.initializeAccountInstructionData.decode(data)
      };
    }
    exports.decodeInitializeAccountInstructionUnchecked = decodeInitializeAccountInstructionUnchecked;
  }
});

// ../../node_modules/@solana/spl-token/lib/cjs/instructions/associatedTokenAccount.js
var require_associatedTokenAccount = __commonJS({
  "../../node_modules/@solana/spl-token/lib/cjs/instructions/associatedTokenAccount.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.createRecoverNestedInstruction = exports.createAssociatedTokenAccountIdempotentInstruction = exports.createAssociatedTokenAccountInstruction = void 0;
    var web3_js_1 = (init_index_browser_esm(), __toCommonJS(index_browser_esm_exports));
    var constants_js_1 = require_constants();
    function createAssociatedTokenAccountInstruction2(payer, associatedToken, owner, mint, programId = constants_js_1.TOKEN_PROGRAM_ID, associatedTokenProgramId = constants_js_1.ASSOCIATED_TOKEN_PROGRAM_ID) {
      return buildAssociatedTokenAccountInstruction2(payer, associatedToken, owner, mint, Buffer.alloc(0), programId, associatedTokenProgramId);
    }
    exports.createAssociatedTokenAccountInstruction = createAssociatedTokenAccountInstruction2;
    function createAssociatedTokenAccountIdempotentInstruction2(payer, associatedToken, owner, mint, programId = constants_js_1.TOKEN_PROGRAM_ID, associatedTokenProgramId = constants_js_1.ASSOCIATED_TOKEN_PROGRAM_ID) {
      return buildAssociatedTokenAccountInstruction2(payer, associatedToken, owner, mint, Buffer.from([1]), programId, associatedTokenProgramId);
    }
    exports.createAssociatedTokenAccountIdempotentInstruction = createAssociatedTokenAccountIdempotentInstruction2;
    function buildAssociatedTokenAccountInstruction2(payer, associatedToken, owner, mint, instructionData, programId = constants_js_1.TOKEN_PROGRAM_ID, associatedTokenProgramId = constants_js_1.ASSOCIATED_TOKEN_PROGRAM_ID) {
      const keys = [
        { pubkey: payer, isSigner: true, isWritable: true },
        { pubkey: associatedToken, isSigner: false, isWritable: true },
        { pubkey: owner, isSigner: false, isWritable: false },
        { pubkey: mint, isSigner: false, isWritable: false },
        { pubkey: web3_js_1.SystemProgram.programId, isSigner: false, isWritable: false },
        { pubkey: programId, isSigner: false, isWritable: false }
      ];
      return new web3_js_1.TransactionInstruction({
        keys,
        programId: associatedTokenProgramId,
        data: instructionData
      });
    }
    function createRecoverNestedInstruction2(nestedAssociatedToken, nestedMint, destinationAssociatedToken, ownerAssociatedToken, ownerMint, owner, programId = constants_js_1.TOKEN_PROGRAM_ID, associatedTokenProgramId = constants_js_1.ASSOCIATED_TOKEN_PROGRAM_ID) {
      const keys = [
        { pubkey: nestedAssociatedToken, isSigner: false, isWritable: true },
        { pubkey: nestedMint, isSigner: false, isWritable: false },
        { pubkey: destinationAssociatedToken, isSigner: false, isWritable: true },
        { pubkey: ownerAssociatedToken, isSigner: false, isWritable: true },
        { pubkey: ownerMint, isSigner: false, isWritable: false },
        { pubkey: owner, isSigner: true, isWritable: true },
        { pubkey: programId, isSigner: false, isWritable: false }
      ];
      return new web3_js_1.TransactionInstruction({
        keys,
        programId: associatedTokenProgramId,
        data: Buffer.from([2])
      });
    }
    exports.createRecoverNestedInstruction = createRecoverNestedInstruction2;
  }
});

// ../../node_modules/@solana/spl-token/lib/cjs/actions/createAssociatedTokenAccount.js
var require_createAssociatedTokenAccount = __commonJS({
  "../../node_modules/@solana/spl-token/lib/cjs/actions/createAssociatedTokenAccount.js"(exports) {
    "use strict";
    var __awaiter = exports && exports.__awaiter || function(thisArg, _arguments, P, generator) {
      function adopt(value) {
        return value instanceof P ? value : new P(function(resolve) {
          resolve(value);
        });
      }
      return new (P || (P = Promise))(function(resolve, reject) {
        function fulfilled(value) {
          try {
            step(generator.next(value));
          } catch (e2) {
            reject(e2);
          }
        }
        function rejected(value) {
          try {
            step(generator["throw"](value));
          } catch (e2) {
            reject(e2);
          }
        }
        function step(result) {
          result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
        }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
      });
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.createAssociatedTokenAccount = void 0;
    var web3_js_1 = (init_index_browser_esm(), __toCommonJS(index_browser_esm_exports));
    var constants_js_1 = require_constants();
    var associatedTokenAccount_js_1 = require_associatedTokenAccount();
    var mint_js_1 = require_mint();
    function createAssociatedTokenAccount2(connection, payer, mint, owner, confirmOptions, programId = constants_js_1.TOKEN_PROGRAM_ID, associatedTokenProgramId = constants_js_1.ASSOCIATED_TOKEN_PROGRAM_ID) {
      return __awaiter(this, void 0, void 0, function* () {
        const associatedToken = (0, mint_js_1.getAssociatedTokenAddressSync)(mint, owner, false, programId, associatedTokenProgramId);
        const transaction = new web3_js_1.Transaction().add((0, associatedTokenAccount_js_1.createAssociatedTokenAccountInstruction)(payer.publicKey, associatedToken, owner, mint, programId, associatedTokenProgramId));
        yield (0, web3_js_1.sendAndConfirmTransaction)(connection, transaction, [payer], confirmOptions);
        return associatedToken;
      });
    }
    exports.createAssociatedTokenAccount = createAssociatedTokenAccount2;
  }
});

// ../../node_modules/@solana/spl-token/lib/cjs/actions/createAccount.js
var require_createAccount = __commonJS({
  "../../node_modules/@solana/spl-token/lib/cjs/actions/createAccount.js"(exports) {
    "use strict";
    var __awaiter = exports && exports.__awaiter || function(thisArg, _arguments, P, generator) {
      function adopt(value) {
        return value instanceof P ? value : new P(function(resolve) {
          resolve(value);
        });
      }
      return new (P || (P = Promise))(function(resolve, reject) {
        function fulfilled(value) {
          try {
            step(generator.next(value));
          } catch (e2) {
            reject(e2);
          }
        }
        function rejected(value) {
          try {
            step(generator["throw"](value));
          } catch (e2) {
            reject(e2);
          }
        }
        function step(result) {
          result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
        }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
      });
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.createAccount = void 0;
    var web3_js_1 = (init_index_browser_esm(), __toCommonJS(index_browser_esm_exports));
    var constants_js_1 = require_constants();
    var extensionType_js_1 = require_extensionType();
    var initializeAccount_js_1 = require_initializeAccount();
    var mint_js_1 = require_mint();
    var createAssociatedTokenAccount_js_1 = require_createAssociatedTokenAccount();
    function createAccount2(connection, payer, mint, owner, keypair, confirmOptions, programId = constants_js_1.TOKEN_PROGRAM_ID) {
      return __awaiter(this, void 0, void 0, function* () {
        if (!keypair)
          return yield (0, createAssociatedTokenAccount_js_1.createAssociatedTokenAccount)(connection, payer, mint, owner, confirmOptions, programId);
        const mintState = yield (0, mint_js_1.getMint)(connection, mint, confirmOptions === null || confirmOptions === void 0 ? void 0 : confirmOptions.commitment, programId);
        const space = (0, extensionType_js_1.getAccountLenForMint)(mintState);
        const lamports2 = yield connection.getMinimumBalanceForRentExemption(space);
        const transaction = new web3_js_1.Transaction().add(web3_js_1.SystemProgram.createAccount({
          fromPubkey: payer.publicKey,
          newAccountPubkey: keypair.publicKey,
          space,
          lamports: lamports2,
          programId
        }), (0, initializeAccount_js_1.createInitializeAccountInstruction)(keypair.publicKey, mint, owner, programId));
        yield (0, web3_js_1.sendAndConfirmTransaction)(connection, transaction, [payer, keypair], confirmOptions);
        return keypair.publicKey;
      });
    }
    exports.createAccount = createAccount2;
  }
});

// ../../node_modules/@solana/spl-token/lib/cjs/actions/createAssociatedTokenAccountIdempotent.js
var require_createAssociatedTokenAccountIdempotent = __commonJS({
  "../../node_modules/@solana/spl-token/lib/cjs/actions/createAssociatedTokenAccountIdempotent.js"(exports) {
    "use strict";
    var __awaiter = exports && exports.__awaiter || function(thisArg, _arguments, P, generator) {
      function adopt(value) {
        return value instanceof P ? value : new P(function(resolve) {
          resolve(value);
        });
      }
      return new (P || (P = Promise))(function(resolve, reject) {
        function fulfilled(value) {
          try {
            step(generator.next(value));
          } catch (e2) {
            reject(e2);
          }
        }
        function rejected(value) {
          try {
            step(generator["throw"](value));
          } catch (e2) {
            reject(e2);
          }
        }
        function step(result) {
          result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
        }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
      });
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.createAssociatedTokenAccountIdempotent = void 0;
    var web3_js_1 = (init_index_browser_esm(), __toCommonJS(index_browser_esm_exports));
    var constants_js_1 = require_constants();
    var associatedTokenAccount_js_1 = require_associatedTokenAccount();
    var mint_js_1 = require_mint();
    function createAssociatedTokenAccountIdempotent(connection, payer, mint, owner, confirmOptions, programId = constants_js_1.TOKEN_PROGRAM_ID, associatedTokenProgramId = constants_js_1.ASSOCIATED_TOKEN_PROGRAM_ID) {
      return __awaiter(this, void 0, void 0, function* () {
        const associatedToken = (0, mint_js_1.getAssociatedTokenAddressSync)(mint, owner, false, programId, associatedTokenProgramId);
        const transaction = new web3_js_1.Transaction().add((0, associatedTokenAccount_js_1.createAssociatedTokenAccountIdempotentInstruction)(payer.publicKey, associatedToken, owner, mint, programId, associatedTokenProgramId));
        yield (0, web3_js_1.sendAndConfirmTransaction)(connection, transaction, [payer], confirmOptions);
        return associatedToken;
      });
    }
    exports.createAssociatedTokenAccountIdempotent = createAssociatedTokenAccountIdempotent;
  }
});

// ../../node_modules/@solana/spl-token/lib/cjs/instructions/initializeMint2.js
var require_initializeMint2 = __commonJS({
  "../../node_modules/@solana/spl-token/lib/cjs/instructions/initializeMint2.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.decodeInitializeMint2InstructionUnchecked = exports.decodeInitializeMint2Instruction = exports.createInitializeMint2Instruction = exports.initializeMint2InstructionData = void 0;
    var buffer_layout_1 = require_Layout();
    var buffer_layout_utils_1 = require_cjs();
    var web3_js_1 = (init_index_browser_esm(), __toCommonJS(index_browser_esm_exports));
    var constants_js_1 = require_constants();
    var errors_js_1 = require_errors2();
    var types_js_1 = require_types3();
    exports.initializeMint2InstructionData = (0, buffer_layout_1.struct)([
      (0, buffer_layout_1.u8)("instruction"),
      (0, buffer_layout_1.u8)("decimals"),
      (0, buffer_layout_utils_1.publicKey)("mintAuthority"),
      (0, buffer_layout_1.u8)("freezeAuthorityOption"),
      (0, buffer_layout_utils_1.publicKey)("freezeAuthority")
    ]);
    function createInitializeMint2Instruction2(mint, decimals, mintAuthority, freezeAuthority, programId = constants_js_1.TOKEN_PROGRAM_ID) {
      const keys = [{ pubkey: mint, isSigner: false, isWritable: true }];
      const data = Buffer.alloc(exports.initializeMint2InstructionData.span);
      exports.initializeMint2InstructionData.encode({
        instruction: types_js_1.TokenInstruction.InitializeMint2,
        decimals,
        mintAuthority,
        freezeAuthorityOption: freezeAuthority ? 1 : 0,
        freezeAuthority: freezeAuthority || new web3_js_1.PublicKey(0)
      }, data);
      return new web3_js_1.TransactionInstruction({ keys, programId, data });
    }
    exports.createInitializeMint2Instruction = createInitializeMint2Instruction2;
    function decodeInitializeMint2Instruction2(instruction, programId = constants_js_1.TOKEN_PROGRAM_ID) {
      if (!instruction.programId.equals(programId))
        throw new errors_js_1.TokenInvalidInstructionProgramError();
      if (instruction.data.length !== exports.initializeMint2InstructionData.span)
        throw new errors_js_1.TokenInvalidInstructionDataError();
      const { keys: { mint }, data } = decodeInitializeMint2InstructionUnchecked(instruction);
      if (data.instruction !== types_js_1.TokenInstruction.InitializeMint2)
        throw new errors_js_1.TokenInvalidInstructionTypeError();
      if (!mint)
        throw new errors_js_1.TokenInvalidInstructionKeysError();
      return {
        programId,
        keys: {
          mint
        },
        data
      };
    }
    exports.decodeInitializeMint2Instruction = decodeInitializeMint2Instruction2;
    function decodeInitializeMint2InstructionUnchecked({ programId, keys: [mint], data }) {
      const { instruction, decimals, mintAuthority, freezeAuthorityOption, freezeAuthority } = exports.initializeMint2InstructionData.decode(data);
      return {
        programId,
        keys: {
          mint
        },
        data: {
          instruction,
          decimals,
          mintAuthority,
          freezeAuthority: freezeAuthorityOption ? freezeAuthority : null
        }
      };
    }
    exports.decodeInitializeMint2InstructionUnchecked = decodeInitializeMint2InstructionUnchecked;
  }
});

// ../../node_modules/@solana/spl-token/lib/cjs/actions/createMint.js
var require_createMint = __commonJS({
  "../../node_modules/@solana/spl-token/lib/cjs/actions/createMint.js"(exports) {
    "use strict";
    var __awaiter = exports && exports.__awaiter || function(thisArg, _arguments, P, generator) {
      function adopt(value) {
        return value instanceof P ? value : new P(function(resolve) {
          resolve(value);
        });
      }
      return new (P || (P = Promise))(function(resolve, reject) {
        function fulfilled(value) {
          try {
            step(generator.next(value));
          } catch (e2) {
            reject(e2);
          }
        }
        function rejected(value) {
          try {
            step(generator["throw"](value));
          } catch (e2) {
            reject(e2);
          }
        }
        function step(result) {
          result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
        }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
      });
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.createMint = void 0;
    var web3_js_1 = (init_index_browser_esm(), __toCommonJS(index_browser_esm_exports));
    var constants_js_1 = require_constants();
    var initializeMint2_js_1 = require_initializeMint2();
    var mint_js_1 = require_mint();
    function createMint(connection, payer, mintAuthority, freezeAuthority, decimals, keypair = web3_js_1.Keypair.generate(), confirmOptions, programId = constants_js_1.TOKEN_PROGRAM_ID) {
      return __awaiter(this, void 0, void 0, function* () {
        const lamports2 = yield (0, mint_js_1.getMinimumBalanceForRentExemptMint)(connection);
        const transaction = new web3_js_1.Transaction().add(web3_js_1.SystemProgram.createAccount({
          fromPubkey: payer.publicKey,
          newAccountPubkey: keypair.publicKey,
          space: mint_js_1.MINT_SIZE,
          lamports: lamports2,
          programId
        }), (0, initializeMint2_js_1.createInitializeMint2Instruction)(keypair.publicKey, decimals, mintAuthority, freezeAuthority, programId));
        yield (0, web3_js_1.sendAndConfirmTransaction)(connection, transaction, [payer, keypair], confirmOptions);
        return keypair.publicKey;
      });
    }
    exports.createMint = createMint;
  }
});

// ../../node_modules/@solana/spl-token/lib/cjs/instructions/initializeMultisig.js
var require_initializeMultisig = __commonJS({
  "../../node_modules/@solana/spl-token/lib/cjs/instructions/initializeMultisig.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.decodeInitializeMultisigInstructionUnchecked = exports.decodeInitializeMultisigInstruction = exports.createInitializeMultisigInstruction = exports.initializeMultisigInstructionData = void 0;
    var buffer_layout_1 = require_Layout();
    var web3_js_1 = (init_index_browser_esm(), __toCommonJS(index_browser_esm_exports));
    var constants_js_1 = require_constants();
    var errors_js_1 = require_errors2();
    var types_js_1 = require_types3();
    exports.initializeMultisigInstructionData = (0, buffer_layout_1.struct)([
      (0, buffer_layout_1.u8)("instruction"),
      (0, buffer_layout_1.u8)("m")
    ]);
    function createInitializeMultisigInstruction2(account, signers, m, programId = constants_js_1.TOKEN_PROGRAM_ID) {
      const keys = [
        { pubkey: account, isSigner: false, isWritable: true },
        { pubkey: web3_js_1.SYSVAR_RENT_PUBKEY, isSigner: false, isWritable: false }
      ];
      for (const signer of signers) {
        keys.push({
          pubkey: signer instanceof web3_js_1.PublicKey ? signer : signer.publicKey,
          isSigner: false,
          isWritable: false
        });
      }
      const data = Buffer.alloc(exports.initializeMultisigInstructionData.span);
      exports.initializeMultisigInstructionData.encode({
        instruction: types_js_1.TokenInstruction.InitializeMultisig,
        m
      }, data);
      return new web3_js_1.TransactionInstruction({ keys, programId, data });
    }
    exports.createInitializeMultisigInstruction = createInitializeMultisigInstruction2;
    function decodeInitializeMultisigInstruction2(instruction, programId = constants_js_1.TOKEN_PROGRAM_ID) {
      if (!instruction.programId.equals(programId))
        throw new errors_js_1.TokenInvalidInstructionProgramError();
      if (instruction.data.length !== exports.initializeMultisigInstructionData.span)
        throw new errors_js_1.TokenInvalidInstructionDataError();
      const { keys: { account, rent, signers }, data } = decodeInitializeMultisigInstructionUnchecked(instruction);
      if (data.instruction !== types_js_1.TokenInstruction.InitializeMultisig)
        throw new errors_js_1.TokenInvalidInstructionTypeError();
      if (!account || !rent || !signers.length)
        throw new errors_js_1.TokenInvalidInstructionKeysError();
      return {
        programId,
        keys: {
          account,
          rent,
          signers
        },
        data
      };
    }
    exports.decodeInitializeMultisigInstruction = decodeInitializeMultisigInstruction2;
    function decodeInitializeMultisigInstructionUnchecked({ programId, keys: [account, rent, ...signers], data }) {
      return {
        programId,
        keys: {
          account,
          rent,
          signers
        },
        data: exports.initializeMultisigInstructionData.decode(data)
      };
    }
    exports.decodeInitializeMultisigInstructionUnchecked = decodeInitializeMultisigInstructionUnchecked;
  }
});

// ../../node_modules/@solana/spl-token/lib/cjs/actions/createMultisig.js
var require_createMultisig = __commonJS({
  "../../node_modules/@solana/spl-token/lib/cjs/actions/createMultisig.js"(exports) {
    "use strict";
    var __awaiter = exports && exports.__awaiter || function(thisArg, _arguments, P, generator) {
      function adopt(value) {
        return value instanceof P ? value : new P(function(resolve) {
          resolve(value);
        });
      }
      return new (P || (P = Promise))(function(resolve, reject) {
        function fulfilled(value) {
          try {
            step(generator.next(value));
          } catch (e2) {
            reject(e2);
          }
        }
        function rejected(value) {
          try {
            step(generator["throw"](value));
          } catch (e2) {
            reject(e2);
          }
        }
        function step(result) {
          result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
        }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
      });
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.createMultisig = void 0;
    var web3_js_1 = (init_index_browser_esm(), __toCommonJS(index_browser_esm_exports));
    var constants_js_1 = require_constants();
    var initializeMultisig_js_1 = require_initializeMultisig();
    var multisig_js_1 = require_multisig();
    function createMultisig(connection, payer, signers, m, keypair = web3_js_1.Keypair.generate(), confirmOptions, programId = constants_js_1.TOKEN_PROGRAM_ID) {
      return __awaiter(this, void 0, void 0, function* () {
        const lamports2 = yield (0, multisig_js_1.getMinimumBalanceForRentExemptMultisig)(connection);
        const transaction = new web3_js_1.Transaction().add(web3_js_1.SystemProgram.createAccount({
          fromPubkey: payer.publicKey,
          newAccountPubkey: keypair.publicKey,
          space: multisig_js_1.MULTISIG_SIZE,
          lamports: lamports2,
          programId
        }), (0, initializeMultisig_js_1.createInitializeMultisigInstruction)(keypair.publicKey, signers, m, programId));
        yield (0, web3_js_1.sendAndConfirmTransaction)(connection, transaction, [payer, keypair], confirmOptions);
        return keypair.publicKey;
      });
    }
    exports.createMultisig = createMultisig;
  }
});

// ../../node_modules/@solana/spl-token/lib/cjs/instructions/createNativeMint.js
var require_createNativeMint = __commonJS({
  "../../node_modules/@solana/spl-token/lib/cjs/instructions/createNativeMint.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.createCreateNativeMintInstruction = exports.createNativeMintInstructionData = void 0;
    var buffer_layout_1 = require_Layout();
    var web3_js_1 = (init_index_browser_esm(), __toCommonJS(index_browser_esm_exports));
    var constants_js_1 = require_constants();
    var errors_js_1 = require_errors2();
    var types_js_1 = require_types3();
    exports.createNativeMintInstructionData = (0, buffer_layout_1.struct)([(0, buffer_layout_1.u8)("instruction")]);
    function createCreateNativeMintInstruction2(payer, nativeMintId = constants_js_1.NATIVE_MINT_2022, programId = constants_js_1.TOKEN_2022_PROGRAM_ID) {
      if (!(0, constants_js_1.programSupportsExtensions)(programId)) {
        throw new errors_js_1.TokenUnsupportedInstructionError();
      }
      const keys = [
        { pubkey: payer, isSigner: true, isWritable: true },
        { pubkey: nativeMintId, isSigner: false, isWritable: true },
        { pubkey: web3_js_1.SystemProgram.programId, isSigner: false, isWritable: false }
      ];
      const data = Buffer.alloc(exports.createNativeMintInstructionData.span);
      exports.createNativeMintInstructionData.encode({ instruction: types_js_1.TokenInstruction.CreateNativeMint }, data);
      return new web3_js_1.TransactionInstruction({ keys, programId, data });
    }
    exports.createCreateNativeMintInstruction = createCreateNativeMintInstruction2;
  }
});

// ../../node_modules/@solana/spl-token/lib/cjs/actions/createNativeMint.js
var require_createNativeMint2 = __commonJS({
  "../../node_modules/@solana/spl-token/lib/cjs/actions/createNativeMint.js"(exports) {
    "use strict";
    var __awaiter = exports && exports.__awaiter || function(thisArg, _arguments, P, generator) {
      function adopt(value) {
        return value instanceof P ? value : new P(function(resolve) {
          resolve(value);
        });
      }
      return new (P || (P = Promise))(function(resolve, reject) {
        function fulfilled(value) {
          try {
            step(generator.next(value));
          } catch (e2) {
            reject(e2);
          }
        }
        function rejected(value) {
          try {
            step(generator["throw"](value));
          } catch (e2) {
            reject(e2);
          }
        }
        function step(result) {
          result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
        }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
      });
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.createNativeMint = void 0;
    var web3_js_1 = (init_index_browser_esm(), __toCommonJS(index_browser_esm_exports));
    var constants_js_1 = require_constants();
    var createNativeMint_js_1 = require_createNativeMint();
    function createNativeMint(connection, payer, confirmOptions, nativeMint = constants_js_1.NATIVE_MINT_2022, programId = constants_js_1.TOKEN_2022_PROGRAM_ID) {
      return __awaiter(this, void 0, void 0, function* () {
        const transaction = new web3_js_1.Transaction().add((0, createNativeMint_js_1.createCreateNativeMintInstruction)(payer.publicKey, nativeMint, programId));
        yield (0, web3_js_1.sendAndConfirmTransaction)(connection, transaction, [payer], confirmOptions);
      });
    }
    exports.createNativeMint = createNativeMint;
  }
});

// ../../node_modules/@solana/spl-token/lib/cjs/instructions/syncNative.js
var require_syncNative = __commonJS({
  "../../node_modules/@solana/spl-token/lib/cjs/instructions/syncNative.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.decodeSyncNativeInstructionUnchecked = exports.decodeSyncNativeInstruction = exports.createSyncNativeInstruction = exports.syncNativeInstructionData = void 0;
    var buffer_layout_1 = require_Layout();
    var web3_js_1 = (init_index_browser_esm(), __toCommonJS(index_browser_esm_exports));
    var constants_js_1 = require_constants();
    var errors_js_1 = require_errors2();
    var types_js_1 = require_types3();
    exports.syncNativeInstructionData = (0, buffer_layout_1.struct)([(0, buffer_layout_1.u8)("instruction")]);
    function createSyncNativeInstruction2(account, programId = constants_js_1.TOKEN_PROGRAM_ID) {
      const keys = [{ pubkey: account, isSigner: false, isWritable: true }];
      const data = Buffer.alloc(exports.syncNativeInstructionData.span);
      exports.syncNativeInstructionData.encode({ instruction: types_js_1.TokenInstruction.SyncNative }, data);
      return new web3_js_1.TransactionInstruction({ keys, programId, data });
    }
    exports.createSyncNativeInstruction = createSyncNativeInstruction2;
    function decodeSyncNativeInstruction2(instruction, programId = constants_js_1.TOKEN_PROGRAM_ID) {
      if (!instruction.programId.equals(programId))
        throw new errors_js_1.TokenInvalidInstructionProgramError();
      if (instruction.data.length !== exports.syncNativeInstructionData.span)
        throw new errors_js_1.TokenInvalidInstructionDataError();
      const { keys: { account }, data } = decodeSyncNativeInstructionUnchecked(instruction);
      if (data.instruction !== types_js_1.TokenInstruction.SyncNative)
        throw new errors_js_1.TokenInvalidInstructionTypeError();
      if (!account)
        throw new errors_js_1.TokenInvalidInstructionKeysError();
      return {
        programId,
        keys: {
          account
        },
        data
      };
    }
    exports.decodeSyncNativeInstruction = decodeSyncNativeInstruction2;
    function decodeSyncNativeInstructionUnchecked({ programId, keys: [account], data }) {
      return {
        programId,
        keys: {
          account
        },
        data: exports.syncNativeInstructionData.decode(data)
      };
    }
    exports.decodeSyncNativeInstructionUnchecked = decodeSyncNativeInstructionUnchecked;
  }
});

// ../../node_modules/@solana/spl-token/lib/cjs/actions/createWrappedNativeAccount.js
var require_createWrappedNativeAccount = __commonJS({
  "../../node_modules/@solana/spl-token/lib/cjs/actions/createWrappedNativeAccount.js"(exports) {
    "use strict";
    var __awaiter = exports && exports.__awaiter || function(thisArg, _arguments, P, generator) {
      function adopt(value) {
        return value instanceof P ? value : new P(function(resolve) {
          resolve(value);
        });
      }
      return new (P || (P = Promise))(function(resolve, reject) {
        function fulfilled(value) {
          try {
            step(generator.next(value));
          } catch (e2) {
            reject(e2);
          }
        }
        function rejected(value) {
          try {
            step(generator["throw"](value));
          } catch (e2) {
            reject(e2);
          }
        }
        function step(result) {
          result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
        }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
      });
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.createWrappedNativeAccount = void 0;
    var web3_js_1 = (init_index_browser_esm(), __toCommonJS(index_browser_esm_exports));
    var constants_js_1 = require_constants();
    var associatedTokenAccount_js_1 = require_associatedTokenAccount();
    var initializeAccount_js_1 = require_initializeAccount();
    var syncNative_js_1 = require_syncNative();
    var account_js_1 = require_account();
    var mint_js_1 = require_mint();
    var createAccount_js_1 = require_createAccount();
    function createWrappedNativeAccount(connection, payer, owner, amount2, keypair, confirmOptions, programId = constants_js_1.TOKEN_PROGRAM_ID, nativeMint = constants_js_1.NATIVE_MINT) {
      return __awaiter(this, void 0, void 0, function* () {
        if (!amount2)
          return yield (0, createAccount_js_1.createAccount)(connection, payer, nativeMint, owner, keypair, confirmOptions, programId);
        if (!keypair) {
          const associatedToken = (0, mint_js_1.getAssociatedTokenAddressSync)(nativeMint, owner, false, programId, constants_js_1.ASSOCIATED_TOKEN_PROGRAM_ID);
          const transaction2 = new web3_js_1.Transaction().add((0, associatedTokenAccount_js_1.createAssociatedTokenAccountInstruction)(payer.publicKey, associatedToken, owner, nativeMint, programId, constants_js_1.ASSOCIATED_TOKEN_PROGRAM_ID), web3_js_1.SystemProgram.transfer({
            fromPubkey: payer.publicKey,
            toPubkey: associatedToken,
            lamports: amount2
          }), (0, syncNative_js_1.createSyncNativeInstruction)(associatedToken, programId));
          yield (0, web3_js_1.sendAndConfirmTransaction)(connection, transaction2, [payer], confirmOptions);
          return associatedToken;
        }
        const lamports2 = yield (0, account_js_1.getMinimumBalanceForRentExemptAccount)(connection);
        const transaction = new web3_js_1.Transaction().add(web3_js_1.SystemProgram.createAccount({
          fromPubkey: payer.publicKey,
          newAccountPubkey: keypair.publicKey,
          space: account_js_1.ACCOUNT_SIZE,
          lamports: lamports2,
          programId
        }), web3_js_1.SystemProgram.transfer({
          fromPubkey: payer.publicKey,
          toPubkey: keypair.publicKey,
          lamports: amount2
        }), (0, initializeAccount_js_1.createInitializeAccountInstruction)(keypair.publicKey, nativeMint, owner, programId));
        yield (0, web3_js_1.sendAndConfirmTransaction)(connection, transaction, [payer, keypair], confirmOptions);
        return keypair.publicKey;
      });
    }
    exports.createWrappedNativeAccount = createWrappedNativeAccount;
  }
});

// ../../node_modules/@solana/spl-token/lib/cjs/instructions/freezeAccount.js
var require_freezeAccount = __commonJS({
  "../../node_modules/@solana/spl-token/lib/cjs/instructions/freezeAccount.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.decodeFreezeAccountInstructionUnchecked = exports.decodeFreezeAccountInstruction = exports.createFreezeAccountInstruction = exports.freezeAccountInstructionData = void 0;
    var buffer_layout_1 = require_Layout();
    var web3_js_1 = (init_index_browser_esm(), __toCommonJS(index_browser_esm_exports));
    var constants_js_1 = require_constants();
    var errors_js_1 = require_errors2();
    var internal_js_1 = require_internal2();
    var types_js_1 = require_types3();
    exports.freezeAccountInstructionData = (0, buffer_layout_1.struct)([(0, buffer_layout_1.u8)("instruction")]);
    function createFreezeAccountInstruction2(account, mint, authority, multiSigners = [], programId = constants_js_1.TOKEN_PROGRAM_ID) {
      const keys = (0, internal_js_1.addSigners)([
        { pubkey: account, isSigner: false, isWritable: true },
        { pubkey: mint, isSigner: false, isWritable: false }
      ], authority, multiSigners);
      const data = Buffer.alloc(exports.freezeAccountInstructionData.span);
      exports.freezeAccountInstructionData.encode({ instruction: types_js_1.TokenInstruction.FreezeAccount }, data);
      return new web3_js_1.TransactionInstruction({ keys, programId, data });
    }
    exports.createFreezeAccountInstruction = createFreezeAccountInstruction2;
    function decodeFreezeAccountInstruction2(instruction, programId = constants_js_1.TOKEN_PROGRAM_ID) {
      if (!instruction.programId.equals(programId))
        throw new errors_js_1.TokenInvalidInstructionProgramError();
      if (instruction.data.length !== exports.freezeAccountInstructionData.span)
        throw new errors_js_1.TokenInvalidInstructionDataError();
      const { keys: { account, mint, authority, multiSigners }, data } = decodeFreezeAccountInstructionUnchecked(instruction);
      if (data.instruction !== types_js_1.TokenInstruction.FreezeAccount)
        throw new errors_js_1.TokenInvalidInstructionTypeError();
      if (!account || !mint || !authority)
        throw new errors_js_1.TokenInvalidInstructionKeysError();
      return {
        programId,
        keys: {
          account,
          mint,
          authority,
          multiSigners
        },
        data
      };
    }
    exports.decodeFreezeAccountInstruction = decodeFreezeAccountInstruction2;
    function decodeFreezeAccountInstructionUnchecked({ programId, keys: [account, mint, authority, ...multiSigners], data }) {
      return {
        programId,
        keys: {
          account,
          mint,
          authority,
          multiSigners
        },
        data: exports.freezeAccountInstructionData.decode(data)
      };
    }
    exports.decodeFreezeAccountInstructionUnchecked = decodeFreezeAccountInstructionUnchecked;
  }
});

// ../../node_modules/@solana/spl-token/lib/cjs/actions/freezeAccount.js
var require_freezeAccount2 = __commonJS({
  "../../node_modules/@solana/spl-token/lib/cjs/actions/freezeAccount.js"(exports) {
    "use strict";
    var __awaiter = exports && exports.__awaiter || function(thisArg, _arguments, P, generator) {
      function adopt(value) {
        return value instanceof P ? value : new P(function(resolve) {
          resolve(value);
        });
      }
      return new (P || (P = Promise))(function(resolve, reject) {
        function fulfilled(value) {
          try {
            step(generator.next(value));
          } catch (e2) {
            reject(e2);
          }
        }
        function rejected(value) {
          try {
            step(generator["throw"](value));
          } catch (e2) {
            reject(e2);
          }
        }
        function step(result) {
          result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
        }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
      });
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.freezeAccount = void 0;
    var web3_js_1 = (init_index_browser_esm(), __toCommonJS(index_browser_esm_exports));
    var constants_js_1 = require_constants();
    var freezeAccount_js_1 = require_freezeAccount();
    var internal_js_1 = require_internal3();
    function freezeAccount(connection, payer, account, mint, authority, multiSigners = [], confirmOptions, programId = constants_js_1.TOKEN_PROGRAM_ID) {
      return __awaiter(this, void 0, void 0, function* () {
        const [authorityPublicKey, signers] = (0, internal_js_1.getSigners)(authority, multiSigners);
        const transaction = new web3_js_1.Transaction().add((0, freezeAccount_js_1.createFreezeAccountInstruction)(account, mint, authorityPublicKey, multiSigners, programId));
        return yield (0, web3_js_1.sendAndConfirmTransaction)(connection, transaction, [payer, ...signers], confirmOptions);
      });
    }
    exports.freezeAccount = freezeAccount;
  }
});

// ../../node_modules/@solana/spl-token/lib/cjs/actions/getOrCreateAssociatedTokenAccount.js
var require_getOrCreateAssociatedTokenAccount = __commonJS({
  "../../node_modules/@solana/spl-token/lib/cjs/actions/getOrCreateAssociatedTokenAccount.js"(exports) {
    "use strict";
    var __awaiter = exports && exports.__awaiter || function(thisArg, _arguments, P, generator) {
      function adopt(value) {
        return value instanceof P ? value : new P(function(resolve) {
          resolve(value);
        });
      }
      return new (P || (P = Promise))(function(resolve, reject) {
        function fulfilled(value) {
          try {
            step(generator.next(value));
          } catch (e2) {
            reject(e2);
          }
        }
        function rejected(value) {
          try {
            step(generator["throw"](value));
          } catch (e2) {
            reject(e2);
          }
        }
        function step(result) {
          result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
        }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
      });
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.getOrCreateAssociatedTokenAccount = void 0;
    var web3_js_1 = (init_index_browser_esm(), __toCommonJS(index_browser_esm_exports));
    var constants_js_1 = require_constants();
    var errors_js_1 = require_errors2();
    var associatedTokenAccount_js_1 = require_associatedTokenAccount();
    var account_js_1 = require_account();
    var mint_js_1 = require_mint();
    function getOrCreateAssociatedTokenAccount(connection, payer, mint, owner, allowOwnerOffCurve = false, commitment, confirmOptions, programId = constants_js_1.TOKEN_PROGRAM_ID, associatedTokenProgramId = constants_js_1.ASSOCIATED_TOKEN_PROGRAM_ID) {
      return __awaiter(this, void 0, void 0, function* () {
        const associatedToken = (0, mint_js_1.getAssociatedTokenAddressSync)(mint, owner, allowOwnerOffCurve, programId, associatedTokenProgramId);
        let account;
        try {
          account = yield (0, account_js_1.getAccount)(connection, associatedToken, commitment, programId);
        } catch (error2) {
          if (error2 instanceof errors_js_1.TokenAccountNotFoundError || error2 instanceof errors_js_1.TokenInvalidAccountOwnerError) {
            try {
              const transaction = new web3_js_1.Transaction().add((0, associatedTokenAccount_js_1.createAssociatedTokenAccountInstruction)(payer.publicKey, associatedToken, owner, mint, programId, associatedTokenProgramId));
              yield (0, web3_js_1.sendAndConfirmTransaction)(connection, transaction, [payer], confirmOptions);
            } catch (error3) {
            }
            account = yield (0, account_js_1.getAccount)(connection, associatedToken, commitment, programId);
          } else {
            throw error2;
          }
        }
        if (!account.mint.equals(mint))
          throw new errors_js_1.TokenInvalidMintError();
        if (!account.owner.equals(owner))
          throw new errors_js_1.TokenInvalidOwnerError();
        return account;
      });
    }
    exports.getOrCreateAssociatedTokenAccount = getOrCreateAssociatedTokenAccount;
  }
});

// ../../node_modules/@solana/spl-token/lib/cjs/instructions/mintTo.js
var require_mintTo = __commonJS({
  "../../node_modules/@solana/spl-token/lib/cjs/instructions/mintTo.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.decodeMintToInstructionUnchecked = exports.decodeMintToInstruction = exports.createMintToInstruction = exports.mintToInstructionData = void 0;
    var buffer_layout_1 = require_Layout();
    var buffer_layout_utils_1 = require_cjs();
    var web3_js_1 = (init_index_browser_esm(), __toCommonJS(index_browser_esm_exports));
    var constants_js_1 = require_constants();
    var errors_js_1 = require_errors2();
    var internal_js_1 = require_internal2();
    var types_js_1 = require_types3();
    exports.mintToInstructionData = (0, buffer_layout_1.struct)([(0, buffer_layout_1.u8)("instruction"), (0, buffer_layout_utils_1.u64)("amount")]);
    function createMintToInstruction2(mint, destination, authority, amount2, multiSigners = [], programId = constants_js_1.TOKEN_PROGRAM_ID) {
      const keys = (0, internal_js_1.addSigners)([
        { pubkey: mint, isSigner: false, isWritable: true },
        { pubkey: destination, isSigner: false, isWritable: true }
      ], authority, multiSigners);
      const data = Buffer.alloc(exports.mintToInstructionData.span);
      exports.mintToInstructionData.encode({
        instruction: types_js_1.TokenInstruction.MintTo,
        amount: BigInt(amount2)
      }, data);
      return new web3_js_1.TransactionInstruction({ keys, programId, data });
    }
    exports.createMintToInstruction = createMintToInstruction2;
    function decodeMintToInstruction2(instruction, programId = constants_js_1.TOKEN_PROGRAM_ID) {
      if (!instruction.programId.equals(programId))
        throw new errors_js_1.TokenInvalidInstructionProgramError();
      if (instruction.data.length !== exports.mintToInstructionData.span)
        throw new errors_js_1.TokenInvalidInstructionDataError();
      const { keys: { mint, destination, authority, multiSigners }, data } = decodeMintToInstructionUnchecked(instruction);
      if (data.instruction !== types_js_1.TokenInstruction.MintTo)
        throw new errors_js_1.TokenInvalidInstructionTypeError();
      if (!mint || !destination || !authority)
        throw new errors_js_1.TokenInvalidInstructionKeysError();
      return {
        programId,
        keys: {
          mint,
          destination,
          authority,
          multiSigners
        },
        data
      };
    }
    exports.decodeMintToInstruction = decodeMintToInstruction2;
    function decodeMintToInstructionUnchecked({ programId, keys: [mint, destination, authority, ...multiSigners], data }) {
      return {
        programId,
        keys: {
          mint,
          destination,
          authority,
          multiSigners
        },
        data: exports.mintToInstructionData.decode(data)
      };
    }
    exports.decodeMintToInstructionUnchecked = decodeMintToInstructionUnchecked;
  }
});

// ../../node_modules/@solana/spl-token/lib/cjs/actions/mintTo.js
var require_mintTo2 = __commonJS({
  "../../node_modules/@solana/spl-token/lib/cjs/actions/mintTo.js"(exports) {
    "use strict";
    var __awaiter = exports && exports.__awaiter || function(thisArg, _arguments, P, generator) {
      function adopt(value) {
        return value instanceof P ? value : new P(function(resolve) {
          resolve(value);
        });
      }
      return new (P || (P = Promise))(function(resolve, reject) {
        function fulfilled(value) {
          try {
            step(generator.next(value));
          } catch (e2) {
            reject(e2);
          }
        }
        function rejected(value) {
          try {
            step(generator["throw"](value));
          } catch (e2) {
            reject(e2);
          }
        }
        function step(result) {
          result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
        }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
      });
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.mintTo = void 0;
    var web3_js_1 = (init_index_browser_esm(), __toCommonJS(index_browser_esm_exports));
    var constants_js_1 = require_constants();
    var mintTo_js_1 = require_mintTo();
    var internal_js_1 = require_internal3();
    function mintTo(connection, payer, mint, destination, authority, amount2, multiSigners = [], confirmOptions, programId = constants_js_1.TOKEN_PROGRAM_ID) {
      return __awaiter(this, void 0, void 0, function* () {
        const [authorityPublicKey, signers] = (0, internal_js_1.getSigners)(authority, multiSigners);
        const transaction = new web3_js_1.Transaction().add((0, mintTo_js_1.createMintToInstruction)(mint, destination, authorityPublicKey, amount2, multiSigners, programId));
        return yield (0, web3_js_1.sendAndConfirmTransaction)(connection, transaction, [payer, ...signers], confirmOptions);
      });
    }
    exports.mintTo = mintTo;
  }
});

// ../../node_modules/@solana/spl-token/lib/cjs/instructions/mintToChecked.js
var require_mintToChecked = __commonJS({
  "../../node_modules/@solana/spl-token/lib/cjs/instructions/mintToChecked.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.decodeMintToCheckedInstructionUnchecked = exports.decodeMintToCheckedInstruction = exports.createMintToCheckedInstruction = exports.mintToCheckedInstructionData = void 0;
    var buffer_layout_1 = require_Layout();
    var buffer_layout_utils_1 = require_cjs();
    var web3_js_1 = (init_index_browser_esm(), __toCommonJS(index_browser_esm_exports));
    var constants_js_1 = require_constants();
    var errors_js_1 = require_errors2();
    var internal_js_1 = require_internal2();
    var types_js_1 = require_types3();
    exports.mintToCheckedInstructionData = (0, buffer_layout_1.struct)([
      (0, buffer_layout_1.u8)("instruction"),
      (0, buffer_layout_utils_1.u64)("amount"),
      (0, buffer_layout_1.u8)("decimals")
    ]);
    function createMintToCheckedInstruction2(mint, destination, authority, amount2, decimals, multiSigners = [], programId = constants_js_1.TOKEN_PROGRAM_ID) {
      const keys = (0, internal_js_1.addSigners)([
        { pubkey: mint, isSigner: false, isWritable: true },
        { pubkey: destination, isSigner: false, isWritable: true }
      ], authority, multiSigners);
      const data = Buffer.alloc(exports.mintToCheckedInstructionData.span);
      exports.mintToCheckedInstructionData.encode({
        instruction: types_js_1.TokenInstruction.MintToChecked,
        amount: BigInt(amount2),
        decimals
      }, data);
      return new web3_js_1.TransactionInstruction({ keys, programId, data });
    }
    exports.createMintToCheckedInstruction = createMintToCheckedInstruction2;
    function decodeMintToCheckedInstruction2(instruction, programId = constants_js_1.TOKEN_PROGRAM_ID) {
      if (!instruction.programId.equals(programId))
        throw new errors_js_1.TokenInvalidInstructionProgramError();
      if (instruction.data.length !== exports.mintToCheckedInstructionData.span)
        throw new errors_js_1.TokenInvalidInstructionDataError();
      const { keys: { mint, destination, authority, multiSigners }, data } = decodeMintToCheckedInstructionUnchecked(instruction);
      if (data.instruction !== types_js_1.TokenInstruction.MintToChecked)
        throw new errors_js_1.TokenInvalidInstructionTypeError();
      if (!mint || !destination || !authority)
        throw new errors_js_1.TokenInvalidInstructionKeysError();
      return {
        programId,
        keys: {
          mint,
          destination,
          authority,
          multiSigners
        },
        data
      };
    }
    exports.decodeMintToCheckedInstruction = decodeMintToCheckedInstruction2;
    function decodeMintToCheckedInstructionUnchecked({ programId, keys: [mint, destination, authority, ...multiSigners], data }) {
      return {
        programId,
        keys: {
          mint,
          destination,
          authority,
          multiSigners
        },
        data: exports.mintToCheckedInstructionData.decode(data)
      };
    }
    exports.decodeMintToCheckedInstructionUnchecked = decodeMintToCheckedInstructionUnchecked;
  }
});

// ../../node_modules/@solana/spl-token/lib/cjs/actions/mintToChecked.js
var require_mintToChecked2 = __commonJS({
  "../../node_modules/@solana/spl-token/lib/cjs/actions/mintToChecked.js"(exports) {
    "use strict";
    var __awaiter = exports && exports.__awaiter || function(thisArg, _arguments, P, generator) {
      function adopt(value) {
        return value instanceof P ? value : new P(function(resolve) {
          resolve(value);
        });
      }
      return new (P || (P = Promise))(function(resolve, reject) {
        function fulfilled(value) {
          try {
            step(generator.next(value));
          } catch (e2) {
            reject(e2);
          }
        }
        function rejected(value) {
          try {
            step(generator["throw"](value));
          } catch (e2) {
            reject(e2);
          }
        }
        function step(result) {
          result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
        }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
      });
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.mintToChecked = void 0;
    var web3_js_1 = (init_index_browser_esm(), __toCommonJS(index_browser_esm_exports));
    var constants_js_1 = require_constants();
    var mintToChecked_js_1 = require_mintToChecked();
    var internal_js_1 = require_internal3();
    function mintToChecked(connection, payer, mint, destination, authority, amount2, decimals, multiSigners = [], confirmOptions, programId = constants_js_1.TOKEN_PROGRAM_ID) {
      return __awaiter(this, void 0, void 0, function* () {
        const [authorityPublicKey, signers] = (0, internal_js_1.getSigners)(authority, multiSigners);
        const transaction = new web3_js_1.Transaction().add((0, mintToChecked_js_1.createMintToCheckedInstruction)(mint, destination, authorityPublicKey, amount2, decimals, multiSigners, programId));
        return yield (0, web3_js_1.sendAndConfirmTransaction)(connection, transaction, [payer, ...signers], confirmOptions);
      });
    }
    exports.mintToChecked = mintToChecked;
  }
});

// ../../node_modules/@solana/spl-token/lib/cjs/actions/recoverNested.js
var require_recoverNested = __commonJS({
  "../../node_modules/@solana/spl-token/lib/cjs/actions/recoverNested.js"(exports) {
    "use strict";
    var __awaiter = exports && exports.__awaiter || function(thisArg, _arguments, P, generator) {
      function adopt(value) {
        return value instanceof P ? value : new P(function(resolve) {
          resolve(value);
        });
      }
      return new (P || (P = Promise))(function(resolve, reject) {
        function fulfilled(value) {
          try {
            step(generator.next(value));
          } catch (e2) {
            reject(e2);
          }
        }
        function rejected(value) {
          try {
            step(generator["throw"](value));
          } catch (e2) {
            reject(e2);
          }
        }
        function step(result) {
          result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
        }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
      });
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.recoverNested = void 0;
    var web3_js_1 = (init_index_browser_esm(), __toCommonJS(index_browser_esm_exports));
    var constants_js_1 = require_constants();
    var associatedTokenAccount_js_1 = require_associatedTokenAccount();
    var mint_js_1 = require_mint();
    function recoverNested(connection, payer, owner, mint, nestedMint, confirmOptions, programId = constants_js_1.TOKEN_PROGRAM_ID, associatedTokenProgramId = constants_js_1.ASSOCIATED_TOKEN_PROGRAM_ID) {
      return __awaiter(this, void 0, void 0, function* () {
        const ownerAssociatedToken = (0, mint_js_1.getAssociatedTokenAddressSync)(mint, owner.publicKey, false, programId, associatedTokenProgramId);
        const destinationAssociatedToken = (0, mint_js_1.getAssociatedTokenAddressSync)(nestedMint, owner.publicKey, false, programId, associatedTokenProgramId);
        const nestedAssociatedToken = (0, mint_js_1.getAssociatedTokenAddressSync)(nestedMint, ownerAssociatedToken, true, programId, associatedTokenProgramId);
        const transaction = new web3_js_1.Transaction().add((0, associatedTokenAccount_js_1.createRecoverNestedInstruction)(nestedAssociatedToken, nestedMint, destinationAssociatedToken, ownerAssociatedToken, mint, owner.publicKey, programId, associatedTokenProgramId));
        return yield (0, web3_js_1.sendAndConfirmTransaction)(connection, transaction, [payer, owner], confirmOptions);
      });
    }
    exports.recoverNested = recoverNested;
  }
});

// ../../node_modules/@solana/spl-token/lib/cjs/instructions/revoke.js
var require_revoke = __commonJS({
  "../../node_modules/@solana/spl-token/lib/cjs/instructions/revoke.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.decodeRevokeInstructionUnchecked = exports.decodeRevokeInstruction = exports.createRevokeInstruction = exports.revokeInstructionData = void 0;
    var buffer_layout_1 = require_Layout();
    var web3_js_1 = (init_index_browser_esm(), __toCommonJS(index_browser_esm_exports));
    var constants_js_1 = require_constants();
    var errors_js_1 = require_errors2();
    var internal_js_1 = require_internal2();
    var types_js_1 = require_types3();
    exports.revokeInstructionData = (0, buffer_layout_1.struct)([(0, buffer_layout_1.u8)("instruction")]);
    function createRevokeInstruction3(account, owner, multiSigners = [], programId = constants_js_1.TOKEN_PROGRAM_ID) {
      const keys = (0, internal_js_1.addSigners)([{ pubkey: account, isSigner: false, isWritable: true }], owner, multiSigners);
      const data = Buffer.alloc(exports.revokeInstructionData.span);
      exports.revokeInstructionData.encode({ instruction: types_js_1.TokenInstruction.Revoke }, data);
      return new web3_js_1.TransactionInstruction({ keys, programId, data });
    }
    exports.createRevokeInstruction = createRevokeInstruction3;
    function decodeRevokeInstruction2(instruction, programId = constants_js_1.TOKEN_PROGRAM_ID) {
      if (!instruction.programId.equals(programId))
        throw new errors_js_1.TokenInvalidInstructionProgramError();
      if (instruction.data.length !== exports.revokeInstructionData.span)
        throw new errors_js_1.TokenInvalidInstructionDataError();
      const { keys: { account, owner, multiSigners }, data } = decodeRevokeInstructionUnchecked(instruction);
      if (data.instruction !== types_js_1.TokenInstruction.Revoke)
        throw new errors_js_1.TokenInvalidInstructionTypeError();
      if (!account || !owner)
        throw new errors_js_1.TokenInvalidInstructionKeysError();
      return {
        programId,
        keys: {
          account,
          owner,
          multiSigners
        },
        data
      };
    }
    exports.decodeRevokeInstruction = decodeRevokeInstruction2;
    function decodeRevokeInstructionUnchecked({ programId, keys: [account, owner, ...multiSigners], data }) {
      return {
        programId,
        keys: {
          account,
          owner,
          multiSigners
        },
        data: exports.revokeInstructionData.decode(data)
      };
    }
    exports.decodeRevokeInstructionUnchecked = decodeRevokeInstructionUnchecked;
  }
});

// ../../node_modules/@solana/spl-token/lib/cjs/actions/revoke.js
var require_revoke2 = __commonJS({
  "../../node_modules/@solana/spl-token/lib/cjs/actions/revoke.js"(exports) {
    "use strict";
    var __awaiter = exports && exports.__awaiter || function(thisArg, _arguments, P, generator) {
      function adopt(value) {
        return value instanceof P ? value : new P(function(resolve) {
          resolve(value);
        });
      }
      return new (P || (P = Promise))(function(resolve, reject) {
        function fulfilled(value) {
          try {
            step(generator.next(value));
          } catch (e2) {
            reject(e2);
          }
        }
        function rejected(value) {
          try {
            step(generator["throw"](value));
          } catch (e2) {
            reject(e2);
          }
        }
        function step(result) {
          result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
        }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
      });
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.revoke = void 0;
    var web3_js_1 = (init_index_browser_esm(), __toCommonJS(index_browser_esm_exports));
    var constants_js_1 = require_constants();
    var revoke_js_1 = require_revoke();
    var internal_js_1 = require_internal3();
    function revoke(connection, payer, account, owner, multiSigners = [], confirmOptions, programId = constants_js_1.TOKEN_PROGRAM_ID) {
      return __awaiter(this, void 0, void 0, function* () {
        const [ownerPublicKey, signers] = (0, internal_js_1.getSigners)(owner, multiSigners);
        const transaction = new web3_js_1.Transaction().add((0, revoke_js_1.createRevokeInstruction)(account, ownerPublicKey, multiSigners, programId));
        return yield (0, web3_js_1.sendAndConfirmTransaction)(connection, transaction, [payer, ...signers], confirmOptions);
      });
    }
    exports.revoke = revoke;
  }
});

// ../../node_modules/@solana/spl-token/lib/cjs/instructions/setAuthority.js
var require_setAuthority = __commonJS({
  "../../node_modules/@solana/spl-token/lib/cjs/instructions/setAuthority.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.decodeSetAuthorityInstructionUnchecked = exports.decodeSetAuthorityInstruction = exports.createSetAuthorityInstruction = exports.setAuthorityInstructionData = exports.AuthorityType = void 0;
    var buffer_layout_1 = require_Layout();
    var buffer_layout_utils_1 = require_cjs();
    var web3_js_1 = (init_index_browser_esm(), __toCommonJS(index_browser_esm_exports));
    var constants_js_1 = require_constants();
    var errors_js_1 = require_errors2();
    var internal_js_1 = require_internal2();
    var types_js_1 = require_types3();
    var AuthorityType3;
    (function(AuthorityType4) {
      AuthorityType4[AuthorityType4["MintTokens"] = 0] = "MintTokens";
      AuthorityType4[AuthorityType4["FreezeAccount"] = 1] = "FreezeAccount";
      AuthorityType4[AuthorityType4["AccountOwner"] = 2] = "AccountOwner";
      AuthorityType4[AuthorityType4["CloseAccount"] = 3] = "CloseAccount";
      AuthorityType4[AuthorityType4["TransferFeeConfig"] = 4] = "TransferFeeConfig";
      AuthorityType4[AuthorityType4["WithheldWithdraw"] = 5] = "WithheldWithdraw";
      AuthorityType4[AuthorityType4["CloseMint"] = 6] = "CloseMint";
      AuthorityType4[AuthorityType4["InterestRate"] = 7] = "InterestRate";
      AuthorityType4[AuthorityType4["PermanentDelegate"] = 8] = "PermanentDelegate";
      AuthorityType4[AuthorityType4["ConfidentialTransferMint"] = 9] = "ConfidentialTransferMint";
      AuthorityType4[AuthorityType4["TransferHookProgramId"] = 10] = "TransferHookProgramId";
      AuthorityType4[AuthorityType4["ConfidentialTransferFeeConfig"] = 11] = "ConfidentialTransferFeeConfig";
      AuthorityType4[AuthorityType4["MetadataPointer"] = 12] = "MetadataPointer";
    })(AuthorityType3 || (exports.AuthorityType = AuthorityType3 = {}));
    exports.setAuthorityInstructionData = (0, buffer_layout_1.struct)([
      (0, buffer_layout_1.u8)("instruction"),
      (0, buffer_layout_1.u8)("authorityType"),
      (0, buffer_layout_1.u8)("newAuthorityOption"),
      (0, buffer_layout_utils_1.publicKey)("newAuthority")
    ]);
    function createSetAuthorityInstruction4(account, currentAuthority, authorityType, newAuthority, multiSigners = [], programId = constants_js_1.TOKEN_PROGRAM_ID) {
      const keys = (0, internal_js_1.addSigners)([{ pubkey: account, isSigner: false, isWritable: true }], currentAuthority, multiSigners);
      const data = Buffer.alloc(exports.setAuthorityInstructionData.span);
      exports.setAuthorityInstructionData.encode({
        instruction: types_js_1.TokenInstruction.SetAuthority,
        authorityType,
        newAuthorityOption: newAuthority ? 1 : 0,
        newAuthority: newAuthority || new web3_js_1.PublicKey(0)
      }, data);
      return new web3_js_1.TransactionInstruction({ keys, programId, data });
    }
    exports.createSetAuthorityInstruction = createSetAuthorityInstruction4;
    function decodeSetAuthorityInstruction2(instruction, programId = constants_js_1.TOKEN_PROGRAM_ID) {
      if (!instruction.programId.equals(programId))
        throw new errors_js_1.TokenInvalidInstructionProgramError();
      if (instruction.data.length !== exports.setAuthorityInstructionData.span)
        throw new errors_js_1.TokenInvalidInstructionDataError();
      const { keys: { account, currentAuthority, multiSigners }, data } = decodeSetAuthorityInstructionUnchecked(instruction);
      if (data.instruction !== types_js_1.TokenInstruction.SetAuthority)
        throw new errors_js_1.TokenInvalidInstructionTypeError();
      if (!account || !currentAuthority)
        throw new errors_js_1.TokenInvalidInstructionKeysError();
      return {
        programId,
        keys: {
          account,
          currentAuthority,
          multiSigners
        },
        data
      };
    }
    exports.decodeSetAuthorityInstruction = decodeSetAuthorityInstruction2;
    function decodeSetAuthorityInstructionUnchecked({ programId, keys: [account, currentAuthority, ...multiSigners], data }) {
      const { instruction, authorityType, newAuthorityOption, newAuthority } = exports.setAuthorityInstructionData.decode(data);
      return {
        programId,
        keys: {
          account,
          currentAuthority,
          multiSigners
        },
        data: {
          instruction,
          authorityType,
          newAuthority: newAuthorityOption ? newAuthority : null
        }
      };
    }
    exports.decodeSetAuthorityInstructionUnchecked = decodeSetAuthorityInstructionUnchecked;
  }
});

// ../../node_modules/@solana/spl-token/lib/cjs/actions/setAuthority.js
var require_setAuthority2 = __commonJS({
  "../../node_modules/@solana/spl-token/lib/cjs/actions/setAuthority.js"(exports) {
    "use strict";
    var __awaiter = exports && exports.__awaiter || function(thisArg, _arguments, P, generator) {
      function adopt(value) {
        return value instanceof P ? value : new P(function(resolve) {
          resolve(value);
        });
      }
      return new (P || (P = Promise))(function(resolve, reject) {
        function fulfilled(value) {
          try {
            step(generator.next(value));
          } catch (e2) {
            reject(e2);
          }
        }
        function rejected(value) {
          try {
            step(generator["throw"](value));
          } catch (e2) {
            reject(e2);
          }
        }
        function step(result) {
          result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
        }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
      });
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.setAuthority = void 0;
    var web3_js_1 = (init_index_browser_esm(), __toCommonJS(index_browser_esm_exports));
    var constants_js_1 = require_constants();
    var setAuthority_js_1 = require_setAuthority();
    var internal_js_1 = require_internal3();
    function setAuthority(connection, payer, account, currentAuthority, authorityType, newAuthority, multiSigners = [], confirmOptions, programId = constants_js_1.TOKEN_PROGRAM_ID) {
      return __awaiter(this, void 0, void 0, function* () {
        const [currentAuthorityPublicKey, signers] = (0, internal_js_1.getSigners)(currentAuthority, multiSigners);
        const transaction = new web3_js_1.Transaction().add((0, setAuthority_js_1.createSetAuthorityInstruction)(account, currentAuthorityPublicKey, authorityType, newAuthority, multiSigners, programId));
        return yield (0, web3_js_1.sendAndConfirmTransaction)(connection, transaction, [payer, ...signers], confirmOptions);
      });
    }
    exports.setAuthority = setAuthority;
  }
});

// ../../node_modules/@solana/spl-token/lib/cjs/actions/syncNative.js
var require_syncNative2 = __commonJS({
  "../../node_modules/@solana/spl-token/lib/cjs/actions/syncNative.js"(exports) {
    "use strict";
    var __awaiter = exports && exports.__awaiter || function(thisArg, _arguments, P, generator) {
      function adopt(value) {
        return value instanceof P ? value : new P(function(resolve) {
          resolve(value);
        });
      }
      return new (P || (P = Promise))(function(resolve, reject) {
        function fulfilled(value) {
          try {
            step(generator.next(value));
          } catch (e2) {
            reject(e2);
          }
        }
        function rejected(value) {
          try {
            step(generator["throw"](value));
          } catch (e2) {
            reject(e2);
          }
        }
        function step(result) {
          result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
        }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
      });
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.syncNative = void 0;
    var web3_js_1 = (init_index_browser_esm(), __toCommonJS(index_browser_esm_exports));
    var constants_js_1 = require_constants();
    var syncNative_js_1 = require_syncNative();
    function syncNative(connection, payer, account, confirmOptions, programId = constants_js_1.TOKEN_PROGRAM_ID) {
      return __awaiter(this, void 0, void 0, function* () {
        const transaction = new web3_js_1.Transaction().add((0, syncNative_js_1.createSyncNativeInstruction)(account, programId));
        return yield (0, web3_js_1.sendAndConfirmTransaction)(connection, transaction, [payer], confirmOptions);
      });
    }
    exports.syncNative = syncNative;
  }
});

// ../../node_modules/@solana/spl-token/lib/cjs/instructions/thawAccount.js
var require_thawAccount = __commonJS({
  "../../node_modules/@solana/spl-token/lib/cjs/instructions/thawAccount.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.decodeThawAccountInstructionUnchecked = exports.decodeThawAccountInstruction = exports.createThawAccountInstruction = exports.thawAccountInstructionData = void 0;
    var buffer_layout_1 = require_Layout();
    var web3_js_1 = (init_index_browser_esm(), __toCommonJS(index_browser_esm_exports));
    var constants_js_1 = require_constants();
    var errors_js_1 = require_errors2();
    var internal_js_1 = require_internal2();
    var types_js_1 = require_types3();
    exports.thawAccountInstructionData = (0, buffer_layout_1.struct)([(0, buffer_layout_1.u8)("instruction")]);
    function createThawAccountInstruction2(account, mint, authority, multiSigners = [], programId = constants_js_1.TOKEN_PROGRAM_ID) {
      const keys = (0, internal_js_1.addSigners)([
        { pubkey: account, isSigner: false, isWritable: true },
        { pubkey: mint, isSigner: false, isWritable: false }
      ], authority, multiSigners);
      const data = Buffer.alloc(exports.thawAccountInstructionData.span);
      exports.thawAccountInstructionData.encode({ instruction: types_js_1.TokenInstruction.ThawAccount }, data);
      return new web3_js_1.TransactionInstruction({ keys, programId, data });
    }
    exports.createThawAccountInstruction = createThawAccountInstruction2;
    function decodeThawAccountInstruction2(instruction, programId = constants_js_1.TOKEN_PROGRAM_ID) {
      if (!instruction.programId.equals(programId))
        throw new errors_js_1.TokenInvalidInstructionProgramError();
      if (instruction.data.length !== exports.thawAccountInstructionData.span)
        throw new errors_js_1.TokenInvalidInstructionDataError();
      const { keys: { account, mint, authority, multiSigners }, data } = decodeThawAccountInstructionUnchecked(instruction);
      if (data.instruction !== types_js_1.TokenInstruction.ThawAccount)
        throw new errors_js_1.TokenInvalidInstructionTypeError();
      if (!account || !mint || !authority)
        throw new errors_js_1.TokenInvalidInstructionKeysError();
      return {
        programId,
        keys: {
          account,
          mint,
          authority,
          multiSigners
        },
        data
      };
    }
    exports.decodeThawAccountInstruction = decodeThawAccountInstruction2;
    function decodeThawAccountInstructionUnchecked({ programId, keys: [account, mint, authority, ...multiSigners], data }) {
      return {
        programId,
        keys: {
          account,
          mint,
          authority,
          multiSigners
        },
        data: exports.thawAccountInstructionData.decode(data)
      };
    }
    exports.decodeThawAccountInstructionUnchecked = decodeThawAccountInstructionUnchecked;
  }
});

// ../../node_modules/@solana/spl-token/lib/cjs/actions/thawAccount.js
var require_thawAccount2 = __commonJS({
  "../../node_modules/@solana/spl-token/lib/cjs/actions/thawAccount.js"(exports) {
    "use strict";
    var __awaiter = exports && exports.__awaiter || function(thisArg, _arguments, P, generator) {
      function adopt(value) {
        return value instanceof P ? value : new P(function(resolve) {
          resolve(value);
        });
      }
      return new (P || (P = Promise))(function(resolve, reject) {
        function fulfilled(value) {
          try {
            step(generator.next(value));
          } catch (e2) {
            reject(e2);
          }
        }
        function rejected(value) {
          try {
            step(generator["throw"](value));
          } catch (e2) {
            reject(e2);
          }
        }
        function step(result) {
          result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
        }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
      });
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.thawAccount = void 0;
    var web3_js_1 = (init_index_browser_esm(), __toCommonJS(index_browser_esm_exports));
    var constants_js_1 = require_constants();
    var thawAccount_js_1 = require_thawAccount();
    var internal_js_1 = require_internal3();
    function thawAccount(connection, payer, account, mint, authority, multiSigners = [], confirmOptions, programId = constants_js_1.TOKEN_PROGRAM_ID) {
      return __awaiter(this, void 0, void 0, function* () {
        const [authorityPublicKey, signers] = (0, internal_js_1.getSigners)(authority, multiSigners);
        const transaction = new web3_js_1.Transaction().add((0, thawAccount_js_1.createThawAccountInstruction)(account, mint, authorityPublicKey, multiSigners, programId));
        return yield (0, web3_js_1.sendAndConfirmTransaction)(connection, transaction, [payer, ...signers], confirmOptions);
      });
    }
    exports.thawAccount = thawAccount;
  }
});

// ../../node_modules/@solana/spl-token/lib/cjs/instructions/transfer.js
var require_transfer = __commonJS({
  "../../node_modules/@solana/spl-token/lib/cjs/instructions/transfer.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.decodeTransferInstructionUnchecked = exports.decodeTransferInstruction = exports.createTransferInstruction = exports.transferInstructionData = void 0;
    var buffer_layout_1 = require_Layout();
    var buffer_layout_utils_1 = require_cjs();
    var web3_js_1 = (init_index_browser_esm(), __toCommonJS(index_browser_esm_exports));
    var constants_js_1 = require_constants();
    var errors_js_1 = require_errors2();
    var internal_js_1 = require_internal2();
    var types_js_1 = require_types3();
    exports.transferInstructionData = (0, buffer_layout_1.struct)([(0, buffer_layout_1.u8)("instruction"), (0, buffer_layout_utils_1.u64)("amount")]);
    function createTransferInstruction4(source, destination, owner, amount2, multiSigners = [], programId = constants_js_1.TOKEN_PROGRAM_ID) {
      const keys = (0, internal_js_1.addSigners)([
        { pubkey: source, isSigner: false, isWritable: true },
        { pubkey: destination, isSigner: false, isWritable: true }
      ], owner, multiSigners);
      const data = Buffer.alloc(exports.transferInstructionData.span);
      exports.transferInstructionData.encode({
        instruction: types_js_1.TokenInstruction.Transfer,
        amount: BigInt(amount2)
      }, data);
      return new web3_js_1.TransactionInstruction({ keys, programId, data });
    }
    exports.createTransferInstruction = createTransferInstruction4;
    function decodeTransferInstruction2(instruction, programId = constants_js_1.TOKEN_PROGRAM_ID) {
      if (!instruction.programId.equals(programId))
        throw new errors_js_1.TokenInvalidInstructionProgramError();
      if (instruction.data.length !== exports.transferInstructionData.span)
        throw new errors_js_1.TokenInvalidInstructionDataError();
      const { keys: { source, destination, owner, multiSigners }, data } = decodeTransferInstructionUnchecked(instruction);
      if (data.instruction !== types_js_1.TokenInstruction.Transfer)
        throw new errors_js_1.TokenInvalidInstructionTypeError();
      if (!source || !destination || !owner)
        throw new errors_js_1.TokenInvalidInstructionKeysError();
      return {
        programId,
        keys: {
          source,
          destination,
          owner,
          multiSigners
        },
        data
      };
    }
    exports.decodeTransferInstruction = decodeTransferInstruction2;
    function decodeTransferInstructionUnchecked({ programId, keys: [source, destination, owner, ...multiSigners], data }) {
      return {
        programId,
        keys: {
          source,
          destination,
          owner,
          multiSigners
        },
        data: exports.transferInstructionData.decode(data)
      };
    }
    exports.decodeTransferInstructionUnchecked = decodeTransferInstructionUnchecked;
  }
});

// ../../node_modules/@solana/spl-token/lib/cjs/actions/transfer.js
var require_transfer2 = __commonJS({
  "../../node_modules/@solana/spl-token/lib/cjs/actions/transfer.js"(exports) {
    "use strict";
    var __awaiter = exports && exports.__awaiter || function(thisArg, _arguments, P, generator) {
      function adopt(value) {
        return value instanceof P ? value : new P(function(resolve) {
          resolve(value);
        });
      }
      return new (P || (P = Promise))(function(resolve, reject) {
        function fulfilled(value) {
          try {
            step(generator.next(value));
          } catch (e2) {
            reject(e2);
          }
        }
        function rejected(value) {
          try {
            step(generator["throw"](value));
          } catch (e2) {
            reject(e2);
          }
        }
        function step(result) {
          result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
        }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
      });
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.transfer = void 0;
    var web3_js_1 = (init_index_browser_esm(), __toCommonJS(index_browser_esm_exports));
    var constants_js_1 = require_constants();
    var transfer_js_1 = require_transfer();
    var internal_js_1 = require_internal3();
    function transfer(connection, payer, source, destination, owner, amount2, multiSigners = [], confirmOptions, programId = constants_js_1.TOKEN_PROGRAM_ID) {
      return __awaiter(this, void 0, void 0, function* () {
        const [ownerPublicKey, signers] = (0, internal_js_1.getSigners)(owner, multiSigners);
        const transaction = new web3_js_1.Transaction().add((0, transfer_js_1.createTransferInstruction)(source, destination, ownerPublicKey, amount2, multiSigners, programId));
        return yield (0, web3_js_1.sendAndConfirmTransaction)(connection, transaction, [payer, ...signers], confirmOptions);
      });
    }
    exports.transfer = transfer;
  }
});

// ../../node_modules/@solana/spl-token/lib/cjs/actions/transferChecked.js
var require_transferChecked2 = __commonJS({
  "../../node_modules/@solana/spl-token/lib/cjs/actions/transferChecked.js"(exports) {
    "use strict";
    var __awaiter = exports && exports.__awaiter || function(thisArg, _arguments, P, generator) {
      function adopt(value) {
        return value instanceof P ? value : new P(function(resolve) {
          resolve(value);
        });
      }
      return new (P || (P = Promise))(function(resolve, reject) {
        function fulfilled(value) {
          try {
            step(generator.next(value));
          } catch (e2) {
            reject(e2);
          }
        }
        function rejected(value) {
          try {
            step(generator["throw"](value));
          } catch (e2) {
            reject(e2);
          }
        }
        function step(result) {
          result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
        }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
      });
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.transferChecked = void 0;
    var web3_js_1 = (init_index_browser_esm(), __toCommonJS(index_browser_esm_exports));
    var constants_js_1 = require_constants();
    var transferChecked_js_1 = require_transferChecked();
    var internal_js_1 = require_internal3();
    function transferChecked(connection, payer, source, mint, destination, owner, amount2, decimals, multiSigners = [], confirmOptions, programId = constants_js_1.TOKEN_PROGRAM_ID) {
      return __awaiter(this, void 0, void 0, function* () {
        const [ownerPublicKey, signers] = (0, internal_js_1.getSigners)(owner, multiSigners);
        const transaction = new web3_js_1.Transaction().add((0, transferChecked_js_1.createTransferCheckedInstruction)(source, mint, destination, ownerPublicKey, amount2, decimals, multiSigners, programId));
        return yield (0, web3_js_1.sendAndConfirmTransaction)(connection, transaction, [payer, ...signers], confirmOptions);
      });
    }
    exports.transferChecked = transferChecked;
  }
});

// ../../node_modules/@solana/spl-token/lib/cjs/instructions/uiAmountToAmount.js
var require_uiAmountToAmount = __commonJS({
  "../../node_modules/@solana/spl-token/lib/cjs/instructions/uiAmountToAmount.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.decodeUiAmountToAmountInstructionUnchecked = exports.decodeUiAmountToAmountInstruction = exports.createUiAmountToAmountInstruction = void 0;
    var buffer_layout_1 = require_Layout();
    var web3_js_1 = (init_index_browser_esm(), __toCommonJS(index_browser_esm_exports));
    var constants_js_1 = require_constants();
    var errors_js_1 = require_errors2();
    var types_js_1 = require_types3();
    function createUiAmountToAmountInstruction2(mint, amount2, programId = constants_js_1.TOKEN_PROGRAM_ID) {
      const keys = [{ pubkey: mint, isSigner: false, isWritable: false }];
      const buf = Buffer.from(amount2, "utf8");
      const uiAmountToAmountInstructionData = (0, buffer_layout_1.struct)([
        (0, buffer_layout_1.u8)("instruction"),
        (0, buffer_layout_1.blob)(buf.length, "amount")
      ]);
      const data = Buffer.alloc(uiAmountToAmountInstructionData.span);
      uiAmountToAmountInstructionData.encode({
        instruction: types_js_1.TokenInstruction.UiAmountToAmount,
        amount: buf
      }, data);
      return new web3_js_1.TransactionInstruction({ keys, programId, data });
    }
    exports.createUiAmountToAmountInstruction = createUiAmountToAmountInstruction2;
    function decodeUiAmountToAmountInstruction2(instruction, programId = constants_js_1.TOKEN_PROGRAM_ID) {
      if (!instruction.programId.equals(programId))
        throw new errors_js_1.TokenInvalidInstructionProgramError();
      const uiAmountToAmountInstructionData = (0, buffer_layout_1.struct)([
        (0, buffer_layout_1.u8)("instruction"),
        (0, buffer_layout_1.blob)(instruction.data.length - 1, "amount")
      ]);
      if (instruction.data.length !== uiAmountToAmountInstructionData.span)
        throw new errors_js_1.TokenInvalidInstructionDataError();
      const { keys: { mint }, data } = decodeUiAmountToAmountInstructionUnchecked(instruction);
      if (data.instruction !== types_js_1.TokenInstruction.UiAmountToAmount)
        throw new errors_js_1.TokenInvalidInstructionTypeError();
      if (!mint)
        throw new errors_js_1.TokenInvalidInstructionKeysError();
      return {
        programId,
        keys: {
          mint
        },
        data
      };
    }
    exports.decodeUiAmountToAmountInstruction = decodeUiAmountToAmountInstruction2;
    function decodeUiAmountToAmountInstructionUnchecked({ programId, keys: [mint], data }) {
      const uiAmountToAmountInstructionData = (0, buffer_layout_1.struct)([
        (0, buffer_layout_1.u8)("instruction"),
        (0, buffer_layout_1.blob)(data.length - 1, "amount")
      ]);
      return {
        programId,
        keys: {
          mint
        },
        data: uiAmountToAmountInstructionData.decode(data)
      };
    }
    exports.decodeUiAmountToAmountInstructionUnchecked = decodeUiAmountToAmountInstructionUnchecked;
  }
});

// ../../node_modules/@solana/spl-token/lib/cjs/actions/uiAmountToAmount.js
var require_uiAmountToAmount2 = __commonJS({
  "../../node_modules/@solana/spl-token/lib/cjs/actions/uiAmountToAmount.js"(exports) {
    "use strict";
    var __awaiter = exports && exports.__awaiter || function(thisArg, _arguments, P, generator) {
      function adopt(value) {
        return value instanceof P ? value : new P(function(resolve) {
          resolve(value);
        });
      }
      return new (P || (P = Promise))(function(resolve, reject) {
        function fulfilled(value) {
          try {
            step(generator.next(value));
          } catch (e2) {
            reject(e2);
          }
        }
        function rejected(value) {
          try {
            step(generator["throw"](value));
          } catch (e2) {
            reject(e2);
          }
        }
        function step(result) {
          result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
        }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
      });
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.uiAmountToAmount = void 0;
    var buffer_layout_utils_1 = require_cjs();
    var web3_js_1 = (init_index_browser_esm(), __toCommonJS(index_browser_esm_exports));
    var constants_js_1 = require_constants();
    var uiAmountToAmount_js_1 = require_uiAmountToAmount();
    function uiAmountToAmount(connection, payer, mint, amount2, programId = constants_js_1.TOKEN_PROGRAM_ID) {
      return __awaiter(this, void 0, void 0, function* () {
        const transaction = new web3_js_1.Transaction().add((0, uiAmountToAmount_js_1.createUiAmountToAmountInstruction)(mint, amount2, programId));
        const { returnData, err } = (yield connection.simulateTransaction(transaction, [payer], false)).value;
        if (returnData) {
          const data = Buffer.from(returnData.data[0], returnData.data[1]);
          return (0, buffer_layout_utils_1.u64)().decode(data);
        }
        return err;
      });
    }
    exports.uiAmountToAmount = uiAmountToAmount;
  }
});

// ../../node_modules/@solana/spl-token/lib/cjs/actions/index.js
var require_actions6 = __commonJS({
  "../../node_modules/@solana/spl-token/lib/cjs/actions/index.js"(exports) {
    "use strict";
    var __createBinding = exports && exports.__createBinding || (Object.create ? function(o2, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      var desc = Object.getOwnPropertyDescriptor(m, k);
      if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m[k];
        } };
      }
      Object.defineProperty(o2, k2, desc);
    } : function(o2, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      o2[k2] = m[k];
    });
    var __exportStar = exports && exports.__exportStar || function(m, exports2) {
      for (var p in m)
        if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports2, p))
          __createBinding(exports2, m, p);
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    __exportStar(require_amountToUiAmount2(), exports);
    __exportStar(require_approve2(), exports);
    __exportStar(require_approveChecked2(), exports);
    __exportStar(require_burn2(), exports);
    __exportStar(require_burnChecked2(), exports);
    __exportStar(require_closeAccount2(), exports);
    __exportStar(require_createAccount(), exports);
    __exportStar(require_createAssociatedTokenAccount(), exports);
    __exportStar(require_createAssociatedTokenAccountIdempotent(), exports);
    __exportStar(require_createMint(), exports);
    __exportStar(require_createMultisig(), exports);
    __exportStar(require_createNativeMint2(), exports);
    __exportStar(require_createWrappedNativeAccount(), exports);
    __exportStar(require_freezeAccount2(), exports);
    __exportStar(require_getOrCreateAssociatedTokenAccount(), exports);
    __exportStar(require_mintTo2(), exports);
    __exportStar(require_mintToChecked2(), exports);
    __exportStar(require_recoverNested(), exports);
    __exportStar(require_revoke2(), exports);
    __exportStar(require_setAuthority2(), exports);
    __exportStar(require_syncNative2(), exports);
    __exportStar(require_thawAccount2(), exports);
    __exportStar(require_transfer2(), exports);
    __exportStar(require_transferChecked2(), exports);
    __exportStar(require_uiAmountToAmount2(), exports);
  }
});

// ../../node_modules/@solana/spl-token/lib/cjs/instructions/initializeMint.js
var require_initializeMint = __commonJS({
  "../../node_modules/@solana/spl-token/lib/cjs/instructions/initializeMint.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.decodeInitializeMintInstructionUnchecked = exports.decodeInitializeMintInstruction = exports.createInitializeMintInstruction = exports.initializeMintInstructionData = void 0;
    var buffer_layout_1 = require_Layout();
    var buffer_layout_utils_1 = require_cjs();
    var web3_js_1 = (init_index_browser_esm(), __toCommonJS(index_browser_esm_exports));
    var constants_js_1 = require_constants();
    var errors_js_1 = require_errors2();
    var types_js_1 = require_types3();
    exports.initializeMintInstructionData = (0, buffer_layout_1.struct)([
      (0, buffer_layout_1.u8)("instruction"),
      (0, buffer_layout_1.u8)("decimals"),
      (0, buffer_layout_utils_1.publicKey)("mintAuthority"),
      (0, buffer_layout_1.u8)("freezeAuthorityOption"),
      (0, buffer_layout_utils_1.publicKey)("freezeAuthority")
    ]);
    function createInitializeMintInstruction2(mint, decimals, mintAuthority, freezeAuthority, programId = constants_js_1.TOKEN_PROGRAM_ID) {
      const keys = [
        { pubkey: mint, isSigner: false, isWritable: true },
        { pubkey: web3_js_1.SYSVAR_RENT_PUBKEY, isSigner: false, isWritable: false }
      ];
      const data = Buffer.alloc(exports.initializeMintInstructionData.span);
      exports.initializeMintInstructionData.encode({
        instruction: types_js_1.TokenInstruction.InitializeMint,
        decimals,
        mintAuthority,
        freezeAuthorityOption: freezeAuthority ? 1 : 0,
        freezeAuthority: freezeAuthority || new web3_js_1.PublicKey(0)
      }, data);
      return new web3_js_1.TransactionInstruction({ keys, programId, data });
    }
    exports.createInitializeMintInstruction = createInitializeMintInstruction2;
    function decodeInitializeMintInstruction2(instruction, programId = constants_js_1.TOKEN_PROGRAM_ID) {
      if (!instruction.programId.equals(programId))
        throw new errors_js_1.TokenInvalidInstructionProgramError();
      if (instruction.data.length !== exports.initializeMintInstructionData.span)
        throw new errors_js_1.TokenInvalidInstructionDataError();
      const { keys: { mint, rent }, data } = decodeInitializeMintInstructionUnchecked(instruction);
      if (data.instruction !== types_js_1.TokenInstruction.InitializeMint)
        throw new errors_js_1.TokenInvalidInstructionTypeError();
      if (!mint || !rent)
        throw new errors_js_1.TokenInvalidInstructionKeysError();
      return {
        programId,
        keys: {
          mint,
          rent
        },
        data
      };
    }
    exports.decodeInitializeMintInstruction = decodeInitializeMintInstruction2;
    function decodeInitializeMintInstructionUnchecked({ programId, keys: [mint, rent], data }) {
      const { instruction, decimals, mintAuthority, freezeAuthorityOption, freezeAuthority } = exports.initializeMintInstructionData.decode(data);
      return {
        programId,
        keys: {
          mint,
          rent
        },
        data: {
          instruction,
          decimals,
          mintAuthority,
          freezeAuthority: freezeAuthorityOption ? freezeAuthority : null
        }
      };
    }
    exports.decodeInitializeMintInstructionUnchecked = decodeInitializeMintInstructionUnchecked;
  }
});

// ../../node_modules/@solana/spl-token/lib/cjs/extensions/interestBearingMint/instructions.js
var require_instructions6 = __commonJS({
  "../../node_modules/@solana/spl-token/lib/cjs/extensions/interestBearingMint/instructions.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.createUpdateRateInterestBearingMintInstruction = exports.createInitializeInterestBearingMintInstruction = exports.interestBearingMintUpdateRateInstructionData = exports.interestBearingMintInitializeInstructionData = exports.InterestBearingMintInstruction = void 0;
    var buffer_layout_1 = require_Layout();
    var buffer_layout_utils_1 = require_cjs();
    var web3_js_1 = (init_index_browser_esm(), __toCommonJS(index_browser_esm_exports));
    var constants_js_1 = require_constants();
    var internal_js_1 = require_internal2();
    var types_js_1 = require_types3();
    var InterestBearingMintInstruction2;
    (function(InterestBearingMintInstruction3) {
      InterestBearingMintInstruction3[InterestBearingMintInstruction3["Initialize"] = 0] = "Initialize";
      InterestBearingMintInstruction3[InterestBearingMintInstruction3["UpdateRate"] = 1] = "UpdateRate";
    })(InterestBearingMintInstruction2 || (exports.InterestBearingMintInstruction = InterestBearingMintInstruction2 = {}));
    exports.interestBearingMintInitializeInstructionData = (0, buffer_layout_1.struct)([
      (0, buffer_layout_1.u8)("instruction"),
      (0, buffer_layout_1.u8)("interestBearingMintInstruction"),
      // TODO: Make this an optional public key
      (0, buffer_layout_utils_1.publicKey)("rateAuthority"),
      (0, buffer_layout_1.s16)("rate")
    ]);
    exports.interestBearingMintUpdateRateInstructionData = (0, buffer_layout_1.struct)([
      (0, buffer_layout_1.u8)("instruction"),
      (0, buffer_layout_1.u8)("interestBearingMintInstruction"),
      (0, buffer_layout_1.s16)("rate")
    ]);
    function createInitializeInterestBearingMintInstruction2(mint, rateAuthority, rate, programId = constants_js_1.TOKEN_2022_PROGRAM_ID) {
      const keys = [{ pubkey: mint, isSigner: false, isWritable: true }];
      const data = Buffer.alloc(exports.interestBearingMintInitializeInstructionData.span);
      exports.interestBearingMintInitializeInstructionData.encode({
        instruction: types_js_1.TokenInstruction.InterestBearingMintExtension,
        interestBearingMintInstruction: InterestBearingMintInstruction2.Initialize,
        rateAuthority,
        rate
      }, data);
      return new web3_js_1.TransactionInstruction({ keys, programId, data });
    }
    exports.createInitializeInterestBearingMintInstruction = createInitializeInterestBearingMintInstruction2;
    function createUpdateRateInterestBearingMintInstruction2(mint, rateAuthority, rate, multiSigners = [], programId = constants_js_1.TOKEN_2022_PROGRAM_ID) {
      const keys = (0, internal_js_1.addSigners)([
        { pubkey: mint, isSigner: false, isWritable: true },
        { pubkey: rateAuthority, isSigner: !multiSigners.length, isWritable: false }
      ], rateAuthority, multiSigners);
      const data = Buffer.alloc(exports.interestBearingMintUpdateRateInstructionData.span);
      exports.interestBearingMintUpdateRateInstructionData.encode({
        instruction: types_js_1.TokenInstruction.InterestBearingMintExtension,
        interestBearingMintInstruction: InterestBearingMintInstruction2.UpdateRate,
        rate
      }, data);
      return new web3_js_1.TransactionInstruction({ keys, programId, data });
    }
    exports.createUpdateRateInterestBearingMintInstruction = createUpdateRateInterestBearingMintInstruction2;
  }
});

// ../../node_modules/@solana/spl-token/lib/cjs/extensions/interestBearingMint/actions.js
var require_actions7 = __commonJS({
  "../../node_modules/@solana/spl-token/lib/cjs/extensions/interestBearingMint/actions.js"(exports) {
    "use strict";
    var __awaiter = exports && exports.__awaiter || function(thisArg, _arguments, P, generator) {
      function adopt(value) {
        return value instanceof P ? value : new P(function(resolve) {
          resolve(value);
        });
      }
      return new (P || (P = Promise))(function(resolve, reject) {
        function fulfilled(value) {
          try {
            step(generator.next(value));
          } catch (e2) {
            reject(e2);
          }
        }
        function rejected(value) {
          try {
            step(generator["throw"](value));
          } catch (e2) {
            reject(e2);
          }
        }
        function step(result) {
          result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
        }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
      });
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.updateRateInterestBearingMint = exports.createInterestBearingMint = void 0;
    var web3_js_1 = (init_index_browser_esm(), __toCommonJS(index_browser_esm_exports));
    var internal_js_1 = require_internal3();
    var constants_js_1 = require_constants();
    var initializeMint_js_1 = require_initializeMint();
    var extensionType_js_1 = require_extensionType();
    var instructions_js_1 = require_instructions6();
    function createInterestBearingMint(connection, payer, mintAuthority, freezeAuthority, rateAuthority, rate, decimals, keypair = web3_js_1.Keypair.generate(), confirmOptions, programId = constants_js_1.TOKEN_2022_PROGRAM_ID) {
      return __awaiter(this, void 0, void 0, function* () {
        const mintLen = (0, extensionType_js_1.getMintLen)([extensionType_js_1.ExtensionType.InterestBearingConfig]);
        const lamports2 = yield connection.getMinimumBalanceForRentExemption(mintLen);
        const transaction = new web3_js_1.Transaction().add(web3_js_1.SystemProgram.createAccount({
          fromPubkey: payer.publicKey,
          newAccountPubkey: keypair.publicKey,
          space: mintLen,
          lamports: lamports2,
          programId
        }), (0, instructions_js_1.createInitializeInterestBearingMintInstruction)(keypair.publicKey, rateAuthority, rate, programId), (0, initializeMint_js_1.createInitializeMintInstruction)(keypair.publicKey, decimals, mintAuthority, freezeAuthority, programId));
        yield (0, web3_js_1.sendAndConfirmTransaction)(connection, transaction, [payer, keypair], confirmOptions);
        return keypair.publicKey;
      });
    }
    exports.createInterestBearingMint = createInterestBearingMint;
    function updateRateInterestBearingMint(connection, payer, mint, rateAuthority, rate, multiSigners = [], confirmOptions, programId = constants_js_1.TOKEN_2022_PROGRAM_ID) {
      return __awaiter(this, void 0, void 0, function* () {
        const [rateAuthorityPublicKey, signers] = (0, internal_js_1.getSigners)(rateAuthority, multiSigners);
        const transaction = new web3_js_1.Transaction().add((0, instructions_js_1.createUpdateRateInterestBearingMintInstruction)(mint, rateAuthorityPublicKey, rate, signers, programId));
        return yield (0, web3_js_1.sendAndConfirmTransaction)(connection, transaction, [payer, rateAuthority, ...signers], confirmOptions);
      });
    }
    exports.updateRateInterestBearingMint = updateRateInterestBearingMint;
  }
});

// ../../node_modules/@solana/spl-token/lib/cjs/extensions/interestBearingMint/index.js
var require_interestBearingMint = __commonJS({
  "../../node_modules/@solana/spl-token/lib/cjs/extensions/interestBearingMint/index.js"(exports) {
    "use strict";
    var __createBinding = exports && exports.__createBinding || (Object.create ? function(o2, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      var desc = Object.getOwnPropertyDescriptor(m, k);
      if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m[k];
        } };
      }
      Object.defineProperty(o2, k2, desc);
    } : function(o2, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      o2[k2] = m[k];
    });
    var __exportStar = exports && exports.__exportStar || function(m, exports2) {
      for (var p in m)
        if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports2, p))
          __createBinding(exports2, m, p);
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    __exportStar(require_actions7(), exports);
    __exportStar(require_instructions6(), exports);
    __exportStar(require_state3(), exports);
  }
});

// ../../node_modules/@solana/spl-token/lib/cjs/extensions/metadataPointer/instructions.js
var require_instructions7 = __commonJS({
  "../../node_modules/@solana/spl-token/lib/cjs/extensions/metadataPointer/instructions.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.createUpdateMetadataPointerInstruction = exports.updateMetadataPointerData = exports.createInitializeMetadataPointerInstruction = exports.initializeMetadataPointerData = exports.MetadataPointerInstruction = void 0;
    var buffer_layout_1 = require_Layout();
    var buffer_layout_utils_1 = require_cjs();
    var web3_js_1 = (init_index_browser_esm(), __toCommonJS(index_browser_esm_exports));
    var constants_js_1 = require_constants();
    var errors_js_1 = require_errors2();
    var types_js_1 = require_types3();
    var internal_js_1 = require_internal2();
    var MetadataPointerInstruction2;
    (function(MetadataPointerInstruction3) {
      MetadataPointerInstruction3[MetadataPointerInstruction3["Initialize"] = 0] = "Initialize";
      MetadataPointerInstruction3[MetadataPointerInstruction3["Update"] = 1] = "Update";
    })(MetadataPointerInstruction2 || (exports.MetadataPointerInstruction = MetadataPointerInstruction2 = {}));
    exports.initializeMetadataPointerData = (0, buffer_layout_1.struct)([
      // prettier-ignore
      (0, buffer_layout_1.u8)("instruction"),
      (0, buffer_layout_1.u8)("metadataPointerInstruction"),
      (0, buffer_layout_utils_1.publicKey)("authority"),
      (0, buffer_layout_utils_1.publicKey)("metadataAddress")
    ]);
    function createInitializeMetadataPointerInstruction(mint, authority, metadataAddress, programId) {
      if (!(0, constants_js_1.programSupportsExtensions)(programId)) {
        throw new errors_js_1.TokenUnsupportedInstructionError();
      }
      const keys = [{ pubkey: mint, isSigner: false, isWritable: true }];
      const data = Buffer.alloc(exports.initializeMetadataPointerData.span);
      exports.initializeMetadataPointerData.encode({
        instruction: types_js_1.TokenInstruction.MetadataPointerExtension,
        metadataPointerInstruction: MetadataPointerInstruction2.Initialize,
        authority: authority !== null && authority !== void 0 ? authority : web3_js_1.PublicKey.default,
        metadataAddress: metadataAddress !== null && metadataAddress !== void 0 ? metadataAddress : web3_js_1.PublicKey.default
      }, data);
      return new web3_js_1.TransactionInstruction({ keys, programId, data });
    }
    exports.createInitializeMetadataPointerInstruction = createInitializeMetadataPointerInstruction;
    exports.updateMetadataPointerData = (0, buffer_layout_1.struct)([
      // prettier-ignore
      (0, buffer_layout_1.u8)("instruction"),
      (0, buffer_layout_1.u8)("metadataPointerInstruction"),
      (0, buffer_layout_utils_1.publicKey)("metadataAddress")
    ]);
    function createUpdateMetadataPointerInstruction(mint, authority, metadataAddress, multiSigners = [], programId = constants_js_1.TOKEN_2022_PROGRAM_ID) {
      if (!(0, constants_js_1.programSupportsExtensions)(programId)) {
        throw new errors_js_1.TokenUnsupportedInstructionError();
      }
      const keys = (0, internal_js_1.addSigners)([{ pubkey: mint, isSigner: false, isWritable: true }], authority, multiSigners);
      const data = Buffer.alloc(exports.updateMetadataPointerData.span);
      exports.updateMetadataPointerData.encode({
        instruction: types_js_1.TokenInstruction.MetadataPointerExtension,
        metadataPointerInstruction: MetadataPointerInstruction2.Update,
        metadataAddress: metadataAddress !== null && metadataAddress !== void 0 ? metadataAddress : web3_js_1.PublicKey.default
      }, data);
      return new web3_js_1.TransactionInstruction({ keys, programId, data });
    }
    exports.createUpdateMetadataPointerInstruction = createUpdateMetadataPointerInstruction;
  }
});

// ../../node_modules/@solana/spl-token/lib/cjs/extensions/metadataPointer/index.js
var require_metadataPointer = __commonJS({
  "../../node_modules/@solana/spl-token/lib/cjs/extensions/metadataPointer/index.js"(exports) {
    "use strict";
    var __createBinding = exports && exports.__createBinding || (Object.create ? function(o2, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      var desc = Object.getOwnPropertyDescriptor(m, k);
      if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m[k];
        } };
      }
      Object.defineProperty(o2, k2, desc);
    } : function(o2, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      o2[k2] = m[k];
    });
    var __exportStar = exports && exports.__exportStar || function(m, exports2) {
      for (var p in m)
        if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports2, p))
          __createBinding(exports2, m, p);
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    __exportStar(require_instructions7(), exports);
    __exportStar(require_state5(), exports);
  }
});

// ../../node_modules/@solana/spl-token-metadata/lib/cjs/errors.js
var require_errors3 = __commonJS({
  "../../node_modules/@solana/spl-token-metadata/lib/cjs/errors.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.KeyNotFoundError = exports.ImmutableMetadataError = exports.IncorrectUpdateAuthorityError = exports.IncorrectMintAuthorityError = exports.MintHasNoMintAuthorityError = exports.IncorrectAccountError = exports.TokenMetadataError = void 0;
    var TokenMetadataError = class extends Error {
      constructor(message) {
        super(message);
      }
    };
    exports.TokenMetadataError = TokenMetadataError;
    var IncorrectAccountError = class extends TokenMetadataError {
      constructor() {
        super(...arguments);
        this.name = "IncorrectAccountError";
      }
    };
    exports.IncorrectAccountError = IncorrectAccountError;
    var MintHasNoMintAuthorityError = class extends TokenMetadataError {
      constructor() {
        super(...arguments);
        this.name = "MintHasNoMintAuthorityError";
      }
    };
    exports.MintHasNoMintAuthorityError = MintHasNoMintAuthorityError;
    var IncorrectMintAuthorityError = class extends TokenMetadataError {
      constructor() {
        super(...arguments);
        this.name = "IncorrectMintAuthorityError";
      }
    };
    exports.IncorrectMintAuthorityError = IncorrectMintAuthorityError;
    var IncorrectUpdateAuthorityError = class extends TokenMetadataError {
      constructor() {
        super(...arguments);
        this.name = "IncorrectUpdateAuthorityError";
      }
    };
    exports.IncorrectUpdateAuthorityError = IncorrectUpdateAuthorityError;
    var ImmutableMetadataError = class extends TokenMetadataError {
      constructor() {
        super(...arguments);
        this.name = "ImmutableMetadataError";
      }
    };
    exports.ImmutableMetadataError = ImmutableMetadataError;
    var KeyNotFoundError = class extends TokenMetadataError {
      constructor() {
        super(...arguments);
        this.name = "KeyNotFoundError";
      }
    };
    exports.KeyNotFoundError = KeyNotFoundError;
  }
});

// ../../node_modules/@solana/codecs-core/dist/index.browser.cjs
var require_index_browser = __commonJS({
  "../../node_modules/@solana/codecs-core/dist/index.browser.cjs"(exports) {
    "use strict";
    function assertByteArrayIsNotEmptyForCodec2(codecDescription, bytes, offset = 0) {
      if (bytes.length - offset <= 0) {
        throw new Error(`Codec [${codecDescription}] cannot decode empty byte arrays.`);
      }
    }
    function assertByteArrayHasEnoughBytesForCodec2(codecDescription, expected, bytes, offset = 0) {
      const bytesLength = bytes.length - offset;
      if (bytesLength < expected) {
        throw new Error(`Codec [${codecDescription}] expected ${expected} bytes, got ${bytesLength}.`);
      }
    }
    var mergeBytes = (byteArrays) => {
      const nonEmptyByteArrays = byteArrays.filter((arr) => arr.length);
      if (nonEmptyByteArrays.length === 0) {
        return byteArrays.length ? byteArrays[0] : new Uint8Array();
      }
      if (nonEmptyByteArrays.length === 1) {
        return nonEmptyByteArrays[0];
      }
      const totalLength = nonEmptyByteArrays.reduce((total, arr) => total + arr.length, 0);
      const result = new Uint8Array(totalLength);
      let offset = 0;
      nonEmptyByteArrays.forEach((arr) => {
        result.set(arr, offset);
        offset += arr.length;
      });
      return result;
    };
    var padBytes2 = (bytes, length) => {
      if (bytes.length >= length)
        return bytes;
      const paddedBytes = new Uint8Array(length).fill(0);
      paddedBytes.set(bytes);
      return paddedBytes;
    };
    var fixBytes2 = (bytes, length) => padBytes2(bytes.length <= length ? bytes : bytes.slice(0, length), length);
    function getEncodedSize2(value, encoder) {
      return "fixedSize" in encoder ? encoder.fixedSize : encoder.getSizeFromValue(value);
    }
    function createEncoder2(encoder) {
      return Object.freeze(__spreadProps(__spreadValues({}, encoder), {
        encode: (value) => {
          const bytes = new Uint8Array(getEncodedSize2(value, encoder));
          encoder.write(value, bytes, 0);
          return bytes;
        }
      }));
    }
    function createDecoder2(decoder) {
      return Object.freeze(__spreadProps(__spreadValues({}, decoder), {
        decode: (bytes, offset = 0) => decoder.read(bytes, offset)[0]
      }));
    }
    function createCodec(codec) {
      return Object.freeze(__spreadProps(__spreadValues({}, codec), {
        decode: (bytes, offset = 0) => codec.read(bytes, offset)[0],
        encode: (value) => {
          const bytes = new Uint8Array(getEncodedSize2(value, codec));
          codec.write(value, bytes, 0);
          return bytes;
        }
      }));
    }
    function isFixedSize2(codec) {
      return "fixedSize" in codec && typeof codec.fixedSize === "number";
    }
    function assertIsFixedSize2(codec, message) {
      if (!isFixedSize2(codec)) {
        throw new Error(message ?? "Expected a fixed-size codec, got a variable-size one.");
      }
    }
    function isVariableSize(codec) {
      return !isFixedSize2(codec);
    }
    function assertIsVariableSize(codec, message) {
      if (!isVariableSize(codec)) {
        throw new Error(message ?? "Expected a variable-size codec, got a fixed-size one.");
      }
    }
    function combineCodec2(encoder, decoder) {
      if (isFixedSize2(encoder) !== isFixedSize2(decoder)) {
        throw new Error(`Encoder and decoder must either both be fixed-size or variable-size.`);
      }
      if (isFixedSize2(encoder) && isFixedSize2(decoder) && encoder.fixedSize !== decoder.fixedSize) {
        throw new Error(
          `Encoder and decoder must have the same fixed size, got [${encoder.fixedSize}] and [${decoder.fixedSize}].`
        );
      }
      if (!isFixedSize2(encoder) && !isFixedSize2(decoder) && encoder.maxSize !== decoder.maxSize) {
        throw new Error(
          `Encoder and decoder must have the same max size, got [${encoder.maxSize}] and [${decoder.maxSize}].`
        );
      }
      return __spreadProps(__spreadValues(__spreadValues({}, decoder), encoder), {
        decode: decoder.decode,
        encode: encoder.encode,
        read: decoder.read,
        write: encoder.write
      });
    }
    function fixEncoder2(encoder, fixedBytes) {
      return createEncoder2({
        fixedSize: fixedBytes,
        write: (value, bytes, offset) => {
          const variableByteArray = encoder.encode(value);
          const fixedByteArray = variableByteArray.length > fixedBytes ? variableByteArray.slice(0, fixedBytes) : variableByteArray;
          bytes.set(fixedByteArray, offset);
          return offset + fixedBytes;
        }
      });
    }
    function fixDecoder2(decoder, fixedBytes) {
      return createDecoder2({
        fixedSize: fixedBytes,
        read: (bytes, offset) => {
          assertByteArrayHasEnoughBytesForCodec2("fixCodec", fixedBytes, bytes, offset);
          if (offset > 0 || bytes.length > fixedBytes) {
            bytes = bytes.slice(offset, offset + fixedBytes);
          }
          if (isFixedSize2(decoder)) {
            bytes = fixBytes2(bytes, decoder.fixedSize);
          }
          const [value] = decoder.read(bytes, 0);
          return [value, offset + fixedBytes];
        }
      });
    }
    function fixCodec(codec, fixedBytes) {
      return combineCodec2(fixEncoder2(codec, fixedBytes), fixDecoder2(codec, fixedBytes));
    }
    function mapEncoder2(encoder, unmap) {
      return createEncoder2(__spreadProps(__spreadValues({}, isVariableSize(encoder) ? __spreadProps(__spreadValues({}, encoder), { getSizeFromValue: (value) => encoder.getSizeFromValue(unmap(value)) }) : encoder), {
        write: (value, bytes, offset) => encoder.write(unmap(value), bytes, offset)
      }));
    }
    function mapDecoder2(decoder, map2) {
      return createDecoder2(__spreadProps(__spreadValues({}, decoder), {
        read: (bytes, offset) => {
          const [value, newOffset] = decoder.read(bytes, offset);
          return [map2(value, bytes, offset), newOffset];
        }
      }));
    }
    function mapCodec(codec, unmap, map2) {
      return createCodec(__spreadProps(__spreadValues({}, mapEncoder2(codec, unmap)), {
        read: map2 ? mapDecoder2(codec, map2).read : codec.read
      }));
    }
    function reverseEncoder(encoder) {
      assertIsFixedSize2(encoder, "Cannot reverse a codec of variable size.");
      return createEncoder2(__spreadProps(__spreadValues({}, encoder), {
        write: (value, bytes, offset) => {
          const newOffset = encoder.write(value, bytes, offset);
          const slice = bytes.slice(offset, offset + encoder.fixedSize).reverse();
          bytes.set(slice, offset);
          return newOffset;
        }
      }));
    }
    function reverseDecoder(decoder) {
      assertIsFixedSize2(decoder, "Cannot reverse a codec of variable size.");
      return createDecoder2(__spreadProps(__spreadValues({}, decoder), {
        read: (bytes, offset) => {
          const reverseEnd = offset + decoder.fixedSize;
          if (offset === 0 && bytes.length === reverseEnd) {
            return decoder.read(bytes.reverse(), offset);
          }
          const reversedBytes = bytes.slice();
          reversedBytes.set(bytes.slice(offset, reverseEnd).reverse(), offset);
          return decoder.read(reversedBytes, offset);
        }
      }));
    }
    function reverseCodec(codec) {
      return combineCodec2(reverseEncoder(codec), reverseDecoder(codec));
    }
    exports.assertByteArrayHasEnoughBytesForCodec = assertByteArrayHasEnoughBytesForCodec2;
    exports.assertByteArrayIsNotEmptyForCodec = assertByteArrayIsNotEmptyForCodec2;
    exports.assertIsFixedSize = assertIsFixedSize2;
    exports.assertIsVariableSize = assertIsVariableSize;
    exports.combineCodec = combineCodec2;
    exports.createCodec = createCodec;
    exports.createDecoder = createDecoder2;
    exports.createEncoder = createEncoder2;
    exports.fixBytes = fixBytes2;
    exports.fixCodec = fixCodec;
    exports.fixDecoder = fixDecoder2;
    exports.fixEncoder = fixEncoder2;
    exports.getEncodedSize = getEncodedSize2;
    exports.isFixedSize = isFixedSize2;
    exports.isVariableSize = isVariableSize;
    exports.mapCodec = mapCodec;
    exports.mapDecoder = mapDecoder2;
    exports.mapEncoder = mapEncoder2;
    exports.mergeBytes = mergeBytes;
    exports.padBytes = padBytes2;
    exports.reverseCodec = reverseCodec;
    exports.reverseDecoder = reverseDecoder;
    exports.reverseEncoder = reverseEncoder;
  }
});

// ../../node_modules/@solana/codecs-numbers/dist/index.browser.cjs
var require_index_browser2 = __commonJS({
  "../../node_modules/@solana/codecs-numbers/dist/index.browser.cjs"(exports) {
    "use strict";
    var codecsCore = require_index_browser();
    function assertNumberIsBetweenForCodec2(codecDescription, min, max, value) {
      if (value < min || value > max) {
        throw new Error(
          `Codec [${codecDescription}] expected number to be in the range [${min}, ${max}], got ${value}.`
        );
      }
    }
    var Endian2 = ((Endian22) => {
      Endian22[Endian22["LITTLE"] = 0] = "LITTLE";
      Endian22[Endian22["BIG"] = 1] = "BIG";
      return Endian22;
    })(Endian2 || {});
    function isLittleEndian2(config) {
      return config?.endian === 1 ? false : true;
    }
    function numberEncoderFactory2(input) {
      return codecsCore.createEncoder({
        fixedSize: input.size,
        write(value, bytes, offset) {
          if (input.range) {
            assertNumberIsBetweenForCodec2(input.name, input.range[0], input.range[1], value);
          }
          const arrayBuffer = new ArrayBuffer(input.size);
          input.set(new DataView(arrayBuffer), value, isLittleEndian2(input.config));
          bytes.set(new Uint8Array(arrayBuffer), offset);
          return offset + input.size;
        }
      });
    }
    function numberDecoderFactory2(input) {
      return codecsCore.createDecoder({
        fixedSize: input.size,
        read(bytes, offset = 0) {
          codecsCore.assertByteArrayIsNotEmptyForCodec(input.name, bytes, offset);
          codecsCore.assertByteArrayHasEnoughBytesForCodec(input.name, input.size, bytes, offset);
          const view = new DataView(toArrayBuffer2(bytes, offset, input.size));
          return [input.get(view, isLittleEndian2(input.config)), offset + input.size];
        }
      });
    }
    function toArrayBuffer2(bytes, offset, length) {
      const bytesOffset = bytes.byteOffset + (offset ?? 0);
      const bytesLength = length ?? bytes.byteLength;
      return bytes.buffer.slice(bytesOffset, bytesOffset + bytesLength);
    }
    var getF32Encoder = (config = {}) => numberEncoderFactory2({
      config,
      name: "f32",
      set: (view, value, le) => view.setFloat32(0, value, le),
      size: 4
    });
    var getF32Decoder = (config = {}) => numberDecoderFactory2({
      config,
      get: (view, le) => view.getFloat32(0, le),
      name: "f32",
      size: 4
    });
    var getF32Codec = (config = {}) => codecsCore.combineCodec(getF32Encoder(config), getF32Decoder(config));
    var getF64Encoder = (config = {}) => numberEncoderFactory2({
      config,
      name: "f64",
      set: (view, value, le) => view.setFloat64(0, value, le),
      size: 8
    });
    var getF64Decoder = (config = {}) => numberDecoderFactory2({
      config,
      get: (view, le) => view.getFloat64(0, le),
      name: "f64",
      size: 8
    });
    var getF64Codec = (config = {}) => codecsCore.combineCodec(getF64Encoder(config), getF64Decoder(config));
    var getI128Encoder = (config = {}) => numberEncoderFactory2({
      config,
      name: "i128",
      range: [-BigInt("0x7fffffffffffffffffffffffffffffff") - 1n, BigInt("0x7fffffffffffffffffffffffffffffff")],
      set: (view, value, le) => {
        const leftOffset = le ? 8 : 0;
        const rightOffset = le ? 0 : 8;
        const rightMask = 0xffffffffffffffffn;
        view.setBigInt64(leftOffset, BigInt(value) >> 64n, le);
        view.setBigUint64(rightOffset, BigInt(value) & rightMask, le);
      },
      size: 16
    });
    var getI128Decoder = (config = {}) => numberDecoderFactory2({
      config,
      get: (view, le) => {
        const leftOffset = le ? 8 : 0;
        const rightOffset = le ? 0 : 8;
        const left = view.getBigInt64(leftOffset, le);
        const right = view.getBigUint64(rightOffset, le);
        return (left << 64n) + right;
      },
      name: "i128",
      size: 16
    });
    var getI128Codec = (config = {}) => codecsCore.combineCodec(getI128Encoder(config), getI128Decoder(config));
    var getI16Encoder = (config = {}) => numberEncoderFactory2({
      config,
      name: "i16",
      range: [-Number("0x7fff") - 1, Number("0x7fff")],
      set: (view, value, le) => view.setInt16(0, value, le),
      size: 2
    });
    var getI16Decoder = (config = {}) => numberDecoderFactory2({
      config,
      get: (view, le) => view.getInt16(0, le),
      name: "i16",
      size: 2
    });
    var getI16Codec = (config = {}) => codecsCore.combineCodec(getI16Encoder(config), getI16Decoder(config));
    var getI32Encoder = (config = {}) => numberEncoderFactory2({
      config,
      name: "i32",
      range: [-Number("0x7fffffff") - 1, Number("0x7fffffff")],
      set: (view, value, le) => view.setInt32(0, value, le),
      size: 4
    });
    var getI32Decoder = (config = {}) => numberDecoderFactory2({
      config,
      get: (view, le) => view.getInt32(0, le),
      name: "i32",
      size: 4
    });
    var getI32Codec = (config = {}) => codecsCore.combineCodec(getI32Encoder(config), getI32Decoder(config));
    var getI64Encoder = (config = {}) => numberEncoderFactory2({
      config,
      name: "i64",
      range: [-BigInt("0x7fffffffffffffff") - 1n, BigInt("0x7fffffffffffffff")],
      set: (view, value, le) => view.setBigInt64(0, BigInt(value), le),
      size: 8
    });
    var getI64Decoder = (config = {}) => numberDecoderFactory2({
      config,
      get: (view, le) => view.getBigInt64(0, le),
      name: "i64",
      size: 8
    });
    var getI64Codec = (config = {}) => codecsCore.combineCodec(getI64Encoder(config), getI64Decoder(config));
    var getI8Encoder = () => numberEncoderFactory2({
      name: "i8",
      range: [-Number("0x7f") - 1, Number("0x7f")],
      set: (view, value) => view.setInt8(0, value),
      size: 1
    });
    var getI8Decoder = () => numberDecoderFactory2({
      get: (view) => view.getInt8(0),
      name: "i8",
      size: 1
    });
    var getI8Codec = () => codecsCore.combineCodec(getI8Encoder(), getI8Decoder());
    var getShortU16Encoder = () => codecsCore.createEncoder({
      getSizeFromValue: (value) => {
        if (value <= 127)
          return 1;
        if (value <= 16383)
          return 2;
        return 3;
      },
      maxSize: 3,
      write: (value, bytes, offset) => {
        assertNumberIsBetweenForCodec2("shortU16", 0, 65535, value);
        const shortU16Bytes = [0];
        for (let ii = 0; ; ii += 1) {
          const alignedValue = value >> ii * 7;
          if (alignedValue === 0) {
            break;
          }
          const nextSevenBits = 127 & alignedValue;
          shortU16Bytes[ii] = nextSevenBits;
          if (ii > 0) {
            shortU16Bytes[ii - 1] |= 128;
          }
        }
        bytes.set(shortU16Bytes, offset);
        return offset + shortU16Bytes.length;
      }
    });
    var getShortU16Decoder = () => codecsCore.createDecoder({
      maxSize: 3,
      read: (bytes, offset) => {
        let value = 0;
        let byteCount = 0;
        while (++byteCount) {
          const byteIndex = byteCount - 1;
          const currentByte = bytes[offset + byteIndex];
          const nextSevenBits = 127 & currentByte;
          value |= nextSevenBits << byteIndex * 7;
          if ((currentByte & 128) === 0) {
            break;
          }
        }
        return [value, offset + byteCount];
      }
    });
    var getShortU16Codec = () => codecsCore.combineCodec(getShortU16Encoder(), getShortU16Decoder());
    var getU128Encoder = (config = {}) => numberEncoderFactory2({
      config,
      name: "u128",
      range: [0, BigInt("0xffffffffffffffffffffffffffffffff")],
      set: (view, value, le) => {
        const leftOffset = le ? 8 : 0;
        const rightOffset = le ? 0 : 8;
        const rightMask = 0xffffffffffffffffn;
        view.setBigUint64(leftOffset, BigInt(value) >> 64n, le);
        view.setBigUint64(rightOffset, BigInt(value) & rightMask, le);
      },
      size: 16
    });
    var getU128Decoder = (config = {}) => numberDecoderFactory2({
      config,
      get: (view, le) => {
        const leftOffset = le ? 8 : 0;
        const rightOffset = le ? 0 : 8;
        const left = view.getBigUint64(leftOffset, le);
        const right = view.getBigUint64(rightOffset, le);
        return (left << 64n) + right;
      },
      name: "u128",
      size: 16
    });
    var getU128Codec = (config = {}) => codecsCore.combineCodec(getU128Encoder(config), getU128Decoder(config));
    var getU16Encoder = (config = {}) => numberEncoderFactory2({
      config,
      name: "u16",
      range: [0, Number("0xffff")],
      set: (view, value, le) => view.setUint16(0, value, le),
      size: 2
    });
    var getU16Decoder = (config = {}) => numberDecoderFactory2({
      config,
      get: (view, le) => view.getUint16(0, le),
      name: "u16",
      size: 2
    });
    var getU16Codec = (config = {}) => codecsCore.combineCodec(getU16Encoder(config), getU16Decoder(config));
    var getU32Encoder2 = (config = {}) => numberEncoderFactory2({
      config,
      name: "u32",
      range: [0, Number("0xffffffff")],
      set: (view, value, le) => view.setUint32(0, value, le),
      size: 4
    });
    var getU32Decoder2 = (config = {}) => numberDecoderFactory2({
      config,
      get: (view, le) => view.getUint32(0, le),
      name: "u32",
      size: 4
    });
    var getU32Codec = (config = {}) => codecsCore.combineCodec(getU32Encoder2(config), getU32Decoder2(config));
    var getU64Encoder2 = (config = {}) => numberEncoderFactory2({
      config,
      name: "u64",
      range: [0, BigInt("0xffffffffffffffff")],
      set: (view, value, le) => view.setBigUint64(0, BigInt(value), le),
      size: 8
    });
    var getU64Decoder = (config = {}) => numberDecoderFactory2({
      config,
      get: (view, le) => view.getBigUint64(0, le),
      name: "u64",
      size: 8
    });
    var getU64Codec = (config = {}) => codecsCore.combineCodec(getU64Encoder2(config), getU64Decoder(config));
    var getU8Encoder2 = () => numberEncoderFactory2({
      name: "u8",
      range: [0, Number("0xff")],
      set: (view, value) => view.setUint8(0, value),
      size: 1
    });
    var getU8Decoder2 = () => numberDecoderFactory2({
      get: (view) => view.getUint8(0),
      name: "u8",
      size: 1
    });
    var getU8Codec = () => codecsCore.combineCodec(getU8Encoder2(), getU8Decoder2());
    exports.Endian = Endian2;
    exports.assertNumberIsBetweenForCodec = assertNumberIsBetweenForCodec2;
    exports.getF32Codec = getF32Codec;
    exports.getF32Decoder = getF32Decoder;
    exports.getF32Encoder = getF32Encoder;
    exports.getF64Codec = getF64Codec;
    exports.getF64Decoder = getF64Decoder;
    exports.getF64Encoder = getF64Encoder;
    exports.getI128Codec = getI128Codec;
    exports.getI128Decoder = getI128Decoder;
    exports.getI128Encoder = getI128Encoder;
    exports.getI16Codec = getI16Codec;
    exports.getI16Decoder = getI16Decoder;
    exports.getI16Encoder = getI16Encoder;
    exports.getI32Codec = getI32Codec;
    exports.getI32Decoder = getI32Decoder;
    exports.getI32Encoder = getI32Encoder;
    exports.getI64Codec = getI64Codec;
    exports.getI64Decoder = getI64Decoder;
    exports.getI64Encoder = getI64Encoder;
    exports.getI8Codec = getI8Codec;
    exports.getI8Decoder = getI8Decoder;
    exports.getI8Encoder = getI8Encoder;
    exports.getShortU16Codec = getShortU16Codec;
    exports.getShortU16Decoder = getShortU16Decoder;
    exports.getShortU16Encoder = getShortU16Encoder;
    exports.getU128Codec = getU128Codec;
    exports.getU128Decoder = getU128Decoder;
    exports.getU128Encoder = getU128Encoder;
    exports.getU16Codec = getU16Codec;
    exports.getU16Decoder = getU16Decoder;
    exports.getU16Encoder = getU16Encoder;
    exports.getU32Codec = getU32Codec;
    exports.getU32Decoder = getU32Decoder2;
    exports.getU32Encoder = getU32Encoder2;
    exports.getU64Codec = getU64Codec;
    exports.getU64Decoder = getU64Decoder;
    exports.getU64Encoder = getU64Encoder2;
    exports.getU8Codec = getU8Codec;
    exports.getU8Decoder = getU8Decoder2;
    exports.getU8Encoder = getU8Encoder2;
  }
});

// ../../node_modules/@solana/codecs-data-structures/dist/index.browser.cjs
var require_index_browser3 = __commonJS({
  "../../node_modules/@solana/codecs-data-structures/dist/index.browser.cjs"(exports) {
    "use strict";
    var codecsCore = require_index_browser();
    var codecsNumbers = require_index_browser2();
    function assertValidNumberOfItemsForCodec2(codecDescription, expected, actual) {
      if (expected !== actual) {
        throw new Error(`Expected [${codecDescription}] to have ${expected} items, got ${actual}.`);
      }
    }
    function maxCodecSizes(sizes) {
      return sizes.reduce(
        (all, size) => all === null || size === null ? null : Math.max(all, size),
        0
      );
    }
    function sumCodecSizes2(sizes) {
      return sizes.reduce((all, size) => all === null || size === null ? null : all + size, 0);
    }
    function getFixedSize2(codec) {
      return codecsCore.isFixedSize(codec) ? codec.fixedSize : null;
    }
    function getMaxSize2(codec) {
      return codecsCore.isFixedSize(codec) ? codec.fixedSize : codec.maxSize ?? null;
    }
    function getArrayEncoder2(item, config = {}) {
      const size = config.size ?? codecsNumbers.getU32Encoder();
      if (size === "remainder") {
        codecsCore.assertIsFixedSize(item, 'Codecs of "remainder" size must have fixed-size items.');
      }
      const fixedSize = computeArrayLikeCodecSize2(size, getFixedSize2(item));
      const maxSize = computeArrayLikeCodecSize2(size, getMaxSize2(item)) ?? void 0;
      return codecsCore.createEncoder(__spreadProps(__spreadValues({}, fixedSize !== null ? { fixedSize } : {
        getSizeFromValue: (array) => {
          const prefixSize = typeof size === "object" ? codecsCore.getEncodedSize(array.length, size) : 0;
          return prefixSize + [...array].reduce((all, value) => all + codecsCore.getEncodedSize(value, item), 0);
        },
        maxSize
      }), {
        write: (array, bytes, offset) => {
          if (typeof size === "number") {
            assertValidNumberOfItemsForCodec2("array", size, array.length);
          }
          if (typeof size === "object") {
            offset = size.write(array.length, bytes, offset);
          }
          array.forEach((value) => {
            offset = item.write(value, bytes, offset);
          });
          return offset;
        }
      }));
    }
    function getArrayDecoder2(item, config = {}) {
      const size = config.size ?? codecsNumbers.getU32Decoder();
      if (size === "remainder") {
        codecsCore.assertIsFixedSize(item, 'Codecs of "remainder" size must have fixed-size items.');
      }
      const itemSize = getFixedSize2(item);
      const fixedSize = computeArrayLikeCodecSize2(size, itemSize);
      const maxSize = computeArrayLikeCodecSize2(size, getMaxSize2(item)) ?? void 0;
      return codecsCore.createDecoder(__spreadProps(__spreadValues({}, fixedSize !== null ? { fixedSize } : { maxSize }), {
        read: (bytes, offset) => {
          const array = [];
          if (typeof size === "object" && bytes.slice(offset).length === 0) {
            return [array, offset];
          }
          const [resolvedSize, newOffset] = readArrayLikeCodecSize2(size, itemSize, bytes, offset);
          offset = newOffset;
          for (let i = 0; i < resolvedSize; i += 1) {
            const [value, newOffset2] = item.read(bytes, offset);
            offset = newOffset2;
            array.push(value);
          }
          return [array, offset];
        }
      }));
    }
    function getArrayCodec2(item, config = {}) {
      return codecsCore.combineCodec(getArrayEncoder2(item, config), getArrayDecoder2(item, config));
    }
    function readArrayLikeCodecSize2(size, itemSize, bytes, offset) {
      if (typeof size === "number") {
        return [size, offset];
      }
      if (typeof size === "object") {
        return size.read(bytes, offset);
      }
      if (size === "remainder") {
        if (itemSize === null) {
          throw new Error('Codecs of "remainder" size must have fixed-size items.');
        }
        const remainder = Math.max(0, bytes.length - offset);
        if (remainder % itemSize !== 0) {
          throw new Error(
            `The remainder of the byte array (${remainder} bytes) cannot be split into chunks of ${itemSize} bytes. Codecs of "remainder" size must have a remainder that is a multiple of its item size. In other words, ${remainder} modulo ${itemSize} should be equal to zero.`
          );
        }
        return [remainder / itemSize, offset];
      }
      throw new Error(`Unrecognized array-like codec size: ${JSON.stringify(size)}`);
    }
    function computeArrayLikeCodecSize2(size, itemSize) {
      if (typeof size !== "number")
        return null;
      if (size === 0)
        return 0;
      return itemSize === null ? null : itemSize * size;
    }
    function getBitArrayEncoder(size, config = {}) {
      const parsedConfig = typeof config === "boolean" ? { backward: config } : config;
      const backward = parsedConfig.backward ?? false;
      return codecsCore.createEncoder({
        fixedSize: size,
        write(value, bytes, offset) {
          const bytesToAdd = [];
          for (let i = 0; i < size; i += 1) {
            let byte = 0;
            for (let j = 0; j < 8; j += 1) {
              const feature = Number(value[i * 8 + j] ?? 0);
              byte |= feature << (backward ? j : 7 - j);
            }
            if (backward) {
              bytesToAdd.unshift(byte);
            } else {
              bytesToAdd.push(byte);
            }
          }
          bytes.set(bytesToAdd, offset);
          return size;
        }
      });
    }
    function getBitArrayDecoder(size, config = {}) {
      const parsedConfig = typeof config === "boolean" ? { backward: config } : config;
      const backward = parsedConfig.backward ?? false;
      return codecsCore.createDecoder({
        fixedSize: size,
        read(bytes, offset) {
          codecsCore.assertByteArrayHasEnoughBytesForCodec("bitArray", size, bytes, offset);
          const booleans = [];
          let slice = bytes.slice(offset, offset + size);
          slice = backward ? slice.reverse() : slice;
          slice.forEach((byte) => {
            for (let i = 0; i < 8; i += 1) {
              if (backward) {
                booleans.push(Boolean(byte & 1));
                byte >>= 1;
              } else {
                booleans.push(Boolean(byte & 128));
                byte <<= 1;
              }
            }
          });
          return [booleans, offset + size];
        }
      });
    }
    function getBitArrayCodec(size, config = {}) {
      return codecsCore.combineCodec(getBitArrayEncoder(size, config), getBitArrayDecoder(size, config));
    }
    function getBooleanEncoder2(config = {}) {
      const size = config.size ?? codecsNumbers.getU8Encoder();
      codecsCore.assertIsFixedSize(size, "Codec [bool] requires a fixed size.");
      return codecsCore.mapEncoder(size, (value) => value ? 1 : 0);
    }
    function getBooleanDecoder(config = {}) {
      const size = config.size ?? codecsNumbers.getU8Decoder();
      codecsCore.assertIsFixedSize(size, "Codec [bool] requires a fixed size.");
      return codecsCore.mapDecoder(size, (value) => Number(value) === 1);
    }
    function getBooleanCodec(config = {}) {
      return codecsCore.combineCodec(getBooleanEncoder2(config), getBooleanDecoder(config));
    }
    function getBytesEncoder2(config = {}) {
      const size = config.size ?? "variable";
      const byteEncoder = codecsCore.createEncoder({
        getSizeFromValue: (value) => value.length,
        write: (value, bytes, offset) => {
          bytes.set(value, offset);
          return offset + value.length;
        }
      });
      if (size === "variable") {
        return byteEncoder;
      }
      if (typeof size === "number") {
        return codecsCore.fixEncoder(byteEncoder, size);
      }
      return codecsCore.createEncoder({
        getSizeFromValue: (value) => codecsCore.getEncodedSize(value.length, size) + value.length,
        write: (value, bytes, offset) => {
          offset = size.write(value.length, bytes, offset);
          return byteEncoder.write(value, bytes, offset);
        }
      });
    }
    function getBytesDecoder2(config = {}) {
      const size = config.size ?? "variable";
      const byteDecoder = codecsCore.createDecoder({
        read: (bytes, offset) => {
          const slice = bytes.slice(offset);
          return [slice, offset + slice.length];
        }
      });
      if (size === "variable") {
        return byteDecoder;
      }
      if (typeof size === "number") {
        return codecsCore.fixDecoder(byteDecoder, size);
      }
      return codecsCore.createDecoder({
        read: (bytes, offset) => {
          codecsCore.assertByteArrayIsNotEmptyForCodec("bytes", bytes, offset);
          const [lengthBigInt, lengthOffset] = size.read(bytes, offset);
          const length = Number(lengthBigInt);
          offset = lengthOffset;
          const contentBytes = bytes.slice(offset, offset + length);
          codecsCore.assertByteArrayHasEnoughBytesForCodec("bytes", length, contentBytes);
          const [value, contentOffset] = byteDecoder.read(contentBytes, 0);
          offset += contentOffset;
          return [value, offset];
        }
      });
    }
    function getBytesCodec2(config = {}) {
      return codecsCore.combineCodec(getBytesEncoder2(config), getBytesDecoder2(config));
    }
    function getDataEnumEncoder(variants, config = {}) {
      const prefix = config.size ?? codecsNumbers.getU8Encoder();
      const fixedSize = getDataEnumFixedSize(variants, prefix);
      return codecsCore.createEncoder(__spreadProps(__spreadValues({}, fixedSize !== null ? { fixedSize } : {
        getSizeFromValue: (variant) => {
          const discriminator = getVariantDiscriminator(variants, variant);
          const variantEncoder = variants[discriminator][1];
          return codecsCore.getEncodedSize(discriminator, prefix) + codecsCore.getEncodedSize(variant, variantEncoder);
        },
        maxSize: getDataEnumMaxSize(variants, prefix)
      }), {
        write: (variant, bytes, offset) => {
          const discriminator = getVariantDiscriminator(variants, variant);
          offset = prefix.write(discriminator, bytes, offset);
          const variantEncoder = variants[discriminator][1];
          return variantEncoder.write(variant, bytes, offset);
        }
      }));
    }
    function getDataEnumDecoder(variants, config = {}) {
      const prefix = config.size ?? codecsNumbers.getU8Decoder();
      const fixedSize = getDataEnumFixedSize(variants, prefix);
      return codecsCore.createDecoder(__spreadProps(__spreadValues({}, fixedSize !== null ? { fixedSize } : { maxSize: getDataEnumMaxSize(variants, prefix) }), {
        read: (bytes, offset) => {
          codecsCore.assertByteArrayIsNotEmptyForCodec("dataEnum", bytes, offset);
          const [discriminator, dOffset] = prefix.read(bytes, offset);
          offset = dOffset;
          const variantField = variants[Number(discriminator)] ?? null;
          if (!variantField) {
            throw new Error(
              `Enum discriminator out of range. Expected a number between 0 and ${variants.length - 1}, got ${discriminator}.`
            );
          }
          const [variant, vOffset] = variantField[1].read(bytes, offset);
          offset = vOffset;
          return [__spreadValues({ __kind: variantField[0] }, variant ?? {}), offset];
        }
      }));
    }
    function getDataEnumCodec2(variants, config = {}) {
      return codecsCore.combineCodec(getDataEnumEncoder(variants, config), getDataEnumDecoder(variants, config));
    }
    function getDataEnumFixedSize(variants, prefix) {
      if (variants.length === 0)
        return codecsCore.isFixedSize(prefix) ? prefix.fixedSize : null;
      if (!codecsCore.isFixedSize(variants[0][1]))
        return null;
      const variantSize = variants[0][1].fixedSize;
      const sameSizedVariants = variants.every(
        (variant) => codecsCore.isFixedSize(variant[1]) && variant[1].fixedSize === variantSize
      );
      if (!sameSizedVariants)
        return null;
      return codecsCore.isFixedSize(prefix) ? prefix.fixedSize + variantSize : null;
    }
    function getDataEnumMaxSize(variants, prefix) {
      const maxVariantSize = maxCodecSizes(variants.map(([, codec]) => getMaxSize2(codec)));
      return sumCodecSizes2([getMaxSize2(prefix), maxVariantSize]) ?? void 0;
    }
    function getVariantDiscriminator(variants, variant) {
      const discriminator = variants.findIndex(([key]) => variant.__kind === key);
      if (discriminator < 0) {
        throw new Error(
          `Invalid data enum variant. Expected one of [${variants.map(([key]) => key).join(", ")}], got "${variant.__kind}".`
        );
      }
      return discriminator;
    }
    function getTupleEncoder2(items) {
      const fixedSize = sumCodecSizes2(items.map(getFixedSize2));
      const maxSize = sumCodecSizes2(items.map(getMaxSize2)) ?? void 0;
      return codecsCore.createEncoder(__spreadProps(__spreadValues({}, fixedSize === null ? {
        getSizeFromValue: (value) => items.map((item, index) => codecsCore.getEncodedSize(value[index], item)).reduce((all, one) => all + one, 0),
        maxSize
      } : { fixedSize }), {
        write: (value, bytes, offset) => {
          assertValidNumberOfItemsForCodec2("tuple", items.length, value.length);
          items.forEach((item, index) => {
            offset = item.write(value[index], bytes, offset);
          });
          return offset;
        }
      }));
    }
    function getTupleDecoder2(items) {
      const fixedSize = sumCodecSizes2(items.map(getFixedSize2));
      const maxSize = sumCodecSizes2(items.map(getMaxSize2)) ?? void 0;
      return codecsCore.createDecoder(__spreadProps(__spreadValues({}, fixedSize === null ? { maxSize } : { fixedSize }), {
        read: (bytes, offset) => {
          const values = [];
          items.forEach((item) => {
            const [newValue, newOffset] = item.read(bytes, offset);
            values.push(newValue);
            offset = newOffset;
          });
          return [values, offset];
        }
      }));
    }
    function getTupleCodec2(items) {
      return codecsCore.combineCodec(
        getTupleEncoder2(items),
        getTupleDecoder2(items)
      );
    }
    function getMapEncoder(key, value, config = {}) {
      return codecsCore.mapEncoder(
        getArrayEncoder2(getTupleEncoder2([key, value]), config),
        (map2) => [...map2.entries()]
      );
    }
    function getMapDecoder(key, value, config = {}) {
      return codecsCore.mapDecoder(
        getArrayDecoder2(getTupleDecoder2([key, value]), config),
        (entries) => new Map(entries)
      );
    }
    function getMapCodec(key, value, config = {}) {
      return codecsCore.combineCodec(getMapEncoder(key, value, config), getMapDecoder(key, value, config));
    }
    function getNullableEncoder(item, config = {}) {
      const prefix = config.prefix ?? codecsNumbers.getU8Encoder();
      const fixed = config.fixed ?? false;
      const isZeroSizeItem = codecsCore.isFixedSize(item) && codecsCore.isFixedSize(prefix) && item.fixedSize === 0;
      if (fixed || isZeroSizeItem) {
        codecsCore.assertIsFixedSize(item, "Fixed nullables can only be used with fixed-size codecs.");
        codecsCore.assertIsFixedSize(prefix, "Fixed nullables can only be used with fixed-size prefix.");
        const fixedSize = prefix.fixedSize + item.fixedSize;
        return codecsCore.createEncoder({
          fixedSize,
          write: (option, bytes, offset) => {
            const prefixOffset = prefix.write(Number(option !== null), bytes, offset);
            if (option !== null) {
              item.write(option, bytes, prefixOffset);
            }
            return offset + fixedSize;
          }
        });
      }
      return codecsCore.createEncoder({
        getSizeFromValue: (option) => codecsCore.getEncodedSize(Number(option !== null), prefix) + (option !== null ? codecsCore.getEncodedSize(option, item) : 0),
        maxSize: sumCodecSizes2([prefix, item].map(getMaxSize2)) ?? void 0,
        write: (option, bytes, offset) => {
          offset = prefix.write(Number(option !== null), bytes, offset);
          if (option !== null) {
            offset = item.write(option, bytes, offset);
          }
          return offset;
        }
      });
    }
    function getNullableDecoder(item, config = {}) {
      const prefix = config.prefix ?? codecsNumbers.getU8Decoder();
      const fixed = config.fixed ?? false;
      let fixedSize = null;
      const isZeroSizeItem = codecsCore.isFixedSize(item) && codecsCore.isFixedSize(prefix) && item.fixedSize === 0;
      if (fixed || isZeroSizeItem) {
        codecsCore.assertIsFixedSize(item, "Fixed nullables can only be used with fixed-size codecs.");
        codecsCore.assertIsFixedSize(prefix, "Fixed nullables can only be used with fixed-size prefix.");
        fixedSize = prefix.fixedSize + item.fixedSize;
      }
      return codecsCore.createDecoder(__spreadProps(__spreadValues({}, fixedSize === null ? { maxSize: sumCodecSizes2([prefix, item].map(getMaxSize2)) ?? void 0 } : { fixedSize }), {
        read: (bytes, offset) => {
          if (bytes.length - offset <= 0) {
            return [null, offset];
          }
          const [isSome, prefixOffset] = prefix.read(bytes, offset);
          if (isSome === 0) {
            return [null, fixedSize !== null ? offset + fixedSize : prefixOffset];
          }
          const [value, newOffset] = item.read(bytes, prefixOffset);
          return [value, fixedSize !== null ? offset + fixedSize : newOffset];
        }
      }));
    }
    function getNullableCodec(item, config = {}) {
      const configCast = config;
      return codecsCore.combineCodec(getNullableEncoder(item, configCast), getNullableDecoder(item, configCast));
    }
    function getScalarEnumEncoder(constructor, config = {}) {
      const prefix = config.size ?? codecsNumbers.getU8Encoder();
      const { minRange, maxRange, stringValues, enumKeys, enumValues } = getScalarEnumStats(constructor);
      return codecsCore.mapEncoder(prefix, (value) => {
        const isInvalidNumber = typeof value === "number" && (value < minRange || value > maxRange);
        const isInvalidString = typeof value === "string" && !stringValues.includes(value);
        if (isInvalidNumber || isInvalidString) {
          throw new Error(
            `Invalid scalar enum variant. Expected one of [${stringValues.join(", ")}] or a number between ${minRange} and ${maxRange}, got "${value}".`
          );
        }
        if (typeof value === "number")
          return value;
        const valueIndex = enumValues.indexOf(value);
        if (valueIndex >= 0)
          return valueIndex;
        return enumKeys.indexOf(value);
      });
    }
    function getScalarEnumDecoder(constructor, config = {}) {
      const prefix = config.size ?? codecsNumbers.getU8Decoder();
      const { minRange, maxRange, isNumericEnum, enumValues } = getScalarEnumStats(constructor);
      return codecsCore.mapDecoder(prefix, (value) => {
        const valueAsNumber = Number(value);
        if (valueAsNumber < minRange || valueAsNumber > maxRange) {
          throw new Error(
            `Enum discriminator out of range. Expected a number between ${minRange} and ${maxRange}, got ${valueAsNumber}.`
          );
        }
        return isNumericEnum ? valueAsNumber : enumValues[valueAsNumber];
      });
    }
    function getScalarEnumCodec(constructor, config = {}) {
      return codecsCore.combineCodec(getScalarEnumEncoder(constructor, config), getScalarEnumDecoder(constructor, config));
    }
    function getScalarEnumStats(constructor) {
      const enumKeys = Object.keys(constructor);
      const enumValues = Object.values(constructor);
      const isNumericEnum = enumValues.some((v) => typeof v === "number");
      const minRange = 0;
      const maxRange = isNumericEnum ? enumValues.length / 2 - 1 : enumValues.length - 1;
      const stringValues = isNumericEnum ? [...enumKeys] : [.../* @__PURE__ */ new Set([...enumKeys, ...enumValues])];
      return {
        enumKeys,
        enumValues,
        isNumericEnum,
        maxRange,
        minRange,
        stringValues
      };
    }
    function getSetEncoder(item, config = {}) {
      return codecsCore.mapEncoder(getArrayEncoder2(item, config), (set) => [...set]);
    }
    function getSetDecoder(item, config = {}) {
      return codecsCore.mapDecoder(getArrayDecoder2(item, config), (entries) => new Set(entries));
    }
    function getSetCodec(item, config = {}) {
      return codecsCore.combineCodec(getSetEncoder(item, config), getSetDecoder(item, config));
    }
    function getStructEncoder2(fields) {
      const fieldCodecs = fields.map(([, codec]) => codec);
      const fixedSize = sumCodecSizes2(fieldCodecs.map(getFixedSize2));
      const maxSize = sumCodecSizes2(fieldCodecs.map(getMaxSize2)) ?? void 0;
      return codecsCore.createEncoder(__spreadProps(__spreadValues({}, fixedSize === null ? {
        getSizeFromValue: (value) => fields.map(([key, codec]) => codecsCore.getEncodedSize(value[key], codec)).reduce((all, one) => all + one, 0),
        maxSize
      } : { fixedSize }), {
        write: (struct51, bytes, offset) => {
          fields.forEach(([key, codec]) => {
            offset = codec.write(struct51[key], bytes, offset);
          });
          return offset;
        }
      }));
    }
    function getStructDecoder2(fields) {
      const fieldCodecs = fields.map(([, codec]) => codec);
      const fixedSize = sumCodecSizes2(fieldCodecs.map(getFixedSize2));
      const maxSize = sumCodecSizes2(fieldCodecs.map(getMaxSize2)) ?? void 0;
      return codecsCore.createDecoder(__spreadProps(__spreadValues({}, fixedSize === null ? { maxSize } : { fixedSize }), {
        read: (bytes, offset) => {
          const struct51 = {};
          fields.forEach(([key, codec]) => {
            const [value, newOffset] = codec.read(bytes, offset);
            offset = newOffset;
            struct51[key] = value;
          });
          return [struct51, offset];
        }
      }));
    }
    function getStructCodec2(fields) {
      return codecsCore.combineCodec(getStructEncoder2(fields), getStructDecoder2(fields));
    }
    function getUnitEncoder() {
      return codecsCore.createEncoder({
        fixedSize: 0,
        write: (_value, _bytes, offset) => offset
      });
    }
    function getUnitDecoder() {
      return codecsCore.createDecoder({
        fixedSize: 0,
        read: (_bytes, offset) => [void 0, offset]
      });
    }
    function getUnitCodec2() {
      return codecsCore.combineCodec(getUnitEncoder(), getUnitDecoder());
    }
    exports.assertValidNumberOfItemsForCodec = assertValidNumberOfItemsForCodec2;
    exports.getArrayCodec = getArrayCodec2;
    exports.getArrayDecoder = getArrayDecoder2;
    exports.getArrayEncoder = getArrayEncoder2;
    exports.getBitArrayCodec = getBitArrayCodec;
    exports.getBitArrayDecoder = getBitArrayDecoder;
    exports.getBitArrayEncoder = getBitArrayEncoder;
    exports.getBooleanCodec = getBooleanCodec;
    exports.getBooleanDecoder = getBooleanDecoder;
    exports.getBooleanEncoder = getBooleanEncoder2;
    exports.getBytesCodec = getBytesCodec2;
    exports.getBytesDecoder = getBytesDecoder2;
    exports.getBytesEncoder = getBytesEncoder2;
    exports.getDataEnumCodec = getDataEnumCodec2;
    exports.getDataEnumDecoder = getDataEnumDecoder;
    exports.getDataEnumEncoder = getDataEnumEncoder;
    exports.getMapCodec = getMapCodec;
    exports.getMapDecoder = getMapDecoder;
    exports.getMapEncoder = getMapEncoder;
    exports.getNullableCodec = getNullableCodec;
    exports.getNullableDecoder = getNullableDecoder;
    exports.getNullableEncoder = getNullableEncoder;
    exports.getScalarEnumCodec = getScalarEnumCodec;
    exports.getScalarEnumDecoder = getScalarEnumDecoder;
    exports.getScalarEnumEncoder = getScalarEnumEncoder;
    exports.getSetCodec = getSetCodec;
    exports.getSetDecoder = getSetDecoder;
    exports.getSetEncoder = getSetEncoder;
    exports.getStructCodec = getStructCodec2;
    exports.getStructDecoder = getStructDecoder2;
    exports.getStructEncoder = getStructEncoder2;
    exports.getTupleCodec = getTupleCodec2;
    exports.getTupleDecoder = getTupleDecoder2;
    exports.getTupleEncoder = getTupleEncoder2;
    exports.getUnitCodec = getUnitCodec2;
    exports.getUnitDecoder = getUnitDecoder;
    exports.getUnitEncoder = getUnitEncoder;
  }
});

// ../../node_modules/@solana/codecs-strings/dist/index.browser.cjs
var require_index_browser4 = __commonJS({
  "../../node_modules/@solana/codecs-strings/dist/index.browser.cjs"(exports) {
    "use strict";
    var codecsCore = require_index_browser();
    var codecsNumbers = require_index_browser2();
    function assertValidBaseString(alphabet4, testValue, givenValue = testValue) {
      if (!testValue.match(new RegExp(`^[${alphabet4}]*$`))) {
        throw new Error(`Expected a string of base ${alphabet4.length}, got [${givenValue}].`);
      }
    }
    var getBaseXEncoder = (alphabet4) => {
      return codecsCore.createEncoder({
        getSizeFromValue: (value) => {
          const [leadingZeroes, tailChars] = partitionLeadingZeroes(value, alphabet4[0]);
          if (tailChars === "")
            return value.length;
          const base10Number = getBigIntFromBaseX(tailChars, alphabet4);
          return leadingZeroes.length + Math.ceil(base10Number.toString(16).length / 2);
        },
        write(value, bytes, offset) {
          assertValidBaseString(alphabet4, value);
          if (value === "")
            return offset;
          const [leadingZeroes, tailChars] = partitionLeadingZeroes(value, alphabet4[0]);
          if (tailChars === "") {
            bytes.set(new Uint8Array(leadingZeroes.length).fill(0), offset);
            return offset + leadingZeroes.length;
          }
          let base10Number = getBigIntFromBaseX(tailChars, alphabet4);
          const tailBytes = [];
          while (base10Number > 0n) {
            tailBytes.unshift(Number(base10Number % 256n));
            base10Number /= 256n;
          }
          const bytesToAdd = [...Array(leadingZeroes.length).fill(0), ...tailBytes];
          bytes.set(bytesToAdd, offset);
          return offset + bytesToAdd.length;
        }
      });
    };
    var getBaseXDecoder = (alphabet4) => {
      return codecsCore.createDecoder({
        read(rawBytes, offset) {
          const bytes = offset === 0 ? rawBytes : rawBytes.slice(offset);
          if (bytes.length === 0)
            return ["", 0];
          let trailIndex = bytes.findIndex((n) => n !== 0);
          trailIndex = trailIndex === -1 ? bytes.length : trailIndex;
          const leadingZeroes = alphabet4[0].repeat(trailIndex);
          if (trailIndex === bytes.length)
            return [leadingZeroes, rawBytes.length];
          const base10Number = bytes.slice(trailIndex).reduce((sum, byte) => sum * 256n + BigInt(byte), 0n);
          const tailChars = getBaseXFromBigInt(base10Number, alphabet4);
          return [leadingZeroes + tailChars, rawBytes.length];
        }
      });
    };
    var getBaseXCodec = (alphabet4) => codecsCore.combineCodec(getBaseXEncoder(alphabet4), getBaseXDecoder(alphabet4));
    function partitionLeadingZeroes(value, zeroCharacter) {
      const leadingZeroIndex = [...value].findIndex((c) => c !== zeroCharacter);
      return leadingZeroIndex === -1 ? [value, ""] : [value.slice(0, leadingZeroIndex), value.slice(leadingZeroIndex)];
    }
    function getBigIntFromBaseX(value, alphabet4) {
      const base2 = BigInt(alphabet4.length);
      return [...value].reduce((sum, char) => sum * base2 + BigInt(alphabet4.indexOf(char)), 0n);
    }
    function getBaseXFromBigInt(value, alphabet4) {
      const base2 = BigInt(alphabet4.length);
      const tailChars = [];
      while (value > 0n) {
        tailChars.unshift(alphabet4[Number(value % base2)]);
        value /= base2;
      }
      return tailChars.join("");
    }
    var alphabet = "0123456789";
    var getBase10Encoder = () => getBaseXEncoder(alphabet);
    var getBase10Decoder = () => getBaseXDecoder(alphabet);
    var getBase10Codec = () => getBaseXCodec(alphabet);
    var getBase16Encoder = () => codecsCore.createEncoder({
      getSizeFromValue: (value) => Math.ceil(value.length / 2),
      write(value, bytes, offset) {
        const lowercaseValue = value.toLowerCase();
        assertValidBaseString("0123456789abcdef", lowercaseValue, value);
        const matches = lowercaseValue.match(/.{1,2}/g);
        const hexBytes = matches ? matches.map((byte) => parseInt(byte, 16)) : [];
        bytes.set(hexBytes, offset);
        return hexBytes.length + offset;
      }
    });
    var getBase16Decoder = () => codecsCore.createDecoder({
      read(bytes, offset) {
        const value = bytes.slice(offset).reduce((str, byte) => str + byte.toString(16).padStart(2, "0"), "");
        return [value, bytes.length];
      }
    });
    var getBase16Codec = () => codecsCore.combineCodec(getBase16Encoder(), getBase16Decoder());
    var alphabet2 = "123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz";
    var getBase58Encoder = () => getBaseXEncoder(alphabet2);
    var getBase58Decoder = () => getBaseXDecoder(alphabet2);
    var getBase58Codec = () => getBaseXCodec(alphabet2);
    var getBaseXResliceEncoder = (alphabet4, bits) => codecsCore.createEncoder({
      getSizeFromValue: (value) => Math.floor(value.length * bits / 8),
      write(value, bytes, offset) {
        assertValidBaseString(alphabet4, value);
        if (value === "")
          return offset;
        const charIndices = [...value].map((c) => alphabet4.indexOf(c));
        const reslicedBytes = reslice(charIndices, bits, 8, false);
        bytes.set(reslicedBytes, offset);
        return reslicedBytes.length + offset;
      }
    });
    var getBaseXResliceDecoder = (alphabet4, bits) => codecsCore.createDecoder({
      read(rawBytes, offset = 0) {
        const bytes = offset === 0 ? rawBytes : rawBytes.slice(offset);
        if (bytes.length === 0)
          return ["", rawBytes.length];
        const charIndices = reslice([...bytes], 8, bits, true);
        return [charIndices.map((i) => alphabet4[i]).join(""), rawBytes.length];
      }
    });
    var getBaseXResliceCodec = (alphabet4, bits) => codecsCore.combineCodec(getBaseXResliceEncoder(alphabet4, bits), getBaseXResliceDecoder(alphabet4, bits));
    function reslice(input, inputBits, outputBits, useRemainder) {
      const output = [];
      let accumulator = 0;
      let bitsInAccumulator = 0;
      const mask = (1 << outputBits) - 1;
      for (const value of input) {
        accumulator = accumulator << inputBits | value;
        bitsInAccumulator += inputBits;
        while (bitsInAccumulator >= outputBits) {
          bitsInAccumulator -= outputBits;
          output.push(accumulator >> bitsInAccumulator & mask);
        }
      }
      if (useRemainder && bitsInAccumulator > 0) {
        output.push(accumulator << outputBits - bitsInAccumulator & mask);
      }
      return output;
    }
    var getBase64Encoder = () => {
      {
        return codecsCore.createEncoder({
          getSizeFromValue: (value) => {
            try {
              return atob(value).length;
            } catch (e22) {
              throw new Error(`Expected a string of base 64, got [${value}].`);
            }
          },
          write(value, bytes, offset) {
            try {
              const bytesToAdd = atob(value).split("").map((c) => c.charCodeAt(0));
              bytes.set(bytesToAdd, offset);
              return bytesToAdd.length + offset;
            } catch (e22) {
              throw new Error(`Expected a string of base 64, got [${value}].`);
            }
          }
        });
      }
    };
    var getBase64Decoder = () => {
      {
        return codecsCore.createDecoder({
          read(bytes, offset = 0) {
            const slice = bytes.slice(offset);
            const value = btoa(String.fromCharCode(...slice));
            return [value, bytes.length];
          }
        });
      }
    };
    var getBase64Codec = () => codecsCore.combineCodec(getBase64Encoder(), getBase64Decoder());
    var removeNullCharacters2 = (value) => (
      // eslint-disable-next-line no-control-regex
      value.replace(/\u0000/g, "")
    );
    var padNullCharacters = (value, chars) => value.padEnd(chars, "\0");
    var e2 = globalThis.TextDecoder;
    var o2 = globalThis.TextEncoder;
    var getUtf8Encoder2 = () => {
      let textEncoder;
      return codecsCore.createEncoder({
        getSizeFromValue: (value) => (textEncoder ||= new o2()).encode(value).length,
        write: (value, bytes, offset) => {
          const bytesToAdd = (textEncoder ||= new o2()).encode(value);
          bytes.set(bytesToAdd, offset);
          return offset + bytesToAdd.length;
        }
      });
    };
    var getUtf8Decoder2 = () => {
      let textDecoder;
      return codecsCore.createDecoder({
        read(bytes, offset) {
          const value = (textDecoder ||= new e2()).decode(bytes.slice(offset));
          return [removeNullCharacters2(value), bytes.length];
        }
      });
    };
    var getUtf8Codec = () => codecsCore.combineCodec(getUtf8Encoder2(), getUtf8Decoder2());
    function getStringEncoder2(config = {}) {
      const size = config.size ?? codecsNumbers.getU32Encoder();
      const encoding = config.encoding ?? getUtf8Encoder2();
      if (size === "variable") {
        return encoding;
      }
      if (typeof size === "number") {
        return codecsCore.fixEncoder(encoding, size);
      }
      return codecsCore.createEncoder({
        getSizeFromValue: (value) => {
          const contentSize = codecsCore.getEncodedSize(value, encoding);
          return codecsCore.getEncodedSize(contentSize, size) + contentSize;
        },
        write: (value, bytes, offset) => {
          const contentSize = codecsCore.getEncodedSize(value, encoding);
          offset = size.write(contentSize, bytes, offset);
          return encoding.write(value, bytes, offset);
        }
      });
    }
    function getStringDecoder2(config = {}) {
      const size = config.size ?? codecsNumbers.getU32Decoder();
      const encoding = config.encoding ?? getUtf8Decoder2();
      if (size === "variable") {
        return encoding;
      }
      if (typeof size === "number") {
        return codecsCore.fixDecoder(encoding, size);
      }
      return codecsCore.createDecoder({
        read: (bytes, offset = 0) => {
          codecsCore.assertByteArrayIsNotEmptyForCodec("string", bytes, offset);
          const [lengthBigInt, lengthOffset] = size.read(bytes, offset);
          const length = Number(lengthBigInt);
          offset = lengthOffset;
          const contentBytes = bytes.slice(offset, offset + length);
          codecsCore.assertByteArrayHasEnoughBytesForCodec("string", length, contentBytes);
          const [value, contentOffset] = encoding.read(contentBytes, 0);
          offset += contentOffset;
          return [value, offset];
        }
      });
    }
    function getStringCodec2(config = {}) {
      return codecsCore.combineCodec(getStringEncoder2(config), getStringDecoder2(config));
    }
    exports.assertValidBaseString = assertValidBaseString;
    exports.getBase10Codec = getBase10Codec;
    exports.getBase10Decoder = getBase10Decoder;
    exports.getBase10Encoder = getBase10Encoder;
    exports.getBase16Codec = getBase16Codec;
    exports.getBase16Decoder = getBase16Decoder;
    exports.getBase16Encoder = getBase16Encoder;
    exports.getBase58Codec = getBase58Codec;
    exports.getBase58Decoder = getBase58Decoder;
    exports.getBase58Encoder = getBase58Encoder;
    exports.getBase64Codec = getBase64Codec;
    exports.getBase64Decoder = getBase64Decoder;
    exports.getBase64Encoder = getBase64Encoder;
    exports.getBaseXCodec = getBaseXCodec;
    exports.getBaseXDecoder = getBaseXDecoder;
    exports.getBaseXEncoder = getBaseXEncoder;
    exports.getBaseXResliceCodec = getBaseXResliceCodec;
    exports.getBaseXResliceDecoder = getBaseXResliceDecoder;
    exports.getBaseXResliceEncoder = getBaseXResliceEncoder;
    exports.getStringCodec = getStringCodec2;
    exports.getStringDecoder = getStringDecoder2;
    exports.getStringEncoder = getStringEncoder2;
    exports.getUtf8Codec = getUtf8Codec;
    exports.getUtf8Decoder = getUtf8Decoder2;
    exports.getUtf8Encoder = getUtf8Encoder2;
    exports.padNullCharacters = padNullCharacters;
    exports.removeNullCharacters = removeNullCharacters2;
  }
});

// ../../node_modules/@solana/spl-token-metadata/lib/cjs/field.js
var require_field = __commonJS({
  "../../node_modules/@solana/spl-token-metadata/lib/cjs/field.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.getFieldConfig = exports.getFieldCodec = exports.Field = void 0;
    var codecs_data_structures_1 = require_index_browser3();
    var codecs_strings_1 = require_index_browser4();
    var Field2;
    (function(Field3) {
      Field3[Field3["Name"] = 0] = "Name";
      Field3[Field3["Symbol"] = 1] = "Symbol";
      Field3[Field3["Uri"] = 2] = "Uri";
    })(Field2 || (exports.Field = Field2 = {}));
    var getFieldCodec2 = () => [
      ["Name", (0, codecs_data_structures_1.getUnitCodec)()],
      ["Symbol", (0, codecs_data_structures_1.getUnitCodec)()],
      ["Uri", (0, codecs_data_structures_1.getUnitCodec)()],
      ["Key", (0, codecs_data_structures_1.getStructCodec)([["value", (0, codecs_data_structures_1.getTupleCodec)([(0, codecs_strings_1.getStringCodec)()])]])]
    ];
    exports.getFieldCodec = getFieldCodec2;
    function getFieldConfig2(field) {
      if (field === Field2.Name || field === "Name" || field === "name") {
        return { __kind: "Name" };
      } else if (field === Field2.Symbol || field === "Symbol" || field === "symbol") {
        return { __kind: "Symbol" };
      } else if (field === Field2.Uri || field === "Uri" || field === "uri") {
        return { __kind: "Uri" };
      } else {
        return { __kind: "Key", value: [field] };
      }
    }
    exports.getFieldConfig = getFieldConfig2;
  }
});

// ../../node_modules/@solana/options/dist/index.browser.cjs
var require_index_browser5 = __commonJS({
  "../../node_modules/@solana/options/dist/index.browser.cjs"(exports) {
    "use strict";
    var codecsCore = require_index_browser();
    var codecsNumbers = require_index_browser2();
    var some = (value) => ({ __option: "Some", value });
    var none = () => ({ __option: "None" });
    var isOption = (input) => !!(input && typeof input === "object" && "__option" in input && (input.__option === "Some" && "value" in input || input.__option === "None"));
    var isSome = (option) => option.__option === "Some";
    var isNone = (option) => option.__option === "None";
    function unwrapOption(option, fallback) {
      if (isSome(option))
        return option.value;
      return fallback ? fallback() : null;
    }
    var wrapNullable = (nullable) => nullable !== null ? some(nullable) : none();
    function getOptionEncoder2(item, config = {}) {
      const prefix = config.prefix ?? codecsNumbers.getU8Encoder();
      const fixed = config.fixed ?? false;
      const isZeroSizeItem = codecsCore.isFixedSize(item) && codecsCore.isFixedSize(prefix) && item.fixedSize === 0;
      if (fixed || isZeroSizeItem) {
        codecsCore.assertIsFixedSize(item, "Fixed options can only be used with fixed-size codecs.");
        codecsCore.assertIsFixedSize(prefix, "Fixed options can only be used with fixed-size prefix.");
        const fixedSize = prefix.fixedSize + item.fixedSize;
        return codecsCore.createEncoder({
          fixedSize,
          write: (optionOrNullable, bytes, offset) => {
            const option = isOption(optionOrNullable) ? optionOrNullable : wrapNullable(optionOrNullable);
            const prefixOffset = prefix.write(Number(isSome(option)), bytes, offset);
            if (isSome(option)) {
              item.write(option.value, bytes, prefixOffset);
            }
            return offset + fixedSize;
          }
        });
      }
      return codecsCore.createEncoder({
        getSizeFromValue: (optionOrNullable) => {
          const option = isOption(optionOrNullable) ? optionOrNullable : wrapNullable(optionOrNullable);
          return codecsCore.getEncodedSize(Number(isSome(option)), prefix) + (isSome(option) ? codecsCore.getEncodedSize(option.value, item) : 0);
        },
        maxSize: sumCodecSizes2([prefix, item].map(getMaxSize2)) ?? void 0,
        write: (optionOrNullable, bytes, offset) => {
          const option = isOption(optionOrNullable) ? optionOrNullable : wrapNullable(optionOrNullable);
          offset = prefix.write(Number(isSome(option)), bytes, offset);
          if (isSome(option)) {
            offset = item.write(option.value, bytes, offset);
          }
          return offset;
        }
      });
    }
    function getOptionDecoder(item, config = {}) {
      const prefix = config.prefix ?? codecsNumbers.getU8Decoder();
      const fixed = config.fixed ?? false;
      let fixedSize = null;
      const isZeroSizeItem = codecsCore.isFixedSize(item) && codecsCore.isFixedSize(prefix) && item.fixedSize === 0;
      if (fixed || isZeroSizeItem) {
        codecsCore.assertIsFixedSize(item, "Fixed options can only be used with fixed-size codecs.");
        codecsCore.assertIsFixedSize(prefix, "Fixed options can only be used with fixed-size prefix.");
        fixedSize = prefix.fixedSize + item.fixedSize;
      }
      return codecsCore.createDecoder(__spreadProps(__spreadValues({}, fixedSize === null ? { maxSize: sumCodecSizes2([prefix, item].map(getMaxSize2)) ?? void 0 } : { fixedSize }), {
        read: (bytes, offset) => {
          if (bytes.length - offset <= 0) {
            return [none(), offset];
          }
          const [isSome2, prefixOffset] = prefix.read(bytes, offset);
          if (isSome2 === 0) {
            return [none(), fixedSize !== null ? offset + fixedSize : prefixOffset];
          }
          const [value, newOffset] = item.read(bytes, prefixOffset);
          return [some(value), fixedSize !== null ? offset + fixedSize : newOffset];
        }
      }));
    }
    function getOptionCodec(item, config = {}) {
      return codecsCore.combineCodec(getOptionEncoder2(item, config), getOptionDecoder(item, config));
    }
    function sumCodecSizes2(sizes) {
      return sizes.reduce((all, size) => all === null || size === null ? null : all + size, 0);
    }
    function getMaxSize2(codec) {
      return codecsCore.isFixedSize(codec) ? codec.fixedSize : codec.maxSize ?? null;
    }
    function unwrapOptionRecursively(input, fallback) {
      if (!input || ArrayBuffer.isView(input)) {
        return input;
      }
      const next = (x) => fallback ? unwrapOptionRecursively(x, fallback) : unwrapOptionRecursively(x);
      if (isOption(input)) {
        if (isSome(input))
          return next(input.value);
        return fallback ? fallback() : null;
      }
      if (Array.isArray(input)) {
        return input.map(next);
      }
      if (typeof input === "object") {
        return Object.fromEntries(Object.entries(input).map(([k, v]) => [k, next(v)]));
      }
      return input;
    }
    exports.getOptionCodec = getOptionCodec;
    exports.getOptionDecoder = getOptionDecoder;
    exports.getOptionEncoder = getOptionEncoder2;
    exports.isNone = isNone;
    exports.isOption = isOption;
    exports.isSome = isSome;
    exports.none = none;
    exports.some = some;
    exports.unwrapOption = unwrapOption;
    exports.unwrapOptionRecursively = unwrapOptionRecursively;
    exports.wrapNullable = wrapNullable;
  }
});

// ../../node_modules/@solana/spl-type-length-value/lib/cjs/splDiscriminate.js
var require_splDiscriminate = __commonJS({
  "../../node_modules/@solana/spl-type-length-value/lib/cjs/splDiscriminate.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.splDiscriminate = void 0;
    var crypto_1 = require_crypto();
    var splDiscriminate2 = (discriminator, length = 8) => {
      const digest = (0, crypto_1.createHash)("sha256").update(discriminator).digest();
      return digest.subarray(0, length);
    };
    exports.splDiscriminate = splDiscriminate2;
  }
});

// ../../node_modules/@solana/spl-type-length-value/lib/cjs/errors.js
var require_errors4 = __commonJS({
  "../../node_modules/@solana/spl-type-length-value/lib/cjs/errors.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.TlvInvalidAccountDataError = exports.TlvError = void 0;
    var TlvError = class extends Error {
      constructor(message) {
        super(message);
      }
    };
    exports.TlvError = TlvError;
    var TlvInvalidAccountDataError2 = class extends TlvError {
      constructor() {
        super(...arguments);
        this.name = "TlvInvalidAccountDataError";
      }
    };
    exports.TlvInvalidAccountDataError = TlvInvalidAccountDataError2;
  }
});

// ../../node_modules/@solana/spl-type-length-value/lib/cjs/tlvState.js
var require_tlvState = __commonJS({
  "../../node_modules/@solana/spl-type-length-value/lib/cjs/tlvState.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.TlvState = void 0;
    var errors_js_1 = require_errors4();
    var TlvState = class {
      constructor(buffer2, discriminatorSize = 2, lengthSize = 2, offset = 0) {
        this.tlvData = buffer2.subarray(offset);
        this.discriminatorSize = discriminatorSize;
        this.lengthSize = lengthSize;
      }
      /**
       * Get the raw tlv data
       *
       * @return the raw tlv data
       */
      get data() {
        return this.tlvData;
      }
      readEntryLength(size, offset, constructor) {
        switch (size) {
          case 1:
            return constructor(this.tlvData.readUInt8(offset));
          case 2:
            return constructor(this.tlvData.readUInt16LE(offset));
          case 4:
            return constructor(this.tlvData.readUInt32LE(offset));
          case 8:
            return constructor(this.tlvData.readBigUInt64LE(offset));
        }
      }
      /**
       * Get a single entry from the tlv data. This function returns the first entry with the given type.
       *
       * @param type the type of the entry to get
       *
       * @return the entry from the tlv data or null
       */
      firstBytes(discriminator) {
        const entries = this.bytesRepeating(discriminator, 1);
        return entries.length > 0 ? entries[0] : null;
      }
      /**
       * Get a multiple entries from the tlv data. This function returns `count` or less entries with the given type.
       *
       * @param type the type of the entry to get
       * @param count the number of entries to get (0 for all entries)
       *
       * @return the entry from the tlv data or null
       */
      bytesRepeating(discriminator, count = 0) {
        const entries = [];
        let offset = 0;
        while (offset < this.tlvData.length) {
          if (offset + this.discriminatorSize + this.lengthSize > this.tlvData.length) {
            throw new errors_js_1.TlvInvalidAccountDataError();
          }
          const type = this.tlvData.subarray(offset, offset + this.discriminatorSize);
          offset += this.discriminatorSize;
          const entryLength = this.readEntryLength(this.lengthSize, offset, Number);
          offset += this.lengthSize;
          if (offset + entryLength > this.tlvData.length) {
            throw new errors_js_1.TlvInvalidAccountDataError();
          }
          if (type.equals(discriminator)) {
            entries.push(this.tlvData.subarray(offset, offset + entryLength));
          }
          if (count > 0 && entries.length >= count) {
            break;
          }
          offset += entryLength;
        }
        return entries;
      }
      /**
       * Get all the discriminators from the tlv data. This function will return a type multiple times if it occurs multiple times in the tlv data.
       *
       * @return a list of the discriminators.
       */
      discriminators() {
        const discriminators = [];
        let offset = 0;
        while (offset < this.tlvData.length) {
          if (offset + this.discriminatorSize + this.lengthSize > this.tlvData.length) {
            throw new errors_js_1.TlvInvalidAccountDataError();
          }
          const type = this.tlvData.subarray(offset, offset + this.discriminatorSize);
          discriminators.push(type);
          offset += this.discriminatorSize;
          const entryLength = this.readEntryLength(this.lengthSize, offset, Number);
          offset += this.lengthSize;
          if (offset + entryLength > this.tlvData.length) {
            throw new errors_js_1.TlvInvalidAccountDataError();
          }
          offset += entryLength;
        }
        return discriminators;
      }
    };
    exports.TlvState = TlvState;
  }
});

// ../../node_modules/@solana/spl-type-length-value/lib/cjs/index.js
var require_cjs2 = __commonJS({
  "../../node_modules/@solana/spl-type-length-value/lib/cjs/index.js"(exports) {
    "use strict";
    var __createBinding = exports && exports.__createBinding || (Object.create ? function(o2, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      var desc = Object.getOwnPropertyDescriptor(m, k);
      if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m[k];
        } };
      }
      Object.defineProperty(o2, k2, desc);
    } : function(o2, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      o2[k2] = m[k];
    });
    var __exportStar = exports && exports.__exportStar || function(m, exports2) {
      for (var p in m)
        if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports2, p))
          __createBinding(exports2, m, p);
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    __exportStar(require_splDiscriminate(), exports);
    __exportStar(require_tlvState(), exports);
    __exportStar(require_errors4(), exports);
  }
});

// ../../node_modules/@solana/spl-token-metadata/lib/cjs/instruction.js
var require_instruction = __commonJS({
  "../../node_modules/@solana/spl-token-metadata/lib/cjs/instruction.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.createEmitInstruction = exports.createUpdateAuthorityInstruction = exports.createRemoveKeyInstruction = exports.createUpdateFieldInstruction = exports.createInitializeInstruction = void 0;
    var codecs_data_structures_1 = require_index_browser3();
    var codecs_numbers_1 = require_index_browser2();
    var codecs_strings_1 = require_index_browser4();
    var options_1 = require_index_browser5();
    var spl_type_length_value_1 = require_cjs2();
    var web3_js_1 = (init_index_browser_esm(), __toCommonJS(index_browser_esm_exports));
    var field_js_1 = require_field();
    function packInstruction(layout, discriminator, values) {
      const encoder = (0, codecs_data_structures_1.getStructEncoder)(layout);
      const data = encoder.encode(values);
      return Buffer.concat([discriminator, data]);
    }
    function createInitializeInstruction4(args) {
      const { programId, metadata, updateAuthority, mint, mintAuthority, name, symbol, uri } = args;
      return new web3_js_1.TransactionInstruction({
        programId,
        keys: [
          { isSigner: false, isWritable: true, pubkey: metadata },
          { isSigner: false, isWritable: false, pubkey: updateAuthority },
          { isSigner: false, isWritable: false, pubkey: mint },
          { isSigner: true, isWritable: false, pubkey: mintAuthority }
        ],
        data: packInstruction([
          ["name", (0, codecs_strings_1.getStringEncoder)()],
          ["symbol", (0, codecs_strings_1.getStringEncoder)()],
          ["uri", (0, codecs_strings_1.getStringEncoder)()]
        ], (0, spl_type_length_value_1.splDiscriminate)("spl_token_metadata_interface:initialize_account"), { name, symbol, uri })
      });
    }
    exports.createInitializeInstruction = createInitializeInstruction4;
    function createUpdateFieldInstruction2(args) {
      const { programId, metadata, updateAuthority, field, value } = args;
      return new web3_js_1.TransactionInstruction({
        programId,
        keys: [
          { isSigner: false, isWritable: true, pubkey: metadata },
          { isSigner: true, isWritable: false, pubkey: updateAuthority }
        ],
        data: packInstruction([
          ["field", (0, codecs_data_structures_1.getDataEnumCodec)((0, field_js_1.getFieldCodec)())],
          ["value", (0, codecs_strings_1.getStringEncoder)()]
        ], (0, spl_type_length_value_1.splDiscriminate)("spl_token_metadata_interface:updating_field"), { field: (0, field_js_1.getFieldConfig)(field), value })
      });
    }
    exports.createUpdateFieldInstruction = createUpdateFieldInstruction2;
    function createRemoveKeyInstruction2(args) {
      const { programId, metadata, updateAuthority, key, idempotent } = args;
      return new web3_js_1.TransactionInstruction({
        programId,
        keys: [
          { isSigner: false, isWritable: true, pubkey: metadata },
          { isSigner: true, isWritable: false, pubkey: updateAuthority }
        ],
        data: packInstruction([
          ["idempotent", (0, codecs_data_structures_1.getBooleanEncoder)()],
          ["key", (0, codecs_strings_1.getStringEncoder)()]
        ], (0, spl_type_length_value_1.splDiscriminate)("spl_token_metadata_interface:remove_key_ix"), { idempotent, key })
      });
    }
    exports.createRemoveKeyInstruction = createRemoveKeyInstruction2;
    function createUpdateAuthorityInstruction3(args) {
      const { programId, metadata, oldAuthority, newAuthority } = args;
      const newAuthorityBuffer = Buffer.alloc(32);
      if (newAuthority) {
        newAuthorityBuffer.set(newAuthority.toBuffer());
      } else {
        newAuthorityBuffer.fill(0);
      }
      return new web3_js_1.TransactionInstruction({
        programId,
        keys: [
          { isSigner: false, isWritable: true, pubkey: metadata },
          { isSigner: true, isWritable: false, pubkey: oldAuthority }
        ],
        data: packInstruction([["newAuthority", (0, codecs_data_structures_1.getBytesEncoder)({ size: 32 })]], (0, spl_type_length_value_1.splDiscriminate)("spl_token_metadata_interface:update_the_authority"), { newAuthority: newAuthorityBuffer })
      });
    }
    exports.createUpdateAuthorityInstruction = createUpdateAuthorityInstruction3;
    function createEmitInstruction2(args) {
      const { programId, metadata, start, end } = args;
      return new web3_js_1.TransactionInstruction({
        programId,
        keys: [{ isSigner: false, isWritable: false, pubkey: metadata }],
        data: packInstruction([
          ["start", (0, options_1.getOptionEncoder)((0, codecs_numbers_1.getU64Encoder)())],
          ["end", (0, options_1.getOptionEncoder)((0, codecs_numbers_1.getU64Encoder)())]
        ], (0, spl_type_length_value_1.splDiscriminate)("spl_token_metadata_interface:emitter"), { start: start !== null && start !== void 0 ? start : null, end: end !== null && end !== void 0 ? end : null })
      });
    }
    exports.createEmitInstruction = createEmitInstruction2;
  }
});

// ../../node_modules/@solana/spl-token-metadata/lib/cjs/state.js
var require_state8 = __commonJS({
  "../../node_modules/@solana/spl-token-metadata/lib/cjs/state.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.unpack = exports.pack = exports.TOKEN_METADATA_DISCRIMINATOR = void 0;
    var web3_js_1 = (init_index_browser_esm(), __toCommonJS(index_browser_esm_exports));
    var codecs_data_structures_1 = require_index_browser3();
    var codecs_strings_1 = require_index_browser4();
    exports.TOKEN_METADATA_DISCRIMINATOR = Buffer.from([112, 132, 90, 90, 11, 88, 157, 87]);
    var tokenMetadataCodec2 = (0, codecs_data_structures_1.getStructCodec)([
      ["updateAuthority", (0, codecs_data_structures_1.getBytesCodec)({ size: 32 })],
      ["mint", (0, codecs_data_structures_1.getBytesCodec)({ size: 32 })],
      ["name", (0, codecs_strings_1.getStringCodec)()],
      ["symbol", (0, codecs_strings_1.getStringCodec)()],
      ["uri", (0, codecs_strings_1.getStringCodec)()],
      ["additionalMetadata", (0, codecs_data_structures_1.getArrayCodec)((0, codecs_data_structures_1.getTupleCodec)([(0, codecs_strings_1.getStringCodec)(), (0, codecs_strings_1.getStringCodec)()]))]
    ]);
    function isNonePubkey(buffer2) {
      for (let i = 0; i < buffer2.length; i++) {
        if (buffer2[i] !== 0) {
          return false;
        }
      }
      return true;
    }
    var pack2 = (meta) => {
      var _a;
      const updateAuthority = (_a = meta.updateAuthority) !== null && _a !== void 0 ? _a : web3_js_1.PublicKey.default;
      return tokenMetadataCodec2.encode(Object.assign(Object.assign({}, meta), { updateAuthority: updateAuthority.toBuffer(), mint: meta.mint.toBuffer() }));
    };
    exports.pack = pack2;
    function unpack2(buffer2) {
      const data = tokenMetadataCodec2.decode(buffer2);
      return isNonePubkey(data.updateAuthority) ? {
        mint: new web3_js_1.PublicKey(data.mint),
        name: data.name,
        symbol: data.symbol,
        uri: data.uri,
        additionalMetadata: data.additionalMetadata
      } : {
        updateAuthority: new web3_js_1.PublicKey(data.updateAuthority),
        mint: new web3_js_1.PublicKey(data.mint),
        name: data.name,
        symbol: data.symbol,
        uri: data.uri,
        additionalMetadata: data.additionalMetadata
      };
    }
    exports.unpack = unpack2;
  }
});

// ../../node_modules/@solana/spl-token-metadata/lib/cjs/index.js
var require_cjs3 = __commonJS({
  "../../node_modules/@solana/spl-token-metadata/lib/cjs/index.js"(exports) {
    "use strict";
    var __createBinding = exports && exports.__createBinding || (Object.create ? function(o2, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      var desc = Object.getOwnPropertyDescriptor(m, k);
      if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m[k];
        } };
      }
      Object.defineProperty(o2, k2, desc);
    } : function(o2, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      o2[k2] = m[k];
    });
    var __exportStar = exports && exports.__exportStar || function(m, exports2) {
      for (var p in m)
        if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports2, p))
          __createBinding(exports2, m, p);
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    __exportStar(require_errors3(), exports);
    __exportStar(require_field(), exports);
    __exportStar(require_instruction(), exports);
    __exportStar(require_state8(), exports);
  }
});

// ../../node_modules/@solana/spl-token/lib/cjs/extensions/tokenMetadata/state.js
var require_state9 = __commonJS({
  "../../node_modules/@solana/spl-token/lib/cjs/extensions/tokenMetadata/state.js"(exports) {
    "use strict";
    var __awaiter = exports && exports.__awaiter || function(thisArg, _arguments, P, generator) {
      function adopt(value) {
        return value instanceof P ? value : new P(function(resolve) {
          resolve(value);
        });
      }
      return new (P || (P = Promise))(function(resolve, reject) {
        function fulfilled(value) {
          try {
            step(generator.next(value));
          } catch (e2) {
            reject(e2);
          }
        }
        function rejected(value) {
          try {
            step(generator["throw"](value));
          } catch (e2) {
            reject(e2);
          }
        }
        function step(result) {
          result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
        }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
      });
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.getTokenMetadata = exports.updateTokenMetadata = void 0;
    var spl_token_metadata_1 = require_cjs3();
    var constants_js_1 = require_constants();
    var extensionType_js_1 = require_extensionType();
    var mint_js_1 = require_mint();
    var getNormalizedTokenMetadataField = (field) => {
      if (field === spl_token_metadata_1.Field.Name || field === "Name" || field === "name") {
        return "name";
      }
      if (field === spl_token_metadata_1.Field.Symbol || field === "Symbol" || field === "symbol") {
        return "symbol";
      }
      if (field === spl_token_metadata_1.Field.Uri || field === "Uri" || field === "uri") {
        return "uri";
      }
      return field;
    };
    function updateTokenMetadata2(current, key, value) {
      const field = getNormalizedTokenMetadataField(key);
      if (field === "mint" || field === "updateAuthority") {
        throw new Error(`Cannot update ${field} via this instruction`);
      }
      if (["name", "symbol", "uri"].includes(field)) {
        return Object.assign(Object.assign({}, current), { [field]: value });
      }
      const additionalMetadata = [...current.additionalMetadata];
      const i = current.additionalMetadata.findIndex((x) => x[0] === field);
      if (i === -1) {
        additionalMetadata.push([field, value]);
      } else {
        additionalMetadata[i] = [field, value];
      }
      return Object.assign(Object.assign({}, current), { additionalMetadata });
    }
    exports.updateTokenMetadata = updateTokenMetadata2;
    function getTokenMetadata(connection, address, commitment, programId = constants_js_1.TOKEN_2022_PROGRAM_ID) {
      return __awaiter(this, void 0, void 0, function* () {
        const mintInfo = yield (0, mint_js_1.getMint)(connection, address, commitment, programId);
        const data = (0, extensionType_js_1.getExtensionData)(extensionType_js_1.ExtensionType.TokenMetadata, mintInfo.tlvData);
        if (data === null) {
          return null;
        }
        return (0, spl_token_metadata_1.unpack)(data);
      });
    }
    exports.getTokenMetadata = getTokenMetadata;
  }
});

// ../../node_modules/@solana/spl-token/lib/cjs/state/index.js
var require_state10 = __commonJS({
  "../../node_modules/@solana/spl-token/lib/cjs/state/index.js"(exports) {
    "use strict";
    var __createBinding = exports && exports.__createBinding || (Object.create ? function(o2, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      var desc = Object.getOwnPropertyDescriptor(m, k);
      if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m[k];
        } };
      }
      Object.defineProperty(o2, k2, desc);
    } : function(o2, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      o2[k2] = m[k];
    });
    var __exportStar = exports && exports.__exportStar || function(m, exports2) {
      for (var p in m)
        if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports2, p))
          __createBinding(exports2, m, p);
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    __exportStar(require_account(), exports);
    __exportStar(require_mint(), exports);
    __exportStar(require_multisig(), exports);
  }
});

// ../../node_modules/@solana/spl-token/lib/cjs/extensions/tokenMetadata/actions.js
var require_actions8 = __commonJS({
  "../../node_modules/@solana/spl-token/lib/cjs/extensions/tokenMetadata/actions.js"(exports) {
    "use strict";
    var __awaiter = exports && exports.__awaiter || function(thisArg, _arguments, P, generator) {
      function adopt(value) {
        return value instanceof P ? value : new P(function(resolve) {
          resolve(value);
        });
      }
      return new (P || (P = Promise))(function(resolve, reject) {
        function fulfilled(value) {
          try {
            step(generator.next(value));
          } catch (e2) {
            reject(e2);
          }
        }
        function rejected(value) {
          try {
            step(generator["throw"](value));
          } catch (e2) {
            reject(e2);
          }
        }
        function step(result) {
          result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
        }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
      });
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.tokenMetadataUpdateAuthority = exports.tokenMetadataRemoveKey = exports.tokenMetadataUpdateFieldWithRentTransfer = exports.tokenMetadataUpdateField = exports.tokenMetadataInitializeWithRentTransfer = exports.tokenMetadataInitialize = void 0;
    var web3_js_1 = (init_index_browser_esm(), __toCommonJS(index_browser_esm_exports));
    var spl_token_metadata_1 = require_cjs3();
    var constants_js_1 = require_constants();
    var internal_js_1 = require_internal3();
    var extensionType_js_1 = require_extensionType();
    var state_js_1 = require_state9();
    var errors_js_1 = require_errors2();
    var index_js_1 = require_state10();
    function getAdditionalRentForNewMetadata(connection, address, tokenMetadata, programId = constants_js_1.TOKEN_2022_PROGRAM_ID) {
      return __awaiter(this, void 0, void 0, function* () {
        const info = yield connection.getAccountInfo(address);
        if (!info) {
          throw new errors_js_1.TokenAccountNotFoundError();
        }
        const extensionLen = (0, spl_token_metadata_1.pack)(tokenMetadata).length;
        const newAccountLen = (0, extensionType_js_1.getNewAccountLenForExtensionLen)(info, address, extensionType_js_1.ExtensionType.TokenMetadata, extensionLen, programId);
        if (newAccountLen <= info.data.length) {
          return 0;
        }
        const newRentExemptMinimum = yield connection.getMinimumBalanceForRentExemption(newAccountLen);
        return newRentExemptMinimum - info.lamports;
      });
    }
    function getAdditionalRentForUpdatedMetadata(connection, address, field, value, programId = constants_js_1.TOKEN_2022_PROGRAM_ID) {
      return __awaiter(this, void 0, void 0, function* () {
        const info = yield connection.getAccountInfo(address);
        if (!info) {
          throw new errors_js_1.TokenAccountNotFoundError();
        }
        const mint = (0, index_js_1.unpackMint)(address, info, programId);
        const extensionData = (0, extensionType_js_1.getExtensionData)(extensionType_js_1.ExtensionType.TokenMetadata, mint.tlvData);
        if (extensionData === null) {
          throw new Error("TokenMetadata extension not initialized");
        }
        const updatedTokenMetadata = (0, state_js_1.updateTokenMetadata)((0, spl_token_metadata_1.unpack)(extensionData), field, value);
        const extensionLen = (0, spl_token_metadata_1.pack)(updatedTokenMetadata).length;
        const newAccountLen = (0, extensionType_js_1.getNewAccountLenForExtensionLen)(info, address, extensionType_js_1.ExtensionType.TokenMetadata, extensionLen, programId);
        if (newAccountLen <= info.data.length) {
          return 0;
        }
        const newRentExemptMinimum = yield connection.getMinimumBalanceForRentExemption(newAccountLen);
        return newRentExemptMinimum - info.lamports;
      });
    }
    function tokenMetadataInitialize(connection, payer, mint, updateAuthority, mintAuthority, name, symbol, uri, multiSigners = [], confirmOptions, programId = constants_js_1.TOKEN_2022_PROGRAM_ID) {
      return __awaiter(this, void 0, void 0, function* () {
        const [mintAuthorityPublicKey, signers] = (0, internal_js_1.getSigners)(mintAuthority, multiSigners);
        const transaction = new web3_js_1.Transaction().add((0, spl_token_metadata_1.createInitializeInstruction)({
          programId,
          metadata: mint,
          updateAuthority,
          mint,
          mintAuthority: mintAuthorityPublicKey,
          name,
          symbol,
          uri
        }));
        return yield (0, web3_js_1.sendAndConfirmTransaction)(connection, transaction, [payer, ...signers], confirmOptions);
      });
    }
    exports.tokenMetadataInitialize = tokenMetadataInitialize;
    function tokenMetadataInitializeWithRentTransfer(connection, payer, mint, updateAuthority, mintAuthority, name, symbol, uri, multiSigners = [], confirmOptions, programId = constants_js_1.TOKEN_2022_PROGRAM_ID) {
      return __awaiter(this, void 0, void 0, function* () {
        const [mintAuthorityPublicKey, signers] = (0, internal_js_1.getSigners)(mintAuthority, multiSigners);
        const transaction = new web3_js_1.Transaction();
        const lamports2 = yield getAdditionalRentForNewMetadata(connection, mint, {
          updateAuthority,
          mint,
          name,
          symbol,
          uri,
          additionalMetadata: []
        }, programId);
        if (lamports2 > 0) {
          transaction.add(web3_js_1.SystemProgram.transfer({ fromPubkey: payer.publicKey, toPubkey: mint, lamports: lamports2 }));
        }
        transaction.add((0, spl_token_metadata_1.createInitializeInstruction)({
          programId,
          metadata: mint,
          updateAuthority,
          mint,
          mintAuthority: mintAuthorityPublicKey,
          name,
          symbol,
          uri
        }));
        return yield (0, web3_js_1.sendAndConfirmTransaction)(connection, transaction, [payer, ...signers], confirmOptions);
      });
    }
    exports.tokenMetadataInitializeWithRentTransfer = tokenMetadataInitializeWithRentTransfer;
    function tokenMetadataUpdateField(connection, payer, mint, updateAuthority, field, value, multiSigners = [], confirmOptions, programId = constants_js_1.TOKEN_2022_PROGRAM_ID) {
      return __awaiter(this, void 0, void 0, function* () {
        const [updateAuthorityPublicKey, signers] = (0, internal_js_1.getSigners)(updateAuthority, multiSigners);
        const transaction = new web3_js_1.Transaction().add((0, spl_token_metadata_1.createUpdateFieldInstruction)({
          programId,
          metadata: mint,
          updateAuthority: updateAuthorityPublicKey,
          field,
          value
        }));
        return yield (0, web3_js_1.sendAndConfirmTransaction)(connection, transaction, [payer, ...signers], confirmOptions);
      });
    }
    exports.tokenMetadataUpdateField = tokenMetadataUpdateField;
    function tokenMetadataUpdateFieldWithRentTransfer(connection, payer, mint, updateAuthority, field, value, multiSigners = [], confirmOptions, programId = constants_js_1.TOKEN_2022_PROGRAM_ID) {
      return __awaiter(this, void 0, void 0, function* () {
        const [updateAuthorityPublicKey, signers] = (0, internal_js_1.getSigners)(updateAuthority, multiSigners);
        const transaction = new web3_js_1.Transaction();
        const lamports2 = yield getAdditionalRentForUpdatedMetadata(connection, mint, field, value, programId);
        if (lamports2 > 0) {
          transaction.add(web3_js_1.SystemProgram.transfer({ fromPubkey: payer.publicKey, toPubkey: mint, lamports: lamports2 }));
        }
        transaction.add((0, spl_token_metadata_1.createUpdateFieldInstruction)({
          programId,
          metadata: mint,
          updateAuthority: updateAuthorityPublicKey,
          field,
          value
        }));
        return yield (0, web3_js_1.sendAndConfirmTransaction)(connection, transaction, [payer, ...signers], confirmOptions);
      });
    }
    exports.tokenMetadataUpdateFieldWithRentTransfer = tokenMetadataUpdateFieldWithRentTransfer;
    function tokenMetadataRemoveKey(connection, payer, mint, updateAuthority, key, idempotent, multiSigners = [], confirmOptions, programId = constants_js_1.TOKEN_2022_PROGRAM_ID) {
      return __awaiter(this, void 0, void 0, function* () {
        const [updateAuthorityPublicKey, signers] = (0, internal_js_1.getSigners)(updateAuthority, multiSigners);
        const transaction = new web3_js_1.Transaction().add((0, spl_token_metadata_1.createRemoveKeyInstruction)({
          programId,
          metadata: mint,
          updateAuthority: updateAuthorityPublicKey,
          key,
          idempotent
        }));
        return yield (0, web3_js_1.sendAndConfirmTransaction)(connection, transaction, [payer, ...signers], confirmOptions);
      });
    }
    exports.tokenMetadataRemoveKey = tokenMetadataRemoveKey;
    function tokenMetadataUpdateAuthority(connection, payer, mint, updateAuthority, newAuthority, multiSigners = [], confirmOptions, programId = constants_js_1.TOKEN_2022_PROGRAM_ID) {
      return __awaiter(this, void 0, void 0, function* () {
        const [updateAuthorityPublicKey, signers] = (0, internal_js_1.getSigners)(updateAuthority, multiSigners);
        const transaction = new web3_js_1.Transaction().add((0, spl_token_metadata_1.createUpdateAuthorityInstruction)({
          programId,
          metadata: mint,
          oldAuthority: updateAuthorityPublicKey,
          newAuthority
        }));
        return yield (0, web3_js_1.sendAndConfirmTransaction)(connection, transaction, [payer, ...signers], confirmOptions);
      });
    }
    exports.tokenMetadataUpdateAuthority = tokenMetadataUpdateAuthority;
  }
});

// ../../node_modules/@solana/spl-token/lib/cjs/extensions/tokenMetadata/index.js
var require_tokenMetadata = __commonJS({
  "../../node_modules/@solana/spl-token/lib/cjs/extensions/tokenMetadata/index.js"(exports) {
    "use strict";
    var __createBinding = exports && exports.__createBinding || (Object.create ? function(o2, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      var desc = Object.getOwnPropertyDescriptor(m, k);
      if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m[k];
        } };
      }
      Object.defineProperty(o2, k2, desc);
    } : function(o2, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      o2[k2] = m[k];
    });
    var __exportStar = exports && exports.__exportStar || function(m, exports2) {
      for (var p in m)
        if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports2, p))
          __createBinding(exports2, m, p);
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    __exportStar(require_actions8(), exports);
    __exportStar(require_state9(), exports);
  }
});

// ../../node_modules/@solana/spl-token/lib/cjs/extensions/index.js
var require_extensions = __commonJS({
  "../../node_modules/@solana/spl-token/lib/cjs/extensions/index.js"(exports) {
    "use strict";
    var __createBinding = exports && exports.__createBinding || (Object.create ? function(o2, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      var desc = Object.getOwnPropertyDescriptor(m, k);
      if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m[k];
        } };
      }
      Object.defineProperty(o2, k2, desc);
    } : function(o2, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      o2[k2] = m[k];
    });
    var __exportStar = exports && exports.__exportStar || function(m, exports2) {
      for (var p in m)
        if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports2, p))
          __createBinding(exports2, m, p);
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    __exportStar(require_accountType(), exports);
    __exportStar(require_cpiGuard(), exports);
    __exportStar(require_defaultAccountState(), exports);
    __exportStar(require_extensionType(), exports);
    __exportStar(require_immutableOwner(), exports);
    __exportStar(require_interestBearingMint(), exports);
    __exportStar(require_memoTransfer(), exports);
    __exportStar(require_metadataPointer(), exports);
    __exportStar(require_tokenMetadata(), exports);
    __exportStar(require_mintCloseAuthority(), exports);
    __exportStar(require_nonTransferable(), exports);
    __exportStar(require_transferFee(), exports);
    __exportStar(require_permanentDelegate(), exports);
    __exportStar(require_transferHook(), exports);
  }
});

// ../../node_modules/@solana/spl-token/lib/cjs/instructions/initializeAccount2.js
var require_initializeAccount2 = __commonJS({
  "../../node_modules/@solana/spl-token/lib/cjs/instructions/initializeAccount2.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.decodeInitializeAccount2InstructionUnchecked = exports.decodeInitializeAccount2Instruction = exports.createInitializeAccount2Instruction = exports.initializeAccount2InstructionData = void 0;
    var buffer_layout_1 = require_Layout();
    var buffer_layout_utils_1 = require_cjs();
    var web3_js_1 = (init_index_browser_esm(), __toCommonJS(index_browser_esm_exports));
    var constants_js_1 = require_constants();
    var errors_js_1 = require_errors2();
    var types_js_1 = require_types3();
    exports.initializeAccount2InstructionData = (0, buffer_layout_1.struct)([
      (0, buffer_layout_1.u8)("instruction"),
      (0, buffer_layout_utils_1.publicKey)("owner")
    ]);
    function createInitializeAccount2Instruction(account, mint, owner, programId = constants_js_1.TOKEN_PROGRAM_ID) {
      const keys = [
        { pubkey: account, isSigner: false, isWritable: true },
        { pubkey: mint, isSigner: false, isWritable: false },
        { pubkey: web3_js_1.SYSVAR_RENT_PUBKEY, isSigner: false, isWritable: false }
      ];
      const data = Buffer.alloc(exports.initializeAccount2InstructionData.span);
      exports.initializeAccount2InstructionData.encode({ instruction: types_js_1.TokenInstruction.InitializeAccount2, owner }, data);
      return new web3_js_1.TransactionInstruction({ keys, programId, data });
    }
    exports.createInitializeAccount2Instruction = createInitializeAccount2Instruction;
    function decodeInitializeAccount2Instruction2(instruction, programId = constants_js_1.TOKEN_PROGRAM_ID) {
      if (!instruction.programId.equals(programId))
        throw new errors_js_1.TokenInvalidInstructionProgramError();
      if (instruction.data.length !== exports.initializeAccount2InstructionData.span)
        throw new errors_js_1.TokenInvalidInstructionDataError();
      const { keys: { account, mint, rent }, data } = decodeInitializeAccount2InstructionUnchecked(instruction);
      if (data.instruction !== types_js_1.TokenInstruction.InitializeAccount2)
        throw new errors_js_1.TokenInvalidInstructionTypeError();
      if (!account || !mint || !rent)
        throw new errors_js_1.TokenInvalidInstructionKeysError();
      return {
        programId,
        keys: {
          account,
          mint,
          rent
        },
        data
      };
    }
    exports.decodeInitializeAccount2Instruction = decodeInitializeAccount2Instruction2;
    function decodeInitializeAccount2InstructionUnchecked({ programId, keys: [account, mint, rent], data }) {
      return {
        programId,
        keys: {
          account,
          mint,
          rent
        },
        data: exports.initializeAccount2InstructionData.decode(data)
      };
    }
    exports.decodeInitializeAccount2InstructionUnchecked = decodeInitializeAccount2InstructionUnchecked;
  }
});

// ../../node_modules/@solana/spl-token/lib/cjs/instructions/initializeAccount3.js
var require_initializeAccount3 = __commonJS({
  "../../node_modules/@solana/spl-token/lib/cjs/instructions/initializeAccount3.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.decodeInitializeAccount3InstructionUnchecked = exports.decodeInitializeAccount3Instruction = exports.createInitializeAccount3Instruction = exports.initializeAccount3InstructionData = void 0;
    var buffer_layout_1 = require_Layout();
    var buffer_layout_utils_1 = require_cjs();
    var web3_js_1 = (init_index_browser_esm(), __toCommonJS(index_browser_esm_exports));
    var constants_js_1 = require_constants();
    var errors_js_1 = require_errors2();
    var types_js_1 = require_types3();
    exports.initializeAccount3InstructionData = (0, buffer_layout_1.struct)([
      (0, buffer_layout_1.u8)("instruction"),
      (0, buffer_layout_utils_1.publicKey)("owner")
    ]);
    function createInitializeAccount3Instruction(account, mint, owner, programId = constants_js_1.TOKEN_PROGRAM_ID) {
      const keys = [
        { pubkey: account, isSigner: false, isWritable: true },
        { pubkey: mint, isSigner: false, isWritable: false }
      ];
      const data = Buffer.alloc(exports.initializeAccount3InstructionData.span);
      exports.initializeAccount3InstructionData.encode({ instruction: types_js_1.TokenInstruction.InitializeAccount3, owner }, data);
      return new web3_js_1.TransactionInstruction({ keys, programId, data });
    }
    exports.createInitializeAccount3Instruction = createInitializeAccount3Instruction;
    function decodeInitializeAccount3Instruction2(instruction, programId = constants_js_1.TOKEN_PROGRAM_ID) {
      if (!instruction.programId.equals(programId))
        throw new errors_js_1.TokenInvalidInstructionProgramError();
      if (instruction.data.length !== exports.initializeAccount3InstructionData.span)
        throw new errors_js_1.TokenInvalidInstructionDataError();
      const { keys: { account, mint }, data } = decodeInitializeAccount3InstructionUnchecked(instruction);
      if (data.instruction !== types_js_1.TokenInstruction.InitializeAccount3)
        throw new errors_js_1.TokenInvalidInstructionTypeError();
      if (!account || !mint)
        throw new errors_js_1.TokenInvalidInstructionKeysError();
      return {
        programId,
        keys: {
          account,
          mint
        },
        data
      };
    }
    exports.decodeInitializeAccount3Instruction = decodeInitializeAccount3Instruction2;
    function decodeInitializeAccount3InstructionUnchecked({ programId, keys: [account, mint], data }) {
      return {
        programId,
        keys: {
          account,
          mint
        },
        data: exports.initializeAccount3InstructionData.decode(data)
      };
    }
    exports.decodeInitializeAccount3InstructionUnchecked = decodeInitializeAccount3InstructionUnchecked;
  }
});

// ../../node_modules/@solana/spl-token/lib/cjs/instructions/decode.js
var require_decode = __commonJS({
  "../../node_modules/@solana/spl-token/lib/cjs/instructions/decode.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.isUiamountToAmountInstruction = exports.isAmountToUiAmountInstruction = exports.isInitializeMint2Instruction = exports.isInitializeAccount3Instruction = exports.isSyncNativeInstruction = exports.isInitializeAccount2Instruction = exports.isBurnCheckedInstruction = exports.isMintToCheckedInstruction = exports.isApproveCheckedInstruction = exports.isTransferCheckedInstruction = exports.isThawAccountInstruction = exports.isFreezeAccountInstruction = exports.isCloseAccountInstruction = exports.isBurnInstruction = exports.isMintToInstruction = exports.isSetAuthorityInstruction = exports.isRevokeInstruction = exports.isApproveInstruction = exports.isTransferInstruction = exports.isInitializeMultisigInstruction = exports.isInitializeAccountInstruction = exports.isInitializeMintInstruction = exports.decodeInstruction = void 0;
    var buffer_layout_1 = require_Layout();
    var constants_js_1 = require_constants();
    var errors_js_1 = require_errors2();
    var amountToUiAmount_js_1 = require_amountToUiAmount();
    var approve_js_1 = require_approve();
    var approveChecked_js_1 = require_approveChecked();
    var burn_js_1 = require_burn();
    var burnChecked_js_1 = require_burnChecked();
    var closeAccount_js_1 = require_closeAccount();
    var freezeAccount_js_1 = require_freezeAccount();
    var initializeAccount_js_1 = require_initializeAccount();
    var initializeAccount2_js_1 = require_initializeAccount2();
    var initializeAccount3_js_1 = require_initializeAccount3();
    var initializeMint_js_1 = require_initializeMint();
    var initializeMint2_js_1 = require_initializeMint2();
    var initializeMultisig_js_1 = require_initializeMultisig();
    var mintTo_js_1 = require_mintTo();
    var mintToChecked_js_1 = require_mintToChecked();
    var revoke_js_1 = require_revoke();
    var setAuthority_js_1 = require_setAuthority();
    var syncNative_js_1 = require_syncNative();
    var thawAccount_js_1 = require_thawAccount();
    var transfer_js_1 = require_transfer();
    var transferChecked_js_1 = require_transferChecked();
    var types_js_1 = require_types3();
    var uiAmountToAmount_js_1 = require_uiAmountToAmount();
    function decodeInstruction(instruction, programId = constants_js_1.TOKEN_PROGRAM_ID) {
      if (!instruction.data.length)
        throw new errors_js_1.TokenInvalidInstructionDataError();
      const type = (0, buffer_layout_1.u8)().decode(instruction.data);
      if (type === types_js_1.TokenInstruction.InitializeMint)
        return (0, initializeMint_js_1.decodeInitializeMintInstruction)(instruction, programId);
      if (type === types_js_1.TokenInstruction.InitializeAccount)
        return (0, initializeAccount_js_1.decodeInitializeAccountInstruction)(instruction, programId);
      if (type === types_js_1.TokenInstruction.InitializeMultisig)
        return (0, initializeMultisig_js_1.decodeInitializeMultisigInstruction)(instruction, programId);
      if (type === types_js_1.TokenInstruction.Transfer)
        return (0, transfer_js_1.decodeTransferInstruction)(instruction, programId);
      if (type === types_js_1.TokenInstruction.Approve)
        return (0, approve_js_1.decodeApproveInstruction)(instruction, programId);
      if (type === types_js_1.TokenInstruction.Revoke)
        return (0, revoke_js_1.decodeRevokeInstruction)(instruction, programId);
      if (type === types_js_1.TokenInstruction.SetAuthority)
        return (0, setAuthority_js_1.decodeSetAuthorityInstruction)(instruction, programId);
      if (type === types_js_1.TokenInstruction.MintTo)
        return (0, mintTo_js_1.decodeMintToInstruction)(instruction, programId);
      if (type === types_js_1.TokenInstruction.Burn)
        return (0, burn_js_1.decodeBurnInstruction)(instruction, programId);
      if (type === types_js_1.TokenInstruction.CloseAccount)
        return (0, closeAccount_js_1.decodeCloseAccountInstruction)(instruction, programId);
      if (type === types_js_1.TokenInstruction.FreezeAccount)
        return (0, freezeAccount_js_1.decodeFreezeAccountInstruction)(instruction, programId);
      if (type === types_js_1.TokenInstruction.ThawAccount)
        return (0, thawAccount_js_1.decodeThawAccountInstruction)(instruction, programId);
      if (type === types_js_1.TokenInstruction.TransferChecked)
        return (0, transferChecked_js_1.decodeTransferCheckedInstruction)(instruction, programId);
      if (type === types_js_1.TokenInstruction.ApproveChecked)
        return (0, approveChecked_js_1.decodeApproveCheckedInstruction)(instruction, programId);
      if (type === types_js_1.TokenInstruction.MintToChecked)
        return (0, mintToChecked_js_1.decodeMintToCheckedInstruction)(instruction, programId);
      if (type === types_js_1.TokenInstruction.BurnChecked)
        return (0, burnChecked_js_1.decodeBurnCheckedInstruction)(instruction, programId);
      if (type === types_js_1.TokenInstruction.InitializeAccount2)
        return (0, initializeAccount2_js_1.decodeInitializeAccount2Instruction)(instruction, programId);
      if (type === types_js_1.TokenInstruction.SyncNative)
        return (0, syncNative_js_1.decodeSyncNativeInstruction)(instruction, programId);
      if (type === types_js_1.TokenInstruction.InitializeAccount3)
        return (0, initializeAccount3_js_1.decodeInitializeAccount3Instruction)(instruction, programId);
      if (type === types_js_1.TokenInstruction.InitializeMint2)
        return (0, initializeMint2_js_1.decodeInitializeMint2Instruction)(instruction, programId);
      if (type === types_js_1.TokenInstruction.AmountToUiAmount)
        return (0, amountToUiAmount_js_1.decodeAmountToUiAmountInstruction)(instruction, programId);
      if (type === types_js_1.TokenInstruction.UiAmountToAmount)
        return (0, uiAmountToAmount_js_1.decodeUiAmountToAmountInstruction)(instruction, programId);
      if (type === types_js_1.TokenInstruction.InitializeMultisig2)
        throw new errors_js_1.TokenInvalidInstructionTypeError();
      throw new errors_js_1.TokenInvalidInstructionTypeError();
    }
    exports.decodeInstruction = decodeInstruction;
    function isInitializeMintInstruction(decoded) {
      return decoded.data.instruction === types_js_1.TokenInstruction.InitializeMint;
    }
    exports.isInitializeMintInstruction = isInitializeMintInstruction;
    function isInitializeAccountInstruction(decoded) {
      return decoded.data.instruction === types_js_1.TokenInstruction.InitializeAccount;
    }
    exports.isInitializeAccountInstruction = isInitializeAccountInstruction;
    function isInitializeMultisigInstruction(decoded) {
      return decoded.data.instruction === types_js_1.TokenInstruction.InitializeMultisig;
    }
    exports.isInitializeMultisigInstruction = isInitializeMultisigInstruction;
    function isTransferInstruction(decoded) {
      return decoded.data.instruction === types_js_1.TokenInstruction.Transfer;
    }
    exports.isTransferInstruction = isTransferInstruction;
    function isApproveInstruction(decoded) {
      return decoded.data.instruction === types_js_1.TokenInstruction.Approve;
    }
    exports.isApproveInstruction = isApproveInstruction;
    function isRevokeInstruction(decoded) {
      return decoded.data.instruction === types_js_1.TokenInstruction.Revoke;
    }
    exports.isRevokeInstruction = isRevokeInstruction;
    function isSetAuthorityInstruction(decoded) {
      return decoded.data.instruction === types_js_1.TokenInstruction.SetAuthority;
    }
    exports.isSetAuthorityInstruction = isSetAuthorityInstruction;
    function isMintToInstruction(decoded) {
      return decoded.data.instruction === types_js_1.TokenInstruction.MintTo;
    }
    exports.isMintToInstruction = isMintToInstruction;
    function isBurnInstruction(decoded) {
      return decoded.data.instruction === types_js_1.TokenInstruction.Burn;
    }
    exports.isBurnInstruction = isBurnInstruction;
    function isCloseAccountInstruction(decoded) {
      return decoded.data.instruction === types_js_1.TokenInstruction.CloseAccount;
    }
    exports.isCloseAccountInstruction = isCloseAccountInstruction;
    function isFreezeAccountInstruction(decoded) {
      return decoded.data.instruction === types_js_1.TokenInstruction.FreezeAccount;
    }
    exports.isFreezeAccountInstruction = isFreezeAccountInstruction;
    function isThawAccountInstruction(decoded) {
      return decoded.data.instruction === types_js_1.TokenInstruction.ThawAccount;
    }
    exports.isThawAccountInstruction = isThawAccountInstruction;
    function isTransferCheckedInstruction(decoded) {
      return decoded.data.instruction === types_js_1.TokenInstruction.TransferChecked;
    }
    exports.isTransferCheckedInstruction = isTransferCheckedInstruction;
    function isApproveCheckedInstruction(decoded) {
      return decoded.data.instruction === types_js_1.TokenInstruction.ApproveChecked;
    }
    exports.isApproveCheckedInstruction = isApproveCheckedInstruction;
    function isMintToCheckedInstruction(decoded) {
      return decoded.data.instruction === types_js_1.TokenInstruction.MintToChecked;
    }
    exports.isMintToCheckedInstruction = isMintToCheckedInstruction;
    function isBurnCheckedInstruction(decoded) {
      return decoded.data.instruction === types_js_1.TokenInstruction.BurnChecked;
    }
    exports.isBurnCheckedInstruction = isBurnCheckedInstruction;
    function isInitializeAccount2Instruction(decoded) {
      return decoded.data.instruction === types_js_1.TokenInstruction.InitializeAccount2;
    }
    exports.isInitializeAccount2Instruction = isInitializeAccount2Instruction;
    function isSyncNativeInstruction(decoded) {
      return decoded.data.instruction === types_js_1.TokenInstruction.SyncNative;
    }
    exports.isSyncNativeInstruction = isSyncNativeInstruction;
    function isInitializeAccount3Instruction(decoded) {
      return decoded.data.instruction === types_js_1.TokenInstruction.InitializeAccount3;
    }
    exports.isInitializeAccount3Instruction = isInitializeAccount3Instruction;
    function isInitializeMint2Instruction(decoded) {
      return decoded.data.instruction === types_js_1.TokenInstruction.InitializeMint2;
    }
    exports.isInitializeMint2Instruction = isInitializeMint2Instruction;
    function isAmountToUiAmountInstruction(decoded) {
      return decoded.data.instruction === types_js_1.TokenInstruction.AmountToUiAmount;
    }
    exports.isAmountToUiAmountInstruction = isAmountToUiAmountInstruction;
    function isUiamountToAmountInstruction(decoded) {
      return decoded.data.instruction === types_js_1.TokenInstruction.UiAmountToAmount;
    }
    exports.isUiamountToAmountInstruction = isUiamountToAmountInstruction;
  }
});

// ../../node_modules/@solana/spl-token/lib/cjs/instructions/initializeMultisig2.js
var require_initializeMultisig2 = __commonJS({
  "../../node_modules/@solana/spl-token/lib/cjs/instructions/initializeMultisig2.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
  }
});

// ../../node_modules/@solana/spl-token/lib/cjs/instructions/initializeImmutableOwner.js
var require_initializeImmutableOwner = __commonJS({
  "../../node_modules/@solana/spl-token/lib/cjs/instructions/initializeImmutableOwner.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.decodeInitializeImmutableOwnerInstructionUnchecked = exports.decodeInitializeImmutableOwnerInstruction = exports.createInitializeImmutableOwnerInstruction = exports.initializeImmutableOwnerInstructionData = void 0;
    var buffer_layout_1 = require_Layout();
    var web3_js_1 = (init_index_browser_esm(), __toCommonJS(index_browser_esm_exports));
    var errors_js_1 = require_errors2();
    var types_js_1 = require_types3();
    exports.initializeImmutableOwnerInstructionData = (0, buffer_layout_1.struct)([
      (0, buffer_layout_1.u8)("instruction")
    ]);
    function createInitializeImmutableOwnerInstruction(account, programId) {
      const keys = [{ pubkey: account, isSigner: false, isWritable: true }];
      const data = Buffer.alloc(exports.initializeImmutableOwnerInstructionData.span);
      exports.initializeImmutableOwnerInstructionData.encode({
        instruction: types_js_1.TokenInstruction.InitializeImmutableOwner
      }, data);
      return new web3_js_1.TransactionInstruction({ keys, programId, data });
    }
    exports.createInitializeImmutableOwnerInstruction = createInitializeImmutableOwnerInstruction;
    function decodeInitializeImmutableOwnerInstruction(instruction, programId) {
      if (!instruction.programId.equals(programId))
        throw new errors_js_1.TokenInvalidInstructionProgramError();
      if (instruction.data.length !== exports.initializeImmutableOwnerInstructionData.span)
        throw new errors_js_1.TokenInvalidInstructionDataError();
      const { keys: { account }, data } = decodeInitializeImmutableOwnerInstructionUnchecked(instruction);
      if (data.instruction !== types_js_1.TokenInstruction.InitializeImmutableOwner)
        throw new errors_js_1.TokenInvalidInstructionTypeError();
      if (!account)
        throw new errors_js_1.TokenInvalidInstructionKeysError();
      return {
        programId,
        keys: {
          account
        },
        data
      };
    }
    exports.decodeInitializeImmutableOwnerInstruction = decodeInitializeImmutableOwnerInstruction;
    function decodeInitializeImmutableOwnerInstructionUnchecked({ programId, keys: [account], data }) {
      const { instruction } = exports.initializeImmutableOwnerInstructionData.decode(data);
      return {
        programId,
        keys: {
          account
        },
        data: {
          instruction
        }
      };
    }
    exports.decodeInitializeImmutableOwnerInstructionUnchecked = decodeInitializeImmutableOwnerInstructionUnchecked;
  }
});

// ../../node_modules/@solana/spl-token/lib/cjs/instructions/initializeMintCloseAuthority.js
var require_initializeMintCloseAuthority = __commonJS({
  "../../node_modules/@solana/spl-token/lib/cjs/instructions/initializeMintCloseAuthority.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.decodeInitializeMintCloseAuthorityInstructionUnchecked = exports.decodeInitializeMintCloseAuthorityInstruction = exports.createInitializeMintCloseAuthorityInstruction = exports.initializeMintCloseAuthorityInstructionData = void 0;
    var buffer_layout_1 = require_Layout();
    var buffer_layout_utils_1 = require_cjs();
    var web3_js_1 = (init_index_browser_esm(), __toCommonJS(index_browser_esm_exports));
    var constants_js_1 = require_constants();
    var errors_js_1 = require_errors2();
    var types_js_1 = require_types3();
    exports.initializeMintCloseAuthorityInstructionData = (0, buffer_layout_1.struct)([
      (0, buffer_layout_1.u8)("instruction"),
      (0, buffer_layout_1.u8)("closeAuthorityOption"),
      (0, buffer_layout_utils_1.publicKey)("closeAuthority")
    ]);
    function createInitializeMintCloseAuthorityInstruction(mint, closeAuthority, programId) {
      if (!(0, constants_js_1.programSupportsExtensions)(programId)) {
        throw new errors_js_1.TokenUnsupportedInstructionError();
      }
      const keys = [{ pubkey: mint, isSigner: false, isWritable: true }];
      const data = Buffer.alloc(exports.initializeMintCloseAuthorityInstructionData.span);
      exports.initializeMintCloseAuthorityInstructionData.encode({
        instruction: types_js_1.TokenInstruction.InitializeMintCloseAuthority,
        closeAuthorityOption: closeAuthority ? 1 : 0,
        closeAuthority: closeAuthority || new web3_js_1.PublicKey(0)
      }, data);
      return new web3_js_1.TransactionInstruction({ keys, programId, data });
    }
    exports.createInitializeMintCloseAuthorityInstruction = createInitializeMintCloseAuthorityInstruction;
    function decodeInitializeMintCloseAuthorityInstruction(instruction, programId) {
      if (!instruction.programId.equals(programId))
        throw new errors_js_1.TokenInvalidInstructionProgramError();
      if (instruction.data.length !== exports.initializeMintCloseAuthorityInstructionData.span)
        throw new errors_js_1.TokenInvalidInstructionDataError();
      const { keys: { mint }, data } = decodeInitializeMintCloseAuthorityInstructionUnchecked(instruction);
      if (data.instruction !== types_js_1.TokenInstruction.InitializeMintCloseAuthority)
        throw new errors_js_1.TokenInvalidInstructionTypeError();
      if (!mint)
        throw new errors_js_1.TokenInvalidInstructionKeysError();
      return {
        programId,
        keys: {
          mint
        },
        data
      };
    }
    exports.decodeInitializeMintCloseAuthorityInstruction = decodeInitializeMintCloseAuthorityInstruction;
    function decodeInitializeMintCloseAuthorityInstructionUnchecked({ programId, keys: [mint], data }) {
      const { instruction, closeAuthorityOption, closeAuthority } = exports.initializeMintCloseAuthorityInstructionData.decode(data);
      return {
        programId,
        keys: {
          mint
        },
        data: {
          instruction,
          closeAuthority: closeAuthorityOption ? closeAuthority : null
        }
      };
    }
    exports.decodeInitializeMintCloseAuthorityInstructionUnchecked = decodeInitializeMintCloseAuthorityInstructionUnchecked;
  }
});

// ../../node_modules/@solana/spl-token/lib/cjs/instructions/reallocate.js
var require_reallocate = __commonJS({
  "../../node_modules/@solana/spl-token/lib/cjs/instructions/reallocate.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.createReallocateInstruction = void 0;
    var buffer_layout_1 = require_Layout();
    var web3_js_1 = (init_index_browser_esm(), __toCommonJS(index_browser_esm_exports));
    var constants_js_1 = require_constants();
    var errors_js_1 = require_errors2();
    var internal_js_1 = require_internal2();
    var types_js_1 = require_types3();
    function createReallocateInstruction(account, payer, extensionTypes, owner, multiSigners = [], programId = constants_js_1.TOKEN_2022_PROGRAM_ID) {
      if (!(0, constants_js_1.programSupportsExtensions)(programId)) {
        throw new errors_js_1.TokenUnsupportedInstructionError();
      }
      const baseKeys = [
        { pubkey: account, isSigner: false, isWritable: true },
        { pubkey: payer, isSigner: true, isWritable: true },
        { pubkey: web3_js_1.SystemProgram.programId, isSigner: false, isWritable: false }
      ];
      const keys = (0, internal_js_1.addSigners)(baseKeys, owner, multiSigners);
      const reallocateInstructionData = (0, buffer_layout_1.struct)([
        (0, buffer_layout_1.u8)("instruction"),
        (0, buffer_layout_1.seq)((0, buffer_layout_1.u16)(), extensionTypes.length, "extensionTypes")
      ]);
      const data = Buffer.alloc(reallocateInstructionData.span);
      reallocateInstructionData.encode({ instruction: types_js_1.TokenInstruction.Reallocate, extensionTypes }, data);
      return new web3_js_1.TransactionInstruction({ keys, programId, data });
    }
    exports.createReallocateInstruction = createReallocateInstruction;
  }
});

// ../../node_modules/@solana/spl-token/lib/cjs/instructions/initializeNonTransferableMint.js
var require_initializeNonTransferableMint = __commonJS({
  "../../node_modules/@solana/spl-token/lib/cjs/instructions/initializeNonTransferableMint.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.createInitializeNonTransferableMintInstruction = exports.initializeNonTransferableMintInstructionData = void 0;
    var buffer_layout_1 = require_Layout();
    var web3_js_1 = (init_index_browser_esm(), __toCommonJS(index_browser_esm_exports));
    var constants_js_1 = require_constants();
    var errors_js_1 = require_errors2();
    var types_js_1 = require_types3();
    exports.initializeNonTransferableMintInstructionData = (0, buffer_layout_1.struct)([
      (0, buffer_layout_1.u8)("instruction")
    ]);
    function createInitializeNonTransferableMintInstruction(mint, programId) {
      if (!(0, constants_js_1.programSupportsExtensions)(programId)) {
        throw new errors_js_1.TokenUnsupportedInstructionError();
      }
      const keys = [{ pubkey: mint, isSigner: false, isWritable: true }];
      const data = Buffer.alloc(exports.initializeNonTransferableMintInstructionData.span);
      exports.initializeNonTransferableMintInstructionData.encode({
        instruction: types_js_1.TokenInstruction.InitializeNonTransferableMint
      }, data);
      return new web3_js_1.TransactionInstruction({ keys, programId, data });
    }
    exports.createInitializeNonTransferableMintInstruction = createInitializeNonTransferableMintInstruction;
  }
});

// ../../node_modules/@solana/spl-token/lib/cjs/instructions/initializePermanentDelegate.js
var require_initializePermanentDelegate = __commonJS({
  "../../node_modules/@solana/spl-token/lib/cjs/instructions/initializePermanentDelegate.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.decodeInitializePermanentDelegateInstructionUnchecked = exports.decodeInitializePermanentDelegateInstruction = exports.createInitializePermanentDelegateInstruction = exports.initializePermanentDelegateInstructionData = void 0;
    var buffer_layout_1 = require_Layout();
    var buffer_layout_utils_1 = require_cjs();
    var web3_js_1 = (init_index_browser_esm(), __toCommonJS(index_browser_esm_exports));
    var web3_js_2 = (init_index_browser_esm(), __toCommonJS(index_browser_esm_exports));
    var constants_js_1 = require_constants();
    var errors_js_1 = require_errors2();
    var types_js_1 = require_types3();
    exports.initializePermanentDelegateInstructionData = (0, buffer_layout_1.struct)([
      (0, buffer_layout_1.u8)("instruction"),
      (0, buffer_layout_utils_1.publicKey)("delegate")
    ]);
    function createInitializePermanentDelegateInstruction(mint, permanentDelegate, programId) {
      if (!(0, constants_js_1.programSupportsExtensions)(programId)) {
        throw new errors_js_1.TokenUnsupportedInstructionError();
      }
      const keys = [{ pubkey: mint, isSigner: false, isWritable: true }];
      const data = Buffer.alloc(exports.initializePermanentDelegateInstructionData.span);
      exports.initializePermanentDelegateInstructionData.encode({
        instruction: types_js_1.TokenInstruction.InitializePermanentDelegate,
        delegate: permanentDelegate || new web3_js_1.PublicKey(0)
      }, data);
      return new web3_js_2.TransactionInstruction({ keys, programId, data });
    }
    exports.createInitializePermanentDelegateInstruction = createInitializePermanentDelegateInstruction;
    function decodeInitializePermanentDelegateInstruction(instruction, programId) {
      if (!instruction.programId.equals(programId))
        throw new errors_js_1.TokenInvalidInstructionProgramError();
      if (instruction.data.length !== exports.initializePermanentDelegateInstructionData.span)
        throw new errors_js_1.TokenInvalidInstructionDataError();
      const { keys: { mint }, data } = decodeInitializePermanentDelegateInstructionUnchecked(instruction);
      if (data.instruction !== types_js_1.TokenInstruction.InitializePermanentDelegate)
        throw new errors_js_1.TokenInvalidInstructionTypeError();
      if (!mint)
        throw new errors_js_1.TokenInvalidInstructionKeysError();
      return {
        programId,
        keys: {
          mint
        },
        data
      };
    }
    exports.decodeInitializePermanentDelegateInstruction = decodeInitializePermanentDelegateInstruction;
    function decodeInitializePermanentDelegateInstructionUnchecked({ programId, keys: [mint], data }) {
      const { instruction, delegate } = exports.initializePermanentDelegateInstructionData.decode(data);
      return {
        programId,
        keys: {
          mint
        },
        data: {
          instruction,
          delegate
        }
      };
    }
    exports.decodeInitializePermanentDelegateInstructionUnchecked = decodeInitializePermanentDelegateInstructionUnchecked;
  }
});

// ../../node_modules/@solana/spl-token/lib/cjs/instructions/index.js
var require_instructions8 = __commonJS({
  "../../node_modules/@solana/spl-token/lib/cjs/instructions/index.js"(exports) {
    "use strict";
    var __createBinding = exports && exports.__createBinding || (Object.create ? function(o2, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      var desc = Object.getOwnPropertyDescriptor(m, k);
      if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m[k];
        } };
      }
      Object.defineProperty(o2, k2, desc);
    } : function(o2, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      o2[k2] = m[k];
    });
    var __exportStar = exports && exports.__exportStar || function(m, exports2) {
      for (var p in m)
        if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports2, p))
          __createBinding(exports2, m, p);
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.createEmitInstruction = exports.createUpdateAuthorityInstruction = exports.createRemoveKeyInstruction = exports.createUpdateFieldInstruction = exports.createInitializeInstruction = void 0;
    var spl_token_metadata_1 = require_cjs3();
    Object.defineProperty(exports, "createInitializeInstruction", { enumerable: true, get: function() {
      return spl_token_metadata_1.createInitializeInstruction;
    } });
    Object.defineProperty(exports, "createUpdateFieldInstruction", { enumerable: true, get: function() {
      return spl_token_metadata_1.createUpdateFieldInstruction;
    } });
    Object.defineProperty(exports, "createRemoveKeyInstruction", { enumerable: true, get: function() {
      return spl_token_metadata_1.createRemoveKeyInstruction;
    } });
    Object.defineProperty(exports, "createUpdateAuthorityInstruction", { enumerable: true, get: function() {
      return spl_token_metadata_1.createUpdateAuthorityInstruction;
    } });
    Object.defineProperty(exports, "createEmitInstruction", { enumerable: true, get: function() {
      return spl_token_metadata_1.createEmitInstruction;
    } });
    __exportStar(require_associatedTokenAccount(), exports);
    __exportStar(require_decode(), exports);
    __exportStar(require_types3(), exports);
    __exportStar(require_initializeMint(), exports);
    __exportStar(require_initializeAccount(), exports);
    __exportStar(require_initializeMultisig(), exports);
    __exportStar(require_transfer(), exports);
    __exportStar(require_approve(), exports);
    __exportStar(require_revoke(), exports);
    __exportStar(require_setAuthority(), exports);
    __exportStar(require_mintTo(), exports);
    __exportStar(require_burn(), exports);
    __exportStar(require_closeAccount(), exports);
    __exportStar(require_freezeAccount(), exports);
    __exportStar(require_thawAccount(), exports);
    __exportStar(require_transferChecked(), exports);
    __exportStar(require_approveChecked(), exports);
    __exportStar(require_mintToChecked(), exports);
    __exportStar(require_burnChecked(), exports);
    __exportStar(require_initializeAccount2(), exports);
    __exportStar(require_syncNative(), exports);
    __exportStar(require_initializeAccount3(), exports);
    __exportStar(require_initializeMultisig2(), exports);
    __exportStar(require_initializeMint2(), exports);
    __exportStar(require_initializeImmutableOwner(), exports);
    __exportStar(require_amountToUiAmount(), exports);
    __exportStar(require_uiAmountToAmount(), exports);
    __exportStar(require_initializeMintCloseAuthority(), exports);
    __exportStar(require_reallocate(), exports);
    __exportStar(require_createNativeMint(), exports);
    __exportStar(require_initializeNonTransferableMint(), exports);
    __exportStar(require_initializePermanentDelegate(), exports);
  }
});

// ../../node_modules/@solana/spl-token/lib/cjs/index.js
var require_cjs4 = __commonJS({
  "../../node_modules/@solana/spl-token/lib/cjs/index.js"(exports) {
    "use strict";
    var __createBinding = exports && exports.__createBinding || (Object.create ? function(o2, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      var desc = Object.getOwnPropertyDescriptor(m, k);
      if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m[k];
        } };
      }
      Object.defineProperty(o2, k2, desc);
    } : function(o2, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      o2[k2] = m[k];
    });
    var __exportStar = exports && exports.__exportStar || function(m, exports2) {
      for (var p in m)
        if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports2, p))
          __createBinding(exports2, m, p);
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    __exportStar(require_actions6(), exports);
    __exportStar(require_constants(), exports);
    __exportStar(require_errors2(), exports);
    __exportStar(require_extensions(), exports);
    __exportStar(require_instructions8(), exports);
    __exportStar(require_state10(), exports);
  }
});

// ../../node_modules/@metaplex-foundation/mpl-token-metadata/dist/src/generated/types/ApproveUseAuthorityArgs.js
var require_ApproveUseAuthorityArgs = __commonJS({
  "../../node_modules/@metaplex-foundation/mpl-token-metadata/dist/src/generated/types/ApproveUseAuthorityArgs.js"(exports) {
    "use strict";
    var __createBinding = exports && exports.__createBinding || (Object.create ? function(o2, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      var desc = Object.getOwnPropertyDescriptor(m, k);
      if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m[k];
        } };
      }
      Object.defineProperty(o2, k2, desc);
    } : function(o2, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      o2[k2] = m[k];
    });
    var __setModuleDefault = exports && exports.__setModuleDefault || (Object.create ? function(o2, v) {
      Object.defineProperty(o2, "default", { enumerable: true, value: v });
    } : function(o2, v) {
      o2["default"] = v;
    });
    var __importStar = exports && exports.__importStar || function(mod) {
      if (mod && mod.__esModule)
        return mod;
      var result = {};
      if (mod != null) {
        for (var k in mod)
          if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k))
            __createBinding(result, mod, k);
      }
      __setModuleDefault(result, mod);
      return result;
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.approveUseAuthorityArgsBeet = void 0;
    var beet9 = __importStar(require_beet());
    exports.approveUseAuthorityArgsBeet = new beet9.BeetArgsStruct([["numberOfUses", beet9.u64]], "ApproveUseAuthorityArgs");
  }
});

// ../../node_modules/@metaplex-foundation/mpl-token-metadata/dist/src/generated/instructions/ApproveUseAuthority.js
var require_ApproveUseAuthority = __commonJS({
  "../../node_modules/@metaplex-foundation/mpl-token-metadata/dist/src/generated/instructions/ApproveUseAuthority.js"(exports) {
    "use strict";
    var __createBinding = exports && exports.__createBinding || (Object.create ? function(o2, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      var desc = Object.getOwnPropertyDescriptor(m, k);
      if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m[k];
        } };
      }
      Object.defineProperty(o2, k2, desc);
    } : function(o2, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      o2[k2] = m[k];
    });
    var __setModuleDefault = exports && exports.__setModuleDefault || (Object.create ? function(o2, v) {
      Object.defineProperty(o2, "default", { enumerable: true, value: v });
    } : function(o2, v) {
      o2["default"] = v;
    });
    var __importStar = exports && exports.__importStar || function(mod) {
      if (mod && mod.__esModule)
        return mod;
      var result = {};
      if (mod != null) {
        for (var k in mod)
          if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k))
            __createBinding(result, mod, k);
      }
      __setModuleDefault(result, mod);
      return result;
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.createApproveUseAuthorityInstruction = exports.approveUseAuthorityInstructionDiscriminator = exports.ApproveUseAuthorityStruct = void 0;
    var splToken = __importStar(require_cjs4());
    var beet9 = __importStar(require_beet());
    var web3 = __importStar((init_index_browser_esm(), __toCommonJS(index_browser_esm_exports)));
    var ApproveUseAuthorityArgs_1 = require_ApproveUseAuthorityArgs();
    exports.ApproveUseAuthorityStruct = new beet9.BeetArgsStruct([
      ["instructionDiscriminator", beet9.u8],
      ["approveUseAuthorityArgs", ApproveUseAuthorityArgs_1.approveUseAuthorityArgsBeet]
    ], "ApproveUseAuthorityInstructionArgs");
    exports.approveUseAuthorityInstructionDiscriminator = 20;
    function createApproveUseAuthorityInstruction2(accounts, args, programId = new web3.PublicKey("metaqbxxUerdq28cj1RbAWkYQm3ybzjb6a8bt518x1s")) {
      var _a, _b;
      const [data] = exports.ApproveUseAuthorityStruct.serialize(__spreadValues({
        instructionDiscriminator: exports.approveUseAuthorityInstructionDiscriminator
      }, args));
      const keys = [
        {
          pubkey: accounts.useAuthorityRecord,
          isWritable: true,
          isSigner: false
        },
        {
          pubkey: accounts.owner,
          isWritable: true,
          isSigner: true
        },
        {
          pubkey: accounts.payer,
          isWritable: true,
          isSigner: true
        },
        {
          pubkey: accounts.user,
          isWritable: false,
          isSigner: false
        },
        {
          pubkey: accounts.ownerTokenAccount,
          isWritable: true,
          isSigner: false
        },
        {
          pubkey: accounts.metadata,
          isWritable: false,
          isSigner: false
        },
        {
          pubkey: accounts.mint,
          isWritable: false,
          isSigner: false
        },
        {
          pubkey: accounts.burner,
          isWritable: false,
          isSigner: false
        },
        {
          pubkey: (_a = accounts.tokenProgram) !== null && _a !== void 0 ? _a : splToken.TOKEN_PROGRAM_ID,
          isWritable: false,
          isSigner: false
        },
        {
          pubkey: (_b = accounts.systemProgram) !== null && _b !== void 0 ? _b : web3.SystemProgram.programId,
          isWritable: false,
          isSigner: false
        }
      ];
      if (accounts.rent != null) {
        keys.push({
          pubkey: accounts.rent,
          isWritable: false,
          isSigner: false
        });
      }
      const ix = new web3.TransactionInstruction({
        programId,
        keys,
        data
      });
      return ix;
    }
    exports.createApproveUseAuthorityInstruction = createApproveUseAuthorityInstruction2;
  }
});

// ../../node_modules/@metaplex-foundation/mpl-token-metadata/dist/src/generated/types/SetCollectionSizeArgs.js
var require_SetCollectionSizeArgs = __commonJS({
  "../../node_modules/@metaplex-foundation/mpl-token-metadata/dist/src/generated/types/SetCollectionSizeArgs.js"(exports) {
    "use strict";
    var __createBinding = exports && exports.__createBinding || (Object.create ? function(o2, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      var desc = Object.getOwnPropertyDescriptor(m, k);
      if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m[k];
        } };
      }
      Object.defineProperty(o2, k2, desc);
    } : function(o2, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      o2[k2] = m[k];
    });
    var __setModuleDefault = exports && exports.__setModuleDefault || (Object.create ? function(o2, v) {
      Object.defineProperty(o2, "default", { enumerable: true, value: v });
    } : function(o2, v) {
      o2["default"] = v;
    });
    var __importStar = exports && exports.__importStar || function(mod) {
      if (mod && mod.__esModule)
        return mod;
      var result = {};
      if (mod != null) {
        for (var k in mod)
          if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k))
            __createBinding(result, mod, k);
      }
      __setModuleDefault(result, mod);
      return result;
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.setCollectionSizeArgsBeet = void 0;
    var beet9 = __importStar(require_beet());
    exports.setCollectionSizeArgsBeet = new beet9.BeetArgsStruct([["size", beet9.u64]], "SetCollectionSizeArgs");
  }
});

// ../../node_modules/@metaplex-foundation/mpl-token-metadata/dist/src/generated/instructions/BubblegumSetCollectionSize.js
var require_BubblegumSetCollectionSize = __commonJS({
  "../../node_modules/@metaplex-foundation/mpl-token-metadata/dist/src/generated/instructions/BubblegumSetCollectionSize.js"(exports) {
    "use strict";
    var __createBinding = exports && exports.__createBinding || (Object.create ? function(o2, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      var desc = Object.getOwnPropertyDescriptor(m, k);
      if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m[k];
        } };
      }
      Object.defineProperty(o2, k2, desc);
    } : function(o2, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      o2[k2] = m[k];
    });
    var __setModuleDefault = exports && exports.__setModuleDefault || (Object.create ? function(o2, v) {
      Object.defineProperty(o2, "default", { enumerable: true, value: v });
    } : function(o2, v) {
      o2["default"] = v;
    });
    var __importStar = exports && exports.__importStar || function(mod) {
      if (mod && mod.__esModule)
        return mod;
      var result = {};
      if (mod != null) {
        for (var k in mod)
          if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k))
            __createBinding(result, mod, k);
      }
      __setModuleDefault(result, mod);
      return result;
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.createBubblegumSetCollectionSizeInstruction = exports.bubblegumSetCollectionSizeInstructionDiscriminator = exports.BubblegumSetCollectionSizeStruct = void 0;
    var beet9 = __importStar(require_beet());
    var web3 = __importStar((init_index_browser_esm(), __toCommonJS(index_browser_esm_exports)));
    var SetCollectionSizeArgs_1 = require_SetCollectionSizeArgs();
    exports.BubblegumSetCollectionSizeStruct = new beet9.BeetArgsStruct([
      ["instructionDiscriminator", beet9.u8],
      ["setCollectionSizeArgs", SetCollectionSizeArgs_1.setCollectionSizeArgsBeet]
    ], "BubblegumSetCollectionSizeInstructionArgs");
    exports.bubblegumSetCollectionSizeInstructionDiscriminator = 36;
    function createBubblegumSetCollectionSizeInstruction(accounts, args, programId = new web3.PublicKey("metaqbxxUerdq28cj1RbAWkYQm3ybzjb6a8bt518x1s")) {
      const [data] = exports.BubblegumSetCollectionSizeStruct.serialize(__spreadValues({
        instructionDiscriminator: exports.bubblegumSetCollectionSizeInstructionDiscriminator
      }, args));
      const keys = [
        {
          pubkey: accounts.collectionMetadata,
          isWritable: true,
          isSigner: false
        },
        {
          pubkey: accounts.collectionAuthority,
          isWritable: true,
          isSigner: true
        },
        {
          pubkey: accounts.collectionMint,
          isWritable: false,
          isSigner: false
        },
        {
          pubkey: accounts.bubblegumSigner,
          isWritable: false,
          isSigner: true
        }
      ];
      if (accounts.collectionAuthorityRecord != null) {
        keys.push({
          pubkey: accounts.collectionAuthorityRecord,
          isWritable: false,
          isSigner: false
        });
      }
      const ix = new web3.TransactionInstruction({
        programId,
        keys,
        data
      });
      return ix;
    }
    exports.createBubblegumSetCollectionSizeInstruction = createBubblegumSetCollectionSizeInstruction;
  }
});

// ../../node_modules/@metaplex-foundation/mpl-token-metadata/dist/src/generated/types/BurnArgs.js
var require_BurnArgs = __commonJS({
  "../../node_modules/@metaplex-foundation/mpl-token-metadata/dist/src/generated/types/BurnArgs.js"(exports) {
    "use strict";
    var __createBinding = exports && exports.__createBinding || (Object.create ? function(o2, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      var desc = Object.getOwnPropertyDescriptor(m, k);
      if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m[k];
        } };
      }
      Object.defineProperty(o2, k2, desc);
    } : function(o2, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      o2[k2] = m[k];
    });
    var __setModuleDefault = exports && exports.__setModuleDefault || (Object.create ? function(o2, v) {
      Object.defineProperty(o2, "default", { enumerable: true, value: v });
    } : function(o2, v) {
      o2["default"] = v;
    });
    var __importStar = exports && exports.__importStar || function(mod) {
      if (mod && mod.__esModule)
        return mod;
      var result = {};
      if (mod != null) {
        for (var k in mod)
          if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k))
            __createBinding(result, mod, k);
      }
      __setModuleDefault(result, mod);
      return result;
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.burnArgsBeet = exports.isBurnArgsV1 = void 0;
    var beet9 = __importStar(require_beet());
    var isBurnArgsV1 = (x) => x.__kind === "V1";
    exports.isBurnArgsV1 = isBurnArgsV1;
    exports.burnArgsBeet = beet9.dataEnum([
      [
        "V1",
        new beet9.BeetArgsStruct([["amount", beet9.u64]], 'BurnArgsRecord["V1"]')
      ]
    ]);
  }
});

// ../../node_modules/@metaplex-foundation/mpl-token-metadata/dist/src/generated/instructions/Burn.js
var require_Burn = __commonJS({
  "../../node_modules/@metaplex-foundation/mpl-token-metadata/dist/src/generated/instructions/Burn.js"(exports) {
    "use strict";
    var __createBinding = exports && exports.__createBinding || (Object.create ? function(o2, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      var desc = Object.getOwnPropertyDescriptor(m, k);
      if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m[k];
        } };
      }
      Object.defineProperty(o2, k2, desc);
    } : function(o2, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      o2[k2] = m[k];
    });
    var __setModuleDefault = exports && exports.__setModuleDefault || (Object.create ? function(o2, v) {
      Object.defineProperty(o2, "default", { enumerable: true, value: v });
    } : function(o2, v) {
      o2["default"] = v;
    });
    var __importStar = exports && exports.__importStar || function(mod) {
      if (mod && mod.__esModule)
        return mod;
      var result = {};
      if (mod != null) {
        for (var k in mod)
          if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k))
            __createBinding(result, mod, k);
      }
      __setModuleDefault(result, mod);
      return result;
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.createBurnInstruction = exports.burnInstructionDiscriminator = exports.BurnStruct = void 0;
    var beet9 = __importStar(require_beet());
    var web3 = __importStar((init_index_browser_esm(), __toCommonJS(index_browser_esm_exports)));
    var BurnArgs_1 = require_BurnArgs();
    exports.BurnStruct = new beet9.FixableBeetArgsStruct([
      ["instructionDiscriminator", beet9.u8],
      ["burnArgs", BurnArgs_1.burnArgsBeet]
    ], "BurnInstructionArgs");
    exports.burnInstructionDiscriminator = 41;
    function createBurnInstruction3(accounts, args, programId = new web3.PublicKey("metaqbxxUerdq28cj1RbAWkYQm3ybzjb6a8bt518x1s")) {
      var _a, _b, _c, _d, _e, _f, _g, _h;
      const [data] = exports.BurnStruct.serialize(__spreadValues({
        instructionDiscriminator: exports.burnInstructionDiscriminator
      }, args));
      const keys = [
        {
          pubkey: accounts.authority,
          isWritable: true,
          isSigner: true
        },
        {
          pubkey: (_a = accounts.collectionMetadata) !== null && _a !== void 0 ? _a : programId,
          isWritable: accounts.collectionMetadata != null,
          isSigner: false
        },
        {
          pubkey: accounts.metadata,
          isWritable: true,
          isSigner: false
        },
        {
          pubkey: (_b = accounts.edition) !== null && _b !== void 0 ? _b : programId,
          isWritable: accounts.edition != null,
          isSigner: false
        },
        {
          pubkey: accounts.mint,
          isWritable: true,
          isSigner: false
        },
        {
          pubkey: accounts.token,
          isWritable: true,
          isSigner: false
        },
        {
          pubkey: (_c = accounts.masterEdition) !== null && _c !== void 0 ? _c : programId,
          isWritable: accounts.masterEdition != null,
          isSigner: false
        },
        {
          pubkey: (_d = accounts.masterEditionMint) !== null && _d !== void 0 ? _d : programId,
          isWritable: false,
          isSigner: false
        },
        {
          pubkey: (_e = accounts.masterEditionToken) !== null && _e !== void 0 ? _e : programId,
          isWritable: false,
          isSigner: false
        },
        {
          pubkey: (_f = accounts.editionMarker) !== null && _f !== void 0 ? _f : programId,
          isWritable: accounts.editionMarker != null,
          isSigner: false
        },
        {
          pubkey: (_g = accounts.tokenRecord) !== null && _g !== void 0 ? _g : programId,
          isWritable: accounts.tokenRecord != null,
          isSigner: false
        },
        {
          pubkey: (_h = accounts.systemProgram) !== null && _h !== void 0 ? _h : web3.SystemProgram.programId,
          isWritable: false,
          isSigner: false
        },
        {
          pubkey: accounts.sysvarInstructions,
          isWritable: false,
          isSigner: false
        },
        {
          pubkey: accounts.splTokenProgram,
          isWritable: false,
          isSigner: false
        }
      ];
      const ix = new web3.TransactionInstruction({
        programId,
        keys,
        data
      });
      return ix;
    }
    exports.createBurnInstruction = createBurnInstruction3;
  }
});

// ../../node_modules/@metaplex-foundation/mpl-token-metadata/dist/src/generated/instructions/BurnEditionNft.js
var require_BurnEditionNft = __commonJS({
  "../../node_modules/@metaplex-foundation/mpl-token-metadata/dist/src/generated/instructions/BurnEditionNft.js"(exports) {
    "use strict";
    var __createBinding = exports && exports.__createBinding || (Object.create ? function(o2, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      var desc = Object.getOwnPropertyDescriptor(m, k);
      if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m[k];
        } };
      }
      Object.defineProperty(o2, k2, desc);
    } : function(o2, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      o2[k2] = m[k];
    });
    var __setModuleDefault = exports && exports.__setModuleDefault || (Object.create ? function(o2, v) {
      Object.defineProperty(o2, "default", { enumerable: true, value: v });
    } : function(o2, v) {
      o2["default"] = v;
    });
    var __importStar = exports && exports.__importStar || function(mod) {
      if (mod && mod.__esModule)
        return mod;
      var result = {};
      if (mod != null) {
        for (var k in mod)
          if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k))
            __createBinding(result, mod, k);
      }
      __setModuleDefault(result, mod);
      return result;
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.createBurnEditionNftInstruction = exports.burnEditionNftInstructionDiscriminator = exports.BurnEditionNftStruct = void 0;
    var beet9 = __importStar(require_beet());
    var web3 = __importStar((init_index_browser_esm(), __toCommonJS(index_browser_esm_exports)));
    exports.BurnEditionNftStruct = new beet9.BeetArgsStruct([["instructionDiscriminator", beet9.u8]], "BurnEditionNftInstructionArgs");
    exports.burnEditionNftInstructionDiscriminator = 37;
    function createBurnEditionNftInstruction(accounts, programId = new web3.PublicKey("metaqbxxUerdq28cj1RbAWkYQm3ybzjb6a8bt518x1s")) {
      const [data] = exports.BurnEditionNftStruct.serialize({
        instructionDiscriminator: exports.burnEditionNftInstructionDiscriminator
      });
      const keys = [
        {
          pubkey: accounts.metadata,
          isWritable: true,
          isSigner: false
        },
        {
          pubkey: accounts.owner,
          isWritable: true,
          isSigner: true
        },
        {
          pubkey: accounts.printEditionMint,
          isWritable: true,
          isSigner: false
        },
        {
          pubkey: accounts.masterEditionMint,
          isWritable: false,
          isSigner: false
        },
        {
          pubkey: accounts.printEditionTokenAccount,
          isWritable: true,
          isSigner: false
        },
        {
          pubkey: accounts.masterEditionTokenAccount,
          isWritable: false,
          isSigner: false
        },
        {
          pubkey: accounts.masterEditionAccount,
          isWritable: true,
          isSigner: false
        },
        {
          pubkey: accounts.printEditionAccount,
          isWritable: true,
          isSigner: false
        },
        {
          pubkey: accounts.editionMarkerAccount,
          isWritable: true,
          isSigner: false
        },
        {
          pubkey: accounts.splTokenProgram,
          isWritable: false,
          isSigner: false
        }
      ];
      const ix = new web3.TransactionInstruction({
        programId,
        keys,
        data
      });
      return ix;
    }
    exports.createBurnEditionNftInstruction = createBurnEditionNftInstruction;
  }
});

// ../../node_modules/@metaplex-foundation/mpl-token-metadata/dist/src/generated/instructions/BurnNft.js
var require_BurnNft = __commonJS({
  "../../node_modules/@metaplex-foundation/mpl-token-metadata/dist/src/generated/instructions/BurnNft.js"(exports) {
    "use strict";
    var __createBinding = exports && exports.__createBinding || (Object.create ? function(o2, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      var desc = Object.getOwnPropertyDescriptor(m, k);
      if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m[k];
        } };
      }
      Object.defineProperty(o2, k2, desc);
    } : function(o2, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      o2[k2] = m[k];
    });
    var __setModuleDefault = exports && exports.__setModuleDefault || (Object.create ? function(o2, v) {
      Object.defineProperty(o2, "default", { enumerable: true, value: v });
    } : function(o2, v) {
      o2["default"] = v;
    });
    var __importStar = exports && exports.__importStar || function(mod) {
      if (mod && mod.__esModule)
        return mod;
      var result = {};
      if (mod != null) {
        for (var k in mod)
          if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k))
            __createBinding(result, mod, k);
      }
      __setModuleDefault(result, mod);
      return result;
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.createBurnNftInstruction = exports.burnNftInstructionDiscriminator = exports.BurnNftStruct = void 0;
    var beet9 = __importStar(require_beet());
    var web3 = __importStar((init_index_browser_esm(), __toCommonJS(index_browser_esm_exports)));
    exports.BurnNftStruct = new beet9.BeetArgsStruct([["instructionDiscriminator", beet9.u8]], "BurnNftInstructionArgs");
    exports.burnNftInstructionDiscriminator = 29;
    function createBurnNftInstruction(accounts, programId = new web3.PublicKey("metaqbxxUerdq28cj1RbAWkYQm3ybzjb6a8bt518x1s")) {
      const [data] = exports.BurnNftStruct.serialize({
        instructionDiscriminator: exports.burnNftInstructionDiscriminator
      });
      const keys = [
        {
          pubkey: accounts.metadata,
          isWritable: true,
          isSigner: false
        },
        {
          pubkey: accounts.owner,
          isWritable: true,
          isSigner: true
        },
        {
          pubkey: accounts.mint,
          isWritable: true,
          isSigner: false
        },
        {
          pubkey: accounts.tokenAccount,
          isWritable: true,
          isSigner: false
        },
        {
          pubkey: accounts.masterEditionAccount,
          isWritable: true,
          isSigner: false
        },
        {
          pubkey: accounts.splTokenProgram,
          isWritable: false,
          isSigner: false
        }
      ];
      if (accounts.collectionMetadata != null) {
        keys.push({
          pubkey: accounts.collectionMetadata,
          isWritable: true,
          isSigner: false
        });
      }
      const ix = new web3.TransactionInstruction({
        programId,
        keys,
        data
      });
      return ix;
    }
    exports.createBurnNftInstruction = createBurnNftInstruction;
  }
});

// ../../node_modules/@metaplex-foundation/mpl-token-metadata/dist/src/generated/instructions/CloseEscrowAccount.js
var require_CloseEscrowAccount = __commonJS({
  "../../node_modules/@metaplex-foundation/mpl-token-metadata/dist/src/generated/instructions/CloseEscrowAccount.js"(exports) {
    "use strict";
    var __createBinding = exports && exports.__createBinding || (Object.create ? function(o2, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      var desc = Object.getOwnPropertyDescriptor(m, k);
      if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m[k];
        } };
      }
      Object.defineProperty(o2, k2, desc);
    } : function(o2, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      o2[k2] = m[k];
    });
    var __setModuleDefault = exports && exports.__setModuleDefault || (Object.create ? function(o2, v) {
      Object.defineProperty(o2, "default", { enumerable: true, value: v });
    } : function(o2, v) {
      o2["default"] = v;
    });
    var __importStar = exports && exports.__importStar || function(mod) {
      if (mod && mod.__esModule)
        return mod;
      var result = {};
      if (mod != null) {
        for (var k in mod)
          if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k))
            __createBinding(result, mod, k);
      }
      __setModuleDefault(result, mod);
      return result;
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.createCloseEscrowAccountInstruction = exports.closeEscrowAccountInstructionDiscriminator = exports.CloseEscrowAccountStruct = void 0;
    var beet9 = __importStar(require_beet());
    var web3 = __importStar((init_index_browser_esm(), __toCommonJS(index_browser_esm_exports)));
    exports.CloseEscrowAccountStruct = new beet9.BeetArgsStruct([["instructionDiscriminator", beet9.u8]], "CloseEscrowAccountInstructionArgs");
    exports.closeEscrowAccountInstructionDiscriminator = 39;
    function createCloseEscrowAccountInstruction(accounts, programId = new web3.PublicKey("metaqbxxUerdq28cj1RbAWkYQm3ybzjb6a8bt518x1s")) {
      var _a;
      const [data] = exports.CloseEscrowAccountStruct.serialize({
        instructionDiscriminator: exports.closeEscrowAccountInstructionDiscriminator
      });
      const keys = [
        {
          pubkey: accounts.escrow,
          isWritable: true,
          isSigner: false
        },
        {
          pubkey: accounts.metadata,
          isWritable: true,
          isSigner: false
        },
        {
          pubkey: accounts.mint,
          isWritable: false,
          isSigner: false
        },
        {
          pubkey: accounts.tokenAccount,
          isWritable: false,
          isSigner: false
        },
        {
          pubkey: accounts.edition,
          isWritable: false,
          isSigner: false
        },
        {
          pubkey: accounts.payer,
          isWritable: true,
          isSigner: true
        },
        {
          pubkey: (_a = accounts.systemProgram) !== null && _a !== void 0 ? _a : web3.SystemProgram.programId,
          isWritable: false,
          isSigner: false
        },
        {
          pubkey: accounts.sysvarInstructions,
          isWritable: false,
          isSigner: false
        }
      ];
      const ix = new web3.TransactionInstruction({
        programId,
        keys,
        data
      });
      return ix;
    }
    exports.createCloseEscrowAccountInstruction = createCloseEscrowAccountInstruction;
  }
});

// ../../node_modules/@metaplex-foundation/mpl-token-metadata/dist/src/generated/instructions/Collect.js
var require_Collect = __commonJS({
  "../../node_modules/@metaplex-foundation/mpl-token-metadata/dist/src/generated/instructions/Collect.js"(exports) {
    "use strict";
    var __createBinding = exports && exports.__createBinding || (Object.create ? function(o2, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      var desc = Object.getOwnPropertyDescriptor(m, k);
      if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m[k];
        } };
      }
      Object.defineProperty(o2, k2, desc);
    } : function(o2, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      o2[k2] = m[k];
    });
    var __setModuleDefault = exports && exports.__setModuleDefault || (Object.create ? function(o2, v) {
      Object.defineProperty(o2, "default", { enumerable: true, value: v });
    } : function(o2, v) {
      o2["default"] = v;
    });
    var __importStar = exports && exports.__importStar || function(mod) {
      if (mod && mod.__esModule)
        return mod;
      var result = {};
      if (mod != null) {
        for (var k in mod)
          if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k))
            __createBinding(result, mod, k);
      }
      __setModuleDefault(result, mod);
      return result;
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.createCollectInstruction = exports.collectInstructionDiscriminator = exports.CollectStruct = void 0;
    var beet9 = __importStar(require_beet());
    var web3 = __importStar((init_index_browser_esm(), __toCommonJS(index_browser_esm_exports)));
    exports.CollectStruct = new beet9.BeetArgsStruct([["instructionDiscriminator", beet9.u8]], "CollectInstructionArgs");
    exports.collectInstructionDiscriminator = 54;
    function createCollectInstruction(accounts, programId = new web3.PublicKey("metaqbxxUerdq28cj1RbAWkYQm3ybzjb6a8bt518x1s")) {
      const [data] = exports.CollectStruct.serialize({
        instructionDiscriminator: exports.collectInstructionDiscriminator
      });
      const keys = [
        {
          pubkey: accounts.authority,
          isWritable: false,
          isSigner: true
        },
        {
          pubkey: accounts.pdaAccount,
          isWritable: false,
          isSigner: false
        }
      ];
      const ix = new web3.TransactionInstruction({
        programId,
        keys,
        data
      });
      return ix;
    }
    exports.createCollectInstruction = createCollectInstruction;
  }
});

// ../../node_modules/@metaplex-foundation/mpl-token-metadata/dist/src/generated/instructions/ConvertMasterEditionV1ToV2.js
var require_ConvertMasterEditionV1ToV2 = __commonJS({
  "../../node_modules/@metaplex-foundation/mpl-token-metadata/dist/src/generated/instructions/ConvertMasterEditionV1ToV2.js"(exports) {
    "use strict";
    var __createBinding = exports && exports.__createBinding || (Object.create ? function(o2, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      var desc = Object.getOwnPropertyDescriptor(m, k);
      if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m[k];
        } };
      }
      Object.defineProperty(o2, k2, desc);
    } : function(o2, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      o2[k2] = m[k];
    });
    var __setModuleDefault = exports && exports.__setModuleDefault || (Object.create ? function(o2, v) {
      Object.defineProperty(o2, "default", { enumerable: true, value: v });
    } : function(o2, v) {
      o2["default"] = v;
    });
    var __importStar = exports && exports.__importStar || function(mod) {
      if (mod && mod.__esModule)
        return mod;
      var result = {};
      if (mod != null) {
        for (var k in mod)
          if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k))
            __createBinding(result, mod, k);
      }
      __setModuleDefault(result, mod);
      return result;
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.createConvertMasterEditionV1ToV2Instruction = exports.convertMasterEditionV1ToV2InstructionDiscriminator = exports.ConvertMasterEditionV1ToV2Struct = void 0;
    var beet9 = __importStar(require_beet());
    var web3 = __importStar((init_index_browser_esm(), __toCommonJS(index_browser_esm_exports)));
    exports.ConvertMasterEditionV1ToV2Struct = new beet9.BeetArgsStruct([["instructionDiscriminator", beet9.u8]], "ConvertMasterEditionV1ToV2InstructionArgs");
    exports.convertMasterEditionV1ToV2InstructionDiscriminator = 12;
    function createConvertMasterEditionV1ToV2Instruction(accounts, programId = new web3.PublicKey("metaqbxxUerdq28cj1RbAWkYQm3ybzjb6a8bt518x1s")) {
      const [data] = exports.ConvertMasterEditionV1ToV2Struct.serialize({
        instructionDiscriminator: exports.convertMasterEditionV1ToV2InstructionDiscriminator
      });
      const keys = [
        {
          pubkey: accounts.masterEdition,
          isWritable: true,
          isSigner: false
        },
        {
          pubkey: accounts.oneTimeAuth,
          isWritable: true,
          isSigner: false
        },
        {
          pubkey: accounts.printingMint,
          isWritable: true,
          isSigner: false
        }
      ];
      const ix = new web3.TransactionInstruction({
        programId,
        keys,
        data
      });
      return ix;
    }
    exports.createConvertMasterEditionV1ToV2Instruction = createConvertMasterEditionV1ToV2Instruction;
  }
});

// ../../node_modules/@metaplex-foundation/mpl-token-metadata/dist/src/generated/types/AssetData.js
var require_AssetData = __commonJS({
  "../../node_modules/@metaplex-foundation/mpl-token-metadata/dist/src/generated/types/AssetData.js"(exports) {
    "use strict";
    var __createBinding = exports && exports.__createBinding || (Object.create ? function(o2, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      var desc = Object.getOwnPropertyDescriptor(m, k);
      if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m[k];
        } };
      }
      Object.defineProperty(o2, k2, desc);
    } : function(o2, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      o2[k2] = m[k];
    });
    var __setModuleDefault = exports && exports.__setModuleDefault || (Object.create ? function(o2, v) {
      Object.defineProperty(o2, "default", { enumerable: true, value: v });
    } : function(o2, v) {
      o2["default"] = v;
    });
    var __importStar = exports && exports.__importStar || function(mod) {
      if (mod && mod.__esModule)
        return mod;
      var result = {};
      if (mod != null) {
        for (var k in mod)
          if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k))
            __createBinding(result, mod, k);
      }
      __setModuleDefault(result, mod);
      return result;
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.assetDataBeet = void 0;
    var beet9 = __importStar(require_beet());
    var beetSolana = __importStar(require_beet_solana());
    var Creator_1 = require_Creator();
    var TokenStandard_1 = require_TokenStandard();
    var Collection_1 = require_Collection();
    var Uses_1 = require_Uses();
    var CollectionDetails_1 = require_CollectionDetails();
    exports.assetDataBeet = new beet9.FixableBeetArgsStruct([
      ["name", beet9.utf8String],
      ["symbol", beet9.utf8String],
      ["uri", beet9.utf8String],
      ["sellerFeeBasisPoints", beet9.u16],
      ["creators", beet9.coption(beet9.array(Creator_1.creatorBeet))],
      ["primarySaleHappened", beet9.bool],
      ["isMutable", beet9.bool],
      ["tokenStandard", TokenStandard_1.tokenStandardBeet],
      ["collection", beet9.coption(Collection_1.collectionBeet)],
      ["uses", beet9.coption(Uses_1.usesBeet)],
      ["collectionDetails", beet9.coption(CollectionDetails_1.collectionDetailsBeet)],
      ["ruleSet", beet9.coption(beetSolana.publicKey)]
    ], "AssetData");
  }
});

// ../../node_modules/@metaplex-foundation/mpl-token-metadata/dist/src/generated/types/PrintSupply.js
var require_PrintSupply = __commonJS({
  "../../node_modules/@metaplex-foundation/mpl-token-metadata/dist/src/generated/types/PrintSupply.js"(exports) {
    "use strict";
    var __createBinding = exports && exports.__createBinding || (Object.create ? function(o2, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      var desc = Object.getOwnPropertyDescriptor(m, k);
      if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m[k];
        } };
      }
      Object.defineProperty(o2, k2, desc);
    } : function(o2, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      o2[k2] = m[k];
    });
    var __setModuleDefault = exports && exports.__setModuleDefault || (Object.create ? function(o2, v) {
      Object.defineProperty(o2, "default", { enumerable: true, value: v });
    } : function(o2, v) {
      o2["default"] = v;
    });
    var __importStar = exports && exports.__importStar || function(mod) {
      if (mod && mod.__esModule)
        return mod;
      var result = {};
      if (mod != null) {
        for (var k in mod)
          if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k))
            __createBinding(result, mod, k);
      }
      __setModuleDefault(result, mod);
      return result;
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.printSupplyBeet = exports.isPrintSupplyUnlimited = exports.isPrintSupplyLimited = exports.isPrintSupplyZero = void 0;
    var beet9 = __importStar(require_beet());
    var isPrintSupplyZero = (x) => x.__kind === "Zero";
    exports.isPrintSupplyZero = isPrintSupplyZero;
    var isPrintSupplyLimited = (x) => x.__kind === "Limited";
    exports.isPrintSupplyLimited = isPrintSupplyLimited;
    var isPrintSupplyUnlimited = (x) => x.__kind === "Unlimited";
    exports.isPrintSupplyUnlimited = isPrintSupplyUnlimited;
    exports.printSupplyBeet = beet9.dataEnum([
      ["Zero", beet9.unit],
      [
        "Limited",
        new beet9.BeetArgsStruct([["fields", beet9.fixedSizeTuple([beet9.u64])]], 'PrintSupplyRecord["Limited"]')
      ],
      ["Unlimited", beet9.unit]
    ]);
  }
});

// ../../node_modules/@metaplex-foundation/mpl-token-metadata/dist/src/generated/types/CreateArgs.js
var require_CreateArgs = __commonJS({
  "../../node_modules/@metaplex-foundation/mpl-token-metadata/dist/src/generated/types/CreateArgs.js"(exports) {
    "use strict";
    var __createBinding = exports && exports.__createBinding || (Object.create ? function(o2, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      var desc = Object.getOwnPropertyDescriptor(m, k);
      if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m[k];
        } };
      }
      Object.defineProperty(o2, k2, desc);
    } : function(o2, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      o2[k2] = m[k];
    });
    var __setModuleDefault = exports && exports.__setModuleDefault || (Object.create ? function(o2, v) {
      Object.defineProperty(o2, "default", { enumerable: true, value: v });
    } : function(o2, v) {
      o2["default"] = v;
    });
    var __importStar = exports && exports.__importStar || function(mod) {
      if (mod && mod.__esModule)
        return mod;
      var result = {};
      if (mod != null) {
        for (var k in mod)
          if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k))
            __createBinding(result, mod, k);
      }
      __setModuleDefault(result, mod);
      return result;
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.createArgsBeet = exports.isCreateArgsV1 = void 0;
    var beet9 = __importStar(require_beet());
    var AssetData_1 = require_AssetData();
    var PrintSupply_1 = require_PrintSupply();
    var isCreateArgsV1 = (x) => x.__kind === "V1";
    exports.isCreateArgsV1 = isCreateArgsV1;
    exports.createArgsBeet = beet9.dataEnum([
      [
        "V1",
        new beet9.FixableBeetArgsStruct([
          ["assetData", AssetData_1.assetDataBeet],
          ["decimals", beet9.coption(beet9.u8)],
          ["printSupply", beet9.coption(PrintSupply_1.printSupplyBeet)]
        ], 'CreateArgsRecord["V1"]')
      ]
    ]);
  }
});

// ../../node_modules/@metaplex-foundation/mpl-token-metadata/dist/src/generated/instructions/Create.js
var require_Create = __commonJS({
  "../../node_modules/@metaplex-foundation/mpl-token-metadata/dist/src/generated/instructions/Create.js"(exports) {
    "use strict";
    var __createBinding = exports && exports.__createBinding || (Object.create ? function(o2, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      var desc = Object.getOwnPropertyDescriptor(m, k);
      if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m[k];
        } };
      }
      Object.defineProperty(o2, k2, desc);
    } : function(o2, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      o2[k2] = m[k];
    });
    var __setModuleDefault = exports && exports.__setModuleDefault || (Object.create ? function(o2, v) {
      Object.defineProperty(o2, "default", { enumerable: true, value: v });
    } : function(o2, v) {
      o2["default"] = v;
    });
    var __importStar = exports && exports.__importStar || function(mod) {
      if (mod && mod.__esModule)
        return mod;
      var result = {};
      if (mod != null) {
        for (var k in mod)
          if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k))
            __createBinding(result, mod, k);
      }
      __setModuleDefault(result, mod);
      return result;
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.createCreateInstruction = exports.createInstructionDiscriminator = exports.CreateStruct = void 0;
    var beet9 = __importStar(require_beet());
    var web3 = __importStar((init_index_browser_esm(), __toCommonJS(index_browser_esm_exports)));
    var CreateArgs_1 = require_CreateArgs();
    exports.CreateStruct = new beet9.FixableBeetArgsStruct([
      ["instructionDiscriminator", beet9.u8],
      ["createArgs", CreateArgs_1.createArgsBeet]
    ], "CreateInstructionArgs");
    exports.createInstructionDiscriminator = 42;
    function createCreateInstruction2(accounts, args, programId = new web3.PublicKey("metaqbxxUerdq28cj1RbAWkYQm3ybzjb6a8bt518x1s")) {
      var _a, _b;
      const [data] = exports.CreateStruct.serialize(__spreadValues({
        instructionDiscriminator: exports.createInstructionDiscriminator
      }, args));
      const keys = [
        {
          pubkey: accounts.metadata,
          isWritable: true,
          isSigner: false
        },
        {
          pubkey: (_a = accounts.masterEdition) !== null && _a !== void 0 ? _a : programId,
          isWritable: accounts.masterEdition != null,
          isSigner: false
        },
        {
          pubkey: accounts.mint,
          isWritable: true,
          isSigner: false
        },
        {
          pubkey: accounts.authority,
          isWritable: false,
          isSigner: true
        },
        {
          pubkey: accounts.payer,
          isWritable: true,
          isSigner: true
        },
        {
          pubkey: accounts.updateAuthority,
          isWritable: false,
          isSigner: false
        },
        {
          pubkey: (_b = accounts.systemProgram) !== null && _b !== void 0 ? _b : web3.SystemProgram.programId,
          isWritable: false,
          isSigner: false
        },
        {
          pubkey: accounts.sysvarInstructions,
          isWritable: false,
          isSigner: false
        },
        {
          pubkey: accounts.splTokenProgram,
          isWritable: false,
          isSigner: false
        }
      ];
      const ix = new web3.TransactionInstruction({
        programId,
        keys,
        data
      });
      return ix;
    }
    exports.createCreateInstruction = createCreateInstruction2;
  }
});

// ../../node_modules/@metaplex-foundation/mpl-token-metadata/dist/src/generated/instructions/CreateEscrowAccount.js
var require_CreateEscrowAccount = __commonJS({
  "../../node_modules/@metaplex-foundation/mpl-token-metadata/dist/src/generated/instructions/CreateEscrowAccount.js"(exports) {
    "use strict";
    var __createBinding = exports && exports.__createBinding || (Object.create ? function(o2, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      var desc = Object.getOwnPropertyDescriptor(m, k);
      if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m[k];
        } };
      }
      Object.defineProperty(o2, k2, desc);
    } : function(o2, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      o2[k2] = m[k];
    });
    var __setModuleDefault = exports && exports.__setModuleDefault || (Object.create ? function(o2, v) {
      Object.defineProperty(o2, "default", { enumerable: true, value: v });
    } : function(o2, v) {
      o2["default"] = v;
    });
    var __importStar = exports && exports.__importStar || function(mod) {
      if (mod && mod.__esModule)
        return mod;
      var result = {};
      if (mod != null) {
        for (var k in mod)
          if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k))
            __createBinding(result, mod, k);
      }
      __setModuleDefault(result, mod);
      return result;
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.createCreateEscrowAccountInstruction = exports.createEscrowAccountInstructionDiscriminator = exports.CreateEscrowAccountStruct = void 0;
    var beet9 = __importStar(require_beet());
    var web3 = __importStar((init_index_browser_esm(), __toCommonJS(index_browser_esm_exports)));
    exports.CreateEscrowAccountStruct = new beet9.BeetArgsStruct([["instructionDiscriminator", beet9.u8]], "CreateEscrowAccountInstructionArgs");
    exports.createEscrowAccountInstructionDiscriminator = 38;
    function createCreateEscrowAccountInstruction(accounts, programId = new web3.PublicKey("metaqbxxUerdq28cj1RbAWkYQm3ybzjb6a8bt518x1s")) {
      var _a;
      const [data] = exports.CreateEscrowAccountStruct.serialize({
        instructionDiscriminator: exports.createEscrowAccountInstructionDiscriminator
      });
      const keys = [
        {
          pubkey: accounts.escrow,
          isWritable: true,
          isSigner: false
        },
        {
          pubkey: accounts.metadata,
          isWritable: true,
          isSigner: false
        },
        {
          pubkey: accounts.mint,
          isWritable: false,
          isSigner: false
        },
        {
          pubkey: accounts.tokenAccount,
          isWritable: false,
          isSigner: false
        },
        {
          pubkey: accounts.edition,
          isWritable: false,
          isSigner: false
        },
        {
          pubkey: accounts.payer,
          isWritable: true,
          isSigner: true
        },
        {
          pubkey: (_a = accounts.systemProgram) !== null && _a !== void 0 ? _a : web3.SystemProgram.programId,
          isWritable: false,
          isSigner: false
        },
        {
          pubkey: accounts.sysvarInstructions,
          isWritable: false,
          isSigner: false
        }
      ];
      if (accounts.authority != null) {
        keys.push({
          pubkey: accounts.authority,
          isWritable: false,
          isSigner: true
        });
      }
      const ix = new web3.TransactionInstruction({
        programId,
        keys,
        data
      });
      return ix;
    }
    exports.createCreateEscrowAccountInstruction = createCreateEscrowAccountInstruction;
  }
});

// ../../node_modules/@metaplex-foundation/mpl-token-metadata/dist/src/generated/instructions/CreateMasterEdition.js
var require_CreateMasterEdition = __commonJS({
  "../../node_modules/@metaplex-foundation/mpl-token-metadata/dist/src/generated/instructions/CreateMasterEdition.js"(exports) {
    "use strict";
    var __createBinding = exports && exports.__createBinding || (Object.create ? function(o2, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      var desc = Object.getOwnPropertyDescriptor(m, k);
      if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m[k];
        } };
      }
      Object.defineProperty(o2, k2, desc);
    } : function(o2, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      o2[k2] = m[k];
    });
    var __setModuleDefault = exports && exports.__setModuleDefault || (Object.create ? function(o2, v) {
      Object.defineProperty(o2, "default", { enumerable: true, value: v });
    } : function(o2, v) {
      o2["default"] = v;
    });
    var __importStar = exports && exports.__importStar || function(mod) {
      if (mod && mod.__esModule)
        return mod;
      var result = {};
      if (mod != null) {
        for (var k in mod)
          if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k))
            __createBinding(result, mod, k);
      }
      __setModuleDefault(result, mod);
      return result;
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.createCreateMasterEditionInstruction = exports.createMasterEditionInstructionDiscriminator = exports.CreateMasterEditionStruct = void 0;
    var splToken = __importStar(require_cjs4());
    var beet9 = __importStar(require_beet());
    var web3 = __importStar((init_index_browser_esm(), __toCommonJS(index_browser_esm_exports)));
    exports.CreateMasterEditionStruct = new beet9.BeetArgsStruct([["instructionDiscriminator", beet9.u8]], "CreateMasterEditionInstructionArgs");
    exports.createMasterEditionInstructionDiscriminator = 10;
    function createCreateMasterEditionInstruction(accounts, programId = new web3.PublicKey("metaqbxxUerdq28cj1RbAWkYQm3ybzjb6a8bt518x1s")) {
      var _a, _b, _c;
      const [data] = exports.CreateMasterEditionStruct.serialize({
        instructionDiscriminator: exports.createMasterEditionInstructionDiscriminator
      });
      const keys = [
        {
          pubkey: accounts.edition,
          isWritable: true,
          isSigner: false
        },
        {
          pubkey: accounts.mint,
          isWritable: true,
          isSigner: false
        },
        {
          pubkey: accounts.updateAuthority,
          isWritable: false,
          isSigner: true
        },
        {
          pubkey: accounts.mintAuthority,
          isWritable: false,
          isSigner: true
        },
        {
          pubkey: accounts.payer,
          isWritable: true,
          isSigner: true
        },
        {
          pubkey: accounts.metadata,
          isWritable: false,
          isSigner: false
        },
        {
          pubkey: (_a = accounts.tokenProgram) !== null && _a !== void 0 ? _a : splToken.TOKEN_PROGRAM_ID,
          isWritable: false,
          isSigner: false
        },
        {
          pubkey: (_b = accounts.systemProgram) !== null && _b !== void 0 ? _b : web3.SystemProgram.programId,
          isWritable: false,
          isSigner: false
        },
        {
          pubkey: (_c = accounts.rent) !== null && _c !== void 0 ? _c : web3.SYSVAR_RENT_PUBKEY,
          isWritable: false,
          isSigner: false
        }
      ];
      const ix = new web3.TransactionInstruction({
        programId,
        keys,
        data
      });
      return ix;
    }
    exports.createCreateMasterEditionInstruction = createCreateMasterEditionInstruction;
  }
});

// ../../node_modules/@metaplex-foundation/mpl-token-metadata/dist/src/generated/types/CreateMasterEditionArgs.js
var require_CreateMasterEditionArgs = __commonJS({
  "../../node_modules/@metaplex-foundation/mpl-token-metadata/dist/src/generated/types/CreateMasterEditionArgs.js"(exports) {
    "use strict";
    var __createBinding = exports && exports.__createBinding || (Object.create ? function(o2, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      var desc = Object.getOwnPropertyDescriptor(m, k);
      if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m[k];
        } };
      }
      Object.defineProperty(o2, k2, desc);
    } : function(o2, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      o2[k2] = m[k];
    });
    var __setModuleDefault = exports && exports.__setModuleDefault || (Object.create ? function(o2, v) {
      Object.defineProperty(o2, "default", { enumerable: true, value: v });
    } : function(o2, v) {
      o2["default"] = v;
    });
    var __importStar = exports && exports.__importStar || function(mod) {
      if (mod && mod.__esModule)
        return mod;
      var result = {};
      if (mod != null) {
        for (var k in mod)
          if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k))
            __createBinding(result, mod, k);
      }
      __setModuleDefault(result, mod);
      return result;
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.createMasterEditionArgsBeet = void 0;
    var beet9 = __importStar(require_beet());
    exports.createMasterEditionArgsBeet = new beet9.FixableBeetArgsStruct([["maxSupply", beet9.coption(beet9.u64)]], "CreateMasterEditionArgs");
  }
});

// ../../node_modules/@metaplex-foundation/mpl-token-metadata/dist/src/generated/instructions/CreateMasterEditionV3.js
var require_CreateMasterEditionV3 = __commonJS({
  "../../node_modules/@metaplex-foundation/mpl-token-metadata/dist/src/generated/instructions/CreateMasterEditionV3.js"(exports) {
    "use strict";
    var __createBinding = exports && exports.__createBinding || (Object.create ? function(o2, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      var desc = Object.getOwnPropertyDescriptor(m, k);
      if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m[k];
        } };
      }
      Object.defineProperty(o2, k2, desc);
    } : function(o2, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      o2[k2] = m[k];
    });
    var __setModuleDefault = exports && exports.__setModuleDefault || (Object.create ? function(o2, v) {
      Object.defineProperty(o2, "default", { enumerable: true, value: v });
    } : function(o2, v) {
      o2["default"] = v;
    });
    var __importStar = exports && exports.__importStar || function(mod) {
      if (mod && mod.__esModule)
        return mod;
      var result = {};
      if (mod != null) {
        for (var k in mod)
          if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k))
            __createBinding(result, mod, k);
      }
      __setModuleDefault(result, mod);
      return result;
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.createCreateMasterEditionV3Instruction = exports.createMasterEditionV3InstructionDiscriminator = exports.CreateMasterEditionV3Struct = void 0;
    var splToken = __importStar(require_cjs4());
    var beet9 = __importStar(require_beet());
    var web3 = __importStar((init_index_browser_esm(), __toCommonJS(index_browser_esm_exports)));
    var CreateMasterEditionArgs_1 = require_CreateMasterEditionArgs();
    exports.CreateMasterEditionV3Struct = new beet9.FixableBeetArgsStruct([
      ["instructionDiscriminator", beet9.u8],
      ["createMasterEditionArgs", CreateMasterEditionArgs_1.createMasterEditionArgsBeet]
    ], "CreateMasterEditionV3InstructionArgs");
    exports.createMasterEditionV3InstructionDiscriminator = 17;
    function createCreateMasterEditionV3Instruction(accounts, args, programId = new web3.PublicKey("metaqbxxUerdq28cj1RbAWkYQm3ybzjb6a8bt518x1s")) {
      var _a, _b;
      const [data] = exports.CreateMasterEditionV3Struct.serialize(__spreadValues({
        instructionDiscriminator: exports.createMasterEditionV3InstructionDiscriminator
      }, args));
      const keys = [
        {
          pubkey: accounts.edition,
          isWritable: true,
          isSigner: false
        },
        {
          pubkey: accounts.mint,
          isWritable: true,
          isSigner: false
        },
        {
          pubkey: accounts.updateAuthority,
          isWritable: false,
          isSigner: true
        },
        {
          pubkey: accounts.mintAuthority,
          isWritable: false,
          isSigner: true
        },
        {
          pubkey: accounts.payer,
          isWritable: true,
          isSigner: true
        },
        {
          pubkey: accounts.metadata,
          isWritable: true,
          isSigner: false
        },
        {
          pubkey: (_a = accounts.tokenProgram) !== null && _a !== void 0 ? _a : splToken.TOKEN_PROGRAM_ID,
          isWritable: false,
          isSigner: false
        },
        {
          pubkey: (_b = accounts.systemProgram) !== null && _b !== void 0 ? _b : web3.SystemProgram.programId,
          isWritable: false,
          isSigner: false
        }
      ];
      if (accounts.rent != null) {
        keys.push({
          pubkey: accounts.rent,
          isWritable: false,
          isSigner: false
        });
      }
      const ix = new web3.TransactionInstruction({
        programId,
        keys,
        data
      });
      return ix;
    }
    exports.createCreateMasterEditionV3Instruction = createCreateMasterEditionV3Instruction;
  }
});

// ../../node_modules/@metaplex-foundation/mpl-token-metadata/dist/src/generated/instructions/CreateMetadataAccount.js
var require_CreateMetadataAccount = __commonJS({
  "../../node_modules/@metaplex-foundation/mpl-token-metadata/dist/src/generated/instructions/CreateMetadataAccount.js"(exports) {
    "use strict";
    var __createBinding = exports && exports.__createBinding || (Object.create ? function(o2, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      var desc = Object.getOwnPropertyDescriptor(m, k);
      if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m[k];
        } };
      }
      Object.defineProperty(o2, k2, desc);
    } : function(o2, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      o2[k2] = m[k];
    });
    var __setModuleDefault = exports && exports.__setModuleDefault || (Object.create ? function(o2, v) {
      Object.defineProperty(o2, "default", { enumerable: true, value: v });
    } : function(o2, v) {
      o2["default"] = v;
    });
    var __importStar = exports && exports.__importStar || function(mod) {
      if (mod && mod.__esModule)
        return mod;
      var result = {};
      if (mod != null) {
        for (var k in mod)
          if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k))
            __createBinding(result, mod, k);
      }
      __setModuleDefault(result, mod);
      return result;
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.createCreateMetadataAccountInstruction = exports.createMetadataAccountInstructionDiscriminator = exports.CreateMetadataAccountStruct = void 0;
    var beet9 = __importStar(require_beet());
    var web3 = __importStar((init_index_browser_esm(), __toCommonJS(index_browser_esm_exports)));
    exports.CreateMetadataAccountStruct = new beet9.BeetArgsStruct([["instructionDiscriminator", beet9.u8]], "CreateMetadataAccountInstructionArgs");
    exports.createMetadataAccountInstructionDiscriminator = 0;
    function createCreateMetadataAccountInstruction(accounts, programId = new web3.PublicKey("metaqbxxUerdq28cj1RbAWkYQm3ybzjb6a8bt518x1s")) {
      var _a, _b;
      const [data] = exports.CreateMetadataAccountStruct.serialize({
        instructionDiscriminator: exports.createMetadataAccountInstructionDiscriminator
      });
      const keys = [
        {
          pubkey: accounts.metadata,
          isWritable: true,
          isSigner: false
        },
        {
          pubkey: accounts.mint,
          isWritable: false,
          isSigner: false
        },
        {
          pubkey: accounts.mintAuthority,
          isWritable: false,
          isSigner: true
        },
        {
          pubkey: accounts.payer,
          isWritable: true,
          isSigner: true
        },
        {
          pubkey: accounts.updateAuthority,
          isWritable: false,
          isSigner: false
        },
        {
          pubkey: (_a = accounts.systemProgram) !== null && _a !== void 0 ? _a : web3.SystemProgram.programId,
          isWritable: false,
          isSigner: false
        },
        {
          pubkey: (_b = accounts.rent) !== null && _b !== void 0 ? _b : web3.SYSVAR_RENT_PUBKEY,
          isWritable: false,
          isSigner: false
        }
      ];
      const ix = new web3.TransactionInstruction({
        programId,
        keys,
        data
      });
      return ix;
    }
    exports.createCreateMetadataAccountInstruction = createCreateMetadataAccountInstruction;
  }
});

// ../../node_modules/@metaplex-foundation/mpl-token-metadata/dist/src/generated/instructions/CreateMetadataAccountV2.js
var require_CreateMetadataAccountV2 = __commonJS({
  "../../node_modules/@metaplex-foundation/mpl-token-metadata/dist/src/generated/instructions/CreateMetadataAccountV2.js"(exports) {
    "use strict";
    var __createBinding = exports && exports.__createBinding || (Object.create ? function(o2, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      var desc = Object.getOwnPropertyDescriptor(m, k);
      if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m[k];
        } };
      }
      Object.defineProperty(o2, k2, desc);
    } : function(o2, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      o2[k2] = m[k];
    });
    var __setModuleDefault = exports && exports.__setModuleDefault || (Object.create ? function(o2, v) {
      Object.defineProperty(o2, "default", { enumerable: true, value: v });
    } : function(o2, v) {
      o2["default"] = v;
    });
    var __importStar = exports && exports.__importStar || function(mod) {
      if (mod && mod.__esModule)
        return mod;
      var result = {};
      if (mod != null) {
        for (var k in mod)
          if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k))
            __createBinding(result, mod, k);
      }
      __setModuleDefault(result, mod);
      return result;
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.createCreateMetadataAccountV2Instruction = exports.createMetadataAccountV2InstructionDiscriminator = exports.CreateMetadataAccountV2Struct = void 0;
    var beet9 = __importStar(require_beet());
    var web3 = __importStar((init_index_browser_esm(), __toCommonJS(index_browser_esm_exports)));
    exports.CreateMetadataAccountV2Struct = new beet9.BeetArgsStruct([["instructionDiscriminator", beet9.u8]], "CreateMetadataAccountV2InstructionArgs");
    exports.createMetadataAccountV2InstructionDiscriminator = 16;
    function createCreateMetadataAccountV2Instruction(accounts, programId = new web3.PublicKey("metaqbxxUerdq28cj1RbAWkYQm3ybzjb6a8bt518x1s")) {
      var _a;
      const [data] = exports.CreateMetadataAccountV2Struct.serialize({
        instructionDiscriminator: exports.createMetadataAccountV2InstructionDiscriminator
      });
      const keys = [
        {
          pubkey: accounts.metadata,
          isWritable: true,
          isSigner: false
        },
        {
          pubkey: accounts.mint,
          isWritable: false,
          isSigner: false
        },
        {
          pubkey: accounts.mintAuthority,
          isWritable: false,
          isSigner: true
        },
        {
          pubkey: accounts.payer,
          isWritable: true,
          isSigner: true
        },
        {
          pubkey: accounts.updateAuthority,
          isWritable: false,
          isSigner: false
        },
        {
          pubkey: (_a = accounts.systemProgram) !== null && _a !== void 0 ? _a : web3.SystemProgram.programId,
          isWritable: false,
          isSigner: false
        }
      ];
      if (accounts.rent != null) {
        keys.push({
          pubkey: accounts.rent,
          isWritable: false,
          isSigner: false
        });
      }
      const ix = new web3.TransactionInstruction({
        programId,
        keys,
        data
      });
      return ix;
    }
    exports.createCreateMetadataAccountV2Instruction = createCreateMetadataAccountV2Instruction;
  }
});

// ../../node_modules/@metaplex-foundation/mpl-token-metadata/dist/src/generated/types/DataV2.js
var require_DataV2 = __commonJS({
  "../../node_modules/@metaplex-foundation/mpl-token-metadata/dist/src/generated/types/DataV2.js"(exports) {
    "use strict";
    var __createBinding = exports && exports.__createBinding || (Object.create ? function(o2, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      var desc = Object.getOwnPropertyDescriptor(m, k);
      if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m[k];
        } };
      }
      Object.defineProperty(o2, k2, desc);
    } : function(o2, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      o2[k2] = m[k];
    });
    var __setModuleDefault = exports && exports.__setModuleDefault || (Object.create ? function(o2, v) {
      Object.defineProperty(o2, "default", { enumerable: true, value: v });
    } : function(o2, v) {
      o2["default"] = v;
    });
    var __importStar = exports && exports.__importStar || function(mod) {
      if (mod && mod.__esModule)
        return mod;
      var result = {};
      if (mod != null) {
        for (var k in mod)
          if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k))
            __createBinding(result, mod, k);
      }
      __setModuleDefault(result, mod);
      return result;
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.dataV2Beet = void 0;
    var beet9 = __importStar(require_beet());
    var Creator_1 = require_Creator();
    var Collection_1 = require_Collection();
    var Uses_1 = require_Uses();
    exports.dataV2Beet = new beet9.FixableBeetArgsStruct([
      ["name", beet9.utf8String],
      ["symbol", beet9.utf8String],
      ["uri", beet9.utf8String],
      ["sellerFeeBasisPoints", beet9.u16],
      ["creators", beet9.coption(beet9.array(Creator_1.creatorBeet))],
      ["collection", beet9.coption(Collection_1.collectionBeet)],
      ["uses", beet9.coption(Uses_1.usesBeet)]
    ], "DataV2");
  }
});

// ../../node_modules/@metaplex-foundation/mpl-token-metadata/dist/src/generated/types/CreateMetadataAccountArgsV3.js
var require_CreateMetadataAccountArgsV3 = __commonJS({
  "../../node_modules/@metaplex-foundation/mpl-token-metadata/dist/src/generated/types/CreateMetadataAccountArgsV3.js"(exports) {
    "use strict";
    var __createBinding = exports && exports.__createBinding || (Object.create ? function(o2, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      var desc = Object.getOwnPropertyDescriptor(m, k);
      if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m[k];
        } };
      }
      Object.defineProperty(o2, k2, desc);
    } : function(o2, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      o2[k2] = m[k];
    });
    var __setModuleDefault = exports && exports.__setModuleDefault || (Object.create ? function(o2, v) {
      Object.defineProperty(o2, "default", { enumerable: true, value: v });
    } : function(o2, v) {
      o2["default"] = v;
    });
    var __importStar = exports && exports.__importStar || function(mod) {
      if (mod && mod.__esModule)
        return mod;
      var result = {};
      if (mod != null) {
        for (var k in mod)
          if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k))
            __createBinding(result, mod, k);
      }
      __setModuleDefault(result, mod);
      return result;
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.createMetadataAccountArgsV3Beet = void 0;
    var beet9 = __importStar(require_beet());
    var DataV2_1 = require_DataV2();
    var CollectionDetails_1 = require_CollectionDetails();
    exports.createMetadataAccountArgsV3Beet = new beet9.FixableBeetArgsStruct([
      ["data", DataV2_1.dataV2Beet],
      ["isMutable", beet9.bool],
      ["collectionDetails", beet9.coption(CollectionDetails_1.collectionDetailsBeet)]
    ], "CreateMetadataAccountArgsV3");
  }
});

// ../../node_modules/@metaplex-foundation/mpl-token-metadata/dist/src/generated/instructions/CreateMetadataAccountV3.js
var require_CreateMetadataAccountV3 = __commonJS({
  "../../node_modules/@metaplex-foundation/mpl-token-metadata/dist/src/generated/instructions/CreateMetadataAccountV3.js"(exports) {
    "use strict";
    var __createBinding = exports && exports.__createBinding || (Object.create ? function(o2, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      var desc = Object.getOwnPropertyDescriptor(m, k);
      if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m[k];
        } };
      }
      Object.defineProperty(o2, k2, desc);
    } : function(o2, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      o2[k2] = m[k];
    });
    var __setModuleDefault = exports && exports.__setModuleDefault || (Object.create ? function(o2, v) {
      Object.defineProperty(o2, "default", { enumerable: true, value: v });
    } : function(o2, v) {
      o2["default"] = v;
    });
    var __importStar = exports && exports.__importStar || function(mod) {
      if (mod && mod.__esModule)
        return mod;
      var result = {};
      if (mod != null) {
        for (var k in mod)
          if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k))
            __createBinding(result, mod, k);
      }
      __setModuleDefault(result, mod);
      return result;
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.createCreateMetadataAccountV3Instruction = exports.createMetadataAccountV3InstructionDiscriminator = exports.CreateMetadataAccountV3Struct = void 0;
    var beet9 = __importStar(require_beet());
    var web3 = __importStar((init_index_browser_esm(), __toCommonJS(index_browser_esm_exports)));
    var CreateMetadataAccountArgsV3_1 = require_CreateMetadataAccountArgsV3();
    exports.CreateMetadataAccountV3Struct = new beet9.FixableBeetArgsStruct([
      ["instructionDiscriminator", beet9.u8],
      ["createMetadataAccountArgsV3", CreateMetadataAccountArgsV3_1.createMetadataAccountArgsV3Beet]
    ], "CreateMetadataAccountV3InstructionArgs");
    exports.createMetadataAccountV3InstructionDiscriminator = 33;
    function createCreateMetadataAccountV3Instruction(accounts, args, programId = new web3.PublicKey("metaqbxxUerdq28cj1RbAWkYQm3ybzjb6a8bt518x1s")) {
      var _a;
      const [data] = exports.CreateMetadataAccountV3Struct.serialize(__spreadValues({
        instructionDiscriminator: exports.createMetadataAccountV3InstructionDiscriminator
      }, args));
      const keys = [
        {
          pubkey: accounts.metadata,
          isWritable: true,
          isSigner: false
        },
        {
          pubkey: accounts.mint,
          isWritable: false,
          isSigner: false
        },
        {
          pubkey: accounts.mintAuthority,
          isWritable: false,
          isSigner: true
        },
        {
          pubkey: accounts.payer,
          isWritable: true,
          isSigner: true
        },
        {
          pubkey: accounts.updateAuthority,
          isWritable: false,
          isSigner: false
        },
        {
          pubkey: (_a = accounts.systemProgram) !== null && _a !== void 0 ? _a : web3.SystemProgram.programId,
          isWritable: false,
          isSigner: false
        }
      ];
      if (accounts.rent != null) {
        keys.push({
          pubkey: accounts.rent,
          isWritable: false,
          isSigner: false
        });
      }
      const ix = new web3.TransactionInstruction({
        programId,
        keys,
        data
      });
      return ix;
    }
    exports.createCreateMetadataAccountV3Instruction = createCreateMetadataAccountV3Instruction;
  }
});

// ../../node_modules/@metaplex-foundation/mpl-token-metadata/dist/src/generated/types/SeedsVec.js
var require_SeedsVec = __commonJS({
  "../../node_modules/@metaplex-foundation/mpl-token-metadata/dist/src/generated/types/SeedsVec.js"(exports) {
    "use strict";
    var __createBinding = exports && exports.__createBinding || (Object.create ? function(o2, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      var desc = Object.getOwnPropertyDescriptor(m, k);
      if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m[k];
        } };
      }
      Object.defineProperty(o2, k2, desc);
    } : function(o2, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      o2[k2] = m[k];
    });
    var __setModuleDefault = exports && exports.__setModuleDefault || (Object.create ? function(o2, v) {
      Object.defineProperty(o2, "default", { enumerable: true, value: v });
    } : function(o2, v) {
      o2["default"] = v;
    });
    var __importStar = exports && exports.__importStar || function(mod) {
      if (mod && mod.__esModule)
        return mod;
      var result = {};
      if (mod != null) {
        for (var k in mod)
          if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k))
            __createBinding(result, mod, k);
      }
      __setModuleDefault(result, mod);
      return result;
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.seedsVecBeet = void 0;
    var beet9 = __importStar(require_beet());
    exports.seedsVecBeet = new beet9.FixableBeetArgsStruct([["seeds", beet9.array(beet9.bytes)]], "SeedsVec");
  }
});

// ../../node_modules/@metaplex-foundation/mpl-token-metadata/dist/src/generated/types/LeafInfo.js
var require_LeafInfo = __commonJS({
  "../../node_modules/@metaplex-foundation/mpl-token-metadata/dist/src/generated/types/LeafInfo.js"(exports) {
    "use strict";
    var __createBinding = exports && exports.__createBinding || (Object.create ? function(o2, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      var desc = Object.getOwnPropertyDescriptor(m, k);
      if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m[k];
        } };
      }
      Object.defineProperty(o2, k2, desc);
    } : function(o2, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      o2[k2] = m[k];
    });
    var __setModuleDefault = exports && exports.__setModuleDefault || (Object.create ? function(o2, v) {
      Object.defineProperty(o2, "default", { enumerable: true, value: v });
    } : function(o2, v) {
      o2["default"] = v;
    });
    var __importStar = exports && exports.__importStar || function(mod) {
      if (mod && mod.__esModule)
        return mod;
      var result = {};
      if (mod != null) {
        for (var k in mod)
          if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k))
            __createBinding(result, mod, k);
      }
      __setModuleDefault(result, mod);
      return result;
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.leafInfoBeet = void 0;
    var beet9 = __importStar(require_beet());
    exports.leafInfoBeet = new beet9.FixableBeetArgsStruct([
      ["leaf", beet9.uniformFixedSizeArray(beet9.u8, 32)],
      ["proof", beet9.array(beet9.uniformFixedSizeArray(beet9.u8, 32))]
    ], "LeafInfo");
  }
});

// ../../node_modules/@metaplex-foundation/mpl-token-metadata/dist/src/generated/types/PayloadType.js
var require_PayloadType = __commonJS({
  "../../node_modules/@metaplex-foundation/mpl-token-metadata/dist/src/generated/types/PayloadType.js"(exports) {
    "use strict";
    var __createBinding = exports && exports.__createBinding || (Object.create ? function(o2, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      var desc = Object.getOwnPropertyDescriptor(m, k);
      if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m[k];
        } };
      }
      Object.defineProperty(o2, k2, desc);
    } : function(o2, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      o2[k2] = m[k];
    });
    var __setModuleDefault = exports && exports.__setModuleDefault || (Object.create ? function(o2, v) {
      Object.defineProperty(o2, "default", { enumerable: true, value: v });
    } : function(o2, v) {
      o2["default"] = v;
    });
    var __importStar = exports && exports.__importStar || function(mod) {
      if (mod && mod.__esModule)
        return mod;
      var result = {};
      if (mod != null) {
        for (var k in mod)
          if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k))
            __createBinding(result, mod, k);
      }
      __setModuleDefault(result, mod);
      return result;
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.payloadTypeBeet = exports.isPayloadTypeNumber = exports.isPayloadTypeMerkleProof = exports.isPayloadTypeSeeds = exports.isPayloadTypePubkey = void 0;
    var beet9 = __importStar(require_beet());
    var beetSolana = __importStar(require_beet_solana());
    var SeedsVec_1 = require_SeedsVec();
    var LeafInfo_1 = require_LeafInfo();
    var isPayloadTypePubkey = (x) => x.__kind === "Pubkey";
    exports.isPayloadTypePubkey = isPayloadTypePubkey;
    var isPayloadTypeSeeds = (x) => x.__kind === "Seeds";
    exports.isPayloadTypeSeeds = isPayloadTypeSeeds;
    var isPayloadTypeMerkleProof = (x) => x.__kind === "MerkleProof";
    exports.isPayloadTypeMerkleProof = isPayloadTypeMerkleProof;
    var isPayloadTypeNumber = (x) => x.__kind === "Number";
    exports.isPayloadTypeNumber = isPayloadTypeNumber;
    exports.payloadTypeBeet = beet9.dataEnum([
      [
        "Pubkey",
        new beet9.BeetArgsStruct([["fields", beet9.fixedSizeTuple([beetSolana.publicKey])]], 'PayloadTypeRecord["Pubkey"]')
      ],
      [
        "Seeds",
        new beet9.FixableBeetArgsStruct([["fields", beet9.tuple([SeedsVec_1.seedsVecBeet])]], 'PayloadTypeRecord["Seeds"]')
      ],
      [
        "MerkleProof",
        new beet9.FixableBeetArgsStruct([["fields", beet9.tuple([LeafInfo_1.leafInfoBeet])]], 'PayloadTypeRecord["MerkleProof"]')
      ],
      [
        "Number",
        new beet9.BeetArgsStruct([["fields", beet9.fixedSizeTuple([beet9.u64])]], 'PayloadTypeRecord["Number"]')
      ]
    ]);
  }
});

// ../../node_modules/@metaplex-foundation/mpl-token-metadata/dist/src/generated/types/Payload.js
var require_Payload = __commonJS({
  "../../node_modules/@metaplex-foundation/mpl-token-metadata/dist/src/generated/types/Payload.js"(exports) {
    "use strict";
    var __createBinding = exports && exports.__createBinding || (Object.create ? function(o2, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      var desc = Object.getOwnPropertyDescriptor(m, k);
      if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m[k];
        } };
      }
      Object.defineProperty(o2, k2, desc);
    } : function(o2, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      o2[k2] = m[k];
    });
    var __setModuleDefault = exports && exports.__setModuleDefault || (Object.create ? function(o2, v) {
      Object.defineProperty(o2, "default", { enumerable: true, value: v });
    } : function(o2, v) {
      o2["default"] = v;
    });
    var __importStar = exports && exports.__importStar || function(mod) {
      if (mod && mod.__esModule)
        return mod;
      var result = {};
      if (mod != null) {
        for (var k in mod)
          if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k))
            __createBinding(result, mod, k);
      }
      __setModuleDefault(result, mod);
      return result;
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.payloadBeet = void 0;
    var beet9 = __importStar(require_beet());
    var PayloadType_1 = require_PayloadType();
    exports.payloadBeet = new beet9.FixableBeetArgsStruct([["map", beet9.map(beet9.utf8String, PayloadType_1.payloadTypeBeet)]], "Payload");
  }
});

// ../../node_modules/@metaplex-foundation/mpl-token-metadata/dist/src/generated/types/AuthorizationData.js
var require_AuthorizationData = __commonJS({
  "../../node_modules/@metaplex-foundation/mpl-token-metadata/dist/src/generated/types/AuthorizationData.js"(exports) {
    "use strict";
    var __createBinding = exports && exports.__createBinding || (Object.create ? function(o2, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      var desc = Object.getOwnPropertyDescriptor(m, k);
      if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m[k];
        } };
      }
      Object.defineProperty(o2, k2, desc);
    } : function(o2, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      o2[k2] = m[k];
    });
    var __setModuleDefault = exports && exports.__setModuleDefault || (Object.create ? function(o2, v) {
      Object.defineProperty(o2, "default", { enumerable: true, value: v });
    } : function(o2, v) {
      o2["default"] = v;
    });
    var __importStar = exports && exports.__importStar || function(mod) {
      if (mod && mod.__esModule)
        return mod;
      var result = {};
      if (mod != null) {
        for (var k in mod)
          if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k))
            __createBinding(result, mod, k);
      }
      __setModuleDefault(result, mod);
      return result;
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.authorizationDataBeet = void 0;
    var beet9 = __importStar(require_beet());
    var Payload_1 = require_Payload();
    exports.authorizationDataBeet = new beet9.FixableBeetArgsStruct([["payload", Payload_1.payloadBeet]], "AuthorizationData");
  }
});

// ../../node_modules/@metaplex-foundation/mpl-token-metadata/dist/src/generated/types/DelegateArgs.js
var require_DelegateArgs = __commonJS({
  "../../node_modules/@metaplex-foundation/mpl-token-metadata/dist/src/generated/types/DelegateArgs.js"(exports) {
    "use strict";
    var __createBinding = exports && exports.__createBinding || (Object.create ? function(o2, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      var desc = Object.getOwnPropertyDescriptor(m, k);
      if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m[k];
        } };
      }
      Object.defineProperty(o2, k2, desc);
    } : function(o2, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      o2[k2] = m[k];
    });
    var __setModuleDefault = exports && exports.__setModuleDefault || (Object.create ? function(o2, v) {
      Object.defineProperty(o2, "default", { enumerable: true, value: v });
    } : function(o2, v) {
      o2["default"] = v;
    });
    var __importStar = exports && exports.__importStar || function(mod) {
      if (mod && mod.__esModule)
        return mod;
      var result = {};
      if (mod != null) {
        for (var k in mod)
          if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k))
            __createBinding(result, mod, k);
      }
      __setModuleDefault(result, mod);
      return result;
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.delegateArgsBeet = exports.isDelegateArgsProgrammableConfigItemV1 = exports.isDelegateArgsCollectionItemV1 = exports.isDelegateArgsDataItemV1 = exports.isDelegateArgsAuthorityItemV1 = exports.isDelegateArgsProgrammableConfigV1 = exports.isDelegateArgsLockedTransferV1 = exports.isDelegateArgsStandardV1 = exports.isDelegateArgsStakingV1 = exports.isDelegateArgsUtilityV1 = exports.isDelegateArgsDataV1 = exports.isDelegateArgsTransferV1 = exports.isDelegateArgsSaleV1 = exports.isDelegateArgsCollectionV1 = void 0;
    var beet9 = __importStar(require_beet());
    var beetSolana = __importStar(require_beet_solana());
    var AuthorizationData_1 = require_AuthorizationData();
    var isDelegateArgsCollectionV1 = (x) => x.__kind === "CollectionV1";
    exports.isDelegateArgsCollectionV1 = isDelegateArgsCollectionV1;
    var isDelegateArgsSaleV1 = (x) => x.__kind === "SaleV1";
    exports.isDelegateArgsSaleV1 = isDelegateArgsSaleV1;
    var isDelegateArgsTransferV1 = (x) => x.__kind === "TransferV1";
    exports.isDelegateArgsTransferV1 = isDelegateArgsTransferV1;
    var isDelegateArgsDataV1 = (x) => x.__kind === "DataV1";
    exports.isDelegateArgsDataV1 = isDelegateArgsDataV1;
    var isDelegateArgsUtilityV1 = (x) => x.__kind === "UtilityV1";
    exports.isDelegateArgsUtilityV1 = isDelegateArgsUtilityV1;
    var isDelegateArgsStakingV1 = (x) => x.__kind === "StakingV1";
    exports.isDelegateArgsStakingV1 = isDelegateArgsStakingV1;
    var isDelegateArgsStandardV1 = (x) => x.__kind === "StandardV1";
    exports.isDelegateArgsStandardV1 = isDelegateArgsStandardV1;
    var isDelegateArgsLockedTransferV1 = (x) => x.__kind === "LockedTransferV1";
    exports.isDelegateArgsLockedTransferV1 = isDelegateArgsLockedTransferV1;
    var isDelegateArgsProgrammableConfigV1 = (x) => x.__kind === "ProgrammableConfigV1";
    exports.isDelegateArgsProgrammableConfigV1 = isDelegateArgsProgrammableConfigV1;
    var isDelegateArgsAuthorityItemV1 = (x) => x.__kind === "AuthorityItemV1";
    exports.isDelegateArgsAuthorityItemV1 = isDelegateArgsAuthorityItemV1;
    var isDelegateArgsDataItemV1 = (x) => x.__kind === "DataItemV1";
    exports.isDelegateArgsDataItemV1 = isDelegateArgsDataItemV1;
    var isDelegateArgsCollectionItemV1 = (x) => x.__kind === "CollectionItemV1";
    exports.isDelegateArgsCollectionItemV1 = isDelegateArgsCollectionItemV1;
    var isDelegateArgsProgrammableConfigItemV1 = (x) => x.__kind === "ProgrammableConfigItemV1";
    exports.isDelegateArgsProgrammableConfigItemV1 = isDelegateArgsProgrammableConfigItemV1;
    exports.delegateArgsBeet = beet9.dataEnum([
      [
        "CollectionV1",
        new beet9.FixableBeetArgsStruct([["authorizationData", beet9.coption(AuthorizationData_1.authorizationDataBeet)]], 'DelegateArgsRecord["CollectionV1"]')
      ],
      [
        "SaleV1",
        new beet9.FixableBeetArgsStruct([
          ["amount", beet9.u64],
          ["authorizationData", beet9.coption(AuthorizationData_1.authorizationDataBeet)]
        ], 'DelegateArgsRecord["SaleV1"]')
      ],
      [
        "TransferV1",
        new beet9.FixableBeetArgsStruct([
          ["amount", beet9.u64],
          ["authorizationData", beet9.coption(AuthorizationData_1.authorizationDataBeet)]
        ], 'DelegateArgsRecord["TransferV1"]')
      ],
      [
        "DataV1",
        new beet9.FixableBeetArgsStruct([["authorizationData", beet9.coption(AuthorizationData_1.authorizationDataBeet)]], 'DelegateArgsRecord["DataV1"]')
      ],
      [
        "UtilityV1",
        new beet9.FixableBeetArgsStruct([
          ["amount", beet9.u64],
          ["authorizationData", beet9.coption(AuthorizationData_1.authorizationDataBeet)]
        ], 'DelegateArgsRecord["UtilityV1"]')
      ],
      [
        "StakingV1",
        new beet9.FixableBeetArgsStruct([
          ["amount", beet9.u64],
          ["authorizationData", beet9.coption(AuthorizationData_1.authorizationDataBeet)]
        ], 'DelegateArgsRecord["StakingV1"]')
      ],
      [
        "StandardV1",
        new beet9.BeetArgsStruct([["amount", beet9.u64]], 'DelegateArgsRecord["StandardV1"]')
      ],
      [
        "LockedTransferV1",
        new beet9.FixableBeetArgsStruct([
          ["amount", beet9.u64],
          ["lockedAddress", beetSolana.publicKey],
          ["authorizationData", beet9.coption(AuthorizationData_1.authorizationDataBeet)]
        ], 'DelegateArgsRecord["LockedTransferV1"]')
      ],
      [
        "ProgrammableConfigV1",
        new beet9.FixableBeetArgsStruct([["authorizationData", beet9.coption(AuthorizationData_1.authorizationDataBeet)]], 'DelegateArgsRecord["ProgrammableConfigV1"]')
      ],
      [
        "AuthorityItemV1",
        new beet9.FixableBeetArgsStruct([["authorizationData", beet9.coption(AuthorizationData_1.authorizationDataBeet)]], 'DelegateArgsRecord["AuthorityItemV1"]')
      ],
      [
        "DataItemV1",
        new beet9.FixableBeetArgsStruct([["authorizationData", beet9.coption(AuthorizationData_1.authorizationDataBeet)]], 'DelegateArgsRecord["DataItemV1"]')
      ],
      [
        "CollectionItemV1",
        new beet9.FixableBeetArgsStruct([["authorizationData", beet9.coption(AuthorizationData_1.authorizationDataBeet)]], 'DelegateArgsRecord["CollectionItemV1"]')
      ],
      [
        "ProgrammableConfigItemV1",
        new beet9.FixableBeetArgsStruct([["authorizationData", beet9.coption(AuthorizationData_1.authorizationDataBeet)]], 'DelegateArgsRecord["ProgrammableConfigItemV1"]')
      ]
    ]);
  }
});

// ../../node_modules/@metaplex-foundation/mpl-token-metadata/dist/src/generated/instructions/Delegate.js
var require_Delegate = __commonJS({
  "../../node_modules/@metaplex-foundation/mpl-token-metadata/dist/src/generated/instructions/Delegate.js"(exports) {
    "use strict";
    var __createBinding = exports && exports.__createBinding || (Object.create ? function(o2, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      var desc = Object.getOwnPropertyDescriptor(m, k);
      if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m[k];
        } };
      }
      Object.defineProperty(o2, k2, desc);
    } : function(o2, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      o2[k2] = m[k];
    });
    var __setModuleDefault = exports && exports.__setModuleDefault || (Object.create ? function(o2, v) {
      Object.defineProperty(o2, "default", { enumerable: true, value: v });
    } : function(o2, v) {
      o2["default"] = v;
    });
    var __importStar = exports && exports.__importStar || function(mod) {
      if (mod && mod.__esModule)
        return mod;
      var result = {};
      if (mod != null) {
        for (var k in mod)
          if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k))
            __createBinding(result, mod, k);
      }
      __setModuleDefault(result, mod);
      return result;
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.createDelegateInstruction = exports.delegateInstructionDiscriminator = exports.DelegateStruct = void 0;
    var beet9 = __importStar(require_beet());
    var web3 = __importStar((init_index_browser_esm(), __toCommonJS(index_browser_esm_exports)));
    var DelegateArgs_1 = require_DelegateArgs();
    exports.DelegateStruct = new beet9.FixableBeetArgsStruct([
      ["instructionDiscriminator", beet9.u8],
      ["delegateArgs", DelegateArgs_1.delegateArgsBeet]
    ], "DelegateInstructionArgs");
    exports.delegateInstructionDiscriminator = 44;
    function createDelegateInstruction2(accounts, args, programId = new web3.PublicKey("metaqbxxUerdq28cj1RbAWkYQm3ybzjb6a8bt518x1s")) {
      var _a, _b, _c, _d, _e, _f, _g, _h;
      const [data] = exports.DelegateStruct.serialize(__spreadValues({
        instructionDiscriminator: exports.delegateInstructionDiscriminator
      }, args));
      const keys = [
        {
          pubkey: (_a = accounts.delegateRecord) !== null && _a !== void 0 ? _a : programId,
          isWritable: accounts.delegateRecord != null,
          isSigner: false
        },
        {
          pubkey: accounts.delegate,
          isWritable: false,
          isSigner: false
        },
        {
          pubkey: accounts.metadata,
          isWritable: true,
          isSigner: false
        },
        {
          pubkey: (_b = accounts.masterEdition) !== null && _b !== void 0 ? _b : programId,
          isWritable: false,
          isSigner: false
        },
        {
          pubkey: (_c = accounts.tokenRecord) !== null && _c !== void 0 ? _c : programId,
          isWritable: accounts.tokenRecord != null,
          isSigner: false
        },
        {
          pubkey: accounts.mint,
          isWritable: false,
          isSigner: false
        },
        {
          pubkey: (_d = accounts.token) !== null && _d !== void 0 ? _d : programId,
          isWritable: accounts.token != null,
          isSigner: false
        },
        {
          pubkey: accounts.authority,
          isWritable: false,
          isSigner: true
        },
        {
          pubkey: accounts.payer,
          isWritable: true,
          isSigner: true
        },
        {
          pubkey: (_e = accounts.systemProgram) !== null && _e !== void 0 ? _e : web3.SystemProgram.programId,
          isWritable: false,
          isSigner: false
        },
        {
          pubkey: accounts.sysvarInstructions,
          isWritable: false,
          isSigner: false
        },
        {
          pubkey: (_f = accounts.splTokenProgram) !== null && _f !== void 0 ? _f : programId,
          isWritable: false,
          isSigner: false
        },
        {
          pubkey: (_g = accounts.authorizationRulesProgram) !== null && _g !== void 0 ? _g : programId,
          isWritable: false,
          isSigner: false
        },
        {
          pubkey: (_h = accounts.authorizationRules) !== null && _h !== void 0 ? _h : programId,
          isWritable: false,
          isSigner: false
        }
      ];
      const ix = new web3.TransactionInstruction({
        programId,
        keys,
        data
      });
      return ix;
    }
    exports.createDelegateInstruction = createDelegateInstruction2;
  }
});

// ../../node_modules/@metaplex-foundation/mpl-token-metadata/dist/src/generated/instructions/DeprecatedCreateMasterEdition.js
var require_DeprecatedCreateMasterEdition = __commonJS({
  "../../node_modules/@metaplex-foundation/mpl-token-metadata/dist/src/generated/instructions/DeprecatedCreateMasterEdition.js"(exports) {
    "use strict";
    var __createBinding = exports && exports.__createBinding || (Object.create ? function(o2, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      var desc = Object.getOwnPropertyDescriptor(m, k);
      if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m[k];
        } };
      }
      Object.defineProperty(o2, k2, desc);
    } : function(o2, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      o2[k2] = m[k];
    });
    var __setModuleDefault = exports && exports.__setModuleDefault || (Object.create ? function(o2, v) {
      Object.defineProperty(o2, "default", { enumerable: true, value: v });
    } : function(o2, v) {
      o2["default"] = v;
    });
    var __importStar = exports && exports.__importStar || function(mod) {
      if (mod && mod.__esModule)
        return mod;
      var result = {};
      if (mod != null) {
        for (var k in mod)
          if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k))
            __createBinding(result, mod, k);
      }
      __setModuleDefault(result, mod);
      return result;
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.createDeprecatedCreateMasterEditionInstruction = exports.deprecatedCreateMasterEditionInstructionDiscriminator = exports.DeprecatedCreateMasterEditionStruct = void 0;
    var splToken = __importStar(require_cjs4());
    var beet9 = __importStar(require_beet());
    var web3 = __importStar((init_index_browser_esm(), __toCommonJS(index_browser_esm_exports)));
    exports.DeprecatedCreateMasterEditionStruct = new beet9.BeetArgsStruct([["instructionDiscriminator", beet9.u8]], "DeprecatedCreateMasterEditionInstructionArgs");
    exports.deprecatedCreateMasterEditionInstructionDiscriminator = 2;
    function createDeprecatedCreateMasterEditionInstruction(accounts, programId = new web3.PublicKey("metaqbxxUerdq28cj1RbAWkYQm3ybzjb6a8bt518x1s")) {
      var _a, _b, _c;
      const [data] = exports.DeprecatedCreateMasterEditionStruct.serialize({
        instructionDiscriminator: exports.deprecatedCreateMasterEditionInstructionDiscriminator
      });
      const keys = [
        {
          pubkey: accounts.edition,
          isWritable: true,
          isSigner: false
        },
        {
          pubkey: accounts.mint,
          isWritable: true,
          isSigner: false
        },
        {
          pubkey: accounts.printingMint,
          isWritable: true,
          isSigner: false
        },
        {
          pubkey: accounts.oneTimePrintingAuthorizationMint,
          isWritable: true,
          isSigner: false
        },
        {
          pubkey: accounts.updateAuthority,
          isWritable: false,
          isSigner: true
        },
        {
          pubkey: accounts.printingMintAuthority,
          isWritable: false,
          isSigner: true
        },
        {
          pubkey: accounts.mintAuthority,
          isWritable: false,
          isSigner: true
        },
        {
          pubkey: accounts.metadata,
          isWritable: false,
          isSigner: false
        },
        {
          pubkey: accounts.payer,
          isWritable: false,
          isSigner: true
        },
        {
          pubkey: (_a = accounts.tokenProgram) !== null && _a !== void 0 ? _a : splToken.TOKEN_PROGRAM_ID,
          isWritable: false,
          isSigner: false
        },
        {
          pubkey: (_b = accounts.systemProgram) !== null && _b !== void 0 ? _b : web3.SystemProgram.programId,
          isWritable: false,
          isSigner: false
        },
        {
          pubkey: (_c = accounts.rent) !== null && _c !== void 0 ? _c : web3.SYSVAR_RENT_PUBKEY,
          isWritable: false,
          isSigner: false
        },
        {
          pubkey: accounts.oneTimePrintingAuthorizationMintAuthority,
          isWritable: false,
          isSigner: true
        }
      ];
      const ix = new web3.TransactionInstruction({
        programId,
        keys,
        data
      });
      return ix;
    }
    exports.createDeprecatedCreateMasterEditionInstruction = createDeprecatedCreateMasterEditionInstruction;
  }
});

// ../../node_modules/@metaplex-foundation/mpl-token-metadata/dist/src/generated/instructions/DeprecatedCreateReservationList.js
var require_DeprecatedCreateReservationList = __commonJS({
  "../../node_modules/@metaplex-foundation/mpl-token-metadata/dist/src/generated/instructions/DeprecatedCreateReservationList.js"(exports) {
    "use strict";
    var __createBinding = exports && exports.__createBinding || (Object.create ? function(o2, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      var desc = Object.getOwnPropertyDescriptor(m, k);
      if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m[k];
        } };
      }
      Object.defineProperty(o2, k2, desc);
    } : function(o2, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      o2[k2] = m[k];
    });
    var __setModuleDefault = exports && exports.__setModuleDefault || (Object.create ? function(o2, v) {
      Object.defineProperty(o2, "default", { enumerable: true, value: v });
    } : function(o2, v) {
      o2["default"] = v;
    });
    var __importStar = exports && exports.__importStar || function(mod) {
      if (mod && mod.__esModule)
        return mod;
      var result = {};
      if (mod != null) {
        for (var k in mod)
          if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k))
            __createBinding(result, mod, k);
      }
      __setModuleDefault(result, mod);
      return result;
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.createDeprecatedCreateReservationListInstruction = exports.deprecatedCreateReservationListInstructionDiscriminator = exports.DeprecatedCreateReservationListStruct = void 0;
    var beet9 = __importStar(require_beet());
    var web3 = __importStar((init_index_browser_esm(), __toCommonJS(index_browser_esm_exports)));
    exports.DeprecatedCreateReservationListStruct = new beet9.BeetArgsStruct([["instructionDiscriminator", beet9.u8]], "DeprecatedCreateReservationListInstructionArgs");
    exports.deprecatedCreateReservationListInstructionDiscriminator = 6;
    function createDeprecatedCreateReservationListInstruction(accounts, programId = new web3.PublicKey("metaqbxxUerdq28cj1RbAWkYQm3ybzjb6a8bt518x1s")) {
      var _a, _b;
      const [data] = exports.DeprecatedCreateReservationListStruct.serialize({
        instructionDiscriminator: exports.deprecatedCreateReservationListInstructionDiscriminator
      });
      const keys = [
        {
          pubkey: accounts.reservationList,
          isWritable: true,
          isSigner: false
        },
        {
          pubkey: accounts.payer,
          isWritable: false,
          isSigner: true
        },
        {
          pubkey: accounts.updateAuthority,
          isWritable: false,
          isSigner: true
        },
        {
          pubkey: accounts.masterEdition,
          isWritable: false,
          isSigner: false
        },
        {
          pubkey: accounts.resource,
          isWritable: false,
          isSigner: false
        },
        {
          pubkey: accounts.metadata,
          isWritable: false,
          isSigner: false
        },
        {
          pubkey: (_a = accounts.systemProgram) !== null && _a !== void 0 ? _a : web3.SystemProgram.programId,
          isWritable: false,
          isSigner: false
        },
        {
          pubkey: (_b = accounts.rent) !== null && _b !== void 0 ? _b : web3.SYSVAR_RENT_PUBKEY,
          isWritable: false,
          isSigner: false
        }
      ];
      const ix = new web3.TransactionInstruction({
        programId,
        keys,
        data
      });
      return ix;
    }
    exports.createDeprecatedCreateReservationListInstruction = createDeprecatedCreateReservationListInstruction;
  }
});

// ../../node_modules/@metaplex-foundation/mpl-token-metadata/dist/src/generated/instructions/DeprecatedMintNewEditionFromMasterEditionViaPrintingToken.js
var require_DeprecatedMintNewEditionFromMasterEditionViaPrintingToken = __commonJS({
  "../../node_modules/@metaplex-foundation/mpl-token-metadata/dist/src/generated/instructions/DeprecatedMintNewEditionFromMasterEditionViaPrintingToken.js"(exports) {
    "use strict";
    var __createBinding = exports && exports.__createBinding || (Object.create ? function(o2, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      var desc = Object.getOwnPropertyDescriptor(m, k);
      if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m[k];
        } };
      }
      Object.defineProperty(o2, k2, desc);
    } : function(o2, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      o2[k2] = m[k];
    });
    var __setModuleDefault = exports && exports.__setModuleDefault || (Object.create ? function(o2, v) {
      Object.defineProperty(o2, "default", { enumerable: true, value: v });
    } : function(o2, v) {
      o2["default"] = v;
    });
    var __importStar = exports && exports.__importStar || function(mod) {
      if (mod && mod.__esModule)
        return mod;
      var result = {};
      if (mod != null) {
        for (var k in mod)
          if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k))
            __createBinding(result, mod, k);
      }
      __setModuleDefault(result, mod);
      return result;
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.createDeprecatedMintNewEditionFromMasterEditionViaPrintingTokenInstruction = exports.deprecatedMintNewEditionFromMasterEditionViaPrintingTokenInstructionDiscriminator = exports.DeprecatedMintNewEditionFromMasterEditionViaPrintingTokenStruct = void 0;
    var splToken = __importStar(require_cjs4());
    var beet9 = __importStar(require_beet());
    var web3 = __importStar((init_index_browser_esm(), __toCommonJS(index_browser_esm_exports)));
    exports.DeprecatedMintNewEditionFromMasterEditionViaPrintingTokenStruct = new beet9.BeetArgsStruct([["instructionDiscriminator", beet9.u8]], "DeprecatedMintNewEditionFromMasterEditionViaPrintingTokenInstructionArgs");
    exports.deprecatedMintNewEditionFromMasterEditionViaPrintingTokenInstructionDiscriminator = 3;
    function createDeprecatedMintNewEditionFromMasterEditionViaPrintingTokenInstruction(accounts, programId = new web3.PublicKey("metaqbxxUerdq28cj1RbAWkYQm3ybzjb6a8bt518x1s")) {
      var _a, _b, _c;
      const [data] = exports.DeprecatedMintNewEditionFromMasterEditionViaPrintingTokenStruct.serialize({
        instructionDiscriminator: exports.deprecatedMintNewEditionFromMasterEditionViaPrintingTokenInstructionDiscriminator
      });
      const keys = [
        {
          pubkey: accounts.metadata,
          isWritable: true,
          isSigner: false
        },
        {
          pubkey: accounts.edition,
          isWritable: true,
          isSigner: false
        },
        {
          pubkey: accounts.masterEdition,
          isWritable: true,
          isSigner: false
        },
        {
          pubkey: accounts.mint,
          isWritable: true,
          isSigner: false
        },
        {
          pubkey: accounts.mintAuthority,
          isWritable: false,
          isSigner: true
        },
        {
          pubkey: accounts.printingMint,
          isWritable: true,
          isSigner: false
        },
        {
          pubkey: accounts.masterTokenAccount,
          isWritable: true,
          isSigner: false
        },
        {
          pubkey: accounts.editionMarker,
          isWritable: true,
          isSigner: false
        },
        {
          pubkey: accounts.burnAuthority,
          isWritable: false,
          isSigner: true
        },
        {
          pubkey: accounts.payer,
          isWritable: false,
          isSigner: true
        },
        {
          pubkey: accounts.masterUpdateAuthority,
          isWritable: false,
          isSigner: false
        },
        {
          pubkey: accounts.masterMetadata,
          isWritable: false,
          isSigner: false
        },
        {
          pubkey: (_a = accounts.tokenProgram) !== null && _a !== void 0 ? _a : splToken.TOKEN_PROGRAM_ID,
          isWritable: false,
          isSigner: false
        },
        {
          pubkey: (_b = accounts.systemProgram) !== null && _b !== void 0 ? _b : web3.SystemProgram.programId,
          isWritable: false,
          isSigner: false
        },
        {
          pubkey: (_c = accounts.rent) !== null && _c !== void 0 ? _c : web3.SYSVAR_RENT_PUBKEY,
          isWritable: false,
          isSigner: false
        }
      ];
      if (accounts.reservationList != null) {
        keys.push({
          pubkey: accounts.reservationList,
          isWritable: true,
          isSigner: false
        });
      }
      const ix = new web3.TransactionInstruction({
        programId,
        keys,
        data
      });
      return ix;
    }
    exports.createDeprecatedMintNewEditionFromMasterEditionViaPrintingTokenInstruction = createDeprecatedMintNewEditionFromMasterEditionViaPrintingTokenInstruction;
  }
});

// ../../node_modules/@metaplex-foundation/mpl-token-metadata/dist/src/generated/instructions/DeprecatedMintPrintingTokens.js
var require_DeprecatedMintPrintingTokens = __commonJS({
  "../../node_modules/@metaplex-foundation/mpl-token-metadata/dist/src/generated/instructions/DeprecatedMintPrintingTokens.js"(exports) {
    "use strict";
    var __createBinding = exports && exports.__createBinding || (Object.create ? function(o2, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      var desc = Object.getOwnPropertyDescriptor(m, k);
      if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m[k];
        } };
      }
      Object.defineProperty(o2, k2, desc);
    } : function(o2, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      o2[k2] = m[k];
    });
    var __setModuleDefault = exports && exports.__setModuleDefault || (Object.create ? function(o2, v) {
      Object.defineProperty(o2, "default", { enumerable: true, value: v });
    } : function(o2, v) {
      o2["default"] = v;
    });
    var __importStar = exports && exports.__importStar || function(mod) {
      if (mod && mod.__esModule)
        return mod;
      var result = {};
      if (mod != null) {
        for (var k in mod)
          if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k))
            __createBinding(result, mod, k);
      }
      __setModuleDefault(result, mod);
      return result;
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.createDeprecatedMintPrintingTokensInstruction = exports.deprecatedMintPrintingTokensInstructionDiscriminator = exports.DeprecatedMintPrintingTokensStruct = void 0;
    var splToken = __importStar(require_cjs4());
    var beet9 = __importStar(require_beet());
    var web3 = __importStar((init_index_browser_esm(), __toCommonJS(index_browser_esm_exports)));
    exports.DeprecatedMintPrintingTokensStruct = new beet9.BeetArgsStruct([["instructionDiscriminator", beet9.u8]], "DeprecatedMintPrintingTokensInstructionArgs");
    exports.deprecatedMintPrintingTokensInstructionDiscriminator = 9;
    function createDeprecatedMintPrintingTokensInstruction(accounts, programId = new web3.PublicKey("metaqbxxUerdq28cj1RbAWkYQm3ybzjb6a8bt518x1s")) {
      var _a, _b;
      const [data] = exports.DeprecatedMintPrintingTokensStruct.serialize({
        instructionDiscriminator: exports.deprecatedMintPrintingTokensInstructionDiscriminator
      });
      const keys = [
        {
          pubkey: accounts.destination,
          isWritable: true,
          isSigner: false
        },
        {
          pubkey: accounts.printingMint,
          isWritable: true,
          isSigner: false
        },
        {
          pubkey: accounts.updateAuthority,
          isWritable: false,
          isSigner: true
        },
        {
          pubkey: accounts.metadata,
          isWritable: false,
          isSigner: false
        },
        {
          pubkey: accounts.masterEdition,
          isWritable: false,
          isSigner: false
        },
        {
          pubkey: (_a = accounts.tokenProgram) !== null && _a !== void 0 ? _a : splToken.TOKEN_PROGRAM_ID,
          isWritable: false,
          isSigner: false
        },
        {
          pubkey: (_b = accounts.rent) !== null && _b !== void 0 ? _b : web3.SYSVAR_RENT_PUBKEY,
          isWritable: false,
          isSigner: false
        }
      ];
      const ix = new web3.TransactionInstruction({
        programId,
        keys,
        data
      });
      return ix;
    }
    exports.createDeprecatedMintPrintingTokensInstruction = createDeprecatedMintPrintingTokensInstruction;
  }
});

// ../../node_modules/@metaplex-foundation/mpl-token-metadata/dist/src/generated/instructions/DeprecatedMintPrintingTokensViaToken.js
var require_DeprecatedMintPrintingTokensViaToken = __commonJS({
  "../../node_modules/@metaplex-foundation/mpl-token-metadata/dist/src/generated/instructions/DeprecatedMintPrintingTokensViaToken.js"(exports) {
    "use strict";
    var __createBinding = exports && exports.__createBinding || (Object.create ? function(o2, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      var desc = Object.getOwnPropertyDescriptor(m, k);
      if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m[k];
        } };
      }
      Object.defineProperty(o2, k2, desc);
    } : function(o2, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      o2[k2] = m[k];
    });
    var __setModuleDefault = exports && exports.__setModuleDefault || (Object.create ? function(o2, v) {
      Object.defineProperty(o2, "default", { enumerable: true, value: v });
    } : function(o2, v) {
      o2["default"] = v;
    });
    var __importStar = exports && exports.__importStar || function(mod) {
      if (mod && mod.__esModule)
        return mod;
      var result = {};
      if (mod != null) {
        for (var k in mod)
          if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k))
            __createBinding(result, mod, k);
      }
      __setModuleDefault(result, mod);
      return result;
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.createDeprecatedMintPrintingTokensViaTokenInstruction = exports.deprecatedMintPrintingTokensViaTokenInstructionDiscriminator = exports.DeprecatedMintPrintingTokensViaTokenStruct = void 0;
    var splToken = __importStar(require_cjs4());
    var beet9 = __importStar(require_beet());
    var web3 = __importStar((init_index_browser_esm(), __toCommonJS(index_browser_esm_exports)));
    exports.DeprecatedMintPrintingTokensViaTokenStruct = new beet9.BeetArgsStruct([["instructionDiscriminator", beet9.u8]], "DeprecatedMintPrintingTokensViaTokenInstructionArgs");
    exports.deprecatedMintPrintingTokensViaTokenInstructionDiscriminator = 8;
    function createDeprecatedMintPrintingTokensViaTokenInstruction(accounts, programId = new web3.PublicKey("metaqbxxUerdq28cj1RbAWkYQm3ybzjb6a8bt518x1s")) {
      var _a, _b;
      const [data] = exports.DeprecatedMintPrintingTokensViaTokenStruct.serialize({
        instructionDiscriminator: exports.deprecatedMintPrintingTokensViaTokenInstructionDiscriminator
      });
      const keys = [
        {
          pubkey: accounts.destination,
          isWritable: true,
          isSigner: false
        },
        {
          pubkey: accounts.token,
          isWritable: true,
          isSigner: false
        },
        {
          pubkey: accounts.oneTimePrintingAuthorizationMint,
          isWritable: true,
          isSigner: false
        },
        {
          pubkey: accounts.printingMint,
          isWritable: true,
          isSigner: false
        },
        {
          pubkey: accounts.burnAuthority,
          isWritable: false,
          isSigner: true
        },
        {
          pubkey: accounts.metadata,
          isWritable: false,
          isSigner: false
        },
        {
          pubkey: accounts.masterEdition,
          isWritable: false,
          isSigner: false
        },
        {
          pubkey: (_a = accounts.tokenProgram) !== null && _a !== void 0 ? _a : splToken.TOKEN_PROGRAM_ID,
          isWritable: false,
          isSigner: false
        },
        {
          pubkey: (_b = accounts.rent) !== null && _b !== void 0 ? _b : web3.SYSVAR_RENT_PUBKEY,
          isWritable: false,
          isSigner: false
        }
      ];
      const ix = new web3.TransactionInstruction({
        programId,
        keys,
        data
      });
      return ix;
    }
    exports.createDeprecatedMintPrintingTokensViaTokenInstruction = createDeprecatedMintPrintingTokensViaTokenInstruction;
  }
});

// ../../node_modules/@metaplex-foundation/mpl-token-metadata/dist/src/generated/instructions/DeprecatedSetReservationList.js
var require_DeprecatedSetReservationList = __commonJS({
  "../../node_modules/@metaplex-foundation/mpl-token-metadata/dist/src/generated/instructions/DeprecatedSetReservationList.js"(exports) {
    "use strict";
    var __createBinding = exports && exports.__createBinding || (Object.create ? function(o2, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      var desc = Object.getOwnPropertyDescriptor(m, k);
      if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m[k];
        } };
      }
      Object.defineProperty(o2, k2, desc);
    } : function(o2, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      o2[k2] = m[k];
    });
    var __setModuleDefault = exports && exports.__setModuleDefault || (Object.create ? function(o2, v) {
      Object.defineProperty(o2, "default", { enumerable: true, value: v });
    } : function(o2, v) {
      o2["default"] = v;
    });
    var __importStar = exports && exports.__importStar || function(mod) {
      if (mod && mod.__esModule)
        return mod;
      var result = {};
      if (mod != null) {
        for (var k in mod)
          if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k))
            __createBinding(result, mod, k);
      }
      __setModuleDefault(result, mod);
      return result;
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.createDeprecatedSetReservationListInstruction = exports.deprecatedSetReservationListInstructionDiscriminator = exports.DeprecatedSetReservationListStruct = void 0;
    var beet9 = __importStar(require_beet());
    var web3 = __importStar((init_index_browser_esm(), __toCommonJS(index_browser_esm_exports)));
    exports.DeprecatedSetReservationListStruct = new beet9.BeetArgsStruct([["instructionDiscriminator", beet9.u8]], "DeprecatedSetReservationListInstructionArgs");
    exports.deprecatedSetReservationListInstructionDiscriminator = 5;
    function createDeprecatedSetReservationListInstruction(accounts, programId = new web3.PublicKey("metaqbxxUerdq28cj1RbAWkYQm3ybzjb6a8bt518x1s")) {
      const [data] = exports.DeprecatedSetReservationListStruct.serialize({
        instructionDiscriminator: exports.deprecatedSetReservationListInstructionDiscriminator
      });
      const keys = [
        {
          pubkey: accounts.masterEdition,
          isWritable: true,
          isSigner: false
        },
        {
          pubkey: accounts.reservationList,
          isWritable: true,
          isSigner: false
        },
        {
          pubkey: accounts.resource,
          isWritable: false,
          isSigner: true
        }
      ];
      const ix = new web3.TransactionInstruction({
        programId,
        keys,
        data
      });
      return ix;
    }
    exports.createDeprecatedSetReservationListInstruction = createDeprecatedSetReservationListInstruction;
  }
});

// ../../node_modules/@metaplex-foundation/mpl-token-metadata/dist/src/generated/instructions/FreezeDelegatedAccount.js
var require_FreezeDelegatedAccount = __commonJS({
  "../../node_modules/@metaplex-foundation/mpl-token-metadata/dist/src/generated/instructions/FreezeDelegatedAccount.js"(exports) {
    "use strict";
    var __createBinding = exports && exports.__createBinding || (Object.create ? function(o2, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      var desc = Object.getOwnPropertyDescriptor(m, k);
      if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m[k];
        } };
      }
      Object.defineProperty(o2, k2, desc);
    } : function(o2, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      o2[k2] = m[k];
    });
    var __setModuleDefault = exports && exports.__setModuleDefault || (Object.create ? function(o2, v) {
      Object.defineProperty(o2, "default", { enumerable: true, value: v });
    } : function(o2, v) {
      o2["default"] = v;
    });
    var __importStar = exports && exports.__importStar || function(mod) {
      if (mod && mod.__esModule)
        return mod;
      var result = {};
      if (mod != null) {
        for (var k in mod)
          if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k))
            __createBinding(result, mod, k);
      }
      __setModuleDefault(result, mod);
      return result;
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.createFreezeDelegatedAccountInstruction = exports.freezeDelegatedAccountInstructionDiscriminator = exports.FreezeDelegatedAccountStruct = void 0;
    var splToken = __importStar(require_cjs4());
    var beet9 = __importStar(require_beet());
    var web3 = __importStar((init_index_browser_esm(), __toCommonJS(index_browser_esm_exports)));
    exports.FreezeDelegatedAccountStruct = new beet9.BeetArgsStruct([["instructionDiscriminator", beet9.u8]], "FreezeDelegatedAccountInstructionArgs");
    exports.freezeDelegatedAccountInstructionDiscriminator = 26;
    function createFreezeDelegatedAccountInstruction2(accounts, programId = new web3.PublicKey("metaqbxxUerdq28cj1RbAWkYQm3ybzjb6a8bt518x1s")) {
      var _a;
      const [data] = exports.FreezeDelegatedAccountStruct.serialize({
        instructionDiscriminator: exports.freezeDelegatedAccountInstructionDiscriminator
      });
      const keys = [
        {
          pubkey: accounts.delegate,
          isWritable: true,
          isSigner: true
        },
        {
          pubkey: accounts.tokenAccount,
          isWritable: true,
          isSigner: false
        },
        {
          pubkey: accounts.edition,
          isWritable: false,
          isSigner: false
        },
        {
          pubkey: accounts.mint,
          isWritable: false,
          isSigner: false
        },
        {
          pubkey: (_a = accounts.tokenProgram) !== null && _a !== void 0 ? _a : splToken.TOKEN_PROGRAM_ID,
          isWritable: false,
          isSigner: false
        }
      ];
      const ix = new web3.TransactionInstruction({
        programId,
        keys,
        data
      });
      return ix;
    }
    exports.createFreezeDelegatedAccountInstruction = createFreezeDelegatedAccountInstruction2;
  }
});

// ../../node_modules/@metaplex-foundation/mpl-token-metadata/dist/src/generated/types/LockArgs.js
var require_LockArgs = __commonJS({
  "../../node_modules/@metaplex-foundation/mpl-token-metadata/dist/src/generated/types/LockArgs.js"(exports) {
    "use strict";
    var __createBinding = exports && exports.__createBinding || (Object.create ? function(o2, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      var desc = Object.getOwnPropertyDescriptor(m, k);
      if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m[k];
        } };
      }
      Object.defineProperty(o2, k2, desc);
    } : function(o2, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      o2[k2] = m[k];
    });
    var __setModuleDefault = exports && exports.__setModuleDefault || (Object.create ? function(o2, v) {
      Object.defineProperty(o2, "default", { enumerable: true, value: v });
    } : function(o2, v) {
      o2["default"] = v;
    });
    var __importStar = exports && exports.__importStar || function(mod) {
      if (mod && mod.__esModule)
        return mod;
      var result = {};
      if (mod != null) {
        for (var k in mod)
          if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k))
            __createBinding(result, mod, k);
      }
      __setModuleDefault(result, mod);
      return result;
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.lockArgsBeet = exports.isLockArgsV1 = void 0;
    var beet9 = __importStar(require_beet());
    var AuthorizationData_1 = require_AuthorizationData();
    var isLockArgsV1 = (x) => x.__kind === "V1";
    exports.isLockArgsV1 = isLockArgsV1;
    exports.lockArgsBeet = beet9.dataEnum([
      [
        "V1",
        new beet9.FixableBeetArgsStruct([["authorizationData", beet9.coption(AuthorizationData_1.authorizationDataBeet)]], 'LockArgsRecord["V1"]')
      ]
    ]);
  }
});

// ../../node_modules/@metaplex-foundation/mpl-token-metadata/dist/src/generated/instructions/Lock.js
var require_Lock = __commonJS({
  "../../node_modules/@metaplex-foundation/mpl-token-metadata/dist/src/generated/instructions/Lock.js"(exports) {
    "use strict";
    var __createBinding = exports && exports.__createBinding || (Object.create ? function(o2, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      var desc = Object.getOwnPropertyDescriptor(m, k);
      if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m[k];
        } };
      }
      Object.defineProperty(o2, k2, desc);
    } : function(o2, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      o2[k2] = m[k];
    });
    var __setModuleDefault = exports && exports.__setModuleDefault || (Object.create ? function(o2, v) {
      Object.defineProperty(o2, "default", { enumerable: true, value: v });
    } : function(o2, v) {
      o2["default"] = v;
    });
    var __importStar = exports && exports.__importStar || function(mod) {
      if (mod && mod.__esModule)
        return mod;
      var result = {};
      if (mod != null) {
        for (var k in mod)
          if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k))
            __createBinding(result, mod, k);
      }
      __setModuleDefault(result, mod);
      return result;
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.createLockInstruction = exports.lockInstructionDiscriminator = exports.LockStruct = void 0;
    var beet9 = __importStar(require_beet());
    var web3 = __importStar((init_index_browser_esm(), __toCommonJS(index_browser_esm_exports)));
    var LockArgs_1 = require_LockArgs();
    exports.LockStruct = new beet9.FixableBeetArgsStruct([
      ["instructionDiscriminator", beet9.u8],
      ["lockArgs", LockArgs_1.lockArgsBeet]
    ], "LockInstructionArgs");
    exports.lockInstructionDiscriminator = 46;
    function createLockInstruction2(accounts, args, programId = new web3.PublicKey("metaqbxxUerdq28cj1RbAWkYQm3ybzjb6a8bt518x1s")) {
      var _a, _b, _c, _d, _e, _f, _g;
      const [data] = exports.LockStruct.serialize(__spreadValues({
        instructionDiscriminator: exports.lockInstructionDiscriminator
      }, args));
      const keys = [
        {
          pubkey: accounts.authority,
          isWritable: false,
          isSigner: true
        },
        {
          pubkey: (_a = accounts.tokenOwner) !== null && _a !== void 0 ? _a : programId,
          isWritable: false,
          isSigner: false
        },
        {
          pubkey: accounts.token,
          isWritable: true,
          isSigner: false
        },
        {
          pubkey: accounts.mint,
          isWritable: false,
          isSigner: false
        },
        {
          pubkey: accounts.metadata,
          isWritable: true,
          isSigner: false
        },
        {
          pubkey: (_b = accounts.edition) !== null && _b !== void 0 ? _b : programId,
          isWritable: false,
          isSigner: false
        },
        {
          pubkey: (_c = accounts.tokenRecord) !== null && _c !== void 0 ? _c : programId,
          isWritable: accounts.tokenRecord != null,
          isSigner: false
        },
        {
          pubkey: accounts.payer,
          isWritable: true,
          isSigner: true
        },
        {
          pubkey: (_d = accounts.systemProgram) !== null && _d !== void 0 ? _d : web3.SystemProgram.programId,
          isWritable: false,
          isSigner: false
        },
        {
          pubkey: accounts.sysvarInstructions,
          isWritable: false,
          isSigner: false
        },
        {
          pubkey: (_e = accounts.splTokenProgram) !== null && _e !== void 0 ? _e : programId,
          isWritable: false,
          isSigner: false
        },
        {
          pubkey: (_f = accounts.authorizationRulesProgram) !== null && _f !== void 0 ? _f : programId,
          isWritable: false,
          isSigner: false
        },
        {
          pubkey: (_g = accounts.authorizationRules) !== null && _g !== void 0 ? _g : programId,
          isWritable: false,
          isSigner: false
        }
      ];
      const ix = new web3.TransactionInstruction({
        programId,
        keys,
        data
      });
      return ix;
    }
    exports.createLockInstruction = createLockInstruction2;
  }
});

// ../../node_modules/@metaplex-foundation/mpl-token-metadata/dist/src/generated/instructions/Migrate.js
var require_Migrate = __commonJS({
  "../../node_modules/@metaplex-foundation/mpl-token-metadata/dist/src/generated/instructions/Migrate.js"(exports) {
    "use strict";
    var __createBinding = exports && exports.__createBinding || (Object.create ? function(o2, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      var desc = Object.getOwnPropertyDescriptor(m, k);
      if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m[k];
        } };
      }
      Object.defineProperty(o2, k2, desc);
    } : function(o2, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      o2[k2] = m[k];
    });
    var __setModuleDefault = exports && exports.__setModuleDefault || (Object.create ? function(o2, v) {
      Object.defineProperty(o2, "default", { enumerable: true, value: v });
    } : function(o2, v) {
      o2["default"] = v;
    });
    var __importStar = exports && exports.__importStar || function(mod) {
      if (mod && mod.__esModule)
        return mod;
      var result = {};
      if (mod != null) {
        for (var k in mod)
          if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k))
            __createBinding(result, mod, k);
      }
      __setModuleDefault(result, mod);
      return result;
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.createMigrateInstruction = exports.migrateInstructionDiscriminator = exports.MigrateStruct = void 0;
    var beet9 = __importStar(require_beet());
    var web3 = __importStar((init_index_browser_esm(), __toCommonJS(index_browser_esm_exports)));
    exports.MigrateStruct = new beet9.BeetArgsStruct([["instructionDiscriminator", beet9.u8]], "MigrateInstructionArgs");
    exports.migrateInstructionDiscriminator = 48;
    function createMigrateInstruction(accounts, programId = new web3.PublicKey("metaqbxxUerdq28cj1RbAWkYQm3ybzjb6a8bt518x1s")) {
      var _a, _b, _c;
      const [data] = exports.MigrateStruct.serialize({
        instructionDiscriminator: exports.migrateInstructionDiscriminator
      });
      const keys = [
        {
          pubkey: accounts.metadata,
          isWritable: true,
          isSigner: false
        },
        {
          pubkey: accounts.edition,
          isWritable: true,
          isSigner: false
        },
        {
          pubkey: accounts.token,
          isWritable: true,
          isSigner: false
        },
        {
          pubkey: accounts.tokenOwner,
          isWritable: false,
          isSigner: false
        },
        {
          pubkey: accounts.mint,
          isWritable: false,
          isSigner: false
        },
        {
          pubkey: accounts.payer,
          isWritable: true,
          isSigner: true
        },
        {
          pubkey: accounts.authority,
          isWritable: false,
          isSigner: true
        },
        {
          pubkey: accounts.collectionMetadata,
          isWritable: false,
          isSigner: false
        },
        {
          pubkey: accounts.delegateRecord,
          isWritable: false,
          isSigner: false
        },
        {
          pubkey: accounts.tokenRecord,
          isWritable: true,
          isSigner: false
        },
        {
          pubkey: (_a = accounts.systemProgram) !== null && _a !== void 0 ? _a : web3.SystemProgram.programId,
          isWritable: false,
          isSigner: false
        },
        {
          pubkey: accounts.sysvarInstructions,
          isWritable: false,
          isSigner: false
        },
        {
          pubkey: accounts.splTokenProgram,
          isWritable: false,
          isSigner: false
        },
        {
          pubkey: (_b = accounts.authorizationRulesProgram) !== null && _b !== void 0 ? _b : programId,
          isWritable: false,
          isSigner: false
        },
        {
          pubkey: (_c = accounts.authorizationRules) !== null && _c !== void 0 ? _c : programId,
          isWritable: false,
          isSigner: false
        }
      ];
      const ix = new web3.TransactionInstruction({
        programId,
        keys,
        data
      });
      return ix;
    }
    exports.createMigrateInstruction = createMigrateInstruction;
  }
});

// ../../node_modules/@metaplex-foundation/mpl-token-metadata/dist/src/generated/types/MintArgs.js
var require_MintArgs = __commonJS({
  "../../node_modules/@metaplex-foundation/mpl-token-metadata/dist/src/generated/types/MintArgs.js"(exports) {
    "use strict";
    var __createBinding = exports && exports.__createBinding || (Object.create ? function(o2, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      var desc = Object.getOwnPropertyDescriptor(m, k);
      if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m[k];
        } };
      }
      Object.defineProperty(o2, k2, desc);
    } : function(o2, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      o2[k2] = m[k];
    });
    var __setModuleDefault = exports && exports.__setModuleDefault || (Object.create ? function(o2, v) {
      Object.defineProperty(o2, "default", { enumerable: true, value: v });
    } : function(o2, v) {
      o2["default"] = v;
    });
    var __importStar = exports && exports.__importStar || function(mod) {
      if (mod && mod.__esModule)
        return mod;
      var result = {};
      if (mod != null) {
        for (var k in mod)
          if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k))
            __createBinding(result, mod, k);
      }
      __setModuleDefault(result, mod);
      return result;
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.mintArgsBeet = exports.isMintArgsV1 = void 0;
    var beet9 = __importStar(require_beet());
    var AuthorizationData_1 = require_AuthorizationData();
    var isMintArgsV1 = (x) => x.__kind === "V1";
    exports.isMintArgsV1 = isMintArgsV1;
    exports.mintArgsBeet = beet9.dataEnum([
      [
        "V1",
        new beet9.FixableBeetArgsStruct([
          ["amount", beet9.u64],
          ["authorizationData", beet9.coption(AuthorizationData_1.authorizationDataBeet)]
        ], 'MintArgsRecord["V1"]')
      ]
    ]);
  }
});

// ../../node_modules/@metaplex-foundation/mpl-token-metadata/dist/src/generated/instructions/Mint.js
var require_Mint = __commonJS({
  "../../node_modules/@metaplex-foundation/mpl-token-metadata/dist/src/generated/instructions/Mint.js"(exports) {
    "use strict";
    var __createBinding = exports && exports.__createBinding || (Object.create ? function(o2, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      var desc = Object.getOwnPropertyDescriptor(m, k);
      if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m[k];
        } };
      }
      Object.defineProperty(o2, k2, desc);
    } : function(o2, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      o2[k2] = m[k];
    });
    var __setModuleDefault = exports && exports.__setModuleDefault || (Object.create ? function(o2, v) {
      Object.defineProperty(o2, "default", { enumerable: true, value: v });
    } : function(o2, v) {
      o2["default"] = v;
    });
    var __importStar = exports && exports.__importStar || function(mod) {
      if (mod && mod.__esModule)
        return mod;
      var result = {};
      if (mod != null) {
        for (var k in mod)
          if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k))
            __createBinding(result, mod, k);
      }
      __setModuleDefault(result, mod);
      return result;
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.createMintInstruction = exports.mintInstructionDiscriminator = exports.MintStruct = void 0;
    var beet9 = __importStar(require_beet());
    var web3 = __importStar((init_index_browser_esm(), __toCommonJS(index_browser_esm_exports)));
    var MintArgs_1 = require_MintArgs();
    exports.MintStruct = new beet9.FixableBeetArgsStruct([
      ["instructionDiscriminator", beet9.u8],
      ["mintArgs", MintArgs_1.mintArgsBeet]
    ], "MintInstructionArgs");
    exports.mintInstructionDiscriminator = 43;
    function createMintInstruction3(accounts, args, programId = new web3.PublicKey("metaqbxxUerdq28cj1RbAWkYQm3ybzjb6a8bt518x1s")) {
      var _a, _b, _c, _d, _e, _f, _g;
      const [data] = exports.MintStruct.serialize(__spreadValues({
        instructionDiscriminator: exports.mintInstructionDiscriminator
      }, args));
      const keys = [
        {
          pubkey: accounts.token,
          isWritable: true,
          isSigner: false
        },
        {
          pubkey: (_a = accounts.tokenOwner) !== null && _a !== void 0 ? _a : programId,
          isWritable: false,
          isSigner: false
        },
        {
          pubkey: accounts.metadata,
          isWritable: false,
          isSigner: false
        },
        {
          pubkey: (_b = accounts.masterEdition) !== null && _b !== void 0 ? _b : programId,
          isWritable: accounts.masterEdition != null,
          isSigner: false
        },
        {
          pubkey: (_c = accounts.tokenRecord) !== null && _c !== void 0 ? _c : programId,
          isWritable: accounts.tokenRecord != null,
          isSigner: false
        },
        {
          pubkey: accounts.mint,
          isWritable: true,
          isSigner: false
        },
        {
          pubkey: accounts.authority,
          isWritable: false,
          isSigner: true
        },
        {
          pubkey: (_d = accounts.delegateRecord) !== null && _d !== void 0 ? _d : programId,
          isWritable: false,
          isSigner: false
        },
        {
          pubkey: accounts.payer,
          isWritable: true,
          isSigner: true
        },
        {
          pubkey: (_e = accounts.systemProgram) !== null && _e !== void 0 ? _e : web3.SystemProgram.programId,
          isWritable: false,
          isSigner: false
        },
        {
          pubkey: accounts.sysvarInstructions,
          isWritable: false,
          isSigner: false
        },
        {
          pubkey: accounts.splTokenProgram,
          isWritable: false,
          isSigner: false
        },
        {
          pubkey: accounts.splAtaProgram,
          isWritable: false,
          isSigner: false
        },
        {
          pubkey: (_f = accounts.authorizationRulesProgram) !== null && _f !== void 0 ? _f : programId,
          isWritable: false,
          isSigner: false
        },
        {
          pubkey: (_g = accounts.authorizationRules) !== null && _g !== void 0 ? _g : programId,
          isWritable: false,
          isSigner: false
        }
      ];
      const ix = new web3.TransactionInstruction({
        programId,
        keys,
        data
      });
      return ix;
    }
    exports.createMintInstruction = createMintInstruction3;
  }
});

// ../../node_modules/@metaplex-foundation/mpl-token-metadata/dist/src/generated/types/MintNewEditionFromMasterEditionViaTokenArgs.js
var require_MintNewEditionFromMasterEditionViaTokenArgs = __commonJS({
  "../../node_modules/@metaplex-foundation/mpl-token-metadata/dist/src/generated/types/MintNewEditionFromMasterEditionViaTokenArgs.js"(exports) {
    "use strict";
    var __createBinding = exports && exports.__createBinding || (Object.create ? function(o2, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      var desc = Object.getOwnPropertyDescriptor(m, k);
      if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m[k];
        } };
      }
      Object.defineProperty(o2, k2, desc);
    } : function(o2, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      o2[k2] = m[k];
    });
    var __setModuleDefault = exports && exports.__setModuleDefault || (Object.create ? function(o2, v) {
      Object.defineProperty(o2, "default", { enumerable: true, value: v });
    } : function(o2, v) {
      o2["default"] = v;
    });
    var __importStar = exports && exports.__importStar || function(mod) {
      if (mod && mod.__esModule)
        return mod;
      var result = {};
      if (mod != null) {
        for (var k in mod)
          if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k))
            __createBinding(result, mod, k);
      }
      __setModuleDefault(result, mod);
      return result;
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.mintNewEditionFromMasterEditionViaTokenArgsBeet = void 0;
    var beet9 = __importStar(require_beet());
    exports.mintNewEditionFromMasterEditionViaTokenArgsBeet = new beet9.BeetArgsStruct([["edition", beet9.u64]], "MintNewEditionFromMasterEditionViaTokenArgs");
  }
});

// ../../node_modules/@metaplex-foundation/mpl-token-metadata/dist/src/generated/instructions/MintNewEditionFromMasterEditionViaToken.js
var require_MintNewEditionFromMasterEditionViaToken = __commonJS({
  "../../node_modules/@metaplex-foundation/mpl-token-metadata/dist/src/generated/instructions/MintNewEditionFromMasterEditionViaToken.js"(exports) {
    "use strict";
    var __createBinding = exports && exports.__createBinding || (Object.create ? function(o2, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      var desc = Object.getOwnPropertyDescriptor(m, k);
      if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m[k];
        } };
      }
      Object.defineProperty(o2, k2, desc);
    } : function(o2, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      o2[k2] = m[k];
    });
    var __setModuleDefault = exports && exports.__setModuleDefault || (Object.create ? function(o2, v) {
      Object.defineProperty(o2, "default", { enumerable: true, value: v });
    } : function(o2, v) {
      o2["default"] = v;
    });
    var __importStar = exports && exports.__importStar || function(mod) {
      if (mod && mod.__esModule)
        return mod;
      var result = {};
      if (mod != null) {
        for (var k in mod)
          if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k))
            __createBinding(result, mod, k);
      }
      __setModuleDefault(result, mod);
      return result;
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.createMintNewEditionFromMasterEditionViaTokenInstruction = exports.mintNewEditionFromMasterEditionViaTokenInstructionDiscriminator = exports.MintNewEditionFromMasterEditionViaTokenStruct = void 0;
    var splToken = __importStar(require_cjs4());
    var beet9 = __importStar(require_beet());
    var web3 = __importStar((init_index_browser_esm(), __toCommonJS(index_browser_esm_exports)));
    var MintNewEditionFromMasterEditionViaTokenArgs_1 = require_MintNewEditionFromMasterEditionViaTokenArgs();
    exports.MintNewEditionFromMasterEditionViaTokenStruct = new beet9.BeetArgsStruct([
      ["instructionDiscriminator", beet9.u8],
      [
        "mintNewEditionFromMasterEditionViaTokenArgs",
        MintNewEditionFromMasterEditionViaTokenArgs_1.mintNewEditionFromMasterEditionViaTokenArgsBeet
      ]
    ], "MintNewEditionFromMasterEditionViaTokenInstructionArgs");
    exports.mintNewEditionFromMasterEditionViaTokenInstructionDiscriminator = 11;
    function createMintNewEditionFromMasterEditionViaTokenInstruction2(accounts, args, programId = new web3.PublicKey("metaqbxxUerdq28cj1RbAWkYQm3ybzjb6a8bt518x1s")) {
      var _a, _b;
      const [data] = exports.MintNewEditionFromMasterEditionViaTokenStruct.serialize(__spreadValues({
        instructionDiscriminator: exports.mintNewEditionFromMasterEditionViaTokenInstructionDiscriminator
      }, args));
      const keys = [
        {
          pubkey: accounts.newMetadata,
          isWritable: true,
          isSigner: false
        },
        {
          pubkey: accounts.newEdition,
          isWritable: true,
          isSigner: false
        },
        {
          pubkey: accounts.masterEdition,
          isWritable: true,
          isSigner: false
        },
        {
          pubkey: accounts.newMint,
          isWritable: true,
          isSigner: false
        },
        {
          pubkey: accounts.editionMarkPda,
          isWritable: true,
          isSigner: false
        },
        {
          pubkey: accounts.newMintAuthority,
          isWritable: false,
          isSigner: true
        },
        {
          pubkey: accounts.payer,
          isWritable: true,
          isSigner: true
        },
        {
          pubkey: accounts.tokenAccountOwner,
          isWritable: false,
          isSigner: true
        },
        {
          pubkey: accounts.tokenAccount,
          isWritable: false,
          isSigner: false
        },
        {
          pubkey: accounts.newMetadataUpdateAuthority,
          isWritable: false,
          isSigner: false
        },
        {
          pubkey: accounts.metadata,
          isWritable: false,
          isSigner: false
        },
        {
          pubkey: (_a = accounts.tokenProgram) !== null && _a !== void 0 ? _a : splToken.TOKEN_PROGRAM_ID,
          isWritable: false,
          isSigner: false
        },
        {
          pubkey: (_b = accounts.systemProgram) !== null && _b !== void 0 ? _b : web3.SystemProgram.programId,
          isWritable: false,
          isSigner: false
        }
      ];
      if (accounts.rent != null) {
        keys.push({
          pubkey: accounts.rent,
          isWritable: false,
          isSigner: false
        });
      }
      const ix = new web3.TransactionInstruction({
        programId,
        keys,
        data
      });
      return ix;
    }
    exports.createMintNewEditionFromMasterEditionViaTokenInstruction = createMintNewEditionFromMasterEditionViaTokenInstruction2;
  }
});

// ../../node_modules/@metaplex-foundation/mpl-token-metadata/dist/src/generated/instructions/MintNewEditionFromMasterEditionViaVaultProxy.js
var require_MintNewEditionFromMasterEditionViaVaultProxy = __commonJS({
  "../../node_modules/@metaplex-foundation/mpl-token-metadata/dist/src/generated/instructions/MintNewEditionFromMasterEditionViaVaultProxy.js"(exports) {
    "use strict";
    var __createBinding = exports && exports.__createBinding || (Object.create ? function(o2, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      var desc = Object.getOwnPropertyDescriptor(m, k);
      if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m[k];
        } };
      }
      Object.defineProperty(o2, k2, desc);
    } : function(o2, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      o2[k2] = m[k];
    });
    var __setModuleDefault = exports && exports.__setModuleDefault || (Object.create ? function(o2, v) {
      Object.defineProperty(o2, "default", { enumerable: true, value: v });
    } : function(o2, v) {
      o2["default"] = v;
    });
    var __importStar = exports && exports.__importStar || function(mod) {
      if (mod && mod.__esModule)
        return mod;
      var result = {};
      if (mod != null) {
        for (var k in mod)
          if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k))
            __createBinding(result, mod, k);
      }
      __setModuleDefault(result, mod);
      return result;
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.createMintNewEditionFromMasterEditionViaVaultProxyInstruction = exports.mintNewEditionFromMasterEditionViaVaultProxyInstructionDiscriminator = exports.MintNewEditionFromMasterEditionViaVaultProxyStruct = void 0;
    var splToken = __importStar(require_cjs4());
    var beet9 = __importStar(require_beet());
    var web3 = __importStar((init_index_browser_esm(), __toCommonJS(index_browser_esm_exports)));
    var MintNewEditionFromMasterEditionViaTokenArgs_1 = require_MintNewEditionFromMasterEditionViaTokenArgs();
    exports.MintNewEditionFromMasterEditionViaVaultProxyStruct = new beet9.BeetArgsStruct([
      ["instructionDiscriminator", beet9.u8],
      [
        "mintNewEditionFromMasterEditionViaTokenArgs",
        MintNewEditionFromMasterEditionViaTokenArgs_1.mintNewEditionFromMasterEditionViaTokenArgsBeet
      ]
    ], "MintNewEditionFromMasterEditionViaVaultProxyInstructionArgs");
    exports.mintNewEditionFromMasterEditionViaVaultProxyInstructionDiscriminator = 13;
    function createMintNewEditionFromMasterEditionViaVaultProxyInstruction(accounts, args, programId = new web3.PublicKey("metaqbxxUerdq28cj1RbAWkYQm3ybzjb6a8bt518x1s")) {
      var _a, _b;
      const [data] = exports.MintNewEditionFromMasterEditionViaVaultProxyStruct.serialize(__spreadValues({
        instructionDiscriminator: exports.mintNewEditionFromMasterEditionViaVaultProxyInstructionDiscriminator
      }, args));
      const keys = [
        {
          pubkey: accounts.newMetadata,
          isWritable: true,
          isSigner: false
        },
        {
          pubkey: accounts.newEdition,
          isWritable: true,
          isSigner: false
        },
        {
          pubkey: accounts.masterEdition,
          isWritable: true,
          isSigner: false
        },
        {
          pubkey: accounts.newMint,
          isWritable: true,
          isSigner: false
        },
        {
          pubkey: accounts.editionMarkPda,
          isWritable: true,
          isSigner: false
        },
        {
          pubkey: accounts.newMintAuthority,
          isWritable: false,
          isSigner: true
        },
        {
          pubkey: accounts.payer,
          isWritable: true,
          isSigner: true
        },
        {
          pubkey: accounts.vaultAuthority,
          isWritable: false,
          isSigner: true
        },
        {
          pubkey: accounts.safetyDepositStore,
          isWritable: false,
          isSigner: false
        },
        {
          pubkey: accounts.safetyDepositBox,
          isWritable: false,
          isSigner: false
        },
        {
          pubkey: accounts.vault,
          isWritable: false,
          isSigner: false
        },
        {
          pubkey: accounts.newMetadataUpdateAuthority,
          isWritable: false,
          isSigner: false
        },
        {
          pubkey: accounts.metadata,
          isWritable: false,
          isSigner: false
        },
        {
          pubkey: (_a = accounts.tokenProgram) !== null && _a !== void 0 ? _a : splToken.TOKEN_PROGRAM_ID,
          isWritable: false,
          isSigner: false
        },
        {
          pubkey: accounts.tokenVaultProgram,
          isWritable: false,
          isSigner: false
        },
        {
          pubkey: (_b = accounts.systemProgram) !== null && _b !== void 0 ? _b : web3.SystemProgram.programId,
          isWritable: false,
          isSigner: false
        }
      ];
      if (accounts.rent != null) {
        keys.push({
          pubkey: accounts.rent,
          isWritable: false,
          isSigner: false
        });
      }
      const ix = new web3.TransactionInstruction({
        programId,
        keys,
        data
      });
      return ix;
    }
    exports.createMintNewEditionFromMasterEditionViaVaultProxyInstruction = createMintNewEditionFromMasterEditionViaVaultProxyInstruction;
  }
});

// ../../node_modules/@metaplex-foundation/mpl-token-metadata/dist/src/generated/types/PrintArgs.js
var require_PrintArgs = __commonJS({
  "../../node_modules/@metaplex-foundation/mpl-token-metadata/dist/src/generated/types/PrintArgs.js"(exports) {
    "use strict";
    var __createBinding = exports && exports.__createBinding || (Object.create ? function(o2, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      var desc = Object.getOwnPropertyDescriptor(m, k);
      if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m[k];
        } };
      }
      Object.defineProperty(o2, k2, desc);
    } : function(o2, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      o2[k2] = m[k];
    });
    var __setModuleDefault = exports && exports.__setModuleDefault || (Object.create ? function(o2, v) {
      Object.defineProperty(o2, "default", { enumerable: true, value: v });
    } : function(o2, v) {
      o2["default"] = v;
    });
    var __importStar = exports && exports.__importStar || function(mod) {
      if (mod && mod.__esModule)
        return mod;
      var result = {};
      if (mod != null) {
        for (var k in mod)
          if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k))
            __createBinding(result, mod, k);
      }
      __setModuleDefault(result, mod);
      return result;
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.printArgsBeet = exports.isPrintArgsV1 = void 0;
    var beet9 = __importStar(require_beet());
    var isPrintArgsV1 = (x) => x.__kind === "V1";
    exports.isPrintArgsV1 = isPrintArgsV1;
    exports.printArgsBeet = beet9.dataEnum([
      [
        "V1",
        new beet9.BeetArgsStruct([["edition", beet9.u64]], 'PrintArgsRecord["V1"]')
      ]
    ]);
  }
});

// ../../node_modules/@metaplex-foundation/mpl-token-metadata/dist/src/generated/instructions/Print.js
var require_Print = __commonJS({
  "../../node_modules/@metaplex-foundation/mpl-token-metadata/dist/src/generated/instructions/Print.js"(exports) {
    "use strict";
    var __createBinding = exports && exports.__createBinding || (Object.create ? function(o2, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      var desc = Object.getOwnPropertyDescriptor(m, k);
      if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m[k];
        } };
      }
      Object.defineProperty(o2, k2, desc);
    } : function(o2, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      o2[k2] = m[k];
    });
    var __setModuleDefault = exports && exports.__setModuleDefault || (Object.create ? function(o2, v) {
      Object.defineProperty(o2, "default", { enumerable: true, value: v });
    } : function(o2, v) {
      o2["default"] = v;
    });
    var __importStar = exports && exports.__importStar || function(mod) {
      if (mod && mod.__esModule)
        return mod;
      var result = {};
      if (mod != null) {
        for (var k in mod)
          if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k))
            __createBinding(result, mod, k);
      }
      __setModuleDefault(result, mod);
      return result;
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.createPrintInstruction = exports.printInstructionDiscriminator = exports.PrintStruct = void 0;
    var beet9 = __importStar(require_beet());
    var web3 = __importStar((init_index_browser_esm(), __toCommonJS(index_browser_esm_exports)));
    var PrintArgs_1 = require_PrintArgs();
    exports.PrintStruct = new beet9.FixableBeetArgsStruct([
      ["instructionDiscriminator", beet9.u8],
      ["printArgs", PrintArgs_1.printArgsBeet]
    ], "PrintInstructionArgs");
    exports.printInstructionDiscriminator = 55;
    function createPrintInstruction(accounts, args, programId = new web3.PublicKey("metaqbxxUerdq28cj1RbAWkYQm3ybzjb6a8bt518x1s")) {
      var _a, _b;
      const [data] = exports.PrintStruct.serialize(__spreadValues({
        instructionDiscriminator: exports.printInstructionDiscriminator
      }, args));
      const keys = [
        {
          pubkey: accounts.editionMetadata,
          isWritable: true,
          isSigner: false
        },
        {
          pubkey: accounts.edition,
          isWritable: true,
          isSigner: false
        },
        {
          pubkey: accounts.editionMint,
          isWritable: true,
          isSigner: false
        },
        {
          pubkey: accounts.editionTokenAccountOwner,
          isWritable: false,
          isSigner: false
        },
        {
          pubkey: accounts.editionTokenAccount,
          isWritable: true,
          isSigner: false
        },
        {
          pubkey: accounts.editionMintAuthority,
          isWritable: false,
          isSigner: true
        },
        {
          pubkey: (_a = accounts.editionTokenRecord) !== null && _a !== void 0 ? _a : programId,
          isWritable: accounts.editionTokenRecord != null,
          isSigner: false
        },
        {
          pubkey: accounts.masterEdition,
          isWritable: true,
          isSigner: false
        },
        {
          pubkey: accounts.editionMarkerPda,
          isWritable: true,
          isSigner: false
        },
        {
          pubkey: accounts.payer,
          isWritable: true,
          isSigner: true
        },
        {
          pubkey: accounts.masterTokenAccountOwner,
          isWritable: false,
          isSigner: true
        },
        {
          pubkey: accounts.masterTokenAccount,
          isWritable: false,
          isSigner: false
        },
        {
          pubkey: accounts.masterMetadata,
          isWritable: false,
          isSigner: false
        },
        {
          pubkey: accounts.updateAuthority,
          isWritable: false,
          isSigner: false
        },
        {
          pubkey: accounts.splTokenProgram,
          isWritable: false,
          isSigner: false
        },
        {
          pubkey: accounts.splAtaProgram,
          isWritable: false,
          isSigner: false
        },
        {
          pubkey: accounts.sysvarInstructions,
          isWritable: false,
          isSigner: false
        },
        {
          pubkey: (_b = accounts.systemProgram) !== null && _b !== void 0 ? _b : web3.SystemProgram.programId,
          isWritable: false,
          isSigner: false
        }
      ];
      const ix = new web3.TransactionInstruction({
        programId,
        keys,
        data
      });
      return ix;
    }
    exports.createPrintInstruction = createPrintInstruction;
  }
});

// ../../node_modules/@metaplex-foundation/mpl-token-metadata/dist/src/generated/instructions/PuffMetadata.js
var require_PuffMetadata = __commonJS({
  "../../node_modules/@metaplex-foundation/mpl-token-metadata/dist/src/generated/instructions/PuffMetadata.js"(exports) {
    "use strict";
    var __createBinding = exports && exports.__createBinding || (Object.create ? function(o2, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      var desc = Object.getOwnPropertyDescriptor(m, k);
      if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m[k];
        } };
      }
      Object.defineProperty(o2, k2, desc);
    } : function(o2, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      o2[k2] = m[k];
    });
    var __setModuleDefault = exports && exports.__setModuleDefault || (Object.create ? function(o2, v) {
      Object.defineProperty(o2, "default", { enumerable: true, value: v });
    } : function(o2, v) {
      o2["default"] = v;
    });
    var __importStar = exports && exports.__importStar || function(mod) {
      if (mod && mod.__esModule)
        return mod;
      var result = {};
      if (mod != null) {
        for (var k in mod)
          if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k))
            __createBinding(result, mod, k);
      }
      __setModuleDefault(result, mod);
      return result;
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.createPuffMetadataInstruction = exports.puffMetadataInstructionDiscriminator = exports.PuffMetadataStruct = void 0;
    var beet9 = __importStar(require_beet());
    var web3 = __importStar((init_index_browser_esm(), __toCommonJS(index_browser_esm_exports)));
    exports.PuffMetadataStruct = new beet9.BeetArgsStruct([["instructionDiscriminator", beet9.u8]], "PuffMetadataInstructionArgs");
    exports.puffMetadataInstructionDiscriminator = 14;
    function createPuffMetadataInstruction(accounts, programId = new web3.PublicKey("metaqbxxUerdq28cj1RbAWkYQm3ybzjb6a8bt518x1s")) {
      const [data] = exports.PuffMetadataStruct.serialize({
        instructionDiscriminator: exports.puffMetadataInstructionDiscriminator
      });
      const keys = [
        {
          pubkey: accounts.metadata,
          isWritable: true,
          isSigner: false
        }
      ];
      const ix = new web3.TransactionInstruction({
        programId,
        keys,
        data
      });
      return ix;
    }
    exports.createPuffMetadataInstruction = createPuffMetadataInstruction;
  }
});

// ../../node_modules/@metaplex-foundation/mpl-token-metadata/dist/src/generated/instructions/RemoveCreatorVerification.js
var require_RemoveCreatorVerification = __commonJS({
  "../../node_modules/@metaplex-foundation/mpl-token-metadata/dist/src/generated/instructions/RemoveCreatorVerification.js"(exports) {
    "use strict";
    var __createBinding = exports && exports.__createBinding || (Object.create ? function(o2, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      var desc = Object.getOwnPropertyDescriptor(m, k);
      if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m[k];
        } };
      }
      Object.defineProperty(o2, k2, desc);
    } : function(o2, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      o2[k2] = m[k];
    });
    var __setModuleDefault = exports && exports.__setModuleDefault || (Object.create ? function(o2, v) {
      Object.defineProperty(o2, "default", { enumerable: true, value: v });
    } : function(o2, v) {
      o2["default"] = v;
    });
    var __importStar = exports && exports.__importStar || function(mod) {
      if (mod && mod.__esModule)
        return mod;
      var result = {};
      if (mod != null) {
        for (var k in mod)
          if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k))
            __createBinding(result, mod, k);
      }
      __setModuleDefault(result, mod);
      return result;
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.createRemoveCreatorVerificationInstruction = exports.removeCreatorVerificationInstructionDiscriminator = exports.RemoveCreatorVerificationStruct = void 0;
    var beet9 = __importStar(require_beet());
    var web3 = __importStar((init_index_browser_esm(), __toCommonJS(index_browser_esm_exports)));
    exports.RemoveCreatorVerificationStruct = new beet9.BeetArgsStruct([["instructionDiscriminator", beet9.u8]], "RemoveCreatorVerificationInstructionArgs");
    exports.removeCreatorVerificationInstructionDiscriminator = 28;
    function createRemoveCreatorVerificationInstruction(accounts, programId = new web3.PublicKey("metaqbxxUerdq28cj1RbAWkYQm3ybzjb6a8bt518x1s")) {
      const [data] = exports.RemoveCreatorVerificationStruct.serialize({
        instructionDiscriminator: exports.removeCreatorVerificationInstructionDiscriminator
      });
      const keys = [
        {
          pubkey: accounts.metadata,
          isWritable: true,
          isSigner: false
        },
        {
          pubkey: accounts.creator,
          isWritable: false,
          isSigner: true
        }
      ];
      const ix = new web3.TransactionInstruction({
        programId,
        keys,
        data
      });
      return ix;
    }
    exports.createRemoveCreatorVerificationInstruction = createRemoveCreatorVerificationInstruction;
  }
});

// ../../node_modules/@metaplex-foundation/mpl-token-metadata/dist/src/generated/types/RevokeArgs.js
var require_RevokeArgs = __commonJS({
  "../../node_modules/@metaplex-foundation/mpl-token-metadata/dist/src/generated/types/RevokeArgs.js"(exports) {
    "use strict";
    var __createBinding = exports && exports.__createBinding || (Object.create ? function(o2, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      var desc = Object.getOwnPropertyDescriptor(m, k);
      if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m[k];
        } };
      }
      Object.defineProperty(o2, k2, desc);
    } : function(o2, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      o2[k2] = m[k];
    });
    var __setModuleDefault = exports && exports.__setModuleDefault || (Object.create ? function(o2, v) {
      Object.defineProperty(o2, "default", { enumerable: true, value: v });
    } : function(o2, v) {
      o2["default"] = v;
    });
    var __importStar = exports && exports.__importStar || function(mod) {
      if (mod && mod.__esModule)
        return mod;
      var result = {};
      if (mod != null) {
        for (var k in mod)
          if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k))
            __createBinding(result, mod, k);
      }
      __setModuleDefault(result, mod);
      return result;
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.revokeArgsBeet = exports.RevokeArgs = void 0;
    var beet9 = __importStar(require_beet());
    var RevokeArgs2;
    (function(RevokeArgs3) {
      RevokeArgs3[RevokeArgs3["CollectionV1"] = 0] = "CollectionV1";
      RevokeArgs3[RevokeArgs3["SaleV1"] = 1] = "SaleV1";
      RevokeArgs3[RevokeArgs3["TransferV1"] = 2] = "TransferV1";
      RevokeArgs3[RevokeArgs3["DataV1"] = 3] = "DataV1";
      RevokeArgs3[RevokeArgs3["UtilityV1"] = 4] = "UtilityV1";
      RevokeArgs3[RevokeArgs3["StakingV1"] = 5] = "StakingV1";
      RevokeArgs3[RevokeArgs3["StandardV1"] = 6] = "StandardV1";
      RevokeArgs3[RevokeArgs3["LockedTransferV1"] = 7] = "LockedTransferV1";
      RevokeArgs3[RevokeArgs3["ProgrammableConfigV1"] = 8] = "ProgrammableConfigV1";
      RevokeArgs3[RevokeArgs3["MigrationV1"] = 9] = "MigrationV1";
      RevokeArgs3[RevokeArgs3["AuthorityItemV1"] = 10] = "AuthorityItemV1";
      RevokeArgs3[RevokeArgs3["DataItemV1"] = 11] = "DataItemV1";
      RevokeArgs3[RevokeArgs3["CollectionItemV1"] = 12] = "CollectionItemV1";
      RevokeArgs3[RevokeArgs3["ProgrammableConfigItemV1"] = 13] = "ProgrammableConfigItemV1";
    })(RevokeArgs2 = exports.RevokeArgs || (exports.RevokeArgs = {}));
    exports.revokeArgsBeet = beet9.fixedScalarEnum(RevokeArgs2);
  }
});

// ../../node_modules/@metaplex-foundation/mpl-token-metadata/dist/src/generated/instructions/Revoke.js
var require_Revoke = __commonJS({
  "../../node_modules/@metaplex-foundation/mpl-token-metadata/dist/src/generated/instructions/Revoke.js"(exports) {
    "use strict";
    var __createBinding = exports && exports.__createBinding || (Object.create ? function(o2, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      var desc = Object.getOwnPropertyDescriptor(m, k);
      if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m[k];
        } };
      }
      Object.defineProperty(o2, k2, desc);
    } : function(o2, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      o2[k2] = m[k];
    });
    var __setModuleDefault = exports && exports.__setModuleDefault || (Object.create ? function(o2, v) {
      Object.defineProperty(o2, "default", { enumerable: true, value: v });
    } : function(o2, v) {
      o2["default"] = v;
    });
    var __importStar = exports && exports.__importStar || function(mod) {
      if (mod && mod.__esModule)
        return mod;
      var result = {};
      if (mod != null) {
        for (var k in mod)
          if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k))
            __createBinding(result, mod, k);
      }
      __setModuleDefault(result, mod);
      return result;
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.createRevokeInstruction = exports.revokeInstructionDiscriminator = exports.RevokeStruct = void 0;
    var beet9 = __importStar(require_beet());
    var web3 = __importStar((init_index_browser_esm(), __toCommonJS(index_browser_esm_exports)));
    var RevokeArgs_1 = require_RevokeArgs();
    exports.RevokeStruct = new beet9.BeetArgsStruct([
      ["instructionDiscriminator", beet9.u8],
      ["revokeArgs", RevokeArgs_1.revokeArgsBeet]
    ], "RevokeInstructionArgs");
    exports.revokeInstructionDiscriminator = 45;
    function createRevokeInstruction3(accounts, args, programId = new web3.PublicKey("metaqbxxUerdq28cj1RbAWkYQm3ybzjb6a8bt518x1s")) {
      var _a, _b, _c, _d, _e, _f, _g, _h;
      const [data] = exports.RevokeStruct.serialize(__spreadValues({
        instructionDiscriminator: exports.revokeInstructionDiscriminator
      }, args));
      const keys = [
        {
          pubkey: (_a = accounts.delegateRecord) !== null && _a !== void 0 ? _a : programId,
          isWritable: accounts.delegateRecord != null,
          isSigner: false
        },
        {
          pubkey: accounts.delegate,
          isWritable: false,
          isSigner: false
        },
        {
          pubkey: accounts.metadata,
          isWritable: true,
          isSigner: false
        },
        {
          pubkey: (_b = accounts.masterEdition) !== null && _b !== void 0 ? _b : programId,
          isWritable: false,
          isSigner: false
        },
        {
          pubkey: (_c = accounts.tokenRecord) !== null && _c !== void 0 ? _c : programId,
          isWritable: accounts.tokenRecord != null,
          isSigner: false
        },
        {
          pubkey: accounts.mint,
          isWritable: false,
          isSigner: false
        },
        {
          pubkey: (_d = accounts.token) !== null && _d !== void 0 ? _d : programId,
          isWritable: accounts.token != null,
          isSigner: false
        },
        {
          pubkey: accounts.authority,
          isWritable: false,
          isSigner: true
        },
        {
          pubkey: accounts.payer,
          isWritable: true,
          isSigner: true
        },
        {
          pubkey: (_e = accounts.systemProgram) !== null && _e !== void 0 ? _e : web3.SystemProgram.programId,
          isWritable: false,
          isSigner: false
        },
        {
          pubkey: accounts.sysvarInstructions,
          isWritable: false,
          isSigner: false
        },
        {
          pubkey: (_f = accounts.splTokenProgram) !== null && _f !== void 0 ? _f : programId,
          isWritable: false,
          isSigner: false
        },
        {
          pubkey: (_g = accounts.authorizationRulesProgram) !== null && _g !== void 0 ? _g : programId,
          isWritable: false,
          isSigner: false
        },
        {
          pubkey: (_h = accounts.authorizationRules) !== null && _h !== void 0 ? _h : programId,
          isWritable: false,
          isSigner: false
        }
      ];
      const ix = new web3.TransactionInstruction({
        programId,
        keys,
        data
      });
      return ix;
    }
    exports.createRevokeInstruction = createRevokeInstruction3;
  }
});

// ../../node_modules/@metaplex-foundation/mpl-token-metadata/dist/src/generated/instructions/RevokeCollectionAuthority.js
var require_RevokeCollectionAuthority = __commonJS({
  "../../node_modules/@metaplex-foundation/mpl-token-metadata/dist/src/generated/instructions/RevokeCollectionAuthority.js"(exports) {
    "use strict";
    var __createBinding = exports && exports.__createBinding || (Object.create ? function(o2, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      var desc = Object.getOwnPropertyDescriptor(m, k);
      if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m[k];
        } };
      }
      Object.defineProperty(o2, k2, desc);
    } : function(o2, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      o2[k2] = m[k];
    });
    var __setModuleDefault = exports && exports.__setModuleDefault || (Object.create ? function(o2, v) {
      Object.defineProperty(o2, "default", { enumerable: true, value: v });
    } : function(o2, v) {
      o2["default"] = v;
    });
    var __importStar = exports && exports.__importStar || function(mod) {
      if (mod && mod.__esModule)
        return mod;
      var result = {};
      if (mod != null) {
        for (var k in mod)
          if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k))
            __createBinding(result, mod, k);
      }
      __setModuleDefault(result, mod);
      return result;
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.createRevokeCollectionAuthorityInstruction = exports.revokeCollectionAuthorityInstructionDiscriminator = exports.RevokeCollectionAuthorityStruct = void 0;
    var beet9 = __importStar(require_beet());
    var web3 = __importStar((init_index_browser_esm(), __toCommonJS(index_browser_esm_exports)));
    exports.RevokeCollectionAuthorityStruct = new beet9.BeetArgsStruct([["instructionDiscriminator", beet9.u8]], "RevokeCollectionAuthorityInstructionArgs");
    exports.revokeCollectionAuthorityInstructionDiscriminator = 24;
    function createRevokeCollectionAuthorityInstruction2(accounts, programId = new web3.PublicKey("metaqbxxUerdq28cj1RbAWkYQm3ybzjb6a8bt518x1s")) {
      const [data] = exports.RevokeCollectionAuthorityStruct.serialize({
        instructionDiscriminator: exports.revokeCollectionAuthorityInstructionDiscriminator
      });
      const keys = [
        {
          pubkey: accounts.collectionAuthorityRecord,
          isWritable: true,
          isSigner: false
        },
        {
          pubkey: accounts.delegateAuthority,
          isWritable: true,
          isSigner: false
        },
        {
          pubkey: accounts.revokeAuthority,
          isWritable: true,
          isSigner: true
        },
        {
          pubkey: accounts.metadata,
          isWritable: false,
          isSigner: false
        },
        {
          pubkey: accounts.mint,
          isWritable: false,
          isSigner: false
        }
      ];
      const ix = new web3.TransactionInstruction({
        programId,
        keys,
        data
      });
      return ix;
    }
    exports.createRevokeCollectionAuthorityInstruction = createRevokeCollectionAuthorityInstruction2;
  }
});

// ../../node_modules/@metaplex-foundation/mpl-token-metadata/dist/src/generated/instructions/RevokeUseAuthority.js
var require_RevokeUseAuthority = __commonJS({
  "../../node_modules/@metaplex-foundation/mpl-token-metadata/dist/src/generated/instructions/RevokeUseAuthority.js"(exports) {
    "use strict";
    var __createBinding = exports && exports.__createBinding || (Object.create ? function(o2, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      var desc = Object.getOwnPropertyDescriptor(m, k);
      if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m[k];
        } };
      }
      Object.defineProperty(o2, k2, desc);
    } : function(o2, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      o2[k2] = m[k];
    });
    var __setModuleDefault = exports && exports.__setModuleDefault || (Object.create ? function(o2, v) {
      Object.defineProperty(o2, "default", { enumerable: true, value: v });
    } : function(o2, v) {
      o2["default"] = v;
    });
    var __importStar = exports && exports.__importStar || function(mod) {
      if (mod && mod.__esModule)
        return mod;
      var result = {};
      if (mod != null) {
        for (var k in mod)
          if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k))
            __createBinding(result, mod, k);
      }
      __setModuleDefault(result, mod);
      return result;
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.createRevokeUseAuthorityInstruction = exports.revokeUseAuthorityInstructionDiscriminator = exports.RevokeUseAuthorityStruct = void 0;
    var splToken = __importStar(require_cjs4());
    var beet9 = __importStar(require_beet());
    var web3 = __importStar((init_index_browser_esm(), __toCommonJS(index_browser_esm_exports)));
    exports.RevokeUseAuthorityStruct = new beet9.BeetArgsStruct([["instructionDiscriminator", beet9.u8]], "RevokeUseAuthorityInstructionArgs");
    exports.revokeUseAuthorityInstructionDiscriminator = 21;
    function createRevokeUseAuthorityInstruction2(accounts, programId = new web3.PublicKey("metaqbxxUerdq28cj1RbAWkYQm3ybzjb6a8bt518x1s")) {
      var _a, _b;
      const [data] = exports.RevokeUseAuthorityStruct.serialize({
        instructionDiscriminator: exports.revokeUseAuthorityInstructionDiscriminator
      });
      const keys = [
        {
          pubkey: accounts.useAuthorityRecord,
          isWritable: true,
          isSigner: false
        },
        {
          pubkey: accounts.owner,
          isWritable: true,
          isSigner: true
        },
        {
          pubkey: accounts.user,
          isWritable: false,
          isSigner: false
        },
        {
          pubkey: accounts.ownerTokenAccount,
          isWritable: true,
          isSigner: false
        },
        {
          pubkey: accounts.mint,
          isWritable: false,
          isSigner: false
        },
        {
          pubkey: accounts.metadata,
          isWritable: false,
          isSigner: false
        },
        {
          pubkey: (_a = accounts.tokenProgram) !== null && _a !== void 0 ? _a : splToken.TOKEN_PROGRAM_ID,
          isWritable: false,
          isSigner: false
        },
        {
          pubkey: (_b = accounts.systemProgram) !== null && _b !== void 0 ? _b : web3.SystemProgram.programId,
          isWritable: false,
          isSigner: false
        }
      ];
      if (accounts.rent != null) {
        keys.push({
          pubkey: accounts.rent,
          isWritable: false,
          isSigner: false
        });
      }
      const ix = new web3.TransactionInstruction({
        programId,
        keys,
        data
      });
      return ix;
    }
    exports.createRevokeUseAuthorityInstruction = createRevokeUseAuthorityInstruction2;
  }
});

// ../../node_modules/@metaplex-foundation/mpl-token-metadata/dist/src/generated/instructions/SetAndVerifyCollection.js
var require_SetAndVerifyCollection = __commonJS({
  "../../node_modules/@metaplex-foundation/mpl-token-metadata/dist/src/generated/instructions/SetAndVerifyCollection.js"(exports) {
    "use strict";
    var __createBinding = exports && exports.__createBinding || (Object.create ? function(o2, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      var desc = Object.getOwnPropertyDescriptor(m, k);
      if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m[k];
        } };
      }
      Object.defineProperty(o2, k2, desc);
    } : function(o2, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      o2[k2] = m[k];
    });
    var __setModuleDefault = exports && exports.__setModuleDefault || (Object.create ? function(o2, v) {
      Object.defineProperty(o2, "default", { enumerable: true, value: v });
    } : function(o2, v) {
      o2["default"] = v;
    });
    var __importStar = exports && exports.__importStar || function(mod) {
      if (mod && mod.__esModule)
        return mod;
      var result = {};
      if (mod != null) {
        for (var k in mod)
          if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k))
            __createBinding(result, mod, k);
      }
      __setModuleDefault(result, mod);
      return result;
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.createSetAndVerifyCollectionInstruction = exports.setAndVerifyCollectionInstructionDiscriminator = exports.SetAndVerifyCollectionStruct = void 0;
    var beet9 = __importStar(require_beet());
    var web3 = __importStar((init_index_browser_esm(), __toCommonJS(index_browser_esm_exports)));
    exports.SetAndVerifyCollectionStruct = new beet9.BeetArgsStruct([["instructionDiscriminator", beet9.u8]], "SetAndVerifyCollectionInstructionArgs");
    exports.setAndVerifyCollectionInstructionDiscriminator = 25;
    function createSetAndVerifyCollectionInstruction(accounts, programId = new web3.PublicKey("metaqbxxUerdq28cj1RbAWkYQm3ybzjb6a8bt518x1s")) {
      const [data] = exports.SetAndVerifyCollectionStruct.serialize({
        instructionDiscriminator: exports.setAndVerifyCollectionInstructionDiscriminator
      });
      const keys = [
        {
          pubkey: accounts.metadata,
          isWritable: true,
          isSigner: false
        },
        {
          pubkey: accounts.collectionAuthority,
          isWritable: true,
          isSigner: true
        },
        {
          pubkey: accounts.payer,
          isWritable: true,
          isSigner: true
        },
        {
          pubkey: accounts.updateAuthority,
          isWritable: false,
          isSigner: false
        },
        {
          pubkey: accounts.collectionMint,
          isWritable: false,
          isSigner: false
        },
        {
          pubkey: accounts.collection,
          isWritable: false,
          isSigner: false
        },
        {
          pubkey: accounts.collectionMasterEditionAccount,
          isWritable: false,
          isSigner: false
        }
      ];
      if (accounts.collectionAuthorityRecord != null) {
        keys.push({
          pubkey: accounts.collectionAuthorityRecord,
          isWritable: false,
          isSigner: false
        });
      }
      const ix = new web3.TransactionInstruction({
        programId,
        keys,
        data
      });
      return ix;
    }
    exports.createSetAndVerifyCollectionInstruction = createSetAndVerifyCollectionInstruction;
  }
});

// ../../node_modules/@metaplex-foundation/mpl-token-metadata/dist/src/generated/instructions/SetAndVerifySizedCollectionItem.js
var require_SetAndVerifySizedCollectionItem = __commonJS({
  "../../node_modules/@metaplex-foundation/mpl-token-metadata/dist/src/generated/instructions/SetAndVerifySizedCollectionItem.js"(exports) {
    "use strict";
    var __createBinding = exports && exports.__createBinding || (Object.create ? function(o2, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      var desc = Object.getOwnPropertyDescriptor(m, k);
      if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m[k];
        } };
      }
      Object.defineProperty(o2, k2, desc);
    } : function(o2, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      o2[k2] = m[k];
    });
    var __setModuleDefault = exports && exports.__setModuleDefault || (Object.create ? function(o2, v) {
      Object.defineProperty(o2, "default", { enumerable: true, value: v });
    } : function(o2, v) {
      o2["default"] = v;
    });
    var __importStar = exports && exports.__importStar || function(mod) {
      if (mod && mod.__esModule)
        return mod;
      var result = {};
      if (mod != null) {
        for (var k in mod)
          if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k))
            __createBinding(result, mod, k);
      }
      __setModuleDefault(result, mod);
      return result;
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.createSetAndVerifySizedCollectionItemInstruction = exports.setAndVerifySizedCollectionItemInstructionDiscriminator = exports.SetAndVerifySizedCollectionItemStruct = void 0;
    var beet9 = __importStar(require_beet());
    var web3 = __importStar((init_index_browser_esm(), __toCommonJS(index_browser_esm_exports)));
    exports.SetAndVerifySizedCollectionItemStruct = new beet9.BeetArgsStruct([["instructionDiscriminator", beet9.u8]], "SetAndVerifySizedCollectionItemInstructionArgs");
    exports.setAndVerifySizedCollectionItemInstructionDiscriminator = 32;
    function createSetAndVerifySizedCollectionItemInstruction(accounts, programId = new web3.PublicKey("metaqbxxUerdq28cj1RbAWkYQm3ybzjb6a8bt518x1s")) {
      const [data] = exports.SetAndVerifySizedCollectionItemStruct.serialize({
        instructionDiscriminator: exports.setAndVerifySizedCollectionItemInstructionDiscriminator
      });
      const keys = [
        {
          pubkey: accounts.metadata,
          isWritable: true,
          isSigner: false
        },
        {
          pubkey: accounts.collectionAuthority,
          isWritable: false,
          isSigner: true
        },
        {
          pubkey: accounts.payer,
          isWritable: true,
          isSigner: true
        },
        {
          pubkey: accounts.updateAuthority,
          isWritable: false,
          isSigner: false
        },
        {
          pubkey: accounts.collectionMint,
          isWritable: false,
          isSigner: false
        },
        {
          pubkey: accounts.collection,
          isWritable: true,
          isSigner: false
        },
        {
          pubkey: accounts.collectionMasterEditionAccount,
          isWritable: true,
          isSigner: false
        }
      ];
      if (accounts.collectionAuthorityRecord != null) {
        keys.push({
          pubkey: accounts.collectionAuthorityRecord,
          isWritable: false,
          isSigner: false
        });
      }
      const ix = new web3.TransactionInstruction({
        programId,
        keys,
        data
      });
      return ix;
    }
    exports.createSetAndVerifySizedCollectionItemInstruction = createSetAndVerifySizedCollectionItemInstruction;
  }
});

// ../../node_modules/@metaplex-foundation/mpl-token-metadata/dist/src/generated/instructions/SetCollectionSize.js
var require_SetCollectionSize = __commonJS({
  "../../node_modules/@metaplex-foundation/mpl-token-metadata/dist/src/generated/instructions/SetCollectionSize.js"(exports) {
    "use strict";
    var __createBinding = exports && exports.__createBinding || (Object.create ? function(o2, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      var desc = Object.getOwnPropertyDescriptor(m, k);
      if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m[k];
        } };
      }
      Object.defineProperty(o2, k2, desc);
    } : function(o2, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      o2[k2] = m[k];
    });
    var __setModuleDefault = exports && exports.__setModuleDefault || (Object.create ? function(o2, v) {
      Object.defineProperty(o2, "default", { enumerable: true, value: v });
    } : function(o2, v) {
      o2["default"] = v;
    });
    var __importStar = exports && exports.__importStar || function(mod) {
      if (mod && mod.__esModule)
        return mod;
      var result = {};
      if (mod != null) {
        for (var k in mod)
          if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k))
            __createBinding(result, mod, k);
      }
      __setModuleDefault(result, mod);
      return result;
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.createSetCollectionSizeInstruction = exports.setCollectionSizeInstructionDiscriminator = exports.SetCollectionSizeStruct = void 0;
    var beet9 = __importStar(require_beet());
    var web3 = __importStar((init_index_browser_esm(), __toCommonJS(index_browser_esm_exports)));
    var SetCollectionSizeArgs_1 = require_SetCollectionSizeArgs();
    exports.SetCollectionSizeStruct = new beet9.BeetArgsStruct([
      ["instructionDiscriminator", beet9.u8],
      ["setCollectionSizeArgs", SetCollectionSizeArgs_1.setCollectionSizeArgsBeet]
    ], "SetCollectionSizeInstructionArgs");
    exports.setCollectionSizeInstructionDiscriminator = 34;
    function createSetCollectionSizeInstruction2(accounts, args, programId = new web3.PublicKey("metaqbxxUerdq28cj1RbAWkYQm3ybzjb6a8bt518x1s")) {
      const [data] = exports.SetCollectionSizeStruct.serialize(__spreadValues({
        instructionDiscriminator: exports.setCollectionSizeInstructionDiscriminator
      }, args));
      const keys = [
        {
          pubkey: accounts.collectionMetadata,
          isWritable: true,
          isSigner: false
        },
        {
          pubkey: accounts.collectionAuthority,
          isWritable: true,
          isSigner: true
        },
        {
          pubkey: accounts.collectionMint,
          isWritable: false,
          isSigner: false
        }
      ];
      if (accounts.collectionAuthorityRecord != null) {
        keys.push({
          pubkey: accounts.collectionAuthorityRecord,
          isWritable: false,
          isSigner: false
        });
      }
      const ix = new web3.TransactionInstruction({
        programId,
        keys,
        data
      });
      return ix;
    }
    exports.createSetCollectionSizeInstruction = createSetCollectionSizeInstruction2;
  }
});

// ../../node_modules/@metaplex-foundation/mpl-token-metadata/dist/src/generated/instructions/SetTokenStandard.js
var require_SetTokenStandard = __commonJS({
  "../../node_modules/@metaplex-foundation/mpl-token-metadata/dist/src/generated/instructions/SetTokenStandard.js"(exports) {
    "use strict";
    var __createBinding = exports && exports.__createBinding || (Object.create ? function(o2, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      var desc = Object.getOwnPropertyDescriptor(m, k);
      if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m[k];
        } };
      }
      Object.defineProperty(o2, k2, desc);
    } : function(o2, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      o2[k2] = m[k];
    });
    var __setModuleDefault = exports && exports.__setModuleDefault || (Object.create ? function(o2, v) {
      Object.defineProperty(o2, "default", { enumerable: true, value: v });
    } : function(o2, v) {
      o2["default"] = v;
    });
    var __importStar = exports && exports.__importStar || function(mod) {
      if (mod && mod.__esModule)
        return mod;
      var result = {};
      if (mod != null) {
        for (var k in mod)
          if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k))
            __createBinding(result, mod, k);
      }
      __setModuleDefault(result, mod);
      return result;
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.createSetTokenStandardInstruction = exports.setTokenStandardInstructionDiscriminator = exports.SetTokenStandardStruct = void 0;
    var beet9 = __importStar(require_beet());
    var web3 = __importStar((init_index_browser_esm(), __toCommonJS(index_browser_esm_exports)));
    exports.SetTokenStandardStruct = new beet9.BeetArgsStruct([["instructionDiscriminator", beet9.u8]], "SetTokenStandardInstructionArgs");
    exports.setTokenStandardInstructionDiscriminator = 35;
    function createSetTokenStandardInstruction(accounts, programId = new web3.PublicKey("metaqbxxUerdq28cj1RbAWkYQm3ybzjb6a8bt518x1s")) {
      const [data] = exports.SetTokenStandardStruct.serialize({
        instructionDiscriminator: exports.setTokenStandardInstructionDiscriminator
      });
      const keys = [
        {
          pubkey: accounts.metadata,
          isWritable: true,
          isSigner: false
        },
        {
          pubkey: accounts.updateAuthority,
          isWritable: false,
          isSigner: true
        },
        {
          pubkey: accounts.mint,
          isWritable: false,
          isSigner: false
        }
      ];
      if (accounts.edition != null) {
        keys.push({
          pubkey: accounts.edition,
          isWritable: false,
          isSigner: false
        });
      }
      const ix = new web3.TransactionInstruction({
        programId,
        keys,
        data
      });
      return ix;
    }
    exports.createSetTokenStandardInstruction = createSetTokenStandardInstruction;
  }
});

// ../../node_modules/@metaplex-foundation/mpl-token-metadata/dist/src/generated/instructions/SignMetadata.js
var require_SignMetadata = __commonJS({
  "../../node_modules/@metaplex-foundation/mpl-token-metadata/dist/src/generated/instructions/SignMetadata.js"(exports) {
    "use strict";
    var __createBinding = exports && exports.__createBinding || (Object.create ? function(o2, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      var desc = Object.getOwnPropertyDescriptor(m, k);
      if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m[k];
        } };
      }
      Object.defineProperty(o2, k2, desc);
    } : function(o2, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      o2[k2] = m[k];
    });
    var __setModuleDefault = exports && exports.__setModuleDefault || (Object.create ? function(o2, v) {
      Object.defineProperty(o2, "default", { enumerable: true, value: v });
    } : function(o2, v) {
      o2["default"] = v;
    });
    var __importStar = exports && exports.__importStar || function(mod) {
      if (mod && mod.__esModule)
        return mod;
      var result = {};
      if (mod != null) {
        for (var k in mod)
          if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k))
            __createBinding(result, mod, k);
      }
      __setModuleDefault(result, mod);
      return result;
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.createSignMetadataInstruction = exports.signMetadataInstructionDiscriminator = exports.SignMetadataStruct = void 0;
    var beet9 = __importStar(require_beet());
    var web3 = __importStar((init_index_browser_esm(), __toCommonJS(index_browser_esm_exports)));
    exports.SignMetadataStruct = new beet9.BeetArgsStruct([["instructionDiscriminator", beet9.u8]], "SignMetadataInstructionArgs");
    exports.signMetadataInstructionDiscriminator = 7;
    function createSignMetadataInstruction(accounts, programId = new web3.PublicKey("metaqbxxUerdq28cj1RbAWkYQm3ybzjb6a8bt518x1s")) {
      const [data] = exports.SignMetadataStruct.serialize({
        instructionDiscriminator: exports.signMetadataInstructionDiscriminator
      });
      const keys = [
        {
          pubkey: accounts.metadata,
          isWritable: true,
          isSigner: false
        },
        {
          pubkey: accounts.creator,
          isWritable: false,
          isSigner: true
        }
      ];
      const ix = new web3.TransactionInstruction({
        programId,
        keys,
        data
      });
      return ix;
    }
    exports.createSignMetadataInstruction = createSignMetadataInstruction;
  }
});

// ../../node_modules/@metaplex-foundation/mpl-token-metadata/dist/src/generated/instructions/ThawDelegatedAccount.js
var require_ThawDelegatedAccount = __commonJS({
  "../../node_modules/@metaplex-foundation/mpl-token-metadata/dist/src/generated/instructions/ThawDelegatedAccount.js"(exports) {
    "use strict";
    var __createBinding = exports && exports.__createBinding || (Object.create ? function(o2, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      var desc = Object.getOwnPropertyDescriptor(m, k);
      if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m[k];
        } };
      }
      Object.defineProperty(o2, k2, desc);
    } : function(o2, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      o2[k2] = m[k];
    });
    var __setModuleDefault = exports && exports.__setModuleDefault || (Object.create ? function(o2, v) {
      Object.defineProperty(o2, "default", { enumerable: true, value: v });
    } : function(o2, v) {
      o2["default"] = v;
    });
    var __importStar = exports && exports.__importStar || function(mod) {
      if (mod && mod.__esModule)
        return mod;
      var result = {};
      if (mod != null) {
        for (var k in mod)
          if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k))
            __createBinding(result, mod, k);
      }
      __setModuleDefault(result, mod);
      return result;
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.createThawDelegatedAccountInstruction = exports.thawDelegatedAccountInstructionDiscriminator = exports.ThawDelegatedAccountStruct = void 0;
    var splToken = __importStar(require_cjs4());
    var beet9 = __importStar(require_beet());
    var web3 = __importStar((init_index_browser_esm(), __toCommonJS(index_browser_esm_exports)));
    exports.ThawDelegatedAccountStruct = new beet9.BeetArgsStruct([["instructionDiscriminator", beet9.u8]], "ThawDelegatedAccountInstructionArgs");
    exports.thawDelegatedAccountInstructionDiscriminator = 27;
    function createThawDelegatedAccountInstruction2(accounts, programId = new web3.PublicKey("metaqbxxUerdq28cj1RbAWkYQm3ybzjb6a8bt518x1s")) {
      var _a;
      const [data] = exports.ThawDelegatedAccountStruct.serialize({
        instructionDiscriminator: exports.thawDelegatedAccountInstructionDiscriminator
      });
      const keys = [
        {
          pubkey: accounts.delegate,
          isWritable: true,
          isSigner: true
        },
        {
          pubkey: accounts.tokenAccount,
          isWritable: true,
          isSigner: false
        },
        {
          pubkey: accounts.edition,
          isWritable: false,
          isSigner: false
        },
        {
          pubkey: accounts.mint,
          isWritable: false,
          isSigner: false
        },
        {
          pubkey: (_a = accounts.tokenProgram) !== null && _a !== void 0 ? _a : splToken.TOKEN_PROGRAM_ID,
          isWritable: false,
          isSigner: false
        }
      ];
      const ix = new web3.TransactionInstruction({
        programId,
        keys,
        data
      });
      return ix;
    }
    exports.createThawDelegatedAccountInstruction = createThawDelegatedAccountInstruction2;
  }
});

// ../../node_modules/@metaplex-foundation/mpl-token-metadata/dist/src/generated/types/TransferArgs.js
var require_TransferArgs = __commonJS({
  "../../node_modules/@metaplex-foundation/mpl-token-metadata/dist/src/generated/types/TransferArgs.js"(exports) {
    "use strict";
    var __createBinding = exports && exports.__createBinding || (Object.create ? function(o2, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      var desc = Object.getOwnPropertyDescriptor(m, k);
      if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m[k];
        } };
      }
      Object.defineProperty(o2, k2, desc);
    } : function(o2, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      o2[k2] = m[k];
    });
    var __setModuleDefault = exports && exports.__setModuleDefault || (Object.create ? function(o2, v) {
      Object.defineProperty(o2, "default", { enumerable: true, value: v });
    } : function(o2, v) {
      o2["default"] = v;
    });
    var __importStar = exports && exports.__importStar || function(mod) {
      if (mod && mod.__esModule)
        return mod;
      var result = {};
      if (mod != null) {
        for (var k in mod)
          if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k))
            __createBinding(result, mod, k);
      }
      __setModuleDefault(result, mod);
      return result;
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.transferArgsBeet = exports.isTransferArgsV1 = void 0;
    var beet9 = __importStar(require_beet());
    var AuthorizationData_1 = require_AuthorizationData();
    var isTransferArgsV1 = (x) => x.__kind === "V1";
    exports.isTransferArgsV1 = isTransferArgsV1;
    exports.transferArgsBeet = beet9.dataEnum([
      [
        "V1",
        new beet9.FixableBeetArgsStruct([
          ["amount", beet9.u64],
          ["authorizationData", beet9.coption(AuthorizationData_1.authorizationDataBeet)]
        ], 'TransferArgsRecord["V1"]')
      ]
    ]);
  }
});

// ../../node_modules/@metaplex-foundation/mpl-token-metadata/dist/src/generated/instructions/Transfer.js
var require_Transfer = __commonJS({
  "../../node_modules/@metaplex-foundation/mpl-token-metadata/dist/src/generated/instructions/Transfer.js"(exports) {
    "use strict";
    var __createBinding = exports && exports.__createBinding || (Object.create ? function(o2, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      var desc = Object.getOwnPropertyDescriptor(m, k);
      if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m[k];
        } };
      }
      Object.defineProperty(o2, k2, desc);
    } : function(o2, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      o2[k2] = m[k];
    });
    var __setModuleDefault = exports && exports.__setModuleDefault || (Object.create ? function(o2, v) {
      Object.defineProperty(o2, "default", { enumerable: true, value: v });
    } : function(o2, v) {
      o2["default"] = v;
    });
    var __importStar = exports && exports.__importStar || function(mod) {
      if (mod && mod.__esModule)
        return mod;
      var result = {};
      if (mod != null) {
        for (var k in mod)
          if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k))
            __createBinding(result, mod, k);
      }
      __setModuleDefault(result, mod);
      return result;
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.createTransferInstruction = exports.transferInstructionDiscriminator = exports.TransferStruct = void 0;
    var beet9 = __importStar(require_beet());
    var web3 = __importStar((init_index_browser_esm(), __toCommonJS(index_browser_esm_exports)));
    var TransferArgs_1 = require_TransferArgs();
    exports.TransferStruct = new beet9.FixableBeetArgsStruct([
      ["instructionDiscriminator", beet9.u8],
      ["transferArgs", TransferArgs_1.transferArgsBeet]
    ], "TransferInstructionArgs");
    exports.transferInstructionDiscriminator = 49;
    function createTransferInstruction4(accounts, args, programId = new web3.PublicKey("metaqbxxUerdq28cj1RbAWkYQm3ybzjb6a8bt518x1s")) {
      var _a, _b, _c, _d, _e, _f;
      const [data] = exports.TransferStruct.serialize(__spreadValues({
        instructionDiscriminator: exports.transferInstructionDiscriminator
      }, args));
      const keys = [
        {
          pubkey: accounts.token,
          isWritable: true,
          isSigner: false
        },
        {
          pubkey: accounts.tokenOwner,
          isWritable: false,
          isSigner: false
        },
        {
          pubkey: accounts.destination,
          isWritable: true,
          isSigner: false
        },
        {
          pubkey: accounts.destinationOwner,
          isWritable: false,
          isSigner: false
        },
        {
          pubkey: accounts.mint,
          isWritable: false,
          isSigner: false
        },
        {
          pubkey: accounts.metadata,
          isWritable: true,
          isSigner: false
        },
        {
          pubkey: (_a = accounts.edition) !== null && _a !== void 0 ? _a : programId,
          isWritable: false,
          isSigner: false
        },
        {
          pubkey: (_b = accounts.ownerTokenRecord) !== null && _b !== void 0 ? _b : programId,
          isWritable: accounts.ownerTokenRecord != null,
          isSigner: false
        },
        {
          pubkey: (_c = accounts.destinationTokenRecord) !== null && _c !== void 0 ? _c : programId,
          isWritable: accounts.destinationTokenRecord != null,
          isSigner: false
        },
        {
          pubkey: accounts.authority,
          isWritable: false,
          isSigner: true
        },
        {
          pubkey: accounts.payer,
          isWritable: true,
          isSigner: true
        },
        {
          pubkey: (_d = accounts.systemProgram) !== null && _d !== void 0 ? _d : web3.SystemProgram.programId,
          isWritable: false,
          isSigner: false
        },
        {
          pubkey: accounts.sysvarInstructions,
          isWritable: false,
          isSigner: false
        },
        {
          pubkey: accounts.splTokenProgram,
          isWritable: false,
          isSigner: false
        },
        {
          pubkey: accounts.splAtaProgram,
          isWritable: false,
          isSigner: false
        },
        {
          pubkey: (_e = accounts.authorizationRulesProgram) !== null && _e !== void 0 ? _e : programId,
          isWritable: false,
          isSigner: false
        },
        {
          pubkey: (_f = accounts.authorizationRules) !== null && _f !== void 0 ? _f : programId,
          isWritable: false,
          isSigner: false
        }
      ];
      const ix = new web3.TransactionInstruction({
        programId,
        keys,
        data
      });
      return ix;
    }
    exports.createTransferInstruction = createTransferInstruction4;
  }
});

// ../../node_modules/@metaplex-foundation/mpl-token-metadata/dist/src/generated/types/TransferOutOfEscrowArgs.js
var require_TransferOutOfEscrowArgs = __commonJS({
  "../../node_modules/@metaplex-foundation/mpl-token-metadata/dist/src/generated/types/TransferOutOfEscrowArgs.js"(exports) {
    "use strict";
    var __createBinding = exports && exports.__createBinding || (Object.create ? function(o2, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      var desc = Object.getOwnPropertyDescriptor(m, k);
      if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m[k];
        } };
      }
      Object.defineProperty(o2, k2, desc);
    } : function(o2, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      o2[k2] = m[k];
    });
    var __setModuleDefault = exports && exports.__setModuleDefault || (Object.create ? function(o2, v) {
      Object.defineProperty(o2, "default", { enumerable: true, value: v });
    } : function(o2, v) {
      o2["default"] = v;
    });
    var __importStar = exports && exports.__importStar || function(mod) {
      if (mod && mod.__esModule)
        return mod;
      var result = {};
      if (mod != null) {
        for (var k in mod)
          if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k))
            __createBinding(result, mod, k);
      }
      __setModuleDefault(result, mod);
      return result;
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.transferOutOfEscrowArgsBeet = void 0;
    var beet9 = __importStar(require_beet());
    exports.transferOutOfEscrowArgsBeet = new beet9.BeetArgsStruct([["amount", beet9.u64]], "TransferOutOfEscrowArgs");
  }
});

// ../../node_modules/@metaplex-foundation/mpl-token-metadata/dist/src/generated/instructions/TransferOutOfEscrow.js
var require_TransferOutOfEscrow = __commonJS({
  "../../node_modules/@metaplex-foundation/mpl-token-metadata/dist/src/generated/instructions/TransferOutOfEscrow.js"(exports) {
    "use strict";
    var __createBinding = exports && exports.__createBinding || (Object.create ? function(o2, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      var desc = Object.getOwnPropertyDescriptor(m, k);
      if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m[k];
        } };
      }
      Object.defineProperty(o2, k2, desc);
    } : function(o2, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      o2[k2] = m[k];
    });
    var __setModuleDefault = exports && exports.__setModuleDefault || (Object.create ? function(o2, v) {
      Object.defineProperty(o2, "default", { enumerable: true, value: v });
    } : function(o2, v) {
      o2["default"] = v;
    });
    var __importStar = exports && exports.__importStar || function(mod) {
      if (mod && mod.__esModule)
        return mod;
      var result = {};
      if (mod != null) {
        for (var k in mod)
          if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k))
            __createBinding(result, mod, k);
      }
      __setModuleDefault(result, mod);
      return result;
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.createTransferOutOfEscrowInstruction = exports.transferOutOfEscrowInstructionDiscriminator = exports.TransferOutOfEscrowStruct = void 0;
    var splToken = __importStar(require_cjs4());
    var beet9 = __importStar(require_beet());
    var web3 = __importStar((init_index_browser_esm(), __toCommonJS(index_browser_esm_exports)));
    var TransferOutOfEscrowArgs_1 = require_TransferOutOfEscrowArgs();
    exports.TransferOutOfEscrowStruct = new beet9.BeetArgsStruct([
      ["instructionDiscriminator", beet9.u8],
      ["transferOutOfEscrowArgs", TransferOutOfEscrowArgs_1.transferOutOfEscrowArgsBeet]
    ], "TransferOutOfEscrowInstructionArgs");
    exports.transferOutOfEscrowInstructionDiscriminator = 40;
    function createTransferOutOfEscrowInstruction(accounts, args, programId = new web3.PublicKey("metaqbxxUerdq28cj1RbAWkYQm3ybzjb6a8bt518x1s")) {
      var _a, _b, _c;
      const [data] = exports.TransferOutOfEscrowStruct.serialize(__spreadValues({
        instructionDiscriminator: exports.transferOutOfEscrowInstructionDiscriminator
      }, args));
      const keys = [
        {
          pubkey: accounts.escrow,
          isWritable: false,
          isSigner: false
        },
        {
          pubkey: accounts.metadata,
          isWritable: true,
          isSigner: false
        },
        {
          pubkey: accounts.payer,
          isWritable: true,
          isSigner: true
        },
        {
          pubkey: accounts.attributeMint,
          isWritable: false,
          isSigner: false
        },
        {
          pubkey: accounts.attributeSrc,
          isWritable: true,
          isSigner: false
        },
        {
          pubkey: accounts.attributeDst,
          isWritable: true,
          isSigner: false
        },
        {
          pubkey: accounts.escrowMint,
          isWritable: false,
          isSigner: false
        },
        {
          pubkey: accounts.escrowAccount,
          isWritable: false,
          isSigner: false
        },
        {
          pubkey: (_a = accounts.systemProgram) !== null && _a !== void 0 ? _a : web3.SystemProgram.programId,
          isWritable: false,
          isSigner: false
        },
        {
          pubkey: (_b = accounts.ataProgram) !== null && _b !== void 0 ? _b : splToken.ASSOCIATED_TOKEN_PROGRAM_ID,
          isWritable: false,
          isSigner: false
        },
        {
          pubkey: (_c = accounts.tokenProgram) !== null && _c !== void 0 ? _c : splToken.TOKEN_PROGRAM_ID,
          isWritable: false,
          isSigner: false
        },
        {
          pubkey: accounts.sysvarInstructions,
          isWritable: false,
          isSigner: false
        }
      ];
      if (accounts.authority != null) {
        keys.push({
          pubkey: accounts.authority,
          isWritable: false,
          isSigner: true
        });
      }
      const ix = new web3.TransactionInstruction({
        programId,
        keys,
        data
      });
      return ix;
    }
    exports.createTransferOutOfEscrowInstruction = createTransferOutOfEscrowInstruction;
  }
});

// ../../node_modules/@metaplex-foundation/mpl-token-metadata/dist/src/generated/types/UnlockArgs.js
var require_UnlockArgs = __commonJS({
  "../../node_modules/@metaplex-foundation/mpl-token-metadata/dist/src/generated/types/UnlockArgs.js"(exports) {
    "use strict";
    var __createBinding = exports && exports.__createBinding || (Object.create ? function(o2, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      var desc = Object.getOwnPropertyDescriptor(m, k);
      if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m[k];
        } };
      }
      Object.defineProperty(o2, k2, desc);
    } : function(o2, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      o2[k2] = m[k];
    });
    var __setModuleDefault = exports && exports.__setModuleDefault || (Object.create ? function(o2, v) {
      Object.defineProperty(o2, "default", { enumerable: true, value: v });
    } : function(o2, v) {
      o2["default"] = v;
    });
    var __importStar = exports && exports.__importStar || function(mod) {
      if (mod && mod.__esModule)
        return mod;
      var result = {};
      if (mod != null) {
        for (var k in mod)
          if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k))
            __createBinding(result, mod, k);
      }
      __setModuleDefault(result, mod);
      return result;
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.unlockArgsBeet = exports.isUnlockArgsV1 = void 0;
    var beet9 = __importStar(require_beet());
    var AuthorizationData_1 = require_AuthorizationData();
    var isUnlockArgsV1 = (x) => x.__kind === "V1";
    exports.isUnlockArgsV1 = isUnlockArgsV1;
    exports.unlockArgsBeet = beet9.dataEnum([
      [
        "V1",
        new beet9.FixableBeetArgsStruct([["authorizationData", beet9.coption(AuthorizationData_1.authorizationDataBeet)]], 'UnlockArgsRecord["V1"]')
      ]
    ]);
  }
});

// ../../node_modules/@metaplex-foundation/mpl-token-metadata/dist/src/generated/instructions/Unlock.js
var require_Unlock = __commonJS({
  "../../node_modules/@metaplex-foundation/mpl-token-metadata/dist/src/generated/instructions/Unlock.js"(exports) {
    "use strict";
    var __createBinding = exports && exports.__createBinding || (Object.create ? function(o2, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      var desc = Object.getOwnPropertyDescriptor(m, k);
      if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m[k];
        } };
      }
      Object.defineProperty(o2, k2, desc);
    } : function(o2, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      o2[k2] = m[k];
    });
    var __setModuleDefault = exports && exports.__setModuleDefault || (Object.create ? function(o2, v) {
      Object.defineProperty(o2, "default", { enumerable: true, value: v });
    } : function(o2, v) {
      o2["default"] = v;
    });
    var __importStar = exports && exports.__importStar || function(mod) {
      if (mod && mod.__esModule)
        return mod;
      var result = {};
      if (mod != null) {
        for (var k in mod)
          if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k))
            __createBinding(result, mod, k);
      }
      __setModuleDefault(result, mod);
      return result;
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.createUnlockInstruction = exports.unlockInstructionDiscriminator = exports.UnlockStruct = void 0;
    var beet9 = __importStar(require_beet());
    var web3 = __importStar((init_index_browser_esm(), __toCommonJS(index_browser_esm_exports)));
    var UnlockArgs_1 = require_UnlockArgs();
    exports.UnlockStruct = new beet9.FixableBeetArgsStruct([
      ["instructionDiscriminator", beet9.u8],
      ["unlockArgs", UnlockArgs_1.unlockArgsBeet]
    ], "UnlockInstructionArgs");
    exports.unlockInstructionDiscriminator = 47;
    function createUnlockInstruction2(accounts, args, programId = new web3.PublicKey("metaqbxxUerdq28cj1RbAWkYQm3ybzjb6a8bt518x1s")) {
      var _a, _b, _c, _d, _e, _f, _g;
      const [data] = exports.UnlockStruct.serialize(__spreadValues({
        instructionDiscriminator: exports.unlockInstructionDiscriminator
      }, args));
      const keys = [
        {
          pubkey: accounts.authority,
          isWritable: false,
          isSigner: true
        },
        {
          pubkey: (_a = accounts.tokenOwner) !== null && _a !== void 0 ? _a : programId,
          isWritable: false,
          isSigner: false
        },
        {
          pubkey: accounts.token,
          isWritable: true,
          isSigner: false
        },
        {
          pubkey: accounts.mint,
          isWritable: false,
          isSigner: false
        },
        {
          pubkey: accounts.metadata,
          isWritable: true,
          isSigner: false
        },
        {
          pubkey: (_b = accounts.edition) !== null && _b !== void 0 ? _b : programId,
          isWritable: false,
          isSigner: false
        },
        {
          pubkey: (_c = accounts.tokenRecord) !== null && _c !== void 0 ? _c : programId,
          isWritable: accounts.tokenRecord != null,
          isSigner: false
        },
        {
          pubkey: accounts.payer,
          isWritable: true,
          isSigner: true
        },
        {
          pubkey: (_d = accounts.systemProgram) !== null && _d !== void 0 ? _d : web3.SystemProgram.programId,
          isWritable: false,
          isSigner: false
        },
        {
          pubkey: accounts.sysvarInstructions,
          isWritable: false,
          isSigner: false
        },
        {
          pubkey: (_e = accounts.splTokenProgram) !== null && _e !== void 0 ? _e : programId,
          isWritable: false,
          isSigner: false
        },
        {
          pubkey: (_f = accounts.authorizationRulesProgram) !== null && _f !== void 0 ? _f : programId,
          isWritable: false,
          isSigner: false
        },
        {
          pubkey: (_g = accounts.authorizationRules) !== null && _g !== void 0 ? _g : programId,
          isWritable: false,
          isSigner: false
        }
      ];
      const ix = new web3.TransactionInstruction({
        programId,
        keys,
        data
      });
      return ix;
    }
    exports.createUnlockInstruction = createUnlockInstruction2;
  }
});

// ../../node_modules/@metaplex-foundation/mpl-token-metadata/dist/src/generated/types/VerificationArgs.js
var require_VerificationArgs = __commonJS({
  "../../node_modules/@metaplex-foundation/mpl-token-metadata/dist/src/generated/types/VerificationArgs.js"(exports) {
    "use strict";
    var __createBinding = exports && exports.__createBinding || (Object.create ? function(o2, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      var desc = Object.getOwnPropertyDescriptor(m, k);
      if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m[k];
        } };
      }
      Object.defineProperty(o2, k2, desc);
    } : function(o2, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      o2[k2] = m[k];
    });
    var __setModuleDefault = exports && exports.__setModuleDefault || (Object.create ? function(o2, v) {
      Object.defineProperty(o2, "default", { enumerable: true, value: v });
    } : function(o2, v) {
      o2["default"] = v;
    });
    var __importStar = exports && exports.__importStar || function(mod) {
      if (mod && mod.__esModule)
        return mod;
      var result = {};
      if (mod != null) {
        for (var k in mod)
          if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k))
            __createBinding(result, mod, k);
      }
      __setModuleDefault(result, mod);
      return result;
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.verificationArgsBeet = exports.VerificationArgs = void 0;
    var beet9 = __importStar(require_beet());
    var VerificationArgs5;
    (function(VerificationArgs6) {
      VerificationArgs6[VerificationArgs6["CreatorV1"] = 0] = "CreatorV1";
      VerificationArgs6[VerificationArgs6["CollectionV1"] = 1] = "CollectionV1";
    })(VerificationArgs5 = exports.VerificationArgs || (exports.VerificationArgs = {}));
    exports.verificationArgsBeet = beet9.fixedScalarEnum(VerificationArgs5);
  }
});

// ../../node_modules/@metaplex-foundation/mpl-token-metadata/dist/src/generated/instructions/Unverify.js
var require_Unverify = __commonJS({
  "../../node_modules/@metaplex-foundation/mpl-token-metadata/dist/src/generated/instructions/Unverify.js"(exports) {
    "use strict";
    var __createBinding = exports && exports.__createBinding || (Object.create ? function(o2, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      var desc = Object.getOwnPropertyDescriptor(m, k);
      if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m[k];
        } };
      }
      Object.defineProperty(o2, k2, desc);
    } : function(o2, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      o2[k2] = m[k];
    });
    var __setModuleDefault = exports && exports.__setModuleDefault || (Object.create ? function(o2, v) {
      Object.defineProperty(o2, "default", { enumerable: true, value: v });
    } : function(o2, v) {
      o2["default"] = v;
    });
    var __importStar = exports && exports.__importStar || function(mod) {
      if (mod && mod.__esModule)
        return mod;
      var result = {};
      if (mod != null) {
        for (var k in mod)
          if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k))
            __createBinding(result, mod, k);
      }
      __setModuleDefault(result, mod);
      return result;
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.createUnverifyInstruction = exports.unverifyInstructionDiscriminator = exports.UnverifyStruct = void 0;
    var beet9 = __importStar(require_beet());
    var web3 = __importStar((init_index_browser_esm(), __toCommonJS(index_browser_esm_exports)));
    var VerificationArgs_1 = require_VerificationArgs();
    exports.UnverifyStruct = new beet9.BeetArgsStruct([
      ["instructionDiscriminator", beet9.u8],
      ["verificationArgs", VerificationArgs_1.verificationArgsBeet]
    ], "UnverifyInstructionArgs");
    exports.unverifyInstructionDiscriminator = 53;
    function createUnverifyInstruction3(accounts, args, programId = new web3.PublicKey("metaqbxxUerdq28cj1RbAWkYQm3ybzjb6a8bt518x1s")) {
      var _a, _b, _c, _d;
      const [data] = exports.UnverifyStruct.serialize(__spreadValues({
        instructionDiscriminator: exports.unverifyInstructionDiscriminator
      }, args));
      const keys = [
        {
          pubkey: accounts.authority,
          isWritable: false,
          isSigner: true
        },
        {
          pubkey: (_a = accounts.delegateRecord) !== null && _a !== void 0 ? _a : programId,
          isWritable: false,
          isSigner: false
        },
        {
          pubkey: accounts.metadata,
          isWritable: true,
          isSigner: false
        },
        {
          pubkey: (_b = accounts.collectionMint) !== null && _b !== void 0 ? _b : programId,
          isWritable: false,
          isSigner: false
        },
        {
          pubkey: (_c = accounts.collectionMetadata) !== null && _c !== void 0 ? _c : programId,
          isWritable: accounts.collectionMetadata != null,
          isSigner: false
        },
        {
          pubkey: (_d = accounts.systemProgram) !== null && _d !== void 0 ? _d : web3.SystemProgram.programId,
          isWritable: false,
          isSigner: false
        },
        {
          pubkey: accounts.sysvarInstructions,
          isWritable: false,
          isSigner: false
        }
      ];
      const ix = new web3.TransactionInstruction({
        programId,
        keys,
        data
      });
      return ix;
    }
    exports.createUnverifyInstruction = createUnverifyInstruction3;
  }
});

// ../../node_modules/@metaplex-foundation/mpl-token-metadata/dist/src/generated/instructions/UnverifyCollection.js
var require_UnverifyCollection = __commonJS({
  "../../node_modules/@metaplex-foundation/mpl-token-metadata/dist/src/generated/instructions/UnverifyCollection.js"(exports) {
    "use strict";
    var __createBinding = exports && exports.__createBinding || (Object.create ? function(o2, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      var desc = Object.getOwnPropertyDescriptor(m, k);
      if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m[k];
        } };
      }
      Object.defineProperty(o2, k2, desc);
    } : function(o2, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      o2[k2] = m[k];
    });
    var __setModuleDefault = exports && exports.__setModuleDefault || (Object.create ? function(o2, v) {
      Object.defineProperty(o2, "default", { enumerable: true, value: v });
    } : function(o2, v) {
      o2["default"] = v;
    });
    var __importStar = exports && exports.__importStar || function(mod) {
      if (mod && mod.__esModule)
        return mod;
      var result = {};
      if (mod != null) {
        for (var k in mod)
          if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k))
            __createBinding(result, mod, k);
      }
      __setModuleDefault(result, mod);
      return result;
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.createUnverifyCollectionInstruction = exports.unverifyCollectionInstructionDiscriminator = exports.UnverifyCollectionStruct = void 0;
    var beet9 = __importStar(require_beet());
    var web3 = __importStar((init_index_browser_esm(), __toCommonJS(index_browser_esm_exports)));
    exports.UnverifyCollectionStruct = new beet9.BeetArgsStruct([["instructionDiscriminator", beet9.u8]], "UnverifyCollectionInstructionArgs");
    exports.unverifyCollectionInstructionDiscriminator = 22;
    function createUnverifyCollectionInstruction2(accounts, programId = new web3.PublicKey("metaqbxxUerdq28cj1RbAWkYQm3ybzjb6a8bt518x1s")) {
      const [data] = exports.UnverifyCollectionStruct.serialize({
        instructionDiscriminator: exports.unverifyCollectionInstructionDiscriminator
      });
      const keys = [
        {
          pubkey: accounts.metadata,
          isWritable: true,
          isSigner: false
        },
        {
          pubkey: accounts.collectionAuthority,
          isWritable: true,
          isSigner: true
        },
        {
          pubkey: accounts.collectionMint,
          isWritable: false,
          isSigner: false
        },
        {
          pubkey: accounts.collection,
          isWritable: false,
          isSigner: false
        },
        {
          pubkey: accounts.collectionMasterEditionAccount,
          isWritable: false,
          isSigner: false
        }
      ];
      if (accounts.collectionAuthorityRecord != null) {
        keys.push({
          pubkey: accounts.collectionAuthorityRecord,
          isWritable: false,
          isSigner: false
        });
      }
      const ix = new web3.TransactionInstruction({
        programId,
        keys,
        data
      });
      return ix;
    }
    exports.createUnverifyCollectionInstruction = createUnverifyCollectionInstruction2;
  }
});

// ../../node_modules/@metaplex-foundation/mpl-token-metadata/dist/src/generated/instructions/UnverifySizedCollectionItem.js
var require_UnverifySizedCollectionItem = __commonJS({
  "../../node_modules/@metaplex-foundation/mpl-token-metadata/dist/src/generated/instructions/UnverifySizedCollectionItem.js"(exports) {
    "use strict";
    var __createBinding = exports && exports.__createBinding || (Object.create ? function(o2, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      var desc = Object.getOwnPropertyDescriptor(m, k);
      if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m[k];
        } };
      }
      Object.defineProperty(o2, k2, desc);
    } : function(o2, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      o2[k2] = m[k];
    });
    var __setModuleDefault = exports && exports.__setModuleDefault || (Object.create ? function(o2, v) {
      Object.defineProperty(o2, "default", { enumerable: true, value: v });
    } : function(o2, v) {
      o2["default"] = v;
    });
    var __importStar = exports && exports.__importStar || function(mod) {
      if (mod && mod.__esModule)
        return mod;
      var result = {};
      if (mod != null) {
        for (var k in mod)
          if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k))
            __createBinding(result, mod, k);
      }
      __setModuleDefault(result, mod);
      return result;
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.createUnverifySizedCollectionItemInstruction = exports.unverifySizedCollectionItemInstructionDiscriminator = exports.UnverifySizedCollectionItemStruct = void 0;
    var beet9 = __importStar(require_beet());
    var web3 = __importStar((init_index_browser_esm(), __toCommonJS(index_browser_esm_exports)));
    exports.UnverifySizedCollectionItemStruct = new beet9.BeetArgsStruct([["instructionDiscriminator", beet9.u8]], "UnverifySizedCollectionItemInstructionArgs");
    exports.unverifySizedCollectionItemInstructionDiscriminator = 31;
    function createUnverifySizedCollectionItemInstruction2(accounts, programId = new web3.PublicKey("metaqbxxUerdq28cj1RbAWkYQm3ybzjb6a8bt518x1s")) {
      const [data] = exports.UnverifySizedCollectionItemStruct.serialize({
        instructionDiscriminator: exports.unverifySizedCollectionItemInstructionDiscriminator
      });
      const keys = [
        {
          pubkey: accounts.metadata,
          isWritable: true,
          isSigner: false
        },
        {
          pubkey: accounts.collectionAuthority,
          isWritable: false,
          isSigner: true
        },
        {
          pubkey: accounts.payer,
          isWritable: true,
          isSigner: true
        },
        {
          pubkey: accounts.collectionMint,
          isWritable: false,
          isSigner: false
        },
        {
          pubkey: accounts.collection,
          isWritable: true,
          isSigner: false
        },
        {
          pubkey: accounts.collectionMasterEditionAccount,
          isWritable: false,
          isSigner: false
        }
      ];
      if (accounts.collectionAuthorityRecord != null) {
        keys.push({
          pubkey: accounts.collectionAuthorityRecord,
          isWritable: false,
          isSigner: false
        });
      }
      const ix = new web3.TransactionInstruction({
        programId,
        keys,
        data
      });
      return ix;
    }
    exports.createUnverifySizedCollectionItemInstruction = createUnverifySizedCollectionItemInstruction2;
  }
});

// ../../node_modules/@metaplex-foundation/mpl-token-metadata/dist/src/generated/types/CollectionToggle.js
var require_CollectionToggle = __commonJS({
  "../../node_modules/@metaplex-foundation/mpl-token-metadata/dist/src/generated/types/CollectionToggle.js"(exports) {
    "use strict";
    var __createBinding = exports && exports.__createBinding || (Object.create ? function(o2, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      var desc = Object.getOwnPropertyDescriptor(m, k);
      if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m[k];
        } };
      }
      Object.defineProperty(o2, k2, desc);
    } : function(o2, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      o2[k2] = m[k];
    });
    var __setModuleDefault = exports && exports.__setModuleDefault || (Object.create ? function(o2, v) {
      Object.defineProperty(o2, "default", { enumerable: true, value: v });
    } : function(o2, v) {
      o2["default"] = v;
    });
    var __importStar = exports && exports.__importStar || function(mod) {
      if (mod && mod.__esModule)
        return mod;
      var result = {};
      if (mod != null) {
        for (var k in mod)
          if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k))
            __createBinding(result, mod, k);
      }
      __setModuleDefault(result, mod);
      return result;
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.collectionToggleBeet = exports.isCollectionToggleSet = exports.isCollectionToggleClear = exports.isCollectionToggleNone = void 0;
    var beet9 = __importStar(require_beet());
    var Collection_1 = require_Collection();
    var isCollectionToggleNone = (x) => x.__kind === "None";
    exports.isCollectionToggleNone = isCollectionToggleNone;
    var isCollectionToggleClear = (x) => x.__kind === "Clear";
    exports.isCollectionToggleClear = isCollectionToggleClear;
    var isCollectionToggleSet = (x) => x.__kind === "Set";
    exports.isCollectionToggleSet = isCollectionToggleSet;
    exports.collectionToggleBeet = beet9.dataEnum([
      ["None", beet9.unit],
      ["Clear", beet9.unit],
      [
        "Set",
        new beet9.BeetArgsStruct([["fields", beet9.fixedSizeTuple([Collection_1.collectionBeet])]], 'CollectionToggleRecord["Set"]')
      ]
    ]);
  }
});

// ../../node_modules/@metaplex-foundation/mpl-token-metadata/dist/src/generated/types/CollectionDetailsToggle.js
var require_CollectionDetailsToggle = __commonJS({
  "../../node_modules/@metaplex-foundation/mpl-token-metadata/dist/src/generated/types/CollectionDetailsToggle.js"(exports) {
    "use strict";
    var __createBinding = exports && exports.__createBinding || (Object.create ? function(o2, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      var desc = Object.getOwnPropertyDescriptor(m, k);
      if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m[k];
        } };
      }
      Object.defineProperty(o2, k2, desc);
    } : function(o2, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      o2[k2] = m[k];
    });
    var __setModuleDefault = exports && exports.__setModuleDefault || (Object.create ? function(o2, v) {
      Object.defineProperty(o2, "default", { enumerable: true, value: v });
    } : function(o2, v) {
      o2["default"] = v;
    });
    var __importStar = exports && exports.__importStar || function(mod) {
      if (mod && mod.__esModule)
        return mod;
      var result = {};
      if (mod != null) {
        for (var k in mod)
          if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k))
            __createBinding(result, mod, k);
      }
      __setModuleDefault(result, mod);
      return result;
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.collectionDetailsToggleBeet = exports.isCollectionDetailsToggleSet = exports.isCollectionDetailsToggleClear = exports.isCollectionDetailsToggleNone = void 0;
    var beet9 = __importStar(require_beet());
    var CollectionDetails_1 = require_CollectionDetails();
    var isCollectionDetailsToggleNone = (x) => x.__kind === "None";
    exports.isCollectionDetailsToggleNone = isCollectionDetailsToggleNone;
    var isCollectionDetailsToggleClear = (x) => x.__kind === "Clear";
    exports.isCollectionDetailsToggleClear = isCollectionDetailsToggleClear;
    var isCollectionDetailsToggleSet = (x) => x.__kind === "Set";
    exports.isCollectionDetailsToggleSet = isCollectionDetailsToggleSet;
    exports.collectionDetailsToggleBeet = beet9.dataEnum([
      ["None", beet9.unit],
      ["Clear", beet9.unit],
      [
        "Set",
        new beet9.FixableBeetArgsStruct([["fields", beet9.tuple([CollectionDetails_1.collectionDetailsBeet])]], 'CollectionDetailsToggleRecord["Set"]')
      ]
    ]);
  }
});

// ../../node_modules/@metaplex-foundation/mpl-token-metadata/dist/src/generated/types/UsesToggle.js
var require_UsesToggle = __commonJS({
  "../../node_modules/@metaplex-foundation/mpl-token-metadata/dist/src/generated/types/UsesToggle.js"(exports) {
    "use strict";
    var __createBinding = exports && exports.__createBinding || (Object.create ? function(o2, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      var desc = Object.getOwnPropertyDescriptor(m, k);
      if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m[k];
        } };
      }
      Object.defineProperty(o2, k2, desc);
    } : function(o2, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      o2[k2] = m[k];
    });
    var __setModuleDefault = exports && exports.__setModuleDefault || (Object.create ? function(o2, v) {
      Object.defineProperty(o2, "default", { enumerable: true, value: v });
    } : function(o2, v) {
      o2["default"] = v;
    });
    var __importStar = exports && exports.__importStar || function(mod) {
      if (mod && mod.__esModule)
        return mod;
      var result = {};
      if (mod != null) {
        for (var k in mod)
          if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k))
            __createBinding(result, mod, k);
      }
      __setModuleDefault(result, mod);
      return result;
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.usesToggleBeet = exports.isUsesToggleSet = exports.isUsesToggleClear = exports.isUsesToggleNone = void 0;
    var beet9 = __importStar(require_beet());
    var Uses_1 = require_Uses();
    var isUsesToggleNone = (x) => x.__kind === "None";
    exports.isUsesToggleNone = isUsesToggleNone;
    var isUsesToggleClear = (x) => x.__kind === "Clear";
    exports.isUsesToggleClear = isUsesToggleClear;
    var isUsesToggleSet = (x) => x.__kind === "Set";
    exports.isUsesToggleSet = isUsesToggleSet;
    exports.usesToggleBeet = beet9.dataEnum([
      ["None", beet9.unit],
      ["Clear", beet9.unit],
      [
        "Set",
        new beet9.BeetArgsStruct([["fields", beet9.fixedSizeTuple([Uses_1.usesBeet])]], 'UsesToggleRecord["Set"]')
      ]
    ]);
  }
});

// ../../node_modules/@metaplex-foundation/mpl-token-metadata/dist/src/generated/types/RuleSetToggle.js
var require_RuleSetToggle = __commonJS({
  "../../node_modules/@metaplex-foundation/mpl-token-metadata/dist/src/generated/types/RuleSetToggle.js"(exports) {
    "use strict";
    var __createBinding = exports && exports.__createBinding || (Object.create ? function(o2, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      var desc = Object.getOwnPropertyDescriptor(m, k);
      if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m[k];
        } };
      }
      Object.defineProperty(o2, k2, desc);
    } : function(o2, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      o2[k2] = m[k];
    });
    var __setModuleDefault = exports && exports.__setModuleDefault || (Object.create ? function(o2, v) {
      Object.defineProperty(o2, "default", { enumerable: true, value: v });
    } : function(o2, v) {
      o2["default"] = v;
    });
    var __importStar = exports && exports.__importStar || function(mod) {
      if (mod && mod.__esModule)
        return mod;
      var result = {};
      if (mod != null) {
        for (var k in mod)
          if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k))
            __createBinding(result, mod, k);
      }
      __setModuleDefault(result, mod);
      return result;
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.ruleSetToggleBeet = exports.isRuleSetToggleSet = exports.isRuleSetToggleClear = exports.isRuleSetToggleNone = void 0;
    var beet9 = __importStar(require_beet());
    var beetSolana = __importStar(require_beet_solana());
    var isRuleSetToggleNone = (x) => x.__kind === "None";
    exports.isRuleSetToggleNone = isRuleSetToggleNone;
    var isRuleSetToggleClear = (x) => x.__kind === "Clear";
    exports.isRuleSetToggleClear = isRuleSetToggleClear;
    var isRuleSetToggleSet = (x) => x.__kind === "Set";
    exports.isRuleSetToggleSet = isRuleSetToggleSet;
    exports.ruleSetToggleBeet = beet9.dataEnum([
      ["None", beet9.unit],
      ["Clear", beet9.unit],
      [
        "Set",
        new beet9.BeetArgsStruct([["fields", beet9.fixedSizeTuple([beetSolana.publicKey])]], 'RuleSetToggleRecord["Set"]')
      ]
    ]);
  }
});

// ../../node_modules/@metaplex-foundation/mpl-token-metadata/dist/src/generated/types/UpdateArgs.js
var require_UpdateArgs = __commonJS({
  "../../node_modules/@metaplex-foundation/mpl-token-metadata/dist/src/generated/types/UpdateArgs.js"(exports) {
    "use strict";
    var __createBinding = exports && exports.__createBinding || (Object.create ? function(o2, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      var desc = Object.getOwnPropertyDescriptor(m, k);
      if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m[k];
        } };
      }
      Object.defineProperty(o2, k2, desc);
    } : function(o2, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      o2[k2] = m[k];
    });
    var __setModuleDefault = exports && exports.__setModuleDefault || (Object.create ? function(o2, v) {
      Object.defineProperty(o2, "default", { enumerable: true, value: v });
    } : function(o2, v) {
      o2["default"] = v;
    });
    var __importStar = exports && exports.__importStar || function(mod) {
      if (mod && mod.__esModule)
        return mod;
      var result = {};
      if (mod != null) {
        for (var k in mod)
          if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k))
            __createBinding(result, mod, k);
      }
      __setModuleDefault(result, mod);
      return result;
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.updateArgsBeet = exports.isUpdateArgsAsProgrammableConfigItemDelegateV2 = exports.isUpdateArgsAsCollectionItemDelegateV2 = exports.isUpdateArgsAsDataItemDelegateV2 = exports.isUpdateArgsAsProgrammableConfigDelegateV2 = exports.isUpdateArgsAsDataDelegateV2 = exports.isUpdateArgsAsCollectionDelegateV2 = exports.isUpdateArgsAsAuthorityItemDelegateV2 = exports.isUpdateArgsAsUpdateAuthorityV2 = exports.isUpdateArgsV1 = void 0;
    var beet9 = __importStar(require_beet());
    var beetSolana = __importStar(require_beet_solana());
    var Data_1 = require_Data();
    var CollectionToggle_1 = require_CollectionToggle();
    var CollectionDetailsToggle_1 = require_CollectionDetailsToggle();
    var UsesToggle_1 = require_UsesToggle();
    var RuleSetToggle_1 = require_RuleSetToggle();
    var AuthorizationData_1 = require_AuthorizationData();
    var TokenStandard_1 = require_TokenStandard();
    var isUpdateArgsV1 = (x) => x.__kind === "V1";
    exports.isUpdateArgsV1 = isUpdateArgsV1;
    var isUpdateArgsAsUpdateAuthorityV2 = (x) => x.__kind === "AsUpdateAuthorityV2";
    exports.isUpdateArgsAsUpdateAuthorityV2 = isUpdateArgsAsUpdateAuthorityV2;
    var isUpdateArgsAsAuthorityItemDelegateV2 = (x) => x.__kind === "AsAuthorityItemDelegateV2";
    exports.isUpdateArgsAsAuthorityItemDelegateV2 = isUpdateArgsAsAuthorityItemDelegateV2;
    var isUpdateArgsAsCollectionDelegateV2 = (x) => x.__kind === "AsCollectionDelegateV2";
    exports.isUpdateArgsAsCollectionDelegateV2 = isUpdateArgsAsCollectionDelegateV2;
    var isUpdateArgsAsDataDelegateV2 = (x) => x.__kind === "AsDataDelegateV2";
    exports.isUpdateArgsAsDataDelegateV2 = isUpdateArgsAsDataDelegateV2;
    var isUpdateArgsAsProgrammableConfigDelegateV2 = (x) => x.__kind === "AsProgrammableConfigDelegateV2";
    exports.isUpdateArgsAsProgrammableConfigDelegateV2 = isUpdateArgsAsProgrammableConfigDelegateV2;
    var isUpdateArgsAsDataItemDelegateV2 = (x) => x.__kind === "AsDataItemDelegateV2";
    exports.isUpdateArgsAsDataItemDelegateV2 = isUpdateArgsAsDataItemDelegateV2;
    var isUpdateArgsAsCollectionItemDelegateV2 = (x) => x.__kind === "AsCollectionItemDelegateV2";
    exports.isUpdateArgsAsCollectionItemDelegateV2 = isUpdateArgsAsCollectionItemDelegateV2;
    var isUpdateArgsAsProgrammableConfigItemDelegateV2 = (x) => x.__kind === "AsProgrammableConfigItemDelegateV2";
    exports.isUpdateArgsAsProgrammableConfigItemDelegateV2 = isUpdateArgsAsProgrammableConfigItemDelegateV2;
    exports.updateArgsBeet = beet9.dataEnum([
      [
        "V1",
        new beet9.FixableBeetArgsStruct([
          ["newUpdateAuthority", beet9.coption(beetSolana.publicKey)],
          ["data", beet9.coption(Data_1.dataBeet)],
          ["primarySaleHappened", beet9.coption(beet9.bool)],
          ["isMutable", beet9.coption(beet9.bool)],
          ["collection", CollectionToggle_1.collectionToggleBeet],
          ["collectionDetails", CollectionDetailsToggle_1.collectionDetailsToggleBeet],
          ["uses", UsesToggle_1.usesToggleBeet],
          ["ruleSet", RuleSetToggle_1.ruleSetToggleBeet],
          ["authorizationData", beet9.coption(AuthorizationData_1.authorizationDataBeet)]
        ], 'UpdateArgsRecord["V1"]')
      ],
      [
        "AsUpdateAuthorityV2",
        new beet9.FixableBeetArgsStruct([
          ["newUpdateAuthority", beet9.coption(beetSolana.publicKey)],
          ["data", beet9.coption(Data_1.dataBeet)],
          ["primarySaleHappened", beet9.coption(beet9.bool)],
          ["isMutable", beet9.coption(beet9.bool)],
          ["collection", CollectionToggle_1.collectionToggleBeet],
          ["collectionDetails", CollectionDetailsToggle_1.collectionDetailsToggleBeet],
          ["uses", UsesToggle_1.usesToggleBeet],
          ["ruleSet", RuleSetToggle_1.ruleSetToggleBeet],
          ["tokenStandard", beet9.coption(TokenStandard_1.tokenStandardBeet)],
          ["authorizationData", beet9.coption(AuthorizationData_1.authorizationDataBeet)]
        ], 'UpdateArgsRecord["AsUpdateAuthorityV2"]')
      ],
      [
        "AsAuthorityItemDelegateV2",
        new beet9.FixableBeetArgsStruct([
          ["newUpdateAuthority", beet9.coption(beetSolana.publicKey)],
          ["primarySaleHappened", beet9.coption(beet9.bool)],
          ["isMutable", beet9.coption(beet9.bool)],
          ["tokenStandard", beet9.coption(TokenStandard_1.tokenStandardBeet)],
          ["authorizationData", beet9.coption(AuthorizationData_1.authorizationDataBeet)]
        ], 'UpdateArgsRecord["AsAuthorityItemDelegateV2"]')
      ],
      [
        "AsCollectionDelegateV2",
        new beet9.FixableBeetArgsStruct([
          ["collection", CollectionToggle_1.collectionToggleBeet],
          ["authorizationData", beet9.coption(AuthorizationData_1.authorizationDataBeet)]
        ], 'UpdateArgsRecord["AsCollectionDelegateV2"]')
      ],
      [
        "AsDataDelegateV2",
        new beet9.FixableBeetArgsStruct([
          ["data", beet9.coption(Data_1.dataBeet)],
          ["authorizationData", beet9.coption(AuthorizationData_1.authorizationDataBeet)]
        ], 'UpdateArgsRecord["AsDataDelegateV2"]')
      ],
      [
        "AsProgrammableConfigDelegateV2",
        new beet9.FixableBeetArgsStruct([
          ["ruleSet", RuleSetToggle_1.ruleSetToggleBeet],
          ["authorizationData", beet9.coption(AuthorizationData_1.authorizationDataBeet)]
        ], 'UpdateArgsRecord["AsProgrammableConfigDelegateV2"]')
      ],
      [
        "AsDataItemDelegateV2",
        new beet9.FixableBeetArgsStruct([
          ["data", beet9.coption(Data_1.dataBeet)],
          ["authorizationData", beet9.coption(AuthorizationData_1.authorizationDataBeet)]
        ], 'UpdateArgsRecord["AsDataItemDelegateV2"]')
      ],
      [
        "AsCollectionItemDelegateV2",
        new beet9.FixableBeetArgsStruct([
          ["collection", CollectionToggle_1.collectionToggleBeet],
          ["authorizationData", beet9.coption(AuthorizationData_1.authorizationDataBeet)]
        ], 'UpdateArgsRecord["AsCollectionItemDelegateV2"]')
      ],
      [
        "AsProgrammableConfigItemDelegateV2",
        new beet9.FixableBeetArgsStruct([
          ["ruleSet", RuleSetToggle_1.ruleSetToggleBeet],
          ["authorizationData", beet9.coption(AuthorizationData_1.authorizationDataBeet)]
        ], 'UpdateArgsRecord["AsProgrammableConfigItemDelegateV2"]')
      ]
    ]);
  }
});

// ../../node_modules/@metaplex-foundation/mpl-token-metadata/dist/src/generated/instructions/Update.js
var require_Update = __commonJS({
  "../../node_modules/@metaplex-foundation/mpl-token-metadata/dist/src/generated/instructions/Update.js"(exports) {
    "use strict";
    var __createBinding = exports && exports.__createBinding || (Object.create ? function(o2, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      var desc = Object.getOwnPropertyDescriptor(m, k);
      if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m[k];
        } };
      }
      Object.defineProperty(o2, k2, desc);
    } : function(o2, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      o2[k2] = m[k];
    });
    var __setModuleDefault = exports && exports.__setModuleDefault || (Object.create ? function(o2, v) {
      Object.defineProperty(o2, "default", { enumerable: true, value: v });
    } : function(o2, v) {
      o2["default"] = v;
    });
    var __importStar = exports && exports.__importStar || function(mod) {
      if (mod && mod.__esModule)
        return mod;
      var result = {};
      if (mod != null) {
        for (var k in mod)
          if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k))
            __createBinding(result, mod, k);
      }
      __setModuleDefault(result, mod);
      return result;
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.createUpdateInstruction = exports.updateInstructionDiscriminator = exports.UpdateStruct = void 0;
    var beet9 = __importStar(require_beet());
    var web3 = __importStar((init_index_browser_esm(), __toCommonJS(index_browser_esm_exports)));
    var UpdateArgs_1 = require_UpdateArgs();
    exports.UpdateStruct = new beet9.FixableBeetArgsStruct([
      ["instructionDiscriminator", beet9.u8],
      ["updateArgs", UpdateArgs_1.updateArgsBeet]
    ], "UpdateInstructionArgs");
    exports.updateInstructionDiscriminator = 50;
    function createUpdateInstruction4(accounts, args, programId = new web3.PublicKey("metaqbxxUerdq28cj1RbAWkYQm3ybzjb6a8bt518x1s")) {
      var _a, _b, _c, _d, _e, _f;
      const [data] = exports.UpdateStruct.serialize(__spreadValues({
        instructionDiscriminator: exports.updateInstructionDiscriminator
      }, args));
      const keys = [
        {
          pubkey: accounts.authority,
          isWritable: false,
          isSigner: true
        },
        {
          pubkey: (_a = accounts.delegateRecord) !== null && _a !== void 0 ? _a : programId,
          isWritable: false,
          isSigner: false
        },
        {
          pubkey: (_b = accounts.token) !== null && _b !== void 0 ? _b : programId,
          isWritable: false,
          isSigner: false
        },
        {
          pubkey: accounts.mint,
          isWritable: false,
          isSigner: false
        },
        {
          pubkey: accounts.metadata,
          isWritable: true,
          isSigner: false
        },
        {
          pubkey: (_c = accounts.edition) !== null && _c !== void 0 ? _c : programId,
          isWritable: false,
          isSigner: false
        },
        {
          pubkey: accounts.payer,
          isWritable: true,
          isSigner: true
        },
        {
          pubkey: (_d = accounts.systemProgram) !== null && _d !== void 0 ? _d : web3.SystemProgram.programId,
          isWritable: false,
          isSigner: false
        },
        {
          pubkey: accounts.sysvarInstructions,
          isWritable: false,
          isSigner: false
        },
        {
          pubkey: (_e = accounts.authorizationRulesProgram) !== null && _e !== void 0 ? _e : programId,
          isWritable: false,
          isSigner: false
        },
        {
          pubkey: (_f = accounts.authorizationRules) !== null && _f !== void 0 ? _f : programId,
          isWritable: false,
          isSigner: false
        }
      ];
      const ix = new web3.TransactionInstruction({
        programId,
        keys,
        data
      });
      return ix;
    }
    exports.createUpdateInstruction = createUpdateInstruction4;
  }
});

// ../../node_modules/@metaplex-foundation/mpl-token-metadata/dist/src/generated/instructions/UpdateMetadataAccount.js
var require_UpdateMetadataAccount = __commonJS({
  "../../node_modules/@metaplex-foundation/mpl-token-metadata/dist/src/generated/instructions/UpdateMetadataAccount.js"(exports) {
    "use strict";
    var __createBinding = exports && exports.__createBinding || (Object.create ? function(o2, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      var desc = Object.getOwnPropertyDescriptor(m, k);
      if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m[k];
        } };
      }
      Object.defineProperty(o2, k2, desc);
    } : function(o2, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      o2[k2] = m[k];
    });
    var __setModuleDefault = exports && exports.__setModuleDefault || (Object.create ? function(o2, v) {
      Object.defineProperty(o2, "default", { enumerable: true, value: v });
    } : function(o2, v) {
      o2["default"] = v;
    });
    var __importStar = exports && exports.__importStar || function(mod) {
      if (mod && mod.__esModule)
        return mod;
      var result = {};
      if (mod != null) {
        for (var k in mod)
          if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k))
            __createBinding(result, mod, k);
      }
      __setModuleDefault(result, mod);
      return result;
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.createUpdateMetadataAccountInstruction = exports.updateMetadataAccountInstructionDiscriminator = exports.UpdateMetadataAccountStruct = void 0;
    var beet9 = __importStar(require_beet());
    var web3 = __importStar((init_index_browser_esm(), __toCommonJS(index_browser_esm_exports)));
    exports.UpdateMetadataAccountStruct = new beet9.BeetArgsStruct([["instructionDiscriminator", beet9.u8]], "UpdateMetadataAccountInstructionArgs");
    exports.updateMetadataAccountInstructionDiscriminator = 1;
    function createUpdateMetadataAccountInstruction(accounts, programId = new web3.PublicKey("metaqbxxUerdq28cj1RbAWkYQm3ybzjb6a8bt518x1s")) {
      const [data] = exports.UpdateMetadataAccountStruct.serialize({
        instructionDiscriminator: exports.updateMetadataAccountInstructionDiscriminator
      });
      const keys = [
        {
          pubkey: accounts.metadata,
          isWritable: true,
          isSigner: false
        },
        {
          pubkey: accounts.updateAuthority,
          isWritable: false,
          isSigner: true
        }
      ];
      const ix = new web3.TransactionInstruction({
        programId,
        keys,
        data
      });
      return ix;
    }
    exports.createUpdateMetadataAccountInstruction = createUpdateMetadataAccountInstruction;
  }
});

// ../../node_modules/@metaplex-foundation/mpl-token-metadata/dist/src/generated/types/UpdateMetadataAccountArgsV2.js
var require_UpdateMetadataAccountArgsV2 = __commonJS({
  "../../node_modules/@metaplex-foundation/mpl-token-metadata/dist/src/generated/types/UpdateMetadataAccountArgsV2.js"(exports) {
    "use strict";
    var __createBinding = exports && exports.__createBinding || (Object.create ? function(o2, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      var desc = Object.getOwnPropertyDescriptor(m, k);
      if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m[k];
        } };
      }
      Object.defineProperty(o2, k2, desc);
    } : function(o2, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      o2[k2] = m[k];
    });
    var __setModuleDefault = exports && exports.__setModuleDefault || (Object.create ? function(o2, v) {
      Object.defineProperty(o2, "default", { enumerable: true, value: v });
    } : function(o2, v) {
      o2["default"] = v;
    });
    var __importStar = exports && exports.__importStar || function(mod) {
      if (mod && mod.__esModule)
        return mod;
      var result = {};
      if (mod != null) {
        for (var k in mod)
          if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k))
            __createBinding(result, mod, k);
      }
      __setModuleDefault(result, mod);
      return result;
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.updateMetadataAccountArgsV2Beet = void 0;
    var beet9 = __importStar(require_beet());
    var beetSolana = __importStar(require_beet_solana());
    var DataV2_1 = require_DataV2();
    exports.updateMetadataAccountArgsV2Beet = new beet9.FixableBeetArgsStruct([
      ["data", beet9.coption(DataV2_1.dataV2Beet)],
      ["updateAuthority", beet9.coption(beetSolana.publicKey)],
      ["primarySaleHappened", beet9.coption(beet9.bool)],
      ["isMutable", beet9.coption(beet9.bool)]
    ], "UpdateMetadataAccountArgsV2");
  }
});

// ../../node_modules/@metaplex-foundation/mpl-token-metadata/dist/src/generated/instructions/UpdateMetadataAccountV2.js
var require_UpdateMetadataAccountV2 = __commonJS({
  "../../node_modules/@metaplex-foundation/mpl-token-metadata/dist/src/generated/instructions/UpdateMetadataAccountV2.js"(exports) {
    "use strict";
    var __createBinding = exports && exports.__createBinding || (Object.create ? function(o2, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      var desc = Object.getOwnPropertyDescriptor(m, k);
      if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m[k];
        } };
      }
      Object.defineProperty(o2, k2, desc);
    } : function(o2, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      o2[k2] = m[k];
    });
    var __setModuleDefault = exports && exports.__setModuleDefault || (Object.create ? function(o2, v) {
      Object.defineProperty(o2, "default", { enumerable: true, value: v });
    } : function(o2, v) {
      o2["default"] = v;
    });
    var __importStar = exports && exports.__importStar || function(mod) {
      if (mod && mod.__esModule)
        return mod;
      var result = {};
      if (mod != null) {
        for (var k in mod)
          if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k))
            __createBinding(result, mod, k);
      }
      __setModuleDefault(result, mod);
      return result;
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.createUpdateMetadataAccountV2Instruction = exports.updateMetadataAccountV2InstructionDiscriminator = exports.UpdateMetadataAccountV2Struct = void 0;
    var beet9 = __importStar(require_beet());
    var web3 = __importStar((init_index_browser_esm(), __toCommonJS(index_browser_esm_exports)));
    var UpdateMetadataAccountArgsV2_1 = require_UpdateMetadataAccountArgsV2();
    exports.UpdateMetadataAccountV2Struct = new beet9.FixableBeetArgsStruct([
      ["instructionDiscriminator", beet9.u8],
      ["updateMetadataAccountArgsV2", UpdateMetadataAccountArgsV2_1.updateMetadataAccountArgsV2Beet]
    ], "UpdateMetadataAccountV2InstructionArgs");
    exports.updateMetadataAccountV2InstructionDiscriminator = 15;
    function createUpdateMetadataAccountV2Instruction(accounts, args, programId = new web3.PublicKey("metaqbxxUerdq28cj1RbAWkYQm3ybzjb6a8bt518x1s")) {
      const [data] = exports.UpdateMetadataAccountV2Struct.serialize(__spreadValues({
        instructionDiscriminator: exports.updateMetadataAccountV2InstructionDiscriminator
      }, args));
      const keys = [
        {
          pubkey: accounts.metadata,
          isWritable: true,
          isSigner: false
        },
        {
          pubkey: accounts.updateAuthority,
          isWritable: false,
          isSigner: true
        }
      ];
      const ix = new web3.TransactionInstruction({
        programId,
        keys,
        data
      });
      return ix;
    }
    exports.createUpdateMetadataAccountV2Instruction = createUpdateMetadataAccountV2Instruction;
  }
});

// ../../node_modules/@metaplex-foundation/mpl-token-metadata/dist/src/generated/instructions/UpdatePrimarySaleHappenedViaToken.js
var require_UpdatePrimarySaleHappenedViaToken = __commonJS({
  "../../node_modules/@metaplex-foundation/mpl-token-metadata/dist/src/generated/instructions/UpdatePrimarySaleHappenedViaToken.js"(exports) {
    "use strict";
    var __createBinding = exports && exports.__createBinding || (Object.create ? function(o2, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      var desc = Object.getOwnPropertyDescriptor(m, k);
      if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m[k];
        } };
      }
      Object.defineProperty(o2, k2, desc);
    } : function(o2, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      o2[k2] = m[k];
    });
    var __setModuleDefault = exports && exports.__setModuleDefault || (Object.create ? function(o2, v) {
      Object.defineProperty(o2, "default", { enumerable: true, value: v });
    } : function(o2, v) {
      o2["default"] = v;
    });
    var __importStar = exports && exports.__importStar || function(mod) {
      if (mod && mod.__esModule)
        return mod;
      var result = {};
      if (mod != null) {
        for (var k in mod)
          if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k))
            __createBinding(result, mod, k);
      }
      __setModuleDefault(result, mod);
      return result;
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.createUpdatePrimarySaleHappenedViaTokenInstruction = exports.updatePrimarySaleHappenedViaTokenInstructionDiscriminator = exports.UpdatePrimarySaleHappenedViaTokenStruct = void 0;
    var beet9 = __importStar(require_beet());
    var web3 = __importStar((init_index_browser_esm(), __toCommonJS(index_browser_esm_exports)));
    exports.UpdatePrimarySaleHappenedViaTokenStruct = new beet9.BeetArgsStruct([["instructionDiscriminator", beet9.u8]], "UpdatePrimarySaleHappenedViaTokenInstructionArgs");
    exports.updatePrimarySaleHappenedViaTokenInstructionDiscriminator = 4;
    function createUpdatePrimarySaleHappenedViaTokenInstruction(accounts, programId = new web3.PublicKey("metaqbxxUerdq28cj1RbAWkYQm3ybzjb6a8bt518x1s")) {
      const [data] = exports.UpdatePrimarySaleHappenedViaTokenStruct.serialize({
        instructionDiscriminator: exports.updatePrimarySaleHappenedViaTokenInstructionDiscriminator
      });
      const keys = [
        {
          pubkey: accounts.metadata,
          isWritable: true,
          isSigner: false
        },
        {
          pubkey: accounts.owner,
          isWritable: false,
          isSigner: true
        },
        {
          pubkey: accounts.token,
          isWritable: false,
          isSigner: false
        }
      ];
      const ix = new web3.TransactionInstruction({
        programId,
        keys,
        data
      });
      return ix;
    }
    exports.createUpdatePrimarySaleHappenedViaTokenInstruction = createUpdatePrimarySaleHappenedViaTokenInstruction;
  }
});

// ../../node_modules/@metaplex-foundation/mpl-token-metadata/dist/src/generated/types/UseArgs.js
var require_UseArgs = __commonJS({
  "../../node_modules/@metaplex-foundation/mpl-token-metadata/dist/src/generated/types/UseArgs.js"(exports) {
    "use strict";
    var __createBinding = exports && exports.__createBinding || (Object.create ? function(o2, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      var desc = Object.getOwnPropertyDescriptor(m, k);
      if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m[k];
        } };
      }
      Object.defineProperty(o2, k2, desc);
    } : function(o2, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      o2[k2] = m[k];
    });
    var __setModuleDefault = exports && exports.__setModuleDefault || (Object.create ? function(o2, v) {
      Object.defineProperty(o2, "default", { enumerable: true, value: v });
    } : function(o2, v) {
      o2["default"] = v;
    });
    var __importStar = exports && exports.__importStar || function(mod) {
      if (mod && mod.__esModule)
        return mod;
      var result = {};
      if (mod != null) {
        for (var k in mod)
          if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k))
            __createBinding(result, mod, k);
      }
      __setModuleDefault(result, mod);
      return result;
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.useArgsBeet = exports.isUseArgsV1 = void 0;
    var beet9 = __importStar(require_beet());
    var AuthorizationData_1 = require_AuthorizationData();
    var isUseArgsV1 = (x) => x.__kind === "V1";
    exports.isUseArgsV1 = isUseArgsV1;
    exports.useArgsBeet = beet9.dataEnum([
      [
        "V1",
        new beet9.FixableBeetArgsStruct([["authorizationData", beet9.coption(AuthorizationData_1.authorizationDataBeet)]], 'UseArgsRecord["V1"]')
      ]
    ]);
  }
});

// ../../node_modules/@metaplex-foundation/mpl-token-metadata/dist/src/generated/instructions/Use.js
var require_Use = __commonJS({
  "../../node_modules/@metaplex-foundation/mpl-token-metadata/dist/src/generated/instructions/Use.js"(exports) {
    "use strict";
    var __createBinding = exports && exports.__createBinding || (Object.create ? function(o2, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      var desc = Object.getOwnPropertyDescriptor(m, k);
      if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m[k];
        } };
      }
      Object.defineProperty(o2, k2, desc);
    } : function(o2, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      o2[k2] = m[k];
    });
    var __setModuleDefault = exports && exports.__setModuleDefault || (Object.create ? function(o2, v) {
      Object.defineProperty(o2, "default", { enumerable: true, value: v });
    } : function(o2, v) {
      o2["default"] = v;
    });
    var __importStar = exports && exports.__importStar || function(mod) {
      if (mod && mod.__esModule)
        return mod;
      var result = {};
      if (mod != null) {
        for (var k in mod)
          if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k))
            __createBinding(result, mod, k);
      }
      __setModuleDefault(result, mod);
      return result;
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.createUseInstruction = exports.useInstructionDiscriminator = exports.UseStruct = void 0;
    var beet9 = __importStar(require_beet());
    var web3 = __importStar((init_index_browser_esm(), __toCommonJS(index_browser_esm_exports)));
    var UseArgs_1 = require_UseArgs();
    exports.UseStruct = new beet9.FixableBeetArgsStruct([
      ["instructionDiscriminator", beet9.u8],
      ["useArgs", UseArgs_1.useArgsBeet]
    ], "UseInstructionArgs");
    exports.useInstructionDiscriminator = 51;
    function createUseInstruction(accounts, args, programId = new web3.PublicKey("metaqbxxUerdq28cj1RbAWkYQm3ybzjb6a8bt518x1s")) {
      var _a, _b, _c, _d, _e, _f, _g;
      const [data] = exports.UseStruct.serialize(__spreadValues({
        instructionDiscriminator: exports.useInstructionDiscriminator
      }, args));
      const keys = [
        {
          pubkey: accounts.authority,
          isWritable: false,
          isSigner: true
        },
        {
          pubkey: (_a = accounts.delegateRecord) !== null && _a !== void 0 ? _a : programId,
          isWritable: accounts.delegateRecord != null,
          isSigner: false
        },
        {
          pubkey: (_b = accounts.token) !== null && _b !== void 0 ? _b : programId,
          isWritable: accounts.token != null,
          isSigner: false
        },
        {
          pubkey: accounts.mint,
          isWritable: false,
          isSigner: false
        },
        {
          pubkey: accounts.metadata,
          isWritable: true,
          isSigner: false
        },
        {
          pubkey: (_c = accounts.edition) !== null && _c !== void 0 ? _c : programId,
          isWritable: accounts.edition != null,
          isSigner: false
        },
        {
          pubkey: accounts.payer,
          isWritable: false,
          isSigner: true
        },
        {
          pubkey: (_d = accounts.systemProgram) !== null && _d !== void 0 ? _d : web3.SystemProgram.programId,
          isWritable: false,
          isSigner: false
        },
        {
          pubkey: accounts.sysvarInstructions,
          isWritable: false,
          isSigner: false
        },
        {
          pubkey: (_e = accounts.splTokenProgram) !== null && _e !== void 0 ? _e : programId,
          isWritable: false,
          isSigner: false
        },
        {
          pubkey: (_f = accounts.authorizationRulesProgram) !== null && _f !== void 0 ? _f : programId,
          isWritable: false,
          isSigner: false
        },
        {
          pubkey: (_g = accounts.authorizationRules) !== null && _g !== void 0 ? _g : programId,
          isWritable: false,
          isSigner: false
        }
      ];
      const ix = new web3.TransactionInstruction({
        programId,
        keys,
        data
      });
      return ix;
    }
    exports.createUseInstruction = createUseInstruction;
  }
});

// ../../node_modules/@metaplex-foundation/mpl-token-metadata/dist/src/generated/types/UtilizeArgs.js
var require_UtilizeArgs = __commonJS({
  "../../node_modules/@metaplex-foundation/mpl-token-metadata/dist/src/generated/types/UtilizeArgs.js"(exports) {
    "use strict";
    var __createBinding = exports && exports.__createBinding || (Object.create ? function(o2, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      var desc = Object.getOwnPropertyDescriptor(m, k);
      if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m[k];
        } };
      }
      Object.defineProperty(o2, k2, desc);
    } : function(o2, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      o2[k2] = m[k];
    });
    var __setModuleDefault = exports && exports.__setModuleDefault || (Object.create ? function(o2, v) {
      Object.defineProperty(o2, "default", { enumerable: true, value: v });
    } : function(o2, v) {
      o2["default"] = v;
    });
    var __importStar = exports && exports.__importStar || function(mod) {
      if (mod && mod.__esModule)
        return mod;
      var result = {};
      if (mod != null) {
        for (var k in mod)
          if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k))
            __createBinding(result, mod, k);
      }
      __setModuleDefault(result, mod);
      return result;
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.utilizeArgsBeet = void 0;
    var beet9 = __importStar(require_beet());
    exports.utilizeArgsBeet = new beet9.BeetArgsStruct([["numberOfUses", beet9.u64]], "UtilizeArgs");
  }
});

// ../../node_modules/@metaplex-foundation/mpl-token-metadata/dist/src/generated/instructions/Utilize.js
var require_Utilize = __commonJS({
  "../../node_modules/@metaplex-foundation/mpl-token-metadata/dist/src/generated/instructions/Utilize.js"(exports) {
    "use strict";
    var __createBinding = exports && exports.__createBinding || (Object.create ? function(o2, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      var desc = Object.getOwnPropertyDescriptor(m, k);
      if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m[k];
        } };
      }
      Object.defineProperty(o2, k2, desc);
    } : function(o2, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      o2[k2] = m[k];
    });
    var __setModuleDefault = exports && exports.__setModuleDefault || (Object.create ? function(o2, v) {
      Object.defineProperty(o2, "default", { enumerable: true, value: v });
    } : function(o2, v) {
      o2["default"] = v;
    });
    var __importStar = exports && exports.__importStar || function(mod) {
      if (mod && mod.__esModule)
        return mod;
      var result = {};
      if (mod != null) {
        for (var k in mod)
          if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k))
            __createBinding(result, mod, k);
      }
      __setModuleDefault(result, mod);
      return result;
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.createUtilizeInstruction = exports.utilizeInstructionDiscriminator = exports.UtilizeStruct = void 0;
    var splToken = __importStar(require_cjs4());
    var beet9 = __importStar(require_beet());
    var web3 = __importStar((init_index_browser_esm(), __toCommonJS(index_browser_esm_exports)));
    var UtilizeArgs_1 = require_UtilizeArgs();
    exports.UtilizeStruct = new beet9.BeetArgsStruct([
      ["instructionDiscriminator", beet9.u8],
      ["utilizeArgs", UtilizeArgs_1.utilizeArgsBeet]
    ], "UtilizeInstructionArgs");
    exports.utilizeInstructionDiscriminator = 19;
    function createUtilizeInstruction2(accounts, args, programId = new web3.PublicKey("metaqbxxUerdq28cj1RbAWkYQm3ybzjb6a8bt518x1s")) {
      var _a, _b, _c, _d;
      const [data] = exports.UtilizeStruct.serialize(__spreadValues({
        instructionDiscriminator: exports.utilizeInstructionDiscriminator
      }, args));
      const keys = [
        {
          pubkey: accounts.metadata,
          isWritable: true,
          isSigner: false
        },
        {
          pubkey: accounts.tokenAccount,
          isWritable: true,
          isSigner: false
        },
        {
          pubkey: accounts.mint,
          isWritable: true,
          isSigner: false
        },
        {
          pubkey: accounts.useAuthority,
          isWritable: true,
          isSigner: true
        },
        {
          pubkey: accounts.owner,
          isWritable: false,
          isSigner: false
        },
        {
          pubkey: (_a = accounts.tokenProgram) !== null && _a !== void 0 ? _a : splToken.TOKEN_PROGRAM_ID,
          isWritable: false,
          isSigner: false
        },
        {
          pubkey: (_b = accounts.ataProgram) !== null && _b !== void 0 ? _b : splToken.ASSOCIATED_TOKEN_PROGRAM_ID,
          isWritable: false,
          isSigner: false
        },
        {
          pubkey: (_c = accounts.systemProgram) !== null && _c !== void 0 ? _c : web3.SystemProgram.programId,
          isWritable: false,
          isSigner: false
        },
        {
          pubkey: (_d = accounts.rent) !== null && _d !== void 0 ? _d : web3.SYSVAR_RENT_PUBKEY,
          isWritable: false,
          isSigner: false
        }
      ];
      if (accounts.useAuthorityRecord != null) {
        keys.push({
          pubkey: accounts.useAuthorityRecord,
          isWritable: true,
          isSigner: false
        });
      }
      if (accounts.burner != null) {
        if (accounts.useAuthorityRecord == null) {
          throw new Error("When providing 'burner' then 'accounts.useAuthorityRecord' need(s) to be provided as well.");
        }
        keys.push({
          pubkey: accounts.burner,
          isWritable: false,
          isSigner: false
        });
      }
      const ix = new web3.TransactionInstruction({
        programId,
        keys,
        data
      });
      return ix;
    }
    exports.createUtilizeInstruction = createUtilizeInstruction2;
  }
});

// ../../node_modules/@metaplex-foundation/mpl-token-metadata/dist/src/generated/instructions/Verify.js
var require_Verify = __commonJS({
  "../../node_modules/@metaplex-foundation/mpl-token-metadata/dist/src/generated/instructions/Verify.js"(exports) {
    "use strict";
    var __createBinding = exports && exports.__createBinding || (Object.create ? function(o2, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      var desc = Object.getOwnPropertyDescriptor(m, k);
      if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m[k];
        } };
      }
      Object.defineProperty(o2, k2, desc);
    } : function(o2, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      o2[k2] = m[k];
    });
    var __setModuleDefault = exports && exports.__setModuleDefault || (Object.create ? function(o2, v) {
      Object.defineProperty(o2, "default", { enumerable: true, value: v });
    } : function(o2, v) {
      o2["default"] = v;
    });
    var __importStar = exports && exports.__importStar || function(mod) {
      if (mod && mod.__esModule)
        return mod;
      var result = {};
      if (mod != null) {
        for (var k in mod)
          if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k))
            __createBinding(result, mod, k);
      }
      __setModuleDefault(result, mod);
      return result;
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.createVerifyInstruction = exports.verifyInstructionDiscriminator = exports.VerifyStruct = void 0;
    var beet9 = __importStar(require_beet());
    var web3 = __importStar((init_index_browser_esm(), __toCommonJS(index_browser_esm_exports)));
    var VerificationArgs_1 = require_VerificationArgs();
    exports.VerifyStruct = new beet9.BeetArgsStruct([
      ["instructionDiscriminator", beet9.u8],
      ["verificationArgs", VerificationArgs_1.verificationArgsBeet]
    ], "VerifyInstructionArgs");
    exports.verifyInstructionDiscriminator = 52;
    function createVerifyInstruction3(accounts, args, programId = new web3.PublicKey("metaqbxxUerdq28cj1RbAWkYQm3ybzjb6a8bt518x1s")) {
      var _a, _b, _c, _d, _e;
      const [data] = exports.VerifyStruct.serialize(__spreadValues({
        instructionDiscriminator: exports.verifyInstructionDiscriminator
      }, args));
      const keys = [
        {
          pubkey: accounts.authority,
          isWritable: false,
          isSigner: true
        },
        {
          pubkey: (_a = accounts.delegateRecord) !== null && _a !== void 0 ? _a : programId,
          isWritable: false,
          isSigner: false
        },
        {
          pubkey: accounts.metadata,
          isWritable: true,
          isSigner: false
        },
        {
          pubkey: (_b = accounts.collectionMint) !== null && _b !== void 0 ? _b : programId,
          isWritable: false,
          isSigner: false
        },
        {
          pubkey: (_c = accounts.collectionMetadata) !== null && _c !== void 0 ? _c : programId,
          isWritable: accounts.collectionMetadata != null,
          isSigner: false
        },
        {
          pubkey: (_d = accounts.collectionMasterEdition) !== null && _d !== void 0 ? _d : programId,
          isWritable: false,
          isSigner: false
        },
        {
          pubkey: (_e = accounts.systemProgram) !== null && _e !== void 0 ? _e : web3.SystemProgram.programId,
          isWritable: false,
          isSigner: false
        },
        {
          pubkey: accounts.sysvarInstructions,
          isWritable: false,
          isSigner: false
        }
      ];
      const ix = new web3.TransactionInstruction({
        programId,
        keys,
        data
      });
      return ix;
    }
    exports.createVerifyInstruction = createVerifyInstruction3;
  }
});

// ../../node_modules/@metaplex-foundation/mpl-token-metadata/dist/src/generated/instructions/VerifyCollection.js
var require_VerifyCollection = __commonJS({
  "../../node_modules/@metaplex-foundation/mpl-token-metadata/dist/src/generated/instructions/VerifyCollection.js"(exports) {
    "use strict";
    var __createBinding = exports && exports.__createBinding || (Object.create ? function(o2, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      var desc = Object.getOwnPropertyDescriptor(m, k);
      if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m[k];
        } };
      }
      Object.defineProperty(o2, k2, desc);
    } : function(o2, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      o2[k2] = m[k];
    });
    var __setModuleDefault = exports && exports.__setModuleDefault || (Object.create ? function(o2, v) {
      Object.defineProperty(o2, "default", { enumerable: true, value: v });
    } : function(o2, v) {
      o2["default"] = v;
    });
    var __importStar = exports && exports.__importStar || function(mod) {
      if (mod && mod.__esModule)
        return mod;
      var result = {};
      if (mod != null) {
        for (var k in mod)
          if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k))
            __createBinding(result, mod, k);
      }
      __setModuleDefault(result, mod);
      return result;
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.createVerifyCollectionInstruction = exports.verifyCollectionInstructionDiscriminator = exports.VerifyCollectionStruct = void 0;
    var beet9 = __importStar(require_beet());
    var web3 = __importStar((init_index_browser_esm(), __toCommonJS(index_browser_esm_exports)));
    exports.VerifyCollectionStruct = new beet9.BeetArgsStruct([["instructionDiscriminator", beet9.u8]], "VerifyCollectionInstructionArgs");
    exports.verifyCollectionInstructionDiscriminator = 18;
    function createVerifyCollectionInstruction2(accounts, programId = new web3.PublicKey("metaqbxxUerdq28cj1RbAWkYQm3ybzjb6a8bt518x1s")) {
      const [data] = exports.VerifyCollectionStruct.serialize({
        instructionDiscriminator: exports.verifyCollectionInstructionDiscriminator
      });
      const keys = [
        {
          pubkey: accounts.metadata,
          isWritable: true,
          isSigner: false
        },
        {
          pubkey: accounts.collectionAuthority,
          isWritable: true,
          isSigner: true
        },
        {
          pubkey: accounts.payer,
          isWritable: true,
          isSigner: true
        },
        {
          pubkey: accounts.collectionMint,
          isWritable: false,
          isSigner: false
        },
        {
          pubkey: accounts.collection,
          isWritable: false,
          isSigner: false
        },
        {
          pubkey: accounts.collectionMasterEditionAccount,
          isWritable: false,
          isSigner: false
        }
      ];
      if (accounts.collectionAuthorityRecord != null) {
        keys.push({
          pubkey: accounts.collectionAuthorityRecord,
          isWritable: false,
          isSigner: false
        });
      }
      const ix = new web3.TransactionInstruction({
        programId,
        keys,
        data
      });
      return ix;
    }
    exports.createVerifyCollectionInstruction = createVerifyCollectionInstruction2;
  }
});

// ../../node_modules/@metaplex-foundation/mpl-token-metadata/dist/src/generated/instructions/VerifySizedCollectionItem.js
var require_VerifySizedCollectionItem = __commonJS({
  "../../node_modules/@metaplex-foundation/mpl-token-metadata/dist/src/generated/instructions/VerifySizedCollectionItem.js"(exports) {
    "use strict";
    var __createBinding = exports && exports.__createBinding || (Object.create ? function(o2, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      var desc = Object.getOwnPropertyDescriptor(m, k);
      if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m[k];
        } };
      }
      Object.defineProperty(o2, k2, desc);
    } : function(o2, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      o2[k2] = m[k];
    });
    var __setModuleDefault = exports && exports.__setModuleDefault || (Object.create ? function(o2, v) {
      Object.defineProperty(o2, "default", { enumerable: true, value: v });
    } : function(o2, v) {
      o2["default"] = v;
    });
    var __importStar = exports && exports.__importStar || function(mod) {
      if (mod && mod.__esModule)
        return mod;
      var result = {};
      if (mod != null) {
        for (var k in mod)
          if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k))
            __createBinding(result, mod, k);
      }
      __setModuleDefault(result, mod);
      return result;
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.createVerifySizedCollectionItemInstruction = exports.verifySizedCollectionItemInstructionDiscriminator = exports.VerifySizedCollectionItemStruct = void 0;
    var beet9 = __importStar(require_beet());
    var web3 = __importStar((init_index_browser_esm(), __toCommonJS(index_browser_esm_exports)));
    exports.VerifySizedCollectionItemStruct = new beet9.BeetArgsStruct([["instructionDiscriminator", beet9.u8]], "VerifySizedCollectionItemInstructionArgs");
    exports.verifySizedCollectionItemInstructionDiscriminator = 30;
    function createVerifySizedCollectionItemInstruction2(accounts, programId = new web3.PublicKey("metaqbxxUerdq28cj1RbAWkYQm3ybzjb6a8bt518x1s")) {
      const [data] = exports.VerifySizedCollectionItemStruct.serialize({
        instructionDiscriminator: exports.verifySizedCollectionItemInstructionDiscriminator
      });
      const keys = [
        {
          pubkey: accounts.metadata,
          isWritable: true,
          isSigner: false
        },
        {
          pubkey: accounts.collectionAuthority,
          isWritable: false,
          isSigner: true
        },
        {
          pubkey: accounts.payer,
          isWritable: true,
          isSigner: true
        },
        {
          pubkey: accounts.collectionMint,
          isWritable: false,
          isSigner: false
        },
        {
          pubkey: accounts.collection,
          isWritable: true,
          isSigner: false
        },
        {
          pubkey: accounts.collectionMasterEditionAccount,
          isWritable: false,
          isSigner: false
        }
      ];
      if (accounts.collectionAuthorityRecord != null) {
        keys.push({
          pubkey: accounts.collectionAuthorityRecord,
          isWritable: false,
          isSigner: false
        });
      }
      const ix = new web3.TransactionInstruction({
        programId,
        keys,
        data
      });
      return ix;
    }
    exports.createVerifySizedCollectionItemInstruction = createVerifySizedCollectionItemInstruction2;
  }
});

// ../../node_modules/@metaplex-foundation/mpl-token-metadata/dist/src/generated/instructions/index.js
var require_instructions9 = __commonJS({
  "../../node_modules/@metaplex-foundation/mpl-token-metadata/dist/src/generated/instructions/index.js"(exports) {
    "use strict";
    var __createBinding = exports && exports.__createBinding || (Object.create ? function(o2, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      var desc = Object.getOwnPropertyDescriptor(m, k);
      if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m[k];
        } };
      }
      Object.defineProperty(o2, k2, desc);
    } : function(o2, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      o2[k2] = m[k];
    });
    var __exportStar = exports && exports.__exportStar || function(m, exports2) {
      for (var p in m)
        if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports2, p))
          __createBinding(exports2, m, p);
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    __exportStar(require_ApproveCollectionAuthority(), exports);
    __exportStar(require_ApproveUseAuthority(), exports);
    __exportStar(require_BubblegumSetCollectionSize(), exports);
    __exportStar(require_Burn(), exports);
    __exportStar(require_BurnEditionNft(), exports);
    __exportStar(require_BurnNft(), exports);
    __exportStar(require_CloseEscrowAccount(), exports);
    __exportStar(require_Collect(), exports);
    __exportStar(require_ConvertMasterEditionV1ToV2(), exports);
    __exportStar(require_Create(), exports);
    __exportStar(require_CreateEscrowAccount(), exports);
    __exportStar(require_CreateMasterEdition(), exports);
    __exportStar(require_CreateMasterEditionV3(), exports);
    __exportStar(require_CreateMetadataAccount(), exports);
    __exportStar(require_CreateMetadataAccountV2(), exports);
    __exportStar(require_CreateMetadataAccountV3(), exports);
    __exportStar(require_Delegate(), exports);
    __exportStar(require_DeprecatedCreateMasterEdition(), exports);
    __exportStar(require_DeprecatedCreateReservationList(), exports);
    __exportStar(require_DeprecatedMintNewEditionFromMasterEditionViaPrintingToken(), exports);
    __exportStar(require_DeprecatedMintPrintingTokens(), exports);
    __exportStar(require_DeprecatedMintPrintingTokensViaToken(), exports);
    __exportStar(require_DeprecatedSetReservationList(), exports);
    __exportStar(require_FreezeDelegatedAccount(), exports);
    __exportStar(require_Lock(), exports);
    __exportStar(require_Migrate(), exports);
    __exportStar(require_Mint(), exports);
    __exportStar(require_MintNewEditionFromMasterEditionViaToken(), exports);
    __exportStar(require_MintNewEditionFromMasterEditionViaVaultProxy(), exports);
    __exportStar(require_Print(), exports);
    __exportStar(require_PuffMetadata(), exports);
    __exportStar(require_RemoveCreatorVerification(), exports);
    __exportStar(require_Revoke(), exports);
    __exportStar(require_RevokeCollectionAuthority(), exports);
    __exportStar(require_RevokeUseAuthority(), exports);
    __exportStar(require_SetAndVerifyCollection(), exports);
    __exportStar(require_SetAndVerifySizedCollectionItem(), exports);
    __exportStar(require_SetCollectionSize(), exports);
    __exportStar(require_SetTokenStandard(), exports);
    __exportStar(require_SignMetadata(), exports);
    __exportStar(require_ThawDelegatedAccount(), exports);
    __exportStar(require_Transfer(), exports);
    __exportStar(require_TransferOutOfEscrow(), exports);
    __exportStar(require_Unlock(), exports);
    __exportStar(require_Unverify(), exports);
    __exportStar(require_UnverifyCollection(), exports);
    __exportStar(require_UnverifySizedCollectionItem(), exports);
    __exportStar(require_Update(), exports);
    __exportStar(require_UpdateMetadataAccount(), exports);
    __exportStar(require_UpdateMetadataAccountV2(), exports);
    __exportStar(require_UpdatePrimarySaleHappenedViaToken(), exports);
    __exportStar(require_Use(), exports);
    __exportStar(require_Utilize(), exports);
    __exportStar(require_Verify(), exports);
    __exportStar(require_VerifyCollection(), exports);
    __exportStar(require_VerifySizedCollectionItem(), exports);
  }
});

// ../../node_modules/@metaplex-foundation/mpl-token-metadata/dist/src/generated/types/AuthorityType.js
var require_AuthorityType = __commonJS({
  "../../node_modules/@metaplex-foundation/mpl-token-metadata/dist/src/generated/types/AuthorityType.js"(exports) {
    "use strict";
    var __createBinding = exports && exports.__createBinding || (Object.create ? function(o2, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      var desc = Object.getOwnPropertyDescriptor(m, k);
      if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m[k];
        } };
      }
      Object.defineProperty(o2, k2, desc);
    } : function(o2, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      o2[k2] = m[k];
    });
    var __setModuleDefault = exports && exports.__setModuleDefault || (Object.create ? function(o2, v) {
      Object.defineProperty(o2, "default", { enumerable: true, value: v });
    } : function(o2, v) {
      o2["default"] = v;
    });
    var __importStar = exports && exports.__importStar || function(mod) {
      if (mod && mod.__esModule)
        return mod;
      var result = {};
      if (mod != null) {
        for (var k in mod)
          if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k))
            __createBinding(result, mod, k);
      }
      __setModuleDefault(result, mod);
      return result;
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.authorityTypeBeet = exports.AuthorityType = void 0;
    var beet9 = __importStar(require_beet());
    var AuthorityType3;
    (function(AuthorityType4) {
      AuthorityType4[AuthorityType4["None"] = 0] = "None";
      AuthorityType4[AuthorityType4["Metadata"] = 1] = "Metadata";
      AuthorityType4[AuthorityType4["Holder"] = 2] = "Holder";
      AuthorityType4[AuthorityType4["MetadataDelegate"] = 3] = "MetadataDelegate";
      AuthorityType4[AuthorityType4["TokenDelegate"] = 4] = "TokenDelegate";
    })(AuthorityType3 = exports.AuthorityType || (exports.AuthorityType = {}));
    exports.authorityTypeBeet = beet9.fixedScalarEnum(AuthorityType3);
  }
});

// ../../node_modules/@metaplex-foundation/mpl-token-metadata/dist/src/generated/types/MetadataDelegateRole.js
var require_MetadataDelegateRole = __commonJS({
  "../../node_modules/@metaplex-foundation/mpl-token-metadata/dist/src/generated/types/MetadataDelegateRole.js"(exports) {
    "use strict";
    var __createBinding = exports && exports.__createBinding || (Object.create ? function(o2, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      var desc = Object.getOwnPropertyDescriptor(m, k);
      if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m[k];
        } };
      }
      Object.defineProperty(o2, k2, desc);
    } : function(o2, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      o2[k2] = m[k];
    });
    var __setModuleDefault = exports && exports.__setModuleDefault || (Object.create ? function(o2, v) {
      Object.defineProperty(o2, "default", { enumerable: true, value: v });
    } : function(o2, v) {
      o2["default"] = v;
    });
    var __importStar = exports && exports.__importStar || function(mod) {
      if (mod && mod.__esModule)
        return mod;
      var result = {};
      if (mod != null) {
        for (var k in mod)
          if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k))
            __createBinding(result, mod, k);
      }
      __setModuleDefault(result, mod);
      return result;
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.metadataDelegateRoleBeet = exports.MetadataDelegateRole = void 0;
    var beet9 = __importStar(require_beet());
    var MetadataDelegateRole2;
    (function(MetadataDelegateRole3) {
      MetadataDelegateRole3[MetadataDelegateRole3["AuthorityItem"] = 0] = "AuthorityItem";
      MetadataDelegateRole3[MetadataDelegateRole3["Collection"] = 1] = "Collection";
      MetadataDelegateRole3[MetadataDelegateRole3["Use"] = 2] = "Use";
      MetadataDelegateRole3[MetadataDelegateRole3["Data"] = 3] = "Data";
      MetadataDelegateRole3[MetadataDelegateRole3["ProgrammableConfig"] = 4] = "ProgrammableConfig";
      MetadataDelegateRole3[MetadataDelegateRole3["DataItem"] = 5] = "DataItem";
      MetadataDelegateRole3[MetadataDelegateRole3["CollectionItem"] = 6] = "CollectionItem";
      MetadataDelegateRole3[MetadataDelegateRole3["ProgrammableConfigItem"] = 7] = "ProgrammableConfigItem";
    })(MetadataDelegateRole2 = exports.MetadataDelegateRole || (exports.MetadataDelegateRole = {}));
    exports.metadataDelegateRoleBeet = beet9.fixedScalarEnum(MetadataDelegateRole2);
  }
});

// ../../node_modules/@metaplex-foundation/mpl-token-metadata/dist/src/generated/types/MigrationType.js
var require_MigrationType = __commonJS({
  "../../node_modules/@metaplex-foundation/mpl-token-metadata/dist/src/generated/types/MigrationType.js"(exports) {
    "use strict";
    var __createBinding = exports && exports.__createBinding || (Object.create ? function(o2, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      var desc = Object.getOwnPropertyDescriptor(m, k);
      if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m[k];
        } };
      }
      Object.defineProperty(o2, k2, desc);
    } : function(o2, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      o2[k2] = m[k];
    });
    var __setModuleDefault = exports && exports.__setModuleDefault || (Object.create ? function(o2, v) {
      Object.defineProperty(o2, "default", { enumerable: true, value: v });
    } : function(o2, v) {
      o2["default"] = v;
    });
    var __importStar = exports && exports.__importStar || function(mod) {
      if (mod && mod.__esModule)
        return mod;
      var result = {};
      if (mod != null) {
        for (var k in mod)
          if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k))
            __createBinding(result, mod, k);
      }
      __setModuleDefault(result, mod);
      return result;
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.migrationTypeBeet = exports.MigrationType = void 0;
    var beet9 = __importStar(require_beet());
    var MigrationType;
    (function(MigrationType2) {
      MigrationType2[MigrationType2["CollectionV1"] = 0] = "CollectionV1";
      MigrationType2[MigrationType2["ProgrammableV1"] = 1] = "ProgrammableV1";
    })(MigrationType = exports.MigrationType || (exports.MigrationType = {}));
    exports.migrationTypeBeet = beet9.fixedScalarEnum(MigrationType);
  }
});

// ../../node_modules/@metaplex-foundation/mpl-token-metadata/dist/src/generated/types/PayloadKey.js
var require_PayloadKey = __commonJS({
  "../../node_modules/@metaplex-foundation/mpl-token-metadata/dist/src/generated/types/PayloadKey.js"(exports) {
    "use strict";
    var __createBinding = exports && exports.__createBinding || (Object.create ? function(o2, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      var desc = Object.getOwnPropertyDescriptor(m, k);
      if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m[k];
        } };
      }
      Object.defineProperty(o2, k2, desc);
    } : function(o2, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      o2[k2] = m[k];
    });
    var __setModuleDefault = exports && exports.__setModuleDefault || (Object.create ? function(o2, v) {
      Object.defineProperty(o2, "default", { enumerable: true, value: v });
    } : function(o2, v) {
      o2["default"] = v;
    });
    var __importStar = exports && exports.__importStar || function(mod) {
      if (mod && mod.__esModule)
        return mod;
      var result = {};
      if (mod != null) {
        for (var k in mod)
          if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k))
            __createBinding(result, mod, k);
      }
      __setModuleDefault(result, mod);
      return result;
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.payloadKeyBeet = exports.PayloadKey = void 0;
    var beet9 = __importStar(require_beet());
    var PayloadKey;
    (function(PayloadKey2) {
      PayloadKey2[PayloadKey2["Amount"] = 0] = "Amount";
      PayloadKey2[PayloadKey2["Authority"] = 1] = "Authority";
      PayloadKey2[PayloadKey2["AuthoritySeeds"] = 2] = "AuthoritySeeds";
      PayloadKey2[PayloadKey2["Delegate"] = 3] = "Delegate";
      PayloadKey2[PayloadKey2["DelegateSeeds"] = 4] = "DelegateSeeds";
      PayloadKey2[PayloadKey2["Destination"] = 5] = "Destination";
      PayloadKey2[PayloadKey2["DestinationSeeds"] = 6] = "DestinationSeeds";
      PayloadKey2[PayloadKey2["Holder"] = 7] = "Holder";
      PayloadKey2[PayloadKey2["Source"] = 8] = "Source";
      PayloadKey2[PayloadKey2["SourceSeeds"] = 9] = "SourceSeeds";
    })(PayloadKey = exports.PayloadKey || (exports.PayloadKey = {}));
    exports.payloadKeyBeet = beet9.fixedScalarEnum(PayloadKey);
  }
});

// ../../node_modules/@metaplex-foundation/mpl-token-metadata/dist/src/generated/types/index.js
var require_types4 = __commonJS({
  "../../node_modules/@metaplex-foundation/mpl-token-metadata/dist/src/generated/types/index.js"(exports) {
    "use strict";
    var __createBinding = exports && exports.__createBinding || (Object.create ? function(o2, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      var desc = Object.getOwnPropertyDescriptor(m, k);
      if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m[k];
        } };
      }
      Object.defineProperty(o2, k2, desc);
    } : function(o2, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      o2[k2] = m[k];
    });
    var __exportStar = exports && exports.__exportStar || function(m, exports2) {
      for (var p in m)
        if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports2, p))
          __createBinding(exports2, m, p);
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    __exportStar(require_ApproveUseAuthorityArgs(), exports);
    __exportStar(require_AssetData(), exports);
    __exportStar(require_AuthorityType(), exports);
    __exportStar(require_AuthorizationData(), exports);
    __exportStar(require_BurnArgs(), exports);
    __exportStar(require_Collection(), exports);
    __exportStar(require_CollectionDetails(), exports);
    __exportStar(require_CollectionDetailsToggle(), exports);
    __exportStar(require_CollectionToggle(), exports);
    __exportStar(require_CreateArgs(), exports);
    __exportStar(require_CreateMasterEditionArgs(), exports);
    __exportStar(require_CreateMetadataAccountArgsV3(), exports);
    __exportStar(require_Creator(), exports);
    __exportStar(require_Data(), exports);
    __exportStar(require_DataV2(), exports);
    __exportStar(require_DelegateArgs(), exports);
    __exportStar(require_EscrowAuthority(), exports);
    __exportStar(require_Key(), exports);
    __exportStar(require_LeafInfo(), exports);
    __exportStar(require_LockArgs(), exports);
    __exportStar(require_MetadataDelegateRole(), exports);
    __exportStar(require_MigrationType(), exports);
    __exportStar(require_MintArgs(), exports);
    __exportStar(require_MintNewEditionFromMasterEditionViaTokenArgs(), exports);
    __exportStar(require_Payload(), exports);
    __exportStar(require_PayloadKey(), exports);
    __exportStar(require_PayloadType(), exports);
    __exportStar(require_PrintArgs(), exports);
    __exportStar(require_PrintSupply(), exports);
    __exportStar(require_ProgrammableConfig(), exports);
    __exportStar(require_Reservation(), exports);
    __exportStar(require_ReservationV1(), exports);
    __exportStar(require_RevokeArgs(), exports);
    __exportStar(require_RuleSetToggle(), exports);
    __exportStar(require_SeedsVec(), exports);
    __exportStar(require_SetCollectionSizeArgs(), exports);
    __exportStar(require_TokenDelegateRole(), exports);
    __exportStar(require_TokenStandard(), exports);
    __exportStar(require_TokenState(), exports);
    __exportStar(require_TransferArgs(), exports);
    __exportStar(require_TransferOutOfEscrowArgs(), exports);
    __exportStar(require_UnlockArgs(), exports);
    __exportStar(require_UpdateArgs(), exports);
    __exportStar(require_UpdateMetadataAccountArgsV2(), exports);
    __exportStar(require_UseArgs(), exports);
    __exportStar(require_UseMethod(), exports);
    __exportStar(require_Uses(), exports);
    __exportStar(require_UsesToggle(), exports);
    __exportStar(require_UtilizeArgs(), exports);
    __exportStar(require_VerificationArgs(), exports);
  }
});

// ../../node_modules/@metaplex-foundation/mpl-token-metadata/dist/src/generated/index.js
var require_generated = __commonJS({
  "../../node_modules/@metaplex-foundation/mpl-token-metadata/dist/src/generated/index.js"(exports) {
    "use strict";
    var __createBinding = exports && exports.__createBinding || (Object.create ? function(o2, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      var desc = Object.getOwnPropertyDescriptor(m, k);
      if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m[k];
        } };
      }
      Object.defineProperty(o2, k2, desc);
    } : function(o2, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      o2[k2] = m[k];
    });
    var __exportStar = exports && exports.__exportStar || function(m, exports2) {
      for (var p in m)
        if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports2, p))
          __createBinding(exports2, m, p);
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.PROGRAM_ID = exports.PROGRAM_ADDRESS = void 0;
    var web3_js_1 = (init_index_browser_esm(), __toCommonJS(index_browser_esm_exports));
    __exportStar(require_accounts(), exports);
    __exportStar(require_errors(), exports);
    __exportStar(require_instructions9(), exports);
    __exportStar(require_types4(), exports);
    exports.PROGRAM_ADDRESS = "metaqbxxUerdq28cj1RbAWkYQm3ybzjb6a8bt518x1s";
    exports.PROGRAM_ID = new web3_js_1.PublicKey(exports.PROGRAM_ADDRESS);
  }
});

// ../../node_modules/@metaplex-foundation/mpl-token-metadata/dist/src/errors.js
var require_errors5 = __commonJS({
  "../../node_modules/@metaplex-foundation/mpl-token-metadata/dist/src/errors.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.cusper = void 0;
    var cusper_1 = require_cusper();
    var generated_1 = require_generated();
    exports.cusper = (0, cusper_1.initCusper)(generated_1.errorFromCode);
  }
});

// ../../node_modules/@metaplex-foundation/mpl-token-metadata/dist/src/mpl-token-metadata.js
var require_mpl_token_metadata = __commonJS({
  "../../node_modules/@metaplex-foundation/mpl-token-metadata/dist/src/mpl-token-metadata.js"(exports) {
    "use strict";
    var __createBinding = exports && exports.__createBinding || (Object.create ? function(o2, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      var desc = Object.getOwnPropertyDescriptor(m, k);
      if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m[k];
        } };
      }
      Object.defineProperty(o2, k2, desc);
    } : function(o2, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      o2[k2] = m[k];
    });
    var __exportStar = exports && exports.__exportStar || function(m, exports2) {
      for (var p in m)
        if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports2, p))
          __createBinding(exports2, m, p);
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    __exportStar(require_errors5(), exports);
    __exportStar(require_generated(), exports);
  }
});

// ../../node_modules/@metaplex-foundation/mpl-bubblegum/node_modules/@metaplex-foundation/beet-solana/dist/cjs/src/keys.js
var require_keys2 = __commonJS({
  "../../node_modules/@metaplex-foundation/mpl-bubblegum/node_modules/@metaplex-foundation/beet-solana/dist/cjs/src/keys.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.keysTypeMap = exports.publicKey = void 0;
    var web3_js_1 = (init_index_browser_esm(), __toCommonJS(index_browser_esm_exports));
    var beet_1 = require_beet();
    var BEET_SOLANA_PACKAGE = "@metaplex-foundation/beet-solana";
    var SOLANA_WEB3_PACKAGE = "@solana/web3.js";
    var uint8Array32 = (0, beet_1.fixedSizeUint8Array)(32);
    exports.publicKey = {
      write: function(buf, offset, value) {
        const arr = value.toBytes();
        uint8Array32.write(buf, offset, arr);
      },
      read: function(buf, offset) {
        const bytes = uint8Array32.read(buf, offset);
        return new web3_js_1.PublicKey(bytes);
      },
      byteSize: uint8Array32.byteSize,
      description: "PublicKey"
    };
    exports.keysTypeMap = {
      publicKey: {
        beet: "publicKey",
        isFixable: false,
        sourcePack: BEET_SOLANA_PACKAGE,
        ts: "PublicKey",
        pack: SOLANA_WEB3_PACKAGE
      }
    };
  }
});

// ../../node_modules/@metaplex-foundation/mpl-bubblegum/node_modules/@metaplex-foundation/beet-solana/dist/cjs/src/utils.js
var require_utils4 = __commonJS({
  "../../node_modules/@metaplex-foundation/mpl-bubblegum/node_modules/@metaplex-foundation/beet-solana/dist/cjs/src/utils.js"(exports) {
    "use strict";
    var __importDefault = exports && exports.__importDefault || function(mod) {
      return mod && mod.__esModule ? mod : { "default": mod };
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.logTrace = exports.logDebug = exports.logInfo = exports.logError = void 0;
    var debug_1 = __importDefault(require_browser2());
    exports.logError = (0, debug_1.default)("beet:error");
    exports.logInfo = (0, debug_1.default)("beet:info");
    exports.logDebug = (0, debug_1.default)("beet:debug");
    exports.logTrace = (0, debug_1.default)("beet:trace");
  }
});

// ../../node_modules/@metaplex-foundation/mpl-bubblegum/node_modules/@metaplex-foundation/beet-solana/dist/cjs/src/gpa/util.js
var require_util2 = __commonJS({
  "../../node_modules/@metaplex-foundation/mpl-bubblegum/node_modules/@metaplex-foundation/beet-solana/dist/cjs/src/gpa/util.js"(exports) {
    "use strict";
    var __importDefault = exports && exports.__importDefault || function(mod) {
      return mod && mod.__esModule ? mod : { "default": mod };
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.encodeFixedBeet = void 0;
    var bs58_1 = __importDefault(require_bs58());
    function encodeFixedBeet(beet9, val) {
      const buf = Buffer.alloc(beet9.byteSize);
      beet9.write(buf, 0, val);
      return bs58_1.default.encode(buf);
    }
    exports.encodeFixedBeet = encodeFixedBeet;
  }
});

// ../../node_modules/@metaplex-foundation/mpl-bubblegum/node_modules/@metaplex-foundation/beet-solana/dist/cjs/src/gpa/index.js
var require_gpa2 = __commonJS({
  "../../node_modules/@metaplex-foundation/mpl-bubblegum/node_modules/@metaplex-foundation/beet-solana/dist/cjs/src/gpa/index.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.GpaBuilder = void 0;
    var beet_1 = require_beet();
    var assert_1 = require_assert();
    var utils_1 = require_utils4();
    var util_1 = require_util2();
    var GpaBuilder2 = class _GpaBuilder {
      constructor(programId, beets, accountSize) {
        this.programId = programId;
        this.beets = beets;
        this.accountSize = accountSize;
        this.config = {};
      }
      _addFilter(filter) {
        if (this.config.filters == null) {
          this.config.filters = [];
        }
        this.config.filters.push(filter);
        return this;
      }
      _addInnerFilter(key, innerKey, val) {
        (0, utils_1.logTrace)(`gpa.addInnerFilter: ${key}.${innerKey}`);
        const outerBeetInfo = this.beets.get(key);
        (0, assert_1.strict)(outerBeetInfo != null, "Outer filter key needs to be an existing field name");
        const beetInfo = outerBeetInfo.beet;
        let offset = outerBeetInfo.offset;
        const outerBeet = (0, beet_1.isFixedSizeBeet)(beetInfo) ? beetInfo : beetInfo.toFixedFromValue(val);
        let beet9;
        for (const [k, v] of outerBeet.fields) {
          if (k === innerKey) {
            beet9 = v;
            break;
          }
          offset += v.byteSize;
        }
        (0, assert_1.strict)(beet9 != null, `${innerKey} is not a field of the ${key} struct`);
        const bytes = (0, util_1.encodeFixedBeet)(beet9, val);
        this._addFilter({ memcmp: { offset, bytes } });
        return this;
      }
      /**
       * Adds a _memcmp_ filter for a field inside a field which is a struct value.
       * The provided keys need to be separated by a `.` and only one level of
       * nesting is supported at this point.
       *
       * The filter is applied to the inner value.
       *
       * ## Example
       *
       * ### Given:
       *
       * ```typescript
       * type Inner = {
       *   a: number
       * }
       * type Outer = {
       *   idx: number
       *   inner: Inner
       * }
       * ```
       * ### Apply a filter on `a` of the `Inner` type:
       *
       * ```typescript
       * gpaBuilder.addInnerFilter('inner.a', 2)
       * ```
       *
       * @param keys - the names of the fields by which to filter, i.e. `'outer.inner'`
       * @param val - the field value that the filter should match
       */
      addInnerFilter(keys, val) {
        const parts = keys.split(".");
        assert_1.strict.equal(parts.length, 2, `inner filters can go only one level deep, i.e. 'outer.inner' is ok, but 'outer.inner.deep' is not`);
        const [ka, kb] = parts;
        return this._addInnerFilter(ka, kb, val);
      }
      /**
       * Adds a _memcmp_ filter for the provided {@link key} of the struct.
       *
       * @param key - the name of the field by which to filter
       * @param val - the field value that the filter should match
       */
      addFilter(key, val) {
        const beetInfo = this.beets.get(key);
        (0, assert_1.strict)(beetInfo != null, "Filter key needs to be an existing field name");
        const beet9 = (0, beet_1.isFixedSizeBeet)(beetInfo.beet) ? beetInfo.beet : beetInfo.beet.toFixedFromValue(val);
        const bytes = (0, util_1.encodeFixedBeet)(beet9, val);
        this._addFilter({ memcmp: { offset: beetInfo.offset, bytes } });
        return this;
      }
      /**
       * Adds a `dataSize` filter which will match on account's sizes.
       * You have to provide that {@link size} for accounts that don't have a fixed size.
       * For _fixed_ size accounts that size is determined for you.
       *
       * @param size - the account size to match for
       */
      dataSize(size) {
        size = size !== null && size !== void 0 ? size : this.accountSize;
        (0, assert_1.strict)(size != null, "for accounts of dynamic size the dataSize arg needs to be provided");
        return this._addFilter({ dataSize: size });
      }
      /**
       * Attempts to find the accounts matching the configured filters.
       *
       * @param connection used to query the program accounts on the cluster
       */
      run(connection) {
        return connection.getProgramAccounts(this.programId, this.config);
      }
      /**
       * Creates a GPA builder that supports adding up to four filters for
       * fixed size fields.
       *
       * Once a non-fixed field is encountered, the remaining fields following it
       * will not be included as a filter option since their position in the
       * bytes array will change depending on the content of the non-fixed field.
       *
       * @param programId - the id of the program that owns the accounts we are querying
       * @param beetFields - the beet fields that make up the structure of the account data
       */
      static fromBeetFields(programId, beetFields) {
        const map2 = /* @__PURE__ */ new Map();
        let offset = 0;
        let encounteredNonFixed = false;
        for (const [k, v] of beetFields) {
          map2.set(k, { beet: v, offset });
          if (!(0, beet_1.isFixedSizeBeet)(v)) {
            encounteredNonFixed = true;
            break;
          }
          offset += v.byteSize;
        }
        const accountSize = encounteredNonFixed ? void 0 : offset;
        return new _GpaBuilder(programId, map2, accountSize);
      }
      /**
       * Convenience wrapper around {@link GpaBuilder.fromBeetFields} that allows
       * providing a struct which contains the beet fields.
       *
       * @param programId - the id of the program that owns the accounts we are querying
       * @param struct - containing the beet `fields` specifying the layout of the account
       */
      static fromStruct(programId, struct51) {
        return _GpaBuilder.fromBeetFields(programId, struct51.fields);
      }
    };
    exports.GpaBuilder = GpaBuilder2;
  }
});

// ../../node_modules/@metaplex-foundation/mpl-bubblegum/node_modules/@metaplex-foundation/beet-solana/dist/cjs/src/beet-solana.js
var require_beet_solana2 = __commonJS({
  "../../node_modules/@metaplex-foundation/mpl-bubblegum/node_modules/@metaplex-foundation/beet-solana/dist/cjs/src/beet-solana.js"(exports) {
    "use strict";
    var __createBinding = exports && exports.__createBinding || (Object.create ? function(o2, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      var desc = Object.getOwnPropertyDescriptor(m, k);
      if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m[k];
        } };
      }
      Object.defineProperty(o2, k2, desc);
    } : function(o2, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      o2[k2] = m[k];
    });
    var __exportStar = exports && exports.__exportStar || function(m, exports2) {
      for (var p in m)
        if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports2, p))
          __createBinding(exports2, m, p);
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.supportedTypeMap = void 0;
    var keys_1 = require_keys2();
    __exportStar(require_keys2(), exports);
    __exportStar(require_gpa2(), exports);
    exports.supportedTypeMap = keys_1.keysTypeMap;
  }
});

// ../../node_modules/@metaplex-foundation/mpl-bubblegum/dist/src/generated/accounts/TreeConfig.js
var require_TreeConfig = __commonJS({
  "../../node_modules/@metaplex-foundation/mpl-bubblegum/dist/src/generated/accounts/TreeConfig.js"(exports) {
    "use strict";
    var __createBinding = exports && exports.__createBinding || (Object.create ? function(o2, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      var desc = Object.getOwnPropertyDescriptor(m, k);
      if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m[k];
        } };
      }
      Object.defineProperty(o2, k2, desc);
    } : function(o2, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      o2[k2] = m[k];
    });
    var __setModuleDefault = exports && exports.__setModuleDefault || (Object.create ? function(o2, v) {
      Object.defineProperty(o2, "default", { enumerable: true, value: v });
    } : function(o2, v) {
      o2["default"] = v;
    });
    var __importStar = exports && exports.__importStar || function(mod) {
      if (mod && mod.__esModule)
        return mod;
      var result = {};
      if (mod != null) {
        for (var k in mod)
          if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k))
            __createBinding(result, mod, k);
      }
      __setModuleDefault(result, mod);
      return result;
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.treeConfigBeet = exports.TreeConfig = exports.treeConfigDiscriminator = void 0;
    var web3 = __importStar((init_index_browser_esm(), __toCommonJS(index_browser_esm_exports)));
    var beet9 = __importStar(require_beet());
    var beetSolana = __importStar(require_beet_solana2());
    exports.treeConfigDiscriminator = [122, 245, 175, 248, 171, 34, 0, 207];
    var TreeConfig = class _TreeConfig {
      constructor(treeCreator, treeDelegate, totalMintCapacity, numMinted, isPublic) {
        this.treeCreator = treeCreator;
        this.treeDelegate = treeDelegate;
        this.totalMintCapacity = totalMintCapacity;
        this.numMinted = numMinted;
        this.isPublic = isPublic;
      }
      static fromArgs(args) {
        return new _TreeConfig(args.treeCreator, args.treeDelegate, args.totalMintCapacity, args.numMinted, args.isPublic);
      }
      static fromAccountInfo(accountInfo, offset = 0) {
        return _TreeConfig.deserialize(accountInfo.data, offset);
      }
      static fromAccountAddress(connection, address, commitmentOrConfig) {
        return __async(this, null, function* () {
          const accountInfo = yield connection.getAccountInfo(address, commitmentOrConfig);
          if (accountInfo == null) {
            throw new Error(`Unable to find TreeConfig account at ${address}`);
          }
          return _TreeConfig.fromAccountInfo(accountInfo, 0)[0];
        });
      }
      static gpaBuilder(programId = new web3.PublicKey("BGUMAp9Gq7iTEuizy4pqaxsTyUCBK68MDfK752saRPUY")) {
        return beetSolana.GpaBuilder.fromStruct(programId, exports.treeConfigBeet);
      }
      static deserialize(buf, offset = 0) {
        return exports.treeConfigBeet.deserialize(buf, offset);
      }
      serialize() {
        return exports.treeConfigBeet.serialize(__spreadValues({
          accountDiscriminator: exports.treeConfigDiscriminator
        }, this));
      }
      static get byteSize() {
        return exports.treeConfigBeet.byteSize;
      }
      static getMinimumBalanceForRentExemption(connection, commitment) {
        return __async(this, null, function* () {
          return connection.getMinimumBalanceForRentExemption(_TreeConfig.byteSize, commitment);
        });
      }
      static hasCorrectByteSize(buf, offset = 0) {
        return buf.byteLength - offset === _TreeConfig.byteSize;
      }
      pretty() {
        return {
          treeCreator: this.treeCreator.toBase58(),
          treeDelegate: this.treeDelegate.toBase58(),
          totalMintCapacity: (() => {
            const x = this.totalMintCapacity;
            if (typeof x.toNumber === "function") {
              try {
                return x.toNumber();
              } catch (_) {
                return x;
              }
            }
            return x;
          })(),
          numMinted: (() => {
            const x = this.numMinted;
            if (typeof x.toNumber === "function") {
              try {
                return x.toNumber();
              } catch (_) {
                return x;
              }
            }
            return x;
          })(),
          isPublic: this.isPublic
        };
      }
    };
    exports.TreeConfig = TreeConfig;
    exports.treeConfigBeet = new beet9.BeetStruct([
      ["accountDiscriminator", beet9.uniformFixedSizeArray(beet9.u8, 8)],
      ["treeCreator", beetSolana.publicKey],
      ["treeDelegate", beetSolana.publicKey],
      ["totalMintCapacity", beet9.u64],
      ["numMinted", beet9.u64],
      ["isPublic", beet9.bool]
    ], TreeConfig.fromArgs, "TreeConfig");
  }
});

// ../../node_modules/@metaplex-foundation/mpl-bubblegum/dist/src/generated/types/LeafSchema.js
var require_LeafSchema = __commonJS({
  "../../node_modules/@metaplex-foundation/mpl-bubblegum/dist/src/generated/types/LeafSchema.js"(exports) {
    "use strict";
    var __createBinding = exports && exports.__createBinding || (Object.create ? function(o2, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      var desc = Object.getOwnPropertyDescriptor(m, k);
      if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m[k];
        } };
      }
      Object.defineProperty(o2, k2, desc);
    } : function(o2, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      o2[k2] = m[k];
    });
    var __setModuleDefault = exports && exports.__setModuleDefault || (Object.create ? function(o2, v) {
      Object.defineProperty(o2, "default", { enumerable: true, value: v });
    } : function(o2, v) {
      o2["default"] = v;
    });
    var __importStar = exports && exports.__importStar || function(mod) {
      if (mod && mod.__esModule)
        return mod;
      var result = {};
      if (mod != null) {
        for (var k in mod)
          if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k))
            __createBinding(result, mod, k);
      }
      __setModuleDefault(result, mod);
      return result;
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.leafSchemaBeet = exports.isLeafSchemaV1 = void 0;
    var beet9 = __importStar(require_beet());
    var beetSolana = __importStar(require_beet_solana2());
    var isLeafSchemaV1 = (x) => x.__kind === "V1";
    exports.isLeafSchemaV1 = isLeafSchemaV1;
    exports.leafSchemaBeet = beet9.dataEnum([
      [
        "V1",
        new beet9.BeetArgsStruct([
          ["id", beetSolana.publicKey],
          ["owner", beetSolana.publicKey],
          ["delegate", beetSolana.publicKey],
          ["nonce", beet9.u64],
          ["dataHash", beet9.uniformFixedSizeArray(beet9.u8, 32)],
          ["creatorHash", beet9.uniformFixedSizeArray(beet9.u8, 32)]
        ], 'LeafSchemaRecord["V1"]')
      ]
    ]);
  }
});

// ../../node_modules/@metaplex-foundation/mpl-bubblegum/dist/src/generated/accounts/Voucher.js
var require_Voucher = __commonJS({
  "../../node_modules/@metaplex-foundation/mpl-bubblegum/dist/src/generated/accounts/Voucher.js"(exports) {
    "use strict";
    var __createBinding = exports && exports.__createBinding || (Object.create ? function(o2, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      var desc = Object.getOwnPropertyDescriptor(m, k);
      if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m[k];
        } };
      }
      Object.defineProperty(o2, k2, desc);
    } : function(o2, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      o2[k2] = m[k];
    });
    var __setModuleDefault = exports && exports.__setModuleDefault || (Object.create ? function(o2, v) {
      Object.defineProperty(o2, "default", { enumerable: true, value: v });
    } : function(o2, v) {
      o2["default"] = v;
    });
    var __importStar = exports && exports.__importStar || function(mod) {
      if (mod && mod.__esModule)
        return mod;
      var result = {};
      if (mod != null) {
        for (var k in mod)
          if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k))
            __createBinding(result, mod, k);
      }
      __setModuleDefault(result, mod);
      return result;
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.voucherBeet = exports.Voucher = exports.voucherDiscriminator = void 0;
    var web3 = __importStar((init_index_browser_esm(), __toCommonJS(index_browser_esm_exports)));
    var beet9 = __importStar(require_beet());
    var beetSolana = __importStar(require_beet_solana2());
    var LeafSchema_1 = require_LeafSchema();
    exports.voucherDiscriminator = [191, 204, 149, 234, 213, 165, 13, 65];
    var Voucher = class _Voucher {
      constructor(leafSchema, index, merkleTree) {
        this.leafSchema = leafSchema;
        this.index = index;
        this.merkleTree = merkleTree;
      }
      static fromArgs(args) {
        return new _Voucher(args.leafSchema, args.index, args.merkleTree);
      }
      static fromAccountInfo(accountInfo, offset = 0) {
        return _Voucher.deserialize(accountInfo.data, offset);
      }
      static fromAccountAddress(connection, address, commitmentOrConfig) {
        return __async(this, null, function* () {
          const accountInfo = yield connection.getAccountInfo(address, commitmentOrConfig);
          if (accountInfo == null) {
            throw new Error(`Unable to find Voucher account at ${address}`);
          }
          return _Voucher.fromAccountInfo(accountInfo, 0)[0];
        });
      }
      static gpaBuilder(programId = new web3.PublicKey("BGUMAp9Gq7iTEuizy4pqaxsTyUCBK68MDfK752saRPUY")) {
        return beetSolana.GpaBuilder.fromStruct(programId, exports.voucherBeet);
      }
      static deserialize(buf, offset = 0) {
        return exports.voucherBeet.deserialize(buf, offset);
      }
      serialize() {
        return exports.voucherBeet.serialize(__spreadValues({
          accountDiscriminator: exports.voucherDiscriminator
        }, this));
      }
      static byteSize(args) {
        const instance = _Voucher.fromArgs(args);
        return exports.voucherBeet.toFixedFromValue(__spreadValues({
          accountDiscriminator: exports.voucherDiscriminator
        }, instance)).byteSize;
      }
      static getMinimumBalanceForRentExemption(args, connection, commitment) {
        return __async(this, null, function* () {
          return connection.getMinimumBalanceForRentExemption(_Voucher.byteSize(args), commitment);
        });
      }
      pretty() {
        return {
          leafSchema: this.leafSchema.__kind,
          index: this.index,
          merkleTree: this.merkleTree.toBase58()
        };
      }
    };
    exports.Voucher = Voucher;
    exports.voucherBeet = new beet9.FixableBeetStruct([
      ["accountDiscriminator", beet9.uniformFixedSizeArray(beet9.u8, 8)],
      ["leafSchema", LeafSchema_1.leafSchemaBeet],
      ["index", beet9.u32],
      ["merkleTree", beetSolana.publicKey]
    ], Voucher.fromArgs, "Voucher");
  }
});

// ../../node_modules/@metaplex-foundation/mpl-bubblegum/dist/src/generated/accounts/index.js
var require_accounts2 = __commonJS({
  "../../node_modules/@metaplex-foundation/mpl-bubblegum/dist/src/generated/accounts/index.js"(exports) {
    "use strict";
    var __createBinding = exports && exports.__createBinding || (Object.create ? function(o2, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      var desc = Object.getOwnPropertyDescriptor(m, k);
      if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m[k];
        } };
      }
      Object.defineProperty(o2, k2, desc);
    } : function(o2, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      o2[k2] = m[k];
    });
    var __exportStar = exports && exports.__exportStar || function(m, exports2) {
      for (var p in m)
        if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports2, p))
          __createBinding(exports2, m, p);
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.accountProviders = void 0;
    __exportStar(require_TreeConfig(), exports);
    __exportStar(require_Voucher(), exports);
    var TreeConfig_1 = require_TreeConfig();
    var Voucher_1 = require_Voucher();
    exports.accountProviders = { TreeConfig: TreeConfig_1.TreeConfig, Voucher: Voucher_1.Voucher };
  }
});

// ../../node_modules/@metaplex-foundation/mpl-bubblegum/dist/src/generated/errors/index.js
var require_errors6 = __commonJS({
  "../../node_modules/@metaplex-foundation/mpl-bubblegum/dist/src/generated/errors/index.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.errorFromName = exports.errorFromCode = exports.CollectionMustBeSizedError = exports.LeafAuthorityMustSignError = exports.UpdateAuthorityIncorrectError = exports.AlreadyUnverifiedError = exports.AlreadyVerifiedError = exports.CollectionNotFoundError = exports.CollectionCannotBeVerifiedInThisInstructionError = exports.IncorrectOwnerError = exports.NumericalOverflowErrorError = exports.InsufficientMintCapacityError = exports.TreeAuthorityIncorrectError = exports.MetadataBasisPointsTooHighError = exports.MetadataUriTooLongError = exports.MetadataSymbolTooLongError = exports.MetadataNameTooLongError = exports.CreatorsTooLongError = exports.DataHashMismatchError = exports.CreatorHashMismatchError = exports.NoCreatorsPresentError = exports.CreatorNotFoundError = exports.CreatorDidNotVerifyError = exports.DuplicateCreatorAddressError = exports.CreatorShareTotalMustBe100Error = exports.UnsupportedSchemaVersionError = exports.HashingMismatchError = exports.PublicKeyMismatchError = exports.AssetOwnerMismatchError = void 0;
    var createErrorFromCodeLookup = /* @__PURE__ */ new Map();
    var createErrorFromNameLookup = /* @__PURE__ */ new Map();
    var AssetOwnerMismatchError = class _AssetOwnerMismatchError extends Error {
      constructor() {
        super("Asset Owner Does not match");
        this.code = 6e3;
        this.name = "AssetOwnerMismatch";
        if (typeof Error.captureStackTrace === "function") {
          Error.captureStackTrace(this, _AssetOwnerMismatchError);
        }
      }
    };
    exports.AssetOwnerMismatchError = AssetOwnerMismatchError;
    createErrorFromCodeLookup.set(6e3, () => new AssetOwnerMismatchError());
    createErrorFromNameLookup.set("AssetOwnerMismatch", () => new AssetOwnerMismatchError());
    var PublicKeyMismatchError = class _PublicKeyMismatchError extends Error {
      constructor() {
        super("PublicKeyMismatch");
        this.code = 6001;
        this.name = "PublicKeyMismatch";
        if (typeof Error.captureStackTrace === "function") {
          Error.captureStackTrace(this, _PublicKeyMismatchError);
        }
      }
    };
    exports.PublicKeyMismatchError = PublicKeyMismatchError;
    createErrorFromCodeLookup.set(6001, () => new PublicKeyMismatchError());
    createErrorFromNameLookup.set("PublicKeyMismatch", () => new PublicKeyMismatchError());
    var HashingMismatchError = class _HashingMismatchError extends Error {
      constructor() {
        super("Hashing Mismatch Within Leaf Schema");
        this.code = 6002;
        this.name = "HashingMismatch";
        if (typeof Error.captureStackTrace === "function") {
          Error.captureStackTrace(this, _HashingMismatchError);
        }
      }
    };
    exports.HashingMismatchError = HashingMismatchError;
    createErrorFromCodeLookup.set(6002, () => new HashingMismatchError());
    createErrorFromNameLookup.set("HashingMismatch", () => new HashingMismatchError());
    var UnsupportedSchemaVersionError = class _UnsupportedSchemaVersionError extends Error {
      constructor() {
        super("Unsupported Schema Version");
        this.code = 6003;
        this.name = "UnsupportedSchemaVersion";
        if (typeof Error.captureStackTrace === "function") {
          Error.captureStackTrace(this, _UnsupportedSchemaVersionError);
        }
      }
    };
    exports.UnsupportedSchemaVersionError = UnsupportedSchemaVersionError;
    createErrorFromCodeLookup.set(6003, () => new UnsupportedSchemaVersionError());
    createErrorFromNameLookup.set("UnsupportedSchemaVersion", () => new UnsupportedSchemaVersionError());
    var CreatorShareTotalMustBe100Error = class _CreatorShareTotalMustBe100Error extends Error {
      constructor() {
        super("Creator shares must sum to 100");
        this.code = 6004;
        this.name = "CreatorShareTotalMustBe100";
        if (typeof Error.captureStackTrace === "function") {
          Error.captureStackTrace(this, _CreatorShareTotalMustBe100Error);
        }
      }
    };
    exports.CreatorShareTotalMustBe100Error = CreatorShareTotalMustBe100Error;
    createErrorFromCodeLookup.set(6004, () => new CreatorShareTotalMustBe100Error());
    createErrorFromNameLookup.set("CreatorShareTotalMustBe100", () => new CreatorShareTotalMustBe100Error());
    var DuplicateCreatorAddressError = class _DuplicateCreatorAddressError extends Error {
      constructor() {
        super("No duplicate creator addresses in metadata");
        this.code = 6005;
        this.name = "DuplicateCreatorAddress";
        if (typeof Error.captureStackTrace === "function") {
          Error.captureStackTrace(this, _DuplicateCreatorAddressError);
        }
      }
    };
    exports.DuplicateCreatorAddressError = DuplicateCreatorAddressError;
    createErrorFromCodeLookup.set(6005, () => new DuplicateCreatorAddressError());
    createErrorFromNameLookup.set("DuplicateCreatorAddress", () => new DuplicateCreatorAddressError());
    var CreatorDidNotVerifyError = class _CreatorDidNotVerifyError extends Error {
      constructor() {
        super("Creator did not verify the metadata");
        this.code = 6006;
        this.name = "CreatorDidNotVerify";
        if (typeof Error.captureStackTrace === "function") {
          Error.captureStackTrace(this, _CreatorDidNotVerifyError);
        }
      }
    };
    exports.CreatorDidNotVerifyError = CreatorDidNotVerifyError;
    createErrorFromCodeLookup.set(6006, () => new CreatorDidNotVerifyError());
    createErrorFromNameLookup.set("CreatorDidNotVerify", () => new CreatorDidNotVerifyError());
    var CreatorNotFoundError = class _CreatorNotFoundError extends Error {
      constructor() {
        super("Creator not found in creator Vec");
        this.code = 6007;
        this.name = "CreatorNotFound";
        if (typeof Error.captureStackTrace === "function") {
          Error.captureStackTrace(this, _CreatorNotFoundError);
        }
      }
    };
    exports.CreatorNotFoundError = CreatorNotFoundError;
    createErrorFromCodeLookup.set(6007, () => new CreatorNotFoundError());
    createErrorFromNameLookup.set("CreatorNotFound", () => new CreatorNotFoundError());
    var NoCreatorsPresentError = class _NoCreatorsPresentError extends Error {
      constructor() {
        super("No creators in creator Vec");
        this.code = 6008;
        this.name = "NoCreatorsPresent";
        if (typeof Error.captureStackTrace === "function") {
          Error.captureStackTrace(this, _NoCreatorsPresentError);
        }
      }
    };
    exports.NoCreatorsPresentError = NoCreatorsPresentError;
    createErrorFromCodeLookup.set(6008, () => new NoCreatorsPresentError());
    createErrorFromNameLookup.set("NoCreatorsPresent", () => new NoCreatorsPresentError());
    var CreatorHashMismatchError = class _CreatorHashMismatchError extends Error {
      constructor() {
        super("User-provided creator Vec must result in same user-provided creator hash");
        this.code = 6009;
        this.name = "CreatorHashMismatch";
        if (typeof Error.captureStackTrace === "function") {
          Error.captureStackTrace(this, _CreatorHashMismatchError);
        }
      }
    };
    exports.CreatorHashMismatchError = CreatorHashMismatchError;
    createErrorFromCodeLookup.set(6009, () => new CreatorHashMismatchError());
    createErrorFromNameLookup.set("CreatorHashMismatch", () => new CreatorHashMismatchError());
    var DataHashMismatchError = class _DataHashMismatchError extends Error {
      constructor() {
        super("User-provided metadata must result in same user-provided data hash");
        this.code = 6010;
        this.name = "DataHashMismatch";
        if (typeof Error.captureStackTrace === "function") {
          Error.captureStackTrace(this, _DataHashMismatchError);
        }
      }
    };
    exports.DataHashMismatchError = DataHashMismatchError;
    createErrorFromCodeLookup.set(6010, () => new DataHashMismatchError());
    createErrorFromNameLookup.set("DataHashMismatch", () => new DataHashMismatchError());
    var CreatorsTooLongError = class _CreatorsTooLongError extends Error {
      constructor() {
        super("Creators list too long");
        this.code = 6011;
        this.name = "CreatorsTooLong";
        if (typeof Error.captureStackTrace === "function") {
          Error.captureStackTrace(this, _CreatorsTooLongError);
        }
      }
    };
    exports.CreatorsTooLongError = CreatorsTooLongError;
    createErrorFromCodeLookup.set(6011, () => new CreatorsTooLongError());
    createErrorFromNameLookup.set("CreatorsTooLong", () => new CreatorsTooLongError());
    var MetadataNameTooLongError = class _MetadataNameTooLongError extends Error {
      constructor() {
        super("Name in metadata is too long");
        this.code = 6012;
        this.name = "MetadataNameTooLong";
        if (typeof Error.captureStackTrace === "function") {
          Error.captureStackTrace(this, _MetadataNameTooLongError);
        }
      }
    };
    exports.MetadataNameTooLongError = MetadataNameTooLongError;
    createErrorFromCodeLookup.set(6012, () => new MetadataNameTooLongError());
    createErrorFromNameLookup.set("MetadataNameTooLong", () => new MetadataNameTooLongError());
    var MetadataSymbolTooLongError = class _MetadataSymbolTooLongError extends Error {
      constructor() {
        super("Symbol in metadata is too long");
        this.code = 6013;
        this.name = "MetadataSymbolTooLong";
        if (typeof Error.captureStackTrace === "function") {
          Error.captureStackTrace(this, _MetadataSymbolTooLongError);
        }
      }
    };
    exports.MetadataSymbolTooLongError = MetadataSymbolTooLongError;
    createErrorFromCodeLookup.set(6013, () => new MetadataSymbolTooLongError());
    createErrorFromNameLookup.set("MetadataSymbolTooLong", () => new MetadataSymbolTooLongError());
    var MetadataUriTooLongError = class _MetadataUriTooLongError extends Error {
      constructor() {
        super("Uri in metadata is too long");
        this.code = 6014;
        this.name = "MetadataUriTooLong";
        if (typeof Error.captureStackTrace === "function") {
          Error.captureStackTrace(this, _MetadataUriTooLongError);
        }
      }
    };
    exports.MetadataUriTooLongError = MetadataUriTooLongError;
    createErrorFromCodeLookup.set(6014, () => new MetadataUriTooLongError());
    createErrorFromNameLookup.set("MetadataUriTooLong", () => new MetadataUriTooLongError());
    var MetadataBasisPointsTooHighError = class _MetadataBasisPointsTooHighError extends Error {
      constructor() {
        super("Basis points in metadata cannot exceed 10000");
        this.code = 6015;
        this.name = "MetadataBasisPointsTooHigh";
        if (typeof Error.captureStackTrace === "function") {
          Error.captureStackTrace(this, _MetadataBasisPointsTooHighError);
        }
      }
    };
    exports.MetadataBasisPointsTooHighError = MetadataBasisPointsTooHighError;
    createErrorFromCodeLookup.set(6015, () => new MetadataBasisPointsTooHighError());
    createErrorFromNameLookup.set("MetadataBasisPointsTooHigh", () => new MetadataBasisPointsTooHighError());
    var TreeAuthorityIncorrectError = class _TreeAuthorityIncorrectError extends Error {
      constructor() {
        super("Tree creator or tree delegate must sign.");
        this.code = 6016;
        this.name = "TreeAuthorityIncorrect";
        if (typeof Error.captureStackTrace === "function") {
          Error.captureStackTrace(this, _TreeAuthorityIncorrectError);
        }
      }
    };
    exports.TreeAuthorityIncorrectError = TreeAuthorityIncorrectError;
    createErrorFromCodeLookup.set(6016, () => new TreeAuthorityIncorrectError());
    createErrorFromNameLookup.set("TreeAuthorityIncorrect", () => new TreeAuthorityIncorrectError());
    var InsufficientMintCapacityError = class _InsufficientMintCapacityError extends Error {
      constructor() {
        super("Not enough unapproved mints left");
        this.code = 6017;
        this.name = "InsufficientMintCapacity";
        if (typeof Error.captureStackTrace === "function") {
          Error.captureStackTrace(this, _InsufficientMintCapacityError);
        }
      }
    };
    exports.InsufficientMintCapacityError = InsufficientMintCapacityError;
    createErrorFromCodeLookup.set(6017, () => new InsufficientMintCapacityError());
    createErrorFromNameLookup.set("InsufficientMintCapacity", () => new InsufficientMintCapacityError());
    var NumericalOverflowErrorError = class _NumericalOverflowErrorError extends Error {
      constructor() {
        super("NumericalOverflowError");
        this.code = 6018;
        this.name = "NumericalOverflowError";
        if (typeof Error.captureStackTrace === "function") {
          Error.captureStackTrace(this, _NumericalOverflowErrorError);
        }
      }
    };
    exports.NumericalOverflowErrorError = NumericalOverflowErrorError;
    createErrorFromCodeLookup.set(6018, () => new NumericalOverflowErrorError());
    createErrorFromNameLookup.set("NumericalOverflowError", () => new NumericalOverflowErrorError());
    var IncorrectOwnerError = class _IncorrectOwnerError extends Error {
      constructor() {
        super("Incorrect account owner");
        this.code = 6019;
        this.name = "IncorrectOwner";
        if (typeof Error.captureStackTrace === "function") {
          Error.captureStackTrace(this, _IncorrectOwnerError);
        }
      }
    };
    exports.IncorrectOwnerError = IncorrectOwnerError;
    createErrorFromCodeLookup.set(6019, () => new IncorrectOwnerError());
    createErrorFromNameLookup.set("IncorrectOwner", () => new IncorrectOwnerError());
    var CollectionCannotBeVerifiedInThisInstructionError = class _CollectionCannotBeVerifiedInThisInstructionError extends Error {
      constructor() {
        super("Cannot Verify Collection in this Instruction");
        this.code = 6020;
        this.name = "CollectionCannotBeVerifiedInThisInstruction";
        if (typeof Error.captureStackTrace === "function") {
          Error.captureStackTrace(this, _CollectionCannotBeVerifiedInThisInstructionError);
        }
      }
    };
    exports.CollectionCannotBeVerifiedInThisInstructionError = CollectionCannotBeVerifiedInThisInstructionError;
    createErrorFromCodeLookup.set(6020, () => new CollectionCannotBeVerifiedInThisInstructionError());
    createErrorFromNameLookup.set("CollectionCannotBeVerifiedInThisInstruction", () => new CollectionCannotBeVerifiedInThisInstructionError());
    var CollectionNotFoundError = class _CollectionNotFoundError extends Error {
      constructor() {
        super("Collection Not Found on Metadata");
        this.code = 6021;
        this.name = "CollectionNotFound";
        if (typeof Error.captureStackTrace === "function") {
          Error.captureStackTrace(this, _CollectionNotFoundError);
        }
      }
    };
    exports.CollectionNotFoundError = CollectionNotFoundError;
    createErrorFromCodeLookup.set(6021, () => new CollectionNotFoundError());
    createErrorFromNameLookup.set("CollectionNotFound", () => new CollectionNotFoundError());
    var AlreadyVerifiedError = class _AlreadyVerifiedError extends Error {
      constructor() {
        super("Collection item is already verified.");
        this.code = 6022;
        this.name = "AlreadyVerified";
        if (typeof Error.captureStackTrace === "function") {
          Error.captureStackTrace(this, _AlreadyVerifiedError);
        }
      }
    };
    exports.AlreadyVerifiedError = AlreadyVerifiedError;
    createErrorFromCodeLookup.set(6022, () => new AlreadyVerifiedError());
    createErrorFromNameLookup.set("AlreadyVerified", () => new AlreadyVerifiedError());
    var AlreadyUnverifiedError = class _AlreadyUnverifiedError extends Error {
      constructor() {
        super("Collection item is already unverified.");
        this.code = 6023;
        this.name = "AlreadyUnverified";
        if (typeof Error.captureStackTrace === "function") {
          Error.captureStackTrace(this, _AlreadyUnverifiedError);
        }
      }
    };
    exports.AlreadyUnverifiedError = AlreadyUnverifiedError;
    createErrorFromCodeLookup.set(6023, () => new AlreadyUnverifiedError());
    createErrorFromNameLookup.set("AlreadyUnverified", () => new AlreadyUnverifiedError());
    var UpdateAuthorityIncorrectError = class _UpdateAuthorityIncorrectError extends Error {
      constructor() {
        super("Incorrect leaf metadata update authority.");
        this.code = 6024;
        this.name = "UpdateAuthorityIncorrect";
        if (typeof Error.captureStackTrace === "function") {
          Error.captureStackTrace(this, _UpdateAuthorityIncorrectError);
        }
      }
    };
    exports.UpdateAuthorityIncorrectError = UpdateAuthorityIncorrectError;
    createErrorFromCodeLookup.set(6024, () => new UpdateAuthorityIncorrectError());
    createErrorFromNameLookup.set("UpdateAuthorityIncorrect", () => new UpdateAuthorityIncorrectError());
    var LeafAuthorityMustSignError = class _LeafAuthorityMustSignError extends Error {
      constructor() {
        super("This transaction must be signed by either the leaf owner or leaf delegate");
        this.code = 6025;
        this.name = "LeafAuthorityMustSign";
        if (typeof Error.captureStackTrace === "function") {
          Error.captureStackTrace(this, _LeafAuthorityMustSignError);
        }
      }
    };
    exports.LeafAuthorityMustSignError = LeafAuthorityMustSignError;
    createErrorFromCodeLookup.set(6025, () => new LeafAuthorityMustSignError());
    createErrorFromNameLookup.set("LeafAuthorityMustSign", () => new LeafAuthorityMustSignError());
    var CollectionMustBeSizedError = class _CollectionMustBeSizedError extends Error {
      constructor() {
        super("Collection Not Compatable with Compression, Must be Sized");
        this.code = 6026;
        this.name = "CollectionMustBeSized";
        if (typeof Error.captureStackTrace === "function") {
          Error.captureStackTrace(this, _CollectionMustBeSizedError);
        }
      }
    };
    exports.CollectionMustBeSizedError = CollectionMustBeSizedError;
    createErrorFromCodeLookup.set(6026, () => new CollectionMustBeSizedError());
    createErrorFromNameLookup.set("CollectionMustBeSized", () => new CollectionMustBeSizedError());
    function errorFromCode(code2) {
      const createError = createErrorFromCodeLookup.get(code2);
      return createError != null ? createError() : null;
    }
    exports.errorFromCode = errorFromCode;
    function errorFromName(name) {
      const createError = createErrorFromNameLookup.get(name);
      return createError != null ? createError() : null;
    }
    exports.errorFromName = errorFromName;
  }
});

// ../../node_modules/@metaplex-foundation/mpl-bubblegum/dist/src/generated/instructions/burn.js
var require_burn3 = __commonJS({
  "../../node_modules/@metaplex-foundation/mpl-bubblegum/dist/src/generated/instructions/burn.js"(exports) {
    "use strict";
    var __createBinding = exports && exports.__createBinding || (Object.create ? function(o2, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      var desc = Object.getOwnPropertyDescriptor(m, k);
      if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m[k];
        } };
      }
      Object.defineProperty(o2, k2, desc);
    } : function(o2, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      o2[k2] = m[k];
    });
    var __setModuleDefault = exports && exports.__setModuleDefault || (Object.create ? function(o2, v) {
      Object.defineProperty(o2, "default", { enumerable: true, value: v });
    } : function(o2, v) {
      o2["default"] = v;
    });
    var __importStar = exports && exports.__importStar || function(mod) {
      if (mod && mod.__esModule)
        return mod;
      var result = {};
      if (mod != null) {
        for (var k in mod)
          if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k))
            __createBinding(result, mod, k);
      }
      __setModuleDefault(result, mod);
      return result;
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.createBurnInstruction = exports.burnInstructionDiscriminator = exports.burnStruct = void 0;
    var beet9 = __importStar(require_beet());
    var web3 = __importStar((init_index_browser_esm(), __toCommonJS(index_browser_esm_exports)));
    exports.burnStruct = new beet9.BeetArgsStruct([
      ["instructionDiscriminator", beet9.uniformFixedSizeArray(beet9.u8, 8)],
      ["root", beet9.uniformFixedSizeArray(beet9.u8, 32)],
      ["dataHash", beet9.uniformFixedSizeArray(beet9.u8, 32)],
      ["creatorHash", beet9.uniformFixedSizeArray(beet9.u8, 32)],
      ["nonce", beet9.u64],
      ["index", beet9.u32]
    ], "BurnInstructionArgs");
    exports.burnInstructionDiscriminator = [116, 110, 29, 56, 107, 219, 42, 93];
    function createBurnInstruction3(accounts, args, programId = new web3.PublicKey("BGUMAp9Gq7iTEuizy4pqaxsTyUCBK68MDfK752saRPUY")) {
      var _a;
      const [data] = exports.burnStruct.serialize(__spreadValues({
        instructionDiscriminator: exports.burnInstructionDiscriminator
      }, args));
      const keys = [
        {
          pubkey: accounts.treeAuthority,
          isWritable: false,
          isSigner: false
        },
        {
          pubkey: accounts.leafOwner,
          isWritable: false,
          isSigner: false
        },
        {
          pubkey: accounts.leafDelegate,
          isWritable: false,
          isSigner: false
        },
        {
          pubkey: accounts.merkleTree,
          isWritable: true,
          isSigner: false
        },
        {
          pubkey: accounts.logWrapper,
          isWritable: false,
          isSigner: false
        },
        {
          pubkey: accounts.compressionProgram,
          isWritable: false,
          isSigner: false
        },
        {
          pubkey: (_a = accounts.systemProgram) !== null && _a !== void 0 ? _a : web3.SystemProgram.programId,
          isWritable: false,
          isSigner: false
        }
      ];
      if (accounts.anchorRemainingAccounts != null) {
        for (const acc of accounts.anchorRemainingAccounts) {
          keys.push(acc);
        }
      }
      const ix = new web3.TransactionInstruction({
        programId,
        keys,
        data
      });
      return ix;
    }
    exports.createBurnInstruction = createBurnInstruction3;
  }
});

// ../../node_modules/@metaplex-foundation/mpl-bubblegum/dist/src/generated/instructions/cancelRedeem.js
var require_cancelRedeem = __commonJS({
  "../../node_modules/@metaplex-foundation/mpl-bubblegum/dist/src/generated/instructions/cancelRedeem.js"(exports) {
    "use strict";
    var __createBinding = exports && exports.__createBinding || (Object.create ? function(o2, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      var desc = Object.getOwnPropertyDescriptor(m, k);
      if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m[k];
        } };
      }
      Object.defineProperty(o2, k2, desc);
    } : function(o2, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      o2[k2] = m[k];
    });
    var __setModuleDefault = exports && exports.__setModuleDefault || (Object.create ? function(o2, v) {
      Object.defineProperty(o2, "default", { enumerable: true, value: v });
    } : function(o2, v) {
      o2["default"] = v;
    });
    var __importStar = exports && exports.__importStar || function(mod) {
      if (mod && mod.__esModule)
        return mod;
      var result = {};
      if (mod != null) {
        for (var k in mod)
          if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k))
            __createBinding(result, mod, k);
      }
      __setModuleDefault(result, mod);
      return result;
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.createCancelRedeemInstruction = exports.cancelRedeemInstructionDiscriminator = exports.cancelRedeemStruct = void 0;
    var beet9 = __importStar(require_beet());
    var web3 = __importStar((init_index_browser_esm(), __toCommonJS(index_browser_esm_exports)));
    exports.cancelRedeemStruct = new beet9.BeetArgsStruct([
      ["instructionDiscriminator", beet9.uniformFixedSizeArray(beet9.u8, 8)],
      ["root", beet9.uniformFixedSizeArray(beet9.u8, 32)]
    ], "CancelRedeemInstructionArgs");
    exports.cancelRedeemInstructionDiscriminator = [111, 76, 232, 50, 39, 175, 48, 242];
    function createCancelRedeemInstruction(accounts, args, programId = new web3.PublicKey("BGUMAp9Gq7iTEuizy4pqaxsTyUCBK68MDfK752saRPUY")) {
      var _a;
      const [data] = exports.cancelRedeemStruct.serialize(__spreadValues({
        instructionDiscriminator: exports.cancelRedeemInstructionDiscriminator
      }, args));
      const keys = [
        {
          pubkey: accounts.treeAuthority,
          isWritable: false,
          isSigner: false
        },
        {
          pubkey: accounts.leafOwner,
          isWritable: true,
          isSigner: true
        },
        {
          pubkey: accounts.merkleTree,
          isWritable: true,
          isSigner: false
        },
        {
          pubkey: accounts.voucher,
          isWritable: true,
          isSigner: false
        },
        {
          pubkey: accounts.logWrapper,
          isWritable: false,
          isSigner: false
        },
        {
          pubkey: accounts.compressionProgram,
          isWritable: false,
          isSigner: false
        },
        {
          pubkey: (_a = accounts.systemProgram) !== null && _a !== void 0 ? _a : web3.SystemProgram.programId,
          isWritable: false,
          isSigner: false
        }
      ];
      if (accounts.anchorRemainingAccounts != null) {
        for (const acc of accounts.anchorRemainingAccounts) {
          keys.push(acc);
        }
      }
      const ix = new web3.TransactionInstruction({
        programId,
        keys,
        data
      });
      return ix;
    }
    exports.createCancelRedeemInstruction = createCancelRedeemInstruction;
  }
});

// ../../node_modules/@babel/runtime/helpers/esm/typeof.js
function _typeof(o2) {
  "@babel/helpers - typeof";
  return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function(o3) {
    return typeof o3;
  } : function(o3) {
    return o3 && "function" == typeof Symbol && o3.constructor === Symbol && o3 !== Symbol.prototype ? "symbol" : typeof o3;
  }, _typeof(o2);
}
var init_typeof = __esm({
  "../../node_modules/@babel/runtime/helpers/esm/typeof.js"() {
  }
});

// ../../node_modules/@babel/runtime/helpers/esm/toPrimitive.js
function _toPrimitive2(input, hint) {
  if (_typeof(input) !== "object" || input === null)
    return input;
  var prim = input[Symbol.toPrimitive];
  if (prim !== void 0) {
    var res = prim.call(input, hint || "default");
    if (_typeof(res) !== "object")
      return res;
    throw new TypeError("@@toPrimitive must return a primitive value.");
  }
  return (hint === "string" ? String : Number)(input);
}
var init_toPrimitive = __esm({
  "../../node_modules/@babel/runtime/helpers/esm/toPrimitive.js"() {
    init_typeof();
  }
});

// ../../node_modules/@babel/runtime/helpers/esm/toPropertyKey.js
function _toPropertyKey2(arg) {
  var key = _toPrimitive2(arg, "string");
  return _typeof(key) === "symbol" ? key : String(key);
}
var init_toPropertyKey = __esm({
  "../../node_modules/@babel/runtime/helpers/esm/toPropertyKey.js"() {
    init_typeof();
    init_toPrimitive();
  }
});

// ../../node_modules/@babel/runtime/helpers/esm/defineProperty.js
function _defineProperty2(obj, key, value) {
  key = _toPropertyKey2(key);
  if (key in obj) {
    Object.defineProperty(obj, key, {
      value,
      enumerable: true,
      configurable: true,
      writable: true
    });
  } else {
    obj[key] = value;
  }
  return obj;
}
var init_defineProperty = __esm({
  "../../node_modules/@babel/runtime/helpers/esm/defineProperty.js"() {
    init_toPropertyKey();
  }
});

// ../../node_modules/@metaplex-foundation/mpl-bubblegum/node_modules/@solana/spl-token/lib/index.browser.esm.js
var index_browser_esm_exports2 = {};
__export(index_browser_esm_exports2, {
  ASSOCIATED_TOKEN_PROGRAM_ID: () => ASSOCIATED_TOKEN_PROGRAM_ID,
  AccountLayout: () => AccountLayout,
  MintLayout: () => MintLayout,
  NATIVE_MINT: () => NATIVE_MINT,
  TOKEN_PROGRAM_ID: () => TOKEN_PROGRAM_ID,
  Token: () => Token,
  u64: () => u64
});
function getLens(b64) {
  var len = b64.length;
  if (len % 4 > 0) {
    throw new Error("Invalid string. Length must be a multiple of 4");
  }
  var validLen = b64.indexOf("=");
  if (validLen === -1)
    validLen = len;
  var placeHoldersLen = validLen === len ? 0 : 4 - validLen % 4;
  return [validLen, placeHoldersLen];
}
function byteLength(b64) {
  var lens = getLens(b64);
  var validLen = lens[0];
  var placeHoldersLen = lens[1];
  return (validLen + placeHoldersLen) * 3 / 4 - placeHoldersLen;
}
function _byteLength(b64, validLen, placeHoldersLen) {
  return (validLen + placeHoldersLen) * 3 / 4 - placeHoldersLen;
}
function toByteArray(b64) {
  var tmp;
  var lens = getLens(b64);
  var validLen = lens[0];
  var placeHoldersLen = lens[1];
  var arr = new Arr(_byteLength(b64, validLen, placeHoldersLen));
  var curByte = 0;
  var len = placeHoldersLen > 0 ? validLen - 4 : validLen;
  var i;
  for (i = 0; i < len; i += 4) {
    tmp = revLookup[b64.charCodeAt(i)] << 18 | revLookup[b64.charCodeAt(i + 1)] << 12 | revLookup[b64.charCodeAt(i + 2)] << 6 | revLookup[b64.charCodeAt(i + 3)];
    arr[curByte++] = tmp >> 16 & 255;
    arr[curByte++] = tmp >> 8 & 255;
    arr[curByte++] = tmp & 255;
  }
  if (placeHoldersLen === 2) {
    tmp = revLookup[b64.charCodeAt(i)] << 2 | revLookup[b64.charCodeAt(i + 1)] >> 4;
    arr[curByte++] = tmp & 255;
  }
  if (placeHoldersLen === 1) {
    tmp = revLookup[b64.charCodeAt(i)] << 10 | revLookup[b64.charCodeAt(i + 1)] << 4 | revLookup[b64.charCodeAt(i + 2)] >> 2;
    arr[curByte++] = tmp >> 8 & 255;
    arr[curByte++] = tmp & 255;
  }
  return arr;
}
function tripletToBase64(num) {
  return lookup[num >> 18 & 63] + lookup[num >> 12 & 63] + lookup[num >> 6 & 63] + lookup[num & 63];
}
function encodeChunk(uint8, start, end) {
  var tmp;
  var output = [];
  for (var i = start; i < end; i += 3) {
    tmp = (uint8[i] << 16 & 16711680) + (uint8[i + 1] << 8 & 65280) + (uint8[i + 2] & 255);
    output.push(tripletToBase64(tmp));
  }
  return output.join("");
}
function fromByteArray(uint8) {
  var tmp;
  var len = uint8.length;
  var extraBytes = len % 3;
  var parts = [];
  var maxChunkLength = 16383;
  for (var i = 0, len2 = len - extraBytes; i < len2; i += maxChunkLength) {
    parts.push(encodeChunk(uint8, i, i + maxChunkLength > len2 ? len2 : i + maxChunkLength));
  }
  if (extraBytes === 1) {
    tmp = uint8[len - 1];
    parts.push(
      lookup[tmp >> 2] + lookup[tmp << 4 & 63] + "=="
    );
  } else if (extraBytes === 2) {
    tmp = (uint8[len - 2] << 8) + uint8[len - 1];
    parts.push(
      lookup[tmp >> 10] + lookup[tmp >> 4 & 63] + lookup[tmp << 2 & 63] + "="
    );
  }
  return parts.join("");
}
function inspect$1(obj, opts) {
  var ctx = {
    seen: [],
    stylize: stylizeNoColor
  };
  if (arguments.length >= 3)
    ctx.depth = arguments[2];
  if (arguments.length >= 4)
    ctx.colors = arguments[3];
  if (isBoolean(opts)) {
    ctx.showHidden = opts;
  } else if (opts) {
    _extend(ctx, opts);
  }
  if (isUndefined(ctx.showHidden))
    ctx.showHidden = false;
  if (isUndefined(ctx.depth))
    ctx.depth = 2;
  if (isUndefined(ctx.colors))
    ctx.colors = false;
  if (isUndefined(ctx.customInspect))
    ctx.customInspect = true;
  if (ctx.colors)
    ctx.stylize = stylizeWithColor;
  return formatValue(ctx, obj, ctx.depth);
}
function stylizeWithColor(str, styleType) {
  var style = inspect$1.styles[styleType];
  if (style) {
    return "\x1B[" + inspect$1.colors[style][0] + "m" + str + "\x1B[" + inspect$1.colors[style][1] + "m";
  } else {
    return str;
  }
}
function stylizeNoColor(str, styleType) {
  return str;
}
function arrayToHash(array) {
  var hash = {};
  array.forEach(function(val, idx) {
    hash[val] = true;
  });
  return hash;
}
function formatValue(ctx, value, recurseTimes) {
  if (ctx.customInspect && value && isFunction(value.inspect) && // Filter out the util module, it's inspect function is special
  value.inspect !== inspect$1 && // Also filter out any prototype objects using the circular check.
  !(value.constructor && value.constructor.prototype === value)) {
    var ret = value.inspect(recurseTimes, ctx);
    if (!isString(ret)) {
      ret = formatValue(ctx, ret, recurseTimes);
    }
    return ret;
  }
  var primitive = formatPrimitive(ctx, value);
  if (primitive) {
    return primitive;
  }
  var keys = Object.keys(value);
  var visibleKeys = arrayToHash(keys);
  if (ctx.showHidden) {
    keys = Object.getOwnPropertyNames(value);
  }
  if (isError(value) && (keys.indexOf("message") >= 0 || keys.indexOf("description") >= 0)) {
    return formatError(value);
  }
  if (keys.length === 0) {
    if (isFunction(value)) {
      var name = value.name ? ": " + value.name : "";
      return ctx.stylize("[Function" + name + "]", "special");
    }
    if (isRegExp(value)) {
      return ctx.stylize(RegExp.prototype.toString.call(value), "regexp");
    }
    if (isDate(value)) {
      return ctx.stylize(Date.prototype.toString.call(value), "date");
    }
    if (isError(value)) {
      return formatError(value);
    }
  }
  var base2 = "", array = false, braces = ["{", "}"];
  if (isArray(value)) {
    array = true;
    braces = ["[", "]"];
  }
  if (isFunction(value)) {
    var n = value.name ? ": " + value.name : "";
    base2 = " [Function" + n + "]";
  }
  if (isRegExp(value)) {
    base2 = " " + RegExp.prototype.toString.call(value);
  }
  if (isDate(value)) {
    base2 = " " + Date.prototype.toUTCString.call(value);
  }
  if (isError(value)) {
    base2 = " " + formatError(value);
  }
  if (keys.length === 0 && (!array || value.length == 0)) {
    return braces[0] + base2 + braces[1];
  }
  if (recurseTimes < 0) {
    if (isRegExp(value)) {
      return ctx.stylize(RegExp.prototype.toString.call(value), "regexp");
    } else {
      return ctx.stylize("[Object]", "special");
    }
  }
  ctx.seen.push(value);
  var output;
  if (array) {
    output = formatArray(ctx, value, recurseTimes, visibleKeys, keys);
  } else {
    output = keys.map(function(key) {
      return formatProperty(ctx, value, recurseTimes, visibleKeys, key, array);
    });
  }
  ctx.seen.pop();
  return reduceToSingleString(output, base2, braces);
}
function formatPrimitive(ctx, value) {
  if (isUndefined(value))
    return ctx.stylize("undefined", "undefined");
  if (isString(value)) {
    var simple = "'" + JSON.stringify(value).replace(/^"|"$/g, "").replace(/'/g, "\\'").replace(/\\"/g, '"') + "'";
    return ctx.stylize(simple, "string");
  }
  if (isNumber(value))
    return ctx.stylize("" + value, "number");
  if (isBoolean(value))
    return ctx.stylize("" + value, "boolean");
  if (isNull(value))
    return ctx.stylize("null", "null");
}
function formatError(value) {
  return "[" + Error.prototype.toString.call(value) + "]";
}
function formatArray(ctx, value, recurseTimes, visibleKeys, keys) {
  var output = [];
  for (var i = 0, l = value.length; i < l; ++i) {
    if (hasOwnProperty(value, String(i))) {
      output.push(formatProperty(
        ctx,
        value,
        recurseTimes,
        visibleKeys,
        String(i),
        true
      ));
    } else {
      output.push("");
    }
  }
  keys.forEach(function(key) {
    if (!key.match(/^\d+$/)) {
      output.push(formatProperty(
        ctx,
        value,
        recurseTimes,
        visibleKeys,
        key,
        true
      ));
    }
  });
  return output;
}
function formatProperty(ctx, value, recurseTimes, visibleKeys, key, array) {
  var name, str, desc;
  desc = Object.getOwnPropertyDescriptor(value, key) || { value: value[key] };
  if (desc.get) {
    if (desc.set) {
      str = ctx.stylize("[Getter/Setter]", "special");
    } else {
      str = ctx.stylize("[Getter]", "special");
    }
  } else {
    if (desc.set) {
      str = ctx.stylize("[Setter]", "special");
    }
  }
  if (!hasOwnProperty(visibleKeys, key)) {
    name = "[" + key + "]";
  }
  if (!str) {
    if (ctx.seen.indexOf(desc.value) < 0) {
      if (isNull(recurseTimes)) {
        str = formatValue(ctx, desc.value, null);
      } else {
        str = formatValue(ctx, desc.value, recurseTimes - 1);
      }
      if (str.indexOf("\n") > -1) {
        if (array) {
          str = str.split("\n").map(function(line) {
            return "  " + line;
          }).join("\n").substr(2);
        } else {
          str = "\n" + str.split("\n").map(function(line) {
            return "   " + line;
          }).join("\n");
        }
      }
    } else {
      str = ctx.stylize("[Circular]", "special");
    }
  }
  if (isUndefined(name)) {
    if (array && key.match(/^\d+$/)) {
      return str;
    }
    name = JSON.stringify("" + key);
    if (name.match(/^"([a-zA-Z_][a-zA-Z_0-9]*)"$/)) {
      name = name.substr(1, name.length - 2);
      name = ctx.stylize(name, "name");
    } else {
      name = name.replace(/'/g, "\\'").replace(/\\"/g, '"').replace(/(^"|"$)/g, "'");
      name = ctx.stylize(name, "string");
    }
  }
  return name + ": " + str;
}
function reduceToSingleString(output, base2, braces) {
  var length = output.reduce(function(prev, cur) {
    if (cur.indexOf("\n") >= 0)
      ;
    return prev + cur.replace(/\u001b\[\d\d?m/g, "").length + 1;
  }, 0);
  if (length > 60) {
    return braces[0] + (base2 === "" ? "" : base2 + "\n ") + " " + output.join(",\n  ") + " " + braces[1];
  }
  return braces[0] + base2 + " " + output.join(", ") + " " + braces[1];
}
function isArray(ar) {
  return Array.isArray(ar);
}
function isBoolean(arg) {
  return typeof arg === "boolean";
}
function isNull(arg) {
  return arg === null;
}
function isNumber(arg) {
  return typeof arg === "number";
}
function isString(arg) {
  return typeof arg === "string";
}
function isUndefined(arg) {
  return arg === void 0;
}
function isRegExp(re) {
  return isObject(re) && objectToString(re) === "[object RegExp]";
}
function isObject(arg) {
  return typeof arg === "object" && arg !== null;
}
function isDate(d) {
  return isObject(d) && objectToString(d) === "[object Date]";
}
function isError(e2) {
  return isObject(e2) && (objectToString(e2) === "[object Error]" || e2 instanceof Error);
}
function isFunction(arg) {
  return typeof arg === "function";
}
function isPrimitive(arg) {
  return arg === null || typeof arg === "boolean" || typeof arg === "number" || typeof arg === "string" || typeof arg === "symbol" || // ES6 symbol
  typeof arg === "undefined";
}
function objectToString(o2) {
  return Object.prototype.toString.call(o2);
}
function _extend(origin, add) {
  if (!add || !isObject(add))
    return origin;
  var keys = Object.keys(add);
  var i = keys.length;
  while (i--) {
    origin[keys[i]] = add[keys[i]];
  }
  return origin;
}
function hasOwnProperty(obj, prop) {
  return Object.prototype.hasOwnProperty.call(obj, prop);
}
function compare(a, b) {
  if (a === b) {
    return 0;
  }
  var x = a.length;
  var y = b.length;
  for (var i = 0, len = Math.min(x, y); i < len; ++i) {
    if (a[i] !== b[i]) {
      x = a[i];
      y = b[i];
      break;
    }
  }
  if (x < y) {
    return -1;
  }
  if (y < x) {
    return 1;
  }
  return 0;
}
function functionsHaveNames() {
  if (typeof _functionsHaveNames !== "undefined") {
    return _functionsHaveNames;
  }
  return _functionsHaveNames = function() {
    return (function foo() {
    }).name === "foo";
  }();
}
function pToString(obj) {
  return Object.prototype.toString.call(obj);
}
function isView(arrbuf) {
  if (buffer.isBuffer(arrbuf)) {
    return false;
  }
  if (typeof global$1.ArrayBuffer !== "function") {
    return false;
  }
  if (typeof ArrayBuffer.isView === "function") {
    return ArrayBuffer.isView(arrbuf);
  }
  if (!arrbuf) {
    return false;
  }
  if (arrbuf instanceof DataView) {
    return true;
  }
  if (arrbuf.buffer && arrbuf.buffer instanceof ArrayBuffer) {
    return true;
  }
  return false;
}
function assert(value, message) {
  if (!value)
    fail(value, true, message, "==", ok);
}
function getName(func) {
  if (!isFunction(func)) {
    return;
  }
  if (functionsHaveNames()) {
    return func.name;
  }
  var str = func.toString();
  var match = str.match(regex);
  return match && match[1];
}
function AssertionError(options) {
  this.name = "AssertionError";
  this.actual = options.actual;
  this.expected = options.expected;
  this.operator = options.operator;
  if (options.message) {
    this.message = options.message;
    this.generatedMessage = false;
  } else {
    this.message = getMessage(this);
    this.generatedMessage = true;
  }
  var stackStartFunction = options.stackStartFunction || fail;
  if (Error.captureStackTrace) {
    Error.captureStackTrace(this, stackStartFunction);
  } else {
    var err = new Error();
    if (err.stack) {
      var out = err.stack;
      var fn_name = getName(stackStartFunction);
      var idx = out.indexOf("\n" + fn_name);
      if (idx >= 0) {
        var next_line = out.indexOf("\n", idx + 1);
        out = out.substring(next_line + 1);
      }
      this.stack = out;
    }
  }
}
function truncate(s, n) {
  if (typeof s === "string") {
    return s.length < n ? s : s.slice(0, n);
  } else {
    return s;
  }
}
function inspect(something) {
  if (functionsHaveNames() || !isFunction(something)) {
    return inspect$1(something);
  }
  var rawname = getName(something);
  var name = rawname ? ": " + rawname : "";
  return "[Function" + name + "]";
}
function getMessage(self2) {
  return truncate(inspect(self2.actual), 128) + " " + self2.operator + " " + truncate(inspect(self2.expected), 128);
}
function fail(actual, expected, message, operator, stackStartFunction) {
  throw new AssertionError({
    message,
    actual,
    expected,
    operator,
    stackStartFunction
  });
}
function ok(value, message) {
  if (!value)
    fail(value, true, message, "==", ok);
}
function equal(actual, expected, message) {
  if (actual != expected)
    fail(actual, expected, message, "==", equal);
}
function notEqual(actual, expected, message) {
  if (actual == expected) {
    fail(actual, expected, message, "!=", notEqual);
  }
}
function deepEqual(actual, expected, message) {
  if (!_deepEqual(actual, expected, false)) {
    fail(actual, expected, message, "deepEqual", deepEqual);
  }
}
function deepStrictEqual(actual, expected, message) {
  if (!_deepEqual(actual, expected, true)) {
    fail(actual, expected, message, "deepStrictEqual", deepStrictEqual);
  }
}
function _deepEqual(actual, expected, strict, memos) {
  if (actual === expected) {
    return true;
  } else if (buffer.isBuffer(actual) && buffer.isBuffer(expected)) {
    return compare(actual, expected) === 0;
  } else if (isDate(actual) && isDate(expected)) {
    return actual.getTime() === expected.getTime();
  } else if (isRegExp(actual) && isRegExp(expected)) {
    return actual.source === expected.source && actual.global === expected.global && actual.multiline === expected.multiline && actual.lastIndex === expected.lastIndex && actual.ignoreCase === expected.ignoreCase;
  } else if ((actual === null || typeof actual !== "object") && (expected === null || typeof expected !== "object")) {
    return strict ? actual === expected : actual == expected;
  } else if (isView(actual) && isView(expected) && pToString(actual) === pToString(expected) && !(actual instanceof Float32Array || actual instanceof Float64Array)) {
    return compare(
      new Uint8Array(actual.buffer),
      new Uint8Array(expected.buffer)
    ) === 0;
  } else if (buffer.isBuffer(actual) !== buffer.isBuffer(expected)) {
    return false;
  } else {
    memos = memos || { actual: [], expected: [] };
    var actualIndex = memos.actual.indexOf(actual);
    if (actualIndex !== -1) {
      if (actualIndex === memos.expected.indexOf(expected)) {
        return true;
      }
    }
    memos.actual.push(actual);
    memos.expected.push(expected);
    return objEquiv(actual, expected, strict, memos);
  }
}
function isArguments(object) {
  return Object.prototype.toString.call(object) == "[object Arguments]";
}
function objEquiv(a, b, strict, actualVisitedObjects) {
  if (a === null || a === void 0 || b === null || b === void 0)
    return false;
  if (isPrimitive(a) || isPrimitive(b))
    return a === b;
  if (strict && Object.getPrototypeOf(a) !== Object.getPrototypeOf(b))
    return false;
  var aIsArgs = isArguments(a);
  var bIsArgs = isArguments(b);
  if (aIsArgs && !bIsArgs || !aIsArgs && bIsArgs)
    return false;
  if (aIsArgs) {
    a = pSlice.call(a);
    b = pSlice.call(b);
    return _deepEqual(a, b, strict);
  }
  var ka = objectKeys(a);
  var kb = objectKeys(b);
  var key, i;
  if (ka.length !== kb.length)
    return false;
  ka.sort();
  kb.sort();
  for (i = ka.length - 1; i >= 0; i--) {
    if (ka[i] !== kb[i])
      return false;
  }
  for (i = ka.length - 1; i >= 0; i--) {
    key = ka[i];
    if (!_deepEqual(a[key], b[key], strict, actualVisitedObjects))
      return false;
  }
  return true;
}
function notDeepEqual(actual, expected, message) {
  if (_deepEqual(actual, expected, false)) {
    fail(actual, expected, message, "notDeepEqual", notDeepEqual);
  }
}
function notDeepStrictEqual(actual, expected, message) {
  if (_deepEqual(actual, expected, true)) {
    fail(actual, expected, message, "notDeepStrictEqual", notDeepStrictEqual);
  }
}
function strictEqual(actual, expected, message) {
  if (actual !== expected) {
    fail(actual, expected, message, "===", strictEqual);
  }
}
function notStrictEqual(actual, expected, message) {
  if (actual === expected) {
    fail(actual, expected, message, "!==", notStrictEqual);
  }
}
function expectedException(actual, expected) {
  if (!actual || !expected) {
    return false;
  }
  if (Object.prototype.toString.call(expected) == "[object RegExp]") {
    return expected.test(actual);
  }
  try {
    if (actual instanceof expected) {
      return true;
    }
  } catch (e2) {
  }
  if (Error.isPrototypeOf(expected)) {
    return false;
  }
  return expected.call({}, actual) === true;
}
function _tryBlock(block) {
  var error2;
  try {
    block();
  } catch (e2) {
    error2 = e2;
  }
  return error2;
}
function _throws(shouldThrow, block, expected, message) {
  var actual;
  if (typeof block !== "function") {
    throw new TypeError('"block" argument must be a function');
  }
  if (typeof expected === "string") {
    message = expected;
    expected = null;
  }
  actual = _tryBlock(block);
  message = (expected && expected.name ? " (" + expected.name + ")." : ".") + (message ? " " + message : ".");
  if (shouldThrow && !actual) {
    fail(actual, expected, "Missing expected exception" + message);
  }
  var userProvidedMessage = typeof message === "string";
  var isUnwantedException = !shouldThrow && isError(actual);
  var isUnexpectedException = !shouldThrow && actual && !expected;
  if (isUnwantedException && userProvidedMessage && expectedException(actual, expected) || isUnexpectedException) {
    fail(actual, expected, "Got unwanted exception" + message);
  }
  if (shouldThrow && actual && expected && !expectedException(actual, expected) || !shouldThrow && actual) {
    throw actual;
  }
}
function throws(block, error2, message) {
  _throws(true, block, error2, message);
}
function doesNotThrow(block, error2, message) {
  _throws(false, block, error2, message);
}
function ifError(err) {
  if (err)
    throw err;
}
function nameWithProperty(name, lo) {
  if (lo.property) {
    return name + "[" + lo.property + "]";
  }
  return name;
}
function bindConstructorLayout(Class, layout) {
  if ("function" !== typeof Class) {
    throw new TypeError("Class must be constructor");
  }
  if (Class.hasOwnProperty("layout_")) {
    throw new Error("Class is already bound to a layout");
  }
  if (!(layout && layout instanceof Layout)) {
    throw new TypeError("layout must be a Layout");
  }
  if (layout.hasOwnProperty("boundConstructor_")) {
    throw new Error("layout is already bound to a constructor");
  }
  Class.layout_ = layout;
  layout.boundConstructor_ = Class;
  layout.makeDestinationObject = () => new Class();
  Object.defineProperty(Class.prototype, "encode", {
    value: function(b, offset) {
      return layout.encode(this, b, offset);
    },
    writable: true
  });
  Object.defineProperty(Class, "decode", {
    value: function(b, offset) {
      return layout.decode(b, offset);
    },
    writable: true
  });
}
function divmodInt64(src) {
  const hi32 = Math.floor(src / V2E32);
  const lo32 = src - hi32 * V2E32;
  return { hi32, lo32 };
}
function roundedInt64(hi32, lo32) {
  return hi32 * V2E32 + lo32;
}
function fixBitwiseResult(v) {
  if (0 > v) {
    v += 4294967296;
  }
  return v;
}
function sendAndConfirmTransaction2(title, connection, transaction, ...signers) {
  return sendAndConfirmTransaction(connection, transaction, signers, {
    skipPreflight: false
  });
}
function pubkeyToBuffer(publicKey3) {
  return buffer.Buffer.from(publicKey3.toBuffer());
}
function isAccount(accountOrPublicKey) {
  return "publicKey" in accountOrPublicKey;
}
var import_bn, buffer, base64Js, lookup, revLookup, Arr, code, i, len, ieee754, global$1, inherits, inherits$1, hasOwn, objectKeys, pSlice, _functionsHaveNames, regex, Layout$1, Layout, ExternalLayout, GreedyCount, OffsetLayout, UInt, UIntBE, Int, IntBE, V2E32, NearUInt64, NearUInt64BE, NearInt64, NearInt64BE, Float, FloatBE, Double, DoubleBE, Sequence, Structure, UnionDiscriminator, UnionLayoutDiscriminator, Union, VariantLayout, BitStructure, BitField, Boolean2, Blob2, CString, UTF8, Constant, u8, u32, struct, blob, publicKey, uint64, TOKEN_PROGRAM_ID, ASSOCIATED_TOKEN_PROGRAM_ID, FAILED_TO_FIND_ACCOUNT, INVALID_ACCOUNT_OWNER, u64, AuthorityTypeCodes, NATIVE_MINT, MintLayout, AccountLayout, MultisigLayout, Token;
var init_index_browser_esm2 = __esm({
  "../../node_modules/@metaplex-foundation/mpl-bubblegum/node_modules/@solana/spl-token/lib/index.browser.esm.js"() {
    init_defineProperty();
    import_bn = __toESM(require_bn());
    init_index_browser_esm();
    buffer = {};
    base64Js = {};
    base64Js.byteLength = byteLength;
    base64Js.toByteArray = toByteArray;
    base64Js.fromByteArray = fromByteArray;
    lookup = [];
    revLookup = [];
    Arr = typeof Uint8Array !== "undefined" ? Uint8Array : Array;
    code = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/";
    for (i = 0, len = code.length; i < len; ++i) {
      lookup[i] = code[i];
      revLookup[code.charCodeAt(i)] = i;
    }
    revLookup["-".charCodeAt(0)] = 62;
    revLookup["_".charCodeAt(0)] = 63;
    ieee754 = {};
    ieee754.read = function(buffer2, offset, isLE, mLen, nBytes) {
      var e2, m;
      var eLen = nBytes * 8 - mLen - 1;
      var eMax = (1 << eLen) - 1;
      var eBias = eMax >> 1;
      var nBits = -7;
      var i = isLE ? nBytes - 1 : 0;
      var d = isLE ? -1 : 1;
      var s = buffer2[offset + i];
      i += d;
      e2 = s & (1 << -nBits) - 1;
      s >>= -nBits;
      nBits += eLen;
      for (; nBits > 0; e2 = e2 * 256 + buffer2[offset + i], i += d, nBits -= 8) {
      }
      m = e2 & (1 << -nBits) - 1;
      e2 >>= -nBits;
      nBits += mLen;
      for (; nBits > 0; m = m * 256 + buffer2[offset + i], i += d, nBits -= 8) {
      }
      if (e2 === 0) {
        e2 = 1 - eBias;
      } else if (e2 === eMax) {
        return m ? NaN : (s ? -1 : 1) * Infinity;
      } else {
        m = m + Math.pow(2, mLen);
        e2 = e2 - eBias;
      }
      return (s ? -1 : 1) * m * Math.pow(2, e2 - mLen);
    };
    ieee754.write = function(buffer2, value, offset, isLE, mLen, nBytes) {
      var e2, m, c;
      var eLen = nBytes * 8 - mLen - 1;
      var eMax = (1 << eLen) - 1;
      var eBias = eMax >> 1;
      var rt = mLen === 23 ? Math.pow(2, -24) - Math.pow(2, -77) : 0;
      var i = isLE ? 0 : nBytes - 1;
      var d = isLE ? 1 : -1;
      var s = value < 0 || value === 0 && 1 / value < 0 ? 1 : 0;
      value = Math.abs(value);
      if (isNaN(value) || value === Infinity) {
        m = isNaN(value) ? 1 : 0;
        e2 = eMax;
      } else {
        e2 = Math.floor(Math.log(value) / Math.LN2);
        if (value * (c = Math.pow(2, -e2)) < 1) {
          e2--;
          c *= 2;
        }
        if (e2 + eBias >= 1) {
          value += rt / c;
        } else {
          value += rt * Math.pow(2, 1 - eBias);
        }
        if (value * c >= 2) {
          e2++;
          c /= 2;
        }
        if (e2 + eBias >= eMax) {
          m = 0;
          e2 = eMax;
        } else if (e2 + eBias >= 1) {
          m = (value * c - 1) * Math.pow(2, mLen);
          e2 = e2 + eBias;
        } else {
          m = value * Math.pow(2, eBias - 1) * Math.pow(2, mLen);
          e2 = 0;
        }
      }
      for (; mLen >= 8; buffer2[offset + i] = m & 255, i += d, m /= 256, mLen -= 8) {
      }
      e2 = e2 << mLen | m;
      eLen += mLen;
      for (; eLen > 0; buffer2[offset + i] = e2 & 255, i += d, e2 /= 256, eLen -= 8) {
      }
      buffer2[offset + i - d] |= s * 128;
    };
    (function(exports) {
      const base64 = base64Js;
      const ieee754$1 = ieee754;
      const customInspectSymbol = typeof Symbol === "function" && typeof Symbol["for"] === "function" ? Symbol["for"]("nodejs.util.inspect.custom") : null;
      exports.Buffer = Buffer22;
      exports.SlowBuffer = SlowBuffer;
      exports.INSPECT_MAX_BYTES = 50;
      const K_MAX_LENGTH = 2147483647;
      exports.kMaxLength = K_MAX_LENGTH;
      Buffer22.TYPED_ARRAY_SUPPORT = typedArraySupport();
      if (!Buffer22.TYPED_ARRAY_SUPPORT && typeof console !== "undefined" && typeof console.error === "function") {
        console.error(
          "This browser lacks typed array (Uint8Array) support which is required by `buffer` v5.x. Use `buffer` v4.x if you require old browser support."
        );
      }
      function typedArraySupport() {
        try {
          const arr = new Uint8Array(1);
          const proto = { foo: function() {
            return 42;
          } };
          Object.setPrototypeOf(proto, Uint8Array.prototype);
          Object.setPrototypeOf(arr, proto);
          return arr.foo() === 42;
        } catch (e2) {
          return false;
        }
      }
      Object.defineProperty(Buffer22.prototype, "parent", {
        enumerable: true,
        get: function() {
          if (!Buffer22.isBuffer(this))
            return void 0;
          return this.buffer;
        }
      });
      Object.defineProperty(Buffer22.prototype, "offset", {
        enumerable: true,
        get: function() {
          if (!Buffer22.isBuffer(this))
            return void 0;
          return this.byteOffset;
        }
      });
      function createBuffer(length) {
        if (length > K_MAX_LENGTH) {
          throw new RangeError('The value "' + length + '" is invalid for option "size"');
        }
        const buf = new Uint8Array(length);
        Object.setPrototypeOf(buf, Buffer22.prototype);
        return buf;
      }
      function Buffer22(arg, encodingOrOffset, length) {
        if (typeof arg === "number") {
          if (typeof encodingOrOffset === "string") {
            throw new TypeError(
              'The "string" argument must be of type string. Received type number'
            );
          }
          return allocUnsafe(arg);
        }
        return from(arg, encodingOrOffset, length);
      }
      Buffer22.poolSize = 8192;
      function from(value, encodingOrOffset, length) {
        if (typeof value === "string") {
          return fromString(value, encodingOrOffset);
        }
        if (ArrayBuffer.isView(value)) {
          return fromArrayView(value);
        }
        if (value == null) {
          throw new TypeError(
            "The first argument must be one of type string, Buffer, ArrayBuffer, Array, or Array-like Object. Received type " + typeof value
          );
        }
        if (isInstance(value, ArrayBuffer) || value && isInstance(value.buffer, ArrayBuffer)) {
          return fromArrayBuffer(value, encodingOrOffset, length);
        }
        if (typeof SharedArrayBuffer !== "undefined" && (isInstance(value, SharedArrayBuffer) || value && isInstance(value.buffer, SharedArrayBuffer))) {
          return fromArrayBuffer(value, encodingOrOffset, length);
        }
        if (typeof value === "number") {
          throw new TypeError(
            'The "value" argument must not be of type number. Received type number'
          );
        }
        const valueOf = value.valueOf && value.valueOf();
        if (valueOf != null && valueOf !== value) {
          return Buffer22.from(valueOf, encodingOrOffset, length);
        }
        const b = fromObject(value);
        if (b)
          return b;
        if (typeof Symbol !== "undefined" && Symbol.toPrimitive != null && typeof value[Symbol.toPrimitive] === "function") {
          return Buffer22.from(value[Symbol.toPrimitive]("string"), encodingOrOffset, length);
        }
        throw new TypeError(
          "The first argument must be one of type string, Buffer, ArrayBuffer, Array, or Array-like Object. Received type " + typeof value
        );
      }
      Buffer22.from = function(value, encodingOrOffset, length) {
        return from(value, encodingOrOffset, length);
      };
      Object.setPrototypeOf(Buffer22.prototype, Uint8Array.prototype);
      Object.setPrototypeOf(Buffer22, Uint8Array);
      function assertSize(size) {
        if (typeof size !== "number") {
          throw new TypeError('"size" argument must be of type number');
        } else if (size < 0) {
          throw new RangeError('The value "' + size + '" is invalid for option "size"');
        }
      }
      function alloc(size, fill, encoding) {
        assertSize(size);
        if (size <= 0) {
          return createBuffer(size);
        }
        if (fill !== void 0) {
          return typeof encoding === "string" ? createBuffer(size).fill(fill, encoding) : createBuffer(size).fill(fill);
        }
        return createBuffer(size);
      }
      Buffer22.alloc = function(size, fill, encoding) {
        return alloc(size, fill, encoding);
      };
      function allocUnsafe(size) {
        assertSize(size);
        return createBuffer(size < 0 ? 0 : checked(size) | 0);
      }
      Buffer22.allocUnsafe = function(size) {
        return allocUnsafe(size);
      };
      Buffer22.allocUnsafeSlow = function(size) {
        return allocUnsafe(size);
      };
      function fromString(string, encoding) {
        if (typeof encoding !== "string" || encoding === "") {
          encoding = "utf8";
        }
        if (!Buffer22.isEncoding(encoding)) {
          throw new TypeError("Unknown encoding: " + encoding);
        }
        const length = byteLength2(string, encoding) | 0;
        let buf = createBuffer(length);
        const actual = buf.write(string, encoding);
        if (actual !== length) {
          buf = buf.slice(0, actual);
        }
        return buf;
      }
      function fromArrayLike(array) {
        const length = array.length < 0 ? 0 : checked(array.length) | 0;
        const buf = createBuffer(length);
        for (let i = 0; i < length; i += 1) {
          buf[i] = array[i] & 255;
        }
        return buf;
      }
      function fromArrayView(arrayView) {
        if (isInstance(arrayView, Uint8Array)) {
          const copy = new Uint8Array(arrayView);
          return fromArrayBuffer(copy.buffer, copy.byteOffset, copy.byteLength);
        }
        return fromArrayLike(arrayView);
      }
      function fromArrayBuffer(array, byteOffset, length) {
        if (byteOffset < 0 || array.byteLength < byteOffset) {
          throw new RangeError('"offset" is outside of buffer bounds');
        }
        if (array.byteLength < byteOffset + (length || 0)) {
          throw new RangeError('"length" is outside of buffer bounds');
        }
        let buf;
        if (byteOffset === void 0 && length === void 0) {
          buf = new Uint8Array(array);
        } else if (length === void 0) {
          buf = new Uint8Array(array, byteOffset);
        } else {
          buf = new Uint8Array(array, byteOffset, length);
        }
        Object.setPrototypeOf(buf, Buffer22.prototype);
        return buf;
      }
      function fromObject(obj) {
        if (Buffer22.isBuffer(obj)) {
          const len = checked(obj.length) | 0;
          const buf = createBuffer(len);
          if (buf.length === 0) {
            return buf;
          }
          obj.copy(buf, 0, 0, len);
          return buf;
        }
        if (obj.length !== void 0) {
          if (typeof obj.length !== "number" || numberIsNaN(obj.length)) {
            return createBuffer(0);
          }
          return fromArrayLike(obj);
        }
        if (obj.type === "Buffer" && Array.isArray(obj.data)) {
          return fromArrayLike(obj.data);
        }
      }
      function checked(length) {
        if (length >= K_MAX_LENGTH) {
          throw new RangeError("Attempt to allocate Buffer larger than maximum size: 0x" + K_MAX_LENGTH.toString(16) + " bytes");
        }
        return length | 0;
      }
      function SlowBuffer(length) {
        if (+length != length) {
          length = 0;
        }
        return Buffer22.alloc(+length);
      }
      Buffer22.isBuffer = function isBuffer(b) {
        return b != null && b._isBuffer === true && b !== Buffer22.prototype;
      };
      Buffer22.compare = function compare2(a, b) {
        if (isInstance(a, Uint8Array))
          a = Buffer22.from(a, a.offset, a.byteLength);
        if (isInstance(b, Uint8Array))
          b = Buffer22.from(b, b.offset, b.byteLength);
        if (!Buffer22.isBuffer(a) || !Buffer22.isBuffer(b)) {
          throw new TypeError(
            'The "buf1", "buf2" arguments must be one of type Buffer or Uint8Array'
          );
        }
        if (a === b)
          return 0;
        let x = a.length;
        let y = b.length;
        for (let i = 0, len = Math.min(x, y); i < len; ++i) {
          if (a[i] !== b[i]) {
            x = a[i];
            y = b[i];
            break;
          }
        }
        if (x < y)
          return -1;
        if (y < x)
          return 1;
        return 0;
      };
      Buffer22.isEncoding = function isEncoding(encoding) {
        switch (String(encoding).toLowerCase()) {
          case "hex":
          case "utf8":
          case "utf-8":
          case "ascii":
          case "latin1":
          case "binary":
          case "base64":
          case "ucs2":
          case "ucs-2":
          case "utf16le":
          case "utf-16le":
            return true;
          default:
            return false;
        }
      };
      Buffer22.concat = function concat(list, length) {
        if (!Array.isArray(list)) {
          throw new TypeError('"list" argument must be an Array of Buffers');
        }
        if (list.length === 0) {
          return Buffer22.alloc(0);
        }
        let i;
        if (length === void 0) {
          length = 0;
          for (i = 0; i < list.length; ++i) {
            length += list[i].length;
          }
        }
        const buffer2 = Buffer22.allocUnsafe(length);
        let pos = 0;
        for (i = 0; i < list.length; ++i) {
          let buf = list[i];
          if (isInstance(buf, Uint8Array)) {
            if (pos + buf.length > buffer2.length) {
              if (!Buffer22.isBuffer(buf))
                buf = Buffer22.from(buf);
              buf.copy(buffer2, pos);
            } else {
              Uint8Array.prototype.set.call(
                buffer2,
                buf,
                pos
              );
            }
          } else if (!Buffer22.isBuffer(buf)) {
            throw new TypeError('"list" argument must be an Array of Buffers');
          } else {
            buf.copy(buffer2, pos);
          }
          pos += buf.length;
        }
        return buffer2;
      };
      function byteLength2(string, encoding) {
        if (Buffer22.isBuffer(string)) {
          return string.length;
        }
        if (ArrayBuffer.isView(string) || isInstance(string, ArrayBuffer)) {
          return string.byteLength;
        }
        if (typeof string !== "string") {
          throw new TypeError(
            'The "string" argument must be one of type string, Buffer, or ArrayBuffer. Received type ' + typeof string
          );
        }
        const len = string.length;
        const mustMatch = arguments.length > 2 && arguments[2] === true;
        if (!mustMatch && len === 0)
          return 0;
        let loweredCase = false;
        for (; ; ) {
          switch (encoding) {
            case "ascii":
            case "latin1":
            case "binary":
              return len;
            case "utf8":
            case "utf-8":
              return utf8ToBytes(string).length;
            case "ucs2":
            case "ucs-2":
            case "utf16le":
            case "utf-16le":
              return len * 2;
            case "hex":
              return len >>> 1;
            case "base64":
              return base64ToBytes(string).length;
            default:
              if (loweredCase) {
                return mustMatch ? -1 : utf8ToBytes(string).length;
              }
              encoding = ("" + encoding).toLowerCase();
              loweredCase = true;
          }
        }
      }
      Buffer22.byteLength = byteLength2;
      function slowToString(encoding, start, end) {
        let loweredCase = false;
        if (start === void 0 || start < 0) {
          start = 0;
        }
        if (start > this.length) {
          return "";
        }
        if (end === void 0 || end > this.length) {
          end = this.length;
        }
        if (end <= 0) {
          return "";
        }
        end >>>= 0;
        start >>>= 0;
        if (end <= start) {
          return "";
        }
        if (!encoding)
          encoding = "utf8";
        while (true) {
          switch (encoding) {
            case "hex":
              return hexSlice(this, start, end);
            case "utf8":
            case "utf-8":
              return utf8Slice(this, start, end);
            case "ascii":
              return asciiSlice(this, start, end);
            case "latin1":
            case "binary":
              return latin1Slice(this, start, end);
            case "base64":
              return base64Slice(this, start, end);
            case "ucs2":
            case "ucs-2":
            case "utf16le":
            case "utf-16le":
              return utf16leSlice(this, start, end);
            default:
              if (loweredCase)
                throw new TypeError("Unknown encoding: " + encoding);
              encoding = (encoding + "").toLowerCase();
              loweredCase = true;
          }
        }
      }
      Buffer22.prototype._isBuffer = true;
      function swap(b, n, m) {
        const i = b[n];
        b[n] = b[m];
        b[m] = i;
      }
      Buffer22.prototype.swap16 = function swap16() {
        const len = this.length;
        if (len % 2 !== 0) {
          throw new RangeError("Buffer size must be a multiple of 16-bits");
        }
        for (let i = 0; i < len; i += 2) {
          swap(this, i, i + 1);
        }
        return this;
      };
      Buffer22.prototype.swap32 = function swap32() {
        const len = this.length;
        if (len % 4 !== 0) {
          throw new RangeError("Buffer size must be a multiple of 32-bits");
        }
        for (let i = 0; i < len; i += 4) {
          swap(this, i, i + 3);
          swap(this, i + 1, i + 2);
        }
        return this;
      };
      Buffer22.prototype.swap64 = function swap64() {
        const len = this.length;
        if (len % 8 !== 0) {
          throw new RangeError("Buffer size must be a multiple of 64-bits");
        }
        for (let i = 0; i < len; i += 8) {
          swap(this, i, i + 7);
          swap(this, i + 1, i + 6);
          swap(this, i + 2, i + 5);
          swap(this, i + 3, i + 4);
        }
        return this;
      };
      Buffer22.prototype.toString = function toString() {
        const length = this.length;
        if (length === 0)
          return "";
        if (arguments.length === 0)
          return utf8Slice(this, 0, length);
        return slowToString.apply(this, arguments);
      };
      Buffer22.prototype.toLocaleString = Buffer22.prototype.toString;
      Buffer22.prototype.equals = function equals(b) {
        if (!Buffer22.isBuffer(b))
          throw new TypeError("Argument must be a Buffer");
        if (this === b)
          return true;
        return Buffer22.compare(this, b) === 0;
      };
      Buffer22.prototype.inspect = function inspect2() {
        let str = "";
        const max = exports.INSPECT_MAX_BYTES;
        str = this.toString("hex", 0, max).replace(/(.{2})/g, "$1 ").trim();
        if (this.length > max)
          str += " ... ";
        return "<Buffer " + str + ">";
      };
      if (customInspectSymbol) {
        Buffer22.prototype[customInspectSymbol] = Buffer22.prototype.inspect;
      }
      Buffer22.prototype.compare = function compare2(target, start, end, thisStart, thisEnd) {
        if (isInstance(target, Uint8Array)) {
          target = Buffer22.from(target, target.offset, target.byteLength);
        }
        if (!Buffer22.isBuffer(target)) {
          throw new TypeError(
            'The "target" argument must be one of type Buffer or Uint8Array. Received type ' + typeof target
          );
        }
        if (start === void 0) {
          start = 0;
        }
        if (end === void 0) {
          end = target ? target.length : 0;
        }
        if (thisStart === void 0) {
          thisStart = 0;
        }
        if (thisEnd === void 0) {
          thisEnd = this.length;
        }
        if (start < 0 || end > target.length || thisStart < 0 || thisEnd > this.length) {
          throw new RangeError("out of range index");
        }
        if (thisStart >= thisEnd && start >= end) {
          return 0;
        }
        if (thisStart >= thisEnd) {
          return -1;
        }
        if (start >= end) {
          return 1;
        }
        start >>>= 0;
        end >>>= 0;
        thisStart >>>= 0;
        thisEnd >>>= 0;
        if (this === target)
          return 0;
        let x = thisEnd - thisStart;
        let y = end - start;
        const len = Math.min(x, y);
        const thisCopy = this.slice(thisStart, thisEnd);
        const targetCopy = target.slice(start, end);
        for (let i = 0; i < len; ++i) {
          if (thisCopy[i] !== targetCopy[i]) {
            x = thisCopy[i];
            y = targetCopy[i];
            break;
          }
        }
        if (x < y)
          return -1;
        if (y < x)
          return 1;
        return 0;
      };
      function bidirectionalIndexOf(buffer2, val, byteOffset, encoding, dir) {
        if (buffer2.length === 0)
          return -1;
        if (typeof byteOffset === "string") {
          encoding = byteOffset;
          byteOffset = 0;
        } else if (byteOffset > 2147483647) {
          byteOffset = 2147483647;
        } else if (byteOffset < -2147483648) {
          byteOffset = -2147483648;
        }
        byteOffset = +byteOffset;
        if (numberIsNaN(byteOffset)) {
          byteOffset = dir ? 0 : buffer2.length - 1;
        }
        if (byteOffset < 0)
          byteOffset = buffer2.length + byteOffset;
        if (byteOffset >= buffer2.length) {
          if (dir)
            return -1;
          else
            byteOffset = buffer2.length - 1;
        } else if (byteOffset < 0) {
          if (dir)
            byteOffset = 0;
          else
            return -1;
        }
        if (typeof val === "string") {
          val = Buffer22.from(val, encoding);
        }
        if (Buffer22.isBuffer(val)) {
          if (val.length === 0) {
            return -1;
          }
          return arrayIndexOf(buffer2, val, byteOffset, encoding, dir);
        } else if (typeof val === "number") {
          val = val & 255;
          if (typeof Uint8Array.prototype.indexOf === "function") {
            if (dir) {
              return Uint8Array.prototype.indexOf.call(buffer2, val, byteOffset);
            } else {
              return Uint8Array.prototype.lastIndexOf.call(buffer2, val, byteOffset);
            }
          }
          return arrayIndexOf(buffer2, [val], byteOffset, encoding, dir);
        }
        throw new TypeError("val must be string, number or Buffer");
      }
      function arrayIndexOf(arr, val, byteOffset, encoding, dir) {
        let indexSize = 1;
        let arrLength = arr.length;
        let valLength = val.length;
        if (encoding !== void 0) {
          encoding = String(encoding).toLowerCase();
          if (encoding === "ucs2" || encoding === "ucs-2" || encoding === "utf16le" || encoding === "utf-16le") {
            if (arr.length < 2 || val.length < 2) {
              return -1;
            }
            indexSize = 2;
            arrLength /= 2;
            valLength /= 2;
            byteOffset /= 2;
          }
        }
        function read(buf, i2) {
          if (indexSize === 1) {
            return buf[i2];
          } else {
            return buf.readUInt16BE(i2 * indexSize);
          }
        }
        let i;
        if (dir) {
          let foundIndex = -1;
          for (i = byteOffset; i < arrLength; i++) {
            if (read(arr, i) === read(val, foundIndex === -1 ? 0 : i - foundIndex)) {
              if (foundIndex === -1)
                foundIndex = i;
              if (i - foundIndex + 1 === valLength)
                return foundIndex * indexSize;
            } else {
              if (foundIndex !== -1)
                i -= i - foundIndex;
              foundIndex = -1;
            }
          }
        } else {
          if (byteOffset + valLength > arrLength)
            byteOffset = arrLength - valLength;
          for (i = byteOffset; i >= 0; i--) {
            let found = true;
            for (let j = 0; j < valLength; j++) {
              if (read(arr, i + j) !== read(val, j)) {
                found = false;
                break;
              }
            }
            if (found)
              return i;
          }
        }
        return -1;
      }
      Buffer22.prototype.includes = function includes(val, byteOffset, encoding) {
        return this.indexOf(val, byteOffset, encoding) !== -1;
      };
      Buffer22.prototype.indexOf = function indexOf(val, byteOffset, encoding) {
        return bidirectionalIndexOf(this, val, byteOffset, encoding, true);
      };
      Buffer22.prototype.lastIndexOf = function lastIndexOf(val, byteOffset, encoding) {
        return bidirectionalIndexOf(this, val, byteOffset, encoding, false);
      };
      function hexWrite(buf, string, offset, length) {
        offset = Number(offset) || 0;
        const remaining = buf.length - offset;
        if (!length) {
          length = remaining;
        } else {
          length = Number(length);
          if (length > remaining) {
            length = remaining;
          }
        }
        const strLen = string.length;
        if (length > strLen / 2) {
          length = strLen / 2;
        }
        let i;
        for (i = 0; i < length; ++i) {
          const parsed = parseInt(string.substr(i * 2, 2), 16);
          if (numberIsNaN(parsed))
            return i;
          buf[offset + i] = parsed;
        }
        return i;
      }
      function utf8Write(buf, string, offset, length) {
        return blitBuffer(utf8ToBytes(string, buf.length - offset), buf, offset, length);
      }
      function asciiWrite(buf, string, offset, length) {
        return blitBuffer(asciiToBytes(string), buf, offset, length);
      }
      function base64Write(buf, string, offset, length) {
        return blitBuffer(base64ToBytes(string), buf, offset, length);
      }
      function ucs2Write(buf, string, offset, length) {
        return blitBuffer(utf16leToBytes(string, buf.length - offset), buf, offset, length);
      }
      Buffer22.prototype.write = function write(string, offset, length, encoding) {
        if (offset === void 0) {
          encoding = "utf8";
          length = this.length;
          offset = 0;
        } else if (length === void 0 && typeof offset === "string") {
          encoding = offset;
          length = this.length;
          offset = 0;
        } else if (isFinite(offset)) {
          offset = offset >>> 0;
          if (isFinite(length)) {
            length = length >>> 0;
            if (encoding === void 0)
              encoding = "utf8";
          } else {
            encoding = length;
            length = void 0;
          }
        } else {
          throw new Error(
            "Buffer.write(string, encoding, offset[, length]) is no longer supported"
          );
        }
        const remaining = this.length - offset;
        if (length === void 0 || length > remaining)
          length = remaining;
        if (string.length > 0 && (length < 0 || offset < 0) || offset > this.length) {
          throw new RangeError("Attempt to write outside buffer bounds");
        }
        if (!encoding)
          encoding = "utf8";
        let loweredCase = false;
        for (; ; ) {
          switch (encoding) {
            case "hex":
              return hexWrite(this, string, offset, length);
            case "utf8":
            case "utf-8":
              return utf8Write(this, string, offset, length);
            case "ascii":
            case "latin1":
            case "binary":
              return asciiWrite(this, string, offset, length);
            case "base64":
              return base64Write(this, string, offset, length);
            case "ucs2":
            case "ucs-2":
            case "utf16le":
            case "utf-16le":
              return ucs2Write(this, string, offset, length);
            default:
              if (loweredCase)
                throw new TypeError("Unknown encoding: " + encoding);
              encoding = ("" + encoding).toLowerCase();
              loweredCase = true;
          }
        }
      };
      Buffer22.prototype.toJSON = function toJSON() {
        return {
          type: "Buffer",
          data: Array.prototype.slice.call(this._arr || this, 0)
        };
      };
      function base64Slice(buf, start, end) {
        if (start === 0 && end === buf.length) {
          return base64.fromByteArray(buf);
        } else {
          return base64.fromByteArray(buf.slice(start, end));
        }
      }
      function utf8Slice(buf, start, end) {
        end = Math.min(buf.length, end);
        const res = [];
        let i = start;
        while (i < end) {
          const firstByte = buf[i];
          let codePoint = null;
          let bytesPerSequence = firstByte > 239 ? 4 : firstByte > 223 ? 3 : firstByte > 191 ? 2 : 1;
          if (i + bytesPerSequence <= end) {
            let secondByte, thirdByte, fourthByte, tempCodePoint;
            switch (bytesPerSequence) {
              case 1:
                if (firstByte < 128) {
                  codePoint = firstByte;
                }
                break;
              case 2:
                secondByte = buf[i + 1];
                if ((secondByte & 192) === 128) {
                  tempCodePoint = (firstByte & 31) << 6 | secondByte & 63;
                  if (tempCodePoint > 127) {
                    codePoint = tempCodePoint;
                  }
                }
                break;
              case 3:
                secondByte = buf[i + 1];
                thirdByte = buf[i + 2];
                if ((secondByte & 192) === 128 && (thirdByte & 192) === 128) {
                  tempCodePoint = (firstByte & 15) << 12 | (secondByte & 63) << 6 | thirdByte & 63;
                  if (tempCodePoint > 2047 && (tempCodePoint < 55296 || tempCodePoint > 57343)) {
                    codePoint = tempCodePoint;
                  }
                }
                break;
              case 4:
                secondByte = buf[i + 1];
                thirdByte = buf[i + 2];
                fourthByte = buf[i + 3];
                if ((secondByte & 192) === 128 && (thirdByte & 192) === 128 && (fourthByte & 192) === 128) {
                  tempCodePoint = (firstByte & 15) << 18 | (secondByte & 63) << 12 | (thirdByte & 63) << 6 | fourthByte & 63;
                  if (tempCodePoint > 65535 && tempCodePoint < 1114112) {
                    codePoint = tempCodePoint;
                  }
                }
            }
          }
          if (codePoint === null) {
            codePoint = 65533;
            bytesPerSequence = 1;
          } else if (codePoint > 65535) {
            codePoint -= 65536;
            res.push(codePoint >>> 10 & 1023 | 55296);
            codePoint = 56320 | codePoint & 1023;
          }
          res.push(codePoint);
          i += bytesPerSequence;
        }
        return decodeCodePointsArray(res);
      }
      const MAX_ARGUMENTS_LENGTH = 4096;
      function decodeCodePointsArray(codePoints) {
        const len = codePoints.length;
        if (len <= MAX_ARGUMENTS_LENGTH) {
          return String.fromCharCode.apply(String, codePoints);
        }
        let res = "";
        let i = 0;
        while (i < len) {
          res += String.fromCharCode.apply(
            String,
            codePoints.slice(i, i += MAX_ARGUMENTS_LENGTH)
          );
        }
        return res;
      }
      function asciiSlice(buf, start, end) {
        let ret = "";
        end = Math.min(buf.length, end);
        for (let i = start; i < end; ++i) {
          ret += String.fromCharCode(buf[i] & 127);
        }
        return ret;
      }
      function latin1Slice(buf, start, end) {
        let ret = "";
        end = Math.min(buf.length, end);
        for (let i = start; i < end; ++i) {
          ret += String.fromCharCode(buf[i]);
        }
        return ret;
      }
      function hexSlice(buf, start, end) {
        const len = buf.length;
        if (!start || start < 0)
          start = 0;
        if (!end || end < 0 || end > len)
          end = len;
        let out = "";
        for (let i = start; i < end; ++i) {
          out += hexSliceLookupTable[buf[i]];
        }
        return out;
      }
      function utf16leSlice(buf, start, end) {
        const bytes = buf.slice(start, end);
        let res = "";
        for (let i = 0; i < bytes.length - 1; i += 2) {
          res += String.fromCharCode(bytes[i] + bytes[i + 1] * 256);
        }
        return res;
      }
      Buffer22.prototype.slice = function slice(start, end) {
        const len = this.length;
        start = ~~start;
        end = end === void 0 ? len : ~~end;
        if (start < 0) {
          start += len;
          if (start < 0)
            start = 0;
        } else if (start > len) {
          start = len;
        }
        if (end < 0) {
          end += len;
          if (end < 0)
            end = 0;
        } else if (end > len) {
          end = len;
        }
        if (end < start)
          end = start;
        const newBuf = this.subarray(start, end);
        Object.setPrototypeOf(newBuf, Buffer22.prototype);
        return newBuf;
      };
      function checkOffset(offset, ext, length) {
        if (offset % 1 !== 0 || offset < 0)
          throw new RangeError("offset is not uint");
        if (offset + ext > length)
          throw new RangeError("Trying to access beyond buffer length");
      }
      Buffer22.prototype.readUintLE = Buffer22.prototype.readUIntLE = function readUIntLE(offset, byteLength3, noAssert) {
        offset = offset >>> 0;
        byteLength3 = byteLength3 >>> 0;
        if (!noAssert)
          checkOffset(offset, byteLength3, this.length);
        let val = this[offset];
        let mul = 1;
        let i = 0;
        while (++i < byteLength3 && (mul *= 256)) {
          val += this[offset + i] * mul;
        }
        return val;
      };
      Buffer22.prototype.readUintBE = Buffer22.prototype.readUIntBE = function readUIntBE(offset, byteLength3, noAssert) {
        offset = offset >>> 0;
        byteLength3 = byteLength3 >>> 0;
        if (!noAssert) {
          checkOffset(offset, byteLength3, this.length);
        }
        let val = this[offset + --byteLength3];
        let mul = 1;
        while (byteLength3 > 0 && (mul *= 256)) {
          val += this[offset + --byteLength3] * mul;
        }
        return val;
      };
      Buffer22.prototype.readUint8 = Buffer22.prototype.readUInt8 = function readUInt8(offset, noAssert) {
        offset = offset >>> 0;
        if (!noAssert)
          checkOffset(offset, 1, this.length);
        return this[offset];
      };
      Buffer22.prototype.readUint16LE = Buffer22.prototype.readUInt16LE = function readUInt16LE(offset, noAssert) {
        offset = offset >>> 0;
        if (!noAssert)
          checkOffset(offset, 2, this.length);
        return this[offset] | this[offset + 1] << 8;
      };
      Buffer22.prototype.readUint16BE = Buffer22.prototype.readUInt16BE = function readUInt16BE(offset, noAssert) {
        offset = offset >>> 0;
        if (!noAssert)
          checkOffset(offset, 2, this.length);
        return this[offset] << 8 | this[offset + 1];
      };
      Buffer22.prototype.readUint32LE = Buffer22.prototype.readUInt32LE = function readUInt32LE(offset, noAssert) {
        offset = offset >>> 0;
        if (!noAssert)
          checkOffset(offset, 4, this.length);
        return (this[offset] | this[offset + 1] << 8 | this[offset + 2] << 16) + this[offset + 3] * 16777216;
      };
      Buffer22.prototype.readUint32BE = Buffer22.prototype.readUInt32BE = function readUInt32BE(offset, noAssert) {
        offset = offset >>> 0;
        if (!noAssert)
          checkOffset(offset, 4, this.length);
        return this[offset] * 16777216 + (this[offset + 1] << 16 | this[offset + 2] << 8 | this[offset + 3]);
      };
      Buffer22.prototype.readBigUInt64LE = defineBigIntMethod(function readBigUInt64LE(offset) {
        offset = offset >>> 0;
        validateNumber(offset, "offset");
        const first = this[offset];
        const last = this[offset + 7];
        if (first === void 0 || last === void 0) {
          boundsError(offset, this.length - 8);
        }
        const lo = first + this[++offset] * 2 ** 8 + this[++offset] * 2 ** 16 + this[++offset] * 2 ** 24;
        const hi = this[++offset] + this[++offset] * 2 ** 8 + this[++offset] * 2 ** 16 + last * 2 ** 24;
        return BigInt(lo) + (BigInt(hi) << BigInt(32));
      });
      Buffer22.prototype.readBigUInt64BE = defineBigIntMethod(function readBigUInt64BE(offset) {
        offset = offset >>> 0;
        validateNumber(offset, "offset");
        const first = this[offset];
        const last = this[offset + 7];
        if (first === void 0 || last === void 0) {
          boundsError(offset, this.length - 8);
        }
        const hi = first * 2 ** 24 + this[++offset] * 2 ** 16 + this[++offset] * 2 ** 8 + this[++offset];
        const lo = this[++offset] * 2 ** 24 + this[++offset] * 2 ** 16 + this[++offset] * 2 ** 8 + last;
        return (BigInt(hi) << BigInt(32)) + BigInt(lo);
      });
      Buffer22.prototype.readIntLE = function readIntLE(offset, byteLength3, noAssert) {
        offset = offset >>> 0;
        byteLength3 = byteLength3 >>> 0;
        if (!noAssert)
          checkOffset(offset, byteLength3, this.length);
        let val = this[offset];
        let mul = 1;
        let i = 0;
        while (++i < byteLength3 && (mul *= 256)) {
          val += this[offset + i] * mul;
        }
        mul *= 128;
        if (val >= mul)
          val -= Math.pow(2, 8 * byteLength3);
        return val;
      };
      Buffer22.prototype.readIntBE = function readIntBE(offset, byteLength3, noAssert) {
        offset = offset >>> 0;
        byteLength3 = byteLength3 >>> 0;
        if (!noAssert)
          checkOffset(offset, byteLength3, this.length);
        let i = byteLength3;
        let mul = 1;
        let val = this[offset + --i];
        while (i > 0 && (mul *= 256)) {
          val += this[offset + --i] * mul;
        }
        mul *= 128;
        if (val >= mul)
          val -= Math.pow(2, 8 * byteLength3);
        return val;
      };
      Buffer22.prototype.readInt8 = function readInt8(offset, noAssert) {
        offset = offset >>> 0;
        if (!noAssert)
          checkOffset(offset, 1, this.length);
        if (!(this[offset] & 128))
          return this[offset];
        return (255 - this[offset] + 1) * -1;
      };
      Buffer22.prototype.readInt16LE = function readInt16LE(offset, noAssert) {
        offset = offset >>> 0;
        if (!noAssert)
          checkOffset(offset, 2, this.length);
        const val = this[offset] | this[offset + 1] << 8;
        return val & 32768 ? val | 4294901760 : val;
      };
      Buffer22.prototype.readInt16BE = function readInt16BE(offset, noAssert) {
        offset = offset >>> 0;
        if (!noAssert)
          checkOffset(offset, 2, this.length);
        const val = this[offset + 1] | this[offset] << 8;
        return val & 32768 ? val | 4294901760 : val;
      };
      Buffer22.prototype.readInt32LE = function readInt32LE(offset, noAssert) {
        offset = offset >>> 0;
        if (!noAssert)
          checkOffset(offset, 4, this.length);
        return this[offset] | this[offset + 1] << 8 | this[offset + 2] << 16 | this[offset + 3] << 24;
      };
      Buffer22.prototype.readInt32BE = function readInt32BE(offset, noAssert) {
        offset = offset >>> 0;
        if (!noAssert)
          checkOffset(offset, 4, this.length);
        return this[offset] << 24 | this[offset + 1] << 16 | this[offset + 2] << 8 | this[offset + 3];
      };
      Buffer22.prototype.readBigInt64LE = defineBigIntMethod(function readBigInt64LE(offset) {
        offset = offset >>> 0;
        validateNumber(offset, "offset");
        const first = this[offset];
        const last = this[offset + 7];
        if (first === void 0 || last === void 0) {
          boundsError(offset, this.length - 8);
        }
        const val = this[offset + 4] + this[offset + 5] * 2 ** 8 + this[offset + 6] * 2 ** 16 + (last << 24);
        return (BigInt(val) << BigInt(32)) + BigInt(first + this[++offset] * 2 ** 8 + this[++offset] * 2 ** 16 + this[++offset] * 2 ** 24);
      });
      Buffer22.prototype.readBigInt64BE = defineBigIntMethod(function readBigInt64BE(offset) {
        offset = offset >>> 0;
        validateNumber(offset, "offset");
        const first = this[offset];
        const last = this[offset + 7];
        if (first === void 0 || last === void 0) {
          boundsError(offset, this.length - 8);
        }
        const val = (first << 24) + // Overflow
        this[++offset] * 2 ** 16 + this[++offset] * 2 ** 8 + this[++offset];
        return (BigInt(val) << BigInt(32)) + BigInt(this[++offset] * 2 ** 24 + this[++offset] * 2 ** 16 + this[++offset] * 2 ** 8 + last);
      });
      Buffer22.prototype.readFloatLE = function readFloatLE(offset, noAssert) {
        offset = offset >>> 0;
        if (!noAssert)
          checkOffset(offset, 4, this.length);
        return ieee754$1.read(this, offset, true, 23, 4);
      };
      Buffer22.prototype.readFloatBE = function readFloatBE(offset, noAssert) {
        offset = offset >>> 0;
        if (!noAssert)
          checkOffset(offset, 4, this.length);
        return ieee754$1.read(this, offset, false, 23, 4);
      };
      Buffer22.prototype.readDoubleLE = function readDoubleLE(offset, noAssert) {
        offset = offset >>> 0;
        if (!noAssert)
          checkOffset(offset, 8, this.length);
        return ieee754$1.read(this, offset, true, 52, 8);
      };
      Buffer22.prototype.readDoubleBE = function readDoubleBE(offset, noAssert) {
        offset = offset >>> 0;
        if (!noAssert)
          checkOffset(offset, 8, this.length);
        return ieee754$1.read(this, offset, false, 52, 8);
      };
      function checkInt(buf, value, offset, ext, max, min) {
        if (!Buffer22.isBuffer(buf))
          throw new TypeError('"buffer" argument must be a Buffer instance');
        if (value > max || value < min)
          throw new RangeError('"value" argument is out of bounds');
        if (offset + ext > buf.length)
          throw new RangeError("Index out of range");
      }
      Buffer22.prototype.writeUintLE = Buffer22.prototype.writeUIntLE = function writeUIntLE(value, offset, byteLength3, noAssert) {
        value = +value;
        offset = offset >>> 0;
        byteLength3 = byteLength3 >>> 0;
        if (!noAssert) {
          const maxBytes = Math.pow(2, 8 * byteLength3) - 1;
          checkInt(this, value, offset, byteLength3, maxBytes, 0);
        }
        let mul = 1;
        let i = 0;
        this[offset] = value & 255;
        while (++i < byteLength3 && (mul *= 256)) {
          this[offset + i] = value / mul & 255;
        }
        return offset + byteLength3;
      };
      Buffer22.prototype.writeUintBE = Buffer22.prototype.writeUIntBE = function writeUIntBE(value, offset, byteLength3, noAssert) {
        value = +value;
        offset = offset >>> 0;
        byteLength3 = byteLength3 >>> 0;
        if (!noAssert) {
          const maxBytes = Math.pow(2, 8 * byteLength3) - 1;
          checkInt(this, value, offset, byteLength3, maxBytes, 0);
        }
        let i = byteLength3 - 1;
        let mul = 1;
        this[offset + i] = value & 255;
        while (--i >= 0 && (mul *= 256)) {
          this[offset + i] = value / mul & 255;
        }
        return offset + byteLength3;
      };
      Buffer22.prototype.writeUint8 = Buffer22.prototype.writeUInt8 = function writeUInt8(value, offset, noAssert) {
        value = +value;
        offset = offset >>> 0;
        if (!noAssert)
          checkInt(this, value, offset, 1, 255, 0);
        this[offset] = value & 255;
        return offset + 1;
      };
      Buffer22.prototype.writeUint16LE = Buffer22.prototype.writeUInt16LE = function writeUInt16LE(value, offset, noAssert) {
        value = +value;
        offset = offset >>> 0;
        if (!noAssert)
          checkInt(this, value, offset, 2, 65535, 0);
        this[offset] = value & 255;
        this[offset + 1] = value >>> 8;
        return offset + 2;
      };
      Buffer22.prototype.writeUint16BE = Buffer22.prototype.writeUInt16BE = function writeUInt16BE(value, offset, noAssert) {
        value = +value;
        offset = offset >>> 0;
        if (!noAssert)
          checkInt(this, value, offset, 2, 65535, 0);
        this[offset] = value >>> 8;
        this[offset + 1] = value & 255;
        return offset + 2;
      };
      Buffer22.prototype.writeUint32LE = Buffer22.prototype.writeUInt32LE = function writeUInt32LE(value, offset, noAssert) {
        value = +value;
        offset = offset >>> 0;
        if (!noAssert)
          checkInt(this, value, offset, 4, 4294967295, 0);
        this[offset + 3] = value >>> 24;
        this[offset + 2] = value >>> 16;
        this[offset + 1] = value >>> 8;
        this[offset] = value & 255;
        return offset + 4;
      };
      Buffer22.prototype.writeUint32BE = Buffer22.prototype.writeUInt32BE = function writeUInt32BE(value, offset, noAssert) {
        value = +value;
        offset = offset >>> 0;
        if (!noAssert)
          checkInt(this, value, offset, 4, 4294967295, 0);
        this[offset] = value >>> 24;
        this[offset + 1] = value >>> 16;
        this[offset + 2] = value >>> 8;
        this[offset + 3] = value & 255;
        return offset + 4;
      };
      function wrtBigUInt64LE(buf, value, offset, min, max) {
        checkIntBI(value, min, max, buf, offset, 7);
        let lo = Number(value & BigInt(4294967295));
        buf[offset++] = lo;
        lo = lo >> 8;
        buf[offset++] = lo;
        lo = lo >> 8;
        buf[offset++] = lo;
        lo = lo >> 8;
        buf[offset++] = lo;
        let hi = Number(value >> BigInt(32) & BigInt(4294967295));
        buf[offset++] = hi;
        hi = hi >> 8;
        buf[offset++] = hi;
        hi = hi >> 8;
        buf[offset++] = hi;
        hi = hi >> 8;
        buf[offset++] = hi;
        return offset;
      }
      function wrtBigUInt64BE(buf, value, offset, min, max) {
        checkIntBI(value, min, max, buf, offset, 7);
        let lo = Number(value & BigInt(4294967295));
        buf[offset + 7] = lo;
        lo = lo >> 8;
        buf[offset + 6] = lo;
        lo = lo >> 8;
        buf[offset + 5] = lo;
        lo = lo >> 8;
        buf[offset + 4] = lo;
        let hi = Number(value >> BigInt(32) & BigInt(4294967295));
        buf[offset + 3] = hi;
        hi = hi >> 8;
        buf[offset + 2] = hi;
        hi = hi >> 8;
        buf[offset + 1] = hi;
        hi = hi >> 8;
        buf[offset] = hi;
        return offset + 8;
      }
      Buffer22.prototype.writeBigUInt64LE = defineBigIntMethod(function writeBigUInt64LE(value, offset = 0) {
        return wrtBigUInt64LE(this, value, offset, BigInt(0), BigInt("0xffffffffffffffff"));
      });
      Buffer22.prototype.writeBigUInt64BE = defineBigIntMethod(function writeBigUInt64BE(value, offset = 0) {
        return wrtBigUInt64BE(this, value, offset, BigInt(0), BigInt("0xffffffffffffffff"));
      });
      Buffer22.prototype.writeIntLE = function writeIntLE(value, offset, byteLength3, noAssert) {
        value = +value;
        offset = offset >>> 0;
        if (!noAssert) {
          const limit = Math.pow(2, 8 * byteLength3 - 1);
          checkInt(this, value, offset, byteLength3, limit - 1, -limit);
        }
        let i = 0;
        let mul = 1;
        let sub = 0;
        this[offset] = value & 255;
        while (++i < byteLength3 && (mul *= 256)) {
          if (value < 0 && sub === 0 && this[offset + i - 1] !== 0) {
            sub = 1;
          }
          this[offset + i] = (value / mul >> 0) - sub & 255;
        }
        return offset + byteLength3;
      };
      Buffer22.prototype.writeIntBE = function writeIntBE(value, offset, byteLength3, noAssert) {
        value = +value;
        offset = offset >>> 0;
        if (!noAssert) {
          const limit = Math.pow(2, 8 * byteLength3 - 1);
          checkInt(this, value, offset, byteLength3, limit - 1, -limit);
        }
        let i = byteLength3 - 1;
        let mul = 1;
        let sub = 0;
        this[offset + i] = value & 255;
        while (--i >= 0 && (mul *= 256)) {
          if (value < 0 && sub === 0 && this[offset + i + 1] !== 0) {
            sub = 1;
          }
          this[offset + i] = (value / mul >> 0) - sub & 255;
        }
        return offset + byteLength3;
      };
      Buffer22.prototype.writeInt8 = function writeInt8(value, offset, noAssert) {
        value = +value;
        offset = offset >>> 0;
        if (!noAssert)
          checkInt(this, value, offset, 1, 127, -128);
        if (value < 0)
          value = 255 + value + 1;
        this[offset] = value & 255;
        return offset + 1;
      };
      Buffer22.prototype.writeInt16LE = function writeInt16LE(value, offset, noAssert) {
        value = +value;
        offset = offset >>> 0;
        if (!noAssert)
          checkInt(this, value, offset, 2, 32767, -32768);
        this[offset] = value & 255;
        this[offset + 1] = value >>> 8;
        return offset + 2;
      };
      Buffer22.prototype.writeInt16BE = function writeInt16BE(value, offset, noAssert) {
        value = +value;
        offset = offset >>> 0;
        if (!noAssert)
          checkInt(this, value, offset, 2, 32767, -32768);
        this[offset] = value >>> 8;
        this[offset + 1] = value & 255;
        return offset + 2;
      };
      Buffer22.prototype.writeInt32LE = function writeInt32LE(value, offset, noAssert) {
        value = +value;
        offset = offset >>> 0;
        if (!noAssert)
          checkInt(this, value, offset, 4, 2147483647, -2147483648);
        this[offset] = value & 255;
        this[offset + 1] = value >>> 8;
        this[offset + 2] = value >>> 16;
        this[offset + 3] = value >>> 24;
        return offset + 4;
      };
      Buffer22.prototype.writeInt32BE = function writeInt32BE(value, offset, noAssert) {
        value = +value;
        offset = offset >>> 0;
        if (!noAssert)
          checkInt(this, value, offset, 4, 2147483647, -2147483648);
        if (value < 0)
          value = 4294967295 + value + 1;
        this[offset] = value >>> 24;
        this[offset + 1] = value >>> 16;
        this[offset + 2] = value >>> 8;
        this[offset + 3] = value & 255;
        return offset + 4;
      };
      Buffer22.prototype.writeBigInt64LE = defineBigIntMethod(function writeBigInt64LE(value, offset = 0) {
        return wrtBigUInt64LE(this, value, offset, -BigInt("0x8000000000000000"), BigInt("0x7fffffffffffffff"));
      });
      Buffer22.prototype.writeBigInt64BE = defineBigIntMethod(function writeBigInt64BE(value, offset = 0) {
        return wrtBigUInt64BE(this, value, offset, -BigInt("0x8000000000000000"), BigInt("0x7fffffffffffffff"));
      });
      function checkIEEE754(buf, value, offset, ext, max, min) {
        if (offset + ext > buf.length)
          throw new RangeError("Index out of range");
        if (offset < 0)
          throw new RangeError("Index out of range");
      }
      function writeFloat(buf, value, offset, littleEndian, noAssert) {
        value = +value;
        offset = offset >>> 0;
        if (!noAssert) {
          checkIEEE754(buf, value, offset, 4);
        }
        ieee754$1.write(buf, value, offset, littleEndian, 23, 4);
        return offset + 4;
      }
      Buffer22.prototype.writeFloatLE = function writeFloatLE(value, offset, noAssert) {
        return writeFloat(this, value, offset, true, noAssert);
      };
      Buffer22.prototype.writeFloatBE = function writeFloatBE(value, offset, noAssert) {
        return writeFloat(this, value, offset, false, noAssert);
      };
      function writeDouble(buf, value, offset, littleEndian, noAssert) {
        value = +value;
        offset = offset >>> 0;
        if (!noAssert) {
          checkIEEE754(buf, value, offset, 8);
        }
        ieee754$1.write(buf, value, offset, littleEndian, 52, 8);
        return offset + 8;
      }
      Buffer22.prototype.writeDoubleLE = function writeDoubleLE(value, offset, noAssert) {
        return writeDouble(this, value, offset, true, noAssert);
      };
      Buffer22.prototype.writeDoubleBE = function writeDoubleBE(value, offset, noAssert) {
        return writeDouble(this, value, offset, false, noAssert);
      };
      Buffer22.prototype.copy = function copy(target, targetStart, start, end) {
        if (!Buffer22.isBuffer(target))
          throw new TypeError("argument should be a Buffer");
        if (!start)
          start = 0;
        if (!end && end !== 0)
          end = this.length;
        if (targetStart >= target.length)
          targetStart = target.length;
        if (!targetStart)
          targetStart = 0;
        if (end > 0 && end < start)
          end = start;
        if (end === start)
          return 0;
        if (target.length === 0 || this.length === 0)
          return 0;
        if (targetStart < 0) {
          throw new RangeError("targetStart out of bounds");
        }
        if (start < 0 || start >= this.length)
          throw new RangeError("Index out of range");
        if (end < 0)
          throw new RangeError("sourceEnd out of bounds");
        if (end > this.length)
          end = this.length;
        if (target.length - targetStart < end - start) {
          end = target.length - targetStart + start;
        }
        const len = end - start;
        if (this === target && typeof Uint8Array.prototype.copyWithin === "function") {
          this.copyWithin(targetStart, start, end);
        } else {
          Uint8Array.prototype.set.call(
            target,
            this.subarray(start, end),
            targetStart
          );
        }
        return len;
      };
      Buffer22.prototype.fill = function fill(val, start, end, encoding) {
        if (typeof val === "string") {
          if (typeof start === "string") {
            encoding = start;
            start = 0;
            end = this.length;
          } else if (typeof end === "string") {
            encoding = end;
            end = this.length;
          }
          if (encoding !== void 0 && typeof encoding !== "string") {
            throw new TypeError("encoding must be a string");
          }
          if (typeof encoding === "string" && !Buffer22.isEncoding(encoding)) {
            throw new TypeError("Unknown encoding: " + encoding);
          }
          if (val.length === 1) {
            const code2 = val.charCodeAt(0);
            if (encoding === "utf8" && code2 < 128 || encoding === "latin1") {
              val = code2;
            }
          }
        } else if (typeof val === "number") {
          val = val & 255;
        } else if (typeof val === "boolean") {
          val = Number(val);
        }
        if (start < 0 || this.length < start || this.length < end) {
          throw new RangeError("Out of range index");
        }
        if (end <= start) {
          return this;
        }
        start = start >>> 0;
        end = end === void 0 ? this.length : end >>> 0;
        if (!val)
          val = 0;
        let i;
        if (typeof val === "number") {
          for (i = start; i < end; ++i) {
            this[i] = val;
          }
        } else {
          const bytes = Buffer22.isBuffer(val) ? val : Buffer22.from(val, encoding);
          const len = bytes.length;
          if (len === 0) {
            throw new TypeError('The value "' + val + '" is invalid for argument "value"');
          }
          for (i = 0; i < end - start; ++i) {
            this[i + start] = bytes[i % len];
          }
        }
        return this;
      };
      const errors2 = {};
      function E(sym, getMessage2, Base) {
        errors2[sym] = class NodeError extends Base {
          constructor() {
            super();
            Object.defineProperty(this, "message", {
              value: getMessage2.apply(this, arguments),
              writable: true,
              configurable: true
            });
            this.name = `${this.name} [${sym}]`;
            this.stack;
            delete this.name;
          }
          get code() {
            return sym;
          }
          set code(value) {
            Object.defineProperty(this, "code", {
              configurable: true,
              enumerable: true,
              value,
              writable: true
            });
          }
          toString() {
            return `${this.name} [${sym}]: ${this.message}`;
          }
        };
      }
      E(
        "ERR_BUFFER_OUT_OF_BOUNDS",
        function(name) {
          if (name) {
            return `${name} is outside of buffer bounds`;
          }
          return "Attempt to access memory outside buffer bounds";
        },
        RangeError
      );
      E(
        "ERR_INVALID_ARG_TYPE",
        function(name, actual) {
          return `The "${name}" argument must be of type number. Received type ${typeof actual}`;
        },
        TypeError
      );
      E(
        "ERR_OUT_OF_RANGE",
        function(str, range, input) {
          let msg = `The value of "${str}" is out of range.`;
          let received = input;
          if (Number.isInteger(input) && Math.abs(input) > 2 ** 32) {
            received = addNumericalSeparator(String(input));
          } else if (typeof input === "bigint") {
            received = String(input);
            if (input > BigInt(2) ** BigInt(32) || input < -(BigInt(2) ** BigInt(32))) {
              received = addNumericalSeparator(received);
            }
            received += "n";
          }
          msg += ` It must be ${range}. Received ${received}`;
          return msg;
        },
        RangeError
      );
      function addNumericalSeparator(val) {
        let res = "";
        let i = val.length;
        const start = val[0] === "-" ? 1 : 0;
        for (; i >= start + 4; i -= 3) {
          res = `_${val.slice(i - 3, i)}${res}`;
        }
        return `${val.slice(0, i)}${res}`;
      }
      function checkBounds(buf, offset, byteLength3) {
        validateNumber(offset, "offset");
        if (buf[offset] === void 0 || buf[offset + byteLength3] === void 0) {
          boundsError(offset, buf.length - (byteLength3 + 1));
        }
      }
      function checkIntBI(value, min, max, buf, offset, byteLength3) {
        if (value > max || value < min) {
          const n = typeof min === "bigint" ? "n" : "";
          let range;
          if (byteLength3 > 3) {
            if (min === 0 || min === BigInt(0)) {
              range = `>= 0${n} and < 2${n} ** ${(byteLength3 + 1) * 8}${n}`;
            } else {
              range = `>= -(2${n} ** ${(byteLength3 + 1) * 8 - 1}${n}) and < 2 ** ${(byteLength3 + 1) * 8 - 1}${n}`;
            }
          } else {
            range = `>= ${min}${n} and <= ${max}${n}`;
          }
          throw new errors2.ERR_OUT_OF_RANGE("value", range, value);
        }
        checkBounds(buf, offset, byteLength3);
      }
      function validateNumber(value, name) {
        if (typeof value !== "number") {
          throw new errors2.ERR_INVALID_ARG_TYPE(name, "number", value);
        }
      }
      function boundsError(value, length, type) {
        if (Math.floor(value) !== value) {
          validateNumber(value, type);
          throw new errors2.ERR_OUT_OF_RANGE(type || "offset", "an integer", value);
        }
        if (length < 0) {
          throw new errors2.ERR_BUFFER_OUT_OF_BOUNDS();
        }
        throw new errors2.ERR_OUT_OF_RANGE(
          type || "offset",
          `>= ${type ? 1 : 0} and <= ${length}`,
          value
        );
      }
      const INVALID_BASE64_RE = /[^+/0-9A-Za-z-_]/g;
      function base64clean(str) {
        str = str.split("=")[0];
        str = str.trim().replace(INVALID_BASE64_RE, "");
        if (str.length < 2)
          return "";
        while (str.length % 4 !== 0) {
          str = str + "=";
        }
        return str;
      }
      function utf8ToBytes(string, units) {
        units = units || Infinity;
        let codePoint;
        const length = string.length;
        let leadSurrogate = null;
        const bytes = [];
        for (let i = 0; i < length; ++i) {
          codePoint = string.charCodeAt(i);
          if (codePoint > 55295 && codePoint < 57344) {
            if (!leadSurrogate) {
              if (codePoint > 56319) {
                if ((units -= 3) > -1)
                  bytes.push(239, 191, 189);
                continue;
              } else if (i + 1 === length) {
                if ((units -= 3) > -1)
                  bytes.push(239, 191, 189);
                continue;
              }
              leadSurrogate = codePoint;
              continue;
            }
            if (codePoint < 56320) {
              if ((units -= 3) > -1)
                bytes.push(239, 191, 189);
              leadSurrogate = codePoint;
              continue;
            }
            codePoint = (leadSurrogate - 55296 << 10 | codePoint - 56320) + 65536;
          } else if (leadSurrogate) {
            if ((units -= 3) > -1)
              bytes.push(239, 191, 189);
          }
          leadSurrogate = null;
          if (codePoint < 128) {
            if ((units -= 1) < 0)
              break;
            bytes.push(codePoint);
          } else if (codePoint < 2048) {
            if ((units -= 2) < 0)
              break;
            bytes.push(
              codePoint >> 6 | 192,
              codePoint & 63 | 128
            );
          } else if (codePoint < 65536) {
            if ((units -= 3) < 0)
              break;
            bytes.push(
              codePoint >> 12 | 224,
              codePoint >> 6 & 63 | 128,
              codePoint & 63 | 128
            );
          } else if (codePoint < 1114112) {
            if ((units -= 4) < 0)
              break;
            bytes.push(
              codePoint >> 18 | 240,
              codePoint >> 12 & 63 | 128,
              codePoint >> 6 & 63 | 128,
              codePoint & 63 | 128
            );
          } else {
            throw new Error("Invalid code point");
          }
        }
        return bytes;
      }
      function asciiToBytes(str) {
        const byteArray = [];
        for (let i = 0; i < str.length; ++i) {
          byteArray.push(str.charCodeAt(i) & 255);
        }
        return byteArray;
      }
      function utf16leToBytes(str, units) {
        let c, hi, lo;
        const byteArray = [];
        for (let i = 0; i < str.length; ++i) {
          if ((units -= 2) < 0)
            break;
          c = str.charCodeAt(i);
          hi = c >> 8;
          lo = c % 256;
          byteArray.push(lo);
          byteArray.push(hi);
        }
        return byteArray;
      }
      function base64ToBytes(str) {
        return base64.toByteArray(base64clean(str));
      }
      function blitBuffer(src, dst, offset, length) {
        let i;
        for (i = 0; i < length; ++i) {
          if (i + offset >= dst.length || i >= src.length)
            break;
          dst[i + offset] = src[i];
        }
        return i;
      }
      function isInstance(obj, type) {
        return obj instanceof type || obj != null && obj.constructor != null && obj.constructor.name != null && obj.constructor.name === type.name;
      }
      function numberIsNaN(obj) {
        return obj !== obj;
      }
      const hexSliceLookupTable = function() {
        const alphabet = "0123456789abcdef";
        const table = new Array(256);
        for (let i = 0; i < 16; ++i) {
          const i16 = i * 16;
          for (let j = 0; j < 16; ++j) {
            table[i16 + j] = alphabet[i] + alphabet[j];
          }
        }
        return table;
      }();
      function defineBigIntMethod(fn) {
        return typeof BigInt === "undefined" ? BufferBigIntNotDefined : fn;
      }
      function BufferBigIntNotDefined() {
        throw new Error("BigInt not supported");
      }
    })(buffer);
    global$1 = typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {};
    if (typeof Object.create === "function") {
      inherits = function inherits2(ctor, superCtor) {
        ctor.super_ = superCtor;
        ctor.prototype = Object.create(superCtor.prototype, {
          constructor: {
            value: ctor,
            enumerable: false,
            writable: true,
            configurable: true
          }
        });
      };
    } else {
      inherits = function inherits2(ctor, superCtor) {
        ctor.super_ = superCtor;
        var TempCtor = function() {
        };
        TempCtor.prototype = superCtor.prototype;
        ctor.prototype = new TempCtor();
        ctor.prototype.constructor = ctor;
      };
    }
    inherits$1 = inherits;
    inspect$1.colors = {
      "bold": [1, 22],
      "italic": [3, 23],
      "underline": [4, 24],
      "inverse": [7, 27],
      "white": [37, 39],
      "grey": [90, 39],
      "black": [30, 39],
      "blue": [34, 39],
      "cyan": [36, 39],
      "green": [32, 39],
      "magenta": [35, 39],
      "red": [31, 39],
      "yellow": [33, 39]
    };
    inspect$1.styles = {
      "special": "cyan",
      "number": "yellow",
      "boolean": "yellow",
      "undefined": "grey",
      "null": "bold",
      "string": "green",
      "date": "magenta",
      // "name": intentionally not styling
      "regexp": "red"
    };
    hasOwn = Object.prototype.hasOwnProperty;
    objectKeys = Object.keys || function(obj) {
      var keys = [];
      for (var key in obj) {
        if (hasOwn.call(obj, key))
          keys.push(key);
      }
      return keys;
    };
    pSlice = Array.prototype.slice;
    regex = /\s*function\s+([^\(\s]*)\s*/;
    assert.AssertionError = AssertionError;
    inherits$1(AssertionError, Error);
    assert.fail = fail;
    assert.ok = ok;
    assert.equal = equal;
    assert.notEqual = notEqual;
    assert.deepEqual = deepEqual;
    assert.deepStrictEqual = deepStrictEqual;
    assert.notDeepEqual = notDeepEqual;
    assert.notDeepStrictEqual = notDeepStrictEqual;
    assert.strictEqual = strictEqual;
    assert.notStrictEqual = notStrictEqual;
    assert.throws = throws;
    assert.doesNotThrow = doesNotThrow;
    assert.ifError = ifError;
    Layout$1 = {};
    Layout = class {
      constructor(span, property) {
        if (!Number.isInteger(span)) {
          throw new TypeError("span must be an integer");
        }
        this.span = span;
        this.property = property;
      }
      /** Function to create an Object into which decoded properties will
       * be written.
       *
       * Used only for layouts that {@link Layout#decode|decode} to Object
       * instances, which means:
       * * {@link Structure}
       * * {@link Union}
       * * {@link VariantLayout}
       * * {@link BitStructure}
       *
       * If left undefined the JavaScript representation of these layouts
       * will be Object instances.
       *
       * See {@link bindConstructorLayout}.
       */
      makeDestinationObject() {
        return {};
      }
      /**
       * Decode from a Buffer into an JavaScript value.
       *
       * @param {Buffer} b - the buffer from which encoded data is read.
       *
       * @param {Number} [offset] - the offset at which the encoded data
       * starts.  If absent a zero offset is inferred.
       *
       * @returns {(Number|Array|Object)} - the value of the decoded data.
       *
       * @abstract
       */
      decode(b, offset) {
        throw new Error("Layout is abstract");
      }
      /**
       * Encode a JavaScript value into a Buffer.
       *
       * @param {(Number|Array|Object)} src - the value to be encoded into
       * the buffer.  The type accepted depends on the (sub-)type of {@link
       * Layout}.
       *
       * @param {Buffer} b - the buffer into which encoded data will be
       * written.
       *
       * @param {Number} [offset] - the offset at which the encoded data
       * starts.  If absent a zero offset is inferred.
       *
       * @returns {Number} - the number of bytes encoded, including the
       * space skipped for internal padding, but excluding data such as
       * {@link Sequence#count|lengths} when stored {@link
       * ExternalLayout|externally}.  This is the adjustment to `offset`
       * producing the offset where data for the next layout would be
       * written.
       *
       * @abstract
       */
      encode(src, b, offset) {
        throw new Error("Layout is abstract");
      }
      /**
       * Calculate the span of a specific instance of a layout.
       *
       * @param {Buffer} b - the buffer that contains an encoded instance.
       *
       * @param {Number} [offset] - the offset at which the encoded instance
       * starts.  If absent a zero offset is inferred.
       *
       * @return {Number} - the number of bytes covered by the layout
       * instance.  If this method is not overridden in a subclass the
       * definition-time constant {@link Layout#span|span} will be
       * returned.
       *
       * @throws {RangeError} - if the length of the value cannot be
       * determined.
       */
      getSpan(b, offset) {
        if (0 > this.span) {
          throw new RangeError("indeterminate span");
        }
        return this.span;
      }
      /**
       * Replicate the layout using a new property.
       *
       * This function must be used to get a structurally-equivalent layout
       * with a different name since all {@link Layout} instances are
       * immutable.
       *
       * **NOTE** This is a shallow copy.  All fields except {@link
       * Layout#property|property} are strictly equal to the origin layout.
       *
       * @param {String} property - the value for {@link
       * Layout#property|property} in the replica.
       *
       * @returns {Layout} - the copy with {@link Layout#property|property}
       * set to `property`.
       */
      replicate(property) {
        const rv = Object.create(this.constructor.prototype);
        Object.assign(rv, this);
        rv.property = property;
        return rv;
      }
      /**
       * Create an object from layout properties and an array of values.
       *
       * **NOTE** This function returns `undefined` if invoked on a layout
       * that does not return its value as an Object.  Objects are
       * returned for things that are a {@link Structure}, which includes
       * {@link VariantLayout|variant layouts} if they are structures, and
       * excludes {@link Union}s.  If you want this feature for a union
       * you must use {@link Union.getVariant|getVariant} to select the
       * desired layout.
       *
       * @param {Array} values - an array of values that correspond to the
       * default order for properties.  As with {@link Layout#decode|decode}
       * layout elements that have no property name are skipped when
       * iterating over the array values.  Only the top-level properties are
       * assigned; arguments are not assigned to properties of contained
       * layouts.  Any unused values are ignored.
       *
       * @return {(Object|undefined)}
       */
      fromArray(values) {
        return void 0;
      }
    };
    Layout$1.Layout = Layout;
    Layout$1.nameWithProperty = nameWithProperty;
    Layout$1.bindConstructorLayout = bindConstructorLayout;
    ExternalLayout = class extends Layout {
      /**
       * Return `true` iff the external layout decodes to an unsigned
       * integer layout.
       *
       * In that case it can be used as the source of {@link
       * Sequence#count|Sequence counts}, {@link Blob#length|Blob lengths},
       * or as {@link UnionLayoutDiscriminator#layout|external union
       * discriminators}.
       *
       * @abstract
       */
      isCount() {
        throw new Error("ExternalLayout is abstract");
      }
    };
    GreedyCount = class extends ExternalLayout {
      constructor(elementSpan, property) {
        if (void 0 === elementSpan) {
          elementSpan = 1;
        }
        if (!Number.isInteger(elementSpan) || 0 >= elementSpan) {
          throw new TypeError("elementSpan must be a (positive) integer");
        }
        super(-1, property);
        this.elementSpan = elementSpan;
      }
      /** @override */
      isCount() {
        return true;
      }
      /** @override */
      decode(b, offset) {
        if (void 0 === offset) {
          offset = 0;
        }
        const rem = b.length - offset;
        return Math.floor(rem / this.elementSpan);
      }
      /** @override */
      encode(src, b, offset) {
        return 0;
      }
    };
    OffsetLayout = class extends ExternalLayout {
      constructor(layout, offset, property) {
        if (!(layout instanceof Layout)) {
          throw new TypeError("layout must be a Layout");
        }
        if (void 0 === offset) {
          offset = 0;
        } else if (!Number.isInteger(offset)) {
          throw new TypeError("offset must be integer or undefined");
        }
        super(layout.span, property || layout.property);
        this.layout = layout;
        this.offset = offset;
      }
      /** @override */
      isCount() {
        return this.layout instanceof UInt || this.layout instanceof UIntBE;
      }
      /** @override */
      decode(b, offset) {
        if (void 0 === offset) {
          offset = 0;
        }
        return this.layout.decode(b, offset + this.offset);
      }
      /** @override */
      encode(src, b, offset) {
        if (void 0 === offset) {
          offset = 0;
        }
        return this.layout.encode(src, b, offset + this.offset);
      }
    };
    UInt = class extends Layout {
      constructor(span, property) {
        super(span, property);
        if (6 < this.span) {
          throw new RangeError("span must not exceed 6 bytes");
        }
      }
      /** @override */
      decode(b, offset) {
        if (void 0 === offset) {
          offset = 0;
        }
        return b.readUIntLE(offset, this.span);
      }
      /** @override */
      encode(src, b, offset) {
        if (void 0 === offset) {
          offset = 0;
        }
        b.writeUIntLE(src, offset, this.span);
        return this.span;
      }
    };
    UIntBE = class extends Layout {
      constructor(span, property) {
        super(span, property);
        if (6 < this.span) {
          throw new RangeError("span must not exceed 6 bytes");
        }
      }
      /** @override */
      decode(b, offset) {
        if (void 0 === offset) {
          offset = 0;
        }
        return b.readUIntBE(offset, this.span);
      }
      /** @override */
      encode(src, b, offset) {
        if (void 0 === offset) {
          offset = 0;
        }
        b.writeUIntBE(src, offset, this.span);
        return this.span;
      }
    };
    Int = class extends Layout {
      constructor(span, property) {
        super(span, property);
        if (6 < this.span) {
          throw new RangeError("span must not exceed 6 bytes");
        }
      }
      /** @override */
      decode(b, offset) {
        if (void 0 === offset) {
          offset = 0;
        }
        return b.readIntLE(offset, this.span);
      }
      /** @override */
      encode(src, b, offset) {
        if (void 0 === offset) {
          offset = 0;
        }
        b.writeIntLE(src, offset, this.span);
        return this.span;
      }
    };
    IntBE = class extends Layout {
      constructor(span, property) {
        super(span, property);
        if (6 < this.span) {
          throw new RangeError("span must not exceed 6 bytes");
        }
      }
      /** @override */
      decode(b, offset) {
        if (void 0 === offset) {
          offset = 0;
        }
        return b.readIntBE(offset, this.span);
      }
      /** @override */
      encode(src, b, offset) {
        if (void 0 === offset) {
          offset = 0;
        }
        b.writeIntBE(src, offset, this.span);
        return this.span;
      }
    };
    V2E32 = Math.pow(2, 32);
    NearUInt64 = class extends Layout {
      constructor(property) {
        super(8, property);
      }
      /** @override */
      decode(b, offset) {
        if (void 0 === offset) {
          offset = 0;
        }
        const lo32 = b.readUInt32LE(offset);
        const hi32 = b.readUInt32LE(offset + 4);
        return roundedInt64(hi32, lo32);
      }
      /** @override */
      encode(src, b, offset) {
        if (void 0 === offset) {
          offset = 0;
        }
        const split = divmodInt64(src);
        b.writeUInt32LE(split.lo32, offset);
        b.writeUInt32LE(split.hi32, offset + 4);
        return 8;
      }
    };
    NearUInt64BE = class extends Layout {
      constructor(property) {
        super(8, property);
      }
      /** @override */
      decode(b, offset) {
        if (void 0 === offset) {
          offset = 0;
        }
        const hi32 = b.readUInt32BE(offset);
        const lo32 = b.readUInt32BE(offset + 4);
        return roundedInt64(hi32, lo32);
      }
      /** @override */
      encode(src, b, offset) {
        if (void 0 === offset) {
          offset = 0;
        }
        const split = divmodInt64(src);
        b.writeUInt32BE(split.hi32, offset);
        b.writeUInt32BE(split.lo32, offset + 4);
        return 8;
      }
    };
    NearInt64 = class extends Layout {
      constructor(property) {
        super(8, property);
      }
      /** @override */
      decode(b, offset) {
        if (void 0 === offset) {
          offset = 0;
        }
        const lo32 = b.readUInt32LE(offset);
        const hi32 = b.readInt32LE(offset + 4);
        return roundedInt64(hi32, lo32);
      }
      /** @override */
      encode(src, b, offset) {
        if (void 0 === offset) {
          offset = 0;
        }
        const split = divmodInt64(src);
        b.writeUInt32LE(split.lo32, offset);
        b.writeInt32LE(split.hi32, offset + 4);
        return 8;
      }
    };
    NearInt64BE = class extends Layout {
      constructor(property) {
        super(8, property);
      }
      /** @override */
      decode(b, offset) {
        if (void 0 === offset) {
          offset = 0;
        }
        const hi32 = b.readInt32BE(offset);
        const lo32 = b.readUInt32BE(offset + 4);
        return roundedInt64(hi32, lo32);
      }
      /** @override */
      encode(src, b, offset) {
        if (void 0 === offset) {
          offset = 0;
        }
        const split = divmodInt64(src);
        b.writeInt32BE(split.hi32, offset);
        b.writeUInt32BE(split.lo32, offset + 4);
        return 8;
      }
    };
    Float = class extends Layout {
      constructor(property) {
        super(4, property);
      }
      /** @override */
      decode(b, offset) {
        if (void 0 === offset) {
          offset = 0;
        }
        return b.readFloatLE(offset);
      }
      /** @override */
      encode(src, b, offset) {
        if (void 0 === offset) {
          offset = 0;
        }
        b.writeFloatLE(src, offset);
        return 4;
      }
    };
    FloatBE = class extends Layout {
      constructor(property) {
        super(4, property);
      }
      /** @override */
      decode(b, offset) {
        if (void 0 === offset) {
          offset = 0;
        }
        return b.readFloatBE(offset);
      }
      /** @override */
      encode(src, b, offset) {
        if (void 0 === offset) {
          offset = 0;
        }
        b.writeFloatBE(src, offset);
        return 4;
      }
    };
    Double = class extends Layout {
      constructor(property) {
        super(8, property);
      }
      /** @override */
      decode(b, offset) {
        if (void 0 === offset) {
          offset = 0;
        }
        return b.readDoubleLE(offset);
      }
      /** @override */
      encode(src, b, offset) {
        if (void 0 === offset) {
          offset = 0;
        }
        b.writeDoubleLE(src, offset);
        return 8;
      }
    };
    DoubleBE = class extends Layout {
      constructor(property) {
        super(8, property);
      }
      /** @override */
      decode(b, offset) {
        if (void 0 === offset) {
          offset = 0;
        }
        return b.readDoubleBE(offset);
      }
      /** @override */
      encode(src, b, offset) {
        if (void 0 === offset) {
          offset = 0;
        }
        b.writeDoubleBE(src, offset);
        return 8;
      }
    };
    Sequence = class extends Layout {
      constructor(elementLayout, count, property) {
        if (!(elementLayout instanceof Layout)) {
          throw new TypeError("elementLayout must be a Layout");
        }
        if (!(count instanceof ExternalLayout && count.isCount() || Number.isInteger(count) && 0 <= count)) {
          throw new TypeError("count must be non-negative integer or an unsigned integer ExternalLayout");
        }
        let span = -1;
        if (!(count instanceof ExternalLayout) && 0 < elementLayout.span) {
          span = count * elementLayout.span;
        }
        super(span, property);
        this.elementLayout = elementLayout;
        this.count = count;
      }
      /** @override */
      getSpan(b, offset) {
        if (0 <= this.span) {
          return this.span;
        }
        if (void 0 === offset) {
          offset = 0;
        }
        let span = 0;
        let count = this.count;
        if (count instanceof ExternalLayout) {
          count = count.decode(b, offset);
        }
        if (0 < this.elementLayout.span) {
          span = count * this.elementLayout.span;
        } else {
          let idx = 0;
          while (idx < count) {
            span += this.elementLayout.getSpan(b, offset + span);
            ++idx;
          }
        }
        return span;
      }
      /** @override */
      decode(b, offset) {
        if (void 0 === offset) {
          offset = 0;
        }
        const rv = [];
        let i = 0;
        let count = this.count;
        if (count instanceof ExternalLayout) {
          count = count.decode(b, offset);
        }
        while (i < count) {
          rv.push(this.elementLayout.decode(b, offset));
          offset += this.elementLayout.getSpan(b, offset);
          i += 1;
        }
        return rv;
      }
      /** Implement {@link Layout#encode|encode} for {@link Sequence}.
       *
       * **NOTE** If `src` is shorter than {@link Sequence#count|count} then
       * the unused space in the buffer is left unchanged.  If `src` is
       * longer than {@link Sequence#count|count} the unneeded elements are
       * ignored.
       *
       * **NOTE** If {@link Layout#count|count} is an instance of {@link
       * ExternalLayout} then the length of `src` will be encoded as the
       * count after `src` is encoded. */
      encode(src, b, offset) {
        if (void 0 === offset) {
          offset = 0;
        }
        const elo = this.elementLayout;
        const span = src.reduce((span2, v) => {
          return span2 + elo.encode(v, b, offset + span2);
        }, 0);
        if (this.count instanceof ExternalLayout) {
          this.count.encode(src.length, b, offset);
        }
        return span;
      }
    };
    Structure = class extends Layout {
      constructor(fields, property, decodePrefixes) {
        if (!(Array.isArray(fields) && fields.reduce((acc, v) => acc && v instanceof Layout, true))) {
          throw new TypeError("fields must be array of Layout instances");
        }
        if ("boolean" === typeof property && void 0 === decodePrefixes) {
          decodePrefixes = property;
          property = void 0;
        }
        for (const fd of fields) {
          if (0 > fd.span && void 0 === fd.property) {
            throw new Error("fields cannot contain unnamed variable-length layout");
          }
        }
        let span = -1;
        try {
          span = fields.reduce((span2, fd) => span2 + fd.getSpan(), 0);
        } catch (e2) {
        }
        super(span, property);
        this.fields = fields;
        this.decodePrefixes = !!decodePrefixes;
      }
      /** @override */
      getSpan(b, offset) {
        if (0 <= this.span) {
          return this.span;
        }
        if (void 0 === offset) {
          offset = 0;
        }
        let span = 0;
        try {
          span = this.fields.reduce((span2, fd) => {
            const fsp = fd.getSpan(b, offset);
            offset += fsp;
            return span2 + fsp;
          }, 0);
        } catch (e2) {
          throw new RangeError("indeterminate span");
        }
        return span;
      }
      /** @override */
      decode(b, offset) {
        if (void 0 === offset) {
          offset = 0;
        }
        const dest = this.makeDestinationObject();
        for (const fd of this.fields) {
          if (void 0 !== fd.property) {
            dest[fd.property] = fd.decode(b, offset);
          }
          offset += fd.getSpan(b, offset);
          if (this.decodePrefixes && b.length === offset) {
            break;
          }
        }
        return dest;
      }
      /** Implement {@link Layout#encode|encode} for {@link Structure}.
       *
       * If `src` is missing a property for a member with a defined {@link
       * Layout#property|property} the corresponding region of the buffer is
       * left unmodified. */
      encode(src, b, offset) {
        if (void 0 === offset) {
          offset = 0;
        }
        const firstOffset = offset;
        let lastOffset = 0;
        let lastWrote = 0;
        for (const fd of this.fields) {
          let span = fd.span;
          lastWrote = 0 < span ? span : 0;
          if (void 0 !== fd.property) {
            const fv = src[fd.property];
            if (void 0 !== fv) {
              lastWrote = fd.encode(fv, b, offset);
              if (0 > span) {
                span = fd.getSpan(b, offset);
              }
            }
          }
          lastOffset = offset;
          offset += span;
        }
        return lastOffset + lastWrote - firstOffset;
      }
      /** @override */
      fromArray(values) {
        const dest = this.makeDestinationObject();
        for (const fd of this.fields) {
          if (void 0 !== fd.property && 0 < values.length) {
            dest[fd.property] = values.shift();
          }
        }
        return dest;
      }
      /**
       * Get access to the layout of a given property.
       *
       * @param {String} property - the structure member of interest.
       *
       * @return {Layout} - the layout associated with `property`, or
       * undefined if there is no such property.
       */
      layoutFor(property) {
        if ("string" !== typeof property) {
          throw new TypeError("property must be string");
        }
        for (const fd of this.fields) {
          if (fd.property === property) {
            return fd;
          }
        }
      }
      /**
       * Get the offset of a structure member.
       *
       * @param {String} property - the structure member of interest.
       *
       * @return {Number} - the offset in bytes to the start of `property`
       * within the structure, or undefined if `property` is not a field
       * within the structure.  If the property is a member but follows a
       * variable-length structure member a negative number will be
       * returned.
       */
      offsetOf(property) {
        if ("string" !== typeof property) {
          throw new TypeError("property must be string");
        }
        let offset = 0;
        for (const fd of this.fields) {
          if (fd.property === property) {
            return offset;
          }
          if (0 > fd.span) {
            offset = -1;
          } else if (0 <= offset) {
            offset += fd.span;
          }
        }
      }
    };
    UnionDiscriminator = class {
      constructor(property) {
        this.property = property;
      }
      /** Analog to {@link Layout#decode|Layout decode} for union discriminators.
       *
       * The implementation of this method need not reference the buffer if
       * variant information is available through other means. */
      decode() {
        throw new Error("UnionDiscriminator is abstract");
      }
      /** Analog to {@link Layout#decode|Layout encode} for union discriminators.
       *
       * The implementation of this method need not store the value if
       * variant information is maintained through other means. */
      encode() {
        throw new Error("UnionDiscriminator is abstract");
      }
    };
    UnionLayoutDiscriminator = class extends UnionDiscriminator {
      constructor(layout, property) {
        if (!(layout instanceof ExternalLayout && layout.isCount())) {
          throw new TypeError("layout must be an unsigned integer ExternalLayout");
        }
        super(property || layout.property || "variant");
        this.layout = layout;
      }
      /** Delegate decoding to {@link UnionLayoutDiscriminator#layout|layout}. */
      decode(b, offset) {
        return this.layout.decode(b, offset);
      }
      /** Delegate encoding to {@link UnionLayoutDiscriminator#layout|layout}. */
      encode(src, b, offset) {
        return this.layout.encode(src, b, offset);
      }
    };
    Union = class extends Layout {
      constructor(discr, defaultLayout, property) {
        const upv = discr instanceof UInt || discr instanceof UIntBE;
        if (upv) {
          discr = new UnionLayoutDiscriminator(new OffsetLayout(discr));
        } else if (discr instanceof ExternalLayout && discr.isCount()) {
          discr = new UnionLayoutDiscriminator(discr);
        } else if (!(discr instanceof UnionDiscriminator)) {
          throw new TypeError("discr must be a UnionDiscriminator or an unsigned integer layout");
        }
        if (void 0 === defaultLayout) {
          defaultLayout = null;
        }
        if (!(null === defaultLayout || defaultLayout instanceof Layout)) {
          throw new TypeError("defaultLayout must be null or a Layout");
        }
        if (null !== defaultLayout) {
          if (0 > defaultLayout.span) {
            throw new Error("defaultLayout must have constant span");
          }
          if (void 0 === defaultLayout.property) {
            defaultLayout = defaultLayout.replicate("content");
          }
        }
        let span = -1;
        if (defaultLayout) {
          span = defaultLayout.span;
          if (0 <= span && upv) {
            span += discr.layout.span;
          }
        }
        super(span, property);
        this.discriminator = discr;
        this.usesPrefixDiscriminator = upv;
        this.defaultLayout = defaultLayout;
        this.registry = {};
        let boundGetSourceVariant = this.defaultGetSourceVariant.bind(this);
        this.getSourceVariant = function(src) {
          return boundGetSourceVariant(src);
        };
        this.configGetSourceVariant = function(gsv) {
          boundGetSourceVariant = gsv.bind(this);
        };
      }
      /** @override */
      getSpan(b, offset) {
        if (0 <= this.span) {
          return this.span;
        }
        if (void 0 === offset) {
          offset = 0;
        }
        const vlo = this.getVariant(b, offset);
        if (!vlo) {
          throw new Error("unable to determine span for unrecognized variant");
        }
        return vlo.getSpan(b, offset);
      }
      /**
       * Method to infer a registered Union variant compatible with `src`.
       *
       * The first satisified rule in the following sequence defines the
       * return value:
       * * If `src` has properties matching the Union discriminator and
       *   the default layout, `undefined` is returned regardless of the
       *   value of the discriminator property (this ensures the default
       *   layout will be used);
       * * If `src` has a property matching the Union discriminator, the
       *   value of the discriminator identifies a registered variant, and
       *   either (a) the variant has no layout, or (b) `src` has the
       *   variant's property, then the variant is returned (because the
       *   source satisfies the constraints of the variant it identifies);
       * * If `src` does not have a property matching the Union
       *   discriminator, but does have a property matching a registered
       *   variant, then the variant is returned (because the source
       *   matches a variant without an explicit conflict);
       * * An error is thrown (because we either can't identify a variant,
       *   or we were explicitly told the variant but can't satisfy it).
       *
       * @param {Object} src - an object presumed to be compatible with
       * the content of the Union.
       *
       * @return {(undefined|VariantLayout)} - as described above.
       *
       * @throws {Error} - if `src` cannot be associated with a default or
       * registered variant.
       */
      defaultGetSourceVariant(src) {
        if (src.hasOwnProperty(this.discriminator.property)) {
          if (this.defaultLayout && src.hasOwnProperty(this.defaultLayout.property)) {
            return void 0;
          }
          const vlo = this.registry[src[this.discriminator.property]];
          if (vlo && (!vlo.layout || src.hasOwnProperty(vlo.property))) {
            return vlo;
          }
        } else {
          for (const tag in this.registry) {
            const vlo = this.registry[tag];
            if (src.hasOwnProperty(vlo.property)) {
              return vlo;
            }
          }
        }
        throw new Error("unable to infer src variant");
      }
      /** Implement {@link Layout#decode|decode} for {@link Union}.
       *
       * If the variant is {@link Union#addVariant|registered} the return
       * value is an instance of that variant, with no explicit
       * discriminator.  Otherwise the {@link Union#defaultLayout|default
       * layout} is used to decode the content. */
      decode(b, offset) {
        if (void 0 === offset) {
          offset = 0;
        }
        let dest;
        const dlo = this.discriminator;
        const discr = dlo.decode(b, offset);
        let clo = this.registry[discr];
        if (void 0 === clo) {
          let contentOffset = 0;
          clo = this.defaultLayout;
          if (this.usesPrefixDiscriminator) {
            contentOffset = dlo.layout.span;
          }
          dest = this.makeDestinationObject();
          dest[dlo.property] = discr;
          dest[clo.property] = this.defaultLayout.decode(b, offset + contentOffset);
        } else {
          dest = clo.decode(b, offset);
        }
        return dest;
      }
      /** Implement {@link Layout#encode|encode} for {@link Union}.
       *
       * This API assumes the `src` object is consistent with the union's
       * {@link Union#defaultLayout|default layout}.  To encode variants
       * use the appropriate variant-specific {@link VariantLayout#encode}
       * method. */
      encode(src, b, offset) {
        if (void 0 === offset) {
          offset = 0;
        }
        const vlo = this.getSourceVariant(src);
        if (void 0 === vlo) {
          const dlo = this.discriminator;
          const clo = this.defaultLayout;
          let contentOffset = 0;
          if (this.usesPrefixDiscriminator) {
            contentOffset = dlo.layout.span;
          }
          dlo.encode(src[dlo.property], b, offset);
          return contentOffset + clo.encode(
            src[clo.property],
            b,
            offset + contentOffset
          );
        }
        return vlo.encode(src, b, offset);
      }
      /** Register a new variant structure within a union.  The newly
       * created variant is returned.
       *
       * @param {Number} variant - initializer for {@link
       * VariantLayout#variant|variant}.
       *
       * @param {Layout} layout - initializer for {@link
       * VariantLayout#layout|layout}.
       *
       * @param {String} property - initializer for {@link
       * Layout#property|property}.
       *
       * @return {VariantLayout} */
      addVariant(variant, layout, property) {
        const rv = new VariantLayout(this, variant, layout, property);
        this.registry[variant] = rv;
        return rv;
      }
      /**
       * Get the layout associated with a registered variant.
       *
       * If `vb` does not produce a registered variant the function returns
       * `undefined`.
       *
       * @param {(Number|Buffer)} vb - either the variant number, or a
       * buffer from which the discriminator is to be read.
       *
       * @param {Number} offset - offset into `vb` for the start of the
       * union.  Used only when `vb` is an instance of {Buffer}.
       *
       * @return {({VariantLayout}|undefined)}
       */
      getVariant(vb, offset) {
        let variant = vb;
        if (buffer.Buffer.isBuffer(vb)) {
          if (void 0 === offset) {
            offset = 0;
          }
          variant = this.discriminator.decode(vb, offset);
        }
        return this.registry[variant];
      }
    };
    VariantLayout = class extends Layout {
      constructor(union, variant, layout, property) {
        if (!(union instanceof Union)) {
          throw new TypeError("union must be a Union");
        }
        if (!Number.isInteger(variant) || 0 > variant) {
          throw new TypeError("variant must be a (non-negative) integer");
        }
        if ("string" === typeof layout && void 0 === property) {
          property = layout;
          layout = null;
        }
        if (layout) {
          if (!(layout instanceof Layout)) {
            throw new TypeError("layout must be a Layout");
          }
          if (null !== union.defaultLayout && 0 <= layout.span && layout.span > union.defaultLayout.span) {
            throw new Error("variant span exceeds span of containing union");
          }
          if ("string" !== typeof property) {
            throw new TypeError("variant must have a String property");
          }
        }
        let span = union.span;
        if (0 > union.span) {
          span = layout ? layout.span : 0;
          if (0 <= span && union.usesPrefixDiscriminator) {
            span += union.discriminator.layout.span;
          }
        }
        super(span, property);
        this.union = union;
        this.variant = variant;
        this.layout = layout || null;
      }
      /** @override */
      getSpan(b, offset) {
        if (0 <= this.span) {
          return this.span;
        }
        if (void 0 === offset) {
          offset = 0;
        }
        let contentOffset = 0;
        if (this.union.usesPrefixDiscriminator) {
          contentOffset = this.union.discriminator.layout.span;
        }
        return contentOffset + this.layout.getSpan(b, offset + contentOffset);
      }
      /** @override */
      decode(b, offset) {
        const dest = this.makeDestinationObject();
        if (void 0 === offset) {
          offset = 0;
        }
        if (this !== this.union.getVariant(b, offset)) {
          throw new Error("variant mismatch");
        }
        let contentOffset = 0;
        if (this.union.usesPrefixDiscriminator) {
          contentOffset = this.union.discriminator.layout.span;
        }
        if (this.layout) {
          dest[this.property] = this.layout.decode(b, offset + contentOffset);
        } else if (this.property) {
          dest[this.property] = true;
        } else if (this.union.usesPrefixDiscriminator) {
          dest[this.union.discriminator.property] = this.variant;
        }
        return dest;
      }
      /** @override */
      encode(src, b, offset) {
        if (void 0 === offset) {
          offset = 0;
        }
        let contentOffset = 0;
        if (this.union.usesPrefixDiscriminator) {
          contentOffset = this.union.discriminator.layout.span;
        }
        if (this.layout && !src.hasOwnProperty(this.property)) {
          throw new TypeError("variant lacks property " + this.property);
        }
        this.union.discriminator.encode(this.variant, b, offset);
        let span = contentOffset;
        if (this.layout) {
          this.layout.encode(src[this.property], b, offset + contentOffset);
          span += this.layout.getSpan(b, offset + contentOffset);
          if (0 <= this.union.span && span > this.union.span) {
            throw new Error("encoded variant overruns containing union");
          }
        }
        return span;
      }
      /** Delegate {@link Layout#fromArray|fromArray} to {@link
       * VariantLayout#layout|layout}. */
      fromArray(values) {
        if (this.layout) {
          return this.layout.fromArray(values);
        }
      }
    };
    BitStructure = class extends Layout {
      constructor(word, msb, property) {
        if (!(word instanceof UInt || word instanceof UIntBE)) {
          throw new TypeError("word must be a UInt or UIntBE layout");
        }
        if ("string" === typeof msb && void 0 === property) {
          property = msb;
          msb = void 0;
        }
        if (4 < word.span) {
          throw new RangeError("word cannot exceed 32 bits");
        }
        super(word.span, property);
        this.word = word;
        this.msb = !!msb;
        this.fields = [];
        let value = 0;
        this._packedSetValue = function(v) {
          value = fixBitwiseResult(v);
          return this;
        };
        this._packedGetValue = function() {
          return value;
        };
      }
      /** @override */
      decode(b, offset) {
        const dest = this.makeDestinationObject();
        if (void 0 === offset) {
          offset = 0;
        }
        const value = this.word.decode(b, offset);
        this._packedSetValue(value);
        for (const fd of this.fields) {
          if (void 0 !== fd.property) {
            dest[fd.property] = fd.decode(value);
          }
        }
        return dest;
      }
      /** Implement {@link Layout#encode|encode} for {@link BitStructure}.
       *
       * If `src` is missing a property for a member with a defined {@link
       * Layout#property|property} the corresponding region of the packed
       * value is left unmodified.  Unused bits are also left unmodified. */
      encode(src, b, offset) {
        if (void 0 === offset) {
          offset = 0;
        }
        const value = this.word.decode(b, offset);
        this._packedSetValue(value);
        for (const fd of this.fields) {
          if (void 0 !== fd.property) {
            const fv = src[fd.property];
            if (void 0 !== fv) {
              fd.encode(fv);
            }
          }
        }
        return this.word.encode(this._packedGetValue(), b, offset);
      }
      /** Register a new bitfield with a containing bit structure.  The
       * resulting bitfield is returned.
       *
       * @param {Number} bits - initializer for {@link BitField#bits|bits}.
       *
       * @param {string} property - initializer for {@link
       * Layout#property|property}.
       *
       * @return {BitField} */
      addField(bits, property) {
        const bf = new BitField(this, bits, property);
        this.fields.push(bf);
        return bf;
      }
      /** As with {@link BitStructure#addField|addField} for single-bit
       * fields with `boolean` value representation.
       *
       * @param {string} property - initializer for {@link
       * Layout#property|property}.
       *
       * @return {Boolean} */
      addBoolean(property) {
        const bf = new Boolean2(this, property);
        this.fields.push(bf);
        return bf;
      }
      /**
       * Get access to the bit field for a given property.
       *
       * @param {String} property - the bit field of interest.
       *
       * @return {BitField} - the field associated with `property`, or
       * undefined if there is no such property.
       */
      fieldFor(property) {
        if ("string" !== typeof property) {
          throw new TypeError("property must be string");
        }
        for (const fd of this.fields) {
          if (fd.property === property) {
            return fd;
          }
        }
      }
    };
    BitField = class {
      constructor(container, bits, property) {
        if (!(container instanceof BitStructure)) {
          throw new TypeError("container must be a BitStructure");
        }
        if (!Number.isInteger(bits) || 0 >= bits) {
          throw new TypeError("bits must be positive integer");
        }
        const totalBits = 8 * container.span;
        const usedBits = container.fields.reduce((sum, fd) => sum + fd.bits, 0);
        if (bits + usedBits > totalBits) {
          throw new Error("bits too long for span remainder (" + (totalBits - usedBits) + " of " + totalBits + " remain)");
        }
        this.container = container;
        this.bits = bits;
        this.valueMask = (1 << bits) - 1;
        if (32 === bits) {
          this.valueMask = 4294967295;
        }
        this.start = usedBits;
        if (this.container.msb) {
          this.start = totalBits - usedBits - bits;
        }
        this.wordMask = fixBitwiseResult(this.valueMask << this.start);
        this.property = property;
      }
      /** Store a value into the corresponding subsequence of the containing
       * bit field. */
      decode() {
        const word = this.container._packedGetValue();
        const wordValue = fixBitwiseResult(word & this.wordMask);
        const value = wordValue >>> this.start;
        return value;
      }
      /** Store a value into the corresponding subsequence of the containing
       * bit field.
       *
       * **NOTE** This is not a specialization of {@link
       * Layout#encode|Layout.encode} and there is no return value. */
      encode(value) {
        if (!Number.isInteger(value) || value !== fixBitwiseResult(value & this.valueMask)) {
          throw new TypeError(nameWithProperty("BitField.encode", this) + " value must be integer not exceeding " + this.valueMask);
        }
        const word = this.container._packedGetValue();
        const wordValue = fixBitwiseResult(value << this.start);
        this.container._packedSetValue(fixBitwiseResult(word & ~this.wordMask) | wordValue);
      }
    };
    Boolean2 = class extends BitField {
      constructor(container, property) {
        super(container, 1, property);
      }
      /** Override {@link BitField#decode|decode} for {@link Boolean|Boolean}.
       *
       * @returns {boolean} */
      decode(b, offset) {
        return !!BitField.prototype.decode.call(this, b, offset);
      }
      /** @override */
      encode(value) {
        if ("boolean" === typeof value) {
          value = +value;
        }
        return BitField.prototype.encode.call(this, value);
      }
    };
    Blob2 = class extends Layout {
      constructor(length, property) {
        if (!(length instanceof ExternalLayout && length.isCount() || Number.isInteger(length) && 0 <= length)) {
          throw new TypeError("length must be positive integer or an unsigned integer ExternalLayout");
        }
        let span = -1;
        if (!(length instanceof ExternalLayout)) {
          span = length;
        }
        super(span, property);
        this.length = length;
      }
      /** @override */
      getSpan(b, offset) {
        let span = this.span;
        if (0 > span) {
          span = this.length.decode(b, offset);
        }
        return span;
      }
      /** @override */
      decode(b, offset) {
        if (void 0 === offset) {
          offset = 0;
        }
        let span = this.span;
        if (0 > span) {
          span = this.length.decode(b, offset);
        }
        return b.slice(offset, offset + span);
      }
      /** Implement {@link Layout#encode|encode} for {@link Blob}.
       *
       * **NOTE** If {@link Layout#count|count} is an instance of {@link
       * ExternalLayout} then the length of `src` will be encoded as the
       * count after `src` is encoded. */
      encode(src, b, offset) {
        let span = this.length;
        if (this.length instanceof ExternalLayout) {
          span = src.length;
        }
        if (!(buffer.Buffer.isBuffer(src) && span === src.length)) {
          throw new TypeError(nameWithProperty("Blob.encode", this) + " requires (length " + span + ") Buffer as src");
        }
        if (offset + span > b.length) {
          throw new RangeError("encoding overruns Buffer");
        }
        b.write(src.toString("hex"), offset, span, "hex");
        if (this.length instanceof ExternalLayout) {
          this.length.encode(span, b, offset);
        }
        return span;
      }
    };
    CString = class extends Layout {
      constructor(property) {
        super(-1, property);
      }
      /** @override */
      getSpan(b, offset) {
        if (!buffer.Buffer.isBuffer(b)) {
          throw new TypeError("b must be a Buffer");
        }
        if (void 0 === offset) {
          offset = 0;
        }
        let idx = offset;
        while (idx < b.length && 0 !== b[idx]) {
          idx += 1;
        }
        return 1 + idx - offset;
      }
      /** @override */
      decode(b, offset, dest) {
        if (void 0 === offset) {
          offset = 0;
        }
        let span = this.getSpan(b, offset);
        return b.slice(offset, offset + span - 1).toString("utf-8");
      }
      /** @override */
      encode(src, b, offset) {
        if (void 0 === offset) {
          offset = 0;
        }
        if ("string" !== typeof src) {
          src = src.toString();
        }
        const srcb = new buffer.Buffer(src, "utf8");
        const span = srcb.length;
        if (offset + span > b.length) {
          throw new RangeError("encoding overruns Buffer");
        }
        srcb.copy(b, offset);
        b[offset + span] = 0;
        return span + 1;
      }
    };
    UTF8 = class extends Layout {
      constructor(maxSpan, property) {
        if ("string" === typeof maxSpan && void 0 === property) {
          property = maxSpan;
          maxSpan = void 0;
        }
        if (void 0 === maxSpan) {
          maxSpan = -1;
        } else if (!Number.isInteger(maxSpan)) {
          throw new TypeError("maxSpan must be an integer");
        }
        super(-1, property);
        this.maxSpan = maxSpan;
      }
      /** @override */
      getSpan(b, offset) {
        if (!buffer.Buffer.isBuffer(b)) {
          throw new TypeError("b must be a Buffer");
        }
        if (void 0 === offset) {
          offset = 0;
        }
        return b.length - offset;
      }
      /** @override */
      decode(b, offset, dest) {
        if (void 0 === offset) {
          offset = 0;
        }
        let span = this.getSpan(b, offset);
        if (0 <= this.maxSpan && this.maxSpan < span) {
          throw new RangeError("text length exceeds maxSpan");
        }
        return b.slice(offset, offset + span).toString("utf-8");
      }
      /** @override */
      encode(src, b, offset) {
        if (void 0 === offset) {
          offset = 0;
        }
        if ("string" !== typeof src) {
          src = src.toString();
        }
        const srcb = new buffer.Buffer(src, "utf8");
        const span = srcb.length;
        if (0 <= this.maxSpan && this.maxSpan < span) {
          throw new RangeError("text length exceeds maxSpan");
        }
        if (offset + span > b.length) {
          throw new RangeError("encoding overruns Buffer");
        }
        srcb.copy(b, offset);
        return span;
      }
    };
    Constant = class extends Layout {
      constructor(value, property) {
        super(0, property);
        this.value = value;
      }
      /** @override */
      decode(b, offset, dest) {
        return this.value;
      }
      /** @override */
      encode(src, b, offset) {
        return 0;
      }
    };
    Layout$1.ExternalLayout = ExternalLayout;
    Layout$1.GreedyCount = GreedyCount;
    Layout$1.OffsetLayout = OffsetLayout;
    Layout$1.UInt = UInt;
    Layout$1.UIntBE = UIntBE;
    Layout$1.Int = Int;
    Layout$1.IntBE = IntBE;
    Layout$1.Float = Float;
    Layout$1.FloatBE = FloatBE;
    Layout$1.Double = Double;
    Layout$1.DoubleBE = DoubleBE;
    Layout$1.Sequence = Sequence;
    Layout$1.Structure = Structure;
    Layout$1.UnionDiscriminator = UnionDiscriminator;
    Layout$1.UnionLayoutDiscriminator = UnionLayoutDiscriminator;
    Layout$1.Union = Union;
    Layout$1.VariantLayout = VariantLayout;
    Layout$1.BitStructure = BitStructure;
    Layout$1.BitField = BitField;
    Layout$1.Boolean = Boolean2;
    Layout$1.Blob = Blob2;
    Layout$1.CString = CString;
    Layout$1.UTF8 = UTF8;
    Layout$1.Constant = Constant;
    Layout$1.greedy = (elementSpan, property) => new GreedyCount(elementSpan, property);
    Layout$1.offset = (layout, offset, property) => new OffsetLayout(layout, offset, property);
    u8 = Layout$1.u8 = (property) => new UInt(1, property);
    Layout$1.u16 = (property) => new UInt(2, property);
    Layout$1.u24 = (property) => new UInt(3, property);
    u32 = Layout$1.u32 = (property) => new UInt(4, property);
    Layout$1.u40 = (property) => new UInt(5, property);
    Layout$1.u48 = (property) => new UInt(6, property);
    Layout$1.nu64 = (property) => new NearUInt64(property);
    Layout$1.u16be = (property) => new UIntBE(2, property);
    Layout$1.u24be = (property) => new UIntBE(3, property);
    Layout$1.u32be = (property) => new UIntBE(4, property);
    Layout$1.u40be = (property) => new UIntBE(5, property);
    Layout$1.u48be = (property) => new UIntBE(6, property);
    Layout$1.nu64be = (property) => new NearUInt64BE(property);
    Layout$1.s8 = (property) => new Int(1, property);
    Layout$1.s16 = (property) => new Int(2, property);
    Layout$1.s24 = (property) => new Int(3, property);
    Layout$1.s32 = (property) => new Int(4, property);
    Layout$1.s40 = (property) => new Int(5, property);
    Layout$1.s48 = (property) => new Int(6, property);
    Layout$1.ns64 = (property) => new NearInt64(property);
    Layout$1.s16be = (property) => new IntBE(2, property);
    Layout$1.s24be = (property) => new IntBE(3, property);
    Layout$1.s32be = (property) => new IntBE(4, property);
    Layout$1.s40be = (property) => new IntBE(5, property);
    Layout$1.s48be = (property) => new IntBE(6, property);
    Layout$1.ns64be = (property) => new NearInt64BE(property);
    Layout$1.f32 = (property) => new Float(property);
    Layout$1.f32be = (property) => new FloatBE(property);
    Layout$1.f64 = (property) => new Double(property);
    Layout$1.f64be = (property) => new DoubleBE(property);
    struct = Layout$1.struct = (fields, property, decodePrefixes) => new Structure(fields, property, decodePrefixes);
    Layout$1.bits = (word, msb, property) => new BitStructure(word, msb, property);
    Layout$1.seq = (elementLayout, count, property) => new Sequence(elementLayout, count, property);
    Layout$1.union = (discr, defaultLayout, property) => new Union(discr, defaultLayout, property);
    Layout$1.unionLayoutDiscriminator = (layout, property) => new UnionLayoutDiscriminator(layout, property);
    blob = Layout$1.blob = (length, property) => new Blob2(length, property);
    Layout$1.cstr = (property) => new CString(property);
    Layout$1.utf8 = (maxSpan, property) => new UTF8(maxSpan, property);
    Layout$1.const = (value, property) => new Constant(value, property);
    publicKey = (property = "publicKey") => {
      return blob(32, property);
    };
    uint64 = (property = "uint64") => {
      return blob(8, property);
    };
    TOKEN_PROGRAM_ID = new PublicKey("TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA");
    ASSOCIATED_TOKEN_PROGRAM_ID = new PublicKey("ATokenGPvbdGVxr1b2hvZbsiqW5xWH25efTNsLJA8knL");
    FAILED_TO_FIND_ACCOUNT = "Failed to find account";
    INVALID_ACCOUNT_OWNER = "Invalid account owner";
    u64 = class _u64 extends import_bn.default {
      /**
       * Convert to Buffer representation
       */
      toBuffer() {
        const a = super.toArray().reverse();
        const b = buffer.Buffer.from(a);
        if (b.length === 8) {
          return b;
        }
        assert(b.length < 8, "u64 too large");
        const zeroPad = buffer.Buffer.alloc(8);
        b.copy(zeroPad);
        return zeroPad;
      }
      /**
       * Construct a u64 from Buffer representation
       */
      static fromBuffer(buffer2) {
        assert(buffer2.length === 8, `Invalid buffer length: ${buffer2.length}`);
        return new _u64([...buffer2].reverse().map((i) => `00${i.toString(16)}`.slice(-2)).join(""), 16);
      }
    };
    AuthorityTypeCodes = {
      MintTokens: 0,
      FreezeAccount: 1,
      AccountOwner: 2,
      CloseAccount: 3
    };
    NATIVE_MINT = new PublicKey("So11111111111111111111111111111111111111112");
    MintLayout = struct([u32("mintAuthorityOption"), publicKey("mintAuthority"), uint64("supply"), u8("decimals"), u8("isInitialized"), u32("freezeAuthorityOption"), publicKey("freezeAuthority")]);
    AccountLayout = struct([publicKey("mint"), publicKey("owner"), uint64("amount"), u32("delegateOption"), publicKey("delegate"), u8("state"), u32("isNativeOption"), uint64("isNative"), uint64("delegatedAmount"), u32("closeAuthorityOption"), publicKey("closeAuthority")]);
    MultisigLayout = struct([u8("m"), u8("n"), u8("is_initialized"), publicKey("signer1"), publicKey("signer2"), publicKey("signer3"), publicKey("signer4"), publicKey("signer5"), publicKey("signer6"), publicKey("signer7"), publicKey("signer8"), publicKey("signer9"), publicKey("signer10"), publicKey("signer11")]);
    Token = class _Token {
      /**
       * @private
       */
      /**
       * The public key identifying this mint
       */
      /**
       * Program Identifier for the Token program
       */
      /**
       * Program Identifier for the Associated Token program
       */
      /**
       * Fee payer
       */
      /**
       * Create a Token object attached to the specific mint
       *
       * @param connection The connection to use
       * @param token Public key of the mint
       * @param programId token programId
       * @param payer Payer of fees
       */
      constructor(connection, publicKey3, programId, payer) {
        _defineProperty2(this, "connection", void 0);
        _defineProperty2(this, "publicKey", void 0);
        _defineProperty2(this, "programId", void 0);
        _defineProperty2(this, "associatedProgramId", void 0);
        _defineProperty2(this, "payer", void 0);
        Object.assign(this, {
          connection,
          publicKey: publicKey3,
          programId,
          payer,
          // Hard code is ok; Overriding is needed only for tests
          associatedProgramId: ASSOCIATED_TOKEN_PROGRAM_ID
        });
      }
      /**
       * Get the minimum balance for the mint to be rent exempt
       *
       * @return Number of lamports required
       */
      static getMinBalanceRentForExemptMint(connection) {
        return __async(this, null, function* () {
          return yield connection.getMinimumBalanceForRentExemption(MintLayout.span);
        });
      }
      /**
       * Get the minimum balance for the account to be rent exempt
       *
       * @return Number of lamports required
       */
      static getMinBalanceRentForExemptAccount(connection) {
        return __async(this, null, function* () {
          return yield connection.getMinimumBalanceForRentExemption(AccountLayout.span);
        });
      }
      /**
       * Get the minimum balance for the multsig to be rent exempt
       *
       * @return Number of lamports required
       */
      static getMinBalanceRentForExemptMultisig(connection) {
        return __async(this, null, function* () {
          return yield connection.getMinimumBalanceForRentExemption(MultisigLayout.span);
        });
      }
      /**
       * Create and initialize a token.
       *
       * @param connection The connection to use
       * @param payer Fee payer for transaction
       * @param mintAuthority Account or multisig that will control minting
       * @param freezeAuthority Optional account or multisig that can freeze token accounts
       * @param decimals Location of the decimal place
       * @param programId Optional token programId, uses the system programId by default
       * @return Token object for the newly minted token
       */
      static createMint(connection, payer, mintAuthority, freezeAuthority, decimals, programId) {
        return __async(this, null, function* () {
          const mintAccount = Keypair.generate();
          const token2 = new _Token(connection, mintAccount.publicKey, programId, payer);
          const balanceNeeded = yield _Token.getMinBalanceRentForExemptMint(connection);
          const transaction = new Transaction();
          transaction.add(SystemProgram.createAccount({
            fromPubkey: payer.publicKey,
            newAccountPubkey: mintAccount.publicKey,
            lamports: balanceNeeded,
            space: MintLayout.span,
            programId
          }));
          transaction.add(_Token.createInitMintInstruction(programId, mintAccount.publicKey, decimals, mintAuthority, freezeAuthority));
          yield sendAndConfirmTransaction2("createAccount and InitializeMint", connection, transaction, payer, mintAccount);
          return token2;
        });
      }
      /**
       * Create and initialize a new account.
       *
       * This account may then be used as a `transfer()` or `approve()` destination
       *
       * @param owner User account that will own the new account
       * @return Public key of the new empty account
       */
      createAccount(owner) {
        return __async(this, null, function* () {
          const balanceNeeded = yield _Token.getMinBalanceRentForExemptAccount(this.connection);
          const newAccount = Keypair.generate();
          const transaction = new Transaction();
          transaction.add(SystemProgram.createAccount({
            fromPubkey: this.payer.publicKey,
            newAccountPubkey: newAccount.publicKey,
            lamports: balanceNeeded,
            space: AccountLayout.span,
            programId: this.programId
          }));
          const mintPublicKey = this.publicKey;
          transaction.add(_Token.createInitAccountInstruction(this.programId, mintPublicKey, newAccount.publicKey, owner));
          yield sendAndConfirmTransaction2("createAccount and InitializeAccount", this.connection, transaction, this.payer, newAccount);
          return newAccount.publicKey;
        });
      }
      /**
       * Create and initialize the associated account.
       *
       * This account may then be used as a `transfer()` or `approve()` destination
       *
       * @param owner User account that will own the new account
       * @return Public key of the new associated account
       */
      createAssociatedTokenAccount(owner) {
        return __async(this, null, function* () {
          const associatedAddress = yield _Token.getAssociatedTokenAddress(this.associatedProgramId, this.programId, this.publicKey, owner);
          return this.createAssociatedTokenAccountInternal(owner, associatedAddress);
        });
      }
      createAssociatedTokenAccountInternal(owner, associatedAddress) {
        return __async(this, null, function* () {
          yield sendAndConfirmTransaction2("CreateAssociatedTokenAccount", this.connection, new Transaction().add(_Token.createAssociatedTokenAccountInstruction(this.associatedProgramId, this.programId, this.publicKey, associatedAddress, owner, this.payer.publicKey)), this.payer);
          return associatedAddress;
        });
      }
      /**
       * Retrieve the associated account or create one if not found.
       *
       * This account may then be used as a `transfer()` or `approve()` destination
       *
       * @param owner User account that will own the new account
       * @return The new associated account
       */
      getOrCreateAssociatedAccountInfo(owner) {
        return __async(this, null, function* () {
          const associatedAddress = yield _Token.getAssociatedTokenAddress(this.associatedProgramId, this.programId, this.publicKey, owner);
          try {
            return yield this.getAccountInfo(associatedAddress);
          } catch (err) {
            if (err.message === FAILED_TO_FIND_ACCOUNT || err.message === INVALID_ACCOUNT_OWNER) {
              try {
                yield this.createAssociatedTokenAccountInternal(owner, associatedAddress);
              } catch (err2) {
              }
              return yield this.getAccountInfo(associatedAddress);
            } else {
              throw err;
            }
          }
        });
      }
      /**
       * Create and initialize a new account on the special native token mint.
       *
       * In order to be wrapped, the account must have a balance of native tokens
       * when it is initialized with the token program.
       *
       * This function sends lamports to the new account before initializing it.
       *
       * @param connection A solana web3 connection
       * @param programId The token program ID
       * @param owner The owner of the new token account
       * @param payer The source of the lamports to initialize, and payer of the initialization fees.
       * @param amount The amount of lamports to wrap
       * @return {Promise<PublicKey>} The new token account
       */
      static createWrappedNativeAccount(connection, programId, owner, payer, amount2) {
        return __async(this, null, function* () {
          const balanceNeeded = yield _Token.getMinBalanceRentForExemptAccount(connection);
          const newAccount = Keypair.generate();
          const transaction = new Transaction();
          transaction.add(SystemProgram.createAccount({
            fromPubkey: payer.publicKey,
            newAccountPubkey: newAccount.publicKey,
            lamports: balanceNeeded,
            space: AccountLayout.span,
            programId
          }));
          transaction.add(SystemProgram.transfer({
            fromPubkey: payer.publicKey,
            toPubkey: newAccount.publicKey,
            lamports: amount2
          }));
          transaction.add(_Token.createInitAccountInstruction(programId, NATIVE_MINT, newAccount.publicKey, owner));
          yield sendAndConfirmTransaction2("createAccount, transfer, and initializeAccount", connection, transaction, payer, newAccount);
          return newAccount.publicKey;
        });
      }
      /**
       * Create and initialize a new multisig.
       *
       * This account may then be used for multisignature verification
       *
       * @param m Number of required signatures
       * @param signers Full set of signers
       * @return Public key of the new multisig account
       */
      createMultisig(m, signers) {
        return __async(this, null, function* () {
          const multisigAccount = Keypair.generate();
          const balanceNeeded = yield _Token.getMinBalanceRentForExemptMultisig(this.connection);
          const transaction = new Transaction();
          transaction.add(SystemProgram.createAccount({
            fromPubkey: this.payer.publicKey,
            newAccountPubkey: multisigAccount.publicKey,
            lamports: balanceNeeded,
            space: MultisigLayout.span,
            programId: this.programId
          }));
          let keys = [{
            pubkey: multisigAccount.publicKey,
            isSigner: false,
            isWritable: true
          }, {
            pubkey: SYSVAR_RENT_PUBKEY,
            isSigner: false,
            isWritable: false
          }];
          signers.forEach((signer) => keys.push({
            pubkey: signer,
            isSigner: false,
            isWritable: false
          }));
          const dataLayout = struct([u8("instruction"), u8("m")]);
          const data = buffer.Buffer.alloc(dataLayout.span);
          dataLayout.encode({
            instruction: 2,
            // InitializeMultisig instruction
            m
          }, data);
          transaction.add({
            keys,
            programId: this.programId,
            data
          });
          yield sendAndConfirmTransaction2("createAccount and InitializeMultisig", this.connection, transaction, this.payer, multisigAccount);
          return multisigAccount.publicKey;
        });
      }
      /**
       * Retrieve mint information
       */
      getMintInfo() {
        return __async(this, null, function* () {
          const info = yield this.connection.getAccountInfo(this.publicKey);
          if (info === null) {
            throw new Error("Failed to find mint account");
          }
          if (!info.owner.equals(this.programId)) {
            throw new Error(`Invalid mint owner: ${JSON.stringify(info.owner)}`);
          }
          if (info.data.length != MintLayout.span) {
            throw new Error(`Invalid mint size`);
          }
          const data = buffer.Buffer.from(info.data);
          const mintInfo = MintLayout.decode(data);
          if (mintInfo.mintAuthorityOption === 0) {
            mintInfo.mintAuthority = null;
          } else {
            mintInfo.mintAuthority = new PublicKey(mintInfo.mintAuthority);
          }
          mintInfo.supply = u64.fromBuffer(mintInfo.supply);
          mintInfo.isInitialized = mintInfo.isInitialized != 0;
          if (mintInfo.freezeAuthorityOption === 0) {
            mintInfo.freezeAuthority = null;
          } else {
            mintInfo.freezeAuthority = new PublicKey(mintInfo.freezeAuthority);
          }
          return mintInfo;
        });
      }
      /**
       * Retrieve account information
       *
       * @param account Public key of the account
       */
      getAccountInfo(account, commitment) {
        return __async(this, null, function* () {
          const info = yield this.connection.getAccountInfo(account, commitment);
          if (info === null) {
            throw new Error(FAILED_TO_FIND_ACCOUNT);
          }
          if (!info.owner.equals(this.programId)) {
            throw new Error(INVALID_ACCOUNT_OWNER);
          }
          if (info.data.length != AccountLayout.span) {
            throw new Error(`Invalid account size`);
          }
          const data = buffer.Buffer.from(info.data);
          const accountInfo = AccountLayout.decode(data);
          accountInfo.address = account;
          accountInfo.mint = new PublicKey(accountInfo.mint);
          accountInfo.owner = new PublicKey(accountInfo.owner);
          accountInfo.amount = u64.fromBuffer(accountInfo.amount);
          if (accountInfo.delegateOption === 0) {
            accountInfo.delegate = null;
            accountInfo.delegatedAmount = new u64();
          } else {
            accountInfo.delegate = new PublicKey(accountInfo.delegate);
            accountInfo.delegatedAmount = u64.fromBuffer(accountInfo.delegatedAmount);
          }
          accountInfo.isInitialized = accountInfo.state !== 0;
          accountInfo.isFrozen = accountInfo.state === 2;
          if (accountInfo.isNativeOption === 1) {
            accountInfo.rentExemptReserve = u64.fromBuffer(accountInfo.isNative);
            accountInfo.isNative = true;
          } else {
            accountInfo.rentExemptReserve = null;
            accountInfo.isNative = false;
          }
          if (accountInfo.closeAuthorityOption === 0) {
            accountInfo.closeAuthority = null;
          } else {
            accountInfo.closeAuthority = new PublicKey(accountInfo.closeAuthority);
          }
          if (!accountInfo.mint.equals(this.publicKey)) {
            throw new Error(`Invalid account mint: ${JSON.stringify(accountInfo.mint)} !== ${JSON.stringify(this.publicKey)}`);
          }
          return accountInfo;
        });
      }
      /**
       * Retrieve Multisig information
       *
       * @param multisig Public key of the account
       */
      getMultisigInfo(multisig) {
        return __async(this, null, function* () {
          const info = yield this.connection.getAccountInfo(multisig);
          if (info === null) {
            throw new Error("Failed to find multisig");
          }
          if (!info.owner.equals(this.programId)) {
            throw new Error(`Invalid multisig owner`);
          }
          if (info.data.length != MultisigLayout.span) {
            throw new Error(`Invalid multisig size`);
          }
          const data = buffer.Buffer.from(info.data);
          const multisigInfo = MultisigLayout.decode(data);
          multisigInfo.signer1 = new PublicKey(multisigInfo.signer1);
          multisigInfo.signer2 = new PublicKey(multisigInfo.signer2);
          multisigInfo.signer3 = new PublicKey(multisigInfo.signer3);
          multisigInfo.signer4 = new PublicKey(multisigInfo.signer4);
          multisigInfo.signer5 = new PublicKey(multisigInfo.signer5);
          multisigInfo.signer6 = new PublicKey(multisigInfo.signer6);
          multisigInfo.signer7 = new PublicKey(multisigInfo.signer7);
          multisigInfo.signer8 = new PublicKey(multisigInfo.signer8);
          multisigInfo.signer9 = new PublicKey(multisigInfo.signer9);
          multisigInfo.signer10 = new PublicKey(multisigInfo.signer10);
          multisigInfo.signer11 = new PublicKey(multisigInfo.signer11);
          return multisigInfo;
        });
      }
      /**
       * Transfer tokens to another account
       *
       * @param source Source account
       * @param destination Destination account
       * @param owner Owner of the source account
       * @param multiSigners Signing accounts if `owner` is a multiSig
       * @param amount Number of tokens to transfer
       */
      transfer(source, destination, owner, multiSigners, amount2) {
        return __async(this, null, function* () {
          let ownerPublicKey;
          let signers;
          if (isAccount(owner)) {
            ownerPublicKey = owner.publicKey;
            signers = [owner];
          } else {
            ownerPublicKey = owner;
            signers = multiSigners;
          }
          return yield sendAndConfirmTransaction2("Transfer", this.connection, new Transaction().add(_Token.createTransferInstruction(this.programId, source, destination, ownerPublicKey, multiSigners, amount2)), this.payer, ...signers);
        });
      }
      /**
       * Grant a third-party permission to transfer up the specified number of tokens from an account
       *
       * @param account Public key of the account
       * @param delegate Account authorized to perform a transfer tokens from the source account
       * @param owner Owner of the source account
       * @param multiSigners Signing accounts if `owner` is a multiSig
       * @param amount Maximum number of tokens the delegate may transfer
       */
      approve(account, delegate, owner, multiSigners, amount2) {
        return __async(this, null, function* () {
          let ownerPublicKey;
          let signers;
          if (isAccount(owner)) {
            ownerPublicKey = owner.publicKey;
            signers = [owner];
          } else {
            ownerPublicKey = owner;
            signers = multiSigners;
          }
          yield sendAndConfirmTransaction2("Approve", this.connection, new Transaction().add(_Token.createApproveInstruction(this.programId, account, delegate, ownerPublicKey, multiSigners, amount2)), this.payer, ...signers);
        });
      }
      /**
       * Remove approval for the transfer of any remaining tokens
       *
       * @param account Public key of the account
       * @param owner Owner of the source account
       * @param multiSigners Signing accounts if `owner` is a multiSig
       */
      revoke(account, owner, multiSigners) {
        return __async(this, null, function* () {
          let ownerPublicKey;
          let signers;
          if (isAccount(owner)) {
            ownerPublicKey = owner.publicKey;
            signers = [owner];
          } else {
            ownerPublicKey = owner;
            signers = multiSigners;
          }
          yield sendAndConfirmTransaction2("Revoke", this.connection, new Transaction().add(_Token.createRevokeInstruction(this.programId, account, ownerPublicKey, multiSigners)), this.payer, ...signers);
        });
      }
      /**
       * Assign a new authority to the account
       *
       * @param account Public key of the account
       * @param newAuthority New authority of the account
       * @param authorityType Type of authority to set
       * @param currentAuthority Current authority of the account
       * @param multiSigners Signing accounts if `currentAuthority` is a multiSig
       */
      setAuthority(account, newAuthority, authorityType, currentAuthority, multiSigners) {
        return __async(this, null, function* () {
          let currentAuthorityPublicKey;
          let signers;
          if (isAccount(currentAuthority)) {
            currentAuthorityPublicKey = currentAuthority.publicKey;
            signers = [currentAuthority];
          } else {
            currentAuthorityPublicKey = currentAuthority;
            signers = multiSigners;
          }
          yield sendAndConfirmTransaction2("SetAuthority", this.connection, new Transaction().add(_Token.createSetAuthorityInstruction(this.programId, account, newAuthority, authorityType, currentAuthorityPublicKey, multiSigners)), this.payer, ...signers);
        });
      }
      /**
       * Mint new tokens
       *
       * @param dest Public key of the account to mint to
       * @param authority Minting authority
       * @param multiSigners Signing accounts if `authority` is a multiSig
       * @param amount Amount to mint
       */
      mintTo(dest, authority, multiSigners, amount2) {
        return __async(this, null, function* () {
          let ownerPublicKey;
          let signers;
          if (isAccount(authority)) {
            ownerPublicKey = authority.publicKey;
            signers = [authority];
          } else {
            ownerPublicKey = authority;
            signers = multiSigners;
          }
          yield sendAndConfirmTransaction2("MintTo", this.connection, new Transaction().add(_Token.createMintToInstruction(this.programId, this.publicKey, dest, ownerPublicKey, multiSigners, amount2)), this.payer, ...signers);
        });
      }
      /**
       * Burn tokens
       *
       * @param account Account to burn tokens from
       * @param owner Account owner
       * @param multiSigners Signing accounts if `owner` is a multiSig
       * @param amount Amount to burn
       */
      burn(account, owner, multiSigners, amount2) {
        return __async(this, null, function* () {
          let ownerPublicKey;
          let signers;
          if (isAccount(owner)) {
            ownerPublicKey = owner.publicKey;
            signers = [owner];
          } else {
            ownerPublicKey = owner;
            signers = multiSigners;
          }
          yield sendAndConfirmTransaction2("Burn", this.connection, new Transaction().add(_Token.createBurnInstruction(this.programId, this.publicKey, account, ownerPublicKey, multiSigners, amount2)), this.payer, ...signers);
        });
      }
      /**
       * Close account
       *
       * @param account Account to close
       * @param dest Account to receive the remaining balance of the closed account
       * @param authority Authority which is allowed to close the account
       * @param multiSigners Signing accounts if `authority` is a multiSig
       */
      closeAccount(account, dest, authority, multiSigners) {
        return __async(this, null, function* () {
          let authorityPublicKey;
          let signers;
          if (isAccount(authority)) {
            authorityPublicKey = authority.publicKey;
            signers = [authority];
          } else {
            authorityPublicKey = authority;
            signers = multiSigners;
          }
          yield sendAndConfirmTransaction2("CloseAccount", this.connection, new Transaction().add(_Token.createCloseAccountInstruction(this.programId, account, dest, authorityPublicKey, multiSigners)), this.payer, ...signers);
        });
      }
      /**
       * Freeze account
       *
       * @param account Account to freeze
       * @param authority The mint freeze authority
       * @param multiSigners Signing accounts if `authority` is a multiSig
       */
      freezeAccount(account, authority, multiSigners) {
        return __async(this, null, function* () {
          let authorityPublicKey;
          let signers;
          if (isAccount(authority)) {
            authorityPublicKey = authority.publicKey;
            signers = [authority];
          } else {
            authorityPublicKey = authority;
            signers = multiSigners;
          }
          yield sendAndConfirmTransaction2("FreezeAccount", this.connection, new Transaction().add(_Token.createFreezeAccountInstruction(this.programId, account, this.publicKey, authorityPublicKey, multiSigners)), this.payer, ...signers);
        });
      }
      /**
       * Thaw account
       *
       * @param account Account to thaw
       * @param authority The mint freeze authority
       * @param multiSigners Signing accounts if `authority` is a multiSig
       */
      thawAccount(account, authority, multiSigners) {
        return __async(this, null, function* () {
          let authorityPublicKey;
          let signers;
          if (isAccount(authority)) {
            authorityPublicKey = authority.publicKey;
            signers = [authority];
          } else {
            authorityPublicKey = authority;
            signers = multiSigners;
          }
          yield sendAndConfirmTransaction2("ThawAccount", this.connection, new Transaction().add(_Token.createThawAccountInstruction(this.programId, account, this.publicKey, authorityPublicKey, multiSigners)), this.payer, ...signers);
        });
      }
      /**
       * Transfer tokens to another account, asserting the token mint and decimals
       *
       * @param source Source account
       * @param destination Destination account
       * @param owner Owner of the source account
       * @param multiSigners Signing accounts if `owner` is a multiSig
       * @param amount Number of tokens to transfer
       * @param decimals Number of decimals in transfer amount
       */
      transferChecked(source, destination, owner, multiSigners, amount2, decimals) {
        return __async(this, null, function* () {
          let ownerPublicKey;
          let signers;
          if (isAccount(owner)) {
            ownerPublicKey = owner.publicKey;
            signers = [owner];
          } else {
            ownerPublicKey = owner;
            signers = multiSigners;
          }
          return yield sendAndConfirmTransaction2("TransferChecked", this.connection, new Transaction().add(_Token.createTransferCheckedInstruction(this.programId, source, this.publicKey, destination, ownerPublicKey, multiSigners, amount2, decimals)), this.payer, ...signers);
        });
      }
      /**
       * Grant a third-party permission to transfer up the specified number of tokens from an account,
       * asserting the token mint and decimals
       *
       * @param account Public key of the account
       * @param delegate Account authorized to perform a transfer tokens from the source account
       * @param owner Owner of the source account
       * @param multiSigners Signing accounts if `owner` is a multiSig
       * @param amount Maximum number of tokens the delegate may transfer
       * @param decimals Number of decimals in approve amount
       */
      approveChecked(account, delegate, owner, multiSigners, amount2, decimals) {
        return __async(this, null, function* () {
          let ownerPublicKey;
          let signers;
          if (isAccount(owner)) {
            ownerPublicKey = owner.publicKey;
            signers = [owner];
          } else {
            ownerPublicKey = owner;
            signers = multiSigners;
          }
          yield sendAndConfirmTransaction2("ApproveChecked", this.connection, new Transaction().add(_Token.createApproveCheckedInstruction(this.programId, account, this.publicKey, delegate, ownerPublicKey, multiSigners, amount2, decimals)), this.payer, ...signers);
        });
      }
      /**
       * Mint new tokens, asserting the token mint and decimals
       *
       * @param dest Public key of the account to mint to
       * @param authority Minting authority
       * @param multiSigners Signing accounts if `authority` is a multiSig
       * @param amount Amount to mint
       * @param decimals Number of decimals in amount to mint
       */
      mintToChecked(dest, authority, multiSigners, amount2, decimals) {
        return __async(this, null, function* () {
          let ownerPublicKey;
          let signers;
          if (isAccount(authority)) {
            ownerPublicKey = authority.publicKey;
            signers = [authority];
          } else {
            ownerPublicKey = authority;
            signers = multiSigners;
          }
          yield sendAndConfirmTransaction2("MintToChecked", this.connection, new Transaction().add(_Token.createMintToCheckedInstruction(this.programId, this.publicKey, dest, ownerPublicKey, multiSigners, amount2, decimals)), this.payer, ...signers);
        });
      }
      /**
       * Burn tokens, asserting the token mint and decimals
       *
       * @param account Account to burn tokens from
       * @param owner Account owner
       * @param multiSigners Signing accounts if `owner` is a multiSig
       * @param amount Amount to burn
       * @param decimals Number of decimals in amount to burn
       */
      burnChecked(account, owner, multiSigners, amount2, decimals) {
        return __async(this, null, function* () {
          let ownerPublicKey;
          let signers;
          if (isAccount(owner)) {
            ownerPublicKey = owner.publicKey;
            signers = [owner];
          } else {
            ownerPublicKey = owner;
            signers = multiSigners;
          }
          yield sendAndConfirmTransaction2("BurnChecked", this.connection, new Transaction().add(_Token.createBurnCheckedInstruction(this.programId, this.publicKey, account, ownerPublicKey, multiSigners, amount2, decimals)), this.payer, ...signers);
        });
      }
      /**
       * Sync amount in native SPL token account to underlying lamports
       *
       * @param nativeAccount Account to sync
       */
      syncNative(nativeAccount) {
        return __async(this, null, function* () {
          yield sendAndConfirmTransaction2("SyncNative", this.connection, new Transaction().add(_Token.createSyncNativeInstruction(this.programId, nativeAccount)), this.payer);
        });
      }
      /**
       * Construct an InitializeMint instruction
       *
       * @param programId SPL Token program account
       * @param mint Token mint account
       * @param decimals Number of decimals in token account amounts
       * @param mintAuthority Minting authority
       * @param freezeAuthority Optional authority that can freeze token accounts
       */
      static createInitMintInstruction(programId, mint, decimals, mintAuthority, freezeAuthority) {
        let keys = [{
          pubkey: mint,
          isSigner: false,
          isWritable: true
        }, {
          pubkey: SYSVAR_RENT_PUBKEY,
          isSigner: false,
          isWritable: false
        }];
        const commandDataLayout = struct([u8("instruction"), u8("decimals"), publicKey("mintAuthority"), u8("option"), publicKey("freezeAuthority")]);
        let data = buffer.Buffer.alloc(1024);
        {
          const encodeLength = commandDataLayout.encode({
            instruction: 0,
            // InitializeMint instruction
            decimals,
            mintAuthority: pubkeyToBuffer(mintAuthority),
            option: freezeAuthority === null ? 0 : 1,
            freezeAuthority: pubkeyToBuffer(freezeAuthority || new PublicKey(0))
          }, data);
          data = data.slice(0, encodeLength);
        }
        return new TransactionInstruction({
          keys,
          programId,
          data
        });
      }
      /**
       * Construct an InitializeAccount instruction
       *
       * @param programId SPL Token program account
       * @param mint Token mint account
       * @param account New account
       * @param owner Owner of the new account
       */
      static createInitAccountInstruction(programId, mint, account, owner) {
        const keys = [{
          pubkey: account,
          isSigner: false,
          isWritable: true
        }, {
          pubkey: mint,
          isSigner: false,
          isWritable: false
        }, {
          pubkey: owner,
          isSigner: false,
          isWritable: false
        }, {
          pubkey: SYSVAR_RENT_PUBKEY,
          isSigner: false,
          isWritable: false
        }];
        const dataLayout = struct([u8("instruction")]);
        const data = buffer.Buffer.alloc(dataLayout.span);
        dataLayout.encode({
          instruction: 1
          // InitializeAccount instruction
        }, data);
        return new TransactionInstruction({
          keys,
          programId,
          data
        });
      }
      /**
       * Construct a Transfer instruction
       *
       * @param programId SPL Token program account
       * @param source Source account
       * @param destination Destination account
       * @param owner Owner of the source account
       * @param multiSigners Signing accounts if `authority` is a multiSig
       * @param amount Number of tokens to transfer
       */
      static createTransferInstruction(programId, source, destination, owner, multiSigners, amount2) {
        const dataLayout = struct([u8("instruction"), uint64("amount")]);
        const data = buffer.Buffer.alloc(dataLayout.span);
        dataLayout.encode({
          instruction: 3,
          // Transfer instruction
          amount: new u64(amount2).toBuffer()
        }, data);
        let keys = [{
          pubkey: source,
          isSigner: false,
          isWritable: true
        }, {
          pubkey: destination,
          isSigner: false,
          isWritable: true
        }];
        if (multiSigners.length === 0) {
          keys.push({
            pubkey: owner,
            isSigner: true,
            isWritable: false
          });
        } else {
          keys.push({
            pubkey: owner,
            isSigner: false,
            isWritable: false
          });
          multiSigners.forEach((signer) => keys.push({
            pubkey: signer.publicKey,
            isSigner: true,
            isWritable: false
          }));
        }
        return new TransactionInstruction({
          keys,
          programId,
          data
        });
      }
      /**
       * Construct an Approve instruction
       *
       * @param programId SPL Token program account
       * @param account Public key of the account
       * @param delegate Account authorized to perform a transfer of tokens from the source account
       * @param owner Owner of the source account
       * @param multiSigners Signing accounts if `owner` is a multiSig
       * @param amount Maximum number of tokens the delegate may transfer
       */
      static createApproveInstruction(programId, account, delegate, owner, multiSigners, amount2) {
        const dataLayout = struct([u8("instruction"), uint64("amount")]);
        const data = buffer.Buffer.alloc(dataLayout.span);
        dataLayout.encode({
          instruction: 4,
          // Approve instruction
          amount: new u64(amount2).toBuffer()
        }, data);
        let keys = [{
          pubkey: account,
          isSigner: false,
          isWritable: true
        }, {
          pubkey: delegate,
          isSigner: false,
          isWritable: false
        }];
        if (multiSigners.length === 0) {
          keys.push({
            pubkey: owner,
            isSigner: true,
            isWritable: false
          });
        } else {
          keys.push({
            pubkey: owner,
            isSigner: false,
            isWritable: false
          });
          multiSigners.forEach((signer) => keys.push({
            pubkey: signer.publicKey,
            isSigner: true,
            isWritable: false
          }));
        }
        return new TransactionInstruction({
          keys,
          programId,
          data
        });
      }
      /**
       * Construct a Revoke instruction
       *
       * @param programId SPL Token program account
       * @param account Public key of the account
       * @param owner Owner of the source account
       * @param multiSigners Signing accounts if `owner` is a multiSig
       */
      static createRevokeInstruction(programId, account, owner, multiSigners) {
        const dataLayout = struct([u8("instruction")]);
        const data = buffer.Buffer.alloc(dataLayout.span);
        dataLayout.encode({
          instruction: 5
          // Approve instruction
        }, data);
        let keys = [{
          pubkey: account,
          isSigner: false,
          isWritable: true
        }];
        if (multiSigners.length === 0) {
          keys.push({
            pubkey: owner,
            isSigner: true,
            isWritable: false
          });
        } else {
          keys.push({
            pubkey: owner,
            isSigner: false,
            isWritable: false
          });
          multiSigners.forEach((signer) => keys.push({
            pubkey: signer.publicKey,
            isSigner: true,
            isWritable: false
          }));
        }
        return new TransactionInstruction({
          keys,
          programId,
          data
        });
      }
      /**
       * Construct a SetAuthority instruction
       *
       * @param programId SPL Token program account
       * @param account Public key of the account
       * @param newAuthority New authority of the account
       * @param authorityType Type of authority to set
       * @param currentAuthority Current authority of the specified type
       * @param multiSigners Signing accounts if `currentAuthority` is a multiSig
       */
      static createSetAuthorityInstruction(programId, account, newAuthority, authorityType, currentAuthority, multiSigners) {
        const commandDataLayout = struct([u8("instruction"), u8("authorityType"), u8("option"), publicKey("newAuthority")]);
        let data = buffer.Buffer.alloc(1024);
        {
          const encodeLength = commandDataLayout.encode({
            instruction: 6,
            // SetAuthority instruction
            authorityType: AuthorityTypeCodes[authorityType],
            option: newAuthority === null ? 0 : 1,
            newAuthority: pubkeyToBuffer(newAuthority || new PublicKey(0))
          }, data);
          data = data.slice(0, encodeLength);
        }
        let keys = [{
          pubkey: account,
          isSigner: false,
          isWritable: true
        }];
        if (multiSigners.length === 0) {
          keys.push({
            pubkey: currentAuthority,
            isSigner: true,
            isWritable: false
          });
        } else {
          keys.push({
            pubkey: currentAuthority,
            isSigner: false,
            isWritable: false
          });
          multiSigners.forEach((signer) => keys.push({
            pubkey: signer.publicKey,
            isSigner: true,
            isWritable: false
          }));
        }
        return new TransactionInstruction({
          keys,
          programId,
          data
        });
      }
      /**
       * Construct a MintTo instruction
       *
       * @param programId SPL Token program account
       * @param mint Public key of the mint
       * @param dest Public key of the account to mint to
       * @param authority The mint authority
       * @param multiSigners Signing accounts if `authority` is a multiSig
       * @param amount Amount to mint
       */
      static createMintToInstruction(programId, mint, dest, authority, multiSigners, amount2) {
        const dataLayout = struct([u8("instruction"), uint64("amount")]);
        const data = buffer.Buffer.alloc(dataLayout.span);
        dataLayout.encode({
          instruction: 7,
          // MintTo instruction
          amount: new u64(amount2).toBuffer()
        }, data);
        let keys = [{
          pubkey: mint,
          isSigner: false,
          isWritable: true
        }, {
          pubkey: dest,
          isSigner: false,
          isWritable: true
        }];
        if (multiSigners.length === 0) {
          keys.push({
            pubkey: authority,
            isSigner: true,
            isWritable: false
          });
        } else {
          keys.push({
            pubkey: authority,
            isSigner: false,
            isWritable: false
          });
          multiSigners.forEach((signer) => keys.push({
            pubkey: signer.publicKey,
            isSigner: true,
            isWritable: false
          }));
        }
        return new TransactionInstruction({
          keys,
          programId,
          data
        });
      }
      /**
       * Construct a Burn instruction
       *
       * @param programId SPL Token program account
       * @param mint Mint for the account
       * @param account Account to burn tokens from
       * @param owner Owner of the account
       * @param multiSigners Signing accounts if `authority` is a multiSig
       * @param amount amount to burn
       */
      static createBurnInstruction(programId, mint, account, owner, multiSigners, amount2) {
        const dataLayout = struct([u8("instruction"), uint64("amount")]);
        const data = buffer.Buffer.alloc(dataLayout.span);
        dataLayout.encode({
          instruction: 8,
          // Burn instruction
          amount: new u64(amount2).toBuffer()
        }, data);
        let keys = [{
          pubkey: account,
          isSigner: false,
          isWritable: true
        }, {
          pubkey: mint,
          isSigner: false,
          isWritable: true
        }];
        if (multiSigners.length === 0) {
          keys.push({
            pubkey: owner,
            isSigner: true,
            isWritable: false
          });
        } else {
          keys.push({
            pubkey: owner,
            isSigner: false,
            isWritable: false
          });
          multiSigners.forEach((signer) => keys.push({
            pubkey: signer.publicKey,
            isSigner: true,
            isWritable: false
          }));
        }
        return new TransactionInstruction({
          keys,
          programId,
          data
        });
      }
      /**
       * Construct a Close instruction
       *
       * @param programId SPL Token program account
       * @param account Account to close
       * @param dest Account to receive the remaining balance of the closed account
       * @param authority Account Close authority
       * @param multiSigners Signing accounts if `owner` is a multiSig
       */
      static createCloseAccountInstruction(programId, account, dest, owner, multiSigners) {
        const dataLayout = struct([u8("instruction")]);
        const data = buffer.Buffer.alloc(dataLayout.span);
        dataLayout.encode({
          instruction: 9
          // CloseAccount instruction
        }, data);
        let keys = [{
          pubkey: account,
          isSigner: false,
          isWritable: true
        }, {
          pubkey: dest,
          isSigner: false,
          isWritable: true
        }];
        if (multiSigners.length === 0) {
          keys.push({
            pubkey: owner,
            isSigner: true,
            isWritable: false
          });
        } else {
          keys.push({
            pubkey: owner,
            isSigner: false,
            isWritable: false
          });
          multiSigners.forEach((signer) => keys.push({
            pubkey: signer.publicKey,
            isSigner: true,
            isWritable: false
          }));
        }
        return new TransactionInstruction({
          keys,
          programId,
          data
        });
      }
      /**
       * Construct a Freeze instruction
       *
       * @param programId SPL Token program account
       * @param account Account to freeze
       * @param mint Mint account
       * @param authority Mint freeze authority
       * @param multiSigners Signing accounts if `owner` is a multiSig
       */
      static createFreezeAccountInstruction(programId, account, mint, authority, multiSigners) {
        const dataLayout = struct([u8("instruction")]);
        const data = buffer.Buffer.alloc(dataLayout.span);
        dataLayout.encode({
          instruction: 10
          // FreezeAccount instruction
        }, data);
        let keys = [{
          pubkey: account,
          isSigner: false,
          isWritable: true
        }, {
          pubkey: mint,
          isSigner: false,
          isWritable: false
        }];
        if (multiSigners.length === 0) {
          keys.push({
            pubkey: authority,
            isSigner: true,
            isWritable: false
          });
        } else {
          keys.push({
            pubkey: authority,
            isSigner: false,
            isWritable: false
          });
          multiSigners.forEach((signer) => keys.push({
            pubkey: signer.publicKey,
            isSigner: true,
            isWritable: false
          }));
        }
        return new TransactionInstruction({
          keys,
          programId,
          data
        });
      }
      /**
       * Construct a Thaw instruction
       *
       * @param programId SPL Token program account
       * @param account Account to thaw
       * @param mint Mint account
       * @param authority Mint freeze authority
       * @param multiSigners Signing accounts if `owner` is a multiSig
       */
      static createThawAccountInstruction(programId, account, mint, authority, multiSigners) {
        const dataLayout = struct([u8("instruction")]);
        const data = buffer.Buffer.alloc(dataLayout.span);
        dataLayout.encode({
          instruction: 11
          // ThawAccount instruction
        }, data);
        let keys = [{
          pubkey: account,
          isSigner: false,
          isWritable: true
        }, {
          pubkey: mint,
          isSigner: false,
          isWritable: false
        }];
        if (multiSigners.length === 0) {
          keys.push({
            pubkey: authority,
            isSigner: true,
            isWritable: false
          });
        } else {
          keys.push({
            pubkey: authority,
            isSigner: false,
            isWritable: false
          });
          multiSigners.forEach((signer) => keys.push({
            pubkey: signer.publicKey,
            isSigner: true,
            isWritable: false
          }));
        }
        return new TransactionInstruction({
          keys,
          programId,
          data
        });
      }
      /**
       * Construct a TransferChecked instruction
       *
       * @param programId SPL Token program account
       * @param source Source account
       * @param mint Mint account
       * @param destination Destination account
       * @param owner Owner of the source account
       * @param multiSigners Signing accounts if `authority` is a multiSig
       * @param amount Number of tokens to transfer
       * @param decimals Number of decimals in transfer amount
       */
      static createTransferCheckedInstruction(programId, source, mint, destination, owner, multiSigners, amount2, decimals) {
        const dataLayout = struct([u8("instruction"), uint64("amount"), u8("decimals")]);
        const data = buffer.Buffer.alloc(dataLayout.span);
        dataLayout.encode({
          instruction: 12,
          // TransferChecked instruction
          amount: new u64(amount2).toBuffer(),
          decimals
        }, data);
        let keys = [{
          pubkey: source,
          isSigner: false,
          isWritable: true
        }, {
          pubkey: mint,
          isSigner: false,
          isWritable: false
        }, {
          pubkey: destination,
          isSigner: false,
          isWritable: true
        }];
        if (multiSigners.length === 0) {
          keys.push({
            pubkey: owner,
            isSigner: true,
            isWritable: false
          });
        } else {
          keys.push({
            pubkey: owner,
            isSigner: false,
            isWritable: false
          });
          multiSigners.forEach((signer) => keys.push({
            pubkey: signer.publicKey,
            isSigner: true,
            isWritable: false
          }));
        }
        return new TransactionInstruction({
          keys,
          programId,
          data
        });
      }
      /**
       * Construct an ApproveChecked instruction
       *
       * @param programId SPL Token program account
       * @param account Public key of the account
       * @param mint Mint account
       * @param delegate Account authorized to perform a transfer of tokens from the source account
       * @param owner Owner of the source account
       * @param multiSigners Signing accounts if `owner` is a multiSig
       * @param amount Maximum number of tokens the delegate may transfer
       * @param decimals Number of decimals in approve amount
       */
      static createApproveCheckedInstruction(programId, account, mint, delegate, owner, multiSigners, amount2, decimals) {
        const dataLayout = struct([u8("instruction"), uint64("amount"), u8("decimals")]);
        const data = buffer.Buffer.alloc(dataLayout.span);
        dataLayout.encode({
          instruction: 13,
          // ApproveChecked instruction
          amount: new u64(amount2).toBuffer(),
          decimals
        }, data);
        let keys = [{
          pubkey: account,
          isSigner: false,
          isWritable: true
        }, {
          pubkey: mint,
          isSigner: false,
          isWritable: false
        }, {
          pubkey: delegate,
          isSigner: false,
          isWritable: false
        }];
        if (multiSigners.length === 0) {
          keys.push({
            pubkey: owner,
            isSigner: true,
            isWritable: false
          });
        } else {
          keys.push({
            pubkey: owner,
            isSigner: false,
            isWritable: false
          });
          multiSigners.forEach((signer) => keys.push({
            pubkey: signer.publicKey,
            isSigner: true,
            isWritable: false
          }));
        }
        return new TransactionInstruction({
          keys,
          programId,
          data
        });
      }
      /**
       * Construct a MintToChecked instruction
       *
       * @param programId SPL Token program account
       * @param mint Public key of the mint
       * @param dest Public key of the account to mint to
       * @param authority The mint authority
       * @param multiSigners Signing accounts if `authority` is a multiSig
       * @param amount Amount to mint
       * @param decimals Number of decimals in amount to mint
       */
      static createMintToCheckedInstruction(programId, mint, dest, authority, multiSigners, amount2, decimals) {
        const dataLayout = struct([u8("instruction"), uint64("amount"), u8("decimals")]);
        const data = buffer.Buffer.alloc(dataLayout.span);
        dataLayout.encode({
          instruction: 14,
          // MintToChecked instruction
          amount: new u64(amount2).toBuffer(),
          decimals
        }, data);
        let keys = [{
          pubkey: mint,
          isSigner: false,
          isWritable: true
        }, {
          pubkey: dest,
          isSigner: false,
          isWritable: true
        }];
        if (multiSigners.length === 0) {
          keys.push({
            pubkey: authority,
            isSigner: true,
            isWritable: false
          });
        } else {
          keys.push({
            pubkey: authority,
            isSigner: false,
            isWritable: false
          });
          multiSigners.forEach((signer) => keys.push({
            pubkey: signer.publicKey,
            isSigner: true,
            isWritable: false
          }));
        }
        return new TransactionInstruction({
          keys,
          programId,
          data
        });
      }
      /**
       * Construct a BurnChecked instruction
       *
       * @param programId SPL Token program account
       * @param mint Mint for the account
       * @param account Account to burn tokens from
       * @param owner Owner of the account
       * @param multiSigners Signing accounts if `authority` is a multiSig
       * @param amount amount to burn
       */
      static createBurnCheckedInstruction(programId, mint, account, owner, multiSigners, amount2, decimals) {
        const dataLayout = struct([u8("instruction"), uint64("amount"), u8("decimals")]);
        const data = buffer.Buffer.alloc(dataLayout.span);
        dataLayout.encode({
          instruction: 15,
          // BurnChecked instruction
          amount: new u64(amount2).toBuffer(),
          decimals
        }, data);
        let keys = [{
          pubkey: account,
          isSigner: false,
          isWritable: true
        }, {
          pubkey: mint,
          isSigner: false,
          isWritable: true
        }];
        if (multiSigners.length === 0) {
          keys.push({
            pubkey: owner,
            isSigner: true,
            isWritable: false
          });
        } else {
          keys.push({
            pubkey: owner,
            isSigner: false,
            isWritable: false
          });
          multiSigners.forEach((signer) => keys.push({
            pubkey: signer.publicKey,
            isSigner: true,
            isWritable: false
          }));
        }
        return new TransactionInstruction({
          keys,
          programId,
          data
        });
      }
      /**
       * Construct a SyncNative instruction
       *
       * @param programId SPL Token program account
       * @param nativeAccount Account to sync lamports from
       */
      static createSyncNativeInstruction(programId, nativeAccount) {
        const dataLayout = struct([u8("instruction")]);
        const data = buffer.Buffer.alloc(dataLayout.span);
        dataLayout.encode({
          instruction: 17
          // SyncNative instruction
        }, data);
        let keys = [{
          pubkey: nativeAccount,
          isSigner: false,
          isWritable: true
        }];
        return new TransactionInstruction({
          keys,
          programId,
          data
        });
      }
      /**
       * Get the address for the associated token account
       *
       * @param associatedProgramId SPL Associated Token program account
       * @param programId SPL Token program account
       * @param mint Token mint account
       * @param owner Owner of the new account
       * @return Public key of the associated token account
       */
      static getAssociatedTokenAddress(associatedProgramId, programId, mint, owner, allowOwnerOffCurve = false) {
        return __async(this, null, function* () {
          if (!allowOwnerOffCurve && !PublicKey.isOnCurve(owner.toBuffer())) {
            throw new Error(`Owner cannot sign: ${owner.toString()}`);
          }
          return (yield PublicKey.findProgramAddress([owner.toBuffer(), programId.toBuffer(), mint.toBuffer()], associatedProgramId))[0];
        });
      }
      /**
       * Construct the AssociatedTokenProgram instruction to create the associated
       * token account
       *
       * @param associatedProgramId SPL Associated Token program account
       * @param programId SPL Token program account
       * @param mint Token mint account
       * @param associatedAccount New associated account
       * @param owner Owner of the new account
       * @param payer Payer of fees
       */
      static createAssociatedTokenAccountInstruction(associatedProgramId, programId, mint, associatedAccount, owner, payer) {
        const data = buffer.Buffer.alloc(0);
        let keys = [{
          pubkey: payer,
          isSigner: true,
          isWritable: true
        }, {
          pubkey: associatedAccount,
          isSigner: false,
          isWritable: true
        }, {
          pubkey: owner,
          isSigner: false,
          isWritable: false
        }, {
          pubkey: mint,
          isSigner: false,
          isWritable: false
        }, {
          pubkey: SystemProgram.programId,
          isSigner: false,
          isWritable: false
        }, {
          pubkey: programId,
          isSigner: false,
          isWritable: false
        }, {
          pubkey: SYSVAR_RENT_PUBKEY,
          isSigner: false,
          isWritable: false
        }];
        return new TransactionInstruction({
          keys,
          programId: associatedProgramId,
          data
        });
      }
    };
  }
});

// ../../node_modules/@metaplex-foundation/mpl-bubblegum/dist/src/generated/instructions/compress.js
var require_compress = __commonJS({
  "../../node_modules/@metaplex-foundation/mpl-bubblegum/dist/src/generated/instructions/compress.js"(exports) {
    "use strict";
    var __createBinding = exports && exports.__createBinding || (Object.create ? function(o2, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      var desc = Object.getOwnPropertyDescriptor(m, k);
      if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m[k];
        } };
      }
      Object.defineProperty(o2, k2, desc);
    } : function(o2, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      o2[k2] = m[k];
    });
    var __setModuleDefault = exports && exports.__setModuleDefault || (Object.create ? function(o2, v) {
      Object.defineProperty(o2, "default", { enumerable: true, value: v });
    } : function(o2, v) {
      o2["default"] = v;
    });
    var __importStar = exports && exports.__importStar || function(mod) {
      if (mod && mod.__esModule)
        return mod;
      var result = {};
      if (mod != null) {
        for (var k in mod)
          if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k))
            __createBinding(result, mod, k);
      }
      __setModuleDefault(result, mod);
      return result;
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.createCompressInstruction = exports.compressInstructionDiscriminator = exports.compressStruct = void 0;
    var splToken = __importStar((init_index_browser_esm2(), __toCommonJS(index_browser_esm_exports2)));
    var beet9 = __importStar(require_beet());
    var web3 = __importStar((init_index_browser_esm(), __toCommonJS(index_browser_esm_exports)));
    exports.compressStruct = new beet9.BeetArgsStruct([["instructionDiscriminator", beet9.uniformFixedSizeArray(beet9.u8, 8)]], "CompressInstructionArgs");
    exports.compressInstructionDiscriminator = [82, 193, 176, 117, 176, 21, 115, 253];
    function createCompressInstruction(accounts, programId = new web3.PublicKey("BGUMAp9Gq7iTEuizy4pqaxsTyUCBK68MDfK752saRPUY")) {
      var _a, _b;
      const [data] = exports.compressStruct.serialize({
        instructionDiscriminator: exports.compressInstructionDiscriminator
      });
      const keys = [
        {
          pubkey: accounts.treeAuthority,
          isWritable: false,
          isSigner: false
        },
        {
          pubkey: accounts.leafOwner,
          isWritable: false,
          isSigner: true
        },
        {
          pubkey: accounts.leafDelegate,
          isWritable: false,
          isSigner: false
        },
        {
          pubkey: accounts.merkleTree,
          isWritable: false,
          isSigner: false
        },
        {
          pubkey: accounts.tokenAccount,
          isWritable: true,
          isSigner: false
        },
        {
          pubkey: accounts.mint,
          isWritable: true,
          isSigner: false
        },
        {
          pubkey: accounts.metadata,
          isWritable: true,
          isSigner: false
        },
        {
          pubkey: accounts.masterEdition,
          isWritable: true,
          isSigner: false
        },
        {
          pubkey: accounts.payer,
          isWritable: true,
          isSigner: true
        },
        {
          pubkey: accounts.logWrapper,
          isWritable: false,
          isSigner: false
        },
        {
          pubkey: accounts.compressionProgram,
          isWritable: false,
          isSigner: false
        },
        {
          pubkey: (_a = accounts.tokenProgram) !== null && _a !== void 0 ? _a : splToken.TOKEN_PROGRAM_ID,
          isWritable: false,
          isSigner: false
        },
        {
          pubkey: accounts.tokenMetadataProgram,
          isWritable: false,
          isSigner: false
        },
        {
          pubkey: (_b = accounts.systemProgram) !== null && _b !== void 0 ? _b : web3.SystemProgram.programId,
          isWritable: false,
          isSigner: false
        }
      ];
      if (accounts.anchorRemainingAccounts != null) {
        for (const acc of accounts.anchorRemainingAccounts) {
          keys.push(acc);
        }
      }
      const ix = new web3.TransactionInstruction({
        programId,
        keys,
        data
      });
      return ix;
    }
    exports.createCompressInstruction = createCompressInstruction;
  }
});

// ../../node_modules/@metaplex-foundation/mpl-bubblegum/dist/src/generated/instructions/createTree.js
var require_createTree = __commonJS({
  "../../node_modules/@metaplex-foundation/mpl-bubblegum/dist/src/generated/instructions/createTree.js"(exports) {
    "use strict";
    var __createBinding = exports && exports.__createBinding || (Object.create ? function(o2, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      var desc = Object.getOwnPropertyDescriptor(m, k);
      if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m[k];
        } };
      }
      Object.defineProperty(o2, k2, desc);
    } : function(o2, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      o2[k2] = m[k];
    });
    var __setModuleDefault = exports && exports.__setModuleDefault || (Object.create ? function(o2, v) {
      Object.defineProperty(o2, "default", { enumerable: true, value: v });
    } : function(o2, v) {
      o2["default"] = v;
    });
    var __importStar = exports && exports.__importStar || function(mod) {
      if (mod && mod.__esModule)
        return mod;
      var result = {};
      if (mod != null) {
        for (var k in mod)
          if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k))
            __createBinding(result, mod, k);
      }
      __setModuleDefault(result, mod);
      return result;
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.createCreateTreeInstruction = exports.createTreeInstructionDiscriminator = exports.createTreeStruct = void 0;
    var beet9 = __importStar(require_beet());
    var web3 = __importStar((init_index_browser_esm(), __toCommonJS(index_browser_esm_exports)));
    exports.createTreeStruct = new beet9.FixableBeetArgsStruct([
      ["instructionDiscriminator", beet9.uniformFixedSizeArray(beet9.u8, 8)],
      ["maxDepth", beet9.u32],
      ["maxBufferSize", beet9.u32],
      ["public", beet9.coption(beet9.bool)]
    ], "CreateTreeInstructionArgs");
    exports.createTreeInstructionDiscriminator = [165, 83, 136, 142, 89, 202, 47, 220];
    function createCreateTreeInstruction(accounts, args, programId = new web3.PublicKey("BGUMAp9Gq7iTEuizy4pqaxsTyUCBK68MDfK752saRPUY")) {
      var _a;
      const [data] = exports.createTreeStruct.serialize(__spreadValues({
        instructionDiscriminator: exports.createTreeInstructionDiscriminator
      }, args));
      const keys = [
        {
          pubkey: accounts.treeAuthority,
          isWritable: true,
          isSigner: false
        },
        {
          pubkey: accounts.merkleTree,
          isWritable: true,
          isSigner: false
        },
        {
          pubkey: accounts.payer,
          isWritable: true,
          isSigner: true
        },
        {
          pubkey: accounts.treeCreator,
          isWritable: false,
          isSigner: true
        },
        {
          pubkey: accounts.logWrapper,
          isWritable: false,
          isSigner: false
        },
        {
          pubkey: accounts.compressionProgram,
          isWritable: false,
          isSigner: false
        },
        {
          pubkey: (_a = accounts.systemProgram) !== null && _a !== void 0 ? _a : web3.SystemProgram.programId,
          isWritable: false,
          isSigner: false
        }
      ];
      if (accounts.anchorRemainingAccounts != null) {
        for (const acc of accounts.anchorRemainingAccounts) {
          keys.push(acc);
        }
      }
      const ix = new web3.TransactionInstruction({
        programId,
        keys,
        data
      });
      return ix;
    }
    exports.createCreateTreeInstruction = createCreateTreeInstruction;
  }
});

// ../../node_modules/@metaplex-foundation/mpl-bubblegum/dist/src/generated/types/TokenStandard.js
var require_TokenStandard2 = __commonJS({
  "../../node_modules/@metaplex-foundation/mpl-bubblegum/dist/src/generated/types/TokenStandard.js"(exports) {
    "use strict";
    var __createBinding = exports && exports.__createBinding || (Object.create ? function(o2, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      var desc = Object.getOwnPropertyDescriptor(m, k);
      if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m[k];
        } };
      }
      Object.defineProperty(o2, k2, desc);
    } : function(o2, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      o2[k2] = m[k];
    });
    var __setModuleDefault = exports && exports.__setModuleDefault || (Object.create ? function(o2, v) {
      Object.defineProperty(o2, "default", { enumerable: true, value: v });
    } : function(o2, v) {
      o2["default"] = v;
    });
    var __importStar = exports && exports.__importStar || function(mod) {
      if (mod && mod.__esModule)
        return mod;
      var result = {};
      if (mod != null) {
        for (var k in mod)
          if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k))
            __createBinding(result, mod, k);
      }
      __setModuleDefault(result, mod);
      return result;
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.tokenStandardBeet = exports.TokenStandard = void 0;
    var beet9 = __importStar(require_beet());
    var TokenStandard6;
    (function(TokenStandard7) {
      TokenStandard7[TokenStandard7["NonFungible"] = 0] = "NonFungible";
      TokenStandard7[TokenStandard7["FungibleAsset"] = 1] = "FungibleAsset";
      TokenStandard7[TokenStandard7["Fungible"] = 2] = "Fungible";
      TokenStandard7[TokenStandard7["NonFungibleEdition"] = 3] = "NonFungibleEdition";
    })(TokenStandard6 = exports.TokenStandard || (exports.TokenStandard = {}));
    exports.tokenStandardBeet = beet9.fixedScalarEnum(TokenStandard6);
  }
});

// ../../node_modules/@metaplex-foundation/mpl-bubblegum/dist/src/generated/types/Collection.js
var require_Collection2 = __commonJS({
  "../../node_modules/@metaplex-foundation/mpl-bubblegum/dist/src/generated/types/Collection.js"(exports) {
    "use strict";
    var __createBinding = exports && exports.__createBinding || (Object.create ? function(o2, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      var desc = Object.getOwnPropertyDescriptor(m, k);
      if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m[k];
        } };
      }
      Object.defineProperty(o2, k2, desc);
    } : function(o2, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      o2[k2] = m[k];
    });
    var __setModuleDefault = exports && exports.__setModuleDefault || (Object.create ? function(o2, v) {
      Object.defineProperty(o2, "default", { enumerable: true, value: v });
    } : function(o2, v) {
      o2["default"] = v;
    });
    var __importStar = exports && exports.__importStar || function(mod) {
      if (mod && mod.__esModule)
        return mod;
      var result = {};
      if (mod != null) {
        for (var k in mod)
          if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k))
            __createBinding(result, mod, k);
      }
      __setModuleDefault(result, mod);
      return result;
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.collectionBeet = void 0;
    var beet9 = __importStar(require_beet());
    var beetSolana = __importStar(require_beet_solana2());
    exports.collectionBeet = new beet9.BeetArgsStruct([
      ["verified", beet9.bool],
      ["key", beetSolana.publicKey]
    ], "Collection");
  }
});

// ../../node_modules/@metaplex-foundation/mpl-bubblegum/dist/src/generated/types/UseMethod.js
var require_UseMethod2 = __commonJS({
  "../../node_modules/@metaplex-foundation/mpl-bubblegum/dist/src/generated/types/UseMethod.js"(exports) {
    "use strict";
    var __createBinding = exports && exports.__createBinding || (Object.create ? function(o2, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      var desc = Object.getOwnPropertyDescriptor(m, k);
      if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m[k];
        } };
      }
      Object.defineProperty(o2, k2, desc);
    } : function(o2, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      o2[k2] = m[k];
    });
    var __setModuleDefault = exports && exports.__setModuleDefault || (Object.create ? function(o2, v) {
      Object.defineProperty(o2, "default", { enumerable: true, value: v });
    } : function(o2, v) {
      o2["default"] = v;
    });
    var __importStar = exports && exports.__importStar || function(mod) {
      if (mod && mod.__esModule)
        return mod;
      var result = {};
      if (mod != null) {
        for (var k in mod)
          if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k))
            __createBinding(result, mod, k);
      }
      __setModuleDefault(result, mod);
      return result;
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.useMethodBeet = exports.UseMethod = void 0;
    var beet9 = __importStar(require_beet());
    var UseMethod;
    (function(UseMethod2) {
      UseMethod2[UseMethod2["Burn"] = 0] = "Burn";
      UseMethod2[UseMethod2["Multiple"] = 1] = "Multiple";
      UseMethod2[UseMethod2["Single"] = 2] = "Single";
    })(UseMethod = exports.UseMethod || (exports.UseMethod = {}));
    exports.useMethodBeet = beet9.fixedScalarEnum(UseMethod);
  }
});

// ../../node_modules/@metaplex-foundation/mpl-bubblegum/dist/src/generated/types/Uses.js
var require_Uses2 = __commonJS({
  "../../node_modules/@metaplex-foundation/mpl-bubblegum/dist/src/generated/types/Uses.js"(exports) {
    "use strict";
    var __createBinding = exports && exports.__createBinding || (Object.create ? function(o2, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      var desc = Object.getOwnPropertyDescriptor(m, k);
      if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m[k];
        } };
      }
      Object.defineProperty(o2, k2, desc);
    } : function(o2, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      o2[k2] = m[k];
    });
    var __setModuleDefault = exports && exports.__setModuleDefault || (Object.create ? function(o2, v) {
      Object.defineProperty(o2, "default", { enumerable: true, value: v });
    } : function(o2, v) {
      o2["default"] = v;
    });
    var __importStar = exports && exports.__importStar || function(mod) {
      if (mod && mod.__esModule)
        return mod;
      var result = {};
      if (mod != null) {
        for (var k in mod)
          if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k))
            __createBinding(result, mod, k);
      }
      __setModuleDefault(result, mod);
      return result;
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.usesBeet = void 0;
    var beet9 = __importStar(require_beet());
    var UseMethod_1 = require_UseMethod2();
    exports.usesBeet = new beet9.BeetArgsStruct([
      ["useMethod", UseMethod_1.useMethodBeet],
      ["remaining", beet9.u64],
      ["total", beet9.u64]
    ], "Uses");
  }
});

// ../../node_modules/@metaplex-foundation/mpl-bubblegum/dist/src/generated/types/TokenProgramVersion.js
var require_TokenProgramVersion = __commonJS({
  "../../node_modules/@metaplex-foundation/mpl-bubblegum/dist/src/generated/types/TokenProgramVersion.js"(exports) {
    "use strict";
    var __createBinding = exports && exports.__createBinding || (Object.create ? function(o2, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      var desc = Object.getOwnPropertyDescriptor(m, k);
      if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m[k];
        } };
      }
      Object.defineProperty(o2, k2, desc);
    } : function(o2, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      o2[k2] = m[k];
    });
    var __setModuleDefault = exports && exports.__setModuleDefault || (Object.create ? function(o2, v) {
      Object.defineProperty(o2, "default", { enumerable: true, value: v });
    } : function(o2, v) {
      o2["default"] = v;
    });
    var __importStar = exports && exports.__importStar || function(mod) {
      if (mod && mod.__esModule)
        return mod;
      var result = {};
      if (mod != null) {
        for (var k in mod)
          if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k))
            __createBinding(result, mod, k);
      }
      __setModuleDefault(result, mod);
      return result;
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.tokenProgramVersionBeet = exports.TokenProgramVersion = void 0;
    var beet9 = __importStar(require_beet());
    var TokenProgramVersion2;
    (function(TokenProgramVersion3) {
      TokenProgramVersion3[TokenProgramVersion3["Original"] = 0] = "Original";
      TokenProgramVersion3[TokenProgramVersion3["Token2022"] = 1] = "Token2022";
    })(TokenProgramVersion2 = exports.TokenProgramVersion || (exports.TokenProgramVersion = {}));
    exports.tokenProgramVersionBeet = beet9.fixedScalarEnum(TokenProgramVersion2);
  }
});

// ../../node_modules/@metaplex-foundation/mpl-bubblegum/dist/src/generated/types/Creator.js
var require_Creator2 = __commonJS({
  "../../node_modules/@metaplex-foundation/mpl-bubblegum/dist/src/generated/types/Creator.js"(exports) {
    "use strict";
    var __createBinding = exports && exports.__createBinding || (Object.create ? function(o2, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      var desc = Object.getOwnPropertyDescriptor(m, k);
      if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m[k];
        } };
      }
      Object.defineProperty(o2, k2, desc);
    } : function(o2, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      o2[k2] = m[k];
    });
    var __setModuleDefault = exports && exports.__setModuleDefault || (Object.create ? function(o2, v) {
      Object.defineProperty(o2, "default", { enumerable: true, value: v });
    } : function(o2, v) {
      o2["default"] = v;
    });
    var __importStar = exports && exports.__importStar || function(mod) {
      if (mod && mod.__esModule)
        return mod;
      var result = {};
      if (mod != null) {
        for (var k in mod)
          if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k))
            __createBinding(result, mod, k);
      }
      __setModuleDefault(result, mod);
      return result;
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.creatorBeet = void 0;
    var beetSolana = __importStar(require_beet_solana2());
    var beet9 = __importStar(require_beet());
    exports.creatorBeet = new beet9.BeetArgsStruct([
      ["address", beetSolana.publicKey],
      ["verified", beet9.bool],
      ["share", beet9.u8]
    ], "Creator");
  }
});

// ../../node_modules/@metaplex-foundation/mpl-bubblegum/dist/src/generated/types/MetadataArgs.js
var require_MetadataArgs = __commonJS({
  "../../node_modules/@metaplex-foundation/mpl-bubblegum/dist/src/generated/types/MetadataArgs.js"(exports) {
    "use strict";
    var __createBinding = exports && exports.__createBinding || (Object.create ? function(o2, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      var desc = Object.getOwnPropertyDescriptor(m, k);
      if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m[k];
        } };
      }
      Object.defineProperty(o2, k2, desc);
    } : function(o2, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      o2[k2] = m[k];
    });
    var __setModuleDefault = exports && exports.__setModuleDefault || (Object.create ? function(o2, v) {
      Object.defineProperty(o2, "default", { enumerable: true, value: v });
    } : function(o2, v) {
      o2["default"] = v;
    });
    var __importStar = exports && exports.__importStar || function(mod) {
      if (mod && mod.__esModule)
        return mod;
      var result = {};
      if (mod != null) {
        for (var k in mod)
          if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k))
            __createBinding(result, mod, k);
      }
      __setModuleDefault(result, mod);
      return result;
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.metadataArgsBeet = void 0;
    var beet9 = __importStar(require_beet());
    var TokenStandard_1 = require_TokenStandard2();
    var Collection_1 = require_Collection2();
    var Uses_1 = require_Uses2();
    var TokenProgramVersion_1 = require_TokenProgramVersion();
    var Creator_1 = require_Creator2();
    exports.metadataArgsBeet = new beet9.FixableBeetArgsStruct([
      ["name", beet9.utf8String],
      ["symbol", beet9.utf8String],
      ["uri", beet9.utf8String],
      ["sellerFeeBasisPoints", beet9.u16],
      ["primarySaleHappened", beet9.bool],
      ["isMutable", beet9.bool],
      ["editionNonce", beet9.coption(beet9.u8)],
      ["tokenStandard", beet9.coption(TokenStandard_1.tokenStandardBeet)],
      ["collection", beet9.coption(Collection_1.collectionBeet)],
      ["uses", beet9.coption(Uses_1.usesBeet)],
      ["tokenProgramVersion", TokenProgramVersion_1.tokenProgramVersionBeet],
      ["creators", beet9.array(Creator_1.creatorBeet)]
    ], "MetadataArgs");
  }
});

// ../../node_modules/@metaplex-foundation/mpl-bubblegum/dist/src/generated/instructions/decompressV1.js
var require_decompressV1 = __commonJS({
  "../../node_modules/@metaplex-foundation/mpl-bubblegum/dist/src/generated/instructions/decompressV1.js"(exports) {
    "use strict";
    var __createBinding = exports && exports.__createBinding || (Object.create ? function(o2, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      var desc = Object.getOwnPropertyDescriptor(m, k);
      if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m[k];
        } };
      }
      Object.defineProperty(o2, k2, desc);
    } : function(o2, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      o2[k2] = m[k];
    });
    var __setModuleDefault = exports && exports.__setModuleDefault || (Object.create ? function(o2, v) {
      Object.defineProperty(o2, "default", { enumerable: true, value: v });
    } : function(o2, v) {
      o2["default"] = v;
    });
    var __importStar = exports && exports.__importStar || function(mod) {
      if (mod && mod.__esModule)
        return mod;
      var result = {};
      if (mod != null) {
        for (var k in mod)
          if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k))
            __createBinding(result, mod, k);
      }
      __setModuleDefault(result, mod);
      return result;
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.createDecompressV1Instruction = exports.decompressV1InstructionDiscriminator = exports.decompressV1Struct = void 0;
    var splToken = __importStar((init_index_browser_esm2(), __toCommonJS(index_browser_esm_exports2)));
    var beet9 = __importStar(require_beet());
    var web3 = __importStar((init_index_browser_esm(), __toCommonJS(index_browser_esm_exports)));
    var MetadataArgs_1 = require_MetadataArgs();
    exports.decompressV1Struct = new beet9.FixableBeetArgsStruct([
      ["instructionDiscriminator", beet9.uniformFixedSizeArray(beet9.u8, 8)],
      ["metadata", MetadataArgs_1.metadataArgsBeet]
    ], "DecompressV1InstructionArgs");
    exports.decompressV1InstructionDiscriminator = [54, 85, 76, 70, 228, 250, 164, 81];
    function createDecompressV1Instruction(accounts, args, programId = new web3.PublicKey("BGUMAp9Gq7iTEuizy4pqaxsTyUCBK68MDfK752saRPUY")) {
      var _a, _b;
      const [data] = exports.decompressV1Struct.serialize(__spreadValues({
        instructionDiscriminator: exports.decompressV1InstructionDiscriminator
      }, args));
      const keys = [
        {
          pubkey: accounts.voucher,
          isWritable: true,
          isSigner: false
        },
        {
          pubkey: accounts.leafOwner,
          isWritable: true,
          isSigner: true
        },
        {
          pubkey: accounts.tokenAccount,
          isWritable: true,
          isSigner: false
        },
        {
          pubkey: accounts.mint,
          isWritable: true,
          isSigner: false
        },
        {
          pubkey: accounts.mintAuthority,
          isWritable: true,
          isSigner: false
        },
        {
          pubkey: accounts.metadata,
          isWritable: true,
          isSigner: false
        },
        {
          pubkey: accounts.masterEdition,
          isWritable: true,
          isSigner: false
        },
        {
          pubkey: (_a = accounts.systemProgram) !== null && _a !== void 0 ? _a : web3.SystemProgram.programId,
          isWritable: false,
          isSigner: false
        },
        {
          pubkey: accounts.sysvarRent,
          isWritable: false,
          isSigner: false
        },
        {
          pubkey: accounts.tokenMetadataProgram,
          isWritable: false,
          isSigner: false
        },
        {
          pubkey: (_b = accounts.tokenProgram) !== null && _b !== void 0 ? _b : splToken.TOKEN_PROGRAM_ID,
          isWritable: false,
          isSigner: false
        },
        {
          pubkey: accounts.associatedTokenProgram,
          isWritable: false,
          isSigner: false
        },
        {
          pubkey: accounts.logWrapper,
          isWritable: false,
          isSigner: false
        }
      ];
      if (accounts.anchorRemainingAccounts != null) {
        for (const acc of accounts.anchorRemainingAccounts) {
          keys.push(acc);
        }
      }
      const ix = new web3.TransactionInstruction({
        programId,
        keys,
        data
      });
      return ix;
    }
    exports.createDecompressV1Instruction = createDecompressV1Instruction;
  }
});

// ../../node_modules/@metaplex-foundation/mpl-bubblegum/dist/src/generated/instructions/delegate.js
var require_delegate = __commonJS({
  "../../node_modules/@metaplex-foundation/mpl-bubblegum/dist/src/generated/instructions/delegate.js"(exports) {
    "use strict";
    var __createBinding = exports && exports.__createBinding || (Object.create ? function(o2, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      var desc = Object.getOwnPropertyDescriptor(m, k);
      if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m[k];
        } };
      }
      Object.defineProperty(o2, k2, desc);
    } : function(o2, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      o2[k2] = m[k];
    });
    var __setModuleDefault = exports && exports.__setModuleDefault || (Object.create ? function(o2, v) {
      Object.defineProperty(o2, "default", { enumerable: true, value: v });
    } : function(o2, v) {
      o2["default"] = v;
    });
    var __importStar = exports && exports.__importStar || function(mod) {
      if (mod && mod.__esModule)
        return mod;
      var result = {};
      if (mod != null) {
        for (var k in mod)
          if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k))
            __createBinding(result, mod, k);
      }
      __setModuleDefault(result, mod);
      return result;
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.createDelegateInstruction = exports.delegateInstructionDiscriminator = exports.delegateStruct = void 0;
    var beet9 = __importStar(require_beet());
    var web3 = __importStar((init_index_browser_esm(), __toCommonJS(index_browser_esm_exports)));
    exports.delegateStruct = new beet9.BeetArgsStruct([
      ["instructionDiscriminator", beet9.uniformFixedSizeArray(beet9.u8, 8)],
      ["root", beet9.uniformFixedSizeArray(beet9.u8, 32)],
      ["dataHash", beet9.uniformFixedSizeArray(beet9.u8, 32)],
      ["creatorHash", beet9.uniformFixedSizeArray(beet9.u8, 32)],
      ["nonce", beet9.u64],
      ["index", beet9.u32]
    ], "DelegateInstructionArgs");
    exports.delegateInstructionDiscriminator = [90, 147, 75, 178, 85, 88, 4, 137];
    function createDelegateInstruction2(accounts, args, programId = new web3.PublicKey("BGUMAp9Gq7iTEuizy4pqaxsTyUCBK68MDfK752saRPUY")) {
      var _a;
      const [data] = exports.delegateStruct.serialize(__spreadValues({
        instructionDiscriminator: exports.delegateInstructionDiscriminator
      }, args));
      const keys = [
        {
          pubkey: accounts.treeAuthority,
          isWritable: false,
          isSigner: false
        },
        {
          pubkey: accounts.leafOwner,
          isWritable: false,
          isSigner: true
        },
        {
          pubkey: accounts.previousLeafDelegate,
          isWritable: false,
          isSigner: false
        },
        {
          pubkey: accounts.newLeafDelegate,
          isWritable: false,
          isSigner: false
        },
        {
          pubkey: accounts.merkleTree,
          isWritable: true,
          isSigner: false
        },
        {
          pubkey: accounts.logWrapper,
          isWritable: false,
          isSigner: false
        },
        {
          pubkey: accounts.compressionProgram,
          isWritable: false,
          isSigner: false
        },
        {
          pubkey: (_a = accounts.systemProgram) !== null && _a !== void 0 ? _a : web3.SystemProgram.programId,
          isWritable: false,
          isSigner: false
        }
      ];
      if (accounts.anchorRemainingAccounts != null) {
        for (const acc of accounts.anchorRemainingAccounts) {
          keys.push(acc);
        }
      }
      const ix = new web3.TransactionInstruction({
        programId,
        keys,
        data
      });
      return ix;
    }
    exports.createDelegateInstruction = createDelegateInstruction2;
  }
});

// ../../node_modules/@metaplex-foundation/mpl-bubblegum/dist/src/generated/instructions/mintToCollectionV1.js
var require_mintToCollectionV1 = __commonJS({
  "../../node_modules/@metaplex-foundation/mpl-bubblegum/dist/src/generated/instructions/mintToCollectionV1.js"(exports) {
    "use strict";
    var __createBinding = exports && exports.__createBinding || (Object.create ? function(o2, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      var desc = Object.getOwnPropertyDescriptor(m, k);
      if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m[k];
        } };
      }
      Object.defineProperty(o2, k2, desc);
    } : function(o2, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      o2[k2] = m[k];
    });
    var __setModuleDefault = exports && exports.__setModuleDefault || (Object.create ? function(o2, v) {
      Object.defineProperty(o2, "default", { enumerable: true, value: v });
    } : function(o2, v) {
      o2["default"] = v;
    });
    var __importStar = exports && exports.__importStar || function(mod) {
      if (mod && mod.__esModule)
        return mod;
      var result = {};
      if (mod != null) {
        for (var k in mod)
          if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k))
            __createBinding(result, mod, k);
      }
      __setModuleDefault(result, mod);
      return result;
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.createMintToCollectionV1Instruction = exports.mintToCollectionV1InstructionDiscriminator = exports.mintToCollectionV1Struct = void 0;
    var beet9 = __importStar(require_beet());
    var web3 = __importStar((init_index_browser_esm(), __toCommonJS(index_browser_esm_exports)));
    var MetadataArgs_1 = require_MetadataArgs();
    exports.mintToCollectionV1Struct = new beet9.FixableBeetArgsStruct([
      ["instructionDiscriminator", beet9.uniformFixedSizeArray(beet9.u8, 8)],
      ["metadataArgs", MetadataArgs_1.metadataArgsBeet]
    ], "MintToCollectionV1InstructionArgs");
    exports.mintToCollectionV1InstructionDiscriminator = [153, 18, 178, 47, 197, 158, 86, 15];
    function createMintToCollectionV1Instruction2(accounts, args, programId = new web3.PublicKey("BGUMAp9Gq7iTEuizy4pqaxsTyUCBK68MDfK752saRPUY")) {
      var _a;
      const [data] = exports.mintToCollectionV1Struct.serialize(__spreadValues({
        instructionDiscriminator: exports.mintToCollectionV1InstructionDiscriminator
      }, args));
      const keys = [
        {
          pubkey: accounts.treeAuthority,
          isWritable: true,
          isSigner: false
        },
        {
          pubkey: accounts.leafOwner,
          isWritable: false,
          isSigner: false
        },
        {
          pubkey: accounts.leafDelegate,
          isWritable: false,
          isSigner: false
        },
        {
          pubkey: accounts.merkleTree,
          isWritable: true,
          isSigner: false
        },
        {
          pubkey: accounts.payer,
          isWritable: false,
          isSigner: true
        },
        {
          pubkey: accounts.treeDelegate,
          isWritable: false,
          isSigner: true
        },
        {
          pubkey: accounts.collectionAuthority,
          isWritable: false,
          isSigner: true
        },
        {
          pubkey: accounts.collectionAuthorityRecordPda,
          isWritable: false,
          isSigner: false
        },
        {
          pubkey: accounts.collectionMint,
          isWritable: false,
          isSigner: false
        },
        {
          pubkey: accounts.collectionMetadata,
          isWritable: true,
          isSigner: false
        },
        {
          pubkey: accounts.editionAccount,
          isWritable: false,
          isSigner: false
        },
        {
          pubkey: accounts.bubblegumSigner,
          isWritable: false,
          isSigner: false
        },
        {
          pubkey: accounts.logWrapper,
          isWritable: false,
          isSigner: false
        },
        {
          pubkey: accounts.compressionProgram,
          isWritable: false,
          isSigner: false
        },
        {
          pubkey: accounts.tokenMetadataProgram,
          isWritable: false,
          isSigner: false
        },
        {
          pubkey: (_a = accounts.systemProgram) !== null && _a !== void 0 ? _a : web3.SystemProgram.programId,
          isWritable: false,
          isSigner: false
        }
      ];
      if (accounts.anchorRemainingAccounts != null) {
        for (const acc of accounts.anchorRemainingAccounts) {
          keys.push(acc);
        }
      }
      const ix = new web3.TransactionInstruction({
        programId,
        keys,
        data
      });
      return ix;
    }
    exports.createMintToCollectionV1Instruction = createMintToCollectionV1Instruction2;
  }
});

// ../../node_modules/@metaplex-foundation/mpl-bubblegum/dist/src/generated/instructions/mintV1.js
var require_mintV1 = __commonJS({
  "../../node_modules/@metaplex-foundation/mpl-bubblegum/dist/src/generated/instructions/mintV1.js"(exports) {
    "use strict";
    var __createBinding = exports && exports.__createBinding || (Object.create ? function(o2, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      var desc = Object.getOwnPropertyDescriptor(m, k);
      if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m[k];
        } };
      }
      Object.defineProperty(o2, k2, desc);
    } : function(o2, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      o2[k2] = m[k];
    });
    var __setModuleDefault = exports && exports.__setModuleDefault || (Object.create ? function(o2, v) {
      Object.defineProperty(o2, "default", { enumerable: true, value: v });
    } : function(o2, v) {
      o2["default"] = v;
    });
    var __importStar = exports && exports.__importStar || function(mod) {
      if (mod && mod.__esModule)
        return mod;
      var result = {};
      if (mod != null) {
        for (var k in mod)
          if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k))
            __createBinding(result, mod, k);
      }
      __setModuleDefault(result, mod);
      return result;
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.createMintV1Instruction = exports.mintV1InstructionDiscriminator = exports.mintV1Struct = void 0;
    var beet9 = __importStar(require_beet());
    var web3 = __importStar((init_index_browser_esm(), __toCommonJS(index_browser_esm_exports)));
    var MetadataArgs_1 = require_MetadataArgs();
    exports.mintV1Struct = new beet9.FixableBeetArgsStruct([
      ["instructionDiscriminator", beet9.uniformFixedSizeArray(beet9.u8, 8)],
      ["message", MetadataArgs_1.metadataArgsBeet]
    ], "MintV1InstructionArgs");
    exports.mintV1InstructionDiscriminator = [145, 98, 192, 118, 184, 147, 118, 104];
    function createMintV1Instruction(accounts, args, programId = new web3.PublicKey("BGUMAp9Gq7iTEuizy4pqaxsTyUCBK68MDfK752saRPUY")) {
      var _a;
      const [data] = exports.mintV1Struct.serialize(__spreadValues({
        instructionDiscriminator: exports.mintV1InstructionDiscriminator
      }, args));
      const keys = [
        {
          pubkey: accounts.treeAuthority,
          isWritable: true,
          isSigner: false
        },
        {
          pubkey: accounts.leafOwner,
          isWritable: false,
          isSigner: false
        },
        {
          pubkey: accounts.leafDelegate,
          isWritable: false,
          isSigner: false
        },
        {
          pubkey: accounts.merkleTree,
          isWritable: true,
          isSigner: false
        },
        {
          pubkey: accounts.payer,
          isWritable: false,
          isSigner: true
        },
        {
          pubkey: accounts.treeDelegate,
          isWritable: false,
          isSigner: true
        },
        {
          pubkey: accounts.logWrapper,
          isWritable: false,
          isSigner: false
        },
        {
          pubkey: accounts.compressionProgram,
          isWritable: false,
          isSigner: false
        },
        {
          pubkey: (_a = accounts.systemProgram) !== null && _a !== void 0 ? _a : web3.SystemProgram.programId,
          isWritable: false,
          isSigner: false
        }
      ];
      if (accounts.anchorRemainingAccounts != null) {
        for (const acc of accounts.anchorRemainingAccounts) {
          keys.push(acc);
        }
      }
      const ix = new web3.TransactionInstruction({
        programId,
        keys,
        data
      });
      return ix;
    }
    exports.createMintV1Instruction = createMintV1Instruction;
  }
});

// ../../node_modules/@metaplex-foundation/mpl-bubblegum/dist/src/generated/instructions/redeem.js
var require_redeem = __commonJS({
  "../../node_modules/@metaplex-foundation/mpl-bubblegum/dist/src/generated/instructions/redeem.js"(exports) {
    "use strict";
    var __createBinding = exports && exports.__createBinding || (Object.create ? function(o2, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      var desc = Object.getOwnPropertyDescriptor(m, k);
      if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m[k];
        } };
      }
      Object.defineProperty(o2, k2, desc);
    } : function(o2, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      o2[k2] = m[k];
    });
    var __setModuleDefault = exports && exports.__setModuleDefault || (Object.create ? function(o2, v) {
      Object.defineProperty(o2, "default", { enumerable: true, value: v });
    } : function(o2, v) {
      o2["default"] = v;
    });
    var __importStar = exports && exports.__importStar || function(mod) {
      if (mod && mod.__esModule)
        return mod;
      var result = {};
      if (mod != null) {
        for (var k in mod)
          if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k))
            __createBinding(result, mod, k);
      }
      __setModuleDefault(result, mod);
      return result;
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.createRedeemInstruction = exports.redeemInstructionDiscriminator = exports.redeemStruct = void 0;
    var beet9 = __importStar(require_beet());
    var web3 = __importStar((init_index_browser_esm(), __toCommonJS(index_browser_esm_exports)));
    exports.redeemStruct = new beet9.BeetArgsStruct([
      ["instructionDiscriminator", beet9.uniformFixedSizeArray(beet9.u8, 8)],
      ["root", beet9.uniformFixedSizeArray(beet9.u8, 32)],
      ["dataHash", beet9.uniformFixedSizeArray(beet9.u8, 32)],
      ["creatorHash", beet9.uniformFixedSizeArray(beet9.u8, 32)],
      ["nonce", beet9.u64],
      ["index", beet9.u32]
    ], "RedeemInstructionArgs");
    exports.redeemInstructionDiscriminator = [184, 12, 86, 149, 70, 196, 97, 225];
    function createRedeemInstruction(accounts, args, programId = new web3.PublicKey("BGUMAp9Gq7iTEuizy4pqaxsTyUCBK68MDfK752saRPUY")) {
      var _a;
      const [data] = exports.redeemStruct.serialize(__spreadValues({
        instructionDiscriminator: exports.redeemInstructionDiscriminator
      }, args));
      const keys = [
        {
          pubkey: accounts.treeAuthority,
          isWritable: false,
          isSigner: false
        },
        {
          pubkey: accounts.leafOwner,
          isWritable: true,
          isSigner: true
        },
        {
          pubkey: accounts.leafDelegate,
          isWritable: false,
          isSigner: false
        },
        {
          pubkey: accounts.merkleTree,
          isWritable: true,
          isSigner: false
        },
        {
          pubkey: accounts.voucher,
          isWritable: true,
          isSigner: false
        },
        {
          pubkey: accounts.logWrapper,
          isWritable: false,
          isSigner: false
        },
        {
          pubkey: accounts.compressionProgram,
          isWritable: false,
          isSigner: false
        },
        {
          pubkey: (_a = accounts.systemProgram) !== null && _a !== void 0 ? _a : web3.SystemProgram.programId,
          isWritable: false,
          isSigner: false
        }
      ];
      if (accounts.anchorRemainingAccounts != null) {
        for (const acc of accounts.anchorRemainingAccounts) {
          keys.push(acc);
        }
      }
      const ix = new web3.TransactionInstruction({
        programId,
        keys,
        data
      });
      return ix;
    }
    exports.createRedeemInstruction = createRedeemInstruction;
  }
});

// ../../node_modules/@metaplex-foundation/mpl-bubblegum/dist/src/generated/instructions/setAndVerifyCollection.js
var require_setAndVerifyCollection = __commonJS({
  "../../node_modules/@metaplex-foundation/mpl-bubblegum/dist/src/generated/instructions/setAndVerifyCollection.js"(exports) {
    "use strict";
    var __createBinding = exports && exports.__createBinding || (Object.create ? function(o2, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      var desc = Object.getOwnPropertyDescriptor(m, k);
      if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m[k];
        } };
      }
      Object.defineProperty(o2, k2, desc);
    } : function(o2, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      o2[k2] = m[k];
    });
    var __setModuleDefault = exports && exports.__setModuleDefault || (Object.create ? function(o2, v) {
      Object.defineProperty(o2, "default", { enumerable: true, value: v });
    } : function(o2, v) {
      o2["default"] = v;
    });
    var __importStar = exports && exports.__importStar || function(mod) {
      if (mod && mod.__esModule)
        return mod;
      var result = {};
      if (mod != null) {
        for (var k in mod)
          if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k))
            __createBinding(result, mod, k);
      }
      __setModuleDefault(result, mod);
      return result;
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.createSetAndVerifyCollectionInstruction = exports.setAndVerifyCollectionInstructionDiscriminator = exports.setAndVerifyCollectionStruct = void 0;
    var beet9 = __importStar(require_beet());
    var web3 = __importStar((init_index_browser_esm(), __toCommonJS(index_browser_esm_exports)));
    var beetSolana = __importStar(require_beet_solana2());
    var MetadataArgs_1 = require_MetadataArgs();
    exports.setAndVerifyCollectionStruct = new beet9.FixableBeetArgsStruct([
      ["instructionDiscriminator", beet9.uniformFixedSizeArray(beet9.u8, 8)],
      ["root", beet9.uniformFixedSizeArray(beet9.u8, 32)],
      ["dataHash", beet9.uniformFixedSizeArray(beet9.u8, 32)],
      ["creatorHash", beet9.uniformFixedSizeArray(beet9.u8, 32)],
      ["nonce", beet9.u64],
      ["index", beet9.u32],
      ["message", MetadataArgs_1.metadataArgsBeet],
      ["collection", beetSolana.publicKey]
    ], "SetAndVerifyCollectionInstructionArgs");
    exports.setAndVerifyCollectionInstructionDiscriminator = [
      235,
      242,
      121,
      216,
      158,
      234,
      180,
      234
    ];
    function createSetAndVerifyCollectionInstruction(accounts, args, programId = new web3.PublicKey("BGUMAp9Gq7iTEuizy4pqaxsTyUCBK68MDfK752saRPUY")) {
      var _a;
      const [data] = exports.setAndVerifyCollectionStruct.serialize(__spreadValues({
        instructionDiscriminator: exports.setAndVerifyCollectionInstructionDiscriminator
      }, args));
      const keys = [
        {
          pubkey: accounts.treeAuthority,
          isWritable: false,
          isSigner: false
        },
        {
          pubkey: accounts.leafOwner,
          isWritable: false,
          isSigner: false
        },
        {
          pubkey: accounts.leafDelegate,
          isWritable: false,
          isSigner: false
        },
        {
          pubkey: accounts.merkleTree,
          isWritable: true,
          isSigner: false
        },
        {
          pubkey: accounts.payer,
          isWritable: false,
          isSigner: true
        },
        {
          pubkey: accounts.treeDelegate,
          isWritable: false,
          isSigner: false
        },
        {
          pubkey: accounts.collectionAuthority,
          isWritable: false,
          isSigner: true
        },
        {
          pubkey: accounts.collectionAuthorityRecordPda,
          isWritable: false,
          isSigner: false
        },
        {
          pubkey: accounts.collectionMint,
          isWritable: false,
          isSigner: false
        },
        {
          pubkey: accounts.collectionMetadata,
          isWritable: true,
          isSigner: false
        },
        {
          pubkey: accounts.editionAccount,
          isWritable: false,
          isSigner: false
        },
        {
          pubkey: accounts.bubblegumSigner,
          isWritable: false,
          isSigner: false
        },
        {
          pubkey: accounts.logWrapper,
          isWritable: false,
          isSigner: false
        },
        {
          pubkey: accounts.compressionProgram,
          isWritable: false,
          isSigner: false
        },
        {
          pubkey: accounts.tokenMetadataProgram,
          isWritable: false,
          isSigner: false
        },
        {
          pubkey: (_a = accounts.systemProgram) !== null && _a !== void 0 ? _a : web3.SystemProgram.programId,
          isWritable: false,
          isSigner: false
        }
      ];
      if (accounts.anchorRemainingAccounts != null) {
        for (const acc of accounts.anchorRemainingAccounts) {
          keys.push(acc);
        }
      }
      const ix = new web3.TransactionInstruction({
        programId,
        keys,
        data
      });
      return ix;
    }
    exports.createSetAndVerifyCollectionInstruction = createSetAndVerifyCollectionInstruction;
  }
});

// ../../node_modules/@metaplex-foundation/mpl-bubblegum/dist/src/generated/instructions/setTreeDelegate.js
var require_setTreeDelegate = __commonJS({
  "../../node_modules/@metaplex-foundation/mpl-bubblegum/dist/src/generated/instructions/setTreeDelegate.js"(exports) {
    "use strict";
    var __createBinding = exports && exports.__createBinding || (Object.create ? function(o2, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      var desc = Object.getOwnPropertyDescriptor(m, k);
      if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m[k];
        } };
      }
      Object.defineProperty(o2, k2, desc);
    } : function(o2, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      o2[k2] = m[k];
    });
    var __setModuleDefault = exports && exports.__setModuleDefault || (Object.create ? function(o2, v) {
      Object.defineProperty(o2, "default", { enumerable: true, value: v });
    } : function(o2, v) {
      o2["default"] = v;
    });
    var __importStar = exports && exports.__importStar || function(mod) {
      if (mod && mod.__esModule)
        return mod;
      var result = {};
      if (mod != null) {
        for (var k in mod)
          if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k))
            __createBinding(result, mod, k);
      }
      __setModuleDefault(result, mod);
      return result;
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.createSetTreeDelegateInstruction = exports.setTreeDelegateInstructionDiscriminator = exports.setTreeDelegateStruct = void 0;
    var beet9 = __importStar(require_beet());
    var web3 = __importStar((init_index_browser_esm(), __toCommonJS(index_browser_esm_exports)));
    exports.setTreeDelegateStruct = new beet9.BeetArgsStruct([["instructionDiscriminator", beet9.uniformFixedSizeArray(beet9.u8, 8)]], "SetTreeDelegateInstructionArgs");
    exports.setTreeDelegateInstructionDiscriminator = [253, 118, 66, 37, 190, 49, 154, 102];
    function createSetTreeDelegateInstruction(accounts, programId = new web3.PublicKey("BGUMAp9Gq7iTEuizy4pqaxsTyUCBK68MDfK752saRPUY")) {
      var _a;
      const [data] = exports.setTreeDelegateStruct.serialize({
        instructionDiscriminator: exports.setTreeDelegateInstructionDiscriminator
      });
      const keys = [
        {
          pubkey: accounts.treeAuthority,
          isWritable: true,
          isSigner: false
        },
        {
          pubkey: accounts.treeCreator,
          isWritable: false,
          isSigner: true
        },
        {
          pubkey: accounts.newTreeDelegate,
          isWritable: false,
          isSigner: false
        },
        {
          pubkey: accounts.merkleTree,
          isWritable: false,
          isSigner: false
        },
        {
          pubkey: (_a = accounts.systemProgram) !== null && _a !== void 0 ? _a : web3.SystemProgram.programId,
          isWritable: false,
          isSigner: false
        }
      ];
      if (accounts.anchorRemainingAccounts != null) {
        for (const acc of accounts.anchorRemainingAccounts) {
          keys.push(acc);
        }
      }
      const ix = new web3.TransactionInstruction({
        programId,
        keys,
        data
      });
      return ix;
    }
    exports.createSetTreeDelegateInstruction = createSetTreeDelegateInstruction;
  }
});

// ../../node_modules/@metaplex-foundation/mpl-bubblegum/dist/src/generated/instructions/transfer.js
var require_transfer3 = __commonJS({
  "../../node_modules/@metaplex-foundation/mpl-bubblegum/dist/src/generated/instructions/transfer.js"(exports) {
    "use strict";
    var __createBinding = exports && exports.__createBinding || (Object.create ? function(o2, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      var desc = Object.getOwnPropertyDescriptor(m, k);
      if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m[k];
        } };
      }
      Object.defineProperty(o2, k2, desc);
    } : function(o2, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      o2[k2] = m[k];
    });
    var __setModuleDefault = exports && exports.__setModuleDefault || (Object.create ? function(o2, v) {
      Object.defineProperty(o2, "default", { enumerable: true, value: v });
    } : function(o2, v) {
      o2["default"] = v;
    });
    var __importStar = exports && exports.__importStar || function(mod) {
      if (mod && mod.__esModule)
        return mod;
      var result = {};
      if (mod != null) {
        for (var k in mod)
          if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k))
            __createBinding(result, mod, k);
      }
      __setModuleDefault(result, mod);
      return result;
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.createTransferInstruction = exports.transferInstructionDiscriminator = exports.transferStruct = void 0;
    var beet9 = __importStar(require_beet());
    var web3 = __importStar((init_index_browser_esm(), __toCommonJS(index_browser_esm_exports)));
    exports.transferStruct = new beet9.BeetArgsStruct([
      ["instructionDiscriminator", beet9.uniformFixedSizeArray(beet9.u8, 8)],
      ["root", beet9.uniformFixedSizeArray(beet9.u8, 32)],
      ["dataHash", beet9.uniformFixedSizeArray(beet9.u8, 32)],
      ["creatorHash", beet9.uniformFixedSizeArray(beet9.u8, 32)],
      ["nonce", beet9.u64],
      ["index", beet9.u32]
    ], "TransferInstructionArgs");
    exports.transferInstructionDiscriminator = [163, 52, 200, 231, 140, 3, 69, 186];
    function createTransferInstruction4(accounts, args, programId = new web3.PublicKey("BGUMAp9Gq7iTEuizy4pqaxsTyUCBK68MDfK752saRPUY")) {
      var _a;
      const [data] = exports.transferStruct.serialize(__spreadValues({
        instructionDiscriminator: exports.transferInstructionDiscriminator
      }, args));
      const keys = [
        {
          pubkey: accounts.treeAuthority,
          isWritable: false,
          isSigner: false
        },
        {
          pubkey: accounts.leafOwner,
          isWritable: false,
          isSigner: false
        },
        {
          pubkey: accounts.leafDelegate,
          isWritable: false,
          isSigner: false
        },
        {
          pubkey: accounts.newLeafOwner,
          isWritable: false,
          isSigner: false
        },
        {
          pubkey: accounts.merkleTree,
          isWritable: true,
          isSigner: false
        },
        {
          pubkey: accounts.logWrapper,
          isWritable: false,
          isSigner: false
        },
        {
          pubkey: accounts.compressionProgram,
          isWritable: false,
          isSigner: false
        },
        {
          pubkey: (_a = accounts.systemProgram) !== null && _a !== void 0 ? _a : web3.SystemProgram.programId,
          isWritable: false,
          isSigner: false
        }
      ];
      if (accounts.anchorRemainingAccounts != null) {
        for (const acc of accounts.anchorRemainingAccounts) {
          keys.push(acc);
        }
      }
      const ix = new web3.TransactionInstruction({
        programId,
        keys,
        data
      });
      return ix;
    }
    exports.createTransferInstruction = createTransferInstruction4;
  }
});

// ../../node_modules/@metaplex-foundation/mpl-bubblegum/dist/src/generated/instructions/unverifyCollection.js
var require_unverifyCollection = __commonJS({
  "../../node_modules/@metaplex-foundation/mpl-bubblegum/dist/src/generated/instructions/unverifyCollection.js"(exports) {
    "use strict";
    var __createBinding = exports && exports.__createBinding || (Object.create ? function(o2, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      var desc = Object.getOwnPropertyDescriptor(m, k);
      if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m[k];
        } };
      }
      Object.defineProperty(o2, k2, desc);
    } : function(o2, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      o2[k2] = m[k];
    });
    var __setModuleDefault = exports && exports.__setModuleDefault || (Object.create ? function(o2, v) {
      Object.defineProperty(o2, "default", { enumerable: true, value: v });
    } : function(o2, v) {
      o2["default"] = v;
    });
    var __importStar = exports && exports.__importStar || function(mod) {
      if (mod && mod.__esModule)
        return mod;
      var result = {};
      if (mod != null) {
        for (var k in mod)
          if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k))
            __createBinding(result, mod, k);
      }
      __setModuleDefault(result, mod);
      return result;
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.createUnverifyCollectionInstruction = exports.unverifyCollectionInstructionDiscriminator = exports.unverifyCollectionStruct = void 0;
    var beet9 = __importStar(require_beet());
    var web3 = __importStar((init_index_browser_esm(), __toCommonJS(index_browser_esm_exports)));
    var MetadataArgs_1 = require_MetadataArgs();
    exports.unverifyCollectionStruct = new beet9.FixableBeetArgsStruct([
      ["instructionDiscriminator", beet9.uniformFixedSizeArray(beet9.u8, 8)],
      ["root", beet9.uniformFixedSizeArray(beet9.u8, 32)],
      ["dataHash", beet9.uniformFixedSizeArray(beet9.u8, 32)],
      ["creatorHash", beet9.uniformFixedSizeArray(beet9.u8, 32)],
      ["nonce", beet9.u64],
      ["index", beet9.u32],
      ["message", MetadataArgs_1.metadataArgsBeet]
    ], "UnverifyCollectionInstructionArgs");
    exports.unverifyCollectionInstructionDiscriminator = [250, 251, 42, 106, 41, 137, 186, 168];
    function createUnverifyCollectionInstruction2(accounts, args, programId = new web3.PublicKey("BGUMAp9Gq7iTEuizy4pqaxsTyUCBK68MDfK752saRPUY")) {
      var _a;
      const [data] = exports.unverifyCollectionStruct.serialize(__spreadValues({
        instructionDiscriminator: exports.unverifyCollectionInstructionDiscriminator
      }, args));
      const keys = [
        {
          pubkey: accounts.treeAuthority,
          isWritable: false,
          isSigner: false
        },
        {
          pubkey: accounts.leafOwner,
          isWritable: false,
          isSigner: false
        },
        {
          pubkey: accounts.leafDelegate,
          isWritable: false,
          isSigner: false
        },
        {
          pubkey: accounts.merkleTree,
          isWritable: true,
          isSigner: false
        },
        {
          pubkey: accounts.payer,
          isWritable: false,
          isSigner: true
        },
        {
          pubkey: accounts.treeDelegate,
          isWritable: false,
          isSigner: false
        },
        {
          pubkey: accounts.collectionAuthority,
          isWritable: false,
          isSigner: true
        },
        {
          pubkey: accounts.collectionAuthorityRecordPda,
          isWritable: false,
          isSigner: false
        },
        {
          pubkey: accounts.collectionMint,
          isWritable: false,
          isSigner: false
        },
        {
          pubkey: accounts.collectionMetadata,
          isWritable: true,
          isSigner: false
        },
        {
          pubkey: accounts.editionAccount,
          isWritable: false,
          isSigner: false
        },
        {
          pubkey: accounts.bubblegumSigner,
          isWritable: false,
          isSigner: false
        },
        {
          pubkey: accounts.logWrapper,
          isWritable: false,
          isSigner: false
        },
        {
          pubkey: accounts.compressionProgram,
          isWritable: false,
          isSigner: false
        },
        {
          pubkey: accounts.tokenMetadataProgram,
          isWritable: false,
          isSigner: false
        },
        {
          pubkey: (_a = accounts.systemProgram) !== null && _a !== void 0 ? _a : web3.SystemProgram.programId,
          isWritable: false,
          isSigner: false
        }
      ];
      if (accounts.anchorRemainingAccounts != null) {
        for (const acc of accounts.anchorRemainingAccounts) {
          keys.push(acc);
        }
      }
      const ix = new web3.TransactionInstruction({
        programId,
        keys,
        data
      });
      return ix;
    }
    exports.createUnverifyCollectionInstruction = createUnverifyCollectionInstruction2;
  }
});

// ../../node_modules/@metaplex-foundation/mpl-bubblegum/dist/src/generated/instructions/unverifyCreator.js
var require_unverifyCreator = __commonJS({
  "../../node_modules/@metaplex-foundation/mpl-bubblegum/dist/src/generated/instructions/unverifyCreator.js"(exports) {
    "use strict";
    var __createBinding = exports && exports.__createBinding || (Object.create ? function(o2, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      var desc = Object.getOwnPropertyDescriptor(m, k);
      if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m[k];
        } };
      }
      Object.defineProperty(o2, k2, desc);
    } : function(o2, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      o2[k2] = m[k];
    });
    var __setModuleDefault = exports && exports.__setModuleDefault || (Object.create ? function(o2, v) {
      Object.defineProperty(o2, "default", { enumerable: true, value: v });
    } : function(o2, v) {
      o2["default"] = v;
    });
    var __importStar = exports && exports.__importStar || function(mod) {
      if (mod && mod.__esModule)
        return mod;
      var result = {};
      if (mod != null) {
        for (var k in mod)
          if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k))
            __createBinding(result, mod, k);
      }
      __setModuleDefault(result, mod);
      return result;
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.createUnverifyCreatorInstruction = exports.unverifyCreatorInstructionDiscriminator = exports.unverifyCreatorStruct = void 0;
    var beet9 = __importStar(require_beet());
    var web3 = __importStar((init_index_browser_esm(), __toCommonJS(index_browser_esm_exports)));
    var MetadataArgs_1 = require_MetadataArgs();
    exports.unverifyCreatorStruct = new beet9.FixableBeetArgsStruct([
      ["instructionDiscriminator", beet9.uniformFixedSizeArray(beet9.u8, 8)],
      ["root", beet9.uniformFixedSizeArray(beet9.u8, 32)],
      ["dataHash", beet9.uniformFixedSizeArray(beet9.u8, 32)],
      ["creatorHash", beet9.uniformFixedSizeArray(beet9.u8, 32)],
      ["nonce", beet9.u64],
      ["index", beet9.u32],
      ["message", MetadataArgs_1.metadataArgsBeet]
    ], "UnverifyCreatorInstructionArgs");
    exports.unverifyCreatorInstructionDiscriminator = [107, 178, 57, 39, 105, 115, 112, 152];
    function createUnverifyCreatorInstruction(accounts, args, programId = new web3.PublicKey("BGUMAp9Gq7iTEuizy4pqaxsTyUCBK68MDfK752saRPUY")) {
      var _a;
      const [data] = exports.unverifyCreatorStruct.serialize(__spreadValues({
        instructionDiscriminator: exports.unverifyCreatorInstructionDiscriminator
      }, args));
      const keys = [
        {
          pubkey: accounts.treeAuthority,
          isWritable: false,
          isSigner: false
        },
        {
          pubkey: accounts.leafOwner,
          isWritable: false,
          isSigner: false
        },
        {
          pubkey: accounts.leafDelegate,
          isWritable: false,
          isSigner: false
        },
        {
          pubkey: accounts.merkleTree,
          isWritable: true,
          isSigner: false
        },
        {
          pubkey: accounts.payer,
          isWritable: false,
          isSigner: true
        },
        {
          pubkey: accounts.creator,
          isWritable: false,
          isSigner: true
        },
        {
          pubkey: accounts.logWrapper,
          isWritable: false,
          isSigner: false
        },
        {
          pubkey: accounts.compressionProgram,
          isWritable: false,
          isSigner: false
        },
        {
          pubkey: (_a = accounts.systemProgram) !== null && _a !== void 0 ? _a : web3.SystemProgram.programId,
          isWritable: false,
          isSigner: false
        }
      ];
      if (accounts.anchorRemainingAccounts != null) {
        for (const acc of accounts.anchorRemainingAccounts) {
          keys.push(acc);
        }
      }
      const ix = new web3.TransactionInstruction({
        programId,
        keys,
        data
      });
      return ix;
    }
    exports.createUnverifyCreatorInstruction = createUnverifyCreatorInstruction;
  }
});

// ../../node_modules/@metaplex-foundation/mpl-bubblegum/dist/src/generated/instructions/verifyCollection.js
var require_verifyCollection = __commonJS({
  "../../node_modules/@metaplex-foundation/mpl-bubblegum/dist/src/generated/instructions/verifyCollection.js"(exports) {
    "use strict";
    var __createBinding = exports && exports.__createBinding || (Object.create ? function(o2, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      var desc = Object.getOwnPropertyDescriptor(m, k);
      if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m[k];
        } };
      }
      Object.defineProperty(o2, k2, desc);
    } : function(o2, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      o2[k2] = m[k];
    });
    var __setModuleDefault = exports && exports.__setModuleDefault || (Object.create ? function(o2, v) {
      Object.defineProperty(o2, "default", { enumerable: true, value: v });
    } : function(o2, v) {
      o2["default"] = v;
    });
    var __importStar = exports && exports.__importStar || function(mod) {
      if (mod && mod.__esModule)
        return mod;
      var result = {};
      if (mod != null) {
        for (var k in mod)
          if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k))
            __createBinding(result, mod, k);
      }
      __setModuleDefault(result, mod);
      return result;
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.createVerifyCollectionInstruction = exports.verifyCollectionInstructionDiscriminator = exports.verifyCollectionStruct = void 0;
    var beet9 = __importStar(require_beet());
    var web3 = __importStar((init_index_browser_esm(), __toCommonJS(index_browser_esm_exports)));
    var MetadataArgs_1 = require_MetadataArgs();
    exports.verifyCollectionStruct = new beet9.FixableBeetArgsStruct([
      ["instructionDiscriminator", beet9.uniformFixedSizeArray(beet9.u8, 8)],
      ["root", beet9.uniformFixedSizeArray(beet9.u8, 32)],
      ["dataHash", beet9.uniformFixedSizeArray(beet9.u8, 32)],
      ["creatorHash", beet9.uniformFixedSizeArray(beet9.u8, 32)],
      ["nonce", beet9.u64],
      ["index", beet9.u32],
      ["message", MetadataArgs_1.metadataArgsBeet]
    ], "VerifyCollectionInstructionArgs");
    exports.verifyCollectionInstructionDiscriminator = [56, 113, 101, 253, 79, 55, 122, 169];
    function createVerifyCollectionInstruction2(accounts, args, programId = new web3.PublicKey("BGUMAp9Gq7iTEuizy4pqaxsTyUCBK68MDfK752saRPUY")) {
      var _a;
      const [data] = exports.verifyCollectionStruct.serialize(__spreadValues({
        instructionDiscriminator: exports.verifyCollectionInstructionDiscriminator
      }, args));
      const keys = [
        {
          pubkey: accounts.treeAuthority,
          isWritable: false,
          isSigner: false
        },
        {
          pubkey: accounts.leafOwner,
          isWritable: false,
          isSigner: false
        },
        {
          pubkey: accounts.leafDelegate,
          isWritable: false,
          isSigner: false
        },
        {
          pubkey: accounts.merkleTree,
          isWritable: true,
          isSigner: false
        },
        {
          pubkey: accounts.payer,
          isWritable: false,
          isSigner: true
        },
        {
          pubkey: accounts.treeDelegate,
          isWritable: false,
          isSigner: false
        },
        {
          pubkey: accounts.collectionAuthority,
          isWritable: false,
          isSigner: true
        },
        {
          pubkey: accounts.collectionAuthorityRecordPda,
          isWritable: false,
          isSigner: false
        },
        {
          pubkey: accounts.collectionMint,
          isWritable: false,
          isSigner: false
        },
        {
          pubkey: accounts.collectionMetadata,
          isWritable: true,
          isSigner: false
        },
        {
          pubkey: accounts.editionAccount,
          isWritable: false,
          isSigner: false
        },
        {
          pubkey: accounts.bubblegumSigner,
          isWritable: false,
          isSigner: false
        },
        {
          pubkey: accounts.logWrapper,
          isWritable: false,
          isSigner: false
        },
        {
          pubkey: accounts.compressionProgram,
          isWritable: false,
          isSigner: false
        },
        {
          pubkey: accounts.tokenMetadataProgram,
          isWritable: false,
          isSigner: false
        },
        {
          pubkey: (_a = accounts.systemProgram) !== null && _a !== void 0 ? _a : web3.SystemProgram.programId,
          isWritable: false,
          isSigner: false
        }
      ];
      if (accounts.anchorRemainingAccounts != null) {
        for (const acc of accounts.anchorRemainingAccounts) {
          keys.push(acc);
        }
      }
      const ix = new web3.TransactionInstruction({
        programId,
        keys,
        data
      });
      return ix;
    }
    exports.createVerifyCollectionInstruction = createVerifyCollectionInstruction2;
  }
});

// ../../node_modules/@metaplex-foundation/mpl-bubblegum/dist/src/generated/instructions/verifyCreator.js
var require_verifyCreator = __commonJS({
  "../../node_modules/@metaplex-foundation/mpl-bubblegum/dist/src/generated/instructions/verifyCreator.js"(exports) {
    "use strict";
    var __createBinding = exports && exports.__createBinding || (Object.create ? function(o2, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      var desc = Object.getOwnPropertyDescriptor(m, k);
      if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m[k];
        } };
      }
      Object.defineProperty(o2, k2, desc);
    } : function(o2, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      o2[k2] = m[k];
    });
    var __setModuleDefault = exports && exports.__setModuleDefault || (Object.create ? function(o2, v) {
      Object.defineProperty(o2, "default", { enumerable: true, value: v });
    } : function(o2, v) {
      o2["default"] = v;
    });
    var __importStar = exports && exports.__importStar || function(mod) {
      if (mod && mod.__esModule)
        return mod;
      var result = {};
      if (mod != null) {
        for (var k in mod)
          if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k))
            __createBinding(result, mod, k);
      }
      __setModuleDefault(result, mod);
      return result;
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.createVerifyCreatorInstruction = exports.verifyCreatorInstructionDiscriminator = exports.verifyCreatorStruct = void 0;
    var beet9 = __importStar(require_beet());
    var web3 = __importStar((init_index_browser_esm(), __toCommonJS(index_browser_esm_exports)));
    var MetadataArgs_1 = require_MetadataArgs();
    exports.verifyCreatorStruct = new beet9.FixableBeetArgsStruct([
      ["instructionDiscriminator", beet9.uniformFixedSizeArray(beet9.u8, 8)],
      ["root", beet9.uniformFixedSizeArray(beet9.u8, 32)],
      ["dataHash", beet9.uniformFixedSizeArray(beet9.u8, 32)],
      ["creatorHash", beet9.uniformFixedSizeArray(beet9.u8, 32)],
      ["nonce", beet9.u64],
      ["index", beet9.u32],
      ["message", MetadataArgs_1.metadataArgsBeet]
    ], "VerifyCreatorInstructionArgs");
    exports.verifyCreatorInstructionDiscriminator = [52, 17, 96, 132, 71, 4, 85, 194];
    function createVerifyCreatorInstruction(accounts, args, programId = new web3.PublicKey("BGUMAp9Gq7iTEuizy4pqaxsTyUCBK68MDfK752saRPUY")) {
      var _a;
      const [data] = exports.verifyCreatorStruct.serialize(__spreadValues({
        instructionDiscriminator: exports.verifyCreatorInstructionDiscriminator
      }, args));
      const keys = [
        {
          pubkey: accounts.treeAuthority,
          isWritable: false,
          isSigner: false
        },
        {
          pubkey: accounts.leafOwner,
          isWritable: false,
          isSigner: false
        },
        {
          pubkey: accounts.leafDelegate,
          isWritable: false,
          isSigner: false
        },
        {
          pubkey: accounts.merkleTree,
          isWritable: true,
          isSigner: false
        },
        {
          pubkey: accounts.payer,
          isWritable: false,
          isSigner: true
        },
        {
          pubkey: accounts.creator,
          isWritable: false,
          isSigner: true
        },
        {
          pubkey: accounts.logWrapper,
          isWritable: false,
          isSigner: false
        },
        {
          pubkey: accounts.compressionProgram,
          isWritable: false,
          isSigner: false
        },
        {
          pubkey: (_a = accounts.systemProgram) !== null && _a !== void 0 ? _a : web3.SystemProgram.programId,
          isWritable: false,
          isSigner: false
        }
      ];
      if (accounts.anchorRemainingAccounts != null) {
        for (const acc of accounts.anchorRemainingAccounts) {
          keys.push(acc);
        }
      }
      const ix = new web3.TransactionInstruction({
        programId,
        keys,
        data
      });
      return ix;
    }
    exports.createVerifyCreatorInstruction = createVerifyCreatorInstruction;
  }
});

// ../../node_modules/@metaplex-foundation/mpl-bubblegum/dist/src/generated/instructions/index.js
var require_instructions10 = __commonJS({
  "../../node_modules/@metaplex-foundation/mpl-bubblegum/dist/src/generated/instructions/index.js"(exports) {
    "use strict";
    var __createBinding = exports && exports.__createBinding || (Object.create ? function(o2, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      var desc = Object.getOwnPropertyDescriptor(m, k);
      if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m[k];
        } };
      }
      Object.defineProperty(o2, k2, desc);
    } : function(o2, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      o2[k2] = m[k];
    });
    var __exportStar = exports && exports.__exportStar || function(m, exports2) {
      for (var p in m)
        if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports2, p))
          __createBinding(exports2, m, p);
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    __exportStar(require_burn3(), exports);
    __exportStar(require_cancelRedeem(), exports);
    __exportStar(require_compress(), exports);
    __exportStar(require_createTree(), exports);
    __exportStar(require_decompressV1(), exports);
    __exportStar(require_delegate(), exports);
    __exportStar(require_mintToCollectionV1(), exports);
    __exportStar(require_mintV1(), exports);
    __exportStar(require_redeem(), exports);
    __exportStar(require_setAndVerifyCollection(), exports);
    __exportStar(require_setTreeDelegate(), exports);
    __exportStar(require_transfer3(), exports);
    __exportStar(require_unverifyCollection(), exports);
    __exportStar(require_unverifyCreator(), exports);
    __exportStar(require_verifyCollection(), exports);
    __exportStar(require_verifyCreator(), exports);
  }
});

// ../../node_modules/@metaplex-foundation/mpl-bubblegum/dist/src/generated/types/BubblegumEventType.js
var require_BubblegumEventType = __commonJS({
  "../../node_modules/@metaplex-foundation/mpl-bubblegum/dist/src/generated/types/BubblegumEventType.js"(exports) {
    "use strict";
    var __createBinding = exports && exports.__createBinding || (Object.create ? function(o2, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      var desc = Object.getOwnPropertyDescriptor(m, k);
      if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m[k];
        } };
      }
      Object.defineProperty(o2, k2, desc);
    } : function(o2, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      o2[k2] = m[k];
    });
    var __setModuleDefault = exports && exports.__setModuleDefault || (Object.create ? function(o2, v) {
      Object.defineProperty(o2, "default", { enumerable: true, value: v });
    } : function(o2, v) {
      o2["default"] = v;
    });
    var __importStar = exports && exports.__importStar || function(mod) {
      if (mod && mod.__esModule)
        return mod;
      var result = {};
      if (mod != null) {
        for (var k in mod)
          if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k))
            __createBinding(result, mod, k);
      }
      __setModuleDefault(result, mod);
      return result;
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.bubblegumEventTypeBeet = exports.BubblegumEventType = void 0;
    var beet9 = __importStar(require_beet());
    var BubblegumEventType;
    (function(BubblegumEventType2) {
      BubblegumEventType2[BubblegumEventType2["Uninitialized"] = 0] = "Uninitialized";
      BubblegumEventType2[BubblegumEventType2["LeafSchemaEvent"] = 1] = "LeafSchemaEvent";
    })(BubblegumEventType = exports.BubblegumEventType || (exports.BubblegumEventType = {}));
    exports.bubblegumEventTypeBeet = beet9.fixedScalarEnum(BubblegumEventType);
  }
});

// ../../node_modules/@metaplex-foundation/mpl-bubblegum/dist/src/generated/types/InstructionName.js
var require_InstructionName = __commonJS({
  "../../node_modules/@metaplex-foundation/mpl-bubblegum/dist/src/generated/types/InstructionName.js"(exports) {
    "use strict";
    var __createBinding = exports && exports.__createBinding || (Object.create ? function(o2, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      var desc = Object.getOwnPropertyDescriptor(m, k);
      if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m[k];
        } };
      }
      Object.defineProperty(o2, k2, desc);
    } : function(o2, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      o2[k2] = m[k];
    });
    var __setModuleDefault = exports && exports.__setModuleDefault || (Object.create ? function(o2, v) {
      Object.defineProperty(o2, "default", { enumerable: true, value: v });
    } : function(o2, v) {
      o2["default"] = v;
    });
    var __importStar = exports && exports.__importStar || function(mod) {
      if (mod && mod.__esModule)
        return mod;
      var result = {};
      if (mod != null) {
        for (var k in mod)
          if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k))
            __createBinding(result, mod, k);
      }
      __setModuleDefault(result, mod);
      return result;
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.instructionNameBeet = exports.InstructionName = void 0;
    var beet9 = __importStar(require_beet());
    var InstructionName;
    (function(InstructionName2) {
      InstructionName2[InstructionName2["Unknown"] = 0] = "Unknown";
      InstructionName2[InstructionName2["MintV1"] = 1] = "MintV1";
      InstructionName2[InstructionName2["Redeem"] = 2] = "Redeem";
      InstructionName2[InstructionName2["CancelRedeem"] = 3] = "CancelRedeem";
      InstructionName2[InstructionName2["Transfer"] = 4] = "Transfer";
      InstructionName2[InstructionName2["Delegate"] = 5] = "Delegate";
      InstructionName2[InstructionName2["DecompressV1"] = 6] = "DecompressV1";
      InstructionName2[InstructionName2["Compress"] = 7] = "Compress";
      InstructionName2[InstructionName2["Burn"] = 8] = "Burn";
      InstructionName2[InstructionName2["CreateTree"] = 9] = "CreateTree";
      InstructionName2[InstructionName2["VerifyCreator"] = 10] = "VerifyCreator";
      InstructionName2[InstructionName2["UnverifyCreator"] = 11] = "UnverifyCreator";
      InstructionName2[InstructionName2["VerifyCollection"] = 12] = "VerifyCollection";
      InstructionName2[InstructionName2["UnverifyCollection"] = 13] = "UnverifyCollection";
      InstructionName2[InstructionName2["SetAndVerifyCollection"] = 14] = "SetAndVerifyCollection";
      InstructionName2[InstructionName2["MintToCollectionV1"] = 15] = "MintToCollectionV1";
    })(InstructionName = exports.InstructionName || (exports.InstructionName = {}));
    exports.instructionNameBeet = beet9.fixedScalarEnum(InstructionName);
  }
});

// ../../node_modules/@metaplex-foundation/mpl-bubblegum/dist/src/generated/types/Version.js
var require_Version = __commonJS({
  "../../node_modules/@metaplex-foundation/mpl-bubblegum/dist/src/generated/types/Version.js"(exports) {
    "use strict";
    var __createBinding = exports && exports.__createBinding || (Object.create ? function(o2, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      var desc = Object.getOwnPropertyDescriptor(m, k);
      if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m[k];
        } };
      }
      Object.defineProperty(o2, k2, desc);
    } : function(o2, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      o2[k2] = m[k];
    });
    var __setModuleDefault = exports && exports.__setModuleDefault || (Object.create ? function(o2, v) {
      Object.defineProperty(o2, "default", { enumerable: true, value: v });
    } : function(o2, v) {
      o2["default"] = v;
    });
    var __importStar = exports && exports.__importStar || function(mod) {
      if (mod && mod.__esModule)
        return mod;
      var result = {};
      if (mod != null) {
        for (var k in mod)
          if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k))
            __createBinding(result, mod, k);
      }
      __setModuleDefault(result, mod);
      return result;
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.versionBeet = exports.Version = void 0;
    var beet9 = __importStar(require_beet());
    var Version;
    (function(Version2) {
      Version2[Version2["V1"] = 0] = "V1";
    })(Version = exports.Version || (exports.Version = {}));
    exports.versionBeet = beet9.fixedScalarEnum(Version);
  }
});

// ../../node_modules/@metaplex-foundation/mpl-bubblegum/dist/src/generated/types/index.js
var require_types5 = __commonJS({
  "../../node_modules/@metaplex-foundation/mpl-bubblegum/dist/src/generated/types/index.js"(exports) {
    "use strict";
    var __createBinding = exports && exports.__createBinding || (Object.create ? function(o2, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      var desc = Object.getOwnPropertyDescriptor(m, k);
      if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m[k];
        } };
      }
      Object.defineProperty(o2, k2, desc);
    } : function(o2, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      o2[k2] = m[k];
    });
    var __exportStar = exports && exports.__exportStar || function(m, exports2) {
      for (var p in m)
        if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports2, p))
          __createBinding(exports2, m, p);
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    __exportStar(require_BubblegumEventType(), exports);
    __exportStar(require_Collection2(), exports);
    __exportStar(require_Creator2(), exports);
    __exportStar(require_InstructionName(), exports);
    __exportStar(require_LeafSchema(), exports);
    __exportStar(require_MetadataArgs(), exports);
    __exportStar(require_TokenProgramVersion(), exports);
    __exportStar(require_TokenStandard2(), exports);
    __exportStar(require_UseMethod2(), exports);
    __exportStar(require_Uses2(), exports);
    __exportStar(require_Version(), exports);
  }
});

// ../../node_modules/@metaplex-foundation/mpl-bubblegum/dist/src/generated/index.js
var require_generated2 = __commonJS({
  "../../node_modules/@metaplex-foundation/mpl-bubblegum/dist/src/generated/index.js"(exports) {
    "use strict";
    var __createBinding = exports && exports.__createBinding || (Object.create ? function(o2, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      var desc = Object.getOwnPropertyDescriptor(m, k);
      if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m[k];
        } };
      }
      Object.defineProperty(o2, k2, desc);
    } : function(o2, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      o2[k2] = m[k];
    });
    var __exportStar = exports && exports.__exportStar || function(m, exports2) {
      for (var p in m)
        if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports2, p))
          __createBinding(exports2, m, p);
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.PROGRAM_ID = exports.PROGRAM_ADDRESS = void 0;
    var web3_js_1 = (init_index_browser_esm(), __toCommonJS(index_browser_esm_exports));
    __exportStar(require_accounts2(), exports);
    __exportStar(require_errors6(), exports);
    __exportStar(require_instructions10(), exports);
    __exportStar(require_types5(), exports);
    exports.PROGRAM_ADDRESS = "BGUMAp9Gq7iTEuizy4pqaxsTyUCBK68MDfK752saRPUY";
    exports.PROGRAM_ID = new web3_js_1.PublicKey(exports.PROGRAM_ADDRESS);
  }
});

// ../../node_modules/@metaplex-foundation/mpl-bubblegum/dist/src/errors.js
var require_errors7 = __commonJS({
  "../../node_modules/@metaplex-foundation/mpl-bubblegum/dist/src/errors.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.cusper = void 0;
    var cusper_1 = require_cusper();
    var generated_1 = require_generated2();
    exports.cusper = (0, cusper_1.initCusper)(generated_1.errorFromCode);
  }
});

// ../../node_modules/@metaplex-foundation/mpl-bubblegum/dist/src/mpl-bubblegum.js
var require_mpl_bubblegum = __commonJS({
  "../../node_modules/@metaplex-foundation/mpl-bubblegum/dist/src/mpl-bubblegum.js"(exports) {
    "use strict";
    var __createBinding = exports && exports.__createBinding || (Object.create ? function(o2, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      var desc = Object.getOwnPropertyDescriptor(m, k);
      if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m[k];
        } };
      }
      Object.defineProperty(o2, k2, desc);
    } : function(o2, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      o2[k2] = m[k];
    });
    var __exportStar = exports && exports.__exportStar || function(m, exports2) {
      for (var p in m)
        if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports2, p))
          __createBinding(exports2, m, p);
    };
    var __importDefault = exports && exports.__importDefault || function(mod) {
      return mod && mod.__esModule ? mod : { "default": mod };
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.computeCompressedNFTHash = exports.computeCreatorHash = exports.computeDataHash = exports.getLeafAssetId = void 0;
    var generated_1 = require_generated2();
    var js_sha3_1 = require_sha3();
    var web3_js_1 = (init_index_browser_esm(), __toCommonJS(index_browser_esm_exports));
    var bn_js_1 = __importDefault(require_bn());
    __exportStar(require_generated2(), exports);
    function getLeafAssetId2(tree, leafIndex) {
      return __async(this, null, function* () {
        const [assetId] = yield web3_js_1.PublicKey.findProgramAddress([Buffer.from("asset", "utf8"), tree.toBuffer(), Uint8Array.from(leafIndex.toArray("le", 8))], generated_1.PROGRAM_ID);
        return assetId;
      });
    }
    exports.getLeafAssetId = getLeafAssetId2;
    function computeDataHash(metadata) {
      const [serializedMetadata] = generated_1.metadataArgsBeet.serialize(metadata);
      const metadataHash = Buffer.from(js_sha3_1.keccak_256.digest(serializedMetadata));
      const sellerFeeBasisPointsBuffer = new bn_js_1.default(metadata.sellerFeeBasisPoints).toBuffer("le", 2);
      return Buffer.from(js_sha3_1.keccak_256.digest(Buffer.concat([metadataHash, sellerFeeBasisPointsBuffer])));
    }
    exports.computeDataHash = computeDataHash;
    function computeCreatorHash(creators) {
      let bufferOfCreatorShares = Buffer.from([]);
      for (const creator of creators) {
        bufferOfCreatorShares = Buffer.concat([creator.address.toBuffer(), Buffer.from([creator.verified ? 1 : 0]), Buffer.from([creator.share])]);
      }
      return Buffer.from(js_sha3_1.keccak_256.digest(bufferOfCreatorShares));
    }
    exports.computeCreatorHash = computeCreatorHash;
    function computeCompressedNFTHash(assetId, owner, delegate, treeNonce, metadata) {
      const message = Buffer.concat([
        Buffer.from([1]),
        assetId.toBuffer(),
        owner.toBuffer(),
        delegate.toBuffer(),
        treeNonce.toBuffer("le", 8),
        computeDataHash(metadata),
        computeCreatorHash(metadata.creators)
      ]);
      return Buffer.from(js_sha3_1.keccak_256.digest(message));
    }
    exports.computeCompressedNFTHash = computeCompressedNFTHash;
  }
});

// ../../node_modules/@metaplex-foundation/mpl-bubblegum/dist/src/index.js
var require_src = __commonJS({
  "../../node_modules/@metaplex-foundation/mpl-bubblegum/dist/src/index.js"(exports) {
    "use strict";
    var __createBinding = exports && exports.__createBinding || (Object.create ? function(o2, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      var desc = Object.getOwnPropertyDescriptor(m, k);
      if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m[k];
        } };
      }
      Object.defineProperty(o2, k2, desc);
    } : function(o2, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      o2[k2] = m[k];
    });
    var __exportStar = exports && exports.__exportStar || function(m, exports2) {
      for (var p in m)
        if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports2, p))
          __createBinding(exports2, m, p);
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    __exportStar(require_generated2(), exports);
    __exportStar(require_errors7(), exports);
    __exportStar(require_mpl_bubblegum(), exports);
  }
});

// ../../node_modules/@solana/spl-account-compression/dist/cjs/generated/errors/index.js
var require_errors8 = __commonJS({
  "../../node_modules/@solana/spl-account-compression/dist/cjs/generated/errors/index.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.errorFromName = exports.errorFromCode = exports.LeafIndexOutOfBoundsError = exports.IncorrectAccountTypeError = exports.IncorrectAccountOwnerError = exports.IncorrectAuthorityError = exports.CanopyLengthMismatchError = exports.ConcurrentMerkleTreeConstantsErrorError = exports.ZeroCopyErrorError = exports.ConcurrentMerkleTreeErrorError = exports.IncorrectLeafLengthError = void 0;
    var createErrorFromCodeLookup = /* @__PURE__ */ new Map();
    var createErrorFromNameLookup = /* @__PURE__ */ new Map();
    var IncorrectLeafLengthError = class _IncorrectLeafLengthError extends Error {
      constructor() {
        super("Incorrect leaf length. Expected vec of 32 bytes");
        this.code = 6e3;
        this.name = "IncorrectLeafLength";
        if (typeof Error.captureStackTrace === "function") {
          Error.captureStackTrace(this, _IncorrectLeafLengthError);
        }
      }
    };
    exports.IncorrectLeafLengthError = IncorrectLeafLengthError;
    createErrorFromCodeLookup.set(6e3, () => new IncorrectLeafLengthError());
    createErrorFromNameLookup.set("IncorrectLeafLength", () => new IncorrectLeafLengthError());
    var ConcurrentMerkleTreeErrorError = class _ConcurrentMerkleTreeErrorError extends Error {
      constructor() {
        super("Concurrent merkle tree error");
        this.code = 6001;
        this.name = "ConcurrentMerkleTreeError";
        if (typeof Error.captureStackTrace === "function") {
          Error.captureStackTrace(this, _ConcurrentMerkleTreeErrorError);
        }
      }
    };
    exports.ConcurrentMerkleTreeErrorError = ConcurrentMerkleTreeErrorError;
    createErrorFromCodeLookup.set(6001, () => new ConcurrentMerkleTreeErrorError());
    createErrorFromNameLookup.set("ConcurrentMerkleTreeError", () => new ConcurrentMerkleTreeErrorError());
    var ZeroCopyErrorError = class _ZeroCopyErrorError extends Error {
      constructor() {
        super("Issue zero copying concurrent merkle tree data");
        this.code = 6002;
        this.name = "ZeroCopyError";
        if (typeof Error.captureStackTrace === "function") {
          Error.captureStackTrace(this, _ZeroCopyErrorError);
        }
      }
    };
    exports.ZeroCopyErrorError = ZeroCopyErrorError;
    createErrorFromCodeLookup.set(6002, () => new ZeroCopyErrorError());
    createErrorFromNameLookup.set("ZeroCopyError", () => new ZeroCopyErrorError());
    var ConcurrentMerkleTreeConstantsErrorError = class _ConcurrentMerkleTreeConstantsErrorError extends Error {
      constructor() {
        super("An unsupported max depth or max buffer size constant was provided");
        this.code = 6003;
        this.name = "ConcurrentMerkleTreeConstantsError";
        if (typeof Error.captureStackTrace === "function") {
          Error.captureStackTrace(this, _ConcurrentMerkleTreeConstantsErrorError);
        }
      }
    };
    exports.ConcurrentMerkleTreeConstantsErrorError = ConcurrentMerkleTreeConstantsErrorError;
    createErrorFromCodeLookup.set(6003, () => new ConcurrentMerkleTreeConstantsErrorError());
    createErrorFromNameLookup.set("ConcurrentMerkleTreeConstantsError", () => new ConcurrentMerkleTreeConstantsErrorError());
    var CanopyLengthMismatchError = class _CanopyLengthMismatchError extends Error {
      constructor() {
        super("Expected a different byte length for the merkle tree canopy");
        this.code = 6004;
        this.name = "CanopyLengthMismatch";
        if (typeof Error.captureStackTrace === "function") {
          Error.captureStackTrace(this, _CanopyLengthMismatchError);
        }
      }
    };
    exports.CanopyLengthMismatchError = CanopyLengthMismatchError;
    createErrorFromCodeLookup.set(6004, () => new CanopyLengthMismatchError());
    createErrorFromNameLookup.set("CanopyLengthMismatch", () => new CanopyLengthMismatchError());
    var IncorrectAuthorityError = class _IncorrectAuthorityError extends Error {
      constructor() {
        super("Provided authority does not match expected tree authority");
        this.code = 6005;
        this.name = "IncorrectAuthority";
        if (typeof Error.captureStackTrace === "function") {
          Error.captureStackTrace(this, _IncorrectAuthorityError);
        }
      }
    };
    exports.IncorrectAuthorityError = IncorrectAuthorityError;
    createErrorFromCodeLookup.set(6005, () => new IncorrectAuthorityError());
    createErrorFromNameLookup.set("IncorrectAuthority", () => new IncorrectAuthorityError());
    var IncorrectAccountOwnerError = class _IncorrectAccountOwnerError extends Error {
      constructor() {
        super("Account is owned by a different program, expected it to be owned by this program");
        this.code = 6006;
        this.name = "IncorrectAccountOwner";
        if (typeof Error.captureStackTrace === "function") {
          Error.captureStackTrace(this, _IncorrectAccountOwnerError);
        }
      }
    };
    exports.IncorrectAccountOwnerError = IncorrectAccountOwnerError;
    createErrorFromCodeLookup.set(6006, () => new IncorrectAccountOwnerError());
    createErrorFromNameLookup.set("IncorrectAccountOwner", () => new IncorrectAccountOwnerError());
    var IncorrectAccountTypeError = class _IncorrectAccountTypeError extends Error {
      constructor() {
        super("Account provided has incorrect account type");
        this.code = 6007;
        this.name = "IncorrectAccountType";
        if (typeof Error.captureStackTrace === "function") {
          Error.captureStackTrace(this, _IncorrectAccountTypeError);
        }
      }
    };
    exports.IncorrectAccountTypeError = IncorrectAccountTypeError;
    createErrorFromCodeLookup.set(6007, () => new IncorrectAccountTypeError());
    createErrorFromNameLookup.set("IncorrectAccountType", () => new IncorrectAccountTypeError());
    var LeafIndexOutOfBoundsError = class _LeafIndexOutOfBoundsError extends Error {
      constructor() {
        super("Leaf index of concurrent merkle tree is out of bounds");
        this.code = 6008;
        this.name = "LeafIndexOutOfBounds";
        if (typeof Error.captureStackTrace === "function") {
          Error.captureStackTrace(this, _LeafIndexOutOfBoundsError);
        }
      }
    };
    exports.LeafIndexOutOfBoundsError = LeafIndexOutOfBoundsError;
    createErrorFromCodeLookup.set(6008, () => new LeafIndexOutOfBoundsError());
    createErrorFromNameLookup.set("LeafIndexOutOfBounds", () => new LeafIndexOutOfBoundsError());
    function errorFromCode(code2) {
      const createError = createErrorFromCodeLookup.get(code2);
      return createError != null ? createError() : null;
    }
    exports.errorFromCode = errorFromCode;
    function errorFromName(name) {
      const createError = createErrorFromNameLookup.get(name);
      return createError != null ? createError() : null;
    }
    exports.errorFromName = errorFromName;
  }
});

// ../../node_modules/@solana/spl-account-compression/dist/cjs/generated/instructions/append.js
var require_append = __commonJS({
  "../../node_modules/@solana/spl-account-compression/dist/cjs/generated/instructions/append.js"(exports) {
    "use strict";
    var __createBinding = exports && exports.__createBinding || (Object.create ? function(o2, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      var desc = Object.getOwnPropertyDescriptor(m, k);
      if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m[k];
        } };
      }
      Object.defineProperty(o2, k2, desc);
    } : function(o2, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      o2[k2] = m[k];
    });
    var __setModuleDefault = exports && exports.__setModuleDefault || (Object.create ? function(o2, v) {
      Object.defineProperty(o2, "default", { enumerable: true, value: v });
    } : function(o2, v) {
      o2["default"] = v;
    });
    var __importStar = exports && exports.__importStar || function(mod) {
      if (mod && mod.__esModule)
        return mod;
      var result = {};
      if (mod != null) {
        for (var k in mod)
          if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k))
            __createBinding(result, mod, k);
      }
      __setModuleDefault(result, mod);
      return result;
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.createAppendInstruction = exports.appendInstructionDiscriminator = exports.appendStruct = void 0;
    var beet9 = __importStar(require_beet());
    var web3 = __importStar((init_index_browser_esm(), __toCommonJS(index_browser_esm_exports)));
    exports.appendStruct = new beet9.BeetArgsStruct([
      ["instructionDiscriminator", beet9.uniformFixedSizeArray(beet9.u8, 8)],
      ["leaf", beet9.uniformFixedSizeArray(beet9.u8, 32)]
    ], "AppendInstructionArgs");
    exports.appendInstructionDiscriminator = [149, 120, 18, 222, 236, 225, 88, 203];
    function createAppendInstruction(accounts, args, programId = new web3.PublicKey("cmtDvXumGCrqC1Age74AVPhSRVXJMd8PJS91L8KbNCK")) {
      const [data] = exports.appendStruct.serialize(Object.assign({ instructionDiscriminator: exports.appendInstructionDiscriminator }, args));
      const keys = [
        {
          isSigner: false,
          isWritable: true,
          pubkey: accounts.merkleTree
        },
        {
          isSigner: true,
          isWritable: false,
          pubkey: accounts.authority
        },
        {
          isSigner: false,
          isWritable: false,
          pubkey: accounts.noop
        }
      ];
      if (accounts.anchorRemainingAccounts != null) {
        for (const acc of accounts.anchorRemainingAccounts) {
          keys.push(acc);
        }
      }
      const ix = new web3.TransactionInstruction({
        data,
        keys,
        programId
      });
      return ix;
    }
    exports.createAppendInstruction = createAppendInstruction;
  }
});

// ../../node_modules/@solana/spl-account-compression/dist/cjs/generated/instructions/closeEmptyTree.js
var require_closeEmptyTree = __commonJS({
  "../../node_modules/@solana/spl-account-compression/dist/cjs/generated/instructions/closeEmptyTree.js"(exports) {
    "use strict";
    var __createBinding = exports && exports.__createBinding || (Object.create ? function(o2, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      var desc = Object.getOwnPropertyDescriptor(m, k);
      if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m[k];
        } };
      }
      Object.defineProperty(o2, k2, desc);
    } : function(o2, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      o2[k2] = m[k];
    });
    var __setModuleDefault = exports && exports.__setModuleDefault || (Object.create ? function(o2, v) {
      Object.defineProperty(o2, "default", { enumerable: true, value: v });
    } : function(o2, v) {
      o2["default"] = v;
    });
    var __importStar = exports && exports.__importStar || function(mod) {
      if (mod && mod.__esModule)
        return mod;
      var result = {};
      if (mod != null) {
        for (var k in mod)
          if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k))
            __createBinding(result, mod, k);
      }
      __setModuleDefault(result, mod);
      return result;
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.createCloseEmptyTreeInstruction = exports.closeEmptyTreeInstructionDiscriminator = exports.closeEmptyTreeStruct = void 0;
    var beet9 = __importStar(require_beet());
    var web3 = __importStar((init_index_browser_esm(), __toCommonJS(index_browser_esm_exports)));
    exports.closeEmptyTreeStruct = new beet9.BeetArgsStruct([["instructionDiscriminator", beet9.uniformFixedSizeArray(beet9.u8, 8)]], "CloseEmptyTreeInstructionArgs");
    exports.closeEmptyTreeInstructionDiscriminator = [50, 14, 219, 107, 78, 103, 16, 103];
    function createCloseEmptyTreeInstruction(accounts, programId = new web3.PublicKey("cmtDvXumGCrqC1Age74AVPhSRVXJMd8PJS91L8KbNCK")) {
      const [data] = exports.closeEmptyTreeStruct.serialize({
        instructionDiscriminator: exports.closeEmptyTreeInstructionDiscriminator
      });
      const keys = [
        {
          isSigner: false,
          isWritable: true,
          pubkey: accounts.merkleTree
        },
        {
          isSigner: true,
          isWritable: false,
          pubkey: accounts.authority
        },
        {
          isSigner: false,
          isWritable: true,
          pubkey: accounts.recipient
        }
      ];
      if (accounts.anchorRemainingAccounts != null) {
        for (const acc of accounts.anchorRemainingAccounts) {
          keys.push(acc);
        }
      }
      const ix = new web3.TransactionInstruction({
        data,
        keys,
        programId
      });
      return ix;
    }
    exports.createCloseEmptyTreeInstruction = createCloseEmptyTreeInstruction;
  }
});

// ../../node_modules/@solana/spl-account-compression/dist/cjs/generated/instructions/initEmptyMerkleTree.js
var require_initEmptyMerkleTree = __commonJS({
  "../../node_modules/@solana/spl-account-compression/dist/cjs/generated/instructions/initEmptyMerkleTree.js"(exports) {
    "use strict";
    var __createBinding = exports && exports.__createBinding || (Object.create ? function(o2, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      var desc = Object.getOwnPropertyDescriptor(m, k);
      if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m[k];
        } };
      }
      Object.defineProperty(o2, k2, desc);
    } : function(o2, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      o2[k2] = m[k];
    });
    var __setModuleDefault = exports && exports.__setModuleDefault || (Object.create ? function(o2, v) {
      Object.defineProperty(o2, "default", { enumerable: true, value: v });
    } : function(o2, v) {
      o2["default"] = v;
    });
    var __importStar = exports && exports.__importStar || function(mod) {
      if (mod && mod.__esModule)
        return mod;
      var result = {};
      if (mod != null) {
        for (var k in mod)
          if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k))
            __createBinding(result, mod, k);
      }
      __setModuleDefault(result, mod);
      return result;
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.createInitEmptyMerkleTreeInstruction = exports.initEmptyMerkleTreeInstructionDiscriminator = exports.initEmptyMerkleTreeStruct = void 0;
    var beet9 = __importStar(require_beet());
    var web3 = __importStar((init_index_browser_esm(), __toCommonJS(index_browser_esm_exports)));
    exports.initEmptyMerkleTreeStruct = new beet9.BeetArgsStruct([
      ["instructionDiscriminator", beet9.uniformFixedSizeArray(beet9.u8, 8)],
      ["maxDepth", beet9.u32],
      ["maxBufferSize", beet9.u32]
    ], "InitEmptyMerkleTreeInstructionArgs");
    exports.initEmptyMerkleTreeInstructionDiscriminator = [191, 11, 119, 7, 180, 107, 220, 110];
    function createInitEmptyMerkleTreeInstruction(accounts, args, programId = new web3.PublicKey("cmtDvXumGCrqC1Age74AVPhSRVXJMd8PJS91L8KbNCK")) {
      const [data] = exports.initEmptyMerkleTreeStruct.serialize(Object.assign({ instructionDiscriminator: exports.initEmptyMerkleTreeInstructionDiscriminator }, args));
      const keys = [
        {
          isSigner: false,
          isWritable: true,
          pubkey: accounts.merkleTree
        },
        {
          isSigner: true,
          isWritable: false,
          pubkey: accounts.authority
        },
        {
          isSigner: false,
          isWritable: false,
          pubkey: accounts.noop
        }
      ];
      if (accounts.anchorRemainingAccounts != null) {
        for (const acc of accounts.anchorRemainingAccounts) {
          keys.push(acc);
        }
      }
      const ix = new web3.TransactionInstruction({
        data,
        keys,
        programId
      });
      return ix;
    }
    exports.createInitEmptyMerkleTreeInstruction = createInitEmptyMerkleTreeInstruction;
  }
});

// ../../node_modules/@solana/spl-account-compression/dist/cjs/generated/instructions/insertOrAppend.js
var require_insertOrAppend = __commonJS({
  "../../node_modules/@solana/spl-account-compression/dist/cjs/generated/instructions/insertOrAppend.js"(exports) {
    "use strict";
    var __createBinding = exports && exports.__createBinding || (Object.create ? function(o2, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      var desc = Object.getOwnPropertyDescriptor(m, k);
      if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m[k];
        } };
      }
      Object.defineProperty(o2, k2, desc);
    } : function(o2, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      o2[k2] = m[k];
    });
    var __setModuleDefault = exports && exports.__setModuleDefault || (Object.create ? function(o2, v) {
      Object.defineProperty(o2, "default", { enumerable: true, value: v });
    } : function(o2, v) {
      o2["default"] = v;
    });
    var __importStar = exports && exports.__importStar || function(mod) {
      if (mod && mod.__esModule)
        return mod;
      var result = {};
      if (mod != null) {
        for (var k in mod)
          if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k))
            __createBinding(result, mod, k);
      }
      __setModuleDefault(result, mod);
      return result;
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.createInsertOrAppendInstruction = exports.insertOrAppendInstructionDiscriminator = exports.insertOrAppendStruct = void 0;
    var beet9 = __importStar(require_beet());
    var web3 = __importStar((init_index_browser_esm(), __toCommonJS(index_browser_esm_exports)));
    exports.insertOrAppendStruct = new beet9.BeetArgsStruct([
      ["instructionDiscriminator", beet9.uniformFixedSizeArray(beet9.u8, 8)],
      ["root", beet9.uniformFixedSizeArray(beet9.u8, 32)],
      ["leaf", beet9.uniformFixedSizeArray(beet9.u8, 32)],
      ["index", beet9.u32]
    ], "InsertOrAppendInstructionArgs");
    exports.insertOrAppendInstructionDiscriminator = [6, 42, 50, 190, 51, 109, 178, 168];
    function createInsertOrAppendInstruction(accounts, args, programId = new web3.PublicKey("cmtDvXumGCrqC1Age74AVPhSRVXJMd8PJS91L8KbNCK")) {
      const [data] = exports.insertOrAppendStruct.serialize(Object.assign({ instructionDiscriminator: exports.insertOrAppendInstructionDiscriminator }, args));
      const keys = [
        {
          isSigner: false,
          isWritable: true,
          pubkey: accounts.merkleTree
        },
        {
          isSigner: true,
          isWritable: false,
          pubkey: accounts.authority
        },
        {
          isSigner: false,
          isWritable: false,
          pubkey: accounts.noop
        }
      ];
      if (accounts.anchorRemainingAccounts != null) {
        for (const acc of accounts.anchorRemainingAccounts) {
          keys.push(acc);
        }
      }
      const ix = new web3.TransactionInstruction({
        data,
        keys,
        programId
      });
      return ix;
    }
    exports.createInsertOrAppendInstruction = createInsertOrAppendInstruction;
  }
});

// ../../node_modules/@solana/spl-account-compression/dist/cjs/generated/instructions/replaceLeaf.js
var require_replaceLeaf = __commonJS({
  "../../node_modules/@solana/spl-account-compression/dist/cjs/generated/instructions/replaceLeaf.js"(exports) {
    "use strict";
    var __createBinding = exports && exports.__createBinding || (Object.create ? function(o2, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      var desc = Object.getOwnPropertyDescriptor(m, k);
      if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m[k];
        } };
      }
      Object.defineProperty(o2, k2, desc);
    } : function(o2, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      o2[k2] = m[k];
    });
    var __setModuleDefault = exports && exports.__setModuleDefault || (Object.create ? function(o2, v) {
      Object.defineProperty(o2, "default", { enumerable: true, value: v });
    } : function(o2, v) {
      o2["default"] = v;
    });
    var __importStar = exports && exports.__importStar || function(mod) {
      if (mod && mod.__esModule)
        return mod;
      var result = {};
      if (mod != null) {
        for (var k in mod)
          if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k))
            __createBinding(result, mod, k);
      }
      __setModuleDefault(result, mod);
      return result;
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.createReplaceLeafInstruction = exports.replaceLeafInstructionDiscriminator = exports.replaceLeafStruct = void 0;
    var beet9 = __importStar(require_beet());
    var web3 = __importStar((init_index_browser_esm(), __toCommonJS(index_browser_esm_exports)));
    exports.replaceLeafStruct = new beet9.BeetArgsStruct([
      ["instructionDiscriminator", beet9.uniformFixedSizeArray(beet9.u8, 8)],
      ["root", beet9.uniformFixedSizeArray(beet9.u8, 32)],
      ["previousLeaf", beet9.uniformFixedSizeArray(beet9.u8, 32)],
      ["newLeaf", beet9.uniformFixedSizeArray(beet9.u8, 32)],
      ["index", beet9.u32]
    ], "ReplaceLeafInstructionArgs");
    exports.replaceLeafInstructionDiscriminator = [204, 165, 76, 100, 73, 147, 0, 128];
    function createReplaceLeafInstruction(accounts, args, programId = new web3.PublicKey("cmtDvXumGCrqC1Age74AVPhSRVXJMd8PJS91L8KbNCK")) {
      const [data] = exports.replaceLeafStruct.serialize(Object.assign({ instructionDiscriminator: exports.replaceLeafInstructionDiscriminator }, args));
      const keys = [
        {
          isSigner: false,
          isWritable: true,
          pubkey: accounts.merkleTree
        },
        {
          isSigner: true,
          isWritable: false,
          pubkey: accounts.authority
        },
        {
          isSigner: false,
          isWritable: false,
          pubkey: accounts.noop
        }
      ];
      if (accounts.anchorRemainingAccounts != null) {
        for (const acc of accounts.anchorRemainingAccounts) {
          keys.push(acc);
        }
      }
      const ix = new web3.TransactionInstruction({
        data,
        keys,
        programId
      });
      return ix;
    }
    exports.createReplaceLeafInstruction = createReplaceLeafInstruction;
  }
});

// ../../node_modules/@solana/spl-account-compression/node_modules/@metaplex-foundation/beet-solana/dist/cjs/src/keys.js
var require_keys3 = __commonJS({
  "../../node_modules/@solana/spl-account-compression/node_modules/@metaplex-foundation/beet-solana/dist/cjs/src/keys.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.keysTypeMap = exports.publicKey = void 0;
    var web3_js_1 = (init_index_browser_esm(), __toCommonJS(index_browser_esm_exports));
    var beet_1 = require_beet();
    var BEET_SOLANA_PACKAGE = "@metaplex-foundation/beet-solana";
    var SOLANA_WEB3_PACKAGE = "@solana/web3.js";
    var uint8Array32 = (0, beet_1.fixedSizeUint8Array)(32);
    exports.publicKey = {
      write: function(buf, offset, value) {
        const arr = value.toBytes();
        uint8Array32.write(buf, offset, arr);
      },
      read: function(buf, offset) {
        const bytes = uint8Array32.read(buf, offset);
        return new web3_js_1.PublicKey(bytes);
      },
      byteSize: uint8Array32.byteSize,
      description: "PublicKey"
    };
    exports.keysTypeMap = {
      publicKey: {
        beet: "publicKey",
        isFixable: false,
        sourcePack: BEET_SOLANA_PACKAGE,
        ts: "PublicKey",
        pack: SOLANA_WEB3_PACKAGE
      }
    };
  }
});

// ../../node_modules/@solana/spl-account-compression/node_modules/@metaplex-foundation/beet-solana/dist/cjs/src/utils.js
var require_utils5 = __commonJS({
  "../../node_modules/@solana/spl-account-compression/node_modules/@metaplex-foundation/beet-solana/dist/cjs/src/utils.js"(exports) {
    "use strict";
    var __importDefault = exports && exports.__importDefault || function(mod) {
      return mod && mod.__esModule ? mod : { "default": mod };
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.logTrace = exports.logDebug = exports.logInfo = exports.logError = void 0;
    var debug_1 = __importDefault(require_browser2());
    exports.logError = (0, debug_1.default)("beet:error");
    exports.logInfo = (0, debug_1.default)("beet:info");
    exports.logDebug = (0, debug_1.default)("beet:debug");
    exports.logTrace = (0, debug_1.default)("beet:trace");
  }
});

// ../../node_modules/@solana/spl-account-compression/node_modules/@metaplex-foundation/beet-solana/dist/cjs/src/gpa/util.js
var require_util3 = __commonJS({
  "../../node_modules/@solana/spl-account-compression/node_modules/@metaplex-foundation/beet-solana/dist/cjs/src/gpa/util.js"(exports) {
    "use strict";
    var __importDefault = exports && exports.__importDefault || function(mod) {
      return mod && mod.__esModule ? mod : { "default": mod };
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.encodeFixedBeet = void 0;
    var bs58_1 = __importDefault(require_bs58());
    function encodeFixedBeet(beet9, val) {
      const buf = Buffer.alloc(beet9.byteSize);
      beet9.write(buf, 0, val);
      return bs58_1.default.encode(buf);
    }
    exports.encodeFixedBeet = encodeFixedBeet;
  }
});

// ../../node_modules/@solana/spl-account-compression/node_modules/@metaplex-foundation/beet-solana/dist/cjs/src/gpa/index.js
var require_gpa3 = __commonJS({
  "../../node_modules/@solana/spl-account-compression/node_modules/@metaplex-foundation/beet-solana/dist/cjs/src/gpa/index.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.GpaBuilder = void 0;
    var beet_1 = require_beet();
    var assert_1 = require_assert();
    var utils_1 = require_utils5();
    var util_1 = require_util3();
    var GpaBuilder2 = class _GpaBuilder {
      constructor(programId, beets, accountSize) {
        this.programId = programId;
        this.beets = beets;
        this.accountSize = accountSize;
        this.config = {};
      }
      _addFilter(filter) {
        if (this.config.filters == null) {
          this.config.filters = [];
        }
        this.config.filters.push(filter);
        return this;
      }
      _addInnerFilter(key, innerKey, val) {
        (0, utils_1.logTrace)(`gpa.addInnerFilter: ${key}.${innerKey}`);
        const outerBeetInfo = this.beets.get(key);
        (0, assert_1.strict)(outerBeetInfo != null, "Outer filter key needs to be an existing field name");
        const beetInfo = outerBeetInfo.beet;
        let offset = outerBeetInfo.offset;
        const outerBeet = (0, beet_1.isFixedSizeBeet)(beetInfo) ? beetInfo : beetInfo.toFixedFromValue(val);
        let beet9;
        for (const [k, v] of outerBeet.fields) {
          if (k === innerKey) {
            beet9 = v;
            break;
          }
          offset += v.byteSize;
        }
        (0, assert_1.strict)(beet9 != null, `${innerKey} is not a field of the ${key} struct`);
        const bytes = (0, util_1.encodeFixedBeet)(beet9, val);
        this._addFilter({ memcmp: { offset, bytes } });
        return this;
      }
      /**
       * Adds a _memcmp_ filter for a field inside a field which is a struct value.
       * The provided keys need to be separated by a `.` and only one level of
       * nesting is supported at this point.
       *
       * The filter is applied to the inner value.
       *
       * ## Example
       *
       * ### Given:
       *
       * ```typescript
       * type Inner = {
       *   a: number
       * }
       * type Outer = {
       *   idx: number
       *   inner: Inner
       * }
       * ```
       * ### Apply a filter on `a` of the `Inner` type:
       *
       * ```typescript
       * gpaBuilder.addInnerFilter('inner.a', 2)
       * ```
       *
       * @param keys - the names of the fields by which to filter, i.e. `'outer.inner'`
       * @param val - the field value that the filter should match
       */
      addInnerFilter(keys, val) {
        const parts = keys.split(".");
        assert_1.strict.equal(parts.length, 2, `inner filters can go only one level deep, i.e. 'outer.inner' is ok, but 'outer.inner.deep' is not`);
        const [ka, kb] = parts;
        return this._addInnerFilter(ka, kb, val);
      }
      /**
       * Adds a _memcmp_ filter for the provided {@link key} of the struct.
       *
       * @param key - the name of the field by which to filter
       * @param val - the field value that the filter should match
       */
      addFilter(key, val) {
        const beetInfo = this.beets.get(key);
        (0, assert_1.strict)(beetInfo != null, "Filter key needs to be an existing field name");
        const beet9 = (0, beet_1.isFixedSizeBeet)(beetInfo.beet) ? beetInfo.beet : beetInfo.beet.toFixedFromValue(val);
        const bytes = (0, util_1.encodeFixedBeet)(beet9, val);
        this._addFilter({ memcmp: { offset: beetInfo.offset, bytes } });
        return this;
      }
      /**
       * Adds a `dataSize` filter which will match on account's sizes.
       * You have to provide that {@link size} for accounts that don't have a fixed size.
       * For _fixed_ size accounts that size is determined for you.
       *
       * @param size - the account size to match for
       */
      dataSize(size) {
        size = size !== null && size !== void 0 ? size : this.accountSize;
        (0, assert_1.strict)(size != null, "for accounts of dynamic size the dataSize arg needs to be provided");
        return this._addFilter({ dataSize: size });
      }
      /**
       * Attempts to find the accounts matching the configured filters.
       *
       * @param connection used to query the program accounts on the cluster
       */
      run(connection) {
        return connection.getProgramAccounts(this.programId, this.config);
      }
      /**
       * Creates a GPA builder that supports adding up to four filters for
       * fixed size fields.
       *
       * Once a non-fixed field is encountered, the remaining fields following it
       * will not be included as a filter option since their position in the
       * bytes array will change depending on the content of the non-fixed field.
       *
       * @param programId - the id of the program that owns the accounts we are querying
       * @param beetFields - the beet fields that make up the structure of the account data
       */
      static fromBeetFields(programId, beetFields) {
        const map2 = /* @__PURE__ */ new Map();
        let offset = 0;
        let encounteredNonFixed = false;
        for (const [k, v] of beetFields) {
          map2.set(k, { beet: v, offset });
          if (!(0, beet_1.isFixedSizeBeet)(v)) {
            encounteredNonFixed = true;
            break;
          }
          offset += v.byteSize;
        }
        const accountSize = encounteredNonFixed ? void 0 : offset;
        return new _GpaBuilder(programId, map2, accountSize);
      }
      /**
       * Convenience wrapper around {@link GpaBuilder.fromBeetFields} that allows
       * providing a struct which contains the beet fields.
       *
       * @param programId - the id of the program that owns the accounts we are querying
       * @param struct - containing the beet `fields` specifying the layout of the account
       */
      static fromStruct(programId, struct51) {
        return _GpaBuilder.fromBeetFields(programId, struct51.fields);
      }
    };
    exports.GpaBuilder = GpaBuilder2;
  }
});

// ../../node_modules/@solana/spl-account-compression/node_modules/@metaplex-foundation/beet-solana/dist/cjs/src/beet-solana.js
var require_beet_solana3 = __commonJS({
  "../../node_modules/@solana/spl-account-compression/node_modules/@metaplex-foundation/beet-solana/dist/cjs/src/beet-solana.js"(exports) {
    "use strict";
    var __createBinding = exports && exports.__createBinding || (Object.create ? function(o2, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      var desc = Object.getOwnPropertyDescriptor(m, k);
      if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m[k];
        } };
      }
      Object.defineProperty(o2, k2, desc);
    } : function(o2, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      o2[k2] = m[k];
    });
    var __exportStar = exports && exports.__exportStar || function(m, exports2) {
      for (var p in m)
        if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports2, p))
          __createBinding(exports2, m, p);
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.supportedTypeMap = void 0;
    var keys_1 = require_keys3();
    __exportStar(require_keys3(), exports);
    __exportStar(require_gpa3(), exports);
    exports.supportedTypeMap = keys_1.keysTypeMap;
  }
});

// ../../node_modules/@solana/spl-account-compression/dist/cjs/generated/instructions/transferAuthority.js
var require_transferAuthority = __commonJS({
  "../../node_modules/@solana/spl-account-compression/dist/cjs/generated/instructions/transferAuthority.js"(exports) {
    "use strict";
    var __createBinding = exports && exports.__createBinding || (Object.create ? function(o2, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      var desc = Object.getOwnPropertyDescriptor(m, k);
      if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m[k];
        } };
      }
      Object.defineProperty(o2, k2, desc);
    } : function(o2, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      o2[k2] = m[k];
    });
    var __setModuleDefault = exports && exports.__setModuleDefault || (Object.create ? function(o2, v) {
      Object.defineProperty(o2, "default", { enumerable: true, value: v });
    } : function(o2, v) {
      o2["default"] = v;
    });
    var __importStar = exports && exports.__importStar || function(mod) {
      if (mod && mod.__esModule)
        return mod;
      var result = {};
      if (mod != null) {
        for (var k in mod)
          if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k))
            __createBinding(result, mod, k);
      }
      __setModuleDefault(result, mod);
      return result;
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.createTransferAuthorityInstruction = exports.transferAuthorityInstructionDiscriminator = exports.transferAuthorityStruct = void 0;
    var beet9 = __importStar(require_beet());
    var beetSolana = __importStar(require_beet_solana3());
    var web3 = __importStar((init_index_browser_esm(), __toCommonJS(index_browser_esm_exports)));
    exports.transferAuthorityStruct = new beet9.BeetArgsStruct([
      ["instructionDiscriminator", beet9.uniformFixedSizeArray(beet9.u8, 8)],
      ["newAuthority", beetSolana.publicKey]
    ], "TransferAuthorityInstructionArgs");
    exports.transferAuthorityInstructionDiscriminator = [48, 169, 76, 72, 229, 180, 55, 161];
    function createTransferAuthorityInstruction(accounts, args, programId = new web3.PublicKey("cmtDvXumGCrqC1Age74AVPhSRVXJMd8PJS91L8KbNCK")) {
      const [data] = exports.transferAuthorityStruct.serialize(Object.assign({ instructionDiscriminator: exports.transferAuthorityInstructionDiscriminator }, args));
      const keys = [
        {
          isSigner: false,
          isWritable: true,
          pubkey: accounts.merkleTree
        },
        {
          isSigner: true,
          isWritable: false,
          pubkey: accounts.authority
        }
      ];
      if (accounts.anchorRemainingAccounts != null) {
        for (const acc of accounts.anchorRemainingAccounts) {
          keys.push(acc);
        }
      }
      const ix = new web3.TransactionInstruction({
        data,
        keys,
        programId
      });
      return ix;
    }
    exports.createTransferAuthorityInstruction = createTransferAuthorityInstruction;
  }
});

// ../../node_modules/@solana/spl-account-compression/dist/cjs/generated/instructions/verifyLeaf.js
var require_verifyLeaf = __commonJS({
  "../../node_modules/@solana/spl-account-compression/dist/cjs/generated/instructions/verifyLeaf.js"(exports) {
    "use strict";
    var __createBinding = exports && exports.__createBinding || (Object.create ? function(o2, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      var desc = Object.getOwnPropertyDescriptor(m, k);
      if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m[k];
        } };
      }
      Object.defineProperty(o2, k2, desc);
    } : function(o2, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      o2[k2] = m[k];
    });
    var __setModuleDefault = exports && exports.__setModuleDefault || (Object.create ? function(o2, v) {
      Object.defineProperty(o2, "default", { enumerable: true, value: v });
    } : function(o2, v) {
      o2["default"] = v;
    });
    var __importStar = exports && exports.__importStar || function(mod) {
      if (mod && mod.__esModule)
        return mod;
      var result = {};
      if (mod != null) {
        for (var k in mod)
          if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k))
            __createBinding(result, mod, k);
      }
      __setModuleDefault(result, mod);
      return result;
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.createVerifyLeafInstruction = exports.verifyLeafInstructionDiscriminator = exports.verifyLeafStruct = void 0;
    var beet9 = __importStar(require_beet());
    var web3 = __importStar((init_index_browser_esm(), __toCommonJS(index_browser_esm_exports)));
    exports.verifyLeafStruct = new beet9.BeetArgsStruct([
      ["instructionDiscriminator", beet9.uniformFixedSizeArray(beet9.u8, 8)],
      ["root", beet9.uniformFixedSizeArray(beet9.u8, 32)],
      ["leaf", beet9.uniformFixedSizeArray(beet9.u8, 32)],
      ["index", beet9.u32]
    ], "VerifyLeafInstructionArgs");
    exports.verifyLeafInstructionDiscriminator = [124, 220, 22, 223, 104, 10, 250, 224];
    function createVerifyLeafInstruction(accounts, args, programId = new web3.PublicKey("cmtDvXumGCrqC1Age74AVPhSRVXJMd8PJS91L8KbNCK")) {
      const [data] = exports.verifyLeafStruct.serialize(Object.assign({ instructionDiscriminator: exports.verifyLeafInstructionDiscriminator }, args));
      const keys = [
        {
          isSigner: false,
          isWritable: false,
          pubkey: accounts.merkleTree
        }
      ];
      if (accounts.anchorRemainingAccounts != null) {
        for (const acc of accounts.anchorRemainingAccounts) {
          keys.push(acc);
        }
      }
      const ix = new web3.TransactionInstruction({
        data,
        keys,
        programId
      });
      return ix;
    }
    exports.createVerifyLeafInstruction = createVerifyLeafInstruction;
  }
});

// ../../node_modules/@solana/spl-account-compression/dist/cjs/generated/instructions/index.js
var require_instructions11 = __commonJS({
  "../../node_modules/@solana/spl-account-compression/dist/cjs/generated/instructions/index.js"(exports) {
    "use strict";
    var __createBinding = exports && exports.__createBinding || (Object.create ? function(o2, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      var desc = Object.getOwnPropertyDescriptor(m, k);
      if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m[k];
        } };
      }
      Object.defineProperty(o2, k2, desc);
    } : function(o2, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      o2[k2] = m[k];
    });
    var __exportStar = exports && exports.__exportStar || function(m, exports2) {
      for (var p in m)
        if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports2, p))
          __createBinding(exports2, m, p);
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    __exportStar(require_append(), exports);
    __exportStar(require_closeEmptyTree(), exports);
    __exportStar(require_initEmptyMerkleTree(), exports);
    __exportStar(require_insertOrAppend(), exports);
    __exportStar(require_replaceLeaf(), exports);
    __exportStar(require_transferAuthority(), exports);
    __exportStar(require_verifyLeaf(), exports);
  }
});

// ../../node_modules/@solana/spl-account-compression/dist/cjs/generated/types/ApplicationDataEventV1.js
var require_ApplicationDataEventV1 = __commonJS({
  "../../node_modules/@solana/spl-account-compression/dist/cjs/generated/types/ApplicationDataEventV1.js"(exports) {
    "use strict";
    var __createBinding = exports && exports.__createBinding || (Object.create ? function(o2, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      var desc = Object.getOwnPropertyDescriptor(m, k);
      if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m[k];
        } };
      }
      Object.defineProperty(o2, k2, desc);
    } : function(o2, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      o2[k2] = m[k];
    });
    var __setModuleDefault = exports && exports.__setModuleDefault || (Object.create ? function(o2, v) {
      Object.defineProperty(o2, "default", { enumerable: true, value: v });
    } : function(o2, v) {
      o2["default"] = v;
    });
    var __importStar = exports && exports.__importStar || function(mod) {
      if (mod && mod.__esModule)
        return mod;
      var result = {};
      if (mod != null) {
        for (var k in mod)
          if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k))
            __createBinding(result, mod, k);
      }
      __setModuleDefault(result, mod);
      return result;
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.applicationDataEventV1Beet = void 0;
    var beet9 = __importStar(require_beet());
    exports.applicationDataEventV1Beet = new beet9.FixableBeetArgsStruct([["applicationData", beet9.bytes]], "ApplicationDataEventV1");
  }
});

// ../../node_modules/@solana/spl-account-compression/dist/cjs/generated/types/ApplicationDataEvent.js
var require_ApplicationDataEvent = __commonJS({
  "../../node_modules/@solana/spl-account-compression/dist/cjs/generated/types/ApplicationDataEvent.js"(exports) {
    "use strict";
    var __createBinding = exports && exports.__createBinding || (Object.create ? function(o2, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      var desc = Object.getOwnPropertyDescriptor(m, k);
      if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m[k];
        } };
      }
      Object.defineProperty(o2, k2, desc);
    } : function(o2, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      o2[k2] = m[k];
    });
    var __setModuleDefault = exports && exports.__setModuleDefault || (Object.create ? function(o2, v) {
      Object.defineProperty(o2, "default", { enumerable: true, value: v });
    } : function(o2, v) {
      o2["default"] = v;
    });
    var __importStar = exports && exports.__importStar || function(mod) {
      if (mod && mod.__esModule)
        return mod;
      var result = {};
      if (mod != null) {
        for (var k in mod)
          if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k))
            __createBinding(result, mod, k);
      }
      __setModuleDefault(result, mod);
      return result;
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.applicationDataEventBeet = exports.isApplicationDataEventV1 = void 0;
    var beet9 = __importStar(require_beet());
    var ApplicationDataEventV1_1 = require_ApplicationDataEventV1();
    var isApplicationDataEventV1 = (x) => x.__kind === "V1";
    exports.isApplicationDataEventV1 = isApplicationDataEventV1;
    exports.applicationDataEventBeet = beet9.dataEnum([
      [
        "V1",
        new beet9.FixableBeetArgsStruct([["fields", beet9.tuple([ApplicationDataEventV1_1.applicationDataEventV1Beet])]], 'ApplicationDataEventRecord["V1"]')
      ]
    ]);
  }
});

// ../../node_modules/@solana/spl-account-compression/dist/cjs/generated/types/PathNode.js
var require_PathNode = __commonJS({
  "../../node_modules/@solana/spl-account-compression/dist/cjs/generated/types/PathNode.js"(exports) {
    "use strict";
    var __createBinding = exports && exports.__createBinding || (Object.create ? function(o2, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      var desc = Object.getOwnPropertyDescriptor(m, k);
      if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m[k];
        } };
      }
      Object.defineProperty(o2, k2, desc);
    } : function(o2, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      o2[k2] = m[k];
    });
    var __setModuleDefault = exports && exports.__setModuleDefault || (Object.create ? function(o2, v) {
      Object.defineProperty(o2, "default", { enumerable: true, value: v });
    } : function(o2, v) {
      o2["default"] = v;
    });
    var __importStar = exports && exports.__importStar || function(mod) {
      if (mod && mod.__esModule)
        return mod;
      var result = {};
      if (mod != null) {
        for (var k in mod)
          if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k))
            __createBinding(result, mod, k);
      }
      __setModuleDefault(result, mod);
      return result;
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.pathNodeBeet = void 0;
    var beet9 = __importStar(require_beet());
    exports.pathNodeBeet = new beet9.BeetArgsStruct([
      ["node", beet9.uniformFixedSizeArray(beet9.u8, 32)],
      ["index", beet9.u32]
    ], "PathNode");
  }
});

// ../../node_modules/@solana/spl-account-compression/dist/cjs/generated/types/ChangeLogEventV1.js
var require_ChangeLogEventV1 = __commonJS({
  "../../node_modules/@solana/spl-account-compression/dist/cjs/generated/types/ChangeLogEventV1.js"(exports) {
    "use strict";
    var __createBinding = exports && exports.__createBinding || (Object.create ? function(o2, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      var desc = Object.getOwnPropertyDescriptor(m, k);
      if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m[k];
        } };
      }
      Object.defineProperty(o2, k2, desc);
    } : function(o2, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      o2[k2] = m[k];
    });
    var __setModuleDefault = exports && exports.__setModuleDefault || (Object.create ? function(o2, v) {
      Object.defineProperty(o2, "default", { enumerable: true, value: v });
    } : function(o2, v) {
      o2["default"] = v;
    });
    var __importStar = exports && exports.__importStar || function(mod) {
      if (mod && mod.__esModule)
        return mod;
      var result = {};
      if (mod != null) {
        for (var k in mod)
          if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k))
            __createBinding(result, mod, k);
      }
      __setModuleDefault(result, mod);
      return result;
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.changeLogEventV1Beet = void 0;
    var beet9 = __importStar(require_beet());
    var beetSolana = __importStar(require_beet_solana3());
    var PathNode_1 = require_PathNode();
    exports.changeLogEventV1Beet = new beet9.FixableBeetArgsStruct([
      ["id", beetSolana.publicKey],
      ["path", beet9.array(PathNode_1.pathNodeBeet)],
      ["seq", beet9.u64],
      ["index", beet9.u32]
    ], "ChangeLogEventV1");
  }
});

// ../../node_modules/@solana/spl-account-compression/dist/cjs/generated/types/ChangeLogEvent.js
var require_ChangeLogEvent = __commonJS({
  "../../node_modules/@solana/spl-account-compression/dist/cjs/generated/types/ChangeLogEvent.js"(exports) {
    "use strict";
    var __createBinding = exports && exports.__createBinding || (Object.create ? function(o2, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      var desc = Object.getOwnPropertyDescriptor(m, k);
      if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m[k];
        } };
      }
      Object.defineProperty(o2, k2, desc);
    } : function(o2, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      o2[k2] = m[k];
    });
    var __setModuleDefault = exports && exports.__setModuleDefault || (Object.create ? function(o2, v) {
      Object.defineProperty(o2, "default", { enumerable: true, value: v });
    } : function(o2, v) {
      o2["default"] = v;
    });
    var __importStar = exports && exports.__importStar || function(mod) {
      if (mod && mod.__esModule)
        return mod;
      var result = {};
      if (mod != null) {
        for (var k in mod)
          if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k))
            __createBinding(result, mod, k);
      }
      __setModuleDefault(result, mod);
      return result;
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.changeLogEventBeet = exports.isChangeLogEventV1 = void 0;
    var beet9 = __importStar(require_beet());
    var ChangeLogEventV1_1 = require_ChangeLogEventV1();
    var isChangeLogEventV1 = (x) => x.__kind === "V1";
    exports.isChangeLogEventV1 = isChangeLogEventV1;
    exports.changeLogEventBeet = beet9.dataEnum([
      [
        "V1",
        new beet9.FixableBeetArgsStruct([["fields", beet9.tuple([ChangeLogEventV1_1.changeLogEventV1Beet])]], 'ChangeLogEventRecord["V1"]')
      ]
    ]);
  }
});

// ../../node_modules/@solana/spl-account-compression/dist/cjs/generated/types/AccountCompressionEvent.js
var require_AccountCompressionEvent = __commonJS({
  "../../node_modules/@solana/spl-account-compression/dist/cjs/generated/types/AccountCompressionEvent.js"(exports) {
    "use strict";
    var __createBinding = exports && exports.__createBinding || (Object.create ? function(o2, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      var desc = Object.getOwnPropertyDescriptor(m, k);
      if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m[k];
        } };
      }
      Object.defineProperty(o2, k2, desc);
    } : function(o2, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      o2[k2] = m[k];
    });
    var __setModuleDefault = exports && exports.__setModuleDefault || (Object.create ? function(o2, v) {
      Object.defineProperty(o2, "default", { enumerable: true, value: v });
    } : function(o2, v) {
      o2["default"] = v;
    });
    var __importStar = exports && exports.__importStar || function(mod) {
      if (mod && mod.__esModule)
        return mod;
      var result = {};
      if (mod != null) {
        for (var k in mod)
          if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k))
            __createBinding(result, mod, k);
      }
      __setModuleDefault(result, mod);
      return result;
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.accountCompressionEventBeet = exports.isAccountCompressionEventApplicationData = exports.isAccountCompressionEventChangeLog = void 0;
    var beet9 = __importStar(require_beet());
    var ApplicationDataEvent_1 = require_ApplicationDataEvent();
    var ChangeLogEvent_1 = require_ChangeLogEvent();
    var isAccountCompressionEventChangeLog = (x) => x.__kind === "ChangeLog";
    exports.isAccountCompressionEventChangeLog = isAccountCompressionEventChangeLog;
    var isAccountCompressionEventApplicationData = (x) => x.__kind === "ApplicationData";
    exports.isAccountCompressionEventApplicationData = isAccountCompressionEventApplicationData;
    exports.accountCompressionEventBeet = beet9.dataEnum([
      [
        "ChangeLog",
        new beet9.FixableBeetArgsStruct([["fields", beet9.tuple([ChangeLogEvent_1.changeLogEventBeet])]], 'AccountCompressionEventRecord["ChangeLog"]')
      ],
      [
        "ApplicationData",
        new beet9.FixableBeetArgsStruct([["fields", beet9.tuple([ApplicationDataEvent_1.applicationDataEventBeet])]], 'AccountCompressionEventRecord["ApplicationData"]')
      ]
    ]);
  }
});

// ../../node_modules/@solana/spl-account-compression/dist/cjs/generated/types/CompressionAccountType.js
var require_CompressionAccountType = __commonJS({
  "../../node_modules/@solana/spl-account-compression/dist/cjs/generated/types/CompressionAccountType.js"(exports) {
    "use strict";
    var __createBinding = exports && exports.__createBinding || (Object.create ? function(o2, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      var desc = Object.getOwnPropertyDescriptor(m, k);
      if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m[k];
        } };
      }
      Object.defineProperty(o2, k2, desc);
    } : function(o2, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      o2[k2] = m[k];
    });
    var __setModuleDefault = exports && exports.__setModuleDefault || (Object.create ? function(o2, v) {
      Object.defineProperty(o2, "default", { enumerable: true, value: v });
    } : function(o2, v) {
      o2["default"] = v;
    });
    var __importStar = exports && exports.__importStar || function(mod) {
      if (mod && mod.__esModule)
        return mod;
      var result = {};
      if (mod != null) {
        for (var k in mod)
          if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k))
            __createBinding(result, mod, k);
      }
      __setModuleDefault(result, mod);
      return result;
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.compressionAccountTypeBeet = exports.CompressionAccountType = void 0;
    var beet9 = __importStar(require_beet());
    var CompressionAccountType;
    (function(CompressionAccountType2) {
      CompressionAccountType2[CompressionAccountType2["Uninitialized"] = 0] = "Uninitialized";
      CompressionAccountType2[CompressionAccountType2["ConcurrentMerkleTree"] = 1] = "ConcurrentMerkleTree";
    })(CompressionAccountType = exports.CompressionAccountType || (exports.CompressionAccountType = {}));
    exports.compressionAccountTypeBeet = beet9.fixedScalarEnum(CompressionAccountType);
  }
});

// ../../node_modules/@solana/spl-account-compression/dist/cjs/generated/types/ConcurrentMerkleTreeHeaderDataV1.js
var require_ConcurrentMerkleTreeHeaderDataV1 = __commonJS({
  "../../node_modules/@solana/spl-account-compression/dist/cjs/generated/types/ConcurrentMerkleTreeHeaderDataV1.js"(exports) {
    "use strict";
    var __createBinding = exports && exports.__createBinding || (Object.create ? function(o2, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      var desc = Object.getOwnPropertyDescriptor(m, k);
      if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m[k];
        } };
      }
      Object.defineProperty(o2, k2, desc);
    } : function(o2, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      o2[k2] = m[k];
    });
    var __setModuleDefault = exports && exports.__setModuleDefault || (Object.create ? function(o2, v) {
      Object.defineProperty(o2, "default", { enumerable: true, value: v });
    } : function(o2, v) {
      o2["default"] = v;
    });
    var __importStar = exports && exports.__importStar || function(mod) {
      if (mod && mod.__esModule)
        return mod;
      var result = {};
      if (mod != null) {
        for (var k in mod)
          if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k))
            __createBinding(result, mod, k);
      }
      __setModuleDefault(result, mod);
      return result;
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.concurrentMerkleTreeHeaderDataV1Beet = void 0;
    var beet9 = __importStar(require_beet());
    var beetSolana = __importStar(require_beet_solana3());
    exports.concurrentMerkleTreeHeaderDataV1Beet = new beet9.BeetArgsStruct([
      ["maxBufferSize", beet9.u32],
      ["maxDepth", beet9.u32],
      ["authority", beetSolana.publicKey],
      ["creationSlot", beet9.u64],
      ["padding", beet9.uniformFixedSizeArray(beet9.u8, 6)]
    ], "ConcurrentMerkleTreeHeaderDataV1");
  }
});

// ../../node_modules/@solana/spl-account-compression/dist/cjs/generated/types/ConcurrentMerkleTreeHeaderData.js
var require_ConcurrentMerkleTreeHeaderData = __commonJS({
  "../../node_modules/@solana/spl-account-compression/dist/cjs/generated/types/ConcurrentMerkleTreeHeaderData.js"(exports) {
    "use strict";
    var __createBinding = exports && exports.__createBinding || (Object.create ? function(o2, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      var desc = Object.getOwnPropertyDescriptor(m, k);
      if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m[k];
        } };
      }
      Object.defineProperty(o2, k2, desc);
    } : function(o2, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      o2[k2] = m[k];
    });
    var __setModuleDefault = exports && exports.__setModuleDefault || (Object.create ? function(o2, v) {
      Object.defineProperty(o2, "default", { enumerable: true, value: v });
    } : function(o2, v) {
      o2["default"] = v;
    });
    var __importStar = exports && exports.__importStar || function(mod) {
      if (mod && mod.__esModule)
        return mod;
      var result = {};
      if (mod != null) {
        for (var k in mod)
          if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k))
            __createBinding(result, mod, k);
      }
      __setModuleDefault(result, mod);
      return result;
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.concurrentMerkleTreeHeaderDataBeet = exports.isConcurrentMerkleTreeHeaderDataV1 = void 0;
    var beet9 = __importStar(require_beet());
    var ConcurrentMerkleTreeHeaderDataV1_1 = require_ConcurrentMerkleTreeHeaderDataV1();
    var isConcurrentMerkleTreeHeaderDataV1 = (x) => x.__kind === "V1";
    exports.isConcurrentMerkleTreeHeaderDataV1 = isConcurrentMerkleTreeHeaderDataV1;
    exports.concurrentMerkleTreeHeaderDataBeet = beet9.dataEnum([
      [
        "V1",
        new beet9.BeetArgsStruct([["fields", beet9.fixedSizeTuple([ConcurrentMerkleTreeHeaderDataV1_1.concurrentMerkleTreeHeaderDataV1Beet])]], 'ConcurrentMerkleTreeHeaderDataRecord["V1"]')
      ]
    ]);
  }
});

// ../../node_modules/@solana/spl-account-compression/dist/cjs/generated/types/ConcurrentMerkleTreeHeader.js
var require_ConcurrentMerkleTreeHeader = __commonJS({
  "../../node_modules/@solana/spl-account-compression/dist/cjs/generated/types/ConcurrentMerkleTreeHeader.js"(exports) {
    "use strict";
    var __createBinding = exports && exports.__createBinding || (Object.create ? function(o2, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      var desc = Object.getOwnPropertyDescriptor(m, k);
      if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m[k];
        } };
      }
      Object.defineProperty(o2, k2, desc);
    } : function(o2, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      o2[k2] = m[k];
    });
    var __setModuleDefault = exports && exports.__setModuleDefault || (Object.create ? function(o2, v) {
      Object.defineProperty(o2, "default", { enumerable: true, value: v });
    } : function(o2, v) {
      o2["default"] = v;
    });
    var __importStar = exports && exports.__importStar || function(mod) {
      if (mod && mod.__esModule)
        return mod;
      var result = {};
      if (mod != null) {
        for (var k in mod)
          if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k))
            __createBinding(result, mod, k);
      }
      __setModuleDefault(result, mod);
      return result;
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.concurrentMerkleTreeHeaderBeet = void 0;
    var beet9 = __importStar(require_beet());
    var CompressionAccountType_1 = require_CompressionAccountType();
    var ConcurrentMerkleTreeHeaderData_1 = require_ConcurrentMerkleTreeHeaderData();
    exports.concurrentMerkleTreeHeaderBeet = new beet9.FixableBeetArgsStruct([
      ["accountType", CompressionAccountType_1.compressionAccountTypeBeet],
      ["header", ConcurrentMerkleTreeHeaderData_1.concurrentMerkleTreeHeaderDataBeet]
    ], "ConcurrentMerkleTreeHeader");
  }
});

// ../../node_modules/@solana/spl-account-compression/dist/cjs/generated/types/index.js
var require_types6 = __commonJS({
  "../../node_modules/@solana/spl-account-compression/dist/cjs/generated/types/index.js"(exports) {
    "use strict";
    var __createBinding = exports && exports.__createBinding || (Object.create ? function(o2, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      var desc = Object.getOwnPropertyDescriptor(m, k);
      if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m[k];
        } };
      }
      Object.defineProperty(o2, k2, desc);
    } : function(o2, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      o2[k2] = m[k];
    });
    var __exportStar = exports && exports.__exportStar || function(m, exports2) {
      for (var p in m)
        if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports2, p))
          __createBinding(exports2, m, p);
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    __exportStar(require_AccountCompressionEvent(), exports);
    __exportStar(require_ApplicationDataEvent(), exports);
    __exportStar(require_ApplicationDataEventV1(), exports);
    __exportStar(require_ChangeLogEvent(), exports);
    __exportStar(require_ChangeLogEventV1(), exports);
    __exportStar(require_CompressionAccountType(), exports);
    __exportStar(require_ConcurrentMerkleTreeHeader(), exports);
    __exportStar(require_ConcurrentMerkleTreeHeaderData(), exports);
    __exportStar(require_ConcurrentMerkleTreeHeaderDataV1(), exports);
    __exportStar(require_PathNode(), exports);
  }
});

// ../../node_modules/@solana/spl-account-compression/dist/cjs/generated/index.js
var require_generated3 = __commonJS({
  "../../node_modules/@solana/spl-account-compression/dist/cjs/generated/index.js"(exports) {
    "use strict";
    var __createBinding = exports && exports.__createBinding || (Object.create ? function(o2, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      var desc = Object.getOwnPropertyDescriptor(m, k);
      if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m[k];
        } };
      }
      Object.defineProperty(o2, k2, desc);
    } : function(o2, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      o2[k2] = m[k];
    });
    var __exportStar = exports && exports.__exportStar || function(m, exports2) {
      for (var p in m)
        if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports2, p))
          __createBinding(exports2, m, p);
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.PROGRAM_ID = exports.PROGRAM_ADDRESS = void 0;
    var web3_js_1 = (init_index_browser_esm(), __toCommonJS(index_browser_esm_exports));
    __exportStar(require_errors8(), exports);
    __exportStar(require_instructions11(), exports);
    __exportStar(require_types6(), exports);
    exports.PROGRAM_ADDRESS = "cmtDvXumGCrqC1Age74AVPhSRVXJMd8PJS91L8KbNCK";
    exports.PROGRAM_ID = new web3_js_1.PublicKey(exports.PROGRAM_ADDRESS);
  }
});

// ../../node_modules/@solana/spl-account-compression/dist/cjs/types/Path.js
var require_Path = __commonJS({
  "../../node_modules/@solana/spl-account-compression/dist/cjs/types/Path.js"(exports) {
    "use strict";
    var __createBinding = exports && exports.__createBinding || (Object.create ? function(o2, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      var desc = Object.getOwnPropertyDescriptor(m, k);
      if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m[k];
        } };
      }
      Object.defineProperty(o2, k2, desc);
    } : function(o2, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      o2[k2] = m[k];
    });
    var __setModuleDefault = exports && exports.__setModuleDefault || (Object.create ? function(o2, v) {
      Object.defineProperty(o2, "default", { enumerable: true, value: v });
    } : function(o2, v) {
      o2["default"] = v;
    });
    var __importStar = exports && exports.__importStar || function(mod) {
      if (mod && mod.__esModule)
        return mod;
      var result = {};
      if (mod != null) {
        for (var k in mod)
          if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k))
            __createBinding(result, mod, k);
      }
      __setModuleDefault(result, mod);
      return result;
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.pathBeetFactory = void 0;
    var beet9 = __importStar(require_beet());
    var beetSolana = __importStar(require_beet_solana3());
    var pathBeetFactory = (maxDepth) => {
      return new beet9.BeetArgsStruct([
        ["proof", beet9.uniformFixedSizeArray(beetSolana.publicKey, maxDepth)],
        ["leaf", beetSolana.publicKey],
        ["index", beet9.u32],
        ["_padding", beet9.u32]
      ], "Path");
    };
    exports.pathBeetFactory = pathBeetFactory;
  }
});

// ../../node_modules/@solana/spl-account-compression/dist/cjs/types/Canopy.js
var require_Canopy = __commonJS({
  "../../node_modules/@solana/spl-account-compression/dist/cjs/types/Canopy.js"(exports) {
    "use strict";
    var __createBinding = exports && exports.__createBinding || (Object.create ? function(o2, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      var desc = Object.getOwnPropertyDescriptor(m, k);
      if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m[k];
        } };
      }
      Object.defineProperty(o2, k2, desc);
    } : function(o2, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      o2[k2] = m[k];
    });
    var __setModuleDefault = exports && exports.__setModuleDefault || (Object.create ? function(o2, v) {
      Object.defineProperty(o2, "default", { enumerable: true, value: v });
    } : function(o2, v) {
      o2["default"] = v;
    });
    var __importStar = exports && exports.__importStar || function(mod) {
      if (mod && mod.__esModule)
        return mod;
      var result = {};
      if (mod != null) {
        for (var k in mod)
          if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k))
            __createBinding(result, mod, k);
      }
      __setModuleDefault(result, mod);
      return result;
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.canopyBeetFactory = void 0;
    var beet9 = __importStar(require_beet());
    var canopyBeetFactory = (canopyDepth) => {
      return new beet9.BeetArgsStruct([["canopyBytes", beet9.uniformFixedSizeArray(beet9.u8, Math.max(((1 << canopyDepth + 1) - 2) * 32, 0))]], "Canopy");
    };
    exports.canopyBeetFactory = canopyBeetFactory;
  }
});

// ../../node_modules/@solana/spl-account-compression/dist/cjs/types/ConcurrentMerkleTree.js
var require_ConcurrentMerkleTree = __commonJS({
  "../../node_modules/@solana/spl-account-compression/dist/cjs/types/ConcurrentMerkleTree.js"(exports) {
    "use strict";
    var __createBinding = exports && exports.__createBinding || (Object.create ? function(o2, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      var desc = Object.getOwnPropertyDescriptor(m, k);
      if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m[k];
        } };
      }
      Object.defineProperty(o2, k2, desc);
    } : function(o2, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      o2[k2] = m[k];
    });
    var __setModuleDefault = exports && exports.__setModuleDefault || (Object.create ? function(o2, v) {
      Object.defineProperty(o2, "default", { enumerable: true, value: v });
    } : function(o2, v) {
      o2["default"] = v;
    });
    var __importStar = exports && exports.__importStar || function(mod) {
      if (mod && mod.__esModule)
        return mod;
      var result = {};
      if (mod != null) {
        for (var k in mod)
          if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k))
            __createBinding(result, mod, k);
      }
      __setModuleDefault(result, mod);
      return result;
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.concurrentMerkleTreeBeetFactory = void 0;
    var beet9 = __importStar(require_beet());
    var beetSolana = __importStar(require_beet_solana3());
    var Path_1 = require_Path();
    var changeLogBeetFactory = (maxDepth) => {
      return new beet9.BeetArgsStruct([
        ["root", beetSolana.publicKey],
        ["pathNodes", beet9.uniformFixedSizeArray(beetSolana.publicKey, maxDepth)],
        ["index", beet9.u32],
        ["_padding", beet9.u32]
      ], "ChangeLog");
    };
    var concurrentMerkleTreeBeetFactory = (maxDepth, maxBufferSize) => {
      return new beet9.BeetArgsStruct([
        ["sequenceNumber", beet9.u64],
        ["activeIndex", beet9.u64],
        ["bufferSize", beet9.u64],
        ["changeLogs", beet9.uniformFixedSizeArray(changeLogBeetFactory(maxDepth), maxBufferSize)],
        ["rightMostPath", (0, Path_1.pathBeetFactory)(maxDepth)]
      ], "ConcurrentMerkleTree");
    };
    exports.concurrentMerkleTreeBeetFactory = concurrentMerkleTreeBeetFactory;
  }
});

// ../../node_modules/@solana/spl-account-compression/dist/cjs/types/index.js
var require_types7 = __commonJS({
  "../../node_modules/@solana/spl-account-compression/dist/cjs/types/index.js"(exports) {
    "use strict";
    var __createBinding = exports && exports.__createBinding || (Object.create ? function(o2, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      var desc = Object.getOwnPropertyDescriptor(m, k);
      if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m[k];
        } };
      }
      Object.defineProperty(o2, k2, desc);
    } : function(o2, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      o2[k2] = m[k];
    });
    var __exportStar = exports && exports.__exportStar || function(m, exports2) {
      for (var p in m)
        if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports2, p))
          __createBinding(exports2, m, p);
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    __exportStar(require_Path(), exports);
    __exportStar(require_Canopy(), exports);
    __exportStar(require_ConcurrentMerkleTree(), exports);
  }
});

// ../../node_modules/@solana/spl-account-compression/dist/cjs/accounts/ConcurrentMerkleTreeAccount.js
var require_ConcurrentMerkleTreeAccount = __commonJS({
  "../../node_modules/@solana/spl-account-compression/dist/cjs/accounts/ConcurrentMerkleTreeAccount.js"(exports) {
    "use strict";
    var __awaiter = exports && exports.__awaiter || function(thisArg, _arguments, P, generator) {
      function adopt(value) {
        return value instanceof P ? value : new P(function(resolve) {
          resolve(value);
        });
      }
      return new (P || (P = Promise))(function(resolve, reject) {
        function fulfilled(value) {
          try {
            step(generator.next(value));
          } catch (e2) {
            reject(e2);
          }
        }
        function rejected(value) {
          try {
            step(generator["throw"](value));
          } catch (e2) {
            reject(e2);
          }
        }
        function step(result) {
          result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
        }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
      });
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.getConcurrentMerkleTreeAccountSize = exports.getCanopyDepth = exports.ConcurrentMerkleTreeAccount = void 0;
    var bn_js_1 = require_bn();
    var generated_1 = require_generated3();
    var ConcurrentMerkleTreeHeader_1 = require_ConcurrentMerkleTreeHeader();
    var types_1 = require_types7();
    var ConcurrentMerkleTreeAccount2 = class {
      constructor(header, tree, canopy) {
        this.header = header;
        this.tree = tree;
        this.canopy = canopy;
      }
      static fromBuffer(buffer2) {
        return deserializeConcurrentMerkleTree(buffer2);
      }
      static fromAccountAddress(connection, publicKey3, commitmentOrConfig) {
        return __awaiter(this, void 0, void 0, function* () {
          const account = yield connection.getAccountInfo(publicKey3, commitmentOrConfig);
          if (!account) {
            throw new Error("CMT account data unexpectedly null!");
          }
          return deserializeConcurrentMerkleTree(account.data);
        });
      }
      getHeaderV1() {
        return this.header.header.fields[0];
      }
      /**
       * Returns the `maxBufferSize` for this tree, by reading the account's header
       * @returns
       */
      getMaxBufferSize() {
        return this.getHeaderV1().maxBufferSize;
      }
      /**
       * Returns the `maxDepth` of this tree, by reading the account's header
       * @returns
       */
      getMaxDepth() {
        return this.getHeaderV1().maxDepth;
      }
      /**
       * Returns `min(seq, maxBufferSize)`
       * @returns
       */
      getBufferSize() {
        return new bn_js_1.BN.BN(this.tree.bufferSize).toNumber();
      }
      /**
       * Returns the current root hash for this on-chain tree
       * @returns
       */
      getCurrentRoot() {
        return this.tree.changeLogs[this.getCurrentBufferIndex()].root.toBuffer();
      }
      /**
       * Returns the index to the spot in the on-chain buffer that stores the current
       * root and last changelog.
       *
       * Should always be `this.getCurrentSeq() % this.getMaxBufferSize()`
       * @returns
       */
      getCurrentBufferIndex() {
        return new bn_js_1.BN.BN(this.tree.activeIndex).toNumber();
      }
      /**
       * Returns the PublicKey that can execute modifying operations
       * on this tree
       * @returns
       */
      getAuthority() {
        return this.getHeaderV1().authority;
      }
      /**
       * Returns the slot that this tree was created in. Useful for indexing
       * transactions associated with this tree.
       * @returns
       */
      getCreationSlot() {
        return new bn_js_1.BN(this.getHeaderV1().creationSlot);
      }
      /**
       * Returns the number of modifying operations that have been performed
       * on this tree.
       * @returns
       */
      getCurrentSeq() {
        return new bn_js_1.BN(this.tree.sequenceNumber);
      }
      /**
       * Returns the depth of the on-chain tree-cache. Increasing the canopy depth reduces the size of the proofs
       * that have to be passed for tree instructions.
       * @returns the size
       */
      getCanopyDepth() {
        return getCanopyDepth(this.canopy.canopyBytes.length);
      }
    };
    exports.ConcurrentMerkleTreeAccount = ConcurrentMerkleTreeAccount2;
    function getCanopyDepth(canopyByteLength) {
      if (canopyByteLength === 0) {
        return 0;
      }
      return Math.log2(canopyByteLength / 32 + 2) - 1;
    }
    exports.getCanopyDepth = getCanopyDepth;
    function deserializeConcurrentMerkleTree(buffer2) {
      let offset = 0;
      const [versionedHeader, offsetIncr] = ConcurrentMerkleTreeHeader_1.concurrentMerkleTreeHeaderBeet.deserialize(buffer2);
      offset = offsetIncr;
      if (versionedHeader.header.__kind !== "V1") {
        throw Error(`Header has unsupported version: ${versionedHeader.header.__kind}`);
      }
      const header = versionedHeader.header.fields[0];
      const [tree, offsetIncr2] = (0, types_1.concurrentMerkleTreeBeetFactory)(header.maxDepth, header.maxBufferSize).deserialize(buffer2, offset);
      offset = offsetIncr2;
      const canopyDepth = getCanopyDepth(buffer2.byteLength - offset);
      let canopy = {
        canopyBytes: []
      };
      if (canopyDepth !== 0) {
        const [deserializedCanopy, offsetIncr3] = (0, types_1.canopyBeetFactory)(canopyDepth).deserialize(buffer2, offset);
        canopy = deserializedCanopy;
        offset = offsetIncr3;
      }
      if (buffer2.byteLength !== offset) {
        throw new Error("Failed to process whole buffer when deserializing Merkle Account Data");
      }
      return new ConcurrentMerkleTreeAccount2(versionedHeader, tree, canopy);
    }
    function getConcurrentMerkleTreeAccountSize(maxDepth, maxBufferSize, canopyDepth, headerVersion = "V1") {
      if (headerVersion != "V1") {
        throw Error("Unsupported header version");
      }
      return 2 + generated_1.concurrentMerkleTreeHeaderDataV1Beet.byteSize + (0, types_1.concurrentMerkleTreeBeetFactory)(maxDepth, maxBufferSize).byteSize + (canopyDepth ? (0, types_1.canopyBeetFactory)(canopyDepth).byteSize : 0);
    }
    exports.getConcurrentMerkleTreeAccountSize = getConcurrentMerkleTreeAccountSize;
  }
});

// ../../node_modules/@solana/spl-account-compression/dist/cjs/accounts/index.js
var require_accounts3 = __commonJS({
  "../../node_modules/@solana/spl-account-compression/dist/cjs/accounts/index.js"(exports) {
    "use strict";
    var __createBinding = exports && exports.__createBinding || (Object.create ? function(o2, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      var desc = Object.getOwnPropertyDescriptor(m, k);
      if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m[k];
        } };
      }
      Object.defineProperty(o2, k2, desc);
    } : function(o2, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      o2[k2] = m[k];
    });
    var __exportStar = exports && exports.__exportStar || function(m, exports2) {
      for (var p in m)
        if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports2, p))
          __createBinding(exports2, m, p);
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    __exportStar(require_ConcurrentMerkleTreeAccount(), exports);
  }
});

// ../../node_modules/@solana/spl-account-compression/dist/cjs/constants/index.js
var require_constants2 = __commonJS({
  "../../node_modules/@solana/spl-account-compression/dist/cjs/constants/index.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.ALL_DEPTH_SIZE_PAIRS = exports.SPL_NOOP_PROGRAM_ID = exports.SPL_NOOP_ADDRESS = void 0;
    var web3_js_1 = (init_index_browser_esm(), __toCommonJS(index_browser_esm_exports));
    exports.SPL_NOOP_ADDRESS = "noopb9bkMVfRPU8AsbpTUg8AQkHtKwMYZiFUjNRtMmV";
    exports.SPL_NOOP_PROGRAM_ID = new web3_js_1.PublicKey(exports.SPL_NOOP_ADDRESS);
    var allPairs = [
      [3, 8],
      [5, 8],
      [14, 64],
      [14, 256],
      [14, 1024],
      [14, 2048],
      [15, 64],
      [16, 64],
      [17, 64],
      [18, 64],
      [19, 64],
      [20, 64],
      [20, 256],
      [20, 1024],
      [20, 2048],
      [24, 64],
      [24, 256],
      [24, 512],
      [24, 1024],
      [24, 2048],
      [26, 512],
      [26, 1024],
      [26, 2048],
      [30, 512],
      [30, 1024],
      [30, 2048]
    ];
    exports.ALL_DEPTH_SIZE_PAIRS = allPairs.map((pair) => {
      return {
        maxBufferSize: pair[1],
        maxDepth: pair[0]
      };
    });
  }
});

// ../../node_modules/@solana/spl-account-compression/dist/cjs/instructions/index.js
var require_instructions12 = __commonJS({
  "../../node_modules/@solana/spl-account-compression/dist/cjs/instructions/index.js"(exports) {
    "use strict";
    var __awaiter = exports && exports.__awaiter || function(thisArg, _arguments, P, generator) {
      function adopt(value) {
        return value instanceof P ? value : new P(function(resolve) {
          resolve(value);
        });
      }
      return new (P || (P = Promise))(function(resolve, reject) {
        function fulfilled(value) {
          try {
            step(generator.next(value));
          } catch (e2) {
            reject(e2);
          }
        }
        function rejected(value) {
          try {
            step(generator["throw"](value));
          } catch (e2) {
            reject(e2);
          }
        }
        function step(result) {
          result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
        }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
      });
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.createCloseEmptyTreeIx = exports.createAllocTreeIx = exports.createVerifyLeafIx = exports.createTransferAuthorityIx = exports.createAppendIx = exports.createReplaceIx = exports.createInitEmptyMerkleTreeIx = exports.addProof = void 0;
    var web3_js_1 = (init_index_browser_esm(), __toCommonJS(index_browser_esm_exports));
    var accounts_1 = require_accounts3();
    var constants_1 = require_constants2();
    var generated_1 = require_generated3();
    function addProof(instruction, nodeProof) {
      instruction.keys = instruction.keys.concat(nodeProof.map((node) => {
        return {
          isSigner: false,
          isWritable: false,
          pubkey: new web3_js_1.PublicKey(node)
        };
      }));
      return instruction;
    }
    exports.addProof = addProof;
    function createInitEmptyMerkleTreeIx(merkleTree, authority, depthSizePair) {
      return (0, generated_1.createInitEmptyMerkleTreeInstruction)({
        authority,
        merkleTree,
        noop: constants_1.SPL_NOOP_PROGRAM_ID
      }, depthSizePair);
    }
    exports.createInitEmptyMerkleTreeIx = createInitEmptyMerkleTreeIx;
    function createReplaceIx(merkleTree, authority, newLeaf, proof) {
      return addProof((0, generated_1.createReplaceLeafInstruction)({
        authority,
        merkleTree,
        noop: constants_1.SPL_NOOP_PROGRAM_ID
      }, {
        index: proof.leafIndex,
        newLeaf: Array.from(newLeaf),
        previousLeaf: Array.from(proof.leaf),
        root: Array.from(proof.root)
      }), proof.proof);
    }
    exports.createReplaceIx = createReplaceIx;
    function createAppendIx(merkleTree, authority, newLeaf) {
      return (0, generated_1.createAppendInstruction)({
        authority,
        merkleTree,
        noop: constants_1.SPL_NOOP_PROGRAM_ID
      }, {
        leaf: Array.from(newLeaf)
      });
    }
    exports.createAppendIx = createAppendIx;
    function createTransferAuthorityIx(merkleTree, authority, newAuthority) {
      return (0, generated_1.createTransferAuthorityInstruction)({
        authority,
        merkleTree
      }, {
        newAuthority
      });
    }
    exports.createTransferAuthorityIx = createTransferAuthorityIx;
    function createVerifyLeafIx(merkleTree, proof) {
      return addProof((0, generated_1.createVerifyLeafInstruction)({
        merkleTree
      }, {
        index: proof.leafIndex,
        leaf: Array.from(proof.leaf),
        root: Array.from(proof.root)
      }), proof.proof);
    }
    exports.createVerifyLeafIx = createVerifyLeafIx;
    function createAllocTreeIx(connection, merkleTree, payer, depthSizePair, canopyDepth) {
      return __awaiter(this, void 0, void 0, function* () {
        const requiredSpace = (0, accounts_1.getConcurrentMerkleTreeAccountSize)(depthSizePair.maxDepth, depthSizePair.maxBufferSize, canopyDepth !== null && canopyDepth !== void 0 ? canopyDepth : 0);
        return web3_js_1.SystemProgram.createAccount({
          fromPubkey: payer,
          lamports: yield connection.getMinimumBalanceForRentExemption(requiredSpace),
          newAccountPubkey: merkleTree,
          programId: generated_1.PROGRAM_ID,
          space: requiredSpace
        });
      });
    }
    exports.createAllocTreeIx = createAllocTreeIx;
    function createCloseEmptyTreeIx(merkleTree, authority, recipient) {
      return (0, generated_1.createCloseEmptyTreeInstruction)({
        authority,
        merkleTree,
        recipient
      });
    }
    exports.createCloseEmptyTreeIx = createCloseEmptyTreeIx;
  }
});

// ../../node_modules/@solana/spl-account-compression/dist/cjs/events/index.js
var require_events = __commonJS({
  "../../node_modules/@solana/spl-account-compression/dist/cjs/events/index.js"(exports) {
    "use strict";
    var __importDefault = exports && exports.__importDefault || function(mod) {
      return mod && mod.__esModule ? mod : { "default": mod };
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.deserializeApplicationDataEvent = exports.deserializeChangeLogEventV1 = void 0;
    var bn_js_1 = __importDefault(require_bn());
    var AccountCompressionEvent_1 = require_AccountCompressionEvent();
    function deserializeChangeLogEventV12(data) {
      const event = AccountCompressionEvent_1.accountCompressionEventBeet.toFixedFromData(data, 0).read(data, 0);
      if (event.__kind == "ChangeLog" && event.fields[0].__kind == "V1") {
        const changeLogV1 = event.fields[0].fields[0];
        return {
          index: changeLogV1.index,
          path: changeLogV1.path,
          seq: new bn_js_1.default.BN(changeLogV1.seq),
          treeId: changeLogV1.id
        };
      } else {
        throw Error("Unable to decode buffer as ChangeLogEvent V1");
      }
    }
    exports.deserializeChangeLogEventV1 = deserializeChangeLogEventV12;
    function deserializeApplicationDataEvent(data) {
      const event = AccountCompressionEvent_1.accountCompressionEventBeet.toFixedFromData(data, 0).read(data, 0);
      switch (event.__kind) {
        case "ApplicationData": {
          return event.fields[0];
        }
        default:
          throw Error("Unable to decode buffer as ApplicationDataEvent");
      }
    }
    exports.deserializeApplicationDataEvent = deserializeApplicationDataEvent;
  }
});

// ../../node_modules/typescript-collections/dist/lib/util.js
var require_util4 = __commonJS({
  "../../node_modules/typescript-collections/dist/lib/util.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var _hasOwnProperty = Object.prototype.hasOwnProperty;
    exports.has = function(obj, prop) {
      return _hasOwnProperty.call(obj, prop);
    };
    function defaultCompare(a, b) {
      if (a < b) {
        return -1;
      } else if (a === b) {
        return 0;
      } else {
        return 1;
      }
    }
    exports.defaultCompare = defaultCompare;
    function defaultEquals(a, b) {
      return a === b;
    }
    exports.defaultEquals = defaultEquals;
    function defaultToString(item) {
      if (item === null) {
        return "COLLECTION_NULL";
      } else if (isUndefined2(item)) {
        return "COLLECTION_UNDEFINED";
      } else if (isString2(item)) {
        return "$s" + item;
      } else {
        return "$o" + item.toString();
      }
    }
    exports.defaultToString = defaultToString;
    function makeString(item, join) {
      if (join === void 0) {
        join = ",";
      }
      if (item === null) {
        return "COLLECTION_NULL";
      } else if (isUndefined2(item)) {
        return "COLLECTION_UNDEFINED";
      } else if (isString2(item)) {
        return item.toString();
      } else {
        var toret = "{";
        var first = true;
        for (var prop in item) {
          if (exports.has(item, prop)) {
            if (first) {
              first = false;
            } else {
              toret = toret + join;
            }
            toret = toret + prop + ":" + item[prop];
          }
        }
        return toret + "}";
      }
    }
    exports.makeString = makeString;
    function isFunction2(func) {
      return typeof func === "function";
    }
    exports.isFunction = isFunction2;
    function isUndefined2(obj) {
      return typeof obj === "undefined";
    }
    exports.isUndefined = isUndefined2;
    function isString2(obj) {
      return Object.prototype.toString.call(obj) === "[object String]";
    }
    exports.isString = isString2;
    function reverseCompareFunction(compareFunction) {
      if (isUndefined2(compareFunction) || !isFunction2(compareFunction)) {
        return function(a, b) {
          if (a < b) {
            return 1;
          } else if (a === b) {
            return 0;
          } else {
            return -1;
          }
        };
      } else {
        return function(d, v) {
          return compareFunction(d, v) * -1;
        };
      }
    }
    exports.reverseCompareFunction = reverseCompareFunction;
    function compareToEquals(compareFunction) {
      return function(a, b) {
        return compareFunction(a, b) === 0;
      };
    }
    exports.compareToEquals = compareToEquals;
  }
});

// ../../node_modules/typescript-collections/dist/lib/arrays.js
var require_arrays = __commonJS({
  "../../node_modules/typescript-collections/dist/lib/arrays.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var util = require_util4();
    function indexOf(array, item, equalsFunction) {
      var equals2 = equalsFunction || util.defaultEquals;
      var length = array.length;
      for (var i = 0; i < length; i++) {
        if (equals2(array[i], item)) {
          return i;
        }
      }
      return -1;
    }
    exports.indexOf = indexOf;
    function lastIndexOf(array, item, equalsFunction) {
      var equals2 = equalsFunction || util.defaultEquals;
      var length = array.length;
      for (var i = length - 1; i >= 0; i--) {
        if (equals2(array[i], item)) {
          return i;
        }
      }
      return -1;
    }
    exports.lastIndexOf = lastIndexOf;
    function contains(array, item, equalsFunction) {
      return indexOf(array, item, equalsFunction) >= 0;
    }
    exports.contains = contains;
    function remove(array, item, equalsFunction) {
      var index = indexOf(array, item, equalsFunction);
      if (index < 0) {
        return false;
      }
      array.splice(index, 1);
      return true;
    }
    exports.remove = remove;
    function frequency(array, item, equalsFunction) {
      var equals2 = equalsFunction || util.defaultEquals;
      var length = array.length;
      var freq = 0;
      for (var i = 0; i < length; i++) {
        if (equals2(array[i], item)) {
          freq++;
        }
      }
      return freq;
    }
    exports.frequency = frequency;
    function equals(array1, array2, equalsFunction) {
      var equals2 = equalsFunction || util.defaultEquals;
      if (array1.length !== array2.length) {
        return false;
      }
      var length = array1.length;
      for (var i = 0; i < length; i++) {
        if (!equals2(array1[i], array2[i])) {
          return false;
        }
      }
      return true;
    }
    exports.equals = equals;
    function copy(array) {
      return array.concat();
    }
    exports.copy = copy;
    function swap(array, i, j) {
      if (i < 0 || i >= array.length || j < 0 || j >= array.length) {
        return false;
      }
      var temp = array[i];
      array[i] = array[j];
      array[j] = temp;
      return true;
    }
    exports.swap = swap;
    function toString(array) {
      return "[" + array.toString() + "]";
    }
    exports.toString = toString;
    function forEach(array, callback) {
      for (var _i = 0, array_1 = array; _i < array_1.length; _i++) {
        var ele = array_1[_i];
        if (callback(ele) === false) {
          return;
        }
      }
    }
    exports.forEach = forEach;
  }
});

// ../../node_modules/typescript-collections/dist/lib/Dictionary.js
var require_Dictionary = __commonJS({
  "../../node_modules/typescript-collections/dist/lib/Dictionary.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var util = require_util4();
    var Dictionary = (
      /** @class */
      function() {
        function Dictionary2(toStrFunction) {
          this.table = {};
          this.nElements = 0;
          this.toStr = toStrFunction || util.defaultToString;
        }
        Dictionary2.prototype.getValue = function(key) {
          var pair = this.table["$" + this.toStr(key)];
          if (util.isUndefined(pair)) {
            return void 0;
          }
          return pair.value;
        };
        Dictionary2.prototype.setValue = function(key, value) {
          if (util.isUndefined(key) || util.isUndefined(value)) {
            return void 0;
          }
          var ret;
          var k = "$" + this.toStr(key);
          var previousElement = this.table[k];
          if (util.isUndefined(previousElement)) {
            this.nElements++;
            ret = void 0;
          } else {
            ret = previousElement.value;
          }
          this.table[k] = {
            key,
            value
          };
          return ret;
        };
        Dictionary2.prototype.remove = function(key) {
          var k = "$" + this.toStr(key);
          var previousElement = this.table[k];
          if (!util.isUndefined(previousElement)) {
            delete this.table[k];
            this.nElements--;
            return previousElement.value;
          }
          return void 0;
        };
        Dictionary2.prototype.keys = function() {
          var array = [];
          for (var name_1 in this.table) {
            if (util.has(this.table, name_1)) {
              var pair = this.table[name_1];
              array.push(pair.key);
            }
          }
          return array;
        };
        Dictionary2.prototype.values = function() {
          var array = [];
          for (var name_2 in this.table) {
            if (util.has(this.table, name_2)) {
              var pair = this.table[name_2];
              array.push(pair.value);
            }
          }
          return array;
        };
        Dictionary2.prototype.forEach = function(callback) {
          for (var name_3 in this.table) {
            if (util.has(this.table, name_3)) {
              var pair = this.table[name_3];
              var ret = callback(pair.key, pair.value);
              if (ret === false) {
                return;
              }
            }
          }
        };
        Dictionary2.prototype.containsKey = function(key) {
          return !util.isUndefined(this.getValue(key));
        };
        Dictionary2.prototype.clear = function() {
          this.table = {};
          this.nElements = 0;
        };
        Dictionary2.prototype.size = function() {
          return this.nElements;
        };
        Dictionary2.prototype.isEmpty = function() {
          return this.nElements <= 0;
        };
        Dictionary2.prototype.toString = function() {
          var toret = "{";
          this.forEach(function(k, v) {
            toret += "\n	" + k + " : " + v;
          });
          return toret + "\n}";
        };
        return Dictionary2;
      }()
    );
    exports.default = Dictionary;
  }
});

// ../../node_modules/typescript-collections/dist/lib/Set.js
var require_Set = __commonJS({
  "../../node_modules/typescript-collections/dist/lib/Set.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var util = require_util4();
    var arrays = require_arrays();
    var Dictionary_1 = require_Dictionary();
    var Set2 = (
      /** @class */
      function() {
        function Set3(toStringFunction) {
          this.dictionary = new Dictionary_1.default(toStringFunction);
        }
        Set3.prototype.contains = function(element) {
          return this.dictionary.containsKey(element);
        };
        Set3.prototype.add = function(element) {
          if (this.contains(element) || util.isUndefined(element)) {
            return false;
          } else {
            this.dictionary.setValue(element, element);
            return true;
          }
        };
        Set3.prototype.intersection = function(otherSet) {
          var set = this;
          this.forEach(function(element) {
            if (!otherSet.contains(element)) {
              set.remove(element);
            }
            return true;
          });
        };
        Set3.prototype.union = function(otherSet) {
          var set = this;
          otherSet.forEach(function(element) {
            set.add(element);
            return true;
          });
        };
        Set3.prototype.difference = function(otherSet) {
          var set = this;
          otherSet.forEach(function(element) {
            set.remove(element);
            return true;
          });
        };
        Set3.prototype.isSubsetOf = function(otherSet) {
          if (this.size() > otherSet.size()) {
            return false;
          }
          var isSub = true;
          this.forEach(function(element) {
            if (!otherSet.contains(element)) {
              isSub = false;
              return false;
            }
            return true;
          });
          return isSub;
        };
        Set3.prototype.remove = function(element) {
          if (!this.contains(element)) {
            return false;
          } else {
            this.dictionary.remove(element);
            return true;
          }
        };
        Set3.prototype.forEach = function(callback) {
          this.dictionary.forEach(function(k, v) {
            return callback(v);
          });
        };
        Set3.prototype.toArray = function() {
          return this.dictionary.values();
        };
        Set3.prototype.isEmpty = function() {
          return this.dictionary.isEmpty();
        };
        Set3.prototype.size = function() {
          return this.dictionary.size();
        };
        Set3.prototype.clear = function() {
          this.dictionary.clear();
        };
        Set3.prototype.toString = function() {
          return arrays.toString(this.toArray());
        };
        return Set3;
      }()
    );
    exports.default = Set2;
  }
});

// ../../node_modules/typescript-collections/dist/lib/Bag.js
var require_Bag = __commonJS({
  "../../node_modules/typescript-collections/dist/lib/Bag.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var util = require_util4();
    var Dictionary_1 = require_Dictionary();
    var Set_1 = require_Set();
    var Bag = (
      /** @class */
      function() {
        function Bag2(toStrFunction) {
          this.toStrF = toStrFunction || util.defaultToString;
          this.dictionary = new Dictionary_1.default(this.toStrF);
          this.nElements = 0;
        }
        Bag2.prototype.add = function(element, nCopies) {
          if (nCopies === void 0) {
            nCopies = 1;
          }
          if (util.isUndefined(element) || nCopies <= 0) {
            return false;
          }
          if (!this.contains(element)) {
            var node = {
              value: element,
              copies: nCopies
            };
            this.dictionary.setValue(element, node);
          } else {
            this.dictionary.getValue(element).copies += nCopies;
          }
          this.nElements += nCopies;
          return true;
        };
        Bag2.prototype.count = function(element) {
          if (!this.contains(element)) {
            return 0;
          } else {
            return this.dictionary.getValue(element).copies;
          }
        };
        Bag2.prototype.contains = function(element) {
          return this.dictionary.containsKey(element);
        };
        Bag2.prototype.remove = function(element, nCopies) {
          if (nCopies === void 0) {
            nCopies = 1;
          }
          if (util.isUndefined(element) || nCopies <= 0) {
            return false;
          }
          if (!this.contains(element)) {
            return false;
          } else {
            var node = this.dictionary.getValue(element);
            if (nCopies > node.copies) {
              this.nElements -= node.copies;
            } else {
              this.nElements -= nCopies;
            }
            node.copies -= nCopies;
            if (node.copies <= 0) {
              this.dictionary.remove(element);
            }
            return true;
          }
        };
        Bag2.prototype.toArray = function() {
          var a = [];
          var values = this.dictionary.values();
          for (var _i = 0, values_1 = values; _i < values_1.length; _i++) {
            var node = values_1[_i];
            var element = node.value;
            var copies = node.copies;
            for (var j = 0; j < copies; j++) {
              a.push(element);
            }
          }
          return a;
        };
        Bag2.prototype.toSet = function() {
          var toret = new Set_1.default(this.toStrF);
          var elements = this.dictionary.values();
          for (var _i = 0, elements_1 = elements; _i < elements_1.length; _i++) {
            var ele = elements_1[_i];
            var value = ele.value;
            toret.add(value);
          }
          return toret;
        };
        Bag2.prototype.forEach = function(callback) {
          this.dictionary.forEach(function(k, v) {
            var value = v.value;
            var copies = v.copies;
            for (var i = 0; i < copies; i++) {
              if (callback(value) === false) {
                return false;
              }
            }
            return true;
          });
        };
        Bag2.prototype.size = function() {
          return this.nElements;
        };
        Bag2.prototype.isEmpty = function() {
          return this.nElements === 0;
        };
        Bag2.prototype.clear = function() {
          this.nElements = 0;
          this.dictionary.clear();
        };
        return Bag2;
      }()
    );
    exports.default = Bag;
  }
});

// ../../node_modules/typescript-collections/dist/lib/LinkedList.js
var require_LinkedList = __commonJS({
  "../../node_modules/typescript-collections/dist/lib/LinkedList.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var util = require_util4();
    var arrays = require_arrays();
    var LinkedList = (
      /** @class */
      function() {
        function LinkedList2() {
          this.firstNode = null;
          this.lastNode = null;
          this.nElements = 0;
        }
        LinkedList2.prototype.add = function(item, index) {
          if (util.isUndefined(index)) {
            index = this.nElements;
          }
          if (index < 0 || index > this.nElements || util.isUndefined(item)) {
            return false;
          }
          var newNode = this.createNode(item);
          if (this.nElements === 0 || this.lastNode === null) {
            this.firstNode = newNode;
            this.lastNode = newNode;
          } else if (index === this.nElements) {
            this.lastNode.next = newNode;
            this.lastNode = newNode;
          } else if (index === 0) {
            newNode.next = this.firstNode;
            this.firstNode = newNode;
          } else {
            var prev = this.nodeAtIndex(index - 1);
            if (prev === null) {
              return false;
            }
            newNode.next = prev.next;
            prev.next = newNode;
          }
          this.nElements++;
          return true;
        };
        LinkedList2.prototype.first = function() {
          if (this.firstNode !== null) {
            return this.firstNode.element;
          }
          return void 0;
        };
        LinkedList2.prototype.last = function() {
          if (this.lastNode !== null) {
            return this.lastNode.element;
          }
          return void 0;
        };
        LinkedList2.prototype.elementAtIndex = function(index) {
          var node = this.nodeAtIndex(index);
          if (node === null) {
            return void 0;
          }
          return node.element;
        };
        LinkedList2.prototype.indexOf = function(item, equalsFunction) {
          var equalsF = equalsFunction || util.defaultEquals;
          if (util.isUndefined(item)) {
            return -1;
          }
          var currentNode = this.firstNode;
          var index = 0;
          while (currentNode !== null) {
            if (equalsF(currentNode.element, item)) {
              return index;
            }
            index++;
            currentNode = currentNode.next;
          }
          return -1;
        };
        LinkedList2.prototype.contains = function(item, equalsFunction) {
          return this.indexOf(item, equalsFunction) >= 0;
        };
        LinkedList2.prototype.remove = function(item, equalsFunction) {
          var equalsF = equalsFunction || util.defaultEquals;
          if (this.nElements < 1 || util.isUndefined(item)) {
            return false;
          }
          var previous = null;
          var currentNode = this.firstNode;
          while (currentNode !== null) {
            if (equalsF(currentNode.element, item)) {
              if (previous === null) {
                this.firstNode = currentNode.next;
                if (currentNode === this.lastNode) {
                  this.lastNode = null;
                }
              } else if (currentNode === this.lastNode) {
                this.lastNode = previous;
                previous.next = currentNode.next;
                currentNode.next = null;
              } else {
                previous.next = currentNode.next;
                currentNode.next = null;
              }
              this.nElements--;
              return true;
            }
            previous = currentNode;
            currentNode = currentNode.next;
          }
          return false;
        };
        LinkedList2.prototype.clear = function() {
          this.firstNode = null;
          this.lastNode = null;
          this.nElements = 0;
        };
        LinkedList2.prototype.equals = function(other, equalsFunction) {
          var eqF = equalsFunction || util.defaultEquals;
          if (!(other instanceof LinkedList2)) {
            return false;
          }
          if (this.size() !== other.size()) {
            return false;
          }
          return this.equalsAux(this.firstNode, other.firstNode, eqF);
        };
        LinkedList2.prototype.equalsAux = function(n1, n2, eqF) {
          while (n1 !== null && n2 !== null) {
            if (!eqF(n1.element, n2.element)) {
              return false;
            }
            n1 = n1.next;
            n2 = n2.next;
          }
          return true;
        };
        LinkedList2.prototype.removeElementAtIndex = function(index) {
          if (index < 0 || index >= this.nElements || this.firstNode === null || this.lastNode === null) {
            return void 0;
          }
          var element;
          if (this.nElements === 1) {
            element = this.firstNode.element;
            this.firstNode = null;
            this.lastNode = null;
          } else {
            var previous = this.nodeAtIndex(index - 1);
            if (previous === null) {
              element = this.firstNode.element;
              this.firstNode = this.firstNode.next;
            } else if (previous.next === this.lastNode) {
              element = this.lastNode.element;
              this.lastNode = previous;
            }
            if (previous !== null && previous.next !== null) {
              element = previous.next.element;
              previous.next = previous.next.next;
            }
          }
          this.nElements--;
          return element;
        };
        LinkedList2.prototype.forEach = function(callback) {
          var currentNode = this.firstNode;
          while (currentNode !== null) {
            if (callback(currentNode.element) === false) {
              break;
            }
            currentNode = currentNode.next;
          }
        };
        LinkedList2.prototype.reverse = function() {
          var previous = null;
          var current = this.firstNode;
          var temp = null;
          while (current !== null) {
            temp = current.next;
            current.next = previous;
            previous = current;
            current = temp;
          }
          temp = this.firstNode;
          this.firstNode = this.lastNode;
          this.lastNode = temp;
        };
        LinkedList2.prototype.toArray = function() {
          var array = [];
          var currentNode = this.firstNode;
          while (currentNode !== null) {
            array.push(currentNode.element);
            currentNode = currentNode.next;
          }
          return array;
        };
        LinkedList2.prototype.size = function() {
          return this.nElements;
        };
        LinkedList2.prototype.isEmpty = function() {
          return this.nElements <= 0;
        };
        LinkedList2.prototype.toString = function() {
          return arrays.toString(this.toArray());
        };
        LinkedList2.prototype.nodeAtIndex = function(index) {
          if (index < 0 || index >= this.nElements) {
            return null;
          }
          if (index === this.nElements - 1) {
            return this.lastNode;
          }
          var node = this.firstNode;
          for (var i = 0; i < index && node !== null; i++) {
            node = node.next;
          }
          return node;
        };
        LinkedList2.prototype.createNode = function(item) {
          return {
            element: item,
            next: null
          };
        };
        return LinkedList2;
      }()
    );
    exports.default = LinkedList;
  }
});

// ../../node_modules/typescript-collections/dist/lib/Queue.js
var require_Queue = __commonJS({
  "../../node_modules/typescript-collections/dist/lib/Queue.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var LinkedList_1 = require_LinkedList();
    var Queue = (
      /** @class */
      function() {
        function Queue2() {
          this.list = new LinkedList_1.default();
        }
        Queue2.prototype.enqueue = function(elem) {
          return this.list.add(elem);
        };
        Queue2.prototype.add = function(elem) {
          return this.list.add(elem);
        };
        Queue2.prototype.dequeue = function() {
          if (this.list.size() !== 0) {
            var el = this.list.first();
            this.list.removeElementAtIndex(0);
            return el;
          }
          return void 0;
        };
        Queue2.prototype.peek = function() {
          if (this.list.size() !== 0) {
            return this.list.first();
          }
          return void 0;
        };
        Queue2.prototype.size = function() {
          return this.list.size();
        };
        Queue2.prototype.contains = function(elem, equalsFunction) {
          return this.list.contains(elem, equalsFunction);
        };
        Queue2.prototype.isEmpty = function() {
          return this.list.size() <= 0;
        };
        Queue2.prototype.clear = function() {
          this.list.clear();
        };
        Queue2.prototype.forEach = function(callback) {
          this.list.forEach(callback);
        };
        return Queue2;
      }()
    );
    exports.default = Queue;
  }
});

// ../../node_modules/typescript-collections/dist/lib/BSTreeKV.js
var require_BSTreeKV = __commonJS({
  "../../node_modules/typescript-collections/dist/lib/BSTreeKV.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var util = require_util4();
    var Queue_1 = require_Queue();
    var BSTreeKV = (
      /** @class */
      function() {
        function BSTreeKV2(compareFunction) {
          this.root = null;
          this.compare = compareFunction || util.defaultCompare;
          this.nElements = 0;
        }
        BSTreeKV2.prototype.add = function(element) {
          if (util.isUndefined(element)) {
            return false;
          }
          if (this.insertNode(this.createNode(element)) !== null) {
            this.nElements++;
            return true;
          }
          return false;
        };
        BSTreeKV2.prototype.clear = function() {
          this.root = null;
          this.nElements = 0;
        };
        BSTreeKV2.prototype.isEmpty = function() {
          return this.nElements === 0;
        };
        BSTreeKV2.prototype.size = function() {
          return this.nElements;
        };
        BSTreeKV2.prototype.contains = function(element) {
          if (util.isUndefined(element)) {
            return false;
          }
          return this.searchNode(this.root, element) !== null;
        };
        BSTreeKV2.prototype.search = function(element) {
          var ret = this.searchNode(this.root, element);
          if (ret === null) {
            return void 0;
          }
          return ret.element;
        };
        BSTreeKV2.prototype.remove = function(element) {
          var node = this.searchNode(this.root, element);
          if (node === null) {
            return false;
          }
          this.removeNode(node);
          this.nElements--;
          return true;
        };
        BSTreeKV2.prototype.inorderTraversal = function(callback) {
          this.inorderTraversalAux(this.root, callback, {
            stop: false
          });
        };
        BSTreeKV2.prototype.preorderTraversal = function(callback) {
          this.preorderTraversalAux(this.root, callback, {
            stop: false
          });
        };
        BSTreeKV2.prototype.postorderTraversal = function(callback) {
          this.postorderTraversalAux(this.root, callback, {
            stop: false
          });
        };
        BSTreeKV2.prototype.levelTraversal = function(callback) {
          this.levelTraversalAux(this.root, callback);
        };
        BSTreeKV2.prototype.minimum = function() {
          if (this.isEmpty() || this.root === null) {
            return void 0;
          }
          return this.minimumAux(this.root).element;
        };
        BSTreeKV2.prototype.maximum = function() {
          if (this.isEmpty() || this.root === null) {
            return void 0;
          }
          return this.maximumAux(this.root).element;
        };
        BSTreeKV2.prototype.forEach = function(callback) {
          this.inorderTraversal(callback);
        };
        BSTreeKV2.prototype.toArray = function() {
          var array = [];
          this.inorderTraversal(function(element) {
            array.push(element);
            return true;
          });
          return array;
        };
        BSTreeKV2.prototype.height = function() {
          return this.heightAux(this.root);
        };
        BSTreeKV2.prototype.searchNode = function(node, element) {
          var cmp = 1;
          while (node !== null && cmp !== 0) {
            cmp = this.compare(element, node.element);
            if (cmp < 0) {
              node = node.leftCh;
            } else if (cmp > 0) {
              node = node.rightCh;
            }
          }
          return node;
        };
        BSTreeKV2.prototype.transplant = function(n1, n2) {
          if (n1.parent === null) {
            this.root = n2;
          } else if (n1 === n1.parent.leftCh) {
            n1.parent.leftCh = n2;
          } else {
            n1.parent.rightCh = n2;
          }
          if (n2 !== null) {
            n2.parent = n1.parent;
          }
        };
        BSTreeKV2.prototype.removeNode = function(node) {
          if (node.leftCh === null) {
            this.transplant(node, node.rightCh);
          } else if (node.rightCh === null) {
            this.transplant(node, node.leftCh);
          } else {
            var y = this.minimumAux(node.rightCh);
            if (y.parent !== node) {
              this.transplant(y, y.rightCh);
              y.rightCh = node.rightCh;
              y.rightCh.parent = y;
            }
            this.transplant(node, y);
            y.leftCh = node.leftCh;
            y.leftCh.parent = y;
          }
        };
        BSTreeKV2.prototype.inorderTraversalAux = function(node, callback, signal) {
          if (node === null || signal.stop) {
            return;
          }
          this.inorderTraversalAux(node.leftCh, callback, signal);
          if (signal.stop) {
            return;
          }
          signal.stop = callback(node.element) === false;
          if (signal.stop) {
            return;
          }
          this.inorderTraversalAux(node.rightCh, callback, signal);
        };
        BSTreeKV2.prototype.levelTraversalAux = function(node, callback) {
          var queue = new Queue_1.default();
          if (node !== null) {
            queue.enqueue(node);
          }
          node = queue.dequeue() || null;
          while (node != null) {
            if (callback(node.element) === false) {
              return;
            }
            if (node.leftCh !== null) {
              queue.enqueue(node.leftCh);
            }
            if (node.rightCh !== null) {
              queue.enqueue(node.rightCh);
            }
            node = queue.dequeue() || null;
          }
        };
        BSTreeKV2.prototype.preorderTraversalAux = function(node, callback, signal) {
          if (node === null || signal.stop) {
            return;
          }
          signal.stop = callback(node.element) === false;
          if (signal.stop) {
            return;
          }
          this.preorderTraversalAux(node.leftCh, callback, signal);
          if (signal.stop) {
            return;
          }
          this.preorderTraversalAux(node.rightCh, callback, signal);
        };
        BSTreeKV2.prototype.postorderTraversalAux = function(node, callback, signal) {
          if (node === null || signal.stop) {
            return;
          }
          this.postorderTraversalAux(node.leftCh, callback, signal);
          if (signal.stop) {
            return;
          }
          this.postorderTraversalAux(node.rightCh, callback, signal);
          if (signal.stop) {
            return;
          }
          signal.stop = callback(node.element) === false;
        };
        BSTreeKV2.prototype.minimumAux = function(node) {
          while (node != null && node.leftCh !== null) {
            node = node.leftCh;
          }
          return node;
        };
        BSTreeKV2.prototype.maximumAux = function(node) {
          while (node != null && node.rightCh !== null) {
            node = node.rightCh;
          }
          return node;
        };
        BSTreeKV2.prototype.heightAux = function(node) {
          if (node === null) {
            return -1;
          }
          return Math.max(this.heightAux(node.leftCh), this.heightAux(node.rightCh)) + 1;
        };
        BSTreeKV2.prototype.insertNode = function(node) {
          var parent = null;
          var position = this.root;
          while (position !== null) {
            var cmp = this.compare(node.element, position.element);
            if (cmp === 0) {
              return null;
            } else if (cmp < 0) {
              parent = position;
              position = position.leftCh;
            } else {
              parent = position;
              position = position.rightCh;
            }
          }
          node.parent = parent;
          if (parent === null) {
            this.root = node;
          } else if (this.compare(node.element, parent.element) < 0) {
            parent.leftCh = node;
          } else {
            parent.rightCh = node;
          }
          return node;
        };
        BSTreeKV2.prototype.createNode = function(element) {
          return {
            element,
            leftCh: null,
            rightCh: null,
            parent: null
          };
        };
        return BSTreeKV2;
      }()
    );
    exports.default = BSTreeKV;
  }
});

// ../../node_modules/typescript-collections/dist/lib/BSTree.js
var require_BSTree = __commonJS({
  "../../node_modules/typescript-collections/dist/lib/BSTree.js"(exports) {
    "use strict";
    var __extends = exports && exports.__extends || function() {
      var extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d, b) {
        d.__proto__ = b;
      } || function(d, b) {
        for (var p in b)
          if (b.hasOwnProperty(p))
            d[p] = b[p];
      };
      return function(d, b) {
        extendStatics(d, b);
        function __() {
          this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
    }();
    Object.defineProperty(exports, "__esModule", { value: true });
    var BSTreeKV_1 = require_BSTreeKV();
    var BSTree = (
      /** @class */
      function(_super) {
        __extends(BSTree2, _super);
        function BSTree2() {
          return _super !== null && _super.apply(this, arguments) || this;
        }
        return BSTree2;
      }(BSTreeKV_1.default)
    );
    exports.default = BSTree;
  }
});

// ../../node_modules/typescript-collections/dist/lib/Heap.js
var require_Heap = __commonJS({
  "../../node_modules/typescript-collections/dist/lib/Heap.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var collections = require_util4();
    var arrays = require_arrays();
    var Heap = (
      /** @class */
      function() {
        function Heap2(compareFunction) {
          this.data = [];
          this.compare = compareFunction || collections.defaultCompare;
        }
        Heap2.prototype.leftChildIndex = function(nodeIndex) {
          return 2 * nodeIndex + 1;
        };
        Heap2.prototype.rightChildIndex = function(nodeIndex) {
          return 2 * nodeIndex + 2;
        };
        Heap2.prototype.parentIndex = function(nodeIndex) {
          return Math.floor((nodeIndex - 1) / 2);
        };
        Heap2.prototype.minIndex = function(leftChild, rightChild) {
          if (rightChild >= this.data.length) {
            if (leftChild >= this.data.length) {
              return -1;
            } else {
              return leftChild;
            }
          } else {
            if (this.compare(this.data[leftChild], this.data[rightChild]) <= 0) {
              return leftChild;
            } else {
              return rightChild;
            }
          }
        };
        Heap2.prototype.siftUp = function(index) {
          var parent = this.parentIndex(index);
          while (index > 0 && this.compare(this.data[parent], this.data[index]) > 0) {
            arrays.swap(this.data, parent, index);
            index = parent;
            parent = this.parentIndex(index);
          }
        };
        Heap2.prototype.siftDown = function(nodeIndex) {
          var min = this.minIndex(this.leftChildIndex(nodeIndex), this.rightChildIndex(nodeIndex));
          while (min >= 0 && this.compare(this.data[nodeIndex], this.data[min]) > 0) {
            arrays.swap(this.data, min, nodeIndex);
            nodeIndex = min;
            min = this.minIndex(this.leftChildIndex(nodeIndex), this.rightChildIndex(nodeIndex));
          }
        };
        Heap2.prototype.peek = function() {
          if (this.data.length > 0) {
            return this.data[0];
          } else {
            return void 0;
          }
        };
        Heap2.prototype.add = function(element) {
          if (collections.isUndefined(element)) {
            return false;
          }
          this.data.push(element);
          this.siftUp(this.data.length - 1);
          return true;
        };
        Heap2.prototype.removeRoot = function() {
          if (this.data.length > 0) {
            var obj = this.data[0];
            this.data[0] = this.data[this.data.length - 1];
            this.data.splice(this.data.length - 1, 1);
            if (this.data.length > 0) {
              this.siftDown(0);
            }
            return obj;
          }
          return void 0;
        };
        Heap2.prototype.contains = function(element) {
          var equF = collections.compareToEquals(this.compare);
          return arrays.contains(this.data, element, equF);
        };
        Heap2.prototype.size = function() {
          return this.data.length;
        };
        Heap2.prototype.isEmpty = function() {
          return this.data.length <= 0;
        };
        Heap2.prototype.clear = function() {
          this.data.length = 0;
        };
        Heap2.prototype.forEach = function(callback) {
          arrays.forEach(this.data, callback);
        };
        return Heap2;
      }()
    );
    exports.default = Heap;
  }
});

// ../../node_modules/typescript-collections/dist/lib/LinkedDictionary.js
var require_LinkedDictionary = __commonJS({
  "../../node_modules/typescript-collections/dist/lib/LinkedDictionary.js"(exports) {
    "use strict";
    var __extends = exports && exports.__extends || function() {
      var extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d, b) {
        d.__proto__ = b;
      } || function(d, b) {
        for (var p in b)
          if (b.hasOwnProperty(p))
            d[p] = b[p];
      };
      return function(d, b) {
        extendStatics(d, b);
        function __() {
          this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
    }();
    Object.defineProperty(exports, "__esModule", { value: true });
    var Dictionary_1 = require_Dictionary();
    var util = require_util4();
    var LinkedDictionaryPair = (
      /** @class */
      function() {
        function LinkedDictionaryPair2(key, value) {
          this.key = key;
          this.value = value;
        }
        LinkedDictionaryPair2.prototype.unlink = function() {
          this.prev.next = this.next;
          this.next.prev = this.prev;
        };
        return LinkedDictionaryPair2;
      }()
    );
    var HeadOrTailLinkedDictionaryPair = (
      /** @class */
      function() {
        function HeadOrTailLinkedDictionaryPair2() {
          this.key = null;
          this.value = null;
        }
        HeadOrTailLinkedDictionaryPair2.prototype.unlink = function() {
          this.prev.next = this.next;
          this.next.prev = this.prev;
        };
        return HeadOrTailLinkedDictionaryPair2;
      }()
    );
    function isHeadOrTailLinkedDictionaryPair(p) {
      return !p.next;
    }
    var LinkedDictionary = (
      /** @class */
      function(_super) {
        __extends(LinkedDictionary2, _super);
        function LinkedDictionary2(toStrFunction) {
          var _this = _super.call(this, toStrFunction) || this;
          _this.head = new HeadOrTailLinkedDictionaryPair();
          _this.tail = new HeadOrTailLinkedDictionaryPair();
          _this.head.next = _this.tail;
          _this.tail.prev = _this.head;
          return _this;
        }
        LinkedDictionary2.prototype.appendToTail = function(entry) {
          var lastNode = this.tail.prev;
          lastNode.next = entry;
          entry.prev = lastNode;
          entry.next = this.tail;
          this.tail.prev = entry;
        };
        LinkedDictionary2.prototype.getLinkedDictionaryPair = function(key) {
          if (util.isUndefined(key)) {
            return void 0;
          }
          var k = "$" + this.toStr(key);
          var pair = this.table[k];
          return pair;
        };
        LinkedDictionary2.prototype.getValue = function(key) {
          var pair = this.getLinkedDictionaryPair(key);
          if (!util.isUndefined(pair)) {
            return pair.value;
          }
          return void 0;
        };
        LinkedDictionary2.prototype.remove = function(key) {
          var pair = this.getLinkedDictionaryPair(key);
          if (!util.isUndefined(pair)) {
            _super.prototype.remove.call(this, key);
            pair.unlink();
            return pair.value;
          }
          return void 0;
        };
        LinkedDictionary2.prototype.clear = function() {
          _super.prototype.clear.call(this);
          this.head.next = this.tail;
          this.tail.prev = this.head;
        };
        LinkedDictionary2.prototype.replace = function(oldPair, newPair) {
          var k = "$" + this.toStr(newPair.key);
          newPair.next = oldPair.next;
          newPair.prev = oldPair.prev;
          this.remove(oldPair.key);
          newPair.prev.next = newPair;
          newPair.next.prev = newPair;
          this.table[k] = newPair;
          ++this.nElements;
        };
        LinkedDictionary2.prototype.setValue = function(key, value) {
          if (util.isUndefined(key) || util.isUndefined(value)) {
            return void 0;
          }
          var existingPair = this.getLinkedDictionaryPair(key);
          var newPair = new LinkedDictionaryPair(key, value);
          var k = "$" + this.toStr(key);
          if (!util.isUndefined(existingPair)) {
            this.replace(existingPair, newPair);
            return existingPair.value;
          } else {
            this.appendToTail(newPair);
            this.table[k] = newPair;
            ++this.nElements;
            return void 0;
          }
        };
        LinkedDictionary2.prototype.keys = function() {
          var array = [];
          this.forEach(function(key, value) {
            array.push(key);
          });
          return array;
        };
        LinkedDictionary2.prototype.values = function() {
          var array = [];
          this.forEach(function(key, value) {
            array.push(value);
          });
          return array;
        };
        LinkedDictionary2.prototype.forEach = function(callback) {
          var crawlNode = this.head.next;
          while (!isHeadOrTailLinkedDictionaryPair(crawlNode)) {
            var ret = callback(crawlNode.key, crawlNode.value);
            if (ret === false) {
              return;
            }
            crawlNode = crawlNode.next;
          }
        };
        return LinkedDictionary2;
      }(Dictionary_1.default)
    );
    exports.default = LinkedDictionary;
  }
});

// ../../node_modules/typescript-collections/dist/lib/MultiDictionary.js
var require_MultiDictionary = __commonJS({
  "../../node_modules/typescript-collections/dist/lib/MultiDictionary.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var util = require_util4();
    var Dictionary_1 = require_Dictionary();
    var arrays = require_arrays();
    var MultiDictionary = (
      /** @class */
      function() {
        function MultiDictionary2(toStrFunction, valuesEqualsFunction, allowDuplicateValues) {
          if (allowDuplicateValues === void 0) {
            allowDuplicateValues = false;
          }
          this.dict = new Dictionary_1.default(toStrFunction);
          this.equalsF = valuesEqualsFunction || util.defaultEquals;
          this.allowDuplicate = allowDuplicateValues;
        }
        MultiDictionary2.prototype.getValue = function(key) {
          var values = this.dict.getValue(key);
          if (util.isUndefined(values)) {
            return [];
          }
          return arrays.copy(values);
        };
        MultiDictionary2.prototype.setValue = function(key, value) {
          if (util.isUndefined(key) || util.isUndefined(value)) {
            return false;
          }
          var array = this.dict.getValue(key);
          if (util.isUndefined(array)) {
            this.dict.setValue(key, [value]);
            return true;
          }
          if (!this.allowDuplicate) {
            if (arrays.contains(array, value, this.equalsF)) {
              return false;
            }
          }
          array.push(value);
          return true;
        };
        MultiDictionary2.prototype.remove = function(key, value) {
          if (util.isUndefined(value)) {
            var v = this.dict.remove(key);
            return !util.isUndefined(v);
          }
          var array = this.dict.getValue(key);
          if (!util.isUndefined(array) && arrays.remove(array, value, this.equalsF)) {
            if (array.length === 0) {
              this.dict.remove(key);
            }
            return true;
          }
          return false;
        };
        MultiDictionary2.prototype.keys = function() {
          return this.dict.keys();
        };
        MultiDictionary2.prototype.values = function() {
          var values = this.dict.values();
          var array = [];
          for (var _i = 0, values_1 = values; _i < values_1.length; _i++) {
            var v = values_1[_i];
            for (var _a = 0, v_1 = v; _a < v_1.length; _a++) {
              var w = v_1[_a];
              array.push(w);
            }
          }
          return array;
        };
        MultiDictionary2.prototype.containsKey = function(key) {
          return this.dict.containsKey(key);
        };
        MultiDictionary2.prototype.clear = function() {
          this.dict.clear();
        };
        MultiDictionary2.prototype.size = function() {
          return this.dict.size();
        };
        MultiDictionary2.prototype.isEmpty = function() {
          return this.dict.isEmpty();
        };
        return MultiDictionary2;
      }()
    );
    exports.default = MultiDictionary;
  }
});

// ../../node_modules/typescript-collections/dist/lib/FactoryDictionary.js
var require_FactoryDictionary = __commonJS({
  "../../node_modules/typescript-collections/dist/lib/FactoryDictionary.js"(exports) {
    "use strict";
    var __extends = exports && exports.__extends || function() {
      var extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d, b) {
        d.__proto__ = b;
      } || function(d, b) {
        for (var p in b)
          if (b.hasOwnProperty(p))
            d[p] = b[p];
      };
      return function(d, b) {
        extendStatics(d, b);
        function __() {
          this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
    }();
    Object.defineProperty(exports, "__esModule", { value: true });
    var Dictionary_1 = require_Dictionary();
    var util = require_util4();
    var FactoryDictionary = (
      /** @class */
      function(_super) {
        __extends(FactoryDictionary2, _super);
        function FactoryDictionary2(defaultFactoryFunction, toStrFunction) {
          var _this = _super.call(this, toStrFunction) || this;
          _this.defaultFactoryFunction = defaultFactoryFunction;
          return _this;
        }
        FactoryDictionary2.prototype.setDefault = function(key, defaultValue) {
          var currentValue = _super.prototype.getValue.call(this, key);
          if (util.isUndefined(currentValue)) {
            this.setValue(key, defaultValue);
            return defaultValue;
          }
          return currentValue;
        };
        FactoryDictionary2.prototype.getValue = function(key) {
          return this.setDefault(key, this.defaultFactoryFunction());
        };
        return FactoryDictionary2;
      }(Dictionary_1.default)
    );
    exports.default = FactoryDictionary;
  }
});

// ../../node_modules/typescript-collections/dist/lib/PriorityQueue.js
var require_PriorityQueue = __commonJS({
  "../../node_modules/typescript-collections/dist/lib/PriorityQueue.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var util = require_util4();
    var Heap_1 = require_Heap();
    var PriorityQueue = (
      /** @class */
      function() {
        function PriorityQueue2(compareFunction) {
          this.heap = new Heap_1.default(util.reverseCompareFunction(compareFunction));
        }
        PriorityQueue2.prototype.enqueue = function(element) {
          return this.heap.add(element);
        };
        PriorityQueue2.prototype.add = function(element) {
          return this.heap.add(element);
        };
        PriorityQueue2.prototype.dequeue = function() {
          if (this.heap.size() !== 0) {
            var el = this.heap.peek();
            this.heap.removeRoot();
            return el;
          }
          return void 0;
        };
        PriorityQueue2.prototype.peek = function() {
          return this.heap.peek();
        };
        PriorityQueue2.prototype.contains = function(element) {
          return this.heap.contains(element);
        };
        PriorityQueue2.prototype.isEmpty = function() {
          return this.heap.isEmpty();
        };
        PriorityQueue2.prototype.size = function() {
          return this.heap.size();
        };
        PriorityQueue2.prototype.clear = function() {
          this.heap.clear();
        };
        PriorityQueue2.prototype.forEach = function(callback) {
          this.heap.forEach(callback);
        };
        return PriorityQueue2;
      }()
    );
    exports.default = PriorityQueue;
  }
});

// ../../node_modules/typescript-collections/dist/lib/Stack.js
var require_Stack = __commonJS({
  "../../node_modules/typescript-collections/dist/lib/Stack.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var LinkedList_1 = require_LinkedList();
    var Stack = (
      /** @class */
      function() {
        function Stack2() {
          this.list = new LinkedList_1.default();
        }
        Stack2.prototype.push = function(elem) {
          return this.list.add(elem, 0);
        };
        Stack2.prototype.add = function(elem) {
          return this.list.add(elem, 0);
        };
        Stack2.prototype.pop = function() {
          return this.list.removeElementAtIndex(0);
        };
        Stack2.prototype.peek = function() {
          return this.list.first();
        };
        Stack2.prototype.size = function() {
          return this.list.size();
        };
        Stack2.prototype.contains = function(elem, equalsFunction) {
          return this.list.contains(elem, equalsFunction);
        };
        Stack2.prototype.isEmpty = function() {
          return this.list.isEmpty();
        };
        Stack2.prototype.clear = function() {
          this.list.clear();
        };
        Stack2.prototype.forEach = function(callback) {
          this.list.forEach(callback);
        };
        return Stack2;
      }()
    );
    exports.default = Stack;
  }
});

// ../../node_modules/typescript-collections/dist/lib/MultiRootTree.js
var require_MultiRootTree = __commonJS({
  "../../node_modules/typescript-collections/dist/lib/MultiRootTree.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var Direction;
    (function(Direction2) {
      Direction2[Direction2["BEFORE"] = 0] = "BEFORE";
      Direction2[Direction2["AFTER"] = 1] = "AFTER";
      Direction2[Direction2["INSIDE_AT_END"] = 2] = "INSIDE_AT_END";
      Direction2[Direction2["INSIDE_AT_START"] = 3] = "INSIDE_AT_START";
    })(Direction || (Direction = {}));
    var MultiRootTree = (
      /** @class */
      function() {
        function MultiRootTree2(rootIds, nodes) {
          if (rootIds === void 0) {
            rootIds = [];
          }
          if (nodes === void 0) {
            nodes = {};
          }
          this.rootIds = rootIds;
          this.nodes = nodes;
          this.initRootIds();
          this.initNodes();
        }
        MultiRootTree2.prototype.initRootIds = function() {
          for (var _i = 0, _a = this.rootIds; _i < _a.length; _i++) {
            var rootId = _a[_i];
            this.createEmptyNodeIfNotExist(rootId);
          }
        };
        MultiRootTree2.prototype.initNodes = function() {
          for (var nodeKey in this.nodes) {
            if (this.nodes.hasOwnProperty(nodeKey)) {
              for (var _i = 0, _a = this.nodes[nodeKey]; _i < _a.length; _i++) {
                var nodeListItem = _a[_i];
                this.createEmptyNodeIfNotExist(nodeListItem);
              }
            }
          }
        };
        MultiRootTree2.prototype.createEmptyNodeIfNotExist = function(nodeKey) {
          if (!this.nodes[nodeKey]) {
            this.nodes[nodeKey] = [];
          }
        };
        MultiRootTree2.prototype.getRootIds = function() {
          var clone2 = this.rootIds.slice();
          return clone2;
        };
        MultiRootTree2.prototype.getNodes = function() {
          var clone2 = {};
          for (var nodeKey in this.nodes) {
            if (this.nodes.hasOwnProperty(nodeKey)) {
              clone2[nodeKey] = this.nodes[nodeKey].slice();
            }
          }
          return clone2;
        };
        MultiRootTree2.prototype.getObject = function() {
          return {
            rootIds: this.getRootIds(),
            nodes: this.getNodes()
          };
        };
        MultiRootTree2.prototype.toObject = function() {
          return this.getObject();
        };
        MultiRootTree2.prototype.flatten = function() {
          var _this = this;
          var extraPropsObject = [];
          for (var i = 0; i < this.rootIds.length; i++) {
            var rootId = this.rootIds[i];
            extraPropsObject.push({
              id: rootId,
              level: 0,
              hasParent: false,
              childrenCount: 0
            });
            traverse(rootId, this.nodes, extraPropsObject, 0);
          }
          for (var _i = 0, extraPropsObject_1 = extraPropsObject; _i < extraPropsObject_1.length; _i++) {
            var o2 = extraPropsObject_1[_i];
            o2.childrenCount = countChildren(o2.id);
          }
          return extraPropsObject;
          function countChildren(id) {
            if (!_this.nodes[id]) {
              return 0;
            } else {
              var childrenCount = _this.nodes[id].length;
              return childrenCount;
            }
          }
          function traverse(startId, nodes, returnArray, level) {
            if (level === void 0) {
              level = 0;
            }
            if (!startId || !nodes || !returnArray || !nodes[startId]) {
              return;
            }
            level++;
            var idsList = nodes[startId];
            for (var i2 = 0; i2 < idsList.length; i2++) {
              var id = idsList[i2];
              returnArray.push({ id, level, hasParent: true });
              traverse(id, nodes, returnArray, level);
            }
            level--;
          }
        };
        MultiRootTree2.prototype.moveIdBeforeId = function(moveId, beforeId) {
          return this.moveId(moveId, beforeId, Direction.BEFORE);
        };
        MultiRootTree2.prototype.moveIdAfterId = function(moveId, afterId) {
          return this.moveId(moveId, afterId, Direction.AFTER);
        };
        MultiRootTree2.prototype.moveIdIntoId = function(moveId, insideId, atStart) {
          if (atStart === void 0) {
            atStart = true;
          }
          if (atStart) {
            return this.moveId(moveId, insideId, Direction.INSIDE_AT_START);
          } else {
            return this.moveId(moveId, insideId, Direction.INSIDE_AT_END);
          }
        };
        MultiRootTree2.prototype.swapRootIdWithRootId = function(rootId, withRootId) {
          var leftIndex = this.findRootId(rootId);
          var rightIndex = this.findRootId(withRootId);
          this.swapRootPositionWithRootPosition(leftIndex, rightIndex);
        };
        MultiRootTree2.prototype.swapRootPositionWithRootPosition = function(swapRootPosition, withRootPosition) {
          var temp = this.rootIds[withRootPosition];
          this.rootIds[withRootPosition] = this.rootIds[swapRootPosition];
          this.rootIds[swapRootPosition] = temp;
        };
        MultiRootTree2.prototype.deleteId = function(id) {
          this.rootDeleteId(id);
          this.nodeAndSubNodesDelete(id);
          this.nodeRefrencesDelete(id);
        };
        MultiRootTree2.prototype.insertIdBeforeId = function(beforeId, insertId) {
          var foundRootIdIndex = this.findRootId(beforeId);
          if (foundRootIdIndex > -1) {
            this.insertIdIntoRoot(insertId, foundRootIdIndex);
          }
          for (var nodeKey in this.nodes) {
            if (this.nodes.hasOwnProperty(nodeKey)) {
              var foundNodeIdIndex = this.findNodeId(nodeKey, beforeId);
              if (foundNodeIdIndex > -1) {
                this.insertIdIntoNode(nodeKey, insertId, foundNodeIdIndex);
              }
            }
          }
        };
        MultiRootTree2.prototype.insertIdAfterId = function(belowId, insertId) {
          var foundRootIdIndex = this.findRootId(belowId);
          if (foundRootIdIndex > -1) {
            this.insertIdIntoRoot(insertId, foundRootIdIndex + 1);
          }
          for (var nodeKey in this.nodes) {
            if (this.nodes.hasOwnProperty(nodeKey)) {
              var foundNodeIdIndex = this.findNodeId(nodeKey, belowId);
              if (foundNodeIdIndex > -1) {
                this.insertIdIntoNode(nodeKey, insertId, foundNodeIdIndex + 1);
              }
            }
          }
        };
        MultiRootTree2.prototype.insertIdIntoId = function(insideId, insertId) {
          this.nodeInsertAtEnd(insideId, insertId);
          this.nodes[insertId] = [];
        };
        MultiRootTree2.prototype.insertIdIntoRoot = function(id, position) {
          if (position === void 0) {
            this.rootInsertAtEnd(id);
          } else {
            if (position < 0) {
              var length_1 = this.rootIds.length;
              this.rootIds.splice(position + length_1 + 1, 0, id);
            } else {
              this.rootIds.splice(position, 0, id);
            }
          }
          this.nodes[id] = this.nodes[id] || [];
        };
        MultiRootTree2.prototype.insertIdIntoNode = function(nodeKey, id, position) {
          this.nodes[nodeKey] = this.nodes[nodeKey] || [];
          this.nodes[id] = this.nodes[id] || [];
          if (position === void 0) {
            this.nodeInsertAtEnd(nodeKey, id);
          } else {
            if (position < 0) {
              var length_2 = this.nodes[nodeKey].length;
              this.nodes[nodeKey].splice(position + length_2 + 1, 0, id);
            } else {
              this.nodes[nodeKey].splice(position, 0, id);
            }
          }
        };
        MultiRootTree2.prototype.moveId = function(moveId, beforeId, direction) {
          var sourceId = moveId;
          var sourceRootIndex = this.findRootId(sourceId);
          var sourceNodeKey;
          var sourceNodeIdIndex;
          if (this.nodes[beforeId]) {
            sourceNodeKey = beforeId;
          }
          for (var nodeKey in this.nodes) {
            if (this.nodes.hasOwnProperty(nodeKey)) {
              sourceNodeIdIndex = this.findNodeId(nodeKey, beforeId);
              break;
            }
          }
          var targetId = beforeId;
          var targetRootIndex = this.findRootId(targetId);
          var targetNodeKey;
          var targetNodeIdIndex;
          if (this.nodes[beforeId]) {
            targetNodeKey = beforeId;
          }
          for (var nodeKey in this.nodes) {
            if (this.nodes.hasOwnProperty(nodeKey)) {
              targetNodeIdIndex = this.findNodeId(nodeKey, beforeId);
              break;
            }
          }
          if (sourceRootIndex > -1) {
            if (targetRootIndex > -1) {
              this.rootDelete(sourceRootIndex);
              if (targetRootIndex > sourceRootIndex) {
                targetRootIndex--;
              } else {
              }
              switch (direction) {
                case Direction.BEFORE:
                  this.insertIdIntoRoot(sourceId, targetRootIndex);
                  break;
                case Direction.AFTER:
                  this.insertIdIntoRoot(sourceId, targetRootIndex + 1);
                  break;
                case Direction.INSIDE_AT_START:
                  this.nodeInsertAtStart(targetId, sourceId);
                  break;
                case Direction.INSIDE_AT_END:
                  this.nodeInsertAtEnd(targetId, sourceId);
                  break;
              }
            } else {
              this.rootDelete(sourceRootIndex);
              for (var nodeKey in this.nodes) {
                if (this.nodes.hasOwnProperty(nodeKey)) {
                  var index = this.findNodeId(nodeKey, targetId);
                  if (index > -1) {
                    switch (direction) {
                      case Direction.BEFORE:
                        this.insertIdIntoNode(nodeKey, sourceId, index);
                        break;
                      case Direction.AFTER:
                        this.insertIdIntoNode(nodeKey, sourceId, index + 1);
                        break;
                      case Direction.INSIDE_AT_START:
                        this.nodeInsertAtStart(targetId, sourceId);
                        break;
                      case Direction.INSIDE_AT_END:
                        this.nodeInsertAtEnd(targetId, sourceId);
                        break;
                    }
                    break;
                  }
                }
              }
            }
          } else {
            if (targetRootIndex > -1) {
              for (var nodeKey in this.nodes) {
                if (this.nodes.hasOwnProperty(nodeKey)) {
                  var index = this.findNodeId(nodeKey, sourceId);
                  if (index > -1) {
                    this.nodeDeleteAtIndex(nodeKey, index);
                    break;
                  }
                }
              }
              switch (direction) {
                case Direction.BEFORE:
                  this.insertIdIntoRoot(sourceId, targetRootIndex);
                  break;
                case Direction.AFTER:
                  this.insertIdIntoRoot(sourceId, targetRootIndex + 1);
                  break;
                case Direction.INSIDE_AT_START:
                  this.nodeInsertAtStart(targetId, sourceId);
                  break;
                case Direction.INSIDE_AT_END:
                  this.nodeInsertAtEnd(targetId, sourceId);
                  break;
              }
            } else {
              for (var nodeKey in this.nodes) {
                if (this.nodes.hasOwnProperty(nodeKey)) {
                  var index = this.findNodeId(nodeKey, sourceId);
                  if (index > -1) {
                    this.nodeDeleteAtIndex(nodeKey, index);
                    break;
                  }
                }
              }
              for (var nodeKey in this.nodes) {
                if (this.nodes.hasOwnProperty(nodeKey)) {
                  var index = this.findNodeId(nodeKey, targetId);
                  if (index > -1) {
                    switch (direction) {
                      case Direction.BEFORE:
                        this.insertIdIntoNode(nodeKey, sourceId, index);
                        break;
                      case Direction.AFTER:
                        this.insertIdIntoNode(nodeKey, sourceId, index + 1);
                        break;
                      case Direction.INSIDE_AT_START:
                        this.nodeInsertAtStart(targetId, sourceId);
                        break;
                      case Direction.INSIDE_AT_END:
                        this.nodeInsertAtEnd(targetId, sourceId);
                        break;
                    }
                    break;
                  }
                }
              }
            }
          }
        };
        MultiRootTree2.prototype.swapArrayElements = function(arr, indexA, indexB) {
          var temp = arr[indexA];
          arr[indexA] = arr[indexB];
          arr[indexB] = temp;
          return arr;
        };
        MultiRootTree2.prototype.rootDeleteId = function(id) {
          var index = this.findRootId(id);
          if (index > -1) {
            this.rootDelete(index);
          }
        };
        MultiRootTree2.prototype.nodeAndSubNodesDelete = function(nodeKey) {
          var toDeleteLater = [];
          for (var i = 0; i < this.nodes[nodeKey].length; i++) {
            var id = this.nodes[nodeKey][i];
            this.nodeAndSubNodesDelete(id);
            toDeleteLater.push(nodeKey);
          }
          this.nodeDelete(nodeKey);
          for (var i = 0; i < toDeleteLater.length; i++) {
            this.nodeDelete(toDeleteLater[i]);
          }
        };
        MultiRootTree2.prototype.nodeRefrencesDelete = function(id) {
          for (var nodeKey in this.nodes) {
            if (this.nodes.hasOwnProperty(nodeKey)) {
              for (var i = 0; i < this.nodes[nodeKey].length; i++) {
                var targetId = this.nodes[nodeKey][i];
                if (targetId === id) {
                  this.nodeDeleteAtIndex(nodeKey, i);
                }
              }
            }
          }
        };
        MultiRootTree2.prototype.nodeDelete = function(nodeKey) {
          delete this.nodes[nodeKey];
        };
        MultiRootTree2.prototype.findRootId = function(id) {
          return this.rootIds.indexOf(id);
        };
        MultiRootTree2.prototype.findNodeId = function(nodeKey, id) {
          return this.nodes[nodeKey].indexOf(id);
        };
        MultiRootTree2.prototype.findNode = function(nodeKey) {
          return this.nodes[nodeKey];
        };
        MultiRootTree2.prototype.nodeInsertAtStart = function(nodeKey, id) {
          this.nodes[nodeKey].unshift(id);
        };
        MultiRootTree2.prototype.nodeInsertAtEnd = function(nodeKey, id) {
          this.nodes[nodeKey].push(id);
        };
        MultiRootTree2.prototype.rootDelete = function(index) {
          this.rootIds.splice(index, 1);
        };
        MultiRootTree2.prototype.nodeDeleteAtIndex = function(nodeKey, index) {
          this.nodes[nodeKey].splice(index, 1);
        };
        MultiRootTree2.prototype.rootInsertAtStart = function(id) {
          this.rootIds.unshift(id);
        };
        MultiRootTree2.prototype.rootInsertAtEnd = function(id) {
          this.rootIds.push(id);
        };
        return MultiRootTree2;
      }()
    );
    exports.default = MultiRootTree;
  }
});

// ../../node_modules/typescript-collections/dist/lib/index.js
var require_lib3 = __commonJS({
  "../../node_modules/typescript-collections/dist/lib/index.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var _arrays = require_arrays();
    exports.arrays = _arrays;
    var Bag_1 = require_Bag();
    exports.Bag = Bag_1.default;
    var BSTree_1 = require_BSTree();
    exports.BSTree = BSTree_1.default;
    var BSTreeKV_1 = require_BSTreeKV();
    exports.BSTreeKV = BSTreeKV_1.default;
    var Dictionary_1 = require_Dictionary();
    exports.Dictionary = Dictionary_1.default;
    var Heap_1 = require_Heap();
    exports.Heap = Heap_1.default;
    var LinkedDictionary_1 = require_LinkedDictionary();
    exports.LinkedDictionary = LinkedDictionary_1.default;
    var LinkedList_1 = require_LinkedList();
    exports.LinkedList = LinkedList_1.default;
    var MultiDictionary_1 = require_MultiDictionary();
    exports.MultiDictionary = MultiDictionary_1.default;
    var FactoryDictionary_1 = require_FactoryDictionary();
    exports.FactoryDictionary = FactoryDictionary_1.default;
    var FactoryDictionary_2 = require_FactoryDictionary();
    exports.DefaultDictionary = FactoryDictionary_2.default;
    var Queue_1 = require_Queue();
    exports.Queue = Queue_1.default;
    var PriorityQueue_1 = require_PriorityQueue();
    exports.PriorityQueue = PriorityQueue_1.default;
    var Set_1 = require_Set();
    exports.Set = Set_1.default;
    var Stack_1 = require_Stack();
    exports.Stack = Stack_1.default;
    var MultiRootTree_1 = require_MultiRootTree();
    exports.MultiRootTree = MultiRootTree_1.default;
    var _util = require_util4();
    exports.util = _util;
  }
});

// ../../node_modules/@solana/spl-account-compression/dist/cjs/merkle-tree/index.js
var require_merkle_tree = __commonJS({
  "../../node_modules/@solana/spl-account-compression/dist/cjs/merkle-tree/index.js"(exports) {
    "use strict";
    var __createBinding = exports && exports.__createBinding || (Object.create ? function(o2, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      var desc = Object.getOwnPropertyDescriptor(m, k);
      if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m[k];
        } };
      }
      Object.defineProperty(o2, k2, desc);
    } : function(o2, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      o2[k2] = m[k];
    });
    var __setModuleDefault = exports && exports.__setModuleDefault || (Object.create ? function(o2, v) {
      Object.defineProperty(o2, "default", { enumerable: true, value: v });
    } : function(o2, v) {
      o2["default"] = v;
    });
    var __importStar = exports && exports.__importStar || function(mod) {
      if (mod && mod.__esModule)
        return mod;
      var result = {};
      if (mod != null) {
        for (var k in mod)
          if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k))
            __createBinding(result, mod, k);
      }
      __setModuleDefault(result, mod);
      return result;
    };
    var __importDefault = exports && exports.__importDefault || function(mod) {
      return mod && mod.__esModule ? mod : { "default": mod };
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.emptyNode = exports.hash = exports.MerkleTree = exports.LEAF_BUFFER_LENGTH = void 0;
    var web3_js_1 = (init_index_browser_esm(), __toCommonJS(index_browser_esm_exports));
    var js_sha3_1 = __importDefault(require_sha3());
    var Collections = __importStar(require_lib3());
    var { keccak_256: keccak_2562 } = js_sha3_1.default;
    var CACHE_EMPTY_NODE = /* @__PURE__ */ new Map();
    exports.LEAF_BUFFER_LENGTH = 32;
    var MerkleTree3 = class _MerkleTree {
      /**
       * Please use `MerkleTree.sparseMerkleTreeFromLeaves` to
       * create trees instead. This method is exposed for testing purposes,
       * and for those that are familiar with the MerkleTree data structure.
       * @param leaves leaf nodes of the tree
       */
      constructor(leaves) {
        const [nodes, finalLeaves] = buildLeaves(leaves);
        let seqNum = leaves.length;
        while (nodes.size() > 1) {
          const left = nodes.dequeue();
          const level = left.level;
          let right;
          if (level != nodes.peek().level) {
            right = emptyTreeNode(level, seqNum);
            seqNum++;
          } else {
            right = nodes.dequeue();
          }
          const parent = {
            id: seqNum,
            left,
            level: level + 1,
            node: hash(left.node, right.node),
            parent: void 0,
            right
          };
          left.parent = parent;
          right.parent = parent;
          nodes.enqueue(parent);
          seqNum++;
        }
        this.leaves = finalLeaves;
        this.root = nodes.peek().node;
        this.depth = nodes.peek().level + 1;
      }
      /**
       * This is the recommended way to create MerkleTrees.
       * If you're trying to match an on-chain MerkleTree,
       * set `depth` to `{@link ConcurrentMerkleTreeAccount}.getMaxDepth()`
       *
       * @param leaves leaves of the tree
       * @param depth number of levels in the tree
       * @returns MerkleTree
       */
      static sparseMerkleTreeFromLeaves(leaves, depth) {
        const _leaves = [];
        for (let i = 0; i < 2 ** depth; i++) {
          if (i < leaves.length) {
            _leaves.push(leaves[i]);
          } else {
            _leaves.push(Buffer.alloc(32));
          }
        }
        return new _MerkleTree(_leaves);
      }
      getRoot() {
        return this.root;
      }
      getProof(leafIndex, minimizeProofHeight = false, treeHeight = -1, verbose = false) {
        const proof = [];
        let node = this.leaves[leafIndex];
        let height = 0;
        while (typeof node.parent !== "undefined") {
          if (minimizeProofHeight && height >= treeHeight) {
            break;
          }
          if (verbose) {
            console.log(`${node.level}: ${Uint8Array.from(node.node)}`);
          }
          const parent = node.parent;
          if (parent.left.id === node.id) {
            proof.push(parent.right);
            const hashed = hash(node.node, parent.right.node);
            if (!hashed.equals(parent.node)) {
              console.log(hashed);
              console.log(parent.node);
              throw new Error("Invariant broken when hashing left node");
            }
          } else {
            proof.push(parent.left);
            const hashed = hash(parent.left.node, node.node);
            if (!hashed.equals(parent.node)) {
              console.log(hashed);
              console.log(parent.node);
              throw new Error("Invariant broken when hashing right node");
            }
          }
          node = parent;
          height++;
        }
        return {
          leaf: this.leaves[leafIndex].node,
          leafIndex,
          proof: proof.map((treeNode) => treeNode.node),
          root: this.getRoot()
        };
      }
      updateLeaf(leafIndex, newLeaf, verbose = false) {
        const leaf = this.leaves[leafIndex];
        leaf.node = newLeaf;
        let node = leaf;
        let i = 0;
        while (typeof node.parent !== "undefined") {
          if (verbose) {
            console.log(`${i}: ${Uint8Array.from(node.node)}`);
          }
          node = node.parent;
          node.node = hash(node.left.node, node.right.node);
          i++;
        }
        if (verbose) {
          console.log(`${i}: ${Uint8Array.from(node.node)}`);
        }
        this.root = node.node;
      }
      static hashProof(merkleTreeProof, verbose = false) {
        const { leaf, leafIndex, proof } = merkleTreeProof;
        let node = new web3_js_1.PublicKey(leaf).toBuffer();
        for (let i = 0; i < proof.length; i++) {
          if ((leafIndex >> i) % 2 === 0) {
            node = hash(node, new web3_js_1.PublicKey(proof[i]).toBuffer());
          } else {
            node = hash(new web3_js_1.PublicKey(proof[i]).toBuffer(), node);
          }
          if (verbose)
            console.log(`node ${i} ${new web3_js_1.PublicKey(node).toString()}`);
        }
        return node;
      }
      /**
       * Verifies that a root matches the proof.
       * @param root Root of a MerkleTree
       * @param merkleTreeProof Proof to a leaf in the MerkleTree
       * @param verbose Whether to print hashed nodes
       * @returns Whether the proof is valid
       */
      static verify(root, merkleTreeProof, verbose = false) {
        const node = _MerkleTree.hashProof(merkleTreeProof, verbose);
        const rehashed = new web3_js_1.PublicKey(node).toString();
        const received = new web3_js_1.PublicKey(root).toString();
        if (rehashed !== received) {
          if (verbose)
            console.log(`Roots don't match! Expected ${rehashed} got ${received}`);
          return false;
        }
        if (verbose)
          console.log(`Hashed ${rehashed} got ${received}`);
        return rehashed === received;
      }
    };
    exports.MerkleTree = MerkleTree3;
    function hash(left, right) {
      return Buffer.from(keccak_2562.digest(Buffer.concat([left, right])));
    }
    exports.hash = hash;
    function emptyNode(level) {
      if (CACHE_EMPTY_NODE.has(level)) {
        return CACHE_EMPTY_NODE.get(level);
      }
      if (level == 0) {
        return Buffer.alloc(32);
      }
      const result = hash(emptyNode(level - 1), emptyNode(level - 1));
      CACHE_EMPTY_NODE.set(level, result);
      return result;
    }
    exports.emptyNode = emptyNode;
    function emptyTreeNode(level, id) {
      return {
        id,
        left: void 0,
        level,
        node: emptyNode(level),
        parent: void 0,
        right: void 0
      };
    }
    function buildLeaves(leaves) {
      const nodes = new Collections.Queue();
      const finalLeaves = [];
      leaves.forEach((buffer2, index) => {
        if (buffer2.length != exports.LEAF_BUFFER_LENGTH) {
          throw Error(`Provided leaf has length: ${buffer2.length}, but we need all leaves to be length ${exports.LEAF_BUFFER_LENGTH}`);
        }
        const treeNode = {
          id: index,
          left: void 0,
          level: 0,
          node: buffer2,
          parent: void 0,
          right: void 0
        };
        nodes.enqueue(treeNode);
        finalLeaves.push(treeNode);
      });
      return [nodes, finalLeaves];
    }
  }
});

// ../../node_modules/@solana/spl-account-compression/dist/cjs/index.js
var require_cjs5 = __commonJS({
  "../../node_modules/@solana/spl-account-compression/dist/cjs/index.js"(exports) {
    "use strict";
    var __createBinding = exports && exports.__createBinding || (Object.create ? function(o2, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      var desc = Object.getOwnPropertyDescriptor(m, k);
      if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m[k];
        } };
      }
      Object.defineProperty(o2, k2, desc);
    } : function(o2, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      o2[k2] = m[k];
    });
    var __exportStar = exports && exports.__exportStar || function(m, exports2) {
      for (var p in m)
        if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports2, p))
          __createBinding(exports2, m, p);
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.SPL_ACCOUNT_COMPRESSION_PROGRAM_ID = exports.SPL_ACCOUNT_COMPRESSION_ADDRESS = void 0;
    __exportStar(require_generated3(), exports);
    var generated_1 = require_generated3();
    Object.defineProperty(exports, "SPL_ACCOUNT_COMPRESSION_ADDRESS", { enumerable: true, get: function() {
      return generated_1.PROGRAM_ADDRESS;
    } });
    Object.defineProperty(exports, "SPL_ACCOUNT_COMPRESSION_PROGRAM_ID", { enumerable: true, get: function() {
      return generated_1.PROGRAM_ID;
    } });
    __exportStar(require_instructions12(), exports);
    __exportStar(require_accounts3(), exports);
    __exportStar(require_events(), exports);
    __exportStar(require_constants2(), exports);
    __exportStar(require_types7(), exports);
    __exportStar(require_merkle_tree(), exports);
  }
});

// ../../node_modules/lodash.isequal/index.js
var require_lodash = __commonJS({
  "../../node_modules/lodash.isequal/index.js"(exports, module) {
    var LARGE_ARRAY_SIZE = 200;
    var HASH_UNDEFINED = "__lodash_hash_undefined__";
    var COMPARE_PARTIAL_FLAG = 1;
    var COMPARE_UNORDERED_FLAG = 2;
    var MAX_SAFE_INTEGER = 9007199254740991;
    var argsTag = "[object Arguments]";
    var arrayTag = "[object Array]";
    var asyncTag = "[object AsyncFunction]";
    var boolTag = "[object Boolean]";
    var dateTag = "[object Date]";
    var errorTag = "[object Error]";
    var funcTag = "[object Function]";
    var genTag = "[object GeneratorFunction]";
    var mapTag = "[object Map]";
    var numberTag = "[object Number]";
    var nullTag = "[object Null]";
    var objectTag = "[object Object]";
    var promiseTag = "[object Promise]";
    var proxyTag = "[object Proxy]";
    var regexpTag = "[object RegExp]";
    var setTag = "[object Set]";
    var stringTag = "[object String]";
    var symbolTag = "[object Symbol]";
    var undefinedTag = "[object Undefined]";
    var weakMapTag = "[object WeakMap]";
    var arrayBufferTag = "[object ArrayBuffer]";
    var dataViewTag = "[object DataView]";
    var float32Tag = "[object Float32Array]";
    var float64Tag = "[object Float64Array]";
    var int8Tag = "[object Int8Array]";
    var int16Tag = "[object Int16Array]";
    var int32Tag = "[object Int32Array]";
    var uint8Tag = "[object Uint8Array]";
    var uint8ClampedTag = "[object Uint8ClampedArray]";
    var uint16Tag = "[object Uint16Array]";
    var uint32Tag = "[object Uint32Array]";
    var reRegExpChar = /[\\^$.*+?()[\]{}|]/g;
    var reIsHostCtor = /^\[object .+?Constructor\]$/;
    var reIsUint = /^(?:0|[1-9]\d*)$/;
    var typedArrayTags = {};
    typedArrayTags[float32Tag] = typedArrayTags[float64Tag] = typedArrayTags[int8Tag] = typedArrayTags[int16Tag] = typedArrayTags[int32Tag] = typedArrayTags[uint8Tag] = typedArrayTags[uint8ClampedTag] = typedArrayTags[uint16Tag] = typedArrayTags[uint32Tag] = true;
    typedArrayTags[argsTag] = typedArrayTags[arrayTag] = typedArrayTags[arrayBufferTag] = typedArrayTags[boolTag] = typedArrayTags[dataViewTag] = typedArrayTags[dateTag] = typedArrayTags[errorTag] = typedArrayTags[funcTag] = typedArrayTags[mapTag] = typedArrayTags[numberTag] = typedArrayTags[objectTag] = typedArrayTags[regexpTag] = typedArrayTags[setTag] = typedArrayTags[stringTag] = typedArrayTags[weakMapTag] = false;
    var freeGlobal = typeof global == "object" && global && global.Object === Object && global;
    var freeSelf = typeof self == "object" && self && self.Object === Object && self;
    var root = freeGlobal || freeSelf || Function("return this")();
    var freeExports = typeof exports == "object" && exports && !exports.nodeType && exports;
    var freeModule = freeExports && typeof module == "object" && module && !module.nodeType && module;
    var moduleExports = freeModule && freeModule.exports === freeExports;
    var freeProcess = moduleExports && freeGlobal.process;
    var nodeUtil = function() {
      try {
        return freeProcess && freeProcess.binding && freeProcess.binding("util");
      } catch (e2) {
      }
    }();
    var nodeIsTypedArray = nodeUtil && nodeUtil.isTypedArray;
    function arrayFilter(array, predicate) {
      var index = -1, length = array == null ? 0 : array.length, resIndex = 0, result = [];
      while (++index < length) {
        var value = array[index];
        if (predicate(value, index, array)) {
          result[resIndex++] = value;
        }
      }
      return result;
    }
    function arrayPush(array, values) {
      var index = -1, length = values.length, offset = array.length;
      while (++index < length) {
        array[offset + index] = values[index];
      }
      return array;
    }
    function arraySome(array, predicate) {
      var index = -1, length = array == null ? 0 : array.length;
      while (++index < length) {
        if (predicate(array[index], index, array)) {
          return true;
        }
      }
      return false;
    }
    function baseTimes(n, iteratee) {
      var index = -1, result = Array(n);
      while (++index < n) {
        result[index] = iteratee(index);
      }
      return result;
    }
    function baseUnary(func) {
      return function(value) {
        return func(value);
      };
    }
    function cacheHas(cache, key) {
      return cache.has(key);
    }
    function getValue(object, key) {
      return object == null ? void 0 : object[key];
    }
    function mapToArray(map2) {
      var index = -1, result = Array(map2.size);
      map2.forEach(function(value, key) {
        result[++index] = [key, value];
      });
      return result;
    }
    function overArg(func, transform) {
      return function(arg) {
        return func(transform(arg));
      };
    }
    function setToArray(set) {
      var index = -1, result = Array(set.size);
      set.forEach(function(value) {
        result[++index] = value;
      });
      return result;
    }
    var arrayProto = Array.prototype;
    var funcProto = Function.prototype;
    var objectProto = Object.prototype;
    var coreJsData = root["__core-js_shared__"];
    var funcToString = funcProto.toString;
    var hasOwnProperty2 = objectProto.hasOwnProperty;
    var maskSrcKey = function() {
      var uid = /[^.]+$/.exec(coreJsData && coreJsData.keys && coreJsData.keys.IE_PROTO || "");
      return uid ? "Symbol(src)_1." + uid : "";
    }();
    var nativeObjectToString = objectProto.toString;
    var reIsNative = RegExp(
      "^" + funcToString.call(hasOwnProperty2).replace(reRegExpChar, "\\$&").replace(/hasOwnProperty|(function).*?(?=\\\()| for .+?(?=\\\])/g, "$1.*?") + "$"
    );
    var Buffer22 = moduleExports ? root.Buffer : void 0;
    var Symbol2 = root.Symbol;
    var Uint8Array2 = root.Uint8Array;
    var propertyIsEnumerable = objectProto.propertyIsEnumerable;
    var splice = arrayProto.splice;
    var symToStringTag = Symbol2 ? Symbol2.toStringTag : void 0;
    var nativeGetSymbols = Object.getOwnPropertySymbols;
    var nativeIsBuffer = Buffer22 ? Buffer22.isBuffer : void 0;
    var nativeKeys = overArg(Object.keys, Object);
    var DataView2 = getNative(root, "DataView");
    var Map2 = getNative(root, "Map");
    var Promise2 = getNative(root, "Promise");
    var Set2 = getNative(root, "Set");
    var WeakMap = getNative(root, "WeakMap");
    var nativeCreate = getNative(Object, "create");
    var dataViewCtorString = toSource(DataView2);
    var mapCtorString = toSource(Map2);
    var promiseCtorString = toSource(Promise2);
    var setCtorString = toSource(Set2);
    var weakMapCtorString = toSource(WeakMap);
    var symbolProto = Symbol2 ? Symbol2.prototype : void 0;
    var symbolValueOf = symbolProto ? symbolProto.valueOf : void 0;
    function Hash(entries) {
      var index = -1, length = entries == null ? 0 : entries.length;
      this.clear();
      while (++index < length) {
        var entry = entries[index];
        this.set(entry[0], entry[1]);
      }
    }
    function hashClear() {
      this.__data__ = nativeCreate ? nativeCreate(null) : {};
      this.size = 0;
    }
    function hashDelete(key) {
      var result = this.has(key) && delete this.__data__[key];
      this.size -= result ? 1 : 0;
      return result;
    }
    function hashGet(key) {
      var data = this.__data__;
      if (nativeCreate) {
        var result = data[key];
        return result === HASH_UNDEFINED ? void 0 : result;
      }
      return hasOwnProperty2.call(data, key) ? data[key] : void 0;
    }
    function hashHas(key) {
      var data = this.__data__;
      return nativeCreate ? data[key] !== void 0 : hasOwnProperty2.call(data, key);
    }
    function hashSet(key, value) {
      var data = this.__data__;
      this.size += this.has(key) ? 0 : 1;
      data[key] = nativeCreate && value === void 0 ? HASH_UNDEFINED : value;
      return this;
    }
    Hash.prototype.clear = hashClear;
    Hash.prototype["delete"] = hashDelete;
    Hash.prototype.get = hashGet;
    Hash.prototype.has = hashHas;
    Hash.prototype.set = hashSet;
    function ListCache(entries) {
      var index = -1, length = entries == null ? 0 : entries.length;
      this.clear();
      while (++index < length) {
        var entry = entries[index];
        this.set(entry[0], entry[1]);
      }
    }
    function listCacheClear() {
      this.__data__ = [];
      this.size = 0;
    }
    function listCacheDelete(key) {
      var data = this.__data__, index = assocIndexOf(data, key);
      if (index < 0) {
        return false;
      }
      var lastIndex = data.length - 1;
      if (index == lastIndex) {
        data.pop();
      } else {
        splice.call(data, index, 1);
      }
      --this.size;
      return true;
    }
    function listCacheGet(key) {
      var data = this.__data__, index = assocIndexOf(data, key);
      return index < 0 ? void 0 : data[index][1];
    }
    function listCacheHas(key) {
      return assocIndexOf(this.__data__, key) > -1;
    }
    function listCacheSet(key, value) {
      var data = this.__data__, index = assocIndexOf(data, key);
      if (index < 0) {
        ++this.size;
        data.push([key, value]);
      } else {
        data[index][1] = value;
      }
      return this;
    }
    ListCache.prototype.clear = listCacheClear;
    ListCache.prototype["delete"] = listCacheDelete;
    ListCache.prototype.get = listCacheGet;
    ListCache.prototype.has = listCacheHas;
    ListCache.prototype.set = listCacheSet;
    function MapCache(entries) {
      var index = -1, length = entries == null ? 0 : entries.length;
      this.clear();
      while (++index < length) {
        var entry = entries[index];
        this.set(entry[0], entry[1]);
      }
    }
    function mapCacheClear() {
      this.size = 0;
      this.__data__ = {
        "hash": new Hash(),
        "map": new (Map2 || ListCache)(),
        "string": new Hash()
      };
    }
    function mapCacheDelete(key) {
      var result = getMapData(this, key)["delete"](key);
      this.size -= result ? 1 : 0;
      return result;
    }
    function mapCacheGet(key) {
      return getMapData(this, key).get(key);
    }
    function mapCacheHas(key) {
      return getMapData(this, key).has(key);
    }
    function mapCacheSet(key, value) {
      var data = getMapData(this, key), size = data.size;
      data.set(key, value);
      this.size += data.size == size ? 0 : 1;
      return this;
    }
    MapCache.prototype.clear = mapCacheClear;
    MapCache.prototype["delete"] = mapCacheDelete;
    MapCache.prototype.get = mapCacheGet;
    MapCache.prototype.has = mapCacheHas;
    MapCache.prototype.set = mapCacheSet;
    function SetCache(values) {
      var index = -1, length = values == null ? 0 : values.length;
      this.__data__ = new MapCache();
      while (++index < length) {
        this.add(values[index]);
      }
    }
    function setCacheAdd(value) {
      this.__data__.set(value, HASH_UNDEFINED);
      return this;
    }
    function setCacheHas(value) {
      return this.__data__.has(value);
    }
    SetCache.prototype.add = SetCache.prototype.push = setCacheAdd;
    SetCache.prototype.has = setCacheHas;
    function Stack(entries) {
      var data = this.__data__ = new ListCache(entries);
      this.size = data.size;
    }
    function stackClear() {
      this.__data__ = new ListCache();
      this.size = 0;
    }
    function stackDelete(key) {
      var data = this.__data__, result = data["delete"](key);
      this.size = data.size;
      return result;
    }
    function stackGet(key) {
      return this.__data__.get(key);
    }
    function stackHas(key) {
      return this.__data__.has(key);
    }
    function stackSet(key, value) {
      var data = this.__data__;
      if (data instanceof ListCache) {
        var pairs = data.__data__;
        if (!Map2 || pairs.length < LARGE_ARRAY_SIZE - 1) {
          pairs.push([key, value]);
          this.size = ++data.size;
          return this;
        }
        data = this.__data__ = new MapCache(pairs);
      }
      data.set(key, value);
      this.size = data.size;
      return this;
    }
    Stack.prototype.clear = stackClear;
    Stack.prototype["delete"] = stackDelete;
    Stack.prototype.get = stackGet;
    Stack.prototype.has = stackHas;
    Stack.prototype.set = stackSet;
    function arrayLikeKeys(value, inherited) {
      var isArr = isArray2(value), isArg = !isArr && isArguments2(value), isBuff = !isArr && !isArg && isBuffer(value), isType = !isArr && !isArg && !isBuff && isTypedArray(value), skipIndexes = isArr || isArg || isBuff || isType, result = skipIndexes ? baseTimes(value.length, String) : [], length = result.length;
      for (var key in value) {
        if ((inherited || hasOwnProperty2.call(value, key)) && !(skipIndexes && // Safari 9 has enumerable `arguments.length` in strict mode.
        (key == "length" || // Node.js 0.10 has enumerable non-index properties on buffers.
        isBuff && (key == "offset" || key == "parent") || // PhantomJS 2 has enumerable non-index properties on typed arrays.
        isType && (key == "buffer" || key == "byteLength" || key == "byteOffset") || // Skip index properties.
        isIndex(key, length)))) {
          result.push(key);
        }
      }
      return result;
    }
    function assocIndexOf(array, key) {
      var length = array.length;
      while (length--) {
        if (eq(array[length][0], key)) {
          return length;
        }
      }
      return -1;
    }
    function baseGetAllKeys(object, keysFunc, symbolsFunc) {
      var result = keysFunc(object);
      return isArray2(object) ? result : arrayPush(result, symbolsFunc(object));
    }
    function baseGetTag(value) {
      if (value == null) {
        return value === void 0 ? undefinedTag : nullTag;
      }
      return symToStringTag && symToStringTag in Object(value) ? getRawTag(value) : objectToString2(value);
    }
    function baseIsArguments(value) {
      return isObjectLike(value) && baseGetTag(value) == argsTag;
    }
    function baseIsEqual(value, other, bitmask, customizer, stack) {
      if (value === other) {
        return true;
      }
      if (value == null || other == null || !isObjectLike(value) && !isObjectLike(other)) {
        return value !== value && other !== other;
      }
      return baseIsEqualDeep(value, other, bitmask, customizer, baseIsEqual, stack);
    }
    function baseIsEqualDeep(object, other, bitmask, customizer, equalFunc, stack) {
      var objIsArr = isArray2(object), othIsArr = isArray2(other), objTag = objIsArr ? arrayTag : getTag(object), othTag = othIsArr ? arrayTag : getTag(other);
      objTag = objTag == argsTag ? objectTag : objTag;
      othTag = othTag == argsTag ? objectTag : othTag;
      var objIsObj = objTag == objectTag, othIsObj = othTag == objectTag, isSameTag = objTag == othTag;
      if (isSameTag && isBuffer(object)) {
        if (!isBuffer(other)) {
          return false;
        }
        objIsArr = true;
        objIsObj = false;
      }
      if (isSameTag && !objIsObj) {
        stack || (stack = new Stack());
        return objIsArr || isTypedArray(object) ? equalArrays(object, other, bitmask, customizer, equalFunc, stack) : equalByTag(object, other, objTag, bitmask, customizer, equalFunc, stack);
      }
      if (!(bitmask & COMPARE_PARTIAL_FLAG)) {
        var objIsWrapped = objIsObj && hasOwnProperty2.call(object, "__wrapped__"), othIsWrapped = othIsObj && hasOwnProperty2.call(other, "__wrapped__");
        if (objIsWrapped || othIsWrapped) {
          var objUnwrapped = objIsWrapped ? object.value() : object, othUnwrapped = othIsWrapped ? other.value() : other;
          stack || (stack = new Stack());
          return equalFunc(objUnwrapped, othUnwrapped, bitmask, customizer, stack);
        }
      }
      if (!isSameTag) {
        return false;
      }
      stack || (stack = new Stack());
      return equalObjects(object, other, bitmask, customizer, equalFunc, stack);
    }
    function baseIsNative(value) {
      if (!isObject2(value) || isMasked(value)) {
        return false;
      }
      var pattern = isFunction2(value) ? reIsNative : reIsHostCtor;
      return pattern.test(toSource(value));
    }
    function baseIsTypedArray(value) {
      return isObjectLike(value) && isLength(value.length) && !!typedArrayTags[baseGetTag(value)];
    }
    function baseKeys(object) {
      if (!isPrototype(object)) {
        return nativeKeys(object);
      }
      var result = [];
      for (var key in Object(object)) {
        if (hasOwnProperty2.call(object, key) && key != "constructor") {
          result.push(key);
        }
      }
      return result;
    }
    function equalArrays(array, other, bitmask, customizer, equalFunc, stack) {
      var isPartial = bitmask & COMPARE_PARTIAL_FLAG, arrLength = array.length, othLength = other.length;
      if (arrLength != othLength && !(isPartial && othLength > arrLength)) {
        return false;
      }
      var stacked = stack.get(array);
      if (stacked && stack.get(other)) {
        return stacked == other;
      }
      var index = -1, result = true, seen = bitmask & COMPARE_UNORDERED_FLAG ? new SetCache() : void 0;
      stack.set(array, other);
      stack.set(other, array);
      while (++index < arrLength) {
        var arrValue = array[index], othValue = other[index];
        if (customizer) {
          var compared = isPartial ? customizer(othValue, arrValue, index, other, array, stack) : customizer(arrValue, othValue, index, array, other, stack);
        }
        if (compared !== void 0) {
          if (compared) {
            continue;
          }
          result = false;
          break;
        }
        if (seen) {
          if (!arraySome(other, function(othValue2, othIndex) {
            if (!cacheHas(seen, othIndex) && (arrValue === othValue2 || equalFunc(arrValue, othValue2, bitmask, customizer, stack))) {
              return seen.push(othIndex);
            }
          })) {
            result = false;
            break;
          }
        } else if (!(arrValue === othValue || equalFunc(arrValue, othValue, bitmask, customizer, stack))) {
          result = false;
          break;
        }
      }
      stack["delete"](array);
      stack["delete"](other);
      return result;
    }
    function equalByTag(object, other, tag, bitmask, customizer, equalFunc, stack) {
      switch (tag) {
        case dataViewTag:
          if (object.byteLength != other.byteLength || object.byteOffset != other.byteOffset) {
            return false;
          }
          object = object.buffer;
          other = other.buffer;
        case arrayBufferTag:
          if (object.byteLength != other.byteLength || !equalFunc(new Uint8Array2(object), new Uint8Array2(other))) {
            return false;
          }
          return true;
        case boolTag:
        case dateTag:
        case numberTag:
          return eq(+object, +other);
        case errorTag:
          return object.name == other.name && object.message == other.message;
        case regexpTag:
        case stringTag:
          return object == other + "";
        case mapTag:
          var convert2 = mapToArray;
        case setTag:
          var isPartial = bitmask & COMPARE_PARTIAL_FLAG;
          convert2 || (convert2 = setToArray);
          if (object.size != other.size && !isPartial) {
            return false;
          }
          var stacked = stack.get(object);
          if (stacked) {
            return stacked == other;
          }
          bitmask |= COMPARE_UNORDERED_FLAG;
          stack.set(object, other);
          var result = equalArrays(convert2(object), convert2(other), bitmask, customizer, equalFunc, stack);
          stack["delete"](object);
          return result;
        case symbolTag:
          if (symbolValueOf) {
            return symbolValueOf.call(object) == symbolValueOf.call(other);
          }
      }
      return false;
    }
    function equalObjects(object, other, bitmask, customizer, equalFunc, stack) {
      var isPartial = bitmask & COMPARE_PARTIAL_FLAG, objProps = getAllKeys(object), objLength = objProps.length, othProps = getAllKeys(other), othLength = othProps.length;
      if (objLength != othLength && !isPartial) {
        return false;
      }
      var index = objLength;
      while (index--) {
        var key = objProps[index];
        if (!(isPartial ? key in other : hasOwnProperty2.call(other, key))) {
          return false;
        }
      }
      var stacked = stack.get(object);
      if (stacked && stack.get(other)) {
        return stacked == other;
      }
      var result = true;
      stack.set(object, other);
      stack.set(other, object);
      var skipCtor = isPartial;
      while (++index < objLength) {
        key = objProps[index];
        var objValue = object[key], othValue = other[key];
        if (customizer) {
          var compared = isPartial ? customizer(othValue, objValue, key, other, object, stack) : customizer(objValue, othValue, key, object, other, stack);
        }
        if (!(compared === void 0 ? objValue === othValue || equalFunc(objValue, othValue, bitmask, customizer, stack) : compared)) {
          result = false;
          break;
        }
        skipCtor || (skipCtor = key == "constructor");
      }
      if (result && !skipCtor) {
        var objCtor = object.constructor, othCtor = other.constructor;
        if (objCtor != othCtor && ("constructor" in object && "constructor" in other) && !(typeof objCtor == "function" && objCtor instanceof objCtor && typeof othCtor == "function" && othCtor instanceof othCtor)) {
          result = false;
        }
      }
      stack["delete"](object);
      stack["delete"](other);
      return result;
    }
    function getAllKeys(object) {
      return baseGetAllKeys(object, keys, getSymbols);
    }
    function getMapData(map2, key) {
      var data = map2.__data__;
      return isKeyable(key) ? data[typeof key == "string" ? "string" : "hash"] : data.map;
    }
    function getNative(object, key) {
      var value = getValue(object, key);
      return baseIsNative(value) ? value : void 0;
    }
    function getRawTag(value) {
      var isOwn = hasOwnProperty2.call(value, symToStringTag), tag = value[symToStringTag];
      try {
        value[symToStringTag] = void 0;
        var unmasked = true;
      } catch (e2) {
      }
      var result = nativeObjectToString.call(value);
      if (unmasked) {
        if (isOwn) {
          value[symToStringTag] = tag;
        } else {
          delete value[symToStringTag];
        }
      }
      return result;
    }
    var getSymbols = !nativeGetSymbols ? stubArray : function(object) {
      if (object == null) {
        return [];
      }
      object = Object(object);
      return arrayFilter(nativeGetSymbols(object), function(symbol) {
        return propertyIsEnumerable.call(object, symbol);
      });
    };
    var getTag = baseGetTag;
    if (DataView2 && getTag(new DataView2(new ArrayBuffer(1))) != dataViewTag || Map2 && getTag(new Map2()) != mapTag || Promise2 && getTag(Promise2.resolve()) != promiseTag || Set2 && getTag(new Set2()) != setTag || WeakMap && getTag(new WeakMap()) != weakMapTag) {
      getTag = function(value) {
        var result = baseGetTag(value), Ctor = result == objectTag ? value.constructor : void 0, ctorString = Ctor ? toSource(Ctor) : "";
        if (ctorString) {
          switch (ctorString) {
            case dataViewCtorString:
              return dataViewTag;
            case mapCtorString:
              return mapTag;
            case promiseCtorString:
              return promiseTag;
            case setCtorString:
              return setTag;
            case weakMapCtorString:
              return weakMapTag;
          }
        }
        return result;
      };
    }
    function isIndex(value, length) {
      length = length == null ? MAX_SAFE_INTEGER : length;
      return !!length && (typeof value == "number" || reIsUint.test(value)) && (value > -1 && value % 1 == 0 && value < length);
    }
    function isKeyable(value) {
      var type = typeof value;
      return type == "string" || type == "number" || type == "symbol" || type == "boolean" ? value !== "__proto__" : value === null;
    }
    function isMasked(func) {
      return !!maskSrcKey && maskSrcKey in func;
    }
    function isPrototype(value) {
      var Ctor = value && value.constructor, proto = typeof Ctor == "function" && Ctor.prototype || objectProto;
      return value === proto;
    }
    function objectToString2(value) {
      return nativeObjectToString.call(value);
    }
    function toSource(func) {
      if (func != null) {
        try {
          return funcToString.call(func);
        } catch (e2) {
        }
        try {
          return func + "";
        } catch (e2) {
        }
      }
      return "";
    }
    function eq(value, other) {
      return value === other || value !== value && other !== other;
    }
    var isArguments2 = baseIsArguments(function() {
      return arguments;
    }()) ? baseIsArguments : function(value) {
      return isObjectLike(value) && hasOwnProperty2.call(value, "callee") && !propertyIsEnumerable.call(value, "callee");
    };
    var isArray2 = Array.isArray;
    function isArrayLike(value) {
      return value != null && isLength(value.length) && !isFunction2(value);
    }
    var isBuffer = nativeIsBuffer || stubFalse;
    function isEqual4(value, other) {
      return baseIsEqual(value, other);
    }
    function isFunction2(value) {
      if (!isObject2(value)) {
        return false;
      }
      var tag = baseGetTag(value);
      return tag == funcTag || tag == genTag || tag == asyncTag || tag == proxyTag;
    }
    function isLength(value) {
      return typeof value == "number" && value > -1 && value % 1 == 0 && value <= MAX_SAFE_INTEGER;
    }
    function isObject2(value) {
      var type = typeof value;
      return value != null && (type == "object" || type == "function");
    }
    function isObjectLike(value) {
      return value != null && typeof value == "object";
    }
    var isTypedArray = nodeIsTypedArray ? baseUnary(nodeIsTypedArray) : baseIsTypedArray;
    function keys(object) {
      return isArrayLike(object) ? arrayLikeKeys(object) : baseKeys(object);
    }
    function stubArray() {
      return [];
    }
    function stubFalse() {
      return false;
    }
    module.exports = isEqual4;
  }
});

// ../../node_modules/lodash.clonedeep/index.js
var require_lodash2 = __commonJS({
  "../../node_modules/lodash.clonedeep/index.js"(exports, module) {
    var LARGE_ARRAY_SIZE = 200;
    var HASH_UNDEFINED = "__lodash_hash_undefined__";
    var MAX_SAFE_INTEGER = 9007199254740991;
    var argsTag = "[object Arguments]";
    var arrayTag = "[object Array]";
    var boolTag = "[object Boolean]";
    var dateTag = "[object Date]";
    var errorTag = "[object Error]";
    var funcTag = "[object Function]";
    var genTag = "[object GeneratorFunction]";
    var mapTag = "[object Map]";
    var numberTag = "[object Number]";
    var objectTag = "[object Object]";
    var promiseTag = "[object Promise]";
    var regexpTag = "[object RegExp]";
    var setTag = "[object Set]";
    var stringTag = "[object String]";
    var symbolTag = "[object Symbol]";
    var weakMapTag = "[object WeakMap]";
    var arrayBufferTag = "[object ArrayBuffer]";
    var dataViewTag = "[object DataView]";
    var float32Tag = "[object Float32Array]";
    var float64Tag = "[object Float64Array]";
    var int8Tag = "[object Int8Array]";
    var int16Tag = "[object Int16Array]";
    var int32Tag = "[object Int32Array]";
    var uint8Tag = "[object Uint8Array]";
    var uint8ClampedTag = "[object Uint8ClampedArray]";
    var uint16Tag = "[object Uint16Array]";
    var uint32Tag = "[object Uint32Array]";
    var reRegExpChar = /[\\^$.*+?()[\]{}|]/g;
    var reFlags = /\w*$/;
    var reIsHostCtor = /^\[object .+?Constructor\]$/;
    var reIsUint = /^(?:0|[1-9]\d*)$/;
    var cloneableTags = {};
    cloneableTags[argsTag] = cloneableTags[arrayTag] = cloneableTags[arrayBufferTag] = cloneableTags[dataViewTag] = cloneableTags[boolTag] = cloneableTags[dateTag] = cloneableTags[float32Tag] = cloneableTags[float64Tag] = cloneableTags[int8Tag] = cloneableTags[int16Tag] = cloneableTags[int32Tag] = cloneableTags[mapTag] = cloneableTags[numberTag] = cloneableTags[objectTag] = cloneableTags[regexpTag] = cloneableTags[setTag] = cloneableTags[stringTag] = cloneableTags[symbolTag] = cloneableTags[uint8Tag] = cloneableTags[uint8ClampedTag] = cloneableTags[uint16Tag] = cloneableTags[uint32Tag] = true;
    cloneableTags[errorTag] = cloneableTags[funcTag] = cloneableTags[weakMapTag] = false;
    var freeGlobal = typeof global == "object" && global && global.Object === Object && global;
    var freeSelf = typeof self == "object" && self && self.Object === Object && self;
    var root = freeGlobal || freeSelf || Function("return this")();
    var freeExports = typeof exports == "object" && exports && !exports.nodeType && exports;
    var freeModule = freeExports && typeof module == "object" && module && !module.nodeType && module;
    var moduleExports = freeModule && freeModule.exports === freeExports;
    function addMapEntry(map2, pair) {
      map2.set(pair[0], pair[1]);
      return map2;
    }
    function addSetEntry(set, value) {
      set.add(value);
      return set;
    }
    function arrayEach(array, iteratee) {
      var index = -1, length = array ? array.length : 0;
      while (++index < length) {
        if (iteratee(array[index], index, array) === false) {
          break;
        }
      }
      return array;
    }
    function arrayPush(array, values) {
      var index = -1, length = values.length, offset = array.length;
      while (++index < length) {
        array[offset + index] = values[index];
      }
      return array;
    }
    function arrayReduce(array, iteratee, accumulator, initAccum) {
      var index = -1, length = array ? array.length : 0;
      if (initAccum && length) {
        accumulator = array[++index];
      }
      while (++index < length) {
        accumulator = iteratee(accumulator, array[index], index, array);
      }
      return accumulator;
    }
    function baseTimes(n, iteratee) {
      var index = -1, result = Array(n);
      while (++index < n) {
        result[index] = iteratee(index);
      }
      return result;
    }
    function getValue(object, key) {
      return object == null ? void 0 : object[key];
    }
    function isHostObject(value) {
      var result = false;
      if (value != null && typeof value.toString != "function") {
        try {
          result = !!(value + "");
        } catch (e2) {
        }
      }
      return result;
    }
    function mapToArray(map2) {
      var index = -1, result = Array(map2.size);
      map2.forEach(function(value, key) {
        result[++index] = [key, value];
      });
      return result;
    }
    function overArg(func, transform) {
      return function(arg) {
        return func(transform(arg));
      };
    }
    function setToArray(set) {
      var index = -1, result = Array(set.size);
      set.forEach(function(value) {
        result[++index] = value;
      });
      return result;
    }
    var arrayProto = Array.prototype;
    var funcProto = Function.prototype;
    var objectProto = Object.prototype;
    var coreJsData = root["__core-js_shared__"];
    var maskSrcKey = function() {
      var uid = /[^.]+$/.exec(coreJsData && coreJsData.keys && coreJsData.keys.IE_PROTO || "");
      return uid ? "Symbol(src)_1." + uid : "";
    }();
    var funcToString = funcProto.toString;
    var hasOwnProperty2 = objectProto.hasOwnProperty;
    var objectToString2 = objectProto.toString;
    var reIsNative = RegExp(
      "^" + funcToString.call(hasOwnProperty2).replace(reRegExpChar, "\\$&").replace(/hasOwnProperty|(function).*?(?=\\\()| for .+?(?=\\\])/g, "$1.*?") + "$"
    );
    var Buffer22 = moduleExports ? root.Buffer : void 0;
    var Symbol2 = root.Symbol;
    var Uint8Array2 = root.Uint8Array;
    var getPrototype = overArg(Object.getPrototypeOf, Object);
    var objectCreate = Object.create;
    var propertyIsEnumerable = objectProto.propertyIsEnumerable;
    var splice = arrayProto.splice;
    var nativeGetSymbols = Object.getOwnPropertySymbols;
    var nativeIsBuffer = Buffer22 ? Buffer22.isBuffer : void 0;
    var nativeKeys = overArg(Object.keys, Object);
    var DataView2 = getNative(root, "DataView");
    var Map2 = getNative(root, "Map");
    var Promise2 = getNative(root, "Promise");
    var Set2 = getNative(root, "Set");
    var WeakMap = getNative(root, "WeakMap");
    var nativeCreate = getNative(Object, "create");
    var dataViewCtorString = toSource(DataView2);
    var mapCtorString = toSource(Map2);
    var promiseCtorString = toSource(Promise2);
    var setCtorString = toSource(Set2);
    var weakMapCtorString = toSource(WeakMap);
    var symbolProto = Symbol2 ? Symbol2.prototype : void 0;
    var symbolValueOf = symbolProto ? symbolProto.valueOf : void 0;
    function Hash(entries) {
      var index = -1, length = entries ? entries.length : 0;
      this.clear();
      while (++index < length) {
        var entry = entries[index];
        this.set(entry[0], entry[1]);
      }
    }
    function hashClear() {
      this.__data__ = nativeCreate ? nativeCreate(null) : {};
    }
    function hashDelete(key) {
      return this.has(key) && delete this.__data__[key];
    }
    function hashGet(key) {
      var data = this.__data__;
      if (nativeCreate) {
        var result = data[key];
        return result === HASH_UNDEFINED ? void 0 : result;
      }
      return hasOwnProperty2.call(data, key) ? data[key] : void 0;
    }
    function hashHas(key) {
      var data = this.__data__;
      return nativeCreate ? data[key] !== void 0 : hasOwnProperty2.call(data, key);
    }
    function hashSet(key, value) {
      var data = this.__data__;
      data[key] = nativeCreate && value === void 0 ? HASH_UNDEFINED : value;
      return this;
    }
    Hash.prototype.clear = hashClear;
    Hash.prototype["delete"] = hashDelete;
    Hash.prototype.get = hashGet;
    Hash.prototype.has = hashHas;
    Hash.prototype.set = hashSet;
    function ListCache(entries) {
      var index = -1, length = entries ? entries.length : 0;
      this.clear();
      while (++index < length) {
        var entry = entries[index];
        this.set(entry[0], entry[1]);
      }
    }
    function listCacheClear() {
      this.__data__ = [];
    }
    function listCacheDelete(key) {
      var data = this.__data__, index = assocIndexOf(data, key);
      if (index < 0) {
        return false;
      }
      var lastIndex = data.length - 1;
      if (index == lastIndex) {
        data.pop();
      } else {
        splice.call(data, index, 1);
      }
      return true;
    }
    function listCacheGet(key) {
      var data = this.__data__, index = assocIndexOf(data, key);
      return index < 0 ? void 0 : data[index][1];
    }
    function listCacheHas(key) {
      return assocIndexOf(this.__data__, key) > -1;
    }
    function listCacheSet(key, value) {
      var data = this.__data__, index = assocIndexOf(data, key);
      if (index < 0) {
        data.push([key, value]);
      } else {
        data[index][1] = value;
      }
      return this;
    }
    ListCache.prototype.clear = listCacheClear;
    ListCache.prototype["delete"] = listCacheDelete;
    ListCache.prototype.get = listCacheGet;
    ListCache.prototype.has = listCacheHas;
    ListCache.prototype.set = listCacheSet;
    function MapCache(entries) {
      var index = -1, length = entries ? entries.length : 0;
      this.clear();
      while (++index < length) {
        var entry = entries[index];
        this.set(entry[0], entry[1]);
      }
    }
    function mapCacheClear() {
      this.__data__ = {
        "hash": new Hash(),
        "map": new (Map2 || ListCache)(),
        "string": new Hash()
      };
    }
    function mapCacheDelete(key) {
      return getMapData(this, key)["delete"](key);
    }
    function mapCacheGet(key) {
      return getMapData(this, key).get(key);
    }
    function mapCacheHas(key) {
      return getMapData(this, key).has(key);
    }
    function mapCacheSet(key, value) {
      getMapData(this, key).set(key, value);
      return this;
    }
    MapCache.prototype.clear = mapCacheClear;
    MapCache.prototype["delete"] = mapCacheDelete;
    MapCache.prototype.get = mapCacheGet;
    MapCache.prototype.has = mapCacheHas;
    MapCache.prototype.set = mapCacheSet;
    function Stack(entries) {
      this.__data__ = new ListCache(entries);
    }
    function stackClear() {
      this.__data__ = new ListCache();
    }
    function stackDelete(key) {
      return this.__data__["delete"](key);
    }
    function stackGet(key) {
      return this.__data__.get(key);
    }
    function stackHas(key) {
      return this.__data__.has(key);
    }
    function stackSet(key, value) {
      var cache = this.__data__;
      if (cache instanceof ListCache) {
        var pairs = cache.__data__;
        if (!Map2 || pairs.length < LARGE_ARRAY_SIZE - 1) {
          pairs.push([key, value]);
          return this;
        }
        cache = this.__data__ = new MapCache(pairs);
      }
      cache.set(key, value);
      return this;
    }
    Stack.prototype.clear = stackClear;
    Stack.prototype["delete"] = stackDelete;
    Stack.prototype.get = stackGet;
    Stack.prototype.has = stackHas;
    Stack.prototype.set = stackSet;
    function arrayLikeKeys(value, inherited) {
      var result = isArray2(value) || isArguments2(value) ? baseTimes(value.length, String) : [];
      var length = result.length, skipIndexes = !!length;
      for (var key in value) {
        if ((inherited || hasOwnProperty2.call(value, key)) && !(skipIndexes && (key == "length" || isIndex(key, length)))) {
          result.push(key);
        }
      }
      return result;
    }
    function assignValue(object, key, value) {
      var objValue = object[key];
      if (!(hasOwnProperty2.call(object, key) && eq(objValue, value)) || value === void 0 && !(key in object)) {
        object[key] = value;
      }
    }
    function assocIndexOf(array, key) {
      var length = array.length;
      while (length--) {
        if (eq(array[length][0], key)) {
          return length;
        }
      }
      return -1;
    }
    function baseAssign(object, source) {
      return object && copyObject(source, keys(source), object);
    }
    function baseClone(value, isDeep, isFull, customizer, key, object, stack) {
      var result;
      if (customizer) {
        result = object ? customizer(value, key, object, stack) : customizer(value);
      }
      if (result !== void 0) {
        return result;
      }
      if (!isObject2(value)) {
        return value;
      }
      var isArr = isArray2(value);
      if (isArr) {
        result = initCloneArray(value);
        if (!isDeep) {
          return copyArray(value, result);
        }
      } else {
        var tag = getTag(value), isFunc = tag == funcTag || tag == genTag;
        if (isBuffer(value)) {
          return cloneBuffer(value, isDeep);
        }
        if (tag == objectTag || tag == argsTag || isFunc && !object) {
          if (isHostObject(value)) {
            return object ? value : {};
          }
          result = initCloneObject(isFunc ? {} : value);
          if (!isDeep) {
            return copySymbols(value, baseAssign(result, value));
          }
        } else {
          if (!cloneableTags[tag]) {
            return object ? value : {};
          }
          result = initCloneByTag(value, tag, baseClone, isDeep);
        }
      }
      stack || (stack = new Stack());
      var stacked = stack.get(value);
      if (stacked) {
        return stacked;
      }
      stack.set(value, result);
      if (!isArr) {
        var props = isFull ? getAllKeys(value) : keys(value);
      }
      arrayEach(props || value, function(subValue, key2) {
        if (props) {
          key2 = subValue;
          subValue = value[key2];
        }
        assignValue(result, key2, baseClone(subValue, isDeep, isFull, customizer, key2, value, stack));
      });
      return result;
    }
    function baseCreate(proto) {
      return isObject2(proto) ? objectCreate(proto) : {};
    }
    function baseGetAllKeys(object, keysFunc, symbolsFunc) {
      var result = keysFunc(object);
      return isArray2(object) ? result : arrayPush(result, symbolsFunc(object));
    }
    function baseGetTag(value) {
      return objectToString2.call(value);
    }
    function baseIsNative(value) {
      if (!isObject2(value) || isMasked(value)) {
        return false;
      }
      var pattern = isFunction2(value) || isHostObject(value) ? reIsNative : reIsHostCtor;
      return pattern.test(toSource(value));
    }
    function baseKeys(object) {
      if (!isPrototype(object)) {
        return nativeKeys(object);
      }
      var result = [];
      for (var key in Object(object)) {
        if (hasOwnProperty2.call(object, key) && key != "constructor") {
          result.push(key);
        }
      }
      return result;
    }
    function cloneBuffer(buffer2, isDeep) {
      if (isDeep) {
        return buffer2.slice();
      }
      var result = new buffer2.constructor(buffer2.length);
      buffer2.copy(result);
      return result;
    }
    function cloneArrayBuffer(arrayBuffer) {
      var result = new arrayBuffer.constructor(arrayBuffer.byteLength);
      new Uint8Array2(result).set(new Uint8Array2(arrayBuffer));
      return result;
    }
    function cloneDataView(dataView, isDeep) {
      var buffer2 = isDeep ? cloneArrayBuffer(dataView.buffer) : dataView.buffer;
      return new dataView.constructor(buffer2, dataView.byteOffset, dataView.byteLength);
    }
    function cloneMap(map2, isDeep, cloneFunc) {
      var array = isDeep ? cloneFunc(mapToArray(map2), true) : mapToArray(map2);
      return arrayReduce(array, addMapEntry, new map2.constructor());
    }
    function cloneRegExp(regexp) {
      var result = new regexp.constructor(regexp.source, reFlags.exec(regexp));
      result.lastIndex = regexp.lastIndex;
      return result;
    }
    function cloneSet(set, isDeep, cloneFunc) {
      var array = isDeep ? cloneFunc(setToArray(set), true) : setToArray(set);
      return arrayReduce(array, addSetEntry, new set.constructor());
    }
    function cloneSymbol(symbol) {
      return symbolValueOf ? Object(symbolValueOf.call(symbol)) : {};
    }
    function cloneTypedArray(typedArray, isDeep) {
      var buffer2 = isDeep ? cloneArrayBuffer(typedArray.buffer) : typedArray.buffer;
      return new typedArray.constructor(buffer2, typedArray.byteOffset, typedArray.length);
    }
    function copyArray(source, array) {
      var index = -1, length = source.length;
      array || (array = Array(length));
      while (++index < length) {
        array[index] = source[index];
      }
      return array;
    }
    function copyObject(source, props, object, customizer) {
      object || (object = {});
      var index = -1, length = props.length;
      while (++index < length) {
        var key = props[index];
        var newValue = customizer ? customizer(object[key], source[key], key, object, source) : void 0;
        assignValue(object, key, newValue === void 0 ? source[key] : newValue);
      }
      return object;
    }
    function copySymbols(source, object) {
      return copyObject(source, getSymbols(source), object);
    }
    function getAllKeys(object) {
      return baseGetAllKeys(object, keys, getSymbols);
    }
    function getMapData(map2, key) {
      var data = map2.__data__;
      return isKeyable(key) ? data[typeof key == "string" ? "string" : "hash"] : data.map;
    }
    function getNative(object, key) {
      var value = getValue(object, key);
      return baseIsNative(value) ? value : void 0;
    }
    var getSymbols = nativeGetSymbols ? overArg(nativeGetSymbols, Object) : stubArray;
    var getTag = baseGetTag;
    if (DataView2 && getTag(new DataView2(new ArrayBuffer(1))) != dataViewTag || Map2 && getTag(new Map2()) != mapTag || Promise2 && getTag(Promise2.resolve()) != promiseTag || Set2 && getTag(new Set2()) != setTag || WeakMap && getTag(new WeakMap()) != weakMapTag) {
      getTag = function(value) {
        var result = objectToString2.call(value), Ctor = result == objectTag ? value.constructor : void 0, ctorString = Ctor ? toSource(Ctor) : void 0;
        if (ctorString) {
          switch (ctorString) {
            case dataViewCtorString:
              return dataViewTag;
            case mapCtorString:
              return mapTag;
            case promiseCtorString:
              return promiseTag;
            case setCtorString:
              return setTag;
            case weakMapCtorString:
              return weakMapTag;
          }
        }
        return result;
      };
    }
    function initCloneArray(array) {
      var length = array.length, result = array.constructor(length);
      if (length && typeof array[0] == "string" && hasOwnProperty2.call(array, "index")) {
        result.index = array.index;
        result.input = array.input;
      }
      return result;
    }
    function initCloneObject(object) {
      return typeof object.constructor == "function" && !isPrototype(object) ? baseCreate(getPrototype(object)) : {};
    }
    function initCloneByTag(object, tag, cloneFunc, isDeep) {
      var Ctor = object.constructor;
      switch (tag) {
        case arrayBufferTag:
          return cloneArrayBuffer(object);
        case boolTag:
        case dateTag:
          return new Ctor(+object);
        case dataViewTag:
          return cloneDataView(object, isDeep);
        case float32Tag:
        case float64Tag:
        case int8Tag:
        case int16Tag:
        case int32Tag:
        case uint8Tag:
        case uint8ClampedTag:
        case uint16Tag:
        case uint32Tag:
          return cloneTypedArray(object, isDeep);
        case mapTag:
          return cloneMap(object, isDeep, cloneFunc);
        case numberTag:
        case stringTag:
          return new Ctor(object);
        case regexpTag:
          return cloneRegExp(object);
        case setTag:
          return cloneSet(object, isDeep, cloneFunc);
        case symbolTag:
          return cloneSymbol(object);
      }
    }
    function isIndex(value, length) {
      length = length == null ? MAX_SAFE_INTEGER : length;
      return !!length && (typeof value == "number" || reIsUint.test(value)) && (value > -1 && value % 1 == 0 && value < length);
    }
    function isKeyable(value) {
      var type = typeof value;
      return type == "string" || type == "number" || type == "symbol" || type == "boolean" ? value !== "__proto__" : value === null;
    }
    function isMasked(func) {
      return !!maskSrcKey && maskSrcKey in func;
    }
    function isPrototype(value) {
      var Ctor = value && value.constructor, proto = typeof Ctor == "function" && Ctor.prototype || objectProto;
      return value === proto;
    }
    function toSource(func) {
      if (func != null) {
        try {
          return funcToString.call(func);
        } catch (e2) {
        }
        try {
          return func + "";
        } catch (e2) {
        }
      }
      return "";
    }
    function cloneDeep2(value) {
      return baseClone(value, true, true);
    }
    function eq(value, other) {
      return value === other || value !== value && other !== other;
    }
    function isArguments2(value) {
      return isArrayLikeObject(value) && hasOwnProperty2.call(value, "callee") && (!propertyIsEnumerable.call(value, "callee") || objectToString2.call(value) == argsTag);
    }
    var isArray2 = Array.isArray;
    function isArrayLike(value) {
      return value != null && isLength(value.length) && !isFunction2(value);
    }
    function isArrayLikeObject(value) {
      return isObjectLike(value) && isArrayLike(value);
    }
    var isBuffer = nativeIsBuffer || stubFalse;
    function isFunction2(value) {
      var tag = isObject2(value) ? objectToString2.call(value) : "";
      return tag == funcTag || tag == genTag;
    }
    function isLength(value) {
      return typeof value == "number" && value > -1 && value % 1 == 0 && value <= MAX_SAFE_INTEGER;
    }
    function isObject2(value) {
      var type = typeof value;
      return !!value && (type == "object" || type == "function");
    }
    function isObjectLike(value) {
      return !!value && typeof value == "object";
    }
    function keys(object) {
      return isArrayLike(object) ? arrayLikeKeys(object) : baseKeys(object);
    }
    function stubArray() {
      return [];
    }
    function stubFalse() {
      return false;
    }
    module.exports = cloneDeep2;
  }
});

// ../../node_modules/@metaplex-foundation/mpl-candy-machine/node_modules/@metaplex-foundation/beet-solana/dist/cjs/src/keys.js
var require_keys4 = __commonJS({
  "../../node_modules/@metaplex-foundation/mpl-candy-machine/node_modules/@metaplex-foundation/beet-solana/dist/cjs/src/keys.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.keysTypeMap = exports.publicKey = void 0;
    var web3_js_1 = (init_index_browser_esm(), __toCommonJS(index_browser_esm_exports));
    var beet_1 = require_beet();
    var BEET_SOLANA_PACKAGE = "@metaplex-foundation/beet-solana";
    var SOLANA_WEB3_PACKAGE = "@solana/web3.js";
    var uint8Array32 = (0, beet_1.fixedSizeUint8Array)(32);
    exports.publicKey = {
      write: function(buf, offset, value) {
        const arr = value.toBytes();
        uint8Array32.write(buf, offset, arr);
      },
      read: function(buf, offset) {
        const bytes = uint8Array32.read(buf, offset);
        return new web3_js_1.PublicKey(bytes);
      },
      byteSize: uint8Array32.byteSize,
      description: "PublicKey"
    };
    exports.keysTypeMap = {
      publicKey: {
        beet: "publicKey",
        isFixable: false,
        sourcePack: BEET_SOLANA_PACKAGE,
        ts: "PublicKey",
        pack: SOLANA_WEB3_PACKAGE
      }
    };
  }
});

// ../../node_modules/@metaplex-foundation/mpl-candy-machine/node_modules/@metaplex-foundation/beet-solana/dist/cjs/src/utils.js
var require_utils6 = __commonJS({
  "../../node_modules/@metaplex-foundation/mpl-candy-machine/node_modules/@metaplex-foundation/beet-solana/dist/cjs/src/utils.js"(exports) {
    "use strict";
    var __importDefault = exports && exports.__importDefault || function(mod) {
      return mod && mod.__esModule ? mod : { "default": mod };
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.logTrace = exports.logDebug = exports.logInfo = exports.logError = void 0;
    var debug_1 = __importDefault(require_browser2());
    exports.logError = (0, debug_1.default)("beet:error");
    exports.logInfo = (0, debug_1.default)("beet:info");
    exports.logDebug = (0, debug_1.default)("beet:debug");
    exports.logTrace = (0, debug_1.default)("beet:trace");
  }
});

// ../../node_modules/@metaplex-foundation/mpl-candy-machine/node_modules/@metaplex-foundation/beet-solana/dist/cjs/src/gpa/util.js
var require_util5 = __commonJS({
  "../../node_modules/@metaplex-foundation/mpl-candy-machine/node_modules/@metaplex-foundation/beet-solana/dist/cjs/src/gpa/util.js"(exports) {
    "use strict";
    var __importDefault = exports && exports.__importDefault || function(mod) {
      return mod && mod.__esModule ? mod : { "default": mod };
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.encodeFixedBeet = void 0;
    var bs58_1 = __importDefault(require_bs58());
    function encodeFixedBeet(beet9, val) {
      const buf = Buffer.alloc(beet9.byteSize);
      beet9.write(buf, 0, val);
      return bs58_1.default.encode(buf);
    }
    exports.encodeFixedBeet = encodeFixedBeet;
  }
});

// ../../node_modules/@metaplex-foundation/mpl-candy-machine/node_modules/@metaplex-foundation/beet-solana/dist/cjs/src/gpa/index.js
var require_gpa4 = __commonJS({
  "../../node_modules/@metaplex-foundation/mpl-candy-machine/node_modules/@metaplex-foundation/beet-solana/dist/cjs/src/gpa/index.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.GpaBuilder = void 0;
    var beet_1 = require_beet();
    var assert_1 = require_assert();
    var utils_1 = require_utils6();
    var util_1 = require_util5();
    var GpaBuilder2 = class _GpaBuilder {
      constructor(programId, beets, accountSize) {
        this.programId = programId;
        this.beets = beets;
        this.accountSize = accountSize;
        this.config = {};
      }
      _addFilter(filter) {
        if (this.config.filters == null) {
          this.config.filters = [];
        }
        this.config.filters.push(filter);
        return this;
      }
      _addInnerFilter(key, innerKey, val) {
        (0, utils_1.logTrace)(`gpa.addInnerFilter: ${key}.${innerKey}`);
        const outerBeetInfo = this.beets.get(key);
        (0, assert_1.strict)(outerBeetInfo != null, "Outer filter key needs to be an existing field name");
        const beetInfo = outerBeetInfo.beet;
        let offset = outerBeetInfo.offset;
        const outerBeet = (0, beet_1.isFixedSizeBeet)(beetInfo) ? beetInfo : beetInfo.toFixedFromValue(val);
        let beet9;
        for (const [k, v] of outerBeet.fields) {
          if (k === innerKey) {
            beet9 = v;
            break;
          }
          offset += v.byteSize;
        }
        (0, assert_1.strict)(beet9 != null, `${innerKey} is not a field of the ${key} struct`);
        const bytes = (0, util_1.encodeFixedBeet)(beet9, val);
        this._addFilter({ memcmp: { offset, bytes } });
        return this;
      }
      /**
       * Adds a _memcmp_ filter for a field inside a field which is a struct value.
       * The provided keys need to be separated by a `.` and only one level of
       * nesting is supported at this point.
       *
       * The filter is applied to the inner value.
       *
       * ## Example
       *
       * ### Given:
       *
       * ```typescript
       * type Inner = {
       *   a: number
       * }
       * type Outer = {
       *   idx: number
       *   inner: Inner
       * }
       * ```
       * ### Apply a filter on `a` of the `Inner` type:
       *
       * ```typescript
       * gpaBuilder.addInnerFilter('inner.a', 2)
       * ```
       *
       * @param keys - the names of the fields by which to filter, i.e. `'outer.inner'`
       * @param val - the field value that the filter should match
       */
      addInnerFilter(keys, val) {
        const parts = keys.split(".");
        assert_1.strict.equal(parts.length, 2, `inner filters can go only one level deep, i.e. 'outer.inner' is ok, but 'outer.inner.deep' is not`);
        const [ka, kb] = parts;
        return this._addInnerFilter(ka, kb, val);
      }
      /**
       * Adds a _memcmp_ filter for the provided {@link key} of the struct.
       *
       * @param key - the name of the field by which to filter
       * @param val - the field value that the filter should match
       */
      addFilter(key, val) {
        const beetInfo = this.beets.get(key);
        (0, assert_1.strict)(beetInfo != null, "Filter key needs to be an existing field name");
        const beet9 = (0, beet_1.isFixedSizeBeet)(beetInfo.beet) ? beetInfo.beet : beetInfo.beet.toFixedFromValue(val);
        const bytes = (0, util_1.encodeFixedBeet)(beet9, val);
        this._addFilter({ memcmp: { offset: beetInfo.offset, bytes } });
        return this;
      }
      /**
       * Adds a `dataSize` filter which will match on account's sizes.
       * You have to provide that {@link size} for accounts that don't have a fixed size.
       * For _fixed_ size accounts that size is determined for you.
       *
       * @param size - the account size to match for
       */
      dataSize(size) {
        size = size !== null && size !== void 0 ? size : this.accountSize;
        (0, assert_1.strict)(size != null, "for accounts of dynamic size the dataSize arg needs to be provided");
        return this._addFilter({ dataSize: size });
      }
      /**
       * Attempts to find the accounts matching the configured filters.
       *
       * @param connection used to query the program accounts on the cluster
       */
      run(connection) {
        return connection.getProgramAccounts(this.programId, this.config);
      }
      /**
       * Creates a GPA builder that supports adding up to four filters for
       * fixed size fields.
       *
       * Once a non-fixed field is encountered, the remaining fields following it
       * will not be included as a filter option since their position in the
       * bytes array will change depending on the content of the non-fixed field.
       *
       * @param programId - the id of the program that owns the accounts we are querying
       * @param beetFields - the beet fields that make up the structure of the account data
       */
      static fromBeetFields(programId, beetFields) {
        const map2 = /* @__PURE__ */ new Map();
        let offset = 0;
        let encounteredNonFixed = false;
        for (const [k, v] of beetFields) {
          map2.set(k, { beet: v, offset });
          if (!(0, beet_1.isFixedSizeBeet)(v)) {
            encounteredNonFixed = true;
            break;
          }
          offset += v.byteSize;
        }
        const accountSize = encounteredNonFixed ? void 0 : offset;
        return new _GpaBuilder(programId, map2, accountSize);
      }
      /**
       * Convenience wrapper around {@link GpaBuilder.fromBeetFields} that allows
       * providing a struct which contains the beet fields.
       *
       * @param programId - the id of the program that owns the accounts we are querying
       * @param struct - containing the beet `fields` specifying the layout of the account
       */
      static fromStruct(programId, struct51) {
        return _GpaBuilder.fromBeetFields(programId, struct51.fields);
      }
    };
    exports.GpaBuilder = GpaBuilder2;
  }
});

// ../../node_modules/@metaplex-foundation/mpl-candy-machine/node_modules/@metaplex-foundation/beet-solana/dist/cjs/src/beet-solana.js
var require_beet_solana4 = __commonJS({
  "../../node_modules/@metaplex-foundation/mpl-candy-machine/node_modules/@metaplex-foundation/beet-solana/dist/cjs/src/beet-solana.js"(exports) {
    "use strict";
    var __createBinding = exports && exports.__createBinding || (Object.create ? function(o2, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      var desc = Object.getOwnPropertyDescriptor(m, k);
      if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m[k];
        } };
      }
      Object.defineProperty(o2, k2, desc);
    } : function(o2, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      o2[k2] = m[k];
    });
    var __exportStar = exports && exports.__exportStar || function(m, exports2) {
      for (var p in m)
        if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports2, p))
          __createBinding(exports2, m, p);
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.supportedTypeMap = void 0;
    var keys_1 = require_keys4();
    __exportStar(require_keys4(), exports);
    __exportStar(require_gpa4(), exports);
    exports.supportedTypeMap = keys_1.keysTypeMap;
  }
});

// ../../node_modules/@metaplex-foundation/mpl-candy-machine/dist/src/generated/types/EndSettingType.js
var require_EndSettingType = __commonJS({
  "../../node_modules/@metaplex-foundation/mpl-candy-machine/dist/src/generated/types/EndSettingType.js"(exports) {
    "use strict";
    var __createBinding = exports && exports.__createBinding || (Object.create ? function(o2, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      var desc = Object.getOwnPropertyDescriptor(m, k);
      if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m[k];
        } };
      }
      Object.defineProperty(o2, k2, desc);
    } : function(o2, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      o2[k2] = m[k];
    });
    var __setModuleDefault = exports && exports.__setModuleDefault || (Object.create ? function(o2, v) {
      Object.defineProperty(o2, "default", { enumerable: true, value: v });
    } : function(o2, v) {
      o2["default"] = v;
    });
    var __importStar = exports && exports.__importStar || function(mod) {
      if (mod && mod.__esModule)
        return mod;
      var result = {};
      if (mod != null) {
        for (var k in mod)
          if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k))
            __createBinding(result, mod, k);
      }
      __setModuleDefault(result, mod);
      return result;
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.endSettingTypeBeet = exports.EndSettingType = void 0;
    var beet9 = __importStar(require_beet());
    var EndSettingType4;
    (function(EndSettingType5) {
      EndSettingType5[EndSettingType5["Date"] = 0] = "Date";
      EndSettingType5[EndSettingType5["Amount"] = 1] = "Amount";
    })(EndSettingType4 = exports.EndSettingType || (exports.EndSettingType = {}));
    exports.endSettingTypeBeet = beet9.fixedScalarEnum(EndSettingType4);
  }
});

// ../../node_modules/@metaplex-foundation/mpl-candy-machine/dist/src/generated/types/EndSettings.js
var require_EndSettings = __commonJS({
  "../../node_modules/@metaplex-foundation/mpl-candy-machine/dist/src/generated/types/EndSettings.js"(exports) {
    "use strict";
    var __createBinding = exports && exports.__createBinding || (Object.create ? function(o2, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      var desc = Object.getOwnPropertyDescriptor(m, k);
      if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m[k];
        } };
      }
      Object.defineProperty(o2, k2, desc);
    } : function(o2, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      o2[k2] = m[k];
    });
    var __setModuleDefault = exports && exports.__setModuleDefault || (Object.create ? function(o2, v) {
      Object.defineProperty(o2, "default", { enumerable: true, value: v });
    } : function(o2, v) {
      o2["default"] = v;
    });
    var __importStar = exports && exports.__importStar || function(mod) {
      if (mod && mod.__esModule)
        return mod;
      var result = {};
      if (mod != null) {
        for (var k in mod)
          if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k))
            __createBinding(result, mod, k);
      }
      __setModuleDefault(result, mod);
      return result;
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.endSettingsBeet = void 0;
    var beet9 = __importStar(require_beet());
    var EndSettingType_1 = require_EndSettingType();
    exports.endSettingsBeet = new beet9.BeetArgsStruct([
      ["endSettingType", EndSettingType_1.endSettingTypeBeet],
      ["number", beet9.u64]
    ], "EndSettings");
  }
});

// ../../node_modules/@metaplex-foundation/mpl-candy-machine/dist/src/generated/types/Creator.js
var require_Creator3 = __commonJS({
  "../../node_modules/@metaplex-foundation/mpl-candy-machine/dist/src/generated/types/Creator.js"(exports) {
    "use strict";
    var __createBinding = exports && exports.__createBinding || (Object.create ? function(o2, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      var desc = Object.getOwnPropertyDescriptor(m, k);
      if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m[k];
        } };
      }
      Object.defineProperty(o2, k2, desc);
    } : function(o2, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      o2[k2] = m[k];
    });
    var __setModuleDefault = exports && exports.__setModuleDefault || (Object.create ? function(o2, v) {
      Object.defineProperty(o2, "default", { enumerable: true, value: v });
    } : function(o2, v) {
      o2["default"] = v;
    });
    var __importStar = exports && exports.__importStar || function(mod) {
      if (mod && mod.__esModule)
        return mod;
      var result = {};
      if (mod != null) {
        for (var k in mod)
          if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k))
            __createBinding(result, mod, k);
      }
      __setModuleDefault(result, mod);
      return result;
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.creatorBeet = void 0;
    var beetSolana = __importStar(require_beet_solana4());
    var beet9 = __importStar(require_beet());
    exports.creatorBeet = new beet9.BeetArgsStruct([
      ["address", beetSolana.publicKey],
      ["verified", beet9.bool],
      ["share", beet9.u8]
    ], "Creator");
  }
});

// ../../node_modules/@metaplex-foundation/mpl-candy-machine/dist/src/generated/types/HiddenSettings.js
var require_HiddenSettings = __commonJS({
  "../../node_modules/@metaplex-foundation/mpl-candy-machine/dist/src/generated/types/HiddenSettings.js"(exports) {
    "use strict";
    var __createBinding = exports && exports.__createBinding || (Object.create ? function(o2, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      var desc = Object.getOwnPropertyDescriptor(m, k);
      if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m[k];
        } };
      }
      Object.defineProperty(o2, k2, desc);
    } : function(o2, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      o2[k2] = m[k];
    });
    var __setModuleDefault = exports && exports.__setModuleDefault || (Object.create ? function(o2, v) {
      Object.defineProperty(o2, "default", { enumerable: true, value: v });
    } : function(o2, v) {
      o2["default"] = v;
    });
    var __importStar = exports && exports.__importStar || function(mod) {
      if (mod && mod.__esModule)
        return mod;
      var result = {};
      if (mod != null) {
        for (var k in mod)
          if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k))
            __createBinding(result, mod, k);
      }
      __setModuleDefault(result, mod);
      return result;
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.hiddenSettingsBeet = void 0;
    var beet9 = __importStar(require_beet());
    exports.hiddenSettingsBeet = new beet9.FixableBeetArgsStruct([
      ["name", beet9.utf8String],
      ["uri", beet9.utf8String],
      ["hash", beet9.uniformFixedSizeArray(beet9.u8, 32)]
    ], "HiddenSettings");
  }
});

// ../../node_modules/@metaplex-foundation/mpl-candy-machine/dist/src/generated/types/WhitelistMintMode.js
var require_WhitelistMintMode = __commonJS({
  "../../node_modules/@metaplex-foundation/mpl-candy-machine/dist/src/generated/types/WhitelistMintMode.js"(exports) {
    "use strict";
    var __createBinding = exports && exports.__createBinding || (Object.create ? function(o2, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      var desc = Object.getOwnPropertyDescriptor(m, k);
      if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m[k];
        } };
      }
      Object.defineProperty(o2, k2, desc);
    } : function(o2, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      o2[k2] = m[k];
    });
    var __setModuleDefault = exports && exports.__setModuleDefault || (Object.create ? function(o2, v) {
      Object.defineProperty(o2, "default", { enumerable: true, value: v });
    } : function(o2, v) {
      o2["default"] = v;
    });
    var __importStar = exports && exports.__importStar || function(mod) {
      if (mod && mod.__esModule)
        return mod;
      var result = {};
      if (mod != null) {
        for (var k in mod)
          if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k))
            __createBinding(result, mod, k);
      }
      __setModuleDefault(result, mod);
      return result;
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.whitelistMintModeBeet = exports.WhitelistMintMode = void 0;
    var beet9 = __importStar(require_beet());
    var WhitelistMintMode;
    (function(WhitelistMintMode2) {
      WhitelistMintMode2[WhitelistMintMode2["BurnEveryTime"] = 0] = "BurnEveryTime";
      WhitelistMintMode2[WhitelistMintMode2["NeverBurn"] = 1] = "NeverBurn";
    })(WhitelistMintMode = exports.WhitelistMintMode || (exports.WhitelistMintMode = {}));
    exports.whitelistMintModeBeet = beet9.fixedScalarEnum(WhitelistMintMode);
  }
});

// ../../node_modules/@metaplex-foundation/mpl-candy-machine/dist/src/generated/types/WhitelistMintSettings.js
var require_WhitelistMintSettings = __commonJS({
  "../../node_modules/@metaplex-foundation/mpl-candy-machine/dist/src/generated/types/WhitelistMintSettings.js"(exports) {
    "use strict";
    var __createBinding = exports && exports.__createBinding || (Object.create ? function(o2, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      var desc = Object.getOwnPropertyDescriptor(m, k);
      if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m[k];
        } };
      }
      Object.defineProperty(o2, k2, desc);
    } : function(o2, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      o2[k2] = m[k];
    });
    var __setModuleDefault = exports && exports.__setModuleDefault || (Object.create ? function(o2, v) {
      Object.defineProperty(o2, "default", { enumerable: true, value: v });
    } : function(o2, v) {
      o2["default"] = v;
    });
    var __importStar = exports && exports.__importStar || function(mod) {
      if (mod && mod.__esModule)
        return mod;
      var result = {};
      if (mod != null) {
        for (var k in mod)
          if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k))
            __createBinding(result, mod, k);
      }
      __setModuleDefault(result, mod);
      return result;
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.whitelistMintSettingsBeet = void 0;
    var beet9 = __importStar(require_beet());
    var beetSolana = __importStar(require_beet_solana4());
    var WhitelistMintMode_1 = require_WhitelistMintMode();
    exports.whitelistMintSettingsBeet = new beet9.FixableBeetArgsStruct([
      ["mode", WhitelistMintMode_1.whitelistMintModeBeet],
      ["mint", beetSolana.publicKey],
      ["presale", beet9.bool],
      ["discountPrice", beet9.coption(beet9.u64)]
    ], "WhitelistMintSettings");
  }
});

// ../../node_modules/@metaplex-foundation/mpl-candy-machine/dist/src/generated/types/GatekeeperConfig.js
var require_GatekeeperConfig = __commonJS({
  "../../node_modules/@metaplex-foundation/mpl-candy-machine/dist/src/generated/types/GatekeeperConfig.js"(exports) {
    "use strict";
    var __createBinding = exports && exports.__createBinding || (Object.create ? function(o2, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      var desc = Object.getOwnPropertyDescriptor(m, k);
      if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m[k];
        } };
      }
      Object.defineProperty(o2, k2, desc);
    } : function(o2, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      o2[k2] = m[k];
    });
    var __setModuleDefault = exports && exports.__setModuleDefault || (Object.create ? function(o2, v) {
      Object.defineProperty(o2, "default", { enumerable: true, value: v });
    } : function(o2, v) {
      o2["default"] = v;
    });
    var __importStar = exports && exports.__importStar || function(mod) {
      if (mod && mod.__esModule)
        return mod;
      var result = {};
      if (mod != null) {
        for (var k in mod)
          if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k))
            __createBinding(result, mod, k);
      }
      __setModuleDefault(result, mod);
      return result;
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.gatekeeperConfigBeet = void 0;
    var beetSolana = __importStar(require_beet_solana4());
    var beet9 = __importStar(require_beet());
    exports.gatekeeperConfigBeet = new beet9.BeetArgsStruct([
      ["gatekeeperNetwork", beetSolana.publicKey],
      ["expireOnUse", beet9.bool]
    ], "GatekeeperConfig");
  }
});

// ../../node_modules/@metaplex-foundation/mpl-candy-machine/dist/src/generated/types/CandyMachineData.js
var require_CandyMachineData = __commonJS({
  "../../node_modules/@metaplex-foundation/mpl-candy-machine/dist/src/generated/types/CandyMachineData.js"(exports) {
    "use strict";
    var __createBinding = exports && exports.__createBinding || (Object.create ? function(o2, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      var desc = Object.getOwnPropertyDescriptor(m, k);
      if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m[k];
        } };
      }
      Object.defineProperty(o2, k2, desc);
    } : function(o2, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      o2[k2] = m[k];
    });
    var __setModuleDefault = exports && exports.__setModuleDefault || (Object.create ? function(o2, v) {
      Object.defineProperty(o2, "default", { enumerable: true, value: v });
    } : function(o2, v) {
      o2["default"] = v;
    });
    var __importStar = exports && exports.__importStar || function(mod) {
      if (mod && mod.__esModule)
        return mod;
      var result = {};
      if (mod != null) {
        for (var k in mod)
          if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k))
            __createBinding(result, mod, k);
      }
      __setModuleDefault(result, mod);
      return result;
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.candyMachineDataBeet = void 0;
    var beet9 = __importStar(require_beet());
    var EndSettings_1 = require_EndSettings();
    var Creator_1 = require_Creator3();
    var HiddenSettings_1 = require_HiddenSettings();
    var WhitelistMintSettings_1 = require_WhitelistMintSettings();
    var GatekeeperConfig_1 = require_GatekeeperConfig();
    exports.candyMachineDataBeet = new beet9.FixableBeetArgsStruct([
      ["uuid", beet9.utf8String],
      ["price", beet9.u64],
      ["symbol", beet9.utf8String],
      ["sellerFeeBasisPoints", beet9.u16],
      ["maxSupply", beet9.u64],
      ["isMutable", beet9.bool],
      ["retainAuthority", beet9.bool],
      ["goLiveDate", beet9.coption(beet9.i64)],
      ["endSettings", beet9.coption(EndSettings_1.endSettingsBeet)],
      ["creators", beet9.array(Creator_1.creatorBeet)],
      ["hiddenSettings", beet9.coption(HiddenSettings_1.hiddenSettingsBeet)],
      ["whitelistMintSettings", beet9.coption(WhitelistMintSettings_1.whitelistMintSettingsBeet)],
      ["itemsAvailable", beet9.u64],
      ["gatekeeper", beet9.coption(GatekeeperConfig_1.gatekeeperConfigBeet)]
    ], "CandyMachineData");
  }
});

// ../../node_modules/@metaplex-foundation/mpl-candy-machine/dist/src/generated/accounts/CandyMachine.js
var require_CandyMachine = __commonJS({
  "../../node_modules/@metaplex-foundation/mpl-candy-machine/dist/src/generated/accounts/CandyMachine.js"(exports) {
    "use strict";
    var __createBinding = exports && exports.__createBinding || (Object.create ? function(o2, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      var desc = Object.getOwnPropertyDescriptor(m, k);
      if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m[k];
        } };
      }
      Object.defineProperty(o2, k2, desc);
    } : function(o2, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      o2[k2] = m[k];
    });
    var __setModuleDefault = exports && exports.__setModuleDefault || (Object.create ? function(o2, v) {
      Object.defineProperty(o2, "default", { enumerable: true, value: v });
    } : function(o2, v) {
      o2["default"] = v;
    });
    var __importStar = exports && exports.__importStar || function(mod) {
      if (mod && mod.__esModule)
        return mod;
      var result = {};
      if (mod != null) {
        for (var k in mod)
          if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k))
            __createBinding(result, mod, k);
      }
      __setModuleDefault(result, mod);
      return result;
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.candyMachineBeet = exports.CandyMachine = exports.candyMachineDiscriminator = void 0;
    var web3 = __importStar((init_index_browser_esm(), __toCommonJS(index_browser_esm_exports)));
    var beet9 = __importStar(require_beet());
    var beetSolana = __importStar(require_beet_solana4());
    var CandyMachineData_1 = require_CandyMachineData();
    exports.candyMachineDiscriminator = [51, 173, 177, 113, 25, 241, 109, 189];
    var CandyMachine3 = class _CandyMachine {
      constructor(authority, wallet, tokenMint, itemsRedeemed, data) {
        this.authority = authority;
        this.wallet = wallet;
        this.tokenMint = tokenMint;
        this.itemsRedeemed = itemsRedeemed;
        this.data = data;
      }
      static fromArgs(args) {
        return new _CandyMachine(args.authority, args.wallet, args.tokenMint, args.itemsRedeemed, args.data);
      }
      static fromAccountInfo(accountInfo, offset = 0) {
        return _CandyMachine.deserialize(accountInfo.data, offset);
      }
      static fromAccountAddress(connection, address, commitmentOrConfig) {
        return __async(this, null, function* () {
          const accountInfo = yield connection.getAccountInfo(address, commitmentOrConfig);
          if (accountInfo == null) {
            throw new Error(`Unable to find CandyMachine account at ${address}`);
          }
          return _CandyMachine.fromAccountInfo(accountInfo, 0)[0];
        });
      }
      static gpaBuilder(programId = new web3.PublicKey("cndy3Z4yapfJBmL3ShUp5exZKqR3z33thTzeNMm2gRZ")) {
        return beetSolana.GpaBuilder.fromStruct(programId, exports.candyMachineBeet);
      }
      static deserialize(buf, offset = 0) {
        return exports.candyMachineBeet.deserialize(buf, offset);
      }
      serialize() {
        return exports.candyMachineBeet.serialize(__spreadValues({
          accountDiscriminator: exports.candyMachineDiscriminator
        }, this));
      }
      static byteSize(args) {
        const instance = _CandyMachine.fromArgs(args);
        return exports.candyMachineBeet.toFixedFromValue(__spreadValues({
          accountDiscriminator: exports.candyMachineDiscriminator
        }, instance)).byteSize;
      }
      static getMinimumBalanceForRentExemption(args, connection, commitment) {
        return __async(this, null, function* () {
          return connection.getMinimumBalanceForRentExemption(_CandyMachine.byteSize(args), commitment);
        });
      }
      pretty() {
        return {
          authority: this.authority.toBase58(),
          wallet: this.wallet.toBase58(),
          tokenMint: this.tokenMint,
          itemsRedeemed: (() => {
            const x = this.itemsRedeemed;
            if (typeof x.toNumber === "function") {
              try {
                return x.toNumber();
              } catch (_) {
                return x;
              }
            }
            return x;
          })(),
          data: this.data
        };
      }
    };
    exports.CandyMachine = CandyMachine3;
    exports.candyMachineBeet = new beet9.FixableBeetStruct([
      ["accountDiscriminator", beet9.uniformFixedSizeArray(beet9.u8, 8)],
      ["authority", beetSolana.publicKey],
      ["wallet", beetSolana.publicKey],
      ["tokenMint", beet9.coption(beetSolana.publicKey)],
      ["itemsRedeemed", beet9.u64],
      ["data", CandyMachineData_1.candyMachineDataBeet]
    ], CandyMachine3.fromArgs, "CandyMachine");
  }
});

// ../../node_modules/@metaplex-foundation/mpl-candy-machine/dist/src/generated/accounts/CollectionPDA.js
var require_CollectionPDA = __commonJS({
  "../../node_modules/@metaplex-foundation/mpl-candy-machine/dist/src/generated/accounts/CollectionPDA.js"(exports) {
    "use strict";
    var __createBinding = exports && exports.__createBinding || (Object.create ? function(o2, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      var desc = Object.getOwnPropertyDescriptor(m, k);
      if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m[k];
        } };
      }
      Object.defineProperty(o2, k2, desc);
    } : function(o2, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      o2[k2] = m[k];
    });
    var __setModuleDefault = exports && exports.__setModuleDefault || (Object.create ? function(o2, v) {
      Object.defineProperty(o2, "default", { enumerable: true, value: v });
    } : function(o2, v) {
      o2["default"] = v;
    });
    var __importStar = exports && exports.__importStar || function(mod) {
      if (mod && mod.__esModule)
        return mod;
      var result = {};
      if (mod != null) {
        for (var k in mod)
          if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k))
            __createBinding(result, mod, k);
      }
      __setModuleDefault(result, mod);
      return result;
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.collectionPDABeet = exports.CollectionPDA = exports.collectionPDADiscriminator = void 0;
    var web3 = __importStar((init_index_browser_esm(), __toCommonJS(index_browser_esm_exports)));
    var beetSolana = __importStar(require_beet_solana4());
    var beet9 = __importStar(require_beet());
    exports.collectionPDADiscriminator = [203, 128, 119, 125, 234, 89, 232, 157];
    var CollectionPDA2 = class _CollectionPDA {
      constructor(mint, candyMachine) {
        this.mint = mint;
        this.candyMachine = candyMachine;
      }
      static fromArgs(args) {
        return new _CollectionPDA(args.mint, args.candyMachine);
      }
      static fromAccountInfo(accountInfo, offset = 0) {
        return _CollectionPDA.deserialize(accountInfo.data, offset);
      }
      static fromAccountAddress(connection, address, commitmentOrConfig) {
        return __async(this, null, function* () {
          const accountInfo = yield connection.getAccountInfo(address, commitmentOrConfig);
          if (accountInfo == null) {
            throw new Error(`Unable to find CollectionPDA account at ${address}`);
          }
          return _CollectionPDA.fromAccountInfo(accountInfo, 0)[0];
        });
      }
      static gpaBuilder(programId = new web3.PublicKey("cndy3Z4yapfJBmL3ShUp5exZKqR3z33thTzeNMm2gRZ")) {
        return beetSolana.GpaBuilder.fromStruct(programId, exports.collectionPDABeet);
      }
      static deserialize(buf, offset = 0) {
        return exports.collectionPDABeet.deserialize(buf, offset);
      }
      serialize() {
        return exports.collectionPDABeet.serialize(__spreadValues({
          accountDiscriminator: exports.collectionPDADiscriminator
        }, this));
      }
      static get byteSize() {
        return exports.collectionPDABeet.byteSize;
      }
      static getMinimumBalanceForRentExemption(connection, commitment) {
        return __async(this, null, function* () {
          return connection.getMinimumBalanceForRentExemption(_CollectionPDA.byteSize, commitment);
        });
      }
      static hasCorrectByteSize(buf, offset = 0) {
        return buf.byteLength - offset === _CollectionPDA.byteSize;
      }
      pretty() {
        return {
          mint: this.mint.toBase58(),
          candyMachine: this.candyMachine.toBase58()
        };
      }
    };
    exports.CollectionPDA = CollectionPDA2;
    exports.collectionPDABeet = new beet9.BeetStruct([
      ["accountDiscriminator", beet9.uniformFixedSizeArray(beet9.u8, 8)],
      ["mint", beetSolana.publicKey],
      ["candyMachine", beetSolana.publicKey]
    ], CollectionPDA2.fromArgs, "CollectionPDA");
  }
});

// ../../node_modules/@metaplex-foundation/mpl-candy-machine/dist/src/generated/accounts/FreezePDA.js
var require_FreezePDA = __commonJS({
  "../../node_modules/@metaplex-foundation/mpl-candy-machine/dist/src/generated/accounts/FreezePDA.js"(exports) {
    "use strict";
    var __createBinding = exports && exports.__createBinding || (Object.create ? function(o2, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      var desc = Object.getOwnPropertyDescriptor(m, k);
      if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m[k];
        } };
      }
      Object.defineProperty(o2, k2, desc);
    } : function(o2, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      o2[k2] = m[k];
    });
    var __setModuleDefault = exports && exports.__setModuleDefault || (Object.create ? function(o2, v) {
      Object.defineProperty(o2, "default", { enumerable: true, value: v });
    } : function(o2, v) {
      o2["default"] = v;
    });
    var __importStar = exports && exports.__importStar || function(mod) {
      if (mod && mod.__esModule)
        return mod;
      var result = {};
      if (mod != null) {
        for (var k in mod)
          if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k))
            __createBinding(result, mod, k);
      }
      __setModuleDefault(result, mod);
      return result;
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.freezePDABeet = exports.FreezePDA = exports.freezePDADiscriminator = void 0;
    var web3 = __importStar((init_index_browser_esm(), __toCommonJS(index_browser_esm_exports)));
    var beet9 = __importStar(require_beet());
    var beetSolana = __importStar(require_beet_solana4());
    exports.freezePDADiscriminator = [154, 58, 148, 24, 101, 200, 243, 127];
    var FreezePDA = class _FreezePDA {
      constructor(candyMachine, allowThaw, frozenCount, mintStart, freezeTime, freezeFee) {
        this.candyMachine = candyMachine;
        this.allowThaw = allowThaw;
        this.frozenCount = frozenCount;
        this.mintStart = mintStart;
        this.freezeTime = freezeTime;
        this.freezeFee = freezeFee;
      }
      static fromArgs(args) {
        return new _FreezePDA(args.candyMachine, args.allowThaw, args.frozenCount, args.mintStart, args.freezeTime, args.freezeFee);
      }
      static fromAccountInfo(accountInfo, offset = 0) {
        return _FreezePDA.deserialize(accountInfo.data, offset);
      }
      static fromAccountAddress(connection, address, commitmentOrConfig) {
        return __async(this, null, function* () {
          const accountInfo = yield connection.getAccountInfo(address, commitmentOrConfig);
          if (accountInfo == null) {
            throw new Error(`Unable to find FreezePDA account at ${address}`);
          }
          return _FreezePDA.fromAccountInfo(accountInfo, 0)[0];
        });
      }
      static gpaBuilder(programId = new web3.PublicKey("cndy3Z4yapfJBmL3ShUp5exZKqR3z33thTzeNMm2gRZ")) {
        return beetSolana.GpaBuilder.fromStruct(programId, exports.freezePDABeet);
      }
      static deserialize(buf, offset = 0) {
        return exports.freezePDABeet.deserialize(buf, offset);
      }
      serialize() {
        return exports.freezePDABeet.serialize(__spreadValues({
          accountDiscriminator: exports.freezePDADiscriminator
        }, this));
      }
      static byteSize(args) {
        const instance = _FreezePDA.fromArgs(args);
        return exports.freezePDABeet.toFixedFromValue(__spreadValues({
          accountDiscriminator: exports.freezePDADiscriminator
        }, instance)).byteSize;
      }
      static getMinimumBalanceForRentExemption(args, connection, commitment) {
        return __async(this, null, function* () {
          return connection.getMinimumBalanceForRentExemption(_FreezePDA.byteSize(args), commitment);
        });
      }
      pretty() {
        return {
          candyMachine: this.candyMachine.toBase58(),
          allowThaw: this.allowThaw,
          frozenCount: (() => {
            const x = this.frozenCount;
            if (typeof x.toNumber === "function") {
              try {
                return x.toNumber();
              } catch (_) {
                return x;
              }
            }
            return x;
          })(),
          mintStart: this.mintStart,
          freezeTime: (() => {
            const x = this.freezeTime;
            if (typeof x.toNumber === "function") {
              try {
                return x.toNumber();
              } catch (_) {
                return x;
              }
            }
            return x;
          })(),
          freezeFee: (() => {
            const x = this.freezeFee;
            if (typeof x.toNumber === "function") {
              try {
                return x.toNumber();
              } catch (_) {
                return x;
              }
            }
            return x;
          })()
        };
      }
    };
    exports.FreezePDA = FreezePDA;
    exports.freezePDABeet = new beet9.FixableBeetStruct([
      ["accountDiscriminator", beet9.uniformFixedSizeArray(beet9.u8, 8)],
      ["candyMachine", beetSolana.publicKey],
      ["allowThaw", beet9.bool],
      ["frozenCount", beet9.u64],
      ["mintStart", beet9.coption(beet9.i64)],
      ["freezeTime", beet9.i64],
      ["freezeFee", beet9.u64]
    ], FreezePDA.fromArgs, "FreezePDA");
  }
});

// ../../node_modules/@metaplex-foundation/mpl-candy-machine/dist/src/generated/accounts/index.js
var require_accounts4 = __commonJS({
  "../../node_modules/@metaplex-foundation/mpl-candy-machine/dist/src/generated/accounts/index.js"(exports) {
    "use strict";
    var __createBinding = exports && exports.__createBinding || (Object.create ? function(o2, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      var desc = Object.getOwnPropertyDescriptor(m, k);
      if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m[k];
        } };
      }
      Object.defineProperty(o2, k2, desc);
    } : function(o2, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      o2[k2] = m[k];
    });
    var __exportStar = exports && exports.__exportStar || function(m, exports2) {
      for (var p in m)
        if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports2, p))
          __createBinding(exports2, m, p);
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.accountProviders = void 0;
    __exportStar(require_CandyMachine(), exports);
    __exportStar(require_CollectionPDA(), exports);
    __exportStar(require_FreezePDA(), exports);
    var CandyMachine_1 = require_CandyMachine();
    var CollectionPDA_1 = require_CollectionPDA();
    var FreezePDA_1 = require_FreezePDA();
    exports.accountProviders = { CandyMachine: CandyMachine_1.CandyMachine, CollectionPDA: CollectionPDA_1.CollectionPDA, FreezePDA: FreezePDA_1.FreezePDA };
  }
});

// ../../node_modules/@metaplex-foundation/mpl-candy-machine/dist/src/generated/errors/index.js
var require_errors9 = __commonJS({
  "../../node_modules/@metaplex-foundation/mpl-candy-machine/dist/src/generated/errors/index.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.NoUnlockWithNFTsStillFrozenError = exports.InvalidFreezeWithdrawTokenAddressError = exports.MissingRemoveFreezeTokenAccountsError = exports.NoWithdrawWithFrozenFundsError = exports.NoWithdrawWithFreezeError = exports.EnteredFreezeIsMoreThanMaxFreezeError = exports.FreezePDAMismatchError = exports.IncorrectFreezeAtaError = exports.MissingFreezeAtaError = exports.IncorrectRemainingAccountsLenError = exports.InvalidThawNftError = exports.NoChangingTokenWithFreezeError = exports.NoChangingAuthorityWithCollectionError = exports.NoChangingFreezeDuringMintError = exports.GatewayProgramErrorError = exports.CandyCollectionRequiresRetainAuthorityError = exports.NoChangingCollectionDuringMintError = exports.MissingSetCollectionDuringMintError = exports.MetadataAccountMustBeEmptyError = exports.SlotHashesEmptyError = exports.MismatchedCollectionMintError = exports.MismatchedCollectionPDAError = exports.IncorrectCollectionAuthorityError = exports.IncorrectSlotHashesPubkeyError = exports.CannotSwitchToHiddenSettingsError = exports.SuspiciousTransactionError = exports.InvalidStringError = exports.CannotFindUsableConfigLineError = exports.NetworkExpireFeatureMissingError = exports.GatewayTokenExpireTimeInvalidError = exports.GatewayTokenMissingError = exports.GatewayAppMissingError = exports.TokenBurnFailedError = exports.NoWhitelistTokenError = exports.PublicKeyMismatchError = exports.DerivedKeyInvalidError = exports.CannotChangeNumberOfLinesError = exports.HiddenSettingsConfigsDoNotHaveConfigLinesError = exports.CandyMachineNotLiveError = exports.CandyMachineEmptyError = exports.TokenTransferFailedError = exports.NotEnoughSOLError = exports.NotEnoughTokensError = exports.UuidMustBeExactly6LengthError = exports.TooManyCreatorsError = exports.NumericalOverflowErrorError = exports.IndexGreaterThanLengthError = exports.MintMismatchError = exports.UninitializedError = exports.IncorrectOwnerError = void 0;
    exports.errorFromName = exports.errorFromCode = exports.CannotSwitchFromHiddenSettingsError = exports.SizedCollectionMetadataMustBeMutableError = void 0;
    var createErrorFromCodeLookup = /* @__PURE__ */ new Map();
    var createErrorFromNameLookup = /* @__PURE__ */ new Map();
    var IncorrectOwnerError = class _IncorrectOwnerError extends Error {
      constructor() {
        super("Account does not have correct owner!");
        this.code = 6e3;
        this.name = "IncorrectOwner";
        if (typeof Error.captureStackTrace === "function") {
          Error.captureStackTrace(this, _IncorrectOwnerError);
        }
      }
    };
    exports.IncorrectOwnerError = IncorrectOwnerError;
    createErrorFromCodeLookup.set(6e3, () => new IncorrectOwnerError());
    createErrorFromNameLookup.set("IncorrectOwner", () => new IncorrectOwnerError());
    var UninitializedError = class _UninitializedError extends Error {
      constructor() {
        super("Account is not initialized!");
        this.code = 6001;
        this.name = "Uninitialized";
        if (typeof Error.captureStackTrace === "function") {
          Error.captureStackTrace(this, _UninitializedError);
        }
      }
    };
    exports.UninitializedError = UninitializedError;
    createErrorFromCodeLookup.set(6001, () => new UninitializedError());
    createErrorFromNameLookup.set("Uninitialized", () => new UninitializedError());
    var MintMismatchError = class _MintMismatchError extends Error {
      constructor() {
        super("Mint Mismatch!");
        this.code = 6002;
        this.name = "MintMismatch";
        if (typeof Error.captureStackTrace === "function") {
          Error.captureStackTrace(this, _MintMismatchError);
        }
      }
    };
    exports.MintMismatchError = MintMismatchError;
    createErrorFromCodeLookup.set(6002, () => new MintMismatchError());
    createErrorFromNameLookup.set("MintMismatch", () => new MintMismatchError());
    var IndexGreaterThanLengthError = class _IndexGreaterThanLengthError extends Error {
      constructor() {
        super("Index greater than length!");
        this.code = 6003;
        this.name = "IndexGreaterThanLength";
        if (typeof Error.captureStackTrace === "function") {
          Error.captureStackTrace(this, _IndexGreaterThanLengthError);
        }
      }
    };
    exports.IndexGreaterThanLengthError = IndexGreaterThanLengthError;
    createErrorFromCodeLookup.set(6003, () => new IndexGreaterThanLengthError());
    createErrorFromNameLookup.set("IndexGreaterThanLength", () => new IndexGreaterThanLengthError());
    var NumericalOverflowErrorError = class _NumericalOverflowErrorError extends Error {
      constructor() {
        super("Numerical overflow error!");
        this.code = 6004;
        this.name = "NumericalOverflowError";
        if (typeof Error.captureStackTrace === "function") {
          Error.captureStackTrace(this, _NumericalOverflowErrorError);
        }
      }
    };
    exports.NumericalOverflowErrorError = NumericalOverflowErrorError;
    createErrorFromCodeLookup.set(6004, () => new NumericalOverflowErrorError());
    createErrorFromNameLookup.set("NumericalOverflowError", () => new NumericalOverflowErrorError());
    var TooManyCreatorsError = class _TooManyCreatorsError extends Error {
      constructor() {
        super("Can only provide up to 4 creators to candy machine (because candy machine is one)!");
        this.code = 6005;
        this.name = "TooManyCreators";
        if (typeof Error.captureStackTrace === "function") {
          Error.captureStackTrace(this, _TooManyCreatorsError);
        }
      }
    };
    exports.TooManyCreatorsError = TooManyCreatorsError;
    createErrorFromCodeLookup.set(6005, () => new TooManyCreatorsError());
    createErrorFromNameLookup.set("TooManyCreators", () => new TooManyCreatorsError());
    var UuidMustBeExactly6LengthError = class _UuidMustBeExactly6LengthError extends Error {
      constructor() {
        super("Uuid must be exactly of 6 length");
        this.code = 6006;
        this.name = "UuidMustBeExactly6Length";
        if (typeof Error.captureStackTrace === "function") {
          Error.captureStackTrace(this, _UuidMustBeExactly6LengthError);
        }
      }
    };
    exports.UuidMustBeExactly6LengthError = UuidMustBeExactly6LengthError;
    createErrorFromCodeLookup.set(6006, () => new UuidMustBeExactly6LengthError());
    createErrorFromNameLookup.set("UuidMustBeExactly6Length", () => new UuidMustBeExactly6LengthError());
    var NotEnoughTokensError = class _NotEnoughTokensError extends Error {
      constructor() {
        super("Not enough tokens to pay for this minting");
        this.code = 6007;
        this.name = "NotEnoughTokens";
        if (typeof Error.captureStackTrace === "function") {
          Error.captureStackTrace(this, _NotEnoughTokensError);
        }
      }
    };
    exports.NotEnoughTokensError = NotEnoughTokensError;
    createErrorFromCodeLookup.set(6007, () => new NotEnoughTokensError());
    createErrorFromNameLookup.set("NotEnoughTokens", () => new NotEnoughTokensError());
    var NotEnoughSOLError = class _NotEnoughSOLError extends Error {
      constructor() {
        super("Not enough SOL to pay for this minting");
        this.code = 6008;
        this.name = "NotEnoughSOL";
        if (typeof Error.captureStackTrace === "function") {
          Error.captureStackTrace(this, _NotEnoughSOLError);
        }
      }
    };
    exports.NotEnoughSOLError = NotEnoughSOLError;
    createErrorFromCodeLookup.set(6008, () => new NotEnoughSOLError());
    createErrorFromNameLookup.set("NotEnoughSOL", () => new NotEnoughSOLError());
    var TokenTransferFailedError = class _TokenTransferFailedError extends Error {
      constructor() {
        super("Token transfer failed");
        this.code = 6009;
        this.name = "TokenTransferFailed";
        if (typeof Error.captureStackTrace === "function") {
          Error.captureStackTrace(this, _TokenTransferFailedError);
        }
      }
    };
    exports.TokenTransferFailedError = TokenTransferFailedError;
    createErrorFromCodeLookup.set(6009, () => new TokenTransferFailedError());
    createErrorFromNameLookup.set("TokenTransferFailed", () => new TokenTransferFailedError());
    var CandyMachineEmptyError = class _CandyMachineEmptyError extends Error {
      constructor() {
        super("Candy machine is empty!");
        this.code = 6010;
        this.name = "CandyMachineEmpty";
        if (typeof Error.captureStackTrace === "function") {
          Error.captureStackTrace(this, _CandyMachineEmptyError);
        }
      }
    };
    exports.CandyMachineEmptyError = CandyMachineEmptyError;
    createErrorFromCodeLookup.set(6010, () => new CandyMachineEmptyError());
    createErrorFromNameLookup.set("CandyMachineEmpty", () => new CandyMachineEmptyError());
    var CandyMachineNotLiveError = class _CandyMachineNotLiveError extends Error {
      constructor() {
        super("Candy machine is not live!");
        this.code = 6011;
        this.name = "CandyMachineNotLive";
        if (typeof Error.captureStackTrace === "function") {
          Error.captureStackTrace(this, _CandyMachineNotLiveError);
        }
      }
    };
    exports.CandyMachineNotLiveError = CandyMachineNotLiveError;
    createErrorFromCodeLookup.set(6011, () => new CandyMachineNotLiveError());
    createErrorFromNameLookup.set("CandyMachineNotLive", () => new CandyMachineNotLiveError());
    var HiddenSettingsConfigsDoNotHaveConfigLinesError = class _HiddenSettingsConfigsDoNotHaveConfigLinesError extends Error {
      constructor() {
        super("Configs that are using hidden uris do not have config lines, they have a single hash representing hashed order");
        this.code = 6012;
        this.name = "HiddenSettingsConfigsDoNotHaveConfigLines";
        if (typeof Error.captureStackTrace === "function") {
          Error.captureStackTrace(this, _HiddenSettingsConfigsDoNotHaveConfigLinesError);
        }
      }
    };
    exports.HiddenSettingsConfigsDoNotHaveConfigLinesError = HiddenSettingsConfigsDoNotHaveConfigLinesError;
    createErrorFromCodeLookup.set(6012, () => new HiddenSettingsConfigsDoNotHaveConfigLinesError());
    createErrorFromNameLookup.set("HiddenSettingsConfigsDoNotHaveConfigLines", () => new HiddenSettingsConfigsDoNotHaveConfigLinesError());
    var CannotChangeNumberOfLinesError = class _CannotChangeNumberOfLinesError extends Error {
      constructor() {
        super("Cannot change number of lines unless is a hidden config");
        this.code = 6013;
        this.name = "CannotChangeNumberOfLines";
        if (typeof Error.captureStackTrace === "function") {
          Error.captureStackTrace(this, _CannotChangeNumberOfLinesError);
        }
      }
    };
    exports.CannotChangeNumberOfLinesError = CannotChangeNumberOfLinesError;
    createErrorFromCodeLookup.set(6013, () => new CannotChangeNumberOfLinesError());
    createErrorFromNameLookup.set("CannotChangeNumberOfLines", () => new CannotChangeNumberOfLinesError());
    var DerivedKeyInvalidError = class _DerivedKeyInvalidError extends Error {
      constructor() {
        super("Derived key invalid");
        this.code = 6014;
        this.name = "DerivedKeyInvalid";
        if (typeof Error.captureStackTrace === "function") {
          Error.captureStackTrace(this, _DerivedKeyInvalidError);
        }
      }
    };
    exports.DerivedKeyInvalidError = DerivedKeyInvalidError;
    createErrorFromCodeLookup.set(6014, () => new DerivedKeyInvalidError());
    createErrorFromNameLookup.set("DerivedKeyInvalid", () => new DerivedKeyInvalidError());
    var PublicKeyMismatchError = class _PublicKeyMismatchError extends Error {
      constructor() {
        super("Public key mismatch");
        this.code = 6015;
        this.name = "PublicKeyMismatch";
        if (typeof Error.captureStackTrace === "function") {
          Error.captureStackTrace(this, _PublicKeyMismatchError);
        }
      }
    };
    exports.PublicKeyMismatchError = PublicKeyMismatchError;
    createErrorFromCodeLookup.set(6015, () => new PublicKeyMismatchError());
    createErrorFromNameLookup.set("PublicKeyMismatch", () => new PublicKeyMismatchError());
    var NoWhitelistTokenError = class _NoWhitelistTokenError extends Error {
      constructor() {
        super("No whitelist token present");
        this.code = 6016;
        this.name = "NoWhitelistToken";
        if (typeof Error.captureStackTrace === "function") {
          Error.captureStackTrace(this, _NoWhitelistTokenError);
        }
      }
    };
    exports.NoWhitelistTokenError = NoWhitelistTokenError;
    createErrorFromCodeLookup.set(6016, () => new NoWhitelistTokenError());
    createErrorFromNameLookup.set("NoWhitelistToken", () => new NoWhitelistTokenError());
    var TokenBurnFailedError = class _TokenBurnFailedError extends Error {
      constructor() {
        super("Token burn failed");
        this.code = 6017;
        this.name = "TokenBurnFailed";
        if (typeof Error.captureStackTrace === "function") {
          Error.captureStackTrace(this, _TokenBurnFailedError);
        }
      }
    };
    exports.TokenBurnFailedError = TokenBurnFailedError;
    createErrorFromCodeLookup.set(6017, () => new TokenBurnFailedError());
    createErrorFromNameLookup.set("TokenBurnFailed", () => new TokenBurnFailedError());
    var GatewayAppMissingError = class _GatewayAppMissingError extends Error {
      constructor() {
        super("Missing gateway app when required");
        this.code = 6018;
        this.name = "GatewayAppMissing";
        if (typeof Error.captureStackTrace === "function") {
          Error.captureStackTrace(this, _GatewayAppMissingError);
        }
      }
    };
    exports.GatewayAppMissingError = GatewayAppMissingError;
    createErrorFromCodeLookup.set(6018, () => new GatewayAppMissingError());
    createErrorFromNameLookup.set("GatewayAppMissing", () => new GatewayAppMissingError());
    var GatewayTokenMissingError = class _GatewayTokenMissingError extends Error {
      constructor() {
        super("Missing gateway token when required");
        this.code = 6019;
        this.name = "GatewayTokenMissing";
        if (typeof Error.captureStackTrace === "function") {
          Error.captureStackTrace(this, _GatewayTokenMissingError);
        }
      }
    };
    exports.GatewayTokenMissingError = GatewayTokenMissingError;
    createErrorFromCodeLookup.set(6019, () => new GatewayTokenMissingError());
    createErrorFromNameLookup.set("GatewayTokenMissing", () => new GatewayTokenMissingError());
    var GatewayTokenExpireTimeInvalidError = class _GatewayTokenExpireTimeInvalidError extends Error {
      constructor() {
        super("Invalid gateway token expire time");
        this.code = 6020;
        this.name = "GatewayTokenExpireTimeInvalid";
        if (typeof Error.captureStackTrace === "function") {
          Error.captureStackTrace(this, _GatewayTokenExpireTimeInvalidError);
        }
      }
    };
    exports.GatewayTokenExpireTimeInvalidError = GatewayTokenExpireTimeInvalidError;
    createErrorFromCodeLookup.set(6020, () => new GatewayTokenExpireTimeInvalidError());
    createErrorFromNameLookup.set("GatewayTokenExpireTimeInvalid", () => new GatewayTokenExpireTimeInvalidError());
    var NetworkExpireFeatureMissingError = class _NetworkExpireFeatureMissingError extends Error {
      constructor() {
        super("Missing gateway network expire feature when required");
        this.code = 6021;
        this.name = "NetworkExpireFeatureMissing";
        if (typeof Error.captureStackTrace === "function") {
          Error.captureStackTrace(this, _NetworkExpireFeatureMissingError);
        }
      }
    };
    exports.NetworkExpireFeatureMissingError = NetworkExpireFeatureMissingError;
    createErrorFromCodeLookup.set(6021, () => new NetworkExpireFeatureMissingError());
    createErrorFromNameLookup.set("NetworkExpireFeatureMissing", () => new NetworkExpireFeatureMissingError());
    var CannotFindUsableConfigLineError = class _CannotFindUsableConfigLineError extends Error {
      constructor() {
        super("Unable to find an unused config line near your random number index");
        this.code = 6022;
        this.name = "CannotFindUsableConfigLine";
        if (typeof Error.captureStackTrace === "function") {
          Error.captureStackTrace(this, _CannotFindUsableConfigLineError);
        }
      }
    };
    exports.CannotFindUsableConfigLineError = CannotFindUsableConfigLineError;
    createErrorFromCodeLookup.set(6022, () => new CannotFindUsableConfigLineError());
    createErrorFromNameLookup.set("CannotFindUsableConfigLine", () => new CannotFindUsableConfigLineError());
    var InvalidStringError = class _InvalidStringError extends Error {
      constructor() {
        super("Invalid string");
        this.code = 6023;
        this.name = "InvalidString";
        if (typeof Error.captureStackTrace === "function") {
          Error.captureStackTrace(this, _InvalidStringError);
        }
      }
    };
    exports.InvalidStringError = InvalidStringError;
    createErrorFromCodeLookup.set(6023, () => new InvalidStringError());
    createErrorFromNameLookup.set("InvalidString", () => new InvalidStringError());
    var SuspiciousTransactionError = class _SuspiciousTransactionError extends Error {
      constructor() {
        super("Suspicious transaction detected");
        this.code = 6024;
        this.name = "SuspiciousTransaction";
        if (typeof Error.captureStackTrace === "function") {
          Error.captureStackTrace(this, _SuspiciousTransactionError);
        }
      }
    };
    exports.SuspiciousTransactionError = SuspiciousTransactionError;
    createErrorFromCodeLookup.set(6024, () => new SuspiciousTransactionError());
    createErrorFromNameLookup.set("SuspiciousTransaction", () => new SuspiciousTransactionError());
    var CannotSwitchToHiddenSettingsError = class _CannotSwitchToHiddenSettingsError extends Error {
      constructor() {
        super("Cannot Switch to Hidden Settings after items available is greater than 0");
        this.code = 6025;
        this.name = "CannotSwitchToHiddenSettings";
        if (typeof Error.captureStackTrace === "function") {
          Error.captureStackTrace(this, _CannotSwitchToHiddenSettingsError);
        }
      }
    };
    exports.CannotSwitchToHiddenSettingsError = CannotSwitchToHiddenSettingsError;
    createErrorFromCodeLookup.set(6025, () => new CannotSwitchToHiddenSettingsError());
    createErrorFromNameLookup.set("CannotSwitchToHiddenSettings", () => new CannotSwitchToHiddenSettingsError());
    var IncorrectSlotHashesPubkeyError = class _IncorrectSlotHashesPubkeyError extends Error {
      constructor() {
        super("Incorrect SlotHashes PubKey");
        this.code = 6026;
        this.name = "IncorrectSlotHashesPubkey";
        if (typeof Error.captureStackTrace === "function") {
          Error.captureStackTrace(this, _IncorrectSlotHashesPubkeyError);
        }
      }
    };
    exports.IncorrectSlotHashesPubkeyError = IncorrectSlotHashesPubkeyError;
    createErrorFromCodeLookup.set(6026, () => new IncorrectSlotHashesPubkeyError());
    createErrorFromNameLookup.set("IncorrectSlotHashesPubkey", () => new IncorrectSlotHashesPubkeyError());
    var IncorrectCollectionAuthorityError = class _IncorrectCollectionAuthorityError extends Error {
      constructor() {
        super("Incorrect collection NFT authority");
        this.code = 6027;
        this.name = "IncorrectCollectionAuthority";
        if (typeof Error.captureStackTrace === "function") {
          Error.captureStackTrace(this, _IncorrectCollectionAuthorityError);
        }
      }
    };
    exports.IncorrectCollectionAuthorityError = IncorrectCollectionAuthorityError;
    createErrorFromCodeLookup.set(6027, () => new IncorrectCollectionAuthorityError());
    createErrorFromNameLookup.set("IncorrectCollectionAuthority", () => new IncorrectCollectionAuthorityError());
    var MismatchedCollectionPDAError = class _MismatchedCollectionPDAError extends Error {
      constructor() {
        super("Collection PDA address is invalid");
        this.code = 6028;
        this.name = "MismatchedCollectionPDA";
        if (typeof Error.captureStackTrace === "function") {
          Error.captureStackTrace(this, _MismatchedCollectionPDAError);
        }
      }
    };
    exports.MismatchedCollectionPDAError = MismatchedCollectionPDAError;
    createErrorFromCodeLookup.set(6028, () => new MismatchedCollectionPDAError());
    createErrorFromNameLookup.set("MismatchedCollectionPDA", () => new MismatchedCollectionPDAError());
    var MismatchedCollectionMintError = class _MismatchedCollectionMintError extends Error {
      constructor() {
        super("Provided mint account doesn't match collection PDA mint");
        this.code = 6029;
        this.name = "MismatchedCollectionMint";
        if (typeof Error.captureStackTrace === "function") {
          Error.captureStackTrace(this, _MismatchedCollectionMintError);
        }
      }
    };
    exports.MismatchedCollectionMintError = MismatchedCollectionMintError;
    createErrorFromCodeLookup.set(6029, () => new MismatchedCollectionMintError());
    createErrorFromNameLookup.set("MismatchedCollectionMint", () => new MismatchedCollectionMintError());
    var SlotHashesEmptyError = class _SlotHashesEmptyError extends Error {
      constructor() {
        super("Slot hashes Sysvar is empty");
        this.code = 6030;
        this.name = "SlotHashesEmpty";
        if (typeof Error.captureStackTrace === "function") {
          Error.captureStackTrace(this, _SlotHashesEmptyError);
        }
      }
    };
    exports.SlotHashesEmptyError = SlotHashesEmptyError;
    createErrorFromCodeLookup.set(6030, () => new SlotHashesEmptyError());
    createErrorFromNameLookup.set("SlotHashesEmpty", () => new SlotHashesEmptyError());
    var MetadataAccountMustBeEmptyError = class _MetadataAccountMustBeEmptyError extends Error {
      constructor() {
        super("The metadata account has data in it, and this must be empty to mint a new NFT");
        this.code = 6031;
        this.name = "MetadataAccountMustBeEmpty";
        if (typeof Error.captureStackTrace === "function") {
          Error.captureStackTrace(this, _MetadataAccountMustBeEmptyError);
        }
      }
    };
    exports.MetadataAccountMustBeEmptyError = MetadataAccountMustBeEmptyError;
    createErrorFromCodeLookup.set(6031, () => new MetadataAccountMustBeEmptyError());
    createErrorFromNameLookup.set("MetadataAccountMustBeEmpty", () => new MetadataAccountMustBeEmptyError());
    var MissingSetCollectionDuringMintError = class _MissingSetCollectionDuringMintError extends Error {
      constructor() {
        super("Missing set collection during mint IX for Candy Machine with collection set");
        this.code = 6032;
        this.name = "MissingSetCollectionDuringMint";
        if (typeof Error.captureStackTrace === "function") {
          Error.captureStackTrace(this, _MissingSetCollectionDuringMintError);
        }
      }
    };
    exports.MissingSetCollectionDuringMintError = MissingSetCollectionDuringMintError;
    createErrorFromCodeLookup.set(6032, () => new MissingSetCollectionDuringMintError());
    createErrorFromNameLookup.set("MissingSetCollectionDuringMint", () => new MissingSetCollectionDuringMintError());
    var NoChangingCollectionDuringMintError = class _NoChangingCollectionDuringMintError extends Error {
      constructor() {
        super("Can't change collection settings after items have begun to be minted");
        this.code = 6033;
        this.name = "NoChangingCollectionDuringMint";
        if (typeof Error.captureStackTrace === "function") {
          Error.captureStackTrace(this, _NoChangingCollectionDuringMintError);
        }
      }
    };
    exports.NoChangingCollectionDuringMintError = NoChangingCollectionDuringMintError;
    createErrorFromCodeLookup.set(6033, () => new NoChangingCollectionDuringMintError());
    createErrorFromNameLookup.set("NoChangingCollectionDuringMint", () => new NoChangingCollectionDuringMintError());
    var CandyCollectionRequiresRetainAuthorityError = class _CandyCollectionRequiresRetainAuthorityError extends Error {
      constructor() {
        super("Retain authority must be true for Candy Machines with a collection set");
        this.code = 6034;
        this.name = "CandyCollectionRequiresRetainAuthority";
        if (typeof Error.captureStackTrace === "function") {
          Error.captureStackTrace(this, _CandyCollectionRequiresRetainAuthorityError);
        }
      }
    };
    exports.CandyCollectionRequiresRetainAuthorityError = CandyCollectionRequiresRetainAuthorityError;
    createErrorFromCodeLookup.set(6034, () => new CandyCollectionRequiresRetainAuthorityError());
    createErrorFromNameLookup.set("CandyCollectionRequiresRetainAuthority", () => new CandyCollectionRequiresRetainAuthorityError());
    var GatewayProgramErrorError = class _GatewayProgramErrorError extends Error {
      constructor() {
        super("Error within Gateway program");
        this.code = 6035;
        this.name = "GatewayProgramError";
        if (typeof Error.captureStackTrace === "function") {
          Error.captureStackTrace(this, _GatewayProgramErrorError);
        }
      }
    };
    exports.GatewayProgramErrorError = GatewayProgramErrorError;
    createErrorFromCodeLookup.set(6035, () => new GatewayProgramErrorError());
    createErrorFromNameLookup.set("GatewayProgramError", () => new GatewayProgramErrorError());
    var NoChangingFreezeDuringMintError = class _NoChangingFreezeDuringMintError extends Error {
      constructor() {
        super("Can't change freeze settings after items have begun to be minted. You can only disable.");
        this.code = 6036;
        this.name = "NoChangingFreezeDuringMint";
        if (typeof Error.captureStackTrace === "function") {
          Error.captureStackTrace(this, _NoChangingFreezeDuringMintError);
        }
      }
    };
    exports.NoChangingFreezeDuringMintError = NoChangingFreezeDuringMintError;
    createErrorFromCodeLookup.set(6036, () => new NoChangingFreezeDuringMintError());
    createErrorFromNameLookup.set("NoChangingFreezeDuringMint", () => new NoChangingFreezeDuringMintError());
    var NoChangingAuthorityWithCollectionError = class _NoChangingAuthorityWithCollectionError extends Error {
      constructor() {
        super("Can't change authority while collection is enabled. Disable collection first.");
        this.code = 6037;
        this.name = "NoChangingAuthorityWithCollection";
        if (typeof Error.captureStackTrace === "function") {
          Error.captureStackTrace(this, _NoChangingAuthorityWithCollectionError);
        }
      }
    };
    exports.NoChangingAuthorityWithCollectionError = NoChangingAuthorityWithCollectionError;
    createErrorFromCodeLookup.set(6037, () => new NoChangingAuthorityWithCollectionError());
    createErrorFromNameLookup.set("NoChangingAuthorityWithCollection", () => new NoChangingAuthorityWithCollectionError());
    var NoChangingTokenWithFreezeError = class _NoChangingTokenWithFreezeError extends Error {
      constructor() {
        super("Can't change token while freeze is enabled. Disable freeze first.");
        this.code = 6038;
        this.name = "NoChangingTokenWithFreeze";
        if (typeof Error.captureStackTrace === "function") {
          Error.captureStackTrace(this, _NoChangingTokenWithFreezeError);
        }
      }
    };
    exports.NoChangingTokenWithFreezeError = NoChangingTokenWithFreezeError;
    createErrorFromCodeLookup.set(6038, () => new NoChangingTokenWithFreezeError());
    createErrorFromNameLookup.set("NoChangingTokenWithFreeze", () => new NoChangingTokenWithFreezeError());
    var InvalidThawNftError = class _InvalidThawNftError extends Error {
      constructor() {
        super("Cannot thaw NFT unless all NFTs are minted or Candy Machine authority enables thawing");
        this.code = 6039;
        this.name = "InvalidThawNft";
        if (typeof Error.captureStackTrace === "function") {
          Error.captureStackTrace(this, _InvalidThawNftError);
        }
      }
    };
    exports.InvalidThawNftError = InvalidThawNftError;
    createErrorFromCodeLookup.set(6039, () => new InvalidThawNftError());
    createErrorFromNameLookup.set("InvalidThawNft", () => new InvalidThawNftError());
    var IncorrectRemainingAccountsLenError = class _IncorrectRemainingAccountsLenError extends Error {
      constructor() {
        super("The number of remaining accounts passed in doesn't match the Candy Machine settings");
        this.code = 6040;
        this.name = "IncorrectRemainingAccountsLen";
        if (typeof Error.captureStackTrace === "function") {
          Error.captureStackTrace(this, _IncorrectRemainingAccountsLenError);
        }
      }
    };
    exports.IncorrectRemainingAccountsLenError = IncorrectRemainingAccountsLenError;
    createErrorFromCodeLookup.set(6040, () => new IncorrectRemainingAccountsLenError());
    createErrorFromNameLookup.set("IncorrectRemainingAccountsLen", () => new IncorrectRemainingAccountsLenError());
    var MissingFreezeAtaError = class _MissingFreezeAtaError extends Error {
      constructor() {
        super("FreezePDA ATA needs to be passed in if token mint is enabled.");
        this.code = 6041;
        this.name = "MissingFreezeAta";
        if (typeof Error.captureStackTrace === "function") {
          Error.captureStackTrace(this, _MissingFreezeAtaError);
        }
      }
    };
    exports.MissingFreezeAtaError = MissingFreezeAtaError;
    createErrorFromCodeLookup.set(6041, () => new MissingFreezeAtaError());
    createErrorFromNameLookup.set("MissingFreezeAta", () => new MissingFreezeAtaError());
    var IncorrectFreezeAtaError = class _IncorrectFreezeAtaError extends Error {
      constructor() {
        super("Incorrect freeze ATA address.");
        this.code = 6042;
        this.name = "IncorrectFreezeAta";
        if (typeof Error.captureStackTrace === "function") {
          Error.captureStackTrace(this, _IncorrectFreezeAtaError);
        }
      }
    };
    exports.IncorrectFreezeAtaError = IncorrectFreezeAtaError;
    createErrorFromCodeLookup.set(6042, () => new IncorrectFreezeAtaError());
    createErrorFromNameLookup.set("IncorrectFreezeAta", () => new IncorrectFreezeAtaError());
    var FreezePDAMismatchError = class _FreezePDAMismatchError extends Error {
      constructor() {
        super("FreezePDA doesn't belong to this Candy Machine.");
        this.code = 6043;
        this.name = "FreezePDAMismatch";
        if (typeof Error.captureStackTrace === "function") {
          Error.captureStackTrace(this, _FreezePDAMismatchError);
        }
      }
    };
    exports.FreezePDAMismatchError = FreezePDAMismatchError;
    createErrorFromCodeLookup.set(6043, () => new FreezePDAMismatchError());
    createErrorFromNameLookup.set("FreezePDAMismatch", () => new FreezePDAMismatchError());
    var EnteredFreezeIsMoreThanMaxFreezeError = class _EnteredFreezeIsMoreThanMaxFreezeError extends Error {
      constructor() {
        super("Freeze time can't be longer than MAX_FREEZE_TIME.");
        this.code = 6044;
        this.name = "EnteredFreezeIsMoreThanMaxFreeze";
        if (typeof Error.captureStackTrace === "function") {
          Error.captureStackTrace(this, _EnteredFreezeIsMoreThanMaxFreezeError);
        }
      }
    };
    exports.EnteredFreezeIsMoreThanMaxFreezeError = EnteredFreezeIsMoreThanMaxFreezeError;
    createErrorFromCodeLookup.set(6044, () => new EnteredFreezeIsMoreThanMaxFreezeError());
    createErrorFromNameLookup.set("EnteredFreezeIsMoreThanMaxFreeze", () => new EnteredFreezeIsMoreThanMaxFreezeError());
    var NoWithdrawWithFreezeError = class _NoWithdrawWithFreezeError extends Error {
      constructor() {
        super("Can't withdraw Candy Machine while freeze is active. Disable freeze first.");
        this.code = 6045;
        this.name = "NoWithdrawWithFreeze";
        if (typeof Error.captureStackTrace === "function") {
          Error.captureStackTrace(this, _NoWithdrawWithFreezeError);
        }
      }
    };
    exports.NoWithdrawWithFreezeError = NoWithdrawWithFreezeError;
    createErrorFromCodeLookup.set(6045, () => new NoWithdrawWithFreezeError());
    createErrorFromNameLookup.set("NoWithdrawWithFreeze", () => new NoWithdrawWithFreezeError());
    var NoWithdrawWithFrozenFundsError = class _NoWithdrawWithFrozenFundsError extends Error {
      constructor() {
        super("Can't withdraw Candy Machine while frozen funds need to be redeemed. Unlock funds first.");
        this.code = 6046;
        this.name = "NoWithdrawWithFrozenFunds";
        if (typeof Error.captureStackTrace === "function") {
          Error.captureStackTrace(this, _NoWithdrawWithFrozenFundsError);
        }
      }
    };
    exports.NoWithdrawWithFrozenFundsError = NoWithdrawWithFrozenFundsError;
    createErrorFromCodeLookup.set(6046, () => new NoWithdrawWithFrozenFundsError());
    createErrorFromNameLookup.set("NoWithdrawWithFrozenFunds", () => new NoWithdrawWithFrozenFundsError());
    var MissingRemoveFreezeTokenAccountsError = class _MissingRemoveFreezeTokenAccountsError extends Error {
      constructor() {
        super("Missing required remaining accounts for remove_freeze with token mint.");
        this.code = 6047;
        this.name = "MissingRemoveFreezeTokenAccounts";
        if (typeof Error.captureStackTrace === "function") {
          Error.captureStackTrace(this, _MissingRemoveFreezeTokenAccountsError);
        }
      }
    };
    exports.MissingRemoveFreezeTokenAccountsError = MissingRemoveFreezeTokenAccountsError;
    createErrorFromCodeLookup.set(6047, () => new MissingRemoveFreezeTokenAccountsError());
    createErrorFromNameLookup.set("MissingRemoveFreezeTokenAccounts", () => new MissingRemoveFreezeTokenAccountsError());
    var InvalidFreezeWithdrawTokenAddressError = class _InvalidFreezeWithdrawTokenAddressError extends Error {
      constructor() {
        super("Can't withdraw SPL Token from freeze PDA into itself");
        this.code = 6048;
        this.name = "InvalidFreezeWithdrawTokenAddress";
        if (typeof Error.captureStackTrace === "function") {
          Error.captureStackTrace(this, _InvalidFreezeWithdrawTokenAddressError);
        }
      }
    };
    exports.InvalidFreezeWithdrawTokenAddressError = InvalidFreezeWithdrawTokenAddressError;
    createErrorFromCodeLookup.set(6048, () => new InvalidFreezeWithdrawTokenAddressError());
    createErrorFromNameLookup.set("InvalidFreezeWithdrawTokenAddress", () => new InvalidFreezeWithdrawTokenAddressError());
    var NoUnlockWithNFTsStillFrozenError = class _NoUnlockWithNFTsStillFrozenError extends Error {
      constructor() {
        super("Can't unlock funds while NFTs are still frozen. Run thaw on all NFTs first.");
        this.code = 6049;
        this.name = "NoUnlockWithNFTsStillFrozen";
        if (typeof Error.captureStackTrace === "function") {
          Error.captureStackTrace(this, _NoUnlockWithNFTsStillFrozenError);
        }
      }
    };
    exports.NoUnlockWithNFTsStillFrozenError = NoUnlockWithNFTsStillFrozenError;
    createErrorFromCodeLookup.set(6049, () => new NoUnlockWithNFTsStillFrozenError());
    createErrorFromNameLookup.set("NoUnlockWithNFTsStillFrozen", () => new NoUnlockWithNFTsStillFrozenError());
    var SizedCollectionMetadataMustBeMutableError = class _SizedCollectionMetadataMustBeMutableError extends Error {
      constructor() {
        super("Setting a sized collection requires the collection metadata to be mutable.");
        this.code = 6050;
        this.name = "SizedCollectionMetadataMustBeMutable";
        if (typeof Error.captureStackTrace === "function") {
          Error.captureStackTrace(this, _SizedCollectionMetadataMustBeMutableError);
        }
      }
    };
    exports.SizedCollectionMetadataMustBeMutableError = SizedCollectionMetadataMustBeMutableError;
    createErrorFromCodeLookup.set(6050, () => new SizedCollectionMetadataMustBeMutableError());
    createErrorFromNameLookup.set("SizedCollectionMetadataMustBeMutable", () => new SizedCollectionMetadataMustBeMutableError());
    var CannotSwitchFromHiddenSettingsError = class _CannotSwitchFromHiddenSettingsError extends Error {
      constructor() {
        super("Cannot remove Hidden Settings.");
        this.code = 6051;
        this.name = "CannotSwitchFromHiddenSettings";
        if (typeof Error.captureStackTrace === "function") {
          Error.captureStackTrace(this, _CannotSwitchFromHiddenSettingsError);
        }
      }
    };
    exports.CannotSwitchFromHiddenSettingsError = CannotSwitchFromHiddenSettingsError;
    createErrorFromCodeLookup.set(6051, () => new CannotSwitchFromHiddenSettingsError());
    createErrorFromNameLookup.set("CannotSwitchFromHiddenSettings", () => new CannotSwitchFromHiddenSettingsError());
    function errorFromCode(code2) {
      const createError = createErrorFromCodeLookup.get(code2);
      return createError != null ? createError() : null;
    }
    exports.errorFromCode = errorFromCode;
    function errorFromName(name) {
      const createError = createErrorFromNameLookup.get(name);
      return createError != null ? createError() : null;
    }
    exports.errorFromName = errorFromName;
  }
});

// ../../node_modules/@metaplex-foundation/mpl-candy-machine/dist/src/generated/types/ConfigLine.js
var require_ConfigLine = __commonJS({
  "../../node_modules/@metaplex-foundation/mpl-candy-machine/dist/src/generated/types/ConfigLine.js"(exports) {
    "use strict";
    var __createBinding = exports && exports.__createBinding || (Object.create ? function(o2, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      var desc = Object.getOwnPropertyDescriptor(m, k);
      if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m[k];
        } };
      }
      Object.defineProperty(o2, k2, desc);
    } : function(o2, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      o2[k2] = m[k];
    });
    var __setModuleDefault = exports && exports.__setModuleDefault || (Object.create ? function(o2, v) {
      Object.defineProperty(o2, "default", { enumerable: true, value: v });
    } : function(o2, v) {
      o2["default"] = v;
    });
    var __importStar = exports && exports.__importStar || function(mod) {
      if (mod && mod.__esModule)
        return mod;
      var result = {};
      if (mod != null) {
        for (var k in mod)
          if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k))
            __createBinding(result, mod, k);
      }
      __setModuleDefault(result, mod);
      return result;
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.configLineBeet = void 0;
    var beet9 = __importStar(require_beet());
    exports.configLineBeet = new beet9.FixableBeetArgsStruct([
      ["name", beet9.utf8String],
      ["uri", beet9.utf8String]
    ], "ConfigLine");
  }
});

// ../../node_modules/@metaplex-foundation/mpl-candy-machine/dist/src/generated/instructions/addConfigLines.js
var require_addConfigLines = __commonJS({
  "../../node_modules/@metaplex-foundation/mpl-candy-machine/dist/src/generated/instructions/addConfigLines.js"(exports) {
    "use strict";
    var __createBinding = exports && exports.__createBinding || (Object.create ? function(o2, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      var desc = Object.getOwnPropertyDescriptor(m, k);
      if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m[k];
        } };
      }
      Object.defineProperty(o2, k2, desc);
    } : function(o2, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      o2[k2] = m[k];
    });
    var __setModuleDefault = exports && exports.__setModuleDefault || (Object.create ? function(o2, v) {
      Object.defineProperty(o2, "default", { enumerable: true, value: v });
    } : function(o2, v) {
      o2["default"] = v;
    });
    var __importStar = exports && exports.__importStar || function(mod) {
      if (mod && mod.__esModule)
        return mod;
      var result = {};
      if (mod != null) {
        for (var k in mod)
          if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k))
            __createBinding(result, mod, k);
      }
      __setModuleDefault(result, mod);
      return result;
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.createAddConfigLinesInstruction = exports.addConfigLinesInstructionDiscriminator = exports.addConfigLinesStruct = void 0;
    var beet9 = __importStar(require_beet());
    var web3 = __importStar((init_index_browser_esm(), __toCommonJS(index_browser_esm_exports)));
    var ConfigLine_1 = require_ConfigLine();
    exports.addConfigLinesStruct = new beet9.FixableBeetArgsStruct([
      ["instructionDiscriminator", beet9.uniformFixedSizeArray(beet9.u8, 8)],
      ["index", beet9.u32],
      ["configLines", beet9.array(ConfigLine_1.configLineBeet)]
    ], "AddConfigLinesInstructionArgs");
    exports.addConfigLinesInstructionDiscriminator = [223, 50, 224, 227, 151, 8, 115, 106];
    function createAddConfigLinesInstruction3(accounts, args, programId = new web3.PublicKey("cndy3Z4yapfJBmL3ShUp5exZKqR3z33thTzeNMm2gRZ")) {
      const [data] = exports.addConfigLinesStruct.serialize(__spreadValues({
        instructionDiscriminator: exports.addConfigLinesInstructionDiscriminator
      }, args));
      const keys = [
        {
          pubkey: accounts.candyMachine,
          isWritable: true,
          isSigner: false
        },
        {
          pubkey: accounts.authority,
          isWritable: false,
          isSigner: true
        }
      ];
      if (accounts.anchorRemainingAccounts != null) {
        for (const acc of accounts.anchorRemainingAccounts) {
          keys.push(acc);
        }
      }
      const ix = new web3.TransactionInstruction({
        programId,
        keys,
        data
      });
      return ix;
    }
    exports.createAddConfigLinesInstruction = createAddConfigLinesInstruction3;
  }
});

// ../../node_modules/@metaplex-foundation/mpl-candy-machine/dist/src/generated/instructions/initializeCandyMachine.js
var require_initializeCandyMachine = __commonJS({
  "../../node_modules/@metaplex-foundation/mpl-candy-machine/dist/src/generated/instructions/initializeCandyMachine.js"(exports) {
    "use strict";
    var __createBinding = exports && exports.__createBinding || (Object.create ? function(o2, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      var desc = Object.getOwnPropertyDescriptor(m, k);
      if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m[k];
        } };
      }
      Object.defineProperty(o2, k2, desc);
    } : function(o2, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      o2[k2] = m[k];
    });
    var __setModuleDefault = exports && exports.__setModuleDefault || (Object.create ? function(o2, v) {
      Object.defineProperty(o2, "default", { enumerable: true, value: v });
    } : function(o2, v) {
      o2["default"] = v;
    });
    var __importStar = exports && exports.__importStar || function(mod) {
      if (mod && mod.__esModule)
        return mod;
      var result = {};
      if (mod != null) {
        for (var k in mod)
          if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k))
            __createBinding(result, mod, k);
      }
      __setModuleDefault(result, mod);
      return result;
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.createInitializeCandyMachineInstruction = exports.initializeCandyMachineInstructionDiscriminator = exports.initializeCandyMachineStruct = void 0;
    var beet9 = __importStar(require_beet());
    var web3 = __importStar((init_index_browser_esm(), __toCommonJS(index_browser_esm_exports)));
    var CandyMachineData_1 = require_CandyMachineData();
    exports.initializeCandyMachineStruct = new beet9.FixableBeetArgsStruct([
      ["instructionDiscriminator", beet9.uniformFixedSizeArray(beet9.u8, 8)],
      ["data", CandyMachineData_1.candyMachineDataBeet]
    ], "InitializeCandyMachineInstructionArgs");
    exports.initializeCandyMachineInstructionDiscriminator = [
      142,
      137,
      167,
      107,
      47,
      39,
      240,
      124
    ];
    function createInitializeCandyMachineInstruction2(accounts, args, programId = new web3.PublicKey("cndy3Z4yapfJBmL3ShUp5exZKqR3z33thTzeNMm2gRZ")) {
      var _a, _b;
      const [data] = exports.initializeCandyMachineStruct.serialize(__spreadValues({
        instructionDiscriminator: exports.initializeCandyMachineInstructionDiscriminator
      }, args));
      const keys = [
        {
          pubkey: accounts.candyMachine,
          isWritable: true,
          isSigner: false
        },
        {
          pubkey: accounts.wallet,
          isWritable: false,
          isSigner: false
        },
        {
          pubkey: accounts.authority,
          isWritable: false,
          isSigner: false
        },
        {
          pubkey: accounts.payer,
          isWritable: false,
          isSigner: true
        },
        {
          pubkey: (_a = accounts.systemProgram) !== null && _a !== void 0 ? _a : web3.SystemProgram.programId,
          isWritable: false,
          isSigner: false
        },
        {
          pubkey: (_b = accounts.rent) !== null && _b !== void 0 ? _b : web3.SYSVAR_RENT_PUBKEY,
          isWritable: false,
          isSigner: false
        }
      ];
      if (accounts.anchorRemainingAccounts != null) {
        for (const acc of accounts.anchorRemainingAccounts) {
          keys.push(acc);
        }
      }
      const ix = new web3.TransactionInstruction({
        programId,
        keys,
        data
      });
      return ix;
    }
    exports.createInitializeCandyMachineInstruction = createInitializeCandyMachineInstruction2;
  }
});

// ../../node_modules/@metaplex-foundation/mpl-candy-machine/dist/src/generated/instructions/mintNft.js
var require_mintNft = __commonJS({
  "../../node_modules/@metaplex-foundation/mpl-candy-machine/dist/src/generated/instructions/mintNft.js"(exports) {
    "use strict";
    var __createBinding = exports && exports.__createBinding || (Object.create ? function(o2, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      var desc = Object.getOwnPropertyDescriptor(m, k);
      if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m[k];
        } };
      }
      Object.defineProperty(o2, k2, desc);
    } : function(o2, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      o2[k2] = m[k];
    });
    var __setModuleDefault = exports && exports.__setModuleDefault || (Object.create ? function(o2, v) {
      Object.defineProperty(o2, "default", { enumerable: true, value: v });
    } : function(o2, v) {
      o2["default"] = v;
    });
    var __importStar = exports && exports.__importStar || function(mod) {
      if (mod && mod.__esModule)
        return mod;
      var result = {};
      if (mod != null) {
        for (var k in mod)
          if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k))
            __createBinding(result, mod, k);
      }
      __setModuleDefault(result, mod);
      return result;
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.createMintNftInstruction = exports.mintNftInstructionDiscriminator = exports.mintNftStruct = void 0;
    var splToken = __importStar(require_cjs4());
    var beet9 = __importStar(require_beet());
    var web3 = __importStar((init_index_browser_esm(), __toCommonJS(index_browser_esm_exports)));
    exports.mintNftStruct = new beet9.BeetArgsStruct([
      ["instructionDiscriminator", beet9.uniformFixedSizeArray(beet9.u8, 8)],
      ["creatorBump", beet9.u8]
    ], "MintNftInstructionArgs");
    exports.mintNftInstructionDiscriminator = [211, 57, 6, 167, 15, 219, 35, 251];
    function createMintNftInstruction2(accounts, args, programId = new web3.PublicKey("cndy3Z4yapfJBmL3ShUp5exZKqR3z33thTzeNMm2gRZ")) {
      var _a, _b, _c;
      const [data] = exports.mintNftStruct.serialize(__spreadValues({
        instructionDiscriminator: exports.mintNftInstructionDiscriminator
      }, args));
      const keys = [
        {
          pubkey: accounts.candyMachine,
          isWritable: true,
          isSigner: false
        },
        {
          pubkey: accounts.candyMachineCreator,
          isWritable: false,
          isSigner: false
        },
        {
          pubkey: accounts.payer,
          isWritable: false,
          isSigner: true
        },
        {
          pubkey: accounts.wallet,
          isWritable: true,
          isSigner: false
        },
        {
          pubkey: accounts.metadata,
          isWritable: true,
          isSigner: false
        },
        {
          pubkey: accounts.mint,
          isWritable: true,
          isSigner: false
        },
        {
          pubkey: accounts.mintAuthority,
          isWritable: false,
          isSigner: true
        },
        {
          pubkey: accounts.updateAuthority,
          isWritable: false,
          isSigner: true
        },
        {
          pubkey: accounts.masterEdition,
          isWritable: true,
          isSigner: false
        },
        {
          pubkey: accounts.tokenMetadataProgram,
          isWritable: false,
          isSigner: false
        },
        {
          pubkey: (_a = accounts.tokenProgram) !== null && _a !== void 0 ? _a : splToken.TOKEN_PROGRAM_ID,
          isWritable: false,
          isSigner: false
        },
        {
          pubkey: (_b = accounts.systemProgram) !== null && _b !== void 0 ? _b : web3.SystemProgram.programId,
          isWritable: false,
          isSigner: false
        },
        {
          pubkey: (_c = accounts.rent) !== null && _c !== void 0 ? _c : web3.SYSVAR_RENT_PUBKEY,
          isWritable: false,
          isSigner: false
        },
        {
          pubkey: accounts.clock,
          isWritable: false,
          isSigner: false
        },
        {
          pubkey: accounts.recentBlockhashes,
          isWritable: false,
          isSigner: false
        },
        {
          pubkey: accounts.instructionSysvarAccount,
          isWritable: false,
          isSigner: false
        }
      ];
      if (accounts.anchorRemainingAccounts != null) {
        for (const acc of accounts.anchorRemainingAccounts) {
          keys.push(acc);
        }
      }
      const ix = new web3.TransactionInstruction({
        programId,
        keys,
        data
      });
      return ix;
    }
    exports.createMintNftInstruction = createMintNftInstruction2;
  }
});

// ../../node_modules/@metaplex-foundation/mpl-candy-machine/dist/src/generated/instructions/removeCollection.js
var require_removeCollection = __commonJS({
  "../../node_modules/@metaplex-foundation/mpl-candy-machine/dist/src/generated/instructions/removeCollection.js"(exports) {
    "use strict";
    var __createBinding = exports && exports.__createBinding || (Object.create ? function(o2, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      var desc = Object.getOwnPropertyDescriptor(m, k);
      if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m[k];
        } };
      }
      Object.defineProperty(o2, k2, desc);
    } : function(o2, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      o2[k2] = m[k];
    });
    var __setModuleDefault = exports && exports.__setModuleDefault || (Object.create ? function(o2, v) {
      Object.defineProperty(o2, "default", { enumerable: true, value: v });
    } : function(o2, v) {
      o2["default"] = v;
    });
    var __importStar = exports && exports.__importStar || function(mod) {
      if (mod && mod.__esModule)
        return mod;
      var result = {};
      if (mod != null) {
        for (var k in mod)
          if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k))
            __createBinding(result, mod, k);
      }
      __setModuleDefault(result, mod);
      return result;
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.createRemoveCollectionInstruction = exports.removeCollectionInstructionDiscriminator = exports.removeCollectionStruct = void 0;
    var beet9 = __importStar(require_beet());
    var web3 = __importStar((init_index_browser_esm(), __toCommonJS(index_browser_esm_exports)));
    exports.removeCollectionStruct = new beet9.BeetArgsStruct([["instructionDiscriminator", beet9.uniformFixedSizeArray(beet9.u8, 8)]], "RemoveCollectionInstructionArgs");
    exports.removeCollectionInstructionDiscriminator = [223, 52, 106, 217, 61, 220, 36, 160];
    function createRemoveCollectionInstruction2(accounts, programId = new web3.PublicKey("cndy3Z4yapfJBmL3ShUp5exZKqR3z33thTzeNMm2gRZ")) {
      const [data] = exports.removeCollectionStruct.serialize({
        instructionDiscriminator: exports.removeCollectionInstructionDiscriminator
      });
      const keys = [
        {
          pubkey: accounts.candyMachine,
          isWritable: true,
          isSigner: false
        },
        {
          pubkey: accounts.authority,
          isWritable: false,
          isSigner: true
        },
        {
          pubkey: accounts.collectionPda,
          isWritable: true,
          isSigner: false
        },
        {
          pubkey: accounts.metadata,
          isWritable: false,
          isSigner: false
        },
        {
          pubkey: accounts.mint,
          isWritable: false,
          isSigner: false
        },
        {
          pubkey: accounts.collectionAuthorityRecord,
          isWritable: true,
          isSigner: false
        },
        {
          pubkey: accounts.tokenMetadataProgram,
          isWritable: false,
          isSigner: false
        }
      ];
      if (accounts.anchorRemainingAccounts != null) {
        for (const acc of accounts.anchorRemainingAccounts) {
          keys.push(acc);
        }
      }
      const ix = new web3.TransactionInstruction({
        programId,
        keys,
        data
      });
      return ix;
    }
    exports.createRemoveCollectionInstruction = createRemoveCollectionInstruction2;
  }
});

// ../../node_modules/@metaplex-foundation/mpl-candy-machine/dist/src/generated/instructions/removeFreeze.js
var require_removeFreeze = __commonJS({
  "../../node_modules/@metaplex-foundation/mpl-candy-machine/dist/src/generated/instructions/removeFreeze.js"(exports) {
    "use strict";
    var __createBinding = exports && exports.__createBinding || (Object.create ? function(o2, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      var desc = Object.getOwnPropertyDescriptor(m, k);
      if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m[k];
        } };
      }
      Object.defineProperty(o2, k2, desc);
    } : function(o2, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      o2[k2] = m[k];
    });
    var __setModuleDefault = exports && exports.__setModuleDefault || (Object.create ? function(o2, v) {
      Object.defineProperty(o2, "default", { enumerable: true, value: v });
    } : function(o2, v) {
      o2["default"] = v;
    });
    var __importStar = exports && exports.__importStar || function(mod) {
      if (mod && mod.__esModule)
        return mod;
      var result = {};
      if (mod != null) {
        for (var k in mod)
          if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k))
            __createBinding(result, mod, k);
      }
      __setModuleDefault(result, mod);
      return result;
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.createRemoveFreezeInstruction = exports.removeFreezeInstructionDiscriminator = exports.removeFreezeStruct = void 0;
    var beet9 = __importStar(require_beet());
    var web3 = __importStar((init_index_browser_esm(), __toCommonJS(index_browser_esm_exports)));
    exports.removeFreezeStruct = new beet9.BeetArgsStruct([["instructionDiscriminator", beet9.uniformFixedSizeArray(beet9.u8, 8)]], "RemoveFreezeInstructionArgs");
    exports.removeFreezeInstructionDiscriminator = [1, 212, 80, 168, 129, 60, 46, 251];
    function createRemoveFreezeInstruction(accounts, programId = new web3.PublicKey("cndy3Z4yapfJBmL3ShUp5exZKqR3z33thTzeNMm2gRZ")) {
      const [data] = exports.removeFreezeStruct.serialize({
        instructionDiscriminator: exports.removeFreezeInstructionDiscriminator
      });
      const keys = [
        {
          pubkey: accounts.candyMachine,
          isWritable: true,
          isSigner: false
        },
        {
          pubkey: accounts.authority,
          isWritable: true,
          isSigner: true
        },
        {
          pubkey: accounts.freezePda,
          isWritable: true,
          isSigner: false
        }
      ];
      if (accounts.anchorRemainingAccounts != null) {
        for (const acc of accounts.anchorRemainingAccounts) {
          keys.push(acc);
        }
      }
      const ix = new web3.TransactionInstruction({
        programId,
        keys,
        data
      });
      return ix;
    }
    exports.createRemoveFreezeInstruction = createRemoveFreezeInstruction;
  }
});

// ../../node_modules/@metaplex-foundation/mpl-candy-machine/dist/src/generated/instructions/setCollection.js
var require_setCollection = __commonJS({
  "../../node_modules/@metaplex-foundation/mpl-candy-machine/dist/src/generated/instructions/setCollection.js"(exports) {
    "use strict";
    var __createBinding = exports && exports.__createBinding || (Object.create ? function(o2, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      var desc = Object.getOwnPropertyDescriptor(m, k);
      if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m[k];
        } };
      }
      Object.defineProperty(o2, k2, desc);
    } : function(o2, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      o2[k2] = m[k];
    });
    var __setModuleDefault = exports && exports.__setModuleDefault || (Object.create ? function(o2, v) {
      Object.defineProperty(o2, "default", { enumerable: true, value: v });
    } : function(o2, v) {
      o2["default"] = v;
    });
    var __importStar = exports && exports.__importStar || function(mod) {
      if (mod && mod.__esModule)
        return mod;
      var result = {};
      if (mod != null) {
        for (var k in mod)
          if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k))
            __createBinding(result, mod, k);
      }
      __setModuleDefault(result, mod);
      return result;
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.createSetCollectionInstruction = exports.setCollectionInstructionDiscriminator = exports.setCollectionStruct = void 0;
    var beet9 = __importStar(require_beet());
    var web3 = __importStar((init_index_browser_esm(), __toCommonJS(index_browser_esm_exports)));
    exports.setCollectionStruct = new beet9.BeetArgsStruct([["instructionDiscriminator", beet9.uniformFixedSizeArray(beet9.u8, 8)]], "SetCollectionInstructionArgs");
    exports.setCollectionInstructionDiscriminator = [192, 254, 206, 76, 168, 182, 59, 223];
    function createSetCollectionInstruction4(accounts, programId = new web3.PublicKey("cndy3Z4yapfJBmL3ShUp5exZKqR3z33thTzeNMm2gRZ")) {
      var _a, _b;
      const [data] = exports.setCollectionStruct.serialize({
        instructionDiscriminator: exports.setCollectionInstructionDiscriminator
      });
      const keys = [
        {
          pubkey: accounts.candyMachine,
          isWritable: true,
          isSigner: false
        },
        {
          pubkey: accounts.authority,
          isWritable: false,
          isSigner: true
        },
        {
          pubkey: accounts.collectionPda,
          isWritable: true,
          isSigner: false
        },
        {
          pubkey: accounts.payer,
          isWritable: false,
          isSigner: true
        },
        {
          pubkey: (_a = accounts.systemProgram) !== null && _a !== void 0 ? _a : web3.SystemProgram.programId,
          isWritable: false,
          isSigner: false
        },
        {
          pubkey: (_b = accounts.rent) !== null && _b !== void 0 ? _b : web3.SYSVAR_RENT_PUBKEY,
          isWritable: false,
          isSigner: false
        },
        {
          pubkey: accounts.metadata,
          isWritable: false,
          isSigner: false
        },
        {
          pubkey: accounts.mint,
          isWritable: false,
          isSigner: false
        },
        {
          pubkey: accounts.edition,
          isWritable: false,
          isSigner: false
        },
        {
          pubkey: accounts.collectionAuthorityRecord,
          isWritable: true,
          isSigner: false
        },
        {
          pubkey: accounts.tokenMetadataProgram,
          isWritable: false,
          isSigner: false
        }
      ];
      if (accounts.anchorRemainingAccounts != null) {
        for (const acc of accounts.anchorRemainingAccounts) {
          keys.push(acc);
        }
      }
      const ix = new web3.TransactionInstruction({
        programId,
        keys,
        data
      });
      return ix;
    }
    exports.createSetCollectionInstruction = createSetCollectionInstruction4;
  }
});

// ../../node_modules/@metaplex-foundation/mpl-candy-machine/dist/src/generated/instructions/setCollectionDuringMint.js
var require_setCollectionDuringMint = __commonJS({
  "../../node_modules/@metaplex-foundation/mpl-candy-machine/dist/src/generated/instructions/setCollectionDuringMint.js"(exports) {
    "use strict";
    var __createBinding = exports && exports.__createBinding || (Object.create ? function(o2, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      var desc = Object.getOwnPropertyDescriptor(m, k);
      if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m[k];
        } };
      }
      Object.defineProperty(o2, k2, desc);
    } : function(o2, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      o2[k2] = m[k];
    });
    var __setModuleDefault = exports && exports.__setModuleDefault || (Object.create ? function(o2, v) {
      Object.defineProperty(o2, "default", { enumerable: true, value: v });
    } : function(o2, v) {
      o2["default"] = v;
    });
    var __importStar = exports && exports.__importStar || function(mod) {
      if (mod && mod.__esModule)
        return mod;
      var result = {};
      if (mod != null) {
        for (var k in mod)
          if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k))
            __createBinding(result, mod, k);
      }
      __setModuleDefault(result, mod);
      return result;
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.createSetCollectionDuringMintInstruction = exports.setCollectionDuringMintInstructionDiscriminator = exports.setCollectionDuringMintStruct = void 0;
    var beet9 = __importStar(require_beet());
    var web3 = __importStar((init_index_browser_esm(), __toCommonJS(index_browser_esm_exports)));
    exports.setCollectionDuringMintStruct = new beet9.BeetArgsStruct([["instructionDiscriminator", beet9.uniformFixedSizeArray(beet9.u8, 8)]], "SetCollectionDuringMintInstructionArgs");
    exports.setCollectionDuringMintInstructionDiscriminator = [103, 17, 200, 25, 118, 95, 125, 61];
    function createSetCollectionDuringMintInstruction2(accounts, programId = new web3.PublicKey("cndy3Z4yapfJBmL3ShUp5exZKqR3z33thTzeNMm2gRZ")) {
      const [data] = exports.setCollectionDuringMintStruct.serialize({
        instructionDiscriminator: exports.setCollectionDuringMintInstructionDiscriminator
      });
      const keys = [
        {
          pubkey: accounts.candyMachine,
          isWritable: false,
          isSigner: false
        },
        {
          pubkey: accounts.metadata,
          isWritable: false,
          isSigner: false
        },
        {
          pubkey: accounts.payer,
          isWritable: false,
          isSigner: true
        },
        {
          pubkey: accounts.collectionPda,
          isWritable: true,
          isSigner: false
        },
        {
          pubkey: accounts.tokenMetadataProgram,
          isWritable: false,
          isSigner: false
        },
        {
          pubkey: accounts.instructions,
          isWritable: false,
          isSigner: false
        },
        {
          pubkey: accounts.collectionMint,
          isWritable: false,
          isSigner: false
        },
        {
          pubkey: accounts.collectionMetadata,
          isWritable: true,
          isSigner: false
        },
        {
          pubkey: accounts.collectionMasterEdition,
          isWritable: false,
          isSigner: false
        },
        {
          pubkey: accounts.authority,
          isWritable: false,
          isSigner: false
        },
        {
          pubkey: accounts.collectionAuthorityRecord,
          isWritable: false,
          isSigner: false
        }
      ];
      if (accounts.anchorRemainingAccounts != null) {
        for (const acc of accounts.anchorRemainingAccounts) {
          keys.push(acc);
        }
      }
      const ix = new web3.TransactionInstruction({
        programId,
        keys,
        data
      });
      return ix;
    }
    exports.createSetCollectionDuringMintInstruction = createSetCollectionDuringMintInstruction2;
  }
});

// ../../node_modules/@metaplex-foundation/mpl-candy-machine/dist/src/generated/instructions/setFreeze.js
var require_setFreeze = __commonJS({
  "../../node_modules/@metaplex-foundation/mpl-candy-machine/dist/src/generated/instructions/setFreeze.js"(exports) {
    "use strict";
    var __createBinding = exports && exports.__createBinding || (Object.create ? function(o2, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      var desc = Object.getOwnPropertyDescriptor(m, k);
      if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m[k];
        } };
      }
      Object.defineProperty(o2, k2, desc);
    } : function(o2, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      o2[k2] = m[k];
    });
    var __setModuleDefault = exports && exports.__setModuleDefault || (Object.create ? function(o2, v) {
      Object.defineProperty(o2, "default", { enumerable: true, value: v });
    } : function(o2, v) {
      o2["default"] = v;
    });
    var __importStar = exports && exports.__importStar || function(mod) {
      if (mod && mod.__esModule)
        return mod;
      var result = {};
      if (mod != null) {
        for (var k in mod)
          if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k))
            __createBinding(result, mod, k);
      }
      __setModuleDefault(result, mod);
      return result;
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.createSetFreezeInstruction = exports.setFreezeInstructionDiscriminator = exports.setFreezeStruct = void 0;
    var beet9 = __importStar(require_beet());
    var web3 = __importStar((init_index_browser_esm(), __toCommonJS(index_browser_esm_exports)));
    exports.setFreezeStruct = new beet9.BeetArgsStruct([
      ["instructionDiscriminator", beet9.uniformFixedSizeArray(beet9.u8, 8)],
      ["freezeTime", beet9.i64]
    ], "SetFreezeInstructionArgs");
    exports.setFreezeInstructionDiscriminator = [202, 80, 109, 208, 130, 144, 26, 233];
    function createSetFreezeInstruction(accounts, args, programId = new web3.PublicKey("cndy3Z4yapfJBmL3ShUp5exZKqR3z33thTzeNMm2gRZ")) {
      var _a;
      const [data] = exports.setFreezeStruct.serialize(__spreadValues({
        instructionDiscriminator: exports.setFreezeInstructionDiscriminator
      }, args));
      const keys = [
        {
          pubkey: accounts.candyMachine,
          isWritable: true,
          isSigner: false
        },
        {
          pubkey: accounts.authority,
          isWritable: true,
          isSigner: true
        },
        {
          pubkey: accounts.freezePda,
          isWritable: true,
          isSigner: false
        },
        {
          pubkey: (_a = accounts.systemProgram) !== null && _a !== void 0 ? _a : web3.SystemProgram.programId,
          isWritable: false,
          isSigner: false
        }
      ];
      if (accounts.anchorRemainingAccounts != null) {
        for (const acc of accounts.anchorRemainingAccounts) {
          keys.push(acc);
        }
      }
      const ix = new web3.TransactionInstruction({
        programId,
        keys,
        data
      });
      return ix;
    }
    exports.createSetFreezeInstruction = createSetFreezeInstruction;
  }
});

// ../../node_modules/@metaplex-foundation/mpl-candy-machine/dist/src/generated/instructions/thawNft.js
var require_thawNft = __commonJS({
  "../../node_modules/@metaplex-foundation/mpl-candy-machine/dist/src/generated/instructions/thawNft.js"(exports) {
    "use strict";
    var __createBinding = exports && exports.__createBinding || (Object.create ? function(o2, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      var desc = Object.getOwnPropertyDescriptor(m, k);
      if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m[k];
        } };
      }
      Object.defineProperty(o2, k2, desc);
    } : function(o2, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      o2[k2] = m[k];
    });
    var __setModuleDefault = exports && exports.__setModuleDefault || (Object.create ? function(o2, v) {
      Object.defineProperty(o2, "default", { enumerable: true, value: v });
    } : function(o2, v) {
      o2["default"] = v;
    });
    var __importStar = exports && exports.__importStar || function(mod) {
      if (mod && mod.__esModule)
        return mod;
      var result = {};
      if (mod != null) {
        for (var k in mod)
          if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k))
            __createBinding(result, mod, k);
      }
      __setModuleDefault(result, mod);
      return result;
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.createThawNftInstruction = exports.thawNftInstructionDiscriminator = exports.thawNftStruct = void 0;
    var splToken = __importStar(require_cjs4());
    var beet9 = __importStar(require_beet());
    var web3 = __importStar((init_index_browser_esm(), __toCommonJS(index_browser_esm_exports)));
    exports.thawNftStruct = new beet9.BeetArgsStruct([["instructionDiscriminator", beet9.uniformFixedSizeArray(beet9.u8, 8)]], "ThawNftInstructionArgs");
    exports.thawNftInstructionDiscriminator = [92, 44, 210, 187, 172, 6, 64, 183];
    function createThawNftInstruction(accounts, programId = new web3.PublicKey("cndy3Z4yapfJBmL3ShUp5exZKqR3z33thTzeNMm2gRZ")) {
      var _a, _b;
      const [data] = exports.thawNftStruct.serialize({
        instructionDiscriminator: exports.thawNftInstructionDiscriminator
      });
      const keys = [
        {
          pubkey: accounts.freezePda,
          isWritable: true,
          isSigner: false
        },
        {
          pubkey: accounts.candyMachine,
          isWritable: true,
          isSigner: false
        },
        {
          pubkey: accounts.tokenAccount,
          isWritable: true,
          isSigner: false
        },
        {
          pubkey: accounts.owner,
          isWritable: false,
          isSigner: false
        },
        {
          pubkey: accounts.mint,
          isWritable: false,
          isSigner: false
        },
        {
          pubkey: accounts.edition,
          isWritable: false,
          isSigner: false
        },
        {
          pubkey: accounts.payer,
          isWritable: true,
          isSigner: true
        },
        {
          pubkey: (_a = accounts.tokenProgram) !== null && _a !== void 0 ? _a : splToken.TOKEN_PROGRAM_ID,
          isWritable: false,
          isSigner: false
        },
        {
          pubkey: accounts.tokenMetadataProgram,
          isWritable: false,
          isSigner: false
        },
        {
          pubkey: (_b = accounts.systemProgram) !== null && _b !== void 0 ? _b : web3.SystemProgram.programId,
          isWritable: false,
          isSigner: false
        }
      ];
      if (accounts.anchorRemainingAccounts != null) {
        for (const acc of accounts.anchorRemainingAccounts) {
          keys.push(acc);
        }
      }
      const ix = new web3.TransactionInstruction({
        programId,
        keys,
        data
      });
      return ix;
    }
    exports.createThawNftInstruction = createThawNftInstruction;
  }
});

// ../../node_modules/@metaplex-foundation/mpl-candy-machine/dist/src/generated/instructions/unlockFunds.js
var require_unlockFunds = __commonJS({
  "../../node_modules/@metaplex-foundation/mpl-candy-machine/dist/src/generated/instructions/unlockFunds.js"(exports) {
    "use strict";
    var __createBinding = exports && exports.__createBinding || (Object.create ? function(o2, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      var desc = Object.getOwnPropertyDescriptor(m, k);
      if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m[k];
        } };
      }
      Object.defineProperty(o2, k2, desc);
    } : function(o2, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      o2[k2] = m[k];
    });
    var __setModuleDefault = exports && exports.__setModuleDefault || (Object.create ? function(o2, v) {
      Object.defineProperty(o2, "default", { enumerable: true, value: v });
    } : function(o2, v) {
      o2["default"] = v;
    });
    var __importStar = exports && exports.__importStar || function(mod) {
      if (mod && mod.__esModule)
        return mod;
      var result = {};
      if (mod != null) {
        for (var k in mod)
          if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k))
            __createBinding(result, mod, k);
      }
      __setModuleDefault(result, mod);
      return result;
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.createUnlockFundsInstruction = exports.unlockFundsInstructionDiscriminator = exports.unlockFundsStruct = void 0;
    var beet9 = __importStar(require_beet());
    var web3 = __importStar((init_index_browser_esm(), __toCommonJS(index_browser_esm_exports)));
    exports.unlockFundsStruct = new beet9.BeetArgsStruct([["instructionDiscriminator", beet9.uniformFixedSizeArray(beet9.u8, 8)]], "UnlockFundsInstructionArgs");
    exports.unlockFundsInstructionDiscriminator = [175, 119, 16, 245, 141, 55, 255, 43];
    function createUnlockFundsInstruction(accounts, programId = new web3.PublicKey("cndy3Z4yapfJBmL3ShUp5exZKqR3z33thTzeNMm2gRZ")) {
      var _a;
      const [data] = exports.unlockFundsStruct.serialize({
        instructionDiscriminator: exports.unlockFundsInstructionDiscriminator
      });
      const keys = [
        {
          pubkey: accounts.candyMachine,
          isWritable: true,
          isSigner: false
        },
        {
          pubkey: accounts.wallet,
          isWritable: true,
          isSigner: false
        },
        {
          pubkey: accounts.authority,
          isWritable: true,
          isSigner: true
        },
        {
          pubkey: accounts.freezePda,
          isWritable: true,
          isSigner: false
        },
        {
          pubkey: (_a = accounts.systemProgram) !== null && _a !== void 0 ? _a : web3.SystemProgram.programId,
          isWritable: false,
          isSigner: false
        }
      ];
      if (accounts.anchorRemainingAccounts != null) {
        for (const acc of accounts.anchorRemainingAccounts) {
          keys.push(acc);
        }
      }
      const ix = new web3.TransactionInstruction({
        programId,
        keys,
        data
      });
      return ix;
    }
    exports.createUnlockFundsInstruction = createUnlockFundsInstruction;
  }
});

// ../../node_modules/@metaplex-foundation/mpl-candy-machine/dist/src/generated/instructions/updateAuthority.js
var require_updateAuthority = __commonJS({
  "../../node_modules/@metaplex-foundation/mpl-candy-machine/dist/src/generated/instructions/updateAuthority.js"(exports) {
    "use strict";
    var __createBinding = exports && exports.__createBinding || (Object.create ? function(o2, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      var desc = Object.getOwnPropertyDescriptor(m, k);
      if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m[k];
        } };
      }
      Object.defineProperty(o2, k2, desc);
    } : function(o2, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      o2[k2] = m[k];
    });
    var __setModuleDefault = exports && exports.__setModuleDefault || (Object.create ? function(o2, v) {
      Object.defineProperty(o2, "default", { enumerable: true, value: v });
    } : function(o2, v) {
      o2["default"] = v;
    });
    var __importStar = exports && exports.__importStar || function(mod) {
      if (mod && mod.__esModule)
        return mod;
      var result = {};
      if (mod != null) {
        for (var k in mod)
          if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k))
            __createBinding(result, mod, k);
      }
      __setModuleDefault(result, mod);
      return result;
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.createUpdateAuthorityInstruction = exports.updateAuthorityInstructionDiscriminator = exports.updateAuthorityStruct = void 0;
    var web3 = __importStar((init_index_browser_esm(), __toCommonJS(index_browser_esm_exports)));
    var beet9 = __importStar(require_beet());
    var beetSolana = __importStar(require_beet_solana4());
    exports.updateAuthorityStruct = new beet9.FixableBeetArgsStruct([
      ["instructionDiscriminator", beet9.uniformFixedSizeArray(beet9.u8, 8)],
      ["newAuthority", beet9.coption(beetSolana.publicKey)]
    ], "UpdateAuthorityInstructionArgs");
    exports.updateAuthorityInstructionDiscriminator = [32, 46, 64, 28, 149, 75, 243, 88];
    function createUpdateAuthorityInstruction3(accounts, args, programId = new web3.PublicKey("cndy3Z4yapfJBmL3ShUp5exZKqR3z33thTzeNMm2gRZ")) {
      const [data] = exports.updateAuthorityStruct.serialize(__spreadValues({
        instructionDiscriminator: exports.updateAuthorityInstructionDiscriminator
      }, args));
      const keys = [
        {
          pubkey: accounts.candyMachine,
          isWritable: true,
          isSigner: false
        },
        {
          pubkey: accounts.authority,
          isWritable: false,
          isSigner: true
        },
        {
          pubkey: accounts.wallet,
          isWritable: false,
          isSigner: false
        }
      ];
      if (accounts.anchorRemainingAccounts != null) {
        for (const acc of accounts.anchorRemainingAccounts) {
          keys.push(acc);
        }
      }
      const ix = new web3.TransactionInstruction({
        programId,
        keys,
        data
      });
      return ix;
    }
    exports.createUpdateAuthorityInstruction = createUpdateAuthorityInstruction3;
  }
});

// ../../node_modules/@metaplex-foundation/mpl-candy-machine/dist/src/generated/instructions/updateCandyMachine.js
var require_updateCandyMachine = __commonJS({
  "../../node_modules/@metaplex-foundation/mpl-candy-machine/dist/src/generated/instructions/updateCandyMachine.js"(exports) {
    "use strict";
    var __createBinding = exports && exports.__createBinding || (Object.create ? function(o2, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      var desc = Object.getOwnPropertyDescriptor(m, k);
      if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m[k];
        } };
      }
      Object.defineProperty(o2, k2, desc);
    } : function(o2, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      o2[k2] = m[k];
    });
    var __setModuleDefault = exports && exports.__setModuleDefault || (Object.create ? function(o2, v) {
      Object.defineProperty(o2, "default", { enumerable: true, value: v });
    } : function(o2, v) {
      o2["default"] = v;
    });
    var __importStar = exports && exports.__importStar || function(mod) {
      if (mod && mod.__esModule)
        return mod;
      var result = {};
      if (mod != null) {
        for (var k in mod)
          if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k))
            __createBinding(result, mod, k);
      }
      __setModuleDefault(result, mod);
      return result;
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.createUpdateCandyMachineInstruction = exports.updateCandyMachineInstructionDiscriminator = exports.updateCandyMachineStruct = void 0;
    var beet9 = __importStar(require_beet());
    var web3 = __importStar((init_index_browser_esm(), __toCommonJS(index_browser_esm_exports)));
    var CandyMachineData_1 = require_CandyMachineData();
    exports.updateCandyMachineStruct = new beet9.FixableBeetArgsStruct([
      ["instructionDiscriminator", beet9.uniformFixedSizeArray(beet9.u8, 8)],
      ["data", CandyMachineData_1.candyMachineDataBeet]
    ], "UpdateCandyMachineInstructionArgs");
    exports.updateCandyMachineInstructionDiscriminator = [243, 251, 124, 156, 211, 211, 118, 239];
    function createUpdateCandyMachineInstruction2(accounts, args, programId = new web3.PublicKey("cndy3Z4yapfJBmL3ShUp5exZKqR3z33thTzeNMm2gRZ")) {
      const [data] = exports.updateCandyMachineStruct.serialize(__spreadValues({
        instructionDiscriminator: exports.updateCandyMachineInstructionDiscriminator
      }, args));
      const keys = [
        {
          pubkey: accounts.candyMachine,
          isWritable: true,
          isSigner: false
        },
        {
          pubkey: accounts.authority,
          isWritable: false,
          isSigner: true
        },
        {
          pubkey: accounts.wallet,
          isWritable: false,
          isSigner: false
        }
      ];
      if (accounts.anchorRemainingAccounts != null) {
        for (const acc of accounts.anchorRemainingAccounts) {
          keys.push(acc);
        }
      }
      const ix = new web3.TransactionInstruction({
        programId,
        keys,
        data
      });
      return ix;
    }
    exports.createUpdateCandyMachineInstruction = createUpdateCandyMachineInstruction2;
  }
});

// ../../node_modules/@metaplex-foundation/mpl-candy-machine/dist/src/generated/instructions/withdrawFunds.js
var require_withdrawFunds = __commonJS({
  "../../node_modules/@metaplex-foundation/mpl-candy-machine/dist/src/generated/instructions/withdrawFunds.js"(exports) {
    "use strict";
    var __createBinding = exports && exports.__createBinding || (Object.create ? function(o2, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      var desc = Object.getOwnPropertyDescriptor(m, k);
      if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m[k];
        } };
      }
      Object.defineProperty(o2, k2, desc);
    } : function(o2, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      o2[k2] = m[k];
    });
    var __setModuleDefault = exports && exports.__setModuleDefault || (Object.create ? function(o2, v) {
      Object.defineProperty(o2, "default", { enumerable: true, value: v });
    } : function(o2, v) {
      o2["default"] = v;
    });
    var __importStar = exports && exports.__importStar || function(mod) {
      if (mod && mod.__esModule)
        return mod;
      var result = {};
      if (mod != null) {
        for (var k in mod)
          if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k))
            __createBinding(result, mod, k);
      }
      __setModuleDefault(result, mod);
      return result;
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.createWithdrawFundsInstruction = exports.withdrawFundsInstructionDiscriminator = exports.withdrawFundsStruct = void 0;
    var beet9 = __importStar(require_beet());
    var web3 = __importStar((init_index_browser_esm(), __toCommonJS(index_browser_esm_exports)));
    exports.withdrawFundsStruct = new beet9.BeetArgsStruct([["instructionDiscriminator", beet9.uniformFixedSizeArray(beet9.u8, 8)]], "WithdrawFundsInstructionArgs");
    exports.withdrawFundsInstructionDiscriminator = [241, 36, 29, 111, 208, 31, 104, 217];
    function createWithdrawFundsInstruction2(accounts, programId = new web3.PublicKey("cndy3Z4yapfJBmL3ShUp5exZKqR3z33thTzeNMm2gRZ")) {
      const [data] = exports.withdrawFundsStruct.serialize({
        instructionDiscriminator: exports.withdrawFundsInstructionDiscriminator
      });
      const keys = [
        {
          pubkey: accounts.candyMachine,
          isWritable: true,
          isSigner: false
        },
        {
          pubkey: accounts.authority,
          isWritable: true,
          isSigner: true
        }
      ];
      if (accounts.anchorRemainingAccounts != null) {
        for (const acc of accounts.anchorRemainingAccounts) {
          keys.push(acc);
        }
      }
      const ix = new web3.TransactionInstruction({
        programId,
        keys,
        data
      });
      return ix;
    }
    exports.createWithdrawFundsInstruction = createWithdrawFundsInstruction2;
  }
});

// ../../node_modules/@metaplex-foundation/mpl-candy-machine/dist/src/generated/instructions/index.js
var require_instructions13 = __commonJS({
  "../../node_modules/@metaplex-foundation/mpl-candy-machine/dist/src/generated/instructions/index.js"(exports) {
    "use strict";
    var __createBinding = exports && exports.__createBinding || (Object.create ? function(o2, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      var desc = Object.getOwnPropertyDescriptor(m, k);
      if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m[k];
        } };
      }
      Object.defineProperty(o2, k2, desc);
    } : function(o2, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      o2[k2] = m[k];
    });
    var __exportStar = exports && exports.__exportStar || function(m, exports2) {
      for (var p in m)
        if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports2, p))
          __createBinding(exports2, m, p);
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    __exportStar(require_addConfigLines(), exports);
    __exportStar(require_initializeCandyMachine(), exports);
    __exportStar(require_mintNft(), exports);
    __exportStar(require_removeCollection(), exports);
    __exportStar(require_removeFreeze(), exports);
    __exportStar(require_setCollection(), exports);
    __exportStar(require_setCollectionDuringMint(), exports);
    __exportStar(require_setFreeze(), exports);
    __exportStar(require_thawNft(), exports);
    __exportStar(require_unlockFunds(), exports);
    __exportStar(require_updateAuthority(), exports);
    __exportStar(require_updateCandyMachine(), exports);
    __exportStar(require_withdrawFunds(), exports);
  }
});

// ../../node_modules/@metaplex-foundation/mpl-candy-machine/dist/src/generated/types/index.js
var require_types8 = __commonJS({
  "../../node_modules/@metaplex-foundation/mpl-candy-machine/dist/src/generated/types/index.js"(exports) {
    "use strict";
    var __createBinding = exports && exports.__createBinding || (Object.create ? function(o2, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      var desc = Object.getOwnPropertyDescriptor(m, k);
      if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m[k];
        } };
      }
      Object.defineProperty(o2, k2, desc);
    } : function(o2, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      o2[k2] = m[k];
    });
    var __exportStar = exports && exports.__exportStar || function(m, exports2) {
      for (var p in m)
        if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports2, p))
          __createBinding(exports2, m, p);
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    __exportStar(require_CandyMachineData(), exports);
    __exportStar(require_ConfigLine(), exports);
    __exportStar(require_Creator3(), exports);
    __exportStar(require_EndSettingType(), exports);
    __exportStar(require_EndSettings(), exports);
    __exportStar(require_GatekeeperConfig(), exports);
    __exportStar(require_HiddenSettings(), exports);
    __exportStar(require_WhitelistMintMode(), exports);
    __exportStar(require_WhitelistMintSettings(), exports);
  }
});

// ../../node_modules/@metaplex-foundation/mpl-candy-machine/dist/src/generated/index.js
var require_generated4 = __commonJS({
  "../../node_modules/@metaplex-foundation/mpl-candy-machine/dist/src/generated/index.js"(exports) {
    "use strict";
    var __createBinding = exports && exports.__createBinding || (Object.create ? function(o2, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      var desc = Object.getOwnPropertyDescriptor(m, k);
      if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m[k];
        } };
      }
      Object.defineProperty(o2, k2, desc);
    } : function(o2, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      o2[k2] = m[k];
    });
    var __exportStar = exports && exports.__exportStar || function(m, exports2) {
      for (var p in m)
        if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports2, p))
          __createBinding(exports2, m, p);
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.PROGRAM_ID = exports.PROGRAM_ADDRESS = void 0;
    var web3_js_1 = (init_index_browser_esm(), __toCommonJS(index_browser_esm_exports));
    __exportStar(require_accounts4(), exports);
    __exportStar(require_errors9(), exports);
    __exportStar(require_instructions13(), exports);
    __exportStar(require_types8(), exports);
    exports.PROGRAM_ADDRESS = "cndy3Z4yapfJBmL3ShUp5exZKqR3z33thTzeNMm2gRZ";
    exports.PROGRAM_ID = new web3_js_1.PublicKey(exports.PROGRAM_ADDRESS);
  }
});

// ../../node_modules/@metaplex-foundation/mpl-candy-machine/dist/src/errors.js
var require_errors10 = __commonJS({
  "../../node_modules/@metaplex-foundation/mpl-candy-machine/dist/src/errors.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.cusper = void 0;
    var cusper_1 = require_cusper();
    var generated_1 = require_generated4();
    exports.cusper = (0, cusper_1.initCusper)(generated_1.errorFromCode);
  }
});

// ../../node_modules/@metaplex-foundation/mpl-candy-machine/dist/src/mpl-candy-machine.js
var require_mpl_candy_machine = __commonJS({
  "../../node_modules/@metaplex-foundation/mpl-candy-machine/dist/src/mpl-candy-machine.js"(exports) {
    "use strict";
    var __createBinding = exports && exports.__createBinding || (Object.create ? function(o2, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      var desc = Object.getOwnPropertyDescriptor(m, k);
      if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m[k];
        } };
      }
      Object.defineProperty(o2, k2, desc);
    } : function(o2, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      o2[k2] = m[k];
    });
    var __exportStar = exports && exports.__exportStar || function(m, exports2) {
      for (var p in m)
        if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports2, p))
          __createBinding(exports2, m, p);
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    __exportStar(require_errors10(), exports);
    __exportStar(require_generated4(), exports);
  }
});

// ../../node_modules/@metaplex-foundation/beet-solana/dist/cjs/src/keys.js
var require_keys5 = __commonJS({
  "../../node_modules/@metaplex-foundation/beet-solana/dist/cjs/src/keys.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.keysTypeMap = exports.publicKey = void 0;
    var web3_js_1 = (init_index_browser_esm(), __toCommonJS(index_browser_esm_exports));
    var beet_1 = require_beet();
    var BEET_SOLANA_PACKAGE = "@metaplex-foundation/beet-solana";
    var SOLANA_WEB3_PACKAGE = "@solana/web3.js";
    var uint8Array32 = (0, beet_1.fixedSizeUint8Array)(32);
    exports.publicKey = {
      write: function(buf, offset, value) {
        const arr = value.toBytes();
        uint8Array32.write(buf, offset, arr);
      },
      read: function(buf, offset) {
        const bytes = uint8Array32.read(buf, offset);
        return new web3_js_1.PublicKey(bytes);
      },
      byteSize: uint8Array32.byteSize,
      description: "PublicKey"
    };
    exports.keysTypeMap = {
      publicKey: {
        beet: "publicKey",
        isFixable: false,
        sourcePack: BEET_SOLANA_PACKAGE,
        ts: "PublicKey",
        pack: SOLANA_WEB3_PACKAGE
      }
    };
  }
});

// ../../node_modules/@metaplex-foundation/beet-solana/dist/cjs/src/utils.js
var require_utils7 = __commonJS({
  "../../node_modules/@metaplex-foundation/beet-solana/dist/cjs/src/utils.js"(exports) {
    "use strict";
    var __importDefault = exports && exports.__importDefault || function(mod) {
      return mod && mod.__esModule ? mod : { "default": mod };
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.logTrace = exports.logDebug = exports.logInfo = exports.logError = void 0;
    var debug_1 = __importDefault(require_browser2());
    exports.logError = (0, debug_1.default)("beet:error");
    exports.logInfo = (0, debug_1.default)("beet:info");
    exports.logDebug = (0, debug_1.default)("beet:debug");
    exports.logTrace = (0, debug_1.default)("beet:trace");
  }
});

// ../../node_modules/@metaplex-foundation/beet-solana/dist/cjs/src/gpa/util.js
var require_util6 = __commonJS({
  "../../node_modules/@metaplex-foundation/beet-solana/dist/cjs/src/gpa/util.js"(exports) {
    "use strict";
    var __importDefault = exports && exports.__importDefault || function(mod) {
      return mod && mod.__esModule ? mod : { "default": mod };
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.encodeFixedBeet = void 0;
    var bs58_1 = __importDefault(require_bs58());
    function encodeFixedBeet(beet9, val) {
      const buf = Buffer.alloc(beet9.byteSize);
      beet9.write(buf, 0, val);
      return bs58_1.default.encode(buf);
    }
    exports.encodeFixedBeet = encodeFixedBeet;
  }
});

// ../../node_modules/@metaplex-foundation/beet-solana/dist/cjs/src/gpa/index.js
var require_gpa5 = __commonJS({
  "../../node_modules/@metaplex-foundation/beet-solana/dist/cjs/src/gpa/index.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.GpaBuilder = void 0;
    var beet_1 = require_beet();
    var assert_1 = require_assert();
    var utils_1 = require_utils7();
    var util_1 = require_util6();
    var GpaBuilder2 = class _GpaBuilder {
      constructor(programId, beets, accountSize) {
        this.programId = programId;
        this.beets = beets;
        this.accountSize = accountSize;
        this.config = {};
      }
      _addFilter(filter) {
        if (this.config.filters == null) {
          this.config.filters = [];
        }
        this.config.filters.push(filter);
        return this;
      }
      _addInnerFilter(key, innerKey, val) {
        (0, utils_1.logTrace)(`gpa.addInnerFilter: ${key}.${innerKey}`);
        const outerBeetInfo = this.beets.get(key);
        (0, assert_1.strict)(outerBeetInfo != null, "Outer filter key needs to be an existing field name");
        const beetInfo = outerBeetInfo.beet;
        let offset = outerBeetInfo.offset;
        const outerBeet = (0, beet_1.isFixedSizeBeet)(beetInfo) ? beetInfo : beetInfo.toFixedFromValue(val);
        let beet9;
        for (const [k, v] of outerBeet.fields) {
          if (k === innerKey) {
            beet9 = v;
            break;
          }
          offset += v.byteSize;
        }
        (0, assert_1.strict)(beet9 != null, `${innerKey} is not a field of the ${key} struct`);
        const bytes = (0, util_1.encodeFixedBeet)(beet9, val);
        this._addFilter({ memcmp: { offset, bytes } });
        return this;
      }
      /**
       * Adds a _memcmp_ filter for a field inside a field which is a struct value.
       * The provided keys need to be separated by a `.` and only one level of
       * nesting is supported at this point.
       *
       * The filter is applied to the inner value.
       *
       * ## Example
       *
       * ### Given:
       *
       * ```typescript
       * type Inner = {
       *   a: number
       * }
       * type Outer = {
       *   idx: number
       *   inner: Inner
       * }
       * ```
       * ### Apply a filter on `a` of the `Inner` type:
       *
       * ```typescript
       * gpaBuilder.addInnerFilter('inner.a', 2)
       * ```
       *
       * @param keys - the names of the fields by which to filter, i.e. `'outer.inner'`
       * @param val - the field value that the filter should match
       */
      addInnerFilter(keys, val) {
        const parts = keys.split(".");
        assert_1.strict.equal(parts.length, 2, `inner filters can go only one level deep, i.e. 'outer.inner' is ok, but 'outer.inner.deep' is not`);
        const [ka, kb] = parts;
        return this._addInnerFilter(ka, kb, val);
      }
      /**
       * Adds a _memcmp_ filter for the provided {@link key} of the struct.
       *
       * @param key - the name of the field by which to filter
       * @param val - the field value that the filter should match
       */
      addFilter(key, val) {
        const beetInfo = this.beets.get(key);
        (0, assert_1.strict)(beetInfo != null, "Filter key needs to be an existing field name");
        const beet9 = (0, beet_1.isFixedSizeBeet)(beetInfo.beet) ? beetInfo.beet : beetInfo.beet.toFixedFromValue(val);
        const bytes = (0, util_1.encodeFixedBeet)(beet9, val);
        this._addFilter({ memcmp: { offset: beetInfo.offset, bytes } });
        return this;
      }
      /**
       * Adds a `dataSize` filter which will match on account's sizes.
       * You have to provide that {@link size} for accounts that don't have a fixed size.
       * For _fixed_ size accounts that size is determined for you.
       *
       * @param size - the account size to match for
       */
      dataSize(size) {
        size = size !== null && size !== void 0 ? size : this.accountSize;
        (0, assert_1.strict)(size != null, "for accounts of dynamic size the dataSize arg needs to be provided");
        return this._addFilter({ dataSize: size });
      }
      /**
       * Attempts to find the accounts matching the configured filters.
       *
       * @param connection used to query the program accounts on the cluster
       */
      run(connection) {
        return connection.getProgramAccounts(this.programId, this.config);
      }
      /**
       * Creates a GPA builder that supports adding up to four filters for
       * fixed size fields.
       *
       * Once a non-fixed field is encountered, the remaining fields following it
       * will not be included as a filter option since their position in the
       * bytes array will change depending on the content of the non-fixed field.
       *
       * @param programId - the id of the program that owns the accounts we are querying
       * @param beetFields - the beet fields that make up the structure of the account data
       */
      static fromBeetFields(programId, beetFields) {
        const map2 = /* @__PURE__ */ new Map();
        let offset = 0;
        let encounteredNonFixed = false;
        for (const [k, v] of beetFields) {
          map2.set(k, { beet: v, offset });
          if (!(0, beet_1.isFixedSizeBeet)(v)) {
            encounteredNonFixed = true;
            break;
          }
          offset += v.byteSize;
        }
        const accountSize = encounteredNonFixed ? void 0 : offset;
        return new _GpaBuilder(programId, map2, accountSize);
      }
      /**
       * Convenience wrapper around {@link GpaBuilder.fromBeetFields} that allows
       * providing a struct which contains the beet fields.
       *
       * @param programId - the id of the program that owns the accounts we are querying
       * @param struct - containing the beet `fields` specifying the layout of the account
       */
      static fromStruct(programId, struct51) {
        return _GpaBuilder.fromBeetFields(programId, struct51.fields);
      }
    };
    exports.GpaBuilder = GpaBuilder2;
  }
});

// ../../node_modules/@metaplex-foundation/beet-solana/dist/cjs/src/beet-solana.js
var require_beet_solana5 = __commonJS({
  "../../node_modules/@metaplex-foundation/beet-solana/dist/cjs/src/beet-solana.js"(exports) {
    "use strict";
    var __createBinding = exports && exports.__createBinding || (Object.create ? function(o2, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      var desc = Object.getOwnPropertyDescriptor(m, k);
      if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m[k];
        } };
      }
      Object.defineProperty(o2, k2, desc);
    } : function(o2, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      o2[k2] = m[k];
    });
    var __exportStar = exports && exports.__exportStar || function(m, exports2) {
      for (var p in m)
        if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports2, p))
          __createBinding(exports2, m, p);
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.supportedTypeMap = void 0;
    var keys_1 = require_keys5();
    __exportStar(require_keys5(), exports);
    __exportStar(require_gpa5(), exports);
    exports.supportedTypeMap = keys_1.keysTypeMap;
  }
});

// ../../node_modules/@metaplex-foundation/mpl-candy-guard/node_modules/@metaplex-foundation/beet/dist/cjs/src/types.js
var require_types9 = __commonJS({
  "../../node_modules/@metaplex-foundation/mpl-candy-guard/node_modules/@metaplex-foundation/beet/dist/cjs/src/types.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.isElementCollectionFixedSizeBeet = exports.isFixableBeet = exports.assertFixedSizeBeet = exports.isFixedSizeBeet = exports.BEET_TYPE_ARG_INNER = exports.BEET_TYPE_ARG_LEN = exports.BEET_PACKAGE = void 0;
    var assert_1 = require_assert();
    exports.BEET_PACKAGE = "@metaplex-foundation/beet";
    exports.BEET_TYPE_ARG_LEN = "len";
    exports.BEET_TYPE_ARG_INNER = "Beet<{innner}>";
    function isFixedSizeBeet(x) {
      return Object.keys(x).includes("byteSize");
    }
    exports.isFixedSizeBeet = isFixedSizeBeet;
    function assertFixedSizeBeet(x, msg = `${x} should have been a fixed beet`) {
      (0, assert_1.strict)(isFixedSizeBeet(x), msg);
    }
    exports.assertFixedSizeBeet = assertFixedSizeBeet;
    function isFixableBeet2(x) {
      return typeof x.toFixedFromData === "function" && typeof x.toFixedFromValue === "function";
    }
    exports.isFixableBeet = isFixableBeet2;
    function isElementCollectionFixedSizeBeet(x) {
      const keys = Object.keys(x);
      return keys.includes("length") && keys.includes("elementByteSize") && keys.includes("lenPrefixByteSize");
    }
    exports.isElementCollectionFixedSizeBeet = isElementCollectionFixedSizeBeet;
  }
});

// ../../node_modules/@metaplex-foundation/mpl-candy-guard/node_modules/@metaplex-foundation/beet/dist/cjs/src/beets/numbers.js
var require_numbers2 = __commonJS({
  "../../node_modules/@metaplex-foundation/mpl-candy-guard/node_modules/@metaplex-foundation/beet/dist/cjs/src/beets/numbers.js"(exports) {
    "use strict";
    var __importDefault = exports && exports.__importDefault || function(mod) {
      return mod && mod.__esModule ? mod : { "default": mod };
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.numbersTypeMap = exports.bool = exports.i512 = exports.i256 = exports.i128 = exports.i64 = exports.i32 = exports.i16 = exports.i8 = exports.u512 = exports.u256 = exports.u128 = exports.u64 = exports.u32 = exports.u16 = exports.u8 = void 0;
    var bn_js_1 = __importDefault(require_bn());
    var types_1 = require_types9();
    exports.u8 = {
      write: function(buf, offset, value) {
        buf.writeUInt8(value, offset);
      },
      read: function(buf, offset) {
        return buf.readUInt8(offset);
      },
      byteSize: 1,
      description: "u8"
    };
    exports.u16 = {
      write: function(buf, offset, value) {
        buf.writeUInt16LE(value, offset);
      },
      read: function(buf, offset) {
        return buf.readUInt16LE(offset);
      },
      byteSize: 2,
      description: "u16"
    };
    exports.u32 = {
      write: function(buf, offset, value) {
        buf.writeUInt32LE(value, offset);
      },
      read: function(buf, offset) {
        return buf.readUInt32LE(offset);
      },
      byteSize: 4,
      description: "u32"
    };
    function unsignedLargeBeet(byteSize, description) {
      return {
        write: function(buf, offset, value) {
          const bn = bn_js_1.default.isBN(value) ? value : new bn_js_1.default(value);
          const bytesArray = bn.toArray("le", this.byteSize);
          const bytesArrayBuf = Buffer.from(bytesArray);
          bytesArrayBuf.copy(buf, offset, 0, this.byteSize);
        },
        read: function(buf, offset) {
          const slice = buf.slice(offset, offset + this.byteSize);
          return new bn_js_1.default(slice, "le");
        },
        byteSize,
        description
      };
    }
    exports.u64 = unsignedLargeBeet(8, "u64");
    exports.u128 = unsignedLargeBeet(16, "u128");
    exports.u256 = unsignedLargeBeet(32, "u256");
    exports.u512 = unsignedLargeBeet(64, "u512");
    exports.i8 = {
      write: function(buf, offset, value) {
        buf.writeInt8(value, offset);
      },
      read: function(buf, offset) {
        return buf.readInt8(offset);
      },
      byteSize: 1,
      description: "i8"
    };
    exports.i16 = {
      write: function(buf, offset, value) {
        buf.writeInt16LE(value, offset);
      },
      read: function(buf, offset) {
        return buf.readInt16LE(offset);
      },
      byteSize: 2,
      description: "i16"
    };
    exports.i32 = {
      write: function(buf, offset, value) {
        buf.writeInt32LE(value, offset);
      },
      read: function(buf, offset) {
        return buf.readInt32LE(offset);
      },
      byteSize: 4,
      description: "i32"
    };
    function signedLargeBeet(byteSize, description) {
      const bitSize = byteSize * 8;
      return {
        write: function(buf, offset, value) {
          const bn = (bn_js_1.default.isBN(value) ? value : new bn_js_1.default(value)).toTwos(bitSize);
          const bytesArray = bn.toArray("le", this.byteSize);
          const bytesArrayBuf = Buffer.from(bytesArray);
          bytesArrayBuf.copy(buf, offset, 0, this.byteSize);
        },
        read: function(buf, offset) {
          const slice = buf.slice(offset, offset + this.byteSize);
          const x = new bn_js_1.default(slice, "le");
          return x.fromTwos(bitSize);
        },
        byteSize,
        description
      };
    }
    exports.i64 = signedLargeBeet(8, "i64");
    exports.i128 = signedLargeBeet(16, "i128");
    exports.i256 = signedLargeBeet(32, "i256");
    exports.i512 = signedLargeBeet(64, "i512");
    exports.bool = {
      write: function(buf, offset, value) {
        const n = value ? 1 : 0;
        exports.u8.write(buf, offset, n);
      },
      read: function(buf, offset) {
        return exports.u8.read(buf, offset) === 1;
      },
      byteSize: 1,
      description: "bool"
    };
    exports.numbersTypeMap = {
      // <= 32-bit numbers and boolean
      u8: { beet: "u8", isFixable: false, sourcePack: types_1.BEET_PACKAGE, ts: "number" },
      u16: { beet: "u16", isFixable: false, sourcePack: types_1.BEET_PACKAGE, ts: "number" },
      u32: { beet: "u32", isFixable: false, sourcePack: types_1.BEET_PACKAGE, ts: "number" },
      i8: { beet: "i8", isFixable: false, sourcePack: types_1.BEET_PACKAGE, ts: "number" },
      i16: { beet: "i16", isFixable: false, sourcePack: types_1.BEET_PACKAGE, ts: "number" },
      i32: { beet: "i32", isFixable: false, sourcePack: types_1.BEET_PACKAGE, ts: "number" },
      bool: { beet: "bool", isFixable: false, sourcePack: types_1.BEET_PACKAGE, ts: "boolean" },
      // Big Number, they use, the 'bignum' type which is defined in this package
      u64: { beet: "u64", isFixable: false, sourcePack: types_1.BEET_PACKAGE, ts: "bignum", pack: types_1.BEET_PACKAGE },
      u128: { beet: "u128", isFixable: false, sourcePack: types_1.BEET_PACKAGE, ts: "bignum", pack: types_1.BEET_PACKAGE },
      u256: { beet: "u256", isFixable: false, sourcePack: types_1.BEET_PACKAGE, ts: "bignum", pack: types_1.BEET_PACKAGE },
      u512: { beet: "u512", isFixable: false, sourcePack: types_1.BEET_PACKAGE, ts: "bignum", pack: types_1.BEET_PACKAGE },
      i64: { beet: "i64", isFixable: false, sourcePack: types_1.BEET_PACKAGE, ts: "bignum", pack: types_1.BEET_PACKAGE },
      i128: { beet: "i128", isFixable: false, sourcePack: types_1.BEET_PACKAGE, ts: "bignum", pack: types_1.BEET_PACKAGE },
      i256: { beet: "i256", isFixable: false, sourcePack: types_1.BEET_PACKAGE, ts: "bignum", pack: types_1.BEET_PACKAGE },
      i512: { beet: "i512", isFixable: false, sourcePack: types_1.BEET_PACKAGE, ts: "bignum", pack: types_1.BEET_PACKAGE }
    };
  }
});

// ../../node_modules/@metaplex-foundation/mpl-candy-guard/node_modules/@metaplex-foundation/beet/dist/cjs/src/utils.js
var require_utils8 = __commonJS({
  "../../node_modules/@metaplex-foundation/mpl-candy-guard/node_modules/@metaplex-foundation/beet/dist/cjs/src/utils.js"(exports) {
    "use strict";
    var __importDefault = exports && exports.__importDefault || function(mod) {
      return mod && mod.__esModule ? mod : { "default": mod };
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.bytes = exports.beetBytes = exports.logTrace = exports.logDebug = exports.logInfo = exports.logError = void 0;
    var debug_1 = __importDefault(require_browser2());
    var ansicolors_1 = __importDefault(require_ansicolors());
    var types_1 = require_types9();
    var { brightBlack } = ansicolors_1.default;
    exports.logError = (0, debug_1.default)("beet:error");
    exports.logInfo = (0, debug_1.default)("beet:info");
    exports.logDebug = (0, debug_1.default)("beet:debug");
    exports.logTrace = (0, debug_1.default)("beet:trace");
    function beetBytes(beet9, isFixable = false) {
      let bytes2;
      if ((0, types_1.isFixableBeet)(beet9)) {
        bytes2 = "? B";
      } else if ((0, types_1.isElementCollectionFixedSizeBeet)(beet9)) {
        const len = isFixable ? "length" : beet9.length;
        const lenBytes = beet9.lenPrefixByteSize;
        bytes2 = lenBytes > 0 ? `${lenBytes} + (${beet9.elementByteSize} * ${len}) B  (${beet9.byteSize} B)` : `(${beet9.elementByteSize} * ${len}) B (${beet9.byteSize} B)`;
      } else {
        bytes2 = `${beet9.byteSize} B`;
      }
      return brightBlack(bytes2);
    }
    exports.beetBytes = beetBytes;
    function bytes(n) {
      return brightBlack(`${n} B`);
    }
    exports.bytes = bytes;
  }
});

// ../../node_modules/@metaplex-foundation/mpl-candy-guard/node_modules/@metaplex-foundation/beet/dist/cjs/src/beet.fixable.js
var require_beet_fixable2 = __commonJS({
  "../../node_modules/@metaplex-foundation/mpl-candy-guard/node_modules/@metaplex-foundation/beet/dist/cjs/src/beet.fixable.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.fixBeetFromValue = exports.fixBeetFromData = void 0;
    var types_1 = require_types9();
    function fixBeetFromData(beet9, buf, offset) {
      if ((0, types_1.isFixedSizeBeet)(beet9)) {
        return beet9;
      }
      if ((0, types_1.isFixableBeet)(beet9)) {
        return beet9.toFixedFromData(buf, offset);
      }
      throw new Error(`${beet9.description} is neither fixed size nor fixable`);
    }
    exports.fixBeetFromData = fixBeetFromData;
    function fixBeetFromValue(beet9, val) {
      if ((0, types_1.isFixedSizeBeet)(beet9)) {
        return beet9;
      }
      if ((0, types_1.isFixableBeet)(beet9)) {
        return beet9.toFixedFromValue(val);
      }
      throw new Error(`${beet9.description} is neither fixed size nor fixable`);
    }
    exports.fixBeetFromValue = fixBeetFromValue;
  }
});

// ../../node_modules/@metaplex-foundation/mpl-candy-guard/node_modules/@metaplex-foundation/beet/dist/cjs/src/beets/collections.js
var require_collections2 = __commonJS({
  "../../node_modules/@metaplex-foundation/mpl-candy-guard/node_modules/@metaplex-foundation/beet/dist/cjs/src/beets/collections.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.collectionsTypeMap = exports.uint8Array = exports.fixedSizeUint8Array = exports.fixedSizeBuffer = exports.array = exports.fixedSizeArray = exports.uniformFixedSizeArray = void 0;
    var types_1 = require_types9();
    var assert_1 = require_assert();
    var numbers_1 = require_numbers2();
    var types_2 = require_types9();
    var utils_1 = require_utils8();
    var beet_fixable_1 = require_beet_fixable2();
    function uniformFixedSizeArray3(element, len, lenPrefix = false) {
      const arraySize = element.byteSize * len;
      const byteSize = lenPrefix ? 4 + arraySize : arraySize;
      return {
        write: function(buf, offset, value) {
          assert_1.strict.equal(value.length, len, `array length ${value.length} should match len ${len}`);
          if (lenPrefix) {
            numbers_1.u32.write(buf, offset, len);
            offset += 4;
          }
          for (let i = 0; i < len; i++) {
            element.write(buf, offset + i * element.byteSize, value[i]);
          }
        },
        read: function(buf, offset) {
          if (lenPrefix) {
            const size = numbers_1.u32.read(buf, offset);
            assert_1.strict.equal(size, len, "invalid byte size");
            offset += 4;
          }
          const arr = new Array(len);
          for (let i = 0; i < len; i++) {
            arr[i] = element.read(buf, offset + i * element.byteSize);
          }
          return arr;
        },
        byteSize,
        length: len,
        elementByteSize: element.byteSize,
        lenPrefixByteSize: 4,
        description: `Array<${element.description}>(${len})`
      };
    }
    exports.uniformFixedSizeArray = uniformFixedSizeArray3;
    function fixedSizeArray(elements, elementsByteSize) {
      const len = elements.length;
      const firstElement = len === 0 ? "<EMPTY>" : elements[0].description;
      return {
        write: function(buf, offset, value) {
          assert_1.strict.equal(value.length, len, `array length ${value.length} should match len ${len}`);
          numbers_1.u32.write(buf, offset, len);
          let cursor = offset + 4;
          for (let i = 0; i < len; i++) {
            const element = elements[i];
            element.write(buf, cursor, value[i]);
            cursor += element.byteSize;
          }
        },
        read: function(buf, offset) {
          const size = numbers_1.u32.read(buf, offset);
          assert_1.strict.equal(size, len, "invalid byte size");
          let cursor = offset + 4;
          const arr = new Array(len);
          for (let i = 0; i < len; i++) {
            const element = elements[i];
            arr[i] = element.read(buf, cursor);
            cursor += element.byteSize;
          }
          return arr;
        },
        byteSize: 4 + elementsByteSize,
        length: len,
        description: `Array<${firstElement}>(${len})[ 4 + ${elementsByteSize} ]`
      };
    }
    exports.fixedSizeArray = fixedSizeArray;
    function array(element) {
      return {
        toFixedFromData(buf, offset) {
          const len = numbers_1.u32.read(buf, offset);
          (0, utils_1.logTrace)(`${this.description}[${len}]`);
          const cursorStart = offset + 4;
          let cursor = cursorStart;
          const fixedElements = new Array(len);
          for (let i = 0; i < len; i++) {
            const fixedElement = (0, beet_fixable_1.fixBeetFromData)(element, buf, cursor);
            fixedElements[i] = fixedElement;
            cursor += fixedElement.byteSize;
          }
          return fixedSizeArray(fixedElements, cursor - cursorStart);
        },
        toFixedFromValue(vals) {
          (0, assert_1.strict)(Array.isArray(vals), `${vals} should be an array`);
          let elementsSize = 0;
          const fixedElements = new Array(vals.length);
          for (let i = 0; i < vals.length; i++) {
            const fixedElement = (0, beet_fixable_1.fixBeetFromValue)(element, vals[i]);
            fixedElements[i] = fixedElement;
            elementsSize += fixedElement.byteSize;
          }
          return fixedSizeArray(fixedElements, elementsSize);
        },
        description: `array`
      };
    }
    exports.array = array;
    function fixedSizeBuffer(bytes) {
      return {
        write: function(buf, offset, value) {
          value.copy(buf, offset, 0, bytes);
        },
        read: function(buf, offset) {
          return buf.slice(offset, offset + bytes);
        },
        byteSize: bytes,
        description: `Buffer(${bytes})`
      };
    }
    exports.fixedSizeBuffer = fixedSizeBuffer;
    function fixedSizeUint8Array(len, lenPrefix = false) {
      const arrayBufferBeet = fixedSizeBuffer(len);
      const byteSize = lenPrefix ? len + 4 : len;
      return {
        write: function(buf, offset, value) {
          assert_1.strict.equal(value.byteLength, len, `Uint8Array length ${value.byteLength} should match len ${len}`);
          if (lenPrefix) {
            numbers_1.u32.write(buf, offset, len);
            offset += 4;
          }
          const valueBuf = Buffer.from(value);
          arrayBufferBeet.write(buf, offset, valueBuf);
        },
        read: function(buf, offset) {
          if (lenPrefix) {
            const size = numbers_1.u32.read(buf, offset);
            assert_1.strict.equal(size, len, "invalid byte size");
            offset += 4;
          }
          const arrayBuffer = arrayBufferBeet.read(buf, offset);
          return Uint8Array.from(arrayBuffer);
        },
        byteSize,
        description: `Uint8Array(${len})`
      };
    }
    exports.fixedSizeUint8Array = fixedSizeUint8Array;
    exports.uint8Array = {
      toFixedFromData(buf, offset) {
        const len = numbers_1.u32.read(buf, offset);
        (0, utils_1.logTrace)(`${this.description}[${len}]`);
        return fixedSizeUint8Array(len, true);
      },
      toFixedFromValue(val) {
        const len = val.byteLength;
        return fixedSizeUint8Array(len, true);
      },
      description: `Uint8Array`
    };
    exports.collectionsTypeMap = {
      Array: {
        beet: "array",
        isFixable: true,
        sourcePack: types_2.BEET_PACKAGE,
        ts: "Array",
        arg: types_1.BEET_TYPE_ARG_LEN
      },
      FixedSizeArray: {
        beet: "fixedSizeArray",
        isFixable: false,
        sourcePack: types_2.BEET_PACKAGE,
        ts: "Array",
        arg: types_1.BEET_TYPE_ARG_LEN
      },
      UniformFixedSizeArray: {
        beet: "uniformFixedSizeArray",
        isFixable: false,
        sourcePack: types_2.BEET_PACKAGE,
        ts: "Array",
        arg: types_1.BEET_TYPE_ARG_LEN
      },
      Buffer: {
        beet: "fixedSizeBuffer",
        isFixable: false,
        sourcePack: types_2.BEET_PACKAGE,
        ts: "Buffer",
        arg: types_1.BEET_TYPE_ARG_LEN
      },
      FixedSizeUint8Array: {
        beet: "fixedSizeUint8Array",
        isFixable: false,
        sourcePack: types_2.BEET_PACKAGE,
        ts: "Uint8Array",
        arg: types_1.BEET_TYPE_ARG_LEN
      },
      Uint8Array: {
        beet: "uint8Array",
        isFixable: true,
        sourcePack: types_2.BEET_PACKAGE,
        ts: "Uint8Array",
        arg: types_1.BEET_TYPE_ARG_LEN
      }
    };
  }
});

// ../../node_modules/@metaplex-foundation/mpl-candy-guard/node_modules/@metaplex-foundation/beet/dist/cjs/src/beets/composites.js
var require_composites2 = __commonJS({
  "../../node_modules/@metaplex-foundation/mpl-candy-guard/node_modules/@metaplex-foundation/beet/dist/cjs/src/beets/composites.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.compositesTypeMap = exports.coption = exports.coptionSome = exports.coptionNone = exports.isNoneBuffer = exports.isSomeBuffer = void 0;
    var assert_1 = require_assert();
    var types_1 = require_types9();
    var types_2 = require_types9();
    var utils_1 = require_utils8();
    var beet_fixable_1 = require_beet_fixable2();
    var NONE = 0;
    var SOME = 1;
    function isSomeBuffer(buf, offset) {
      return buf[offset] === SOME;
    }
    exports.isSomeBuffer = isSomeBuffer;
    function isNoneBuffer(buf, offset) {
      return buf[offset] === NONE;
    }
    exports.isNoneBuffer = isNoneBuffer;
    function coptionNone(description) {
      (0, utils_1.logTrace)(`coptionNone(${description})`);
      return {
        write: function(buf, offset, value) {
          (0, assert_1.strict)(value == null, "coptionNone can only handle `null` values");
          buf[offset] = NONE;
        },
        read: function(buf, offset) {
          (0, assert_1.strict)(isNoneBuffer(buf, offset), "coptionNone can only handle `NONE` data");
          return null;
        },
        byteSize: 1,
        description: `COption<None(${description})>`
      };
    }
    exports.coptionNone = coptionNone;
    function coptionSome(inner) {
      const byteSize = 1 + inner.byteSize;
      const beet9 = {
        write: function(buf, offset, value) {
          (0, types_1.assertFixedSizeBeet)(inner, `coption inner type ${inner.description} needs to be fixed before calling write`);
          (0, assert_1.strict)(value != null, "coptionSome cannot handle `null` values");
          buf[offset] = SOME;
          inner.write(buf, offset + 1, value);
        },
        read: function(buf, offset) {
          (0, types_1.assertFixedSizeBeet)(inner, `coption inner type ${inner.description} needs to be fixed before calling read`);
          (0, assert_1.strict)(isSomeBuffer(buf, offset), "coptionSome can only handle `SOME` data");
          return inner.read(buf, offset + 1);
        },
        description: `COption<${inner.description}>[1 + ${inner.byteSize}]`,
        byteSize,
        inner
      };
      (0, utils_1.logTrace)(beet9.description);
      return beet9;
    }
    exports.coptionSome = coptionSome;
    function coption(inner) {
      return {
        toFixedFromData(buf, offset) {
          if (isSomeBuffer(buf, offset)) {
            const innerFixed = (0, beet_fixable_1.fixBeetFromData)(inner, buf, offset + 1);
            return coptionSome(innerFixed);
          } else {
            (0, assert_1.strict)(isNoneBuffer(buf, offset), `Expected ${buf} to hold a COption`);
            return coptionNone(inner.description);
          }
        },
        toFixedFromValue(val) {
          return val == null ? coptionNone(inner.description) : coptionSome((0, beet_fixable_1.fixBeetFromValue)(inner, val));
        },
        description: `COption<${inner.description}>`
      };
    }
    exports.coption = coption;
    exports.compositesTypeMap = {
      option: {
        beet: "coption",
        isFixable: true,
        sourcePack: types_2.BEET_PACKAGE,
        ts: "COption<Inner>",
        arg: types_1.BEET_TYPE_ARG_INNER,
        pack: types_2.BEET_PACKAGE
      }
    };
  }
});

// ../../node_modules/@metaplex-foundation/mpl-candy-guard/node_modules/@metaplex-foundation/beet/dist/cjs/src/beets/string.js
var require_string2 = __commonJS({
  "../../node_modules/@metaplex-foundation/mpl-candy-guard/node_modules/@metaplex-foundation/beet/dist/cjs/src/beets/string.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.stringTypeMap = exports.utf8String = exports.fixedSizeUtf8String = void 0;
    var types_1 = require_types9();
    var assert_1 = require_assert();
    var numbers_1 = require_numbers2();
    var utils_1 = require_utils8();
    var fixedSizeUtf8String = (stringByteLength) => {
      return {
        write: function(buf, offset, value) {
          const stringBuf = Buffer.from(value, "utf8");
          assert_1.strict.equal(stringBuf.byteLength, stringByteLength, `${value} has invalid byte size`);
          numbers_1.u32.write(buf, offset, stringByteLength);
          stringBuf.copy(buf, offset + 4, 0, stringByteLength);
        },
        read: function(buf, offset) {
          const size = numbers_1.u32.read(buf, offset);
          assert_1.strict.equal(size, stringByteLength, `invalid byte size`);
          const stringSlice = buf.slice(offset + 4, offset + 4 + stringByteLength);
          return stringSlice.toString("utf8");
        },
        elementByteSize: 1,
        length: stringByteLength,
        lenPrefixByteSize: 4,
        byteSize: 4 + stringByteLength,
        description: `Utf8String(4 + ${stringByteLength})`
      };
    };
    exports.fixedSizeUtf8String = fixedSizeUtf8String;
    exports.utf8String = {
      toFixedFromData(buf, offset) {
        const len = numbers_1.u32.read(buf, offset);
        (0, utils_1.logTrace)(`${this.description}[${len}]`);
        return (0, exports.fixedSizeUtf8String)(len);
      },
      toFixedFromValue(val) {
        const len = Buffer.from(val).byteLength;
        return (0, exports.fixedSizeUtf8String)(len);
      },
      description: `Utf8String`
    };
    exports.stringTypeMap = {
      fixedSizeString: {
        beet: "fixedSizeUtf8String",
        isFixable: false,
        sourcePack: types_1.BEET_PACKAGE,
        ts: "string",
        arg: types_1.BEET_TYPE_ARG_LEN
      },
      string: {
        beet: "utf8String",
        isFixable: true,
        sourcePack: types_1.BEET_PACKAGE,
        ts: "string"
      }
    };
  }
});

// ../../node_modules/@metaplex-foundation/mpl-candy-guard/node_modules/@metaplex-foundation/beet/dist/cjs/src/read-write.js
var require_read_write2 = __commonJS({
  "../../node_modules/@metaplex-foundation/mpl-candy-guard/node_modules/@metaplex-foundation/beet/dist/cjs/src/read-write.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.BeetReader = exports.BeetWriter = void 0;
    var assert_1 = require_assert();
    var BeetWriter3 = class {
      constructor(byteSize) {
        this.buf = Buffer.alloc(byteSize);
        this._offset = 0;
      }
      get buffer() {
        return this.buf;
      }
      get offset() {
        return this._offset;
      }
      maybeResize(bytesNeeded) {
        if (this._offset + bytesNeeded > this.buf.length) {
          assert_1.strict.fail(`We shouldn't ever need to resize, but ${this._offset + bytesNeeded} > ${this.buf.length}`);
        }
      }
      write(beet9, value) {
        this.maybeResize(beet9.byteSize);
        beet9.write(this.buf, this._offset, value);
        this._offset += beet9.byteSize;
      }
      writeStruct(instance, fields) {
        for (const [key, beet9] of fields) {
          const value = instance[key];
          this.write(beet9, value);
        }
      }
    };
    exports.BeetWriter = BeetWriter3;
    var BeetReader3 = class {
      constructor(buffer2, _offset = 0) {
        this.buffer = buffer2;
        this._offset = _offset;
      }
      get offset() {
        return this._offset;
      }
      read(beet9) {
        const value = beet9.read(this.buffer, this._offset);
        this._offset += beet9.byteSize;
        return value;
      }
      readStruct(fields) {
        const acc = {};
        for (const [key, beet9] of fields) {
          acc[key] = this.read(beet9);
        }
        return acc;
      }
    };
    exports.BeetReader = BeetReader3;
  }
});

// ../../node_modules/@metaplex-foundation/mpl-candy-guard/node_modules/@metaplex-foundation/beet/dist/cjs/src/struct.js
var require_struct2 = __commonJS({
  "../../node_modules/@metaplex-foundation/mpl-candy-guard/node_modules/@metaplex-foundation/beet/dist/cjs/src/struct.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.BeetArgsStruct = exports.isBeetStruct = exports.BeetStruct = void 0;
    var read_write_1 = require_read_write2();
    var utils_1 = require_utils8();
    var BeetStruct = class _BeetStruct {
      /**
       * Creates an instance of the BeetStruct.
       *
       * @param fields de/serializers for each field of the {@link Class}
       * @param construct the function that creates an instance of {@link Class}
       * from the args
       * @param description identifies this struct for diagnostics/debugging
       * purposes
       */
      constructor(fields, construct, description = _BeetStruct.description) {
        this.fields = fields;
        this.construct = construct;
        this.description = description;
        this.byteSize = this.getByteSize();
        if (utils_1.logDebug.enabled) {
          const flds = fields.map(([key, val]) => `${String(key)}: ${val.description} ${(0, utils_1.beetBytes)(val)}`).join("\n  ");
          (0, utils_1.logDebug)(`struct ${description} {
  ${flds}
} ${(0, utils_1.beetBytes)(this)}`);
        }
      }
      /**
       * Along with `write` this allows structs to be treated as {@link Beet}s and
       * thus supports composing/nesting them the same way.
       * @private
       */
      read(buf, offset) {
        const [value] = this.deserialize(buf, offset);
        return value;
      }
      /**
       * Along with `read` this allows structs to be treated as {@link Beet}s and
       * thus supports composing/nesting them the same way.
       * @private
       */
      write(buf, offset, value) {
        const [innerBuf, innerOffset] = this.serialize(value);
        innerBuf.copy(buf, offset, 0, innerOffset);
      }
      /**
       * Deserializes an instance of the Class from the provided buffer starting to
       * read at the provided offset.
       *
       * @returns `[instance of Class, offset into buffer after deserialization completed]`
       */
      deserialize(buffer2, offset = 0) {
        if (utils_1.logTrace.enabled) {
          (0, utils_1.logTrace)("deserializing [%s] from %d bytes buffer", this.description, buffer2.byteLength);
          (0, utils_1.logTrace)(buffer2);
          (0, utils_1.logTrace)(buffer2.toJSON().data);
        }
        const reader = new read_write_1.BeetReader(buffer2, offset);
        const args = reader.readStruct(this.fields);
        return [this.construct(args), reader.offset];
      }
      /**
       * Serializes the provided instance into a new {@link Buffer}
       *
       * @param instance of the struct to serialize
       * @param byteSize allows to override the size fo the created Buffer and
       * defaults to the size of the struct to serialize
       */
      serialize(instance, byteSize = this.byteSize) {
        (0, utils_1.logTrace)("serializing [%s] %o to %d bytes buffer", this.description, instance, byteSize);
        const writer = new read_write_1.BeetWriter(byteSize);
        writer.writeStruct(instance, this.fields);
        return [writer.buffer, writer.offset];
      }
      getByteSize() {
        return this.fields.reduce((acc, [_, beet9]) => acc + beet9.byteSize, 0);
      }
      get type() {
        return _BeetStruct.TYPE;
      }
    };
    exports.BeetStruct = BeetStruct;
    BeetStruct.description = "BeetStruct";
    BeetStruct.TYPE = "BeetStruct";
    function isBeetStruct(beet9) {
      return beet9.type === BeetStruct.TYPE;
    }
    exports.isBeetStruct = isBeetStruct;
    var BeetArgsStruct = class _BeetArgsStruct extends BeetStruct {
      constructor(fields, description = _BeetArgsStruct.description) {
        super(fields, (args) => args, description);
      }
    };
    exports.BeetArgsStruct = BeetArgsStruct;
    BeetArgsStruct.description = "BeetArgsStruct";
  }
});

// ../../node_modules/@metaplex-foundation/mpl-candy-guard/node_modules/@metaplex-foundation/beet/dist/cjs/src/struct.fixable.js
var require_struct_fixable2 = __commonJS({
  "../../node_modules/@metaplex-foundation/mpl-candy-guard/node_modules/@metaplex-foundation/beet/dist/cjs/src/struct.fixable.js"(exports) {
    "use strict";
    var __importDefault = exports && exports.__importDefault || function(mod) {
      return mod && mod.__esModule ? mod : { "default": mod };
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.FixableBeetArgsStruct = exports.isFixableBeetStruct = exports.FixableBeetStruct = void 0;
    var beet_fixable_1 = require_beet_fixable2();
    var struct_1 = require_struct2();
    var types_1 = require_types9();
    var assert_1 = require_assert();
    var utils_1 = require_utils8();
    var ansicolors_1 = __importDefault(require_ansicolors());
    var { brightBlack } = ansicolors_1.default;
    var FixableBeetStruct = class _FixableBeetStruct {
      /**
       * Creates an instance of the {@link FixableBeetStruct}.
       *
       * @param fields fixed or fixable de/serializers for each field of the {@link Class}
       * @param construct the function that creates an instance of {@link Class}
       * from the args
       * @param description identifies this struct for diagnostics/debugging
       * purposes
       */
      constructor(fields, construct, description = _FixableBeetStruct.description) {
        this.fields = fields;
        this.construct = construct;
        this.description = description;
        let minByteSize = 0;
        if (utils_1.logDebug.enabled) {
          const flds = fields.map(([key, val]) => {
            if ((0, types_1.isFixedSizeBeet)(val)) {
              minByteSize += val.byteSize;
            }
            return `${key}: ${val.description} ${(0, utils_1.beetBytes)(val)}`;
          }).join("\n  ");
          const bytes = `> ${minByteSize} B`;
          (0, utils_1.logDebug)(`struct ${description} {
  ${flds}
} ${brightBlack(bytes)}`);
        }
      }
      /**
       * Deserializes an instance of the Class from the provided buffer starting to
       * read at the provided offset.
       *
       * @returns `[instance of Class, offset into buffer after deserialization completed]`
       */
      deserialize(buffer2, offset = 0) {
        return this.toFixedFromData(buffer2, offset).deserialize(buffer2, offset);
      }
      /**
       * Serializes the provided instance into a new {@link Buffer}
       *
       * **NOTE:** that the `instance` is traversed and each of its fields accessed
       * twice, once to derive a _fixed size_ {@link BeetStruct} and then use it to
       * serialize the `instance`.
       * Therefore ensure that none of the properties that are part of the struct
       * have side effects, i.e. via `Getter`s.
       *
       * @param instance of the struct to serialize
       * @param byteSize allows to override the size fo the created Buffer and
       * defaults to the size of the struct to serialize
       */
      serialize(instance, byteSize) {
        return this.toFixedFromValue(instance).serialize(instance, byteSize);
      }
      toFixedFromData(buf, offset) {
        let cursor = offset;
        const fixedFields = new Array(this.fields.length);
        for (let i = 0; i < this.fields.length; i++) {
          const [key, beet9] = this.fields[i];
          const fixedBeet = (0, beet_fixable_1.fixBeetFromData)(beet9, buf, cursor);
          fixedFields[i] = [key, fixedBeet];
          cursor += fixedBeet.byteSize;
        }
        return this.description !== _FixableBeetStruct.description ? new struct_1.BeetStruct(fixedFields, this.construct, this.description) : new struct_1.BeetStruct(fixedFields, this.construct);
      }
      toFixedFromValue(args) {
        const argsKeys = Object.keys(args);
        const fixedFields = new Array(this.fields.length);
        for (let i = 0; i < this.fields.length; i++) {
          const [key, beet9] = this.fields[i];
          (0, assert_1.strict)(argsKeys.includes(key), `Value with keys [ ${argsKeys} ] should include struct key '${key}' but doesn't.`);
          const val = args[key];
          const fixedBeet = (0, beet_fixable_1.fixBeetFromValue)(beet9, val);
          fixedFields[i] = [key, fixedBeet];
        }
        return this.description !== _FixableBeetStruct.description ? new struct_1.BeetStruct(fixedFields, this.construct, this.description) : new struct_1.BeetStruct(fixedFields, this.construct);
      }
      get type() {
        return _FixableBeetStruct.TYPE;
      }
    };
    exports.FixableBeetStruct = FixableBeetStruct;
    FixableBeetStruct.description = "FixableBeetStruct";
    FixableBeetStruct.TYPE = "FixableBeetStruct";
    function isFixableBeetStruct(beet9) {
      return beet9.type === FixableBeetStruct.TYPE;
    }
    exports.isFixableBeetStruct = isFixableBeetStruct;
    var FixableBeetArgsStruct = class _FixableBeetArgsStruct extends FixableBeetStruct {
      constructor(fields, description = _FixableBeetArgsStruct.description) {
        super(fields, (args) => args, description);
      }
    };
    exports.FixableBeetArgsStruct = FixableBeetArgsStruct;
    FixableBeetArgsStruct.description = "FixableBeetArgsStruct";
  }
});

// ../../node_modules/@metaplex-foundation/mpl-candy-guard/node_modules/@metaplex-foundation/beet/dist/cjs/src/beets/enums.js
var require_enums2 = __commonJS({
  "../../node_modules/@metaplex-foundation/mpl-candy-guard/node_modules/@metaplex-foundation/beet/dist/cjs/src/beets/enums.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.enumsTypeMap = exports.dataEnum = exports.uniformDataEnum = exports.fixedScalarEnum = void 0;
    var types_1 = require_types9();
    var numbers_1 = require_numbers2();
    var assert_1 = require_assert();
    var struct_1 = require_struct2();
    var struct_fixable_1 = require_struct_fixable2();
    function resolveEnumVariant(value, isNumVariant) {
      return isNumVariant ? `${value}` : value;
    }
    function fixedScalarEnum(enumType) {
      const keys = Object.keys(enumType);
      return {
        write(buf, offset, value) {
          const isNumVariant = typeof value === "number";
          const variantKey = resolveEnumVariant(value, isNumVariant);
          if (!keys.includes(variantKey)) {
            assert_1.strict.fail(`${value} should be a variant of the provided enum type, i.e. [ ${Object.values(enumType).join(", ")} ], but isn't`);
          }
          if (isNumVariant) {
            numbers_1.u8.write(buf, offset, value);
          } else {
            const enumValue = enumType[variantKey];
            numbers_1.u8.write(buf, offset, enumValue);
          }
        },
        read(buf, offset) {
          const value = numbers_1.u8.read(buf, offset);
          const isNumVariant = typeof value === "number";
          const variantKey = resolveEnumVariant(value, isNumVariant);
          if (!keys.includes(variantKey)) {
            assert_1.strict.fail(`${value} should be a of a variant of the provided enum type, i.e. [ ${Object.values(enumType).join(", ")} ], but isn't`);
          }
          return isNumVariant ? value : enumType[variantKey];
        },
        byteSize: numbers_1.u8.byteSize,
        description: "Enum"
      };
    }
    exports.fixedScalarEnum = fixedScalarEnum;
    function uniformDataEnum(inner) {
      return {
        write: function(buf, offset, value) {
          numbers_1.u8.write(buf, offset, value.kind);
          inner.write(buf, offset + 1, value.data);
        },
        read: function(buf, offset) {
          const kind = numbers_1.u8.read(buf, offset);
          const data = inner.read(buf, offset + 1);
          return { kind, data };
        },
        byteSize: 1 + inner.byteSize,
        description: `UniformDataEnum<${inner.description}>`
      };
    }
    exports.uniformDataEnum = uniformDataEnum;
    function enumDataVariantBeet(inner, discriminant, kind) {
      return {
        write(buf, offset, value) {
          numbers_1.u8.write(buf, offset, discriminant);
          inner.write(buf, offset + numbers_1.u8.byteSize, value);
        },
        read(buf, offset) {
          const val = inner.read(buf, offset + numbers_1.u8.byteSize);
          return __spreadValues({ __kind: kind }, val);
        },
        byteSize: inner.byteSize + numbers_1.u8.byteSize,
        description: `EnumData<${inner.description}>`
      };
    }
    function dataEnum(variants) {
      for (const [_, beet9] of variants) {
        (0, assert_1.strict)((0, struct_1.isBeetStruct)(beet9) || (0, struct_fixable_1.isFixableBeetStruct)(beet9), "dataEnum: data beet must be a struct");
      }
      return {
        toFixedFromData(buf, offset) {
          const discriminant = numbers_1.u8.read(buf, offset);
          const variant = variants[discriminant];
          (0, assert_1.strict)(variant != null, `Discriminant ${discriminant} out of range for ${variants.length} variants`);
          const [__kind, dataBeet] = variant;
          const fixed = (0, types_1.isFixedSizeBeet)(dataBeet) ? dataBeet : dataBeet.toFixedFromData(buf, offset + 1);
          return enumDataVariantBeet(fixed, discriminant, __kind);
        },
        toFixedFromValue(val) {
          if (val.__kind == null) {
            const keys = Object.keys(val).join(", ");
            const validKinds = variants.map(([__kind2]) => __kind2).join(", ");
            assert_1.strict.fail(`Value with fields [ ${keys} ] is missing __kind, which needs to be set to one of [ ${validKinds} ]`);
          }
          const discriminant = variants.findIndex(([__kind2]) => __kind2 === val.__kind);
          if (discriminant < 0) {
            const validKinds = variants.map(([__kind2]) => __kind2).join(", ");
            assert_1.strict.fail(`${val.__kind} is not a valid kind, needs to be one of [ ${validKinds} ]`);
          }
          const variant = variants[discriminant];
          const _a = val, { __kind } = _a, dataValue = __objRest(_a, ["__kind"]);
          const [__variantKind, dataBeet] = variant;
          const fixed = (0, types_1.isFixedSizeBeet)(dataBeet) ? dataBeet : dataBeet.toFixedFromValue(dataValue);
          return enumDataVariantBeet(fixed, discriminant, __variantKind);
        },
        description: `DataEnum<${variants.length} variants>`
      };
    }
    exports.dataEnum = dataEnum;
    exports.enumsTypeMap = {
      fixedScalarEnum: {
        beet: "fixedScalarEnum",
        isFixable: false,
        sourcePack: types_1.BEET_PACKAGE,
        ts: "<TypeName>",
        arg: types_1.BEET_TYPE_ARG_INNER,
        pack: types_1.BEET_PACKAGE
      },
      dataEnum: {
        beet: "dataEnum",
        isFixable: false,
        sourcePack: types_1.BEET_PACKAGE,
        ts: "DataEnum<Kind, Inner>",
        arg: types_1.BEET_TYPE_ARG_INNER,
        pack: types_1.BEET_PACKAGE
      }
    };
  }
});

// ../../node_modules/@metaplex-foundation/mpl-candy-guard/node_modules/@metaplex-foundation/beet/dist/cjs/src/beets/aliases.js
var require_aliases2 = __commonJS({
  "../../node_modules/@metaplex-foundation/mpl-candy-guard/node_modules/@metaplex-foundation/beet/dist/cjs/src/beets/aliases.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.aliasesTypeMap = exports.bytes = void 0;
    var collections_1 = require_collections2();
    exports.bytes = collections_1.uint8Array;
    exports.aliasesTypeMap = {
      // @ts-ignore
      bytes: collections_1.collectionsTypeMap.Uint8Array
    };
  }
});

// ../../node_modules/@metaplex-foundation/mpl-candy-guard/node_modules/@metaplex-foundation/beet/dist/cjs/src/beet.js
var require_beet2 = __commonJS({
  "../../node_modules/@metaplex-foundation/mpl-candy-guard/node_modules/@metaplex-foundation/beet/dist/cjs/src/beet.js"(exports) {
    "use strict";
    var __createBinding = exports && exports.__createBinding || (Object.create ? function(o2, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      var desc = Object.getOwnPropertyDescriptor(m, k);
      if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m[k];
        } };
      }
      Object.defineProperty(o2, k2, desc);
    } : function(o2, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      o2[k2] = m[k];
    });
    var __exportStar = exports && exports.__exportStar || function(m, exports2) {
      for (var p in m)
        if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports2, p))
          __createBinding(exports2, m, p);
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.supportedTypeMap = void 0;
    var collections_1 = require_collections2();
    var composites_1 = require_composites2();
    var numbers_1 = require_numbers2();
    var string_1 = require_string2();
    var enums_1 = require_enums2();
    var aliases_1 = require_aliases2();
    __exportStar(require_aliases2(), exports);
    __exportStar(require_collections2(), exports);
    __exportStar(require_string2(), exports);
    __exportStar(require_composites2(), exports);
    __exportStar(require_enums2(), exports);
    __exportStar(require_numbers2(), exports);
    __exportStar(require_beet_fixable2(), exports);
    __exportStar(require_read_write2(), exports);
    __exportStar(require_struct2(), exports);
    __exportStar(require_struct_fixable2(), exports);
    __exportStar(require_types9(), exports);
    exports.supportedTypeMap = __spreadValues(__spreadValues(__spreadValues(__spreadValues(__spreadValues(__spreadValues({}, collections_1.collectionsTypeMap), string_1.stringTypeMap), composites_1.compositesTypeMap), enums_1.enumsTypeMap), numbers_1.numbersTypeMap), aliases_1.aliasesTypeMap);
  }
});

// ../../node_modules/@metaplex-foundation/mpl-candy-guard/dist/src/generated/accounts/CandyGuard.js
var require_CandyGuard = __commonJS({
  "../../node_modules/@metaplex-foundation/mpl-candy-guard/dist/src/generated/accounts/CandyGuard.js"(exports) {
    "use strict";
    var __createBinding = exports && exports.__createBinding || (Object.create ? function(o2, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      var desc = Object.getOwnPropertyDescriptor(m, k);
      if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m[k];
        } };
      }
      Object.defineProperty(o2, k2, desc);
    } : function(o2, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      o2[k2] = m[k];
    });
    var __setModuleDefault = exports && exports.__setModuleDefault || (Object.create ? function(o2, v) {
      Object.defineProperty(o2, "default", { enumerable: true, value: v });
    } : function(o2, v) {
      o2["default"] = v;
    });
    var __importStar = exports && exports.__importStar || function(mod) {
      if (mod && mod.__esModule)
        return mod;
      var result = {};
      if (mod != null) {
        for (var k in mod)
          if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k))
            __createBinding(result, mod, k);
      }
      __setModuleDefault(result, mod);
      return result;
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.candyGuardBeet = exports.CandyGuard = exports.candyGuardDiscriminator = void 0;
    var web3 = __importStar((init_index_browser_esm(), __toCommonJS(index_browser_esm_exports)));
    var beetSolana = __importStar(require_beet_solana5());
    var beet9 = __importStar(require_beet2());
    exports.candyGuardDiscriminator = [44, 207, 199, 184, 112, 103, 34, 181];
    var CandyGuard3 = class _CandyGuard {
      constructor(base2, bump, authority) {
        this.base = base2;
        this.bump = bump;
        this.authority = authority;
      }
      static fromArgs(args) {
        return new _CandyGuard(args.base, args.bump, args.authority);
      }
      static fromAccountInfo(accountInfo, offset = 0) {
        return _CandyGuard.deserialize(accountInfo.data, offset);
      }
      static fromAccountAddress(connection, address) {
        return __async(this, null, function* () {
          const accountInfo = yield connection.getAccountInfo(address);
          if (accountInfo == null) {
            throw new Error(`Unable to find CandyGuard account at ${address}`);
          }
          return _CandyGuard.fromAccountInfo(accountInfo, 0)[0];
        });
      }
      static gpaBuilder(programId = new web3.PublicKey("Guard1JwRhJkVH6XZhzoYxeBVQe872VH6QggF4BWmS9g")) {
        return beetSolana.GpaBuilder.fromStruct(programId, exports.candyGuardBeet);
      }
      static deserialize(buf, offset = 0) {
        return exports.candyGuardBeet.deserialize(buf, offset);
      }
      serialize() {
        return exports.candyGuardBeet.serialize(__spreadValues({
          accountDiscriminator: exports.candyGuardDiscriminator
        }, this));
      }
      static get byteSize() {
        return exports.candyGuardBeet.byteSize;
      }
      static getMinimumBalanceForRentExemption(connection, commitment) {
        return __async(this, null, function* () {
          return connection.getMinimumBalanceForRentExemption(_CandyGuard.byteSize, commitment);
        });
      }
      static hasCorrectByteSize(buf, offset = 0) {
        return buf.byteLength - offset === _CandyGuard.byteSize;
      }
      pretty() {
        return {
          base: this.base.toBase58(),
          bump: this.bump,
          authority: this.authority.toBase58()
        };
      }
    };
    exports.CandyGuard = CandyGuard3;
    exports.candyGuardBeet = new beet9.BeetStruct([
      ["accountDiscriminator", beet9.uniformFixedSizeArray(beet9.u8, 8)],
      ["base", beetSolana.publicKey],
      ["bump", beet9.u8],
      ["authority", beetSolana.publicKey]
    ], CandyGuard3.fromArgs, "CandyGuard");
  }
});

// ../../node_modules/@metaplex-foundation/mpl-candy-guard/dist/src/generated/accounts/FreezeEscrow.js
var require_FreezeEscrow = __commonJS({
  "../../node_modules/@metaplex-foundation/mpl-candy-guard/dist/src/generated/accounts/FreezeEscrow.js"(exports) {
    "use strict";
    var __createBinding = exports && exports.__createBinding || (Object.create ? function(o2, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      var desc = Object.getOwnPropertyDescriptor(m, k);
      if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m[k];
        } };
      }
      Object.defineProperty(o2, k2, desc);
    } : function(o2, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      o2[k2] = m[k];
    });
    var __setModuleDefault = exports && exports.__setModuleDefault || (Object.create ? function(o2, v) {
      Object.defineProperty(o2, "default", { enumerable: true, value: v });
    } : function(o2, v) {
      o2["default"] = v;
    });
    var __importStar = exports && exports.__importStar || function(mod) {
      if (mod && mod.__esModule)
        return mod;
      var result = {};
      if (mod != null) {
        for (var k in mod)
          if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k))
            __createBinding(result, mod, k);
      }
      __setModuleDefault(result, mod);
      return result;
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.freezeEscrowBeet = exports.FreezeEscrow = exports.freezeEscrowDiscriminator = void 0;
    var web3 = __importStar((init_index_browser_esm(), __toCommonJS(index_browser_esm_exports)));
    var beet9 = __importStar(require_beet2());
    var beetSolana = __importStar(require_beet_solana5());
    exports.freezeEscrowDiscriminator = [227, 186, 40, 152, 7, 174, 131, 184];
    var FreezeEscrow = class _FreezeEscrow {
      constructor(candyGuard, candyMachine, frozenCount, firstMintTime, freezePeriod, destination, authority) {
        this.candyGuard = candyGuard;
        this.candyMachine = candyMachine;
        this.frozenCount = frozenCount;
        this.firstMintTime = firstMintTime;
        this.freezePeriod = freezePeriod;
        this.destination = destination;
        this.authority = authority;
      }
      static fromArgs(args) {
        return new _FreezeEscrow(args.candyGuard, args.candyMachine, args.frozenCount, args.firstMintTime, args.freezePeriod, args.destination, args.authority);
      }
      static fromAccountInfo(accountInfo, offset = 0) {
        return _FreezeEscrow.deserialize(accountInfo.data, offset);
      }
      static fromAccountAddress(connection, address) {
        return __async(this, null, function* () {
          const accountInfo = yield connection.getAccountInfo(address);
          if (accountInfo == null) {
            throw new Error(`Unable to find FreezeEscrow account at ${address}`);
          }
          return _FreezeEscrow.fromAccountInfo(accountInfo, 0)[0];
        });
      }
      static gpaBuilder(programId = new web3.PublicKey("Guard1JwRhJkVH6XZhzoYxeBVQe872VH6QggF4BWmS9g")) {
        return beetSolana.GpaBuilder.fromStruct(programId, exports.freezeEscrowBeet);
      }
      static deserialize(buf, offset = 0) {
        return exports.freezeEscrowBeet.deserialize(buf, offset);
      }
      serialize() {
        return exports.freezeEscrowBeet.serialize(__spreadValues({
          accountDiscriminator: exports.freezeEscrowDiscriminator
        }, this));
      }
      static byteSize(args) {
        const instance = _FreezeEscrow.fromArgs(args);
        return exports.freezeEscrowBeet.toFixedFromValue(__spreadValues({
          accountDiscriminator: exports.freezeEscrowDiscriminator
        }, instance)).byteSize;
      }
      static getMinimumBalanceForRentExemption(args, connection, commitment) {
        return __async(this, null, function* () {
          return connection.getMinimumBalanceForRentExemption(_FreezeEscrow.byteSize(args), commitment);
        });
      }
      pretty() {
        return {
          candyGuard: this.candyGuard.toBase58(),
          candyMachine: this.candyMachine.toBase58(),
          frozenCount: (() => {
            const x = this.frozenCount;
            if (typeof x.toNumber === "function") {
              try {
                return x.toNumber();
              } catch (_) {
                return x;
              }
            }
            return x;
          })(),
          firstMintTime: this.firstMintTime,
          freezePeriod: (() => {
            const x = this.freezePeriod;
            if (typeof x.toNumber === "function") {
              try {
                return x.toNumber();
              } catch (_) {
                return x;
              }
            }
            return x;
          })(),
          destination: this.destination.toBase58(),
          authority: this.authority.toBase58()
        };
      }
    };
    exports.FreezeEscrow = FreezeEscrow;
    exports.freezeEscrowBeet = new beet9.FixableBeetStruct([
      ["accountDiscriminator", beet9.uniformFixedSizeArray(beet9.u8, 8)],
      ["candyGuard", beetSolana.publicKey],
      ["candyMachine", beetSolana.publicKey],
      ["frozenCount", beet9.u64],
      ["firstMintTime", beet9.coption(beet9.i64)],
      ["freezePeriod", beet9.i64],
      ["destination", beetSolana.publicKey],
      ["authority", beetSolana.publicKey]
    ], FreezeEscrow.fromArgs, "FreezeEscrow");
  }
});

// ../../node_modules/@metaplex-foundation/mpl-candy-guard/dist/src/generated/accounts/index.js
var require_accounts5 = __commonJS({
  "../../node_modules/@metaplex-foundation/mpl-candy-guard/dist/src/generated/accounts/index.js"(exports) {
    "use strict";
    var __createBinding = exports && exports.__createBinding || (Object.create ? function(o2, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      var desc = Object.getOwnPropertyDescriptor(m, k);
      if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m[k];
        } };
      }
      Object.defineProperty(o2, k2, desc);
    } : function(o2, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      o2[k2] = m[k];
    });
    var __exportStar = exports && exports.__exportStar || function(m, exports2) {
      for (var p in m)
        if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports2, p))
          __createBinding(exports2, m, p);
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.accountProviders = void 0;
    __exportStar(require_CandyGuard(), exports);
    __exportStar(require_FreezeEscrow(), exports);
    var FreezeEscrow_1 = require_FreezeEscrow();
    var CandyGuard_1 = require_CandyGuard();
    exports.accountProviders = { FreezeEscrow: FreezeEscrow_1.FreezeEscrow, CandyGuard: CandyGuard_1.CandyGuard };
  }
});

// ../../node_modules/@metaplex-foundation/mpl-candy-guard/dist/src/generated/errors/index.js
var require_errors11 = __commonJS({
  "../../node_modules/@metaplex-foundation/mpl-candy-guard/dist/src/generated/errors/index.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.errorFromCode = exports.AllocationGuardNotEnabledError = exports.AllocationLimitReachedError = exports.AllocationNotInitializedError = exports.ExceededProgramListSizeError = exports.UnauthorizedProgramFoundError = exports.DuplicatedMintLimitIdError = exports.DuplicatedGroupLabelError = exports.UnlockNotEnabledError = exports.ThawNotEnabledError = exports.ExceededMaximumFreezePeriodError = exports.FreezeEscrowAlreadyExistsError = exports.MissingFreezePeriodError = exports.FreezeNotInitializedError = exports.FreezeGuardNotEnabledError = exports.MissingFreezeInstructionError = exports.AddressNotAuthorizedError = exports.MaximumRedeemedAmountError = exports.MissingNftError = exports.InvalidNftCollectionError = exports.AllowedMintLimitReachedError = exports.AllowedListNotEnabledError = exports.MissingAllowedListProofError = exports.AddressNotFoundInAllowedListError = exports.InvalidMintTimeError = exports.AfterEndDateError = exports.GatewayTokenInvalidError = exports.MissingRequiredSignatureError = exports.TokenTransferFailedError = exports.NotEnoughTokensError = exports.TokenBurnFailedError = exports.NotEnoughSOLError = exports.MintNotLiveError = exports.MintNotLastTransactionError = exports.CollectionUpdateAuthorityKeyMismatchError = exports.MissingCollectionAccountsError = exports.CollectionKeyMismatchError = exports.InstructionNotFoundError = exports.CandyMachineEmptyError = exports.ExceededLengthError = exports.GroupNotFoundError = exports.RequiredGroupLabelNotFoundError = exports.NumericalOverflowErrorError = exports.MissingRemainingAccountError = exports.UninitializedError = exports.IncorrectOwnerError = exports.DataIncrementLimitExceededError = exports.PublicKeyMismatchError = exports.DeserializationErrorError = exports.InvalidAccountSizeError = void 0;
    exports.errorFromName = void 0;
    var createErrorFromCodeLookup = /* @__PURE__ */ new Map();
    var createErrorFromNameLookup = /* @__PURE__ */ new Map();
    var InvalidAccountSizeError = class _InvalidAccountSizeError extends Error {
      constructor() {
        super("Could not save guard to account");
        this.code = 6e3;
        this.name = "InvalidAccountSize";
        if (typeof Error.captureStackTrace === "function") {
          Error.captureStackTrace(this, _InvalidAccountSizeError);
        }
      }
    };
    exports.InvalidAccountSizeError = InvalidAccountSizeError;
    createErrorFromCodeLookup.set(6e3, () => new InvalidAccountSizeError());
    createErrorFromNameLookup.set("InvalidAccountSize", () => new InvalidAccountSizeError());
    var DeserializationErrorError = class _DeserializationErrorError extends Error {
      constructor() {
        super("Could not deserialize guard");
        this.code = 6001;
        this.name = "DeserializationError";
        if (typeof Error.captureStackTrace === "function") {
          Error.captureStackTrace(this, _DeserializationErrorError);
        }
      }
    };
    exports.DeserializationErrorError = DeserializationErrorError;
    createErrorFromCodeLookup.set(6001, () => new DeserializationErrorError());
    createErrorFromNameLookup.set("DeserializationError", () => new DeserializationErrorError());
    var PublicKeyMismatchError = class _PublicKeyMismatchError extends Error {
      constructor() {
        super("Public key mismatch");
        this.code = 6002;
        this.name = "PublicKeyMismatch";
        if (typeof Error.captureStackTrace === "function") {
          Error.captureStackTrace(this, _PublicKeyMismatchError);
        }
      }
    };
    exports.PublicKeyMismatchError = PublicKeyMismatchError;
    createErrorFromCodeLookup.set(6002, () => new PublicKeyMismatchError());
    createErrorFromNameLookup.set("PublicKeyMismatch", () => new PublicKeyMismatchError());
    var DataIncrementLimitExceededError = class _DataIncrementLimitExceededError extends Error {
      constructor() {
        super("Exceeded account increase limit");
        this.code = 6003;
        this.name = "DataIncrementLimitExceeded";
        if (typeof Error.captureStackTrace === "function") {
          Error.captureStackTrace(this, _DataIncrementLimitExceededError);
        }
      }
    };
    exports.DataIncrementLimitExceededError = DataIncrementLimitExceededError;
    createErrorFromCodeLookup.set(6003, () => new DataIncrementLimitExceededError());
    createErrorFromNameLookup.set("DataIncrementLimitExceeded", () => new DataIncrementLimitExceededError());
    var IncorrectOwnerError = class _IncorrectOwnerError extends Error {
      constructor() {
        super("Account does not have correct owner");
        this.code = 6004;
        this.name = "IncorrectOwner";
        if (typeof Error.captureStackTrace === "function") {
          Error.captureStackTrace(this, _IncorrectOwnerError);
        }
      }
    };
    exports.IncorrectOwnerError = IncorrectOwnerError;
    createErrorFromCodeLookup.set(6004, () => new IncorrectOwnerError());
    createErrorFromNameLookup.set("IncorrectOwner", () => new IncorrectOwnerError());
    var UninitializedError = class _UninitializedError extends Error {
      constructor() {
        super("Account is not initialized");
        this.code = 6005;
        this.name = "Uninitialized";
        if (typeof Error.captureStackTrace === "function") {
          Error.captureStackTrace(this, _UninitializedError);
        }
      }
    };
    exports.UninitializedError = UninitializedError;
    createErrorFromCodeLookup.set(6005, () => new UninitializedError());
    createErrorFromNameLookup.set("Uninitialized", () => new UninitializedError());
    var MissingRemainingAccountError = class _MissingRemainingAccountError extends Error {
      constructor() {
        super("Missing expected remaining account");
        this.code = 6006;
        this.name = "MissingRemainingAccount";
        if (typeof Error.captureStackTrace === "function") {
          Error.captureStackTrace(this, _MissingRemainingAccountError);
        }
      }
    };
    exports.MissingRemainingAccountError = MissingRemainingAccountError;
    createErrorFromCodeLookup.set(6006, () => new MissingRemainingAccountError());
    createErrorFromNameLookup.set("MissingRemainingAccount", () => new MissingRemainingAccountError());
    var NumericalOverflowErrorError = class _NumericalOverflowErrorError extends Error {
      constructor() {
        super("Numerical overflow error");
        this.code = 6007;
        this.name = "NumericalOverflowError";
        if (typeof Error.captureStackTrace === "function") {
          Error.captureStackTrace(this, _NumericalOverflowErrorError);
        }
      }
    };
    exports.NumericalOverflowErrorError = NumericalOverflowErrorError;
    createErrorFromCodeLookup.set(6007, () => new NumericalOverflowErrorError());
    createErrorFromNameLookup.set("NumericalOverflowError", () => new NumericalOverflowErrorError());
    var RequiredGroupLabelNotFoundError = class _RequiredGroupLabelNotFoundError extends Error {
      constructor() {
        super("Missing required group label");
        this.code = 6008;
        this.name = "RequiredGroupLabelNotFound";
        if (typeof Error.captureStackTrace === "function") {
          Error.captureStackTrace(this, _RequiredGroupLabelNotFoundError);
        }
      }
    };
    exports.RequiredGroupLabelNotFoundError = RequiredGroupLabelNotFoundError;
    createErrorFromCodeLookup.set(6008, () => new RequiredGroupLabelNotFoundError());
    createErrorFromNameLookup.set("RequiredGroupLabelNotFound", () => new RequiredGroupLabelNotFoundError());
    var GroupNotFoundError = class _GroupNotFoundError extends Error {
      constructor() {
        super("Group not found");
        this.code = 6009;
        this.name = "GroupNotFound";
        if (typeof Error.captureStackTrace === "function") {
          Error.captureStackTrace(this, _GroupNotFoundError);
        }
      }
    };
    exports.GroupNotFoundError = GroupNotFoundError;
    createErrorFromCodeLookup.set(6009, () => new GroupNotFoundError());
    createErrorFromNameLookup.set("GroupNotFound", () => new GroupNotFoundError());
    var ExceededLengthError = class _ExceededLengthError extends Error {
      constructor() {
        super("Value exceeded maximum length");
        this.code = 6010;
        this.name = "ExceededLength";
        if (typeof Error.captureStackTrace === "function") {
          Error.captureStackTrace(this, _ExceededLengthError);
        }
      }
    };
    exports.ExceededLengthError = ExceededLengthError;
    createErrorFromCodeLookup.set(6010, () => new ExceededLengthError());
    createErrorFromNameLookup.set("ExceededLength", () => new ExceededLengthError());
    var CandyMachineEmptyError = class _CandyMachineEmptyError extends Error {
      constructor() {
        super("Candy machine is empty");
        this.code = 6011;
        this.name = "CandyMachineEmpty";
        if (typeof Error.captureStackTrace === "function") {
          Error.captureStackTrace(this, _CandyMachineEmptyError);
        }
      }
    };
    exports.CandyMachineEmptyError = CandyMachineEmptyError;
    createErrorFromCodeLookup.set(6011, () => new CandyMachineEmptyError());
    createErrorFromNameLookup.set("CandyMachineEmpty", () => new CandyMachineEmptyError());
    var InstructionNotFoundError = class _InstructionNotFoundError extends Error {
      constructor() {
        super("No instruction was found");
        this.code = 6012;
        this.name = "InstructionNotFound";
        if (typeof Error.captureStackTrace === "function") {
          Error.captureStackTrace(this, _InstructionNotFoundError);
        }
      }
    };
    exports.InstructionNotFoundError = InstructionNotFoundError;
    createErrorFromCodeLookup.set(6012, () => new InstructionNotFoundError());
    createErrorFromNameLookup.set("InstructionNotFound", () => new InstructionNotFoundError());
    var CollectionKeyMismatchError = class _CollectionKeyMismatchError extends Error {
      constructor() {
        super("Collection public key mismatch");
        this.code = 6013;
        this.name = "CollectionKeyMismatch";
        if (typeof Error.captureStackTrace === "function") {
          Error.captureStackTrace(this, _CollectionKeyMismatchError);
        }
      }
    };
    exports.CollectionKeyMismatchError = CollectionKeyMismatchError;
    createErrorFromCodeLookup.set(6013, () => new CollectionKeyMismatchError());
    createErrorFromNameLookup.set("CollectionKeyMismatch", () => new CollectionKeyMismatchError());
    var MissingCollectionAccountsError = class _MissingCollectionAccountsError extends Error {
      constructor() {
        super("Missing collection accounts");
        this.code = 6014;
        this.name = "MissingCollectionAccounts";
        if (typeof Error.captureStackTrace === "function") {
          Error.captureStackTrace(this, _MissingCollectionAccountsError);
        }
      }
    };
    exports.MissingCollectionAccountsError = MissingCollectionAccountsError;
    createErrorFromCodeLookup.set(6014, () => new MissingCollectionAccountsError());
    createErrorFromNameLookup.set("MissingCollectionAccounts", () => new MissingCollectionAccountsError());
    var CollectionUpdateAuthorityKeyMismatchError = class _CollectionUpdateAuthorityKeyMismatchError extends Error {
      constructor() {
        super("Collection update authority public key mismatch");
        this.code = 6015;
        this.name = "CollectionUpdateAuthorityKeyMismatch";
        if (typeof Error.captureStackTrace === "function") {
          Error.captureStackTrace(this, _CollectionUpdateAuthorityKeyMismatchError);
        }
      }
    };
    exports.CollectionUpdateAuthorityKeyMismatchError = CollectionUpdateAuthorityKeyMismatchError;
    createErrorFromCodeLookup.set(6015, () => new CollectionUpdateAuthorityKeyMismatchError());
    createErrorFromNameLookup.set("CollectionUpdateAuthorityKeyMismatch", () => new CollectionUpdateAuthorityKeyMismatchError());
    var MintNotLastTransactionError = class _MintNotLastTransactionError extends Error {
      constructor() {
        super("Mint must be the last instructions of the transaction");
        this.code = 6016;
        this.name = "MintNotLastTransaction";
        if (typeof Error.captureStackTrace === "function") {
          Error.captureStackTrace(this, _MintNotLastTransactionError);
        }
      }
    };
    exports.MintNotLastTransactionError = MintNotLastTransactionError;
    createErrorFromCodeLookup.set(6016, () => new MintNotLastTransactionError());
    createErrorFromNameLookup.set("MintNotLastTransaction", () => new MintNotLastTransactionError());
    var MintNotLiveError = class _MintNotLiveError extends Error {
      constructor() {
        super("Mint is not live");
        this.code = 6017;
        this.name = "MintNotLive";
        if (typeof Error.captureStackTrace === "function") {
          Error.captureStackTrace(this, _MintNotLiveError);
        }
      }
    };
    exports.MintNotLiveError = MintNotLiveError;
    createErrorFromCodeLookup.set(6017, () => new MintNotLiveError());
    createErrorFromNameLookup.set("MintNotLive", () => new MintNotLiveError());
    var NotEnoughSOLError = class _NotEnoughSOLError extends Error {
      constructor() {
        super("Not enough SOL to pay for the mint");
        this.code = 6018;
        this.name = "NotEnoughSOL";
        if (typeof Error.captureStackTrace === "function") {
          Error.captureStackTrace(this, _NotEnoughSOLError);
        }
      }
    };
    exports.NotEnoughSOLError = NotEnoughSOLError;
    createErrorFromCodeLookup.set(6018, () => new NotEnoughSOLError());
    createErrorFromNameLookup.set("NotEnoughSOL", () => new NotEnoughSOLError());
    var TokenBurnFailedError = class _TokenBurnFailedError extends Error {
      constructor() {
        super("Token burn failed");
        this.code = 6019;
        this.name = "TokenBurnFailed";
        if (typeof Error.captureStackTrace === "function") {
          Error.captureStackTrace(this, _TokenBurnFailedError);
        }
      }
    };
    exports.TokenBurnFailedError = TokenBurnFailedError;
    createErrorFromCodeLookup.set(6019, () => new TokenBurnFailedError());
    createErrorFromNameLookup.set("TokenBurnFailed", () => new TokenBurnFailedError());
    var NotEnoughTokensError = class _NotEnoughTokensError extends Error {
      constructor() {
        super("Not enough tokens on the account");
        this.code = 6020;
        this.name = "NotEnoughTokens";
        if (typeof Error.captureStackTrace === "function") {
          Error.captureStackTrace(this, _NotEnoughTokensError);
        }
      }
    };
    exports.NotEnoughTokensError = NotEnoughTokensError;
    createErrorFromCodeLookup.set(6020, () => new NotEnoughTokensError());
    createErrorFromNameLookup.set("NotEnoughTokens", () => new NotEnoughTokensError());
    var TokenTransferFailedError = class _TokenTransferFailedError extends Error {
      constructor() {
        super("Token transfer failed");
        this.code = 6021;
        this.name = "TokenTransferFailed";
        if (typeof Error.captureStackTrace === "function") {
          Error.captureStackTrace(this, _TokenTransferFailedError);
        }
      }
    };
    exports.TokenTransferFailedError = TokenTransferFailedError;
    createErrorFromCodeLookup.set(6021, () => new TokenTransferFailedError());
    createErrorFromNameLookup.set("TokenTransferFailed", () => new TokenTransferFailedError());
    var MissingRequiredSignatureError = class _MissingRequiredSignatureError extends Error {
      constructor() {
        super("A signature was required but not found");
        this.code = 6022;
        this.name = "MissingRequiredSignature";
        if (typeof Error.captureStackTrace === "function") {
          Error.captureStackTrace(this, _MissingRequiredSignatureError);
        }
      }
    };
    exports.MissingRequiredSignatureError = MissingRequiredSignatureError;
    createErrorFromCodeLookup.set(6022, () => new MissingRequiredSignatureError());
    createErrorFromNameLookup.set("MissingRequiredSignature", () => new MissingRequiredSignatureError());
    var GatewayTokenInvalidError = class _GatewayTokenInvalidError extends Error {
      constructor() {
        super("Gateway token is not valid");
        this.code = 6023;
        this.name = "GatewayTokenInvalid";
        if (typeof Error.captureStackTrace === "function") {
          Error.captureStackTrace(this, _GatewayTokenInvalidError);
        }
      }
    };
    exports.GatewayTokenInvalidError = GatewayTokenInvalidError;
    createErrorFromCodeLookup.set(6023, () => new GatewayTokenInvalidError());
    createErrorFromNameLookup.set("GatewayTokenInvalid", () => new GatewayTokenInvalidError());
    var AfterEndDateError = class _AfterEndDateError extends Error {
      constructor() {
        super("Current time is after the set end date");
        this.code = 6024;
        this.name = "AfterEndDate";
        if (typeof Error.captureStackTrace === "function") {
          Error.captureStackTrace(this, _AfterEndDateError);
        }
      }
    };
    exports.AfterEndDateError = AfterEndDateError;
    createErrorFromCodeLookup.set(6024, () => new AfterEndDateError());
    createErrorFromNameLookup.set("AfterEndDate", () => new AfterEndDateError());
    var InvalidMintTimeError = class _InvalidMintTimeError extends Error {
      constructor() {
        super("Current time is not within the allowed mint time");
        this.code = 6025;
        this.name = "InvalidMintTime";
        if (typeof Error.captureStackTrace === "function") {
          Error.captureStackTrace(this, _InvalidMintTimeError);
        }
      }
    };
    exports.InvalidMintTimeError = InvalidMintTimeError;
    createErrorFromCodeLookup.set(6025, () => new InvalidMintTimeError());
    createErrorFromNameLookup.set("InvalidMintTime", () => new InvalidMintTimeError());
    var AddressNotFoundInAllowedListError = class _AddressNotFoundInAllowedListError extends Error {
      constructor() {
        super("Address not found on the allowed list");
        this.code = 6026;
        this.name = "AddressNotFoundInAllowedList";
        if (typeof Error.captureStackTrace === "function") {
          Error.captureStackTrace(this, _AddressNotFoundInAllowedListError);
        }
      }
    };
    exports.AddressNotFoundInAllowedListError = AddressNotFoundInAllowedListError;
    createErrorFromCodeLookup.set(6026, () => new AddressNotFoundInAllowedListError());
    createErrorFromNameLookup.set("AddressNotFoundInAllowedList", () => new AddressNotFoundInAllowedListError());
    var MissingAllowedListProofError = class _MissingAllowedListProofError extends Error {
      constructor() {
        super("Missing allowed list proof");
        this.code = 6027;
        this.name = "MissingAllowedListProof";
        if (typeof Error.captureStackTrace === "function") {
          Error.captureStackTrace(this, _MissingAllowedListProofError);
        }
      }
    };
    exports.MissingAllowedListProofError = MissingAllowedListProofError;
    createErrorFromCodeLookup.set(6027, () => new MissingAllowedListProofError());
    createErrorFromNameLookup.set("MissingAllowedListProof", () => new MissingAllowedListProofError());
    var AllowedListNotEnabledError = class _AllowedListNotEnabledError extends Error {
      constructor() {
        super("Allow list guard is not enabled");
        this.code = 6028;
        this.name = "AllowedListNotEnabled";
        if (typeof Error.captureStackTrace === "function") {
          Error.captureStackTrace(this, _AllowedListNotEnabledError);
        }
      }
    };
    exports.AllowedListNotEnabledError = AllowedListNotEnabledError;
    createErrorFromCodeLookup.set(6028, () => new AllowedListNotEnabledError());
    createErrorFromNameLookup.set("AllowedListNotEnabled", () => new AllowedListNotEnabledError());
    var AllowedMintLimitReachedError = class _AllowedMintLimitReachedError extends Error {
      constructor() {
        super("The maximum number of allowed mints was reached");
        this.code = 6029;
        this.name = "AllowedMintLimitReached";
        if (typeof Error.captureStackTrace === "function") {
          Error.captureStackTrace(this, _AllowedMintLimitReachedError);
        }
      }
    };
    exports.AllowedMintLimitReachedError = AllowedMintLimitReachedError;
    createErrorFromCodeLookup.set(6029, () => new AllowedMintLimitReachedError());
    createErrorFromNameLookup.set("AllowedMintLimitReached", () => new AllowedMintLimitReachedError());
    var InvalidNftCollectionError = class _InvalidNftCollectionError extends Error {
      constructor() {
        super("Invalid NFT collection");
        this.code = 6030;
        this.name = "InvalidNftCollection";
        if (typeof Error.captureStackTrace === "function") {
          Error.captureStackTrace(this, _InvalidNftCollectionError);
        }
      }
    };
    exports.InvalidNftCollectionError = InvalidNftCollectionError;
    createErrorFromCodeLookup.set(6030, () => new InvalidNftCollectionError());
    createErrorFromNameLookup.set("InvalidNftCollection", () => new InvalidNftCollectionError());
    var MissingNftError = class _MissingNftError extends Error {
      constructor() {
        super("Missing NFT on the account");
        this.code = 6031;
        this.name = "MissingNft";
        if (typeof Error.captureStackTrace === "function") {
          Error.captureStackTrace(this, _MissingNftError);
        }
      }
    };
    exports.MissingNftError = MissingNftError;
    createErrorFromCodeLookup.set(6031, () => new MissingNftError());
    createErrorFromNameLookup.set("MissingNft", () => new MissingNftError());
    var MaximumRedeemedAmountError = class _MaximumRedeemedAmountError extends Error {
      constructor() {
        super("Current redemeed items is at the set maximum amount");
        this.code = 6032;
        this.name = "MaximumRedeemedAmount";
        if (typeof Error.captureStackTrace === "function") {
          Error.captureStackTrace(this, _MaximumRedeemedAmountError);
        }
      }
    };
    exports.MaximumRedeemedAmountError = MaximumRedeemedAmountError;
    createErrorFromCodeLookup.set(6032, () => new MaximumRedeemedAmountError());
    createErrorFromNameLookup.set("MaximumRedeemedAmount", () => new MaximumRedeemedAmountError());
    var AddressNotAuthorizedError = class _AddressNotAuthorizedError extends Error {
      constructor() {
        super("Address not authorized");
        this.code = 6033;
        this.name = "AddressNotAuthorized";
        if (typeof Error.captureStackTrace === "function") {
          Error.captureStackTrace(this, _AddressNotAuthorizedError);
        }
      }
    };
    exports.AddressNotAuthorizedError = AddressNotAuthorizedError;
    createErrorFromCodeLookup.set(6033, () => new AddressNotAuthorizedError());
    createErrorFromNameLookup.set("AddressNotAuthorized", () => new AddressNotAuthorizedError());
    var MissingFreezeInstructionError = class _MissingFreezeInstructionError extends Error {
      constructor() {
        super("Missing freeze instruction data");
        this.code = 6034;
        this.name = "MissingFreezeInstruction";
        if (typeof Error.captureStackTrace === "function") {
          Error.captureStackTrace(this, _MissingFreezeInstructionError);
        }
      }
    };
    exports.MissingFreezeInstructionError = MissingFreezeInstructionError;
    createErrorFromCodeLookup.set(6034, () => new MissingFreezeInstructionError());
    createErrorFromNameLookup.set("MissingFreezeInstruction", () => new MissingFreezeInstructionError());
    var FreezeGuardNotEnabledError = class _FreezeGuardNotEnabledError extends Error {
      constructor() {
        super("Freeze guard must be enabled");
        this.code = 6035;
        this.name = "FreezeGuardNotEnabled";
        if (typeof Error.captureStackTrace === "function") {
          Error.captureStackTrace(this, _FreezeGuardNotEnabledError);
        }
      }
    };
    exports.FreezeGuardNotEnabledError = FreezeGuardNotEnabledError;
    createErrorFromCodeLookup.set(6035, () => new FreezeGuardNotEnabledError());
    createErrorFromNameLookup.set("FreezeGuardNotEnabled", () => new FreezeGuardNotEnabledError());
    var FreezeNotInitializedError = class _FreezeNotInitializedError extends Error {
      constructor() {
        super("Freeze must be initialized");
        this.code = 6036;
        this.name = "FreezeNotInitialized";
        if (typeof Error.captureStackTrace === "function") {
          Error.captureStackTrace(this, _FreezeNotInitializedError);
        }
      }
    };
    exports.FreezeNotInitializedError = FreezeNotInitializedError;
    createErrorFromCodeLookup.set(6036, () => new FreezeNotInitializedError());
    createErrorFromNameLookup.set("FreezeNotInitialized", () => new FreezeNotInitializedError());
    var MissingFreezePeriodError = class _MissingFreezePeriodError extends Error {
      constructor() {
        super("Missing freeze period");
        this.code = 6037;
        this.name = "MissingFreezePeriod";
        if (typeof Error.captureStackTrace === "function") {
          Error.captureStackTrace(this, _MissingFreezePeriodError);
        }
      }
    };
    exports.MissingFreezePeriodError = MissingFreezePeriodError;
    createErrorFromCodeLookup.set(6037, () => new MissingFreezePeriodError());
    createErrorFromNameLookup.set("MissingFreezePeriod", () => new MissingFreezePeriodError());
    var FreezeEscrowAlreadyExistsError = class _FreezeEscrowAlreadyExistsError extends Error {
      constructor() {
        super("The freeze escrow account already exists");
        this.code = 6038;
        this.name = "FreezeEscrowAlreadyExists";
        if (typeof Error.captureStackTrace === "function") {
          Error.captureStackTrace(this, _FreezeEscrowAlreadyExistsError);
        }
      }
    };
    exports.FreezeEscrowAlreadyExistsError = FreezeEscrowAlreadyExistsError;
    createErrorFromCodeLookup.set(6038, () => new FreezeEscrowAlreadyExistsError());
    createErrorFromNameLookup.set("FreezeEscrowAlreadyExists", () => new FreezeEscrowAlreadyExistsError());
    var ExceededMaximumFreezePeriodError = class _ExceededMaximumFreezePeriodError extends Error {
      constructor() {
        super("Maximum freeze period exceeded");
        this.code = 6039;
        this.name = "ExceededMaximumFreezePeriod";
        if (typeof Error.captureStackTrace === "function") {
          Error.captureStackTrace(this, _ExceededMaximumFreezePeriodError);
        }
      }
    };
    exports.ExceededMaximumFreezePeriodError = ExceededMaximumFreezePeriodError;
    createErrorFromCodeLookup.set(6039, () => new ExceededMaximumFreezePeriodError());
    createErrorFromNameLookup.set("ExceededMaximumFreezePeriod", () => new ExceededMaximumFreezePeriodError());
    var ThawNotEnabledError = class _ThawNotEnabledError extends Error {
      constructor() {
        super("Thaw is not enabled");
        this.code = 6040;
        this.name = "ThawNotEnabled";
        if (typeof Error.captureStackTrace === "function") {
          Error.captureStackTrace(this, _ThawNotEnabledError);
        }
      }
    };
    exports.ThawNotEnabledError = ThawNotEnabledError;
    createErrorFromCodeLookup.set(6040, () => new ThawNotEnabledError());
    createErrorFromNameLookup.set("ThawNotEnabled", () => new ThawNotEnabledError());
    var UnlockNotEnabledError = class _UnlockNotEnabledError extends Error {
      constructor() {
        super("Unlock is not enabled (not all NFTs are thawed)");
        this.code = 6041;
        this.name = "UnlockNotEnabled";
        if (typeof Error.captureStackTrace === "function") {
          Error.captureStackTrace(this, _UnlockNotEnabledError);
        }
      }
    };
    exports.UnlockNotEnabledError = UnlockNotEnabledError;
    createErrorFromCodeLookup.set(6041, () => new UnlockNotEnabledError());
    createErrorFromNameLookup.set("UnlockNotEnabled", () => new UnlockNotEnabledError());
    var DuplicatedGroupLabelError = class _DuplicatedGroupLabelError extends Error {
      constructor() {
        super("Duplicated group label");
        this.code = 6042;
        this.name = "DuplicatedGroupLabel";
        if (typeof Error.captureStackTrace === "function") {
          Error.captureStackTrace(this, _DuplicatedGroupLabelError);
        }
      }
    };
    exports.DuplicatedGroupLabelError = DuplicatedGroupLabelError;
    createErrorFromCodeLookup.set(6042, () => new DuplicatedGroupLabelError());
    createErrorFromNameLookup.set("DuplicatedGroupLabel", () => new DuplicatedGroupLabelError());
    var DuplicatedMintLimitIdError = class _DuplicatedMintLimitIdError extends Error {
      constructor() {
        super("Duplicated mint limit id");
        this.code = 6043;
        this.name = "DuplicatedMintLimitId";
        if (typeof Error.captureStackTrace === "function") {
          Error.captureStackTrace(this, _DuplicatedMintLimitIdError);
        }
      }
    };
    exports.DuplicatedMintLimitIdError = DuplicatedMintLimitIdError;
    createErrorFromCodeLookup.set(6043, () => new DuplicatedMintLimitIdError());
    createErrorFromNameLookup.set("DuplicatedMintLimitId", () => new DuplicatedMintLimitIdError());
    var UnauthorizedProgramFoundError = class _UnauthorizedProgramFoundError extends Error {
      constructor() {
        super("An unauthorized program was found in the transaction");
        this.code = 6044;
        this.name = "UnauthorizedProgramFound";
        if (typeof Error.captureStackTrace === "function") {
          Error.captureStackTrace(this, _UnauthorizedProgramFoundError);
        }
      }
    };
    exports.UnauthorizedProgramFoundError = UnauthorizedProgramFoundError;
    createErrorFromCodeLookup.set(6044, () => new UnauthorizedProgramFoundError());
    createErrorFromNameLookup.set("UnauthorizedProgramFound", () => new UnauthorizedProgramFoundError());
    var ExceededProgramListSizeError = class _ExceededProgramListSizeError extends Error {
      constructor() {
        super("Exceeded the maximum number of programs in the additional list");
        this.code = 6045;
        this.name = "ExceededProgramListSize";
        if (typeof Error.captureStackTrace === "function") {
          Error.captureStackTrace(this, _ExceededProgramListSizeError);
        }
      }
    };
    exports.ExceededProgramListSizeError = ExceededProgramListSizeError;
    createErrorFromCodeLookup.set(6045, () => new ExceededProgramListSizeError());
    createErrorFromNameLookup.set("ExceededProgramListSize", () => new ExceededProgramListSizeError());
    var AllocationNotInitializedError = class _AllocationNotInitializedError extends Error {
      constructor() {
        super("Allocation PDA not initialized");
        this.code = 6046;
        this.name = "AllocationNotInitialized";
        if (typeof Error.captureStackTrace === "function") {
          Error.captureStackTrace(this, _AllocationNotInitializedError);
        }
      }
    };
    exports.AllocationNotInitializedError = AllocationNotInitializedError;
    createErrorFromCodeLookup.set(6046, () => new AllocationNotInitializedError());
    createErrorFromNameLookup.set("AllocationNotInitialized", () => new AllocationNotInitializedError());
    var AllocationLimitReachedError = class _AllocationLimitReachedError extends Error {
      constructor() {
        super("Allocation limit was reached");
        this.code = 6047;
        this.name = "AllocationLimitReached";
        if (typeof Error.captureStackTrace === "function") {
          Error.captureStackTrace(this, _AllocationLimitReachedError);
        }
      }
    };
    exports.AllocationLimitReachedError = AllocationLimitReachedError;
    createErrorFromCodeLookup.set(6047, () => new AllocationLimitReachedError());
    createErrorFromNameLookup.set("AllocationLimitReached", () => new AllocationLimitReachedError());
    var AllocationGuardNotEnabledError = class _AllocationGuardNotEnabledError extends Error {
      constructor() {
        super("Allocation guard must be enabled");
        this.code = 6048;
        this.name = "AllocationGuardNotEnabled";
        if (typeof Error.captureStackTrace === "function") {
          Error.captureStackTrace(this, _AllocationGuardNotEnabledError);
        }
      }
    };
    exports.AllocationGuardNotEnabledError = AllocationGuardNotEnabledError;
    createErrorFromCodeLookup.set(6048, () => new AllocationGuardNotEnabledError());
    createErrorFromNameLookup.set("AllocationGuardNotEnabled", () => new AllocationGuardNotEnabledError());
    function errorFromCode(code2) {
      const createError = createErrorFromCodeLookup.get(code2);
      return createError != null ? createError() : null;
    }
    exports.errorFromCode = errorFromCode;
    function errorFromName(name) {
      const createError = createErrorFromNameLookup.get(name);
      return createError != null ? createError() : null;
    }
    exports.errorFromName = errorFromName;
  }
});

// ../../node_modules/@metaplex-foundation/mpl-candy-guard/dist/src/generated/instructions/initialize.js
var require_initialize = __commonJS({
  "../../node_modules/@metaplex-foundation/mpl-candy-guard/dist/src/generated/instructions/initialize.js"(exports) {
    "use strict";
    var __createBinding = exports && exports.__createBinding || (Object.create ? function(o2, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      var desc = Object.getOwnPropertyDescriptor(m, k);
      if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m[k];
        } };
      }
      Object.defineProperty(o2, k2, desc);
    } : function(o2, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      o2[k2] = m[k];
    });
    var __setModuleDefault = exports && exports.__setModuleDefault || (Object.create ? function(o2, v) {
      Object.defineProperty(o2, "default", { enumerable: true, value: v });
    } : function(o2, v) {
      o2["default"] = v;
    });
    var __importStar = exports && exports.__importStar || function(mod) {
      if (mod && mod.__esModule)
        return mod;
      var result = {};
      if (mod != null) {
        for (var k in mod)
          if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k))
            __createBinding(result, mod, k);
      }
      __setModuleDefault(result, mod);
      return result;
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.createInitializeInstruction = exports.initializeInstructionDiscriminator = exports.initializeStruct = void 0;
    var beet9 = __importStar(require_beet2());
    var web3 = __importStar((init_index_browser_esm(), __toCommonJS(index_browser_esm_exports)));
    exports.initializeStruct = new beet9.FixableBeetArgsStruct([
      ["instructionDiscriminator", beet9.uniformFixedSizeArray(beet9.u8, 8)],
      ["data", beet9.bytes]
    ], "InitializeInstructionArgs");
    exports.initializeInstructionDiscriminator = [175, 175, 109, 31, 13, 152, 155, 237];
    function createInitializeInstruction4(accounts, args, programId = new web3.PublicKey("Guard1JwRhJkVH6XZhzoYxeBVQe872VH6QggF4BWmS9g")) {
      var _a;
      const [data] = exports.initializeStruct.serialize(__spreadValues({
        instructionDiscriminator: exports.initializeInstructionDiscriminator
      }, args));
      const keys = [
        {
          pubkey: accounts.candyGuard,
          isWritable: true,
          isSigner: false
        },
        {
          pubkey: accounts.base,
          isWritable: false,
          isSigner: true
        },
        {
          pubkey: accounts.authority,
          isWritable: false,
          isSigner: false
        },
        {
          pubkey: accounts.payer,
          isWritable: true,
          isSigner: true
        },
        {
          pubkey: (_a = accounts.systemProgram) !== null && _a !== void 0 ? _a : web3.SystemProgram.programId,
          isWritable: false,
          isSigner: false
        }
      ];
      const ix = new web3.TransactionInstruction({
        programId,
        keys,
        data
      });
      return ix;
    }
    exports.createInitializeInstruction = createInitializeInstruction4;
  }
});

// ../../node_modules/@metaplex-foundation/mpl-candy-guard/dist/src/generated/instructions/mint.js
var require_mint2 = __commonJS({
  "../../node_modules/@metaplex-foundation/mpl-candy-guard/dist/src/generated/instructions/mint.js"(exports) {
    "use strict";
    var __createBinding = exports && exports.__createBinding || (Object.create ? function(o2, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      var desc = Object.getOwnPropertyDescriptor(m, k);
      if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m[k];
        } };
      }
      Object.defineProperty(o2, k2, desc);
    } : function(o2, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      o2[k2] = m[k];
    });
    var __setModuleDefault = exports && exports.__setModuleDefault || (Object.create ? function(o2, v) {
      Object.defineProperty(o2, "default", { enumerable: true, value: v });
    } : function(o2, v) {
      o2["default"] = v;
    });
    var __importStar = exports && exports.__importStar || function(mod) {
      if (mod && mod.__esModule)
        return mod;
      var result = {};
      if (mod != null) {
        for (var k in mod)
          if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k))
            __createBinding(result, mod, k);
      }
      __setModuleDefault(result, mod);
      return result;
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.createMintInstruction = exports.mintInstructionDiscriminator = exports.mintStruct = void 0;
    var splToken = __importStar(require_cjs4());
    var beet9 = __importStar(require_beet2());
    var web3 = __importStar((init_index_browser_esm(), __toCommonJS(index_browser_esm_exports)));
    exports.mintStruct = new beet9.FixableBeetArgsStruct([
      ["instructionDiscriminator", beet9.uniformFixedSizeArray(beet9.u8, 8)],
      ["mintArgs", beet9.bytes],
      ["label", beet9.coption(beet9.utf8String)]
    ], "MintInstructionArgs");
    exports.mintInstructionDiscriminator = [51, 57, 225, 47, 182, 146, 137, 166];
    function createMintInstruction3(accounts, args, programId = new web3.PublicKey("Guard1JwRhJkVH6XZhzoYxeBVQe872VH6QggF4BWmS9g")) {
      var _a, _b;
      const [data] = exports.mintStruct.serialize(__spreadValues({
        instructionDiscriminator: exports.mintInstructionDiscriminator
      }, args));
      const keys = [
        {
          pubkey: accounts.candyGuard,
          isWritable: false,
          isSigner: false
        },
        {
          pubkey: accounts.candyMachineProgram,
          isWritable: false,
          isSigner: false
        },
        {
          pubkey: accounts.candyMachine,
          isWritable: true,
          isSigner: false
        },
        {
          pubkey: accounts.candyMachineAuthorityPda,
          isWritable: true,
          isSigner: false
        },
        {
          pubkey: accounts.payer,
          isWritable: true,
          isSigner: true
        },
        {
          pubkey: accounts.nftMetadata,
          isWritable: true,
          isSigner: false
        },
        {
          pubkey: accounts.nftMint,
          isWritable: true,
          isSigner: false
        },
        {
          pubkey: accounts.nftMintAuthority,
          isWritable: false,
          isSigner: true
        },
        {
          pubkey: accounts.nftMasterEdition,
          isWritable: true,
          isSigner: false
        },
        {
          pubkey: accounts.collectionAuthorityRecord,
          isWritable: false,
          isSigner: false
        },
        {
          pubkey: accounts.collectionMint,
          isWritable: false,
          isSigner: false
        },
        {
          pubkey: accounts.collectionMetadata,
          isWritable: true,
          isSigner: false
        },
        {
          pubkey: accounts.collectionMasterEdition,
          isWritable: false,
          isSigner: false
        },
        {
          pubkey: accounts.collectionUpdateAuthority,
          isWritable: false,
          isSigner: false
        },
        {
          pubkey: accounts.tokenMetadataProgram,
          isWritable: false,
          isSigner: false
        },
        {
          pubkey: (_a = accounts.tokenProgram) !== null && _a !== void 0 ? _a : splToken.TOKEN_PROGRAM_ID,
          isWritable: false,
          isSigner: false
        },
        {
          pubkey: (_b = accounts.systemProgram) !== null && _b !== void 0 ? _b : web3.SystemProgram.programId,
          isWritable: false,
          isSigner: false
        },
        {
          pubkey: accounts.recentSlothashes,
          isWritable: false,
          isSigner: false
        },
        {
          pubkey: accounts.instructionSysvarAccount,
          isWritable: false,
          isSigner: false
        }
      ];
      const ix = new web3.TransactionInstruction({
        programId,
        keys,
        data
      });
      return ix;
    }
    exports.createMintInstruction = createMintInstruction3;
  }
});

// ../../node_modules/@metaplex-foundation/mpl-candy-guard/dist/src/generated/types/GuardType.js
var require_GuardType = __commonJS({
  "../../node_modules/@metaplex-foundation/mpl-candy-guard/dist/src/generated/types/GuardType.js"(exports) {
    "use strict";
    var __createBinding = exports && exports.__createBinding || (Object.create ? function(o2, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      var desc = Object.getOwnPropertyDescriptor(m, k);
      if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m[k];
        } };
      }
      Object.defineProperty(o2, k2, desc);
    } : function(o2, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      o2[k2] = m[k];
    });
    var __setModuleDefault = exports && exports.__setModuleDefault || (Object.create ? function(o2, v) {
      Object.defineProperty(o2, "default", { enumerable: true, value: v });
    } : function(o2, v) {
      o2["default"] = v;
    });
    var __importStar = exports && exports.__importStar || function(mod) {
      if (mod && mod.__esModule)
        return mod;
      var result = {};
      if (mod != null) {
        for (var k in mod)
          if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k))
            __createBinding(result, mod, k);
      }
      __setModuleDefault(result, mod);
      return result;
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.guardTypeBeet = exports.GuardType = void 0;
    var beet9 = __importStar(require_beet2());
    var GuardType;
    (function(GuardType2) {
      GuardType2[GuardType2["BotTax"] = 0] = "BotTax";
      GuardType2[GuardType2["SolPayment"] = 1] = "SolPayment";
      GuardType2[GuardType2["TokenPayment"] = 2] = "TokenPayment";
      GuardType2[GuardType2["StartDate"] = 3] = "StartDate";
      GuardType2[GuardType2["ThirdPartySigner"] = 4] = "ThirdPartySigner";
      GuardType2[GuardType2["TokenGate"] = 5] = "TokenGate";
      GuardType2[GuardType2["Gatekeeper"] = 6] = "Gatekeeper";
      GuardType2[GuardType2["EndDate"] = 7] = "EndDate";
      GuardType2[GuardType2["AllowList"] = 8] = "AllowList";
      GuardType2[GuardType2["MintLimit"] = 9] = "MintLimit";
      GuardType2[GuardType2["NftPayment"] = 10] = "NftPayment";
      GuardType2[GuardType2["RedeemedAmount"] = 11] = "RedeemedAmount";
      GuardType2[GuardType2["AddressGate"] = 12] = "AddressGate";
      GuardType2[GuardType2["NftGate"] = 13] = "NftGate";
      GuardType2[GuardType2["NftBurn"] = 14] = "NftBurn";
      GuardType2[GuardType2["TokenBurn"] = 15] = "TokenBurn";
      GuardType2[GuardType2["FreezeSolPayment"] = 16] = "FreezeSolPayment";
      GuardType2[GuardType2["FreezeTokenPayment"] = 17] = "FreezeTokenPayment";
      GuardType2[GuardType2["ProgramGate"] = 18] = "ProgramGate";
      GuardType2[GuardType2["Allocation"] = 19] = "Allocation";
    })(GuardType = exports.GuardType || (exports.GuardType = {}));
    exports.guardTypeBeet = beet9.fixedScalarEnum(GuardType);
  }
});

// ../../node_modules/@metaplex-foundation/mpl-candy-guard/dist/src/generated/types/RouteArgs.js
var require_RouteArgs = __commonJS({
  "../../node_modules/@metaplex-foundation/mpl-candy-guard/dist/src/generated/types/RouteArgs.js"(exports) {
    "use strict";
    var __createBinding = exports && exports.__createBinding || (Object.create ? function(o2, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      var desc = Object.getOwnPropertyDescriptor(m, k);
      if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m[k];
        } };
      }
      Object.defineProperty(o2, k2, desc);
    } : function(o2, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      o2[k2] = m[k];
    });
    var __setModuleDefault = exports && exports.__setModuleDefault || (Object.create ? function(o2, v) {
      Object.defineProperty(o2, "default", { enumerable: true, value: v });
    } : function(o2, v) {
      o2["default"] = v;
    });
    var __importStar = exports && exports.__importStar || function(mod) {
      if (mod && mod.__esModule)
        return mod;
      var result = {};
      if (mod != null) {
        for (var k in mod)
          if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k))
            __createBinding(result, mod, k);
      }
      __setModuleDefault(result, mod);
      return result;
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.routeArgsBeet = void 0;
    var beet9 = __importStar(require_beet2());
    var GuardType_1 = require_GuardType();
    exports.routeArgsBeet = new beet9.FixableBeetArgsStruct([
      ["guard", GuardType_1.guardTypeBeet],
      ["data", beet9.bytes]
    ], "RouteArgs");
  }
});

// ../../node_modules/@metaplex-foundation/mpl-candy-guard/dist/src/generated/instructions/route.js
var require_route = __commonJS({
  "../../node_modules/@metaplex-foundation/mpl-candy-guard/dist/src/generated/instructions/route.js"(exports) {
    "use strict";
    var __createBinding = exports && exports.__createBinding || (Object.create ? function(o2, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      var desc = Object.getOwnPropertyDescriptor(m, k);
      if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m[k];
        } };
      }
      Object.defineProperty(o2, k2, desc);
    } : function(o2, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      o2[k2] = m[k];
    });
    var __setModuleDefault = exports && exports.__setModuleDefault || (Object.create ? function(o2, v) {
      Object.defineProperty(o2, "default", { enumerable: true, value: v });
    } : function(o2, v) {
      o2["default"] = v;
    });
    var __importStar = exports && exports.__importStar || function(mod) {
      if (mod && mod.__esModule)
        return mod;
      var result = {};
      if (mod != null) {
        for (var k in mod)
          if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k))
            __createBinding(result, mod, k);
      }
      __setModuleDefault(result, mod);
      return result;
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.createRouteInstruction = exports.routeInstructionDiscriminator = exports.routeStruct = void 0;
    var beet9 = __importStar(require_beet2());
    var web3 = __importStar((init_index_browser_esm(), __toCommonJS(index_browser_esm_exports)));
    var RouteArgs_1 = require_RouteArgs();
    exports.routeStruct = new beet9.FixableBeetArgsStruct([
      ["instructionDiscriminator", beet9.uniformFixedSizeArray(beet9.u8, 8)],
      ["args", RouteArgs_1.routeArgsBeet],
      ["label", beet9.coption(beet9.utf8String)]
    ], "RouteInstructionArgs");
    exports.routeInstructionDiscriminator = [229, 23, 203, 151, 122, 227, 173, 42];
    function createRouteInstruction2(accounts, args, programId = new web3.PublicKey("Guard1JwRhJkVH6XZhzoYxeBVQe872VH6QggF4BWmS9g")) {
      const [data] = exports.routeStruct.serialize(__spreadValues({
        instructionDiscriminator: exports.routeInstructionDiscriminator
      }, args));
      const keys = [
        {
          pubkey: accounts.candyGuard,
          isWritable: false,
          isSigner: false
        },
        {
          pubkey: accounts.candyMachine,
          isWritable: true,
          isSigner: false
        },
        {
          pubkey: accounts.payer,
          isWritable: true,
          isSigner: true
        }
      ];
      const ix = new web3.TransactionInstruction({
        programId,
        keys,
        data
      });
      return ix;
    }
    exports.createRouteInstruction = createRouteInstruction2;
  }
});

// ../../node_modules/@metaplex-foundation/mpl-candy-guard/dist/src/generated/instructions/setAuthority.js
var require_setAuthority3 = __commonJS({
  "../../node_modules/@metaplex-foundation/mpl-candy-guard/dist/src/generated/instructions/setAuthority.js"(exports) {
    "use strict";
    var __createBinding = exports && exports.__createBinding || (Object.create ? function(o2, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      var desc = Object.getOwnPropertyDescriptor(m, k);
      if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m[k];
        } };
      }
      Object.defineProperty(o2, k2, desc);
    } : function(o2, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      o2[k2] = m[k];
    });
    var __setModuleDefault = exports && exports.__setModuleDefault || (Object.create ? function(o2, v) {
      Object.defineProperty(o2, "default", { enumerable: true, value: v });
    } : function(o2, v) {
      o2["default"] = v;
    });
    var __importStar = exports && exports.__importStar || function(mod) {
      if (mod && mod.__esModule)
        return mod;
      var result = {};
      if (mod != null) {
        for (var k in mod)
          if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k))
            __createBinding(result, mod, k);
      }
      __setModuleDefault(result, mod);
      return result;
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.createSetAuthorityInstruction = exports.setAuthorityInstructionDiscriminator = exports.setAuthorityStruct = void 0;
    var web3 = __importStar((init_index_browser_esm(), __toCommonJS(index_browser_esm_exports)));
    var beetSolana = __importStar(require_beet_solana5());
    var beet9 = __importStar(require_beet2());
    exports.setAuthorityStruct = new beet9.BeetArgsStruct([
      ["instructionDiscriminator", beet9.uniformFixedSizeArray(beet9.u8, 8)],
      ["newAuthority", beetSolana.publicKey]
    ], "SetAuthorityInstructionArgs");
    exports.setAuthorityInstructionDiscriminator = [133, 250, 37, 21, 110, 163, 26, 121];
    function createSetAuthorityInstruction4(accounts, args, programId = new web3.PublicKey("Guard1JwRhJkVH6XZhzoYxeBVQe872VH6QggF4BWmS9g")) {
      const [data] = exports.setAuthorityStruct.serialize(__spreadValues({
        instructionDiscriminator: exports.setAuthorityInstructionDiscriminator
      }, args));
      const keys = [
        {
          pubkey: accounts.candyGuard,
          isWritable: true,
          isSigner: false
        },
        {
          pubkey: accounts.authority,
          isWritable: false,
          isSigner: true
        }
      ];
      const ix = new web3.TransactionInstruction({
        programId,
        keys,
        data
      });
      return ix;
    }
    exports.createSetAuthorityInstruction = createSetAuthorityInstruction4;
  }
});

// ../../node_modules/@metaplex-foundation/mpl-candy-guard/dist/src/generated/instructions/unwrap.js
var require_unwrap = __commonJS({
  "../../node_modules/@metaplex-foundation/mpl-candy-guard/dist/src/generated/instructions/unwrap.js"(exports) {
    "use strict";
    var __createBinding = exports && exports.__createBinding || (Object.create ? function(o2, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      var desc = Object.getOwnPropertyDescriptor(m, k);
      if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m[k];
        } };
      }
      Object.defineProperty(o2, k2, desc);
    } : function(o2, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      o2[k2] = m[k];
    });
    var __setModuleDefault = exports && exports.__setModuleDefault || (Object.create ? function(o2, v) {
      Object.defineProperty(o2, "default", { enumerable: true, value: v });
    } : function(o2, v) {
      o2["default"] = v;
    });
    var __importStar = exports && exports.__importStar || function(mod) {
      if (mod && mod.__esModule)
        return mod;
      var result = {};
      if (mod != null) {
        for (var k in mod)
          if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k))
            __createBinding(result, mod, k);
      }
      __setModuleDefault(result, mod);
      return result;
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.createUnwrapInstruction = exports.unwrapInstructionDiscriminator = exports.unwrapStruct = void 0;
    var beet9 = __importStar(require_beet2());
    var web3 = __importStar((init_index_browser_esm(), __toCommonJS(index_browser_esm_exports)));
    exports.unwrapStruct = new beet9.BeetArgsStruct([["instructionDiscriminator", beet9.uniformFixedSizeArray(beet9.u8, 8)]], "UnwrapInstructionArgs");
    exports.unwrapInstructionDiscriminator = [126, 175, 198, 14, 212, 69, 50, 44];
    function createUnwrapInstruction2(accounts, programId = new web3.PublicKey("Guard1JwRhJkVH6XZhzoYxeBVQe872VH6QggF4BWmS9g")) {
      const [data] = exports.unwrapStruct.serialize({
        instructionDiscriminator: exports.unwrapInstructionDiscriminator
      });
      const keys = [
        {
          pubkey: accounts.candyGuard,
          isWritable: false,
          isSigner: false
        },
        {
          pubkey: accounts.authority,
          isWritable: false,
          isSigner: true
        },
        {
          pubkey: accounts.candyMachine,
          isWritable: true,
          isSigner: false
        },
        {
          pubkey: accounts.candyMachineAuthority,
          isWritable: false,
          isSigner: true
        },
        {
          pubkey: accounts.candyMachineProgram,
          isWritable: false,
          isSigner: false
        }
      ];
      const ix = new web3.TransactionInstruction({
        programId,
        keys,
        data
      });
      return ix;
    }
    exports.createUnwrapInstruction = createUnwrapInstruction2;
  }
});

// ../../node_modules/@metaplex-foundation/mpl-candy-guard/dist/src/generated/instructions/update.js
var require_update = __commonJS({
  "../../node_modules/@metaplex-foundation/mpl-candy-guard/dist/src/generated/instructions/update.js"(exports) {
    "use strict";
    var __createBinding = exports && exports.__createBinding || (Object.create ? function(o2, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      var desc = Object.getOwnPropertyDescriptor(m, k);
      if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m[k];
        } };
      }
      Object.defineProperty(o2, k2, desc);
    } : function(o2, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      o2[k2] = m[k];
    });
    var __setModuleDefault = exports && exports.__setModuleDefault || (Object.create ? function(o2, v) {
      Object.defineProperty(o2, "default", { enumerable: true, value: v });
    } : function(o2, v) {
      o2["default"] = v;
    });
    var __importStar = exports && exports.__importStar || function(mod) {
      if (mod && mod.__esModule)
        return mod;
      var result = {};
      if (mod != null) {
        for (var k in mod)
          if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k))
            __createBinding(result, mod, k);
      }
      __setModuleDefault(result, mod);
      return result;
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.createUpdateInstruction = exports.updateInstructionDiscriminator = exports.updateStruct = void 0;
    var beet9 = __importStar(require_beet2());
    var web3 = __importStar((init_index_browser_esm(), __toCommonJS(index_browser_esm_exports)));
    exports.updateStruct = new beet9.FixableBeetArgsStruct([
      ["instructionDiscriminator", beet9.uniformFixedSizeArray(beet9.u8, 8)],
      ["data", beet9.bytes]
    ], "UpdateInstructionArgs");
    exports.updateInstructionDiscriminator = [219, 200, 88, 176, 158, 63, 253, 127];
    function createUpdateInstruction4(accounts, args, programId = new web3.PublicKey("Guard1JwRhJkVH6XZhzoYxeBVQe872VH6QggF4BWmS9g")) {
      var _a;
      const [data] = exports.updateStruct.serialize(__spreadValues({
        instructionDiscriminator: exports.updateInstructionDiscriminator
      }, args));
      const keys = [
        {
          pubkey: accounts.candyGuard,
          isWritable: true,
          isSigner: false
        },
        {
          pubkey: accounts.authority,
          isWritable: false,
          isSigner: true
        },
        {
          pubkey: accounts.payer,
          isWritable: false,
          isSigner: true
        },
        {
          pubkey: (_a = accounts.systemProgram) !== null && _a !== void 0 ? _a : web3.SystemProgram.programId,
          isWritable: false,
          isSigner: false
        }
      ];
      const ix = new web3.TransactionInstruction({
        programId,
        keys,
        data
      });
      return ix;
    }
    exports.createUpdateInstruction = createUpdateInstruction4;
  }
});

// ../../node_modules/@metaplex-foundation/mpl-candy-guard/dist/src/generated/instructions/withdraw.js
var require_withdraw = __commonJS({
  "../../node_modules/@metaplex-foundation/mpl-candy-guard/dist/src/generated/instructions/withdraw.js"(exports) {
    "use strict";
    var __createBinding = exports && exports.__createBinding || (Object.create ? function(o2, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      var desc = Object.getOwnPropertyDescriptor(m, k);
      if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m[k];
        } };
      }
      Object.defineProperty(o2, k2, desc);
    } : function(o2, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      o2[k2] = m[k];
    });
    var __setModuleDefault = exports && exports.__setModuleDefault || (Object.create ? function(o2, v) {
      Object.defineProperty(o2, "default", { enumerable: true, value: v });
    } : function(o2, v) {
      o2["default"] = v;
    });
    var __importStar = exports && exports.__importStar || function(mod) {
      if (mod && mod.__esModule)
        return mod;
      var result = {};
      if (mod != null) {
        for (var k in mod)
          if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k))
            __createBinding(result, mod, k);
      }
      __setModuleDefault(result, mod);
      return result;
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.createWithdrawInstruction = exports.withdrawInstructionDiscriminator = exports.withdrawStruct = void 0;
    var beet9 = __importStar(require_beet2());
    var web3 = __importStar((init_index_browser_esm(), __toCommonJS(index_browser_esm_exports)));
    exports.withdrawStruct = new beet9.BeetArgsStruct([["instructionDiscriminator", beet9.uniformFixedSizeArray(beet9.u8, 8)]], "WithdrawInstructionArgs");
    exports.withdrawInstructionDiscriminator = [183, 18, 70, 156, 148, 109, 161, 34];
    function createWithdrawInstruction4(accounts, programId = new web3.PublicKey("Guard1JwRhJkVH6XZhzoYxeBVQe872VH6QggF4BWmS9g")) {
      const [data] = exports.withdrawStruct.serialize({
        instructionDiscriminator: exports.withdrawInstructionDiscriminator
      });
      const keys = [
        {
          pubkey: accounts.candyGuard,
          isWritable: true,
          isSigner: false
        },
        {
          pubkey: accounts.authority,
          isWritable: true,
          isSigner: true
        }
      ];
      const ix = new web3.TransactionInstruction({
        programId,
        keys,
        data
      });
      return ix;
    }
    exports.createWithdrawInstruction = createWithdrawInstruction4;
  }
});

// ../../node_modules/@metaplex-foundation/mpl-candy-guard/dist/src/generated/instructions/wrap.js
var require_wrap = __commonJS({
  "../../node_modules/@metaplex-foundation/mpl-candy-guard/dist/src/generated/instructions/wrap.js"(exports) {
    "use strict";
    var __createBinding = exports && exports.__createBinding || (Object.create ? function(o2, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      var desc = Object.getOwnPropertyDescriptor(m, k);
      if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m[k];
        } };
      }
      Object.defineProperty(o2, k2, desc);
    } : function(o2, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      o2[k2] = m[k];
    });
    var __setModuleDefault = exports && exports.__setModuleDefault || (Object.create ? function(o2, v) {
      Object.defineProperty(o2, "default", { enumerable: true, value: v });
    } : function(o2, v) {
      o2["default"] = v;
    });
    var __importStar = exports && exports.__importStar || function(mod) {
      if (mod && mod.__esModule)
        return mod;
      var result = {};
      if (mod != null) {
        for (var k in mod)
          if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k))
            __createBinding(result, mod, k);
      }
      __setModuleDefault(result, mod);
      return result;
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.createWrapInstruction = exports.wrapInstructionDiscriminator = exports.wrapStruct = void 0;
    var beet9 = __importStar(require_beet2());
    var web3 = __importStar((init_index_browser_esm(), __toCommonJS(index_browser_esm_exports)));
    exports.wrapStruct = new beet9.BeetArgsStruct([["instructionDiscriminator", beet9.uniformFixedSizeArray(beet9.u8, 8)]], "WrapInstructionArgs");
    exports.wrapInstructionDiscriminator = [178, 40, 10, 189, 228, 129, 186, 140];
    function createWrapInstruction2(accounts, programId = new web3.PublicKey("Guard1JwRhJkVH6XZhzoYxeBVQe872VH6QggF4BWmS9g")) {
      const [data] = exports.wrapStruct.serialize({
        instructionDiscriminator: exports.wrapInstructionDiscriminator
      });
      const keys = [
        {
          pubkey: accounts.candyGuard,
          isWritable: false,
          isSigner: false
        },
        {
          pubkey: accounts.authority,
          isWritable: false,
          isSigner: true
        },
        {
          pubkey: accounts.candyMachine,
          isWritable: true,
          isSigner: false
        },
        {
          pubkey: accounts.candyMachineProgram,
          isWritable: false,
          isSigner: false
        },
        {
          pubkey: accounts.candyMachineAuthority,
          isWritable: false,
          isSigner: true
        }
      ];
      const ix = new web3.TransactionInstruction({
        programId,
        keys,
        data
      });
      return ix;
    }
    exports.createWrapInstruction = createWrapInstruction2;
  }
});

// ../../node_modules/@metaplex-foundation/mpl-candy-guard/dist/src/generated/instructions/index.js
var require_instructions14 = __commonJS({
  "../../node_modules/@metaplex-foundation/mpl-candy-guard/dist/src/generated/instructions/index.js"(exports) {
    "use strict";
    var __createBinding = exports && exports.__createBinding || (Object.create ? function(o2, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      var desc = Object.getOwnPropertyDescriptor(m, k);
      if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m[k];
        } };
      }
      Object.defineProperty(o2, k2, desc);
    } : function(o2, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      o2[k2] = m[k];
    });
    var __exportStar = exports && exports.__exportStar || function(m, exports2) {
      for (var p in m)
        if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports2, p))
          __createBinding(exports2, m, p);
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    __exportStar(require_initialize(), exports);
    __exportStar(require_mint2(), exports);
    __exportStar(require_route(), exports);
    __exportStar(require_setAuthority3(), exports);
    __exportStar(require_unwrap(), exports);
    __exportStar(require_update(), exports);
    __exportStar(require_withdraw(), exports);
    __exportStar(require_wrap(), exports);
  }
});

// ../../node_modules/@metaplex-foundation/mpl-candy-guard/dist/src/generated/types/AddressGate.js
var require_AddressGate = __commonJS({
  "../../node_modules/@metaplex-foundation/mpl-candy-guard/dist/src/generated/types/AddressGate.js"(exports) {
    "use strict";
    var __createBinding = exports && exports.__createBinding || (Object.create ? function(o2, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      var desc = Object.getOwnPropertyDescriptor(m, k);
      if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m[k];
        } };
      }
      Object.defineProperty(o2, k2, desc);
    } : function(o2, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      o2[k2] = m[k];
    });
    var __setModuleDefault = exports && exports.__setModuleDefault || (Object.create ? function(o2, v) {
      Object.defineProperty(o2, "default", { enumerable: true, value: v });
    } : function(o2, v) {
      o2["default"] = v;
    });
    var __importStar = exports && exports.__importStar || function(mod) {
      if (mod && mod.__esModule)
        return mod;
      var result = {};
      if (mod != null) {
        for (var k in mod)
          if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k))
            __createBinding(result, mod, k);
      }
      __setModuleDefault(result, mod);
      return result;
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.addressGateBeet = void 0;
    var beetSolana = __importStar(require_beet_solana5());
    var beet9 = __importStar(require_beet2());
    exports.addressGateBeet = new beet9.BeetArgsStruct([["address", beetSolana.publicKey]], "AddressGate");
  }
});

// ../../node_modules/@metaplex-foundation/mpl-candy-guard/dist/src/generated/types/Allocation.js
var require_Allocation = __commonJS({
  "../../node_modules/@metaplex-foundation/mpl-candy-guard/dist/src/generated/types/Allocation.js"(exports) {
    "use strict";
    var __createBinding = exports && exports.__createBinding || (Object.create ? function(o2, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      var desc = Object.getOwnPropertyDescriptor(m, k);
      if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m[k];
        } };
      }
      Object.defineProperty(o2, k2, desc);
    } : function(o2, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      o2[k2] = m[k];
    });
    var __setModuleDefault = exports && exports.__setModuleDefault || (Object.create ? function(o2, v) {
      Object.defineProperty(o2, "default", { enumerable: true, value: v });
    } : function(o2, v) {
      o2["default"] = v;
    });
    var __importStar = exports && exports.__importStar || function(mod) {
      if (mod && mod.__esModule)
        return mod;
      var result = {};
      if (mod != null) {
        for (var k in mod)
          if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k))
            __createBinding(result, mod, k);
      }
      __setModuleDefault(result, mod);
      return result;
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.allocationBeet = void 0;
    var beet9 = __importStar(require_beet2());
    exports.allocationBeet = new beet9.BeetArgsStruct([
      ["id", beet9.u8],
      ["size", beet9.u32]
    ], "Allocation");
  }
});

// ../../node_modules/@metaplex-foundation/mpl-candy-guard/dist/src/generated/types/AllowList.js
var require_AllowList = __commonJS({
  "../../node_modules/@metaplex-foundation/mpl-candy-guard/dist/src/generated/types/AllowList.js"(exports) {
    "use strict";
    var __createBinding = exports && exports.__createBinding || (Object.create ? function(o2, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      var desc = Object.getOwnPropertyDescriptor(m, k);
      if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m[k];
        } };
      }
      Object.defineProperty(o2, k2, desc);
    } : function(o2, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      o2[k2] = m[k];
    });
    var __setModuleDefault = exports && exports.__setModuleDefault || (Object.create ? function(o2, v) {
      Object.defineProperty(o2, "default", { enumerable: true, value: v });
    } : function(o2, v) {
      o2["default"] = v;
    });
    var __importStar = exports && exports.__importStar || function(mod) {
      if (mod && mod.__esModule)
        return mod;
      var result = {};
      if (mod != null) {
        for (var k in mod)
          if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k))
            __createBinding(result, mod, k);
      }
      __setModuleDefault(result, mod);
      return result;
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.allowListBeet = void 0;
    var beet9 = __importStar(require_beet2());
    exports.allowListBeet = new beet9.BeetArgsStruct([["merkleRoot", beet9.uniformFixedSizeArray(beet9.u8, 32)]], "AllowList");
  }
});

// ../../node_modules/@metaplex-foundation/mpl-candy-guard/dist/src/generated/types/AllowListProof.js
var require_AllowListProof = __commonJS({
  "../../node_modules/@metaplex-foundation/mpl-candy-guard/dist/src/generated/types/AllowListProof.js"(exports) {
    "use strict";
    var __createBinding = exports && exports.__createBinding || (Object.create ? function(o2, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      var desc = Object.getOwnPropertyDescriptor(m, k);
      if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m[k];
        } };
      }
      Object.defineProperty(o2, k2, desc);
    } : function(o2, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      o2[k2] = m[k];
    });
    var __setModuleDefault = exports && exports.__setModuleDefault || (Object.create ? function(o2, v) {
      Object.defineProperty(o2, "default", { enumerable: true, value: v });
    } : function(o2, v) {
      o2["default"] = v;
    });
    var __importStar = exports && exports.__importStar || function(mod) {
      if (mod && mod.__esModule)
        return mod;
      var result = {};
      if (mod != null) {
        for (var k in mod)
          if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k))
            __createBinding(result, mod, k);
      }
      __setModuleDefault(result, mod);
      return result;
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.allowListProofBeet = void 0;
    var beet9 = __importStar(require_beet2());
    exports.allowListProofBeet = new beet9.BeetArgsStruct([["timestamp", beet9.i64]], "AllowListProof");
  }
});

// ../../node_modules/@metaplex-foundation/mpl-candy-guard/dist/src/generated/types/BotTax.js
var require_BotTax = __commonJS({
  "../../node_modules/@metaplex-foundation/mpl-candy-guard/dist/src/generated/types/BotTax.js"(exports) {
    "use strict";
    var __createBinding = exports && exports.__createBinding || (Object.create ? function(o2, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      var desc = Object.getOwnPropertyDescriptor(m, k);
      if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m[k];
        } };
      }
      Object.defineProperty(o2, k2, desc);
    } : function(o2, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      o2[k2] = m[k];
    });
    var __setModuleDefault = exports && exports.__setModuleDefault || (Object.create ? function(o2, v) {
      Object.defineProperty(o2, "default", { enumerable: true, value: v });
    } : function(o2, v) {
      o2["default"] = v;
    });
    var __importStar = exports && exports.__importStar || function(mod) {
      if (mod && mod.__esModule)
        return mod;
      var result = {};
      if (mod != null) {
        for (var k in mod)
          if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k))
            __createBinding(result, mod, k);
      }
      __setModuleDefault(result, mod);
      return result;
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.botTaxBeet = void 0;
    var beet9 = __importStar(require_beet2());
    exports.botTaxBeet = new beet9.BeetArgsStruct([
      ["lamports", beet9.u64],
      ["lastInstruction", beet9.bool]
    ], "BotTax");
  }
});

// ../../node_modules/@metaplex-foundation/mpl-candy-guard/dist/src/generated/types/SolPayment.js
var require_SolPayment = __commonJS({
  "../../node_modules/@metaplex-foundation/mpl-candy-guard/dist/src/generated/types/SolPayment.js"(exports) {
    "use strict";
    var __createBinding = exports && exports.__createBinding || (Object.create ? function(o2, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      var desc = Object.getOwnPropertyDescriptor(m, k);
      if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m[k];
        } };
      }
      Object.defineProperty(o2, k2, desc);
    } : function(o2, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      o2[k2] = m[k];
    });
    var __setModuleDefault = exports && exports.__setModuleDefault || (Object.create ? function(o2, v) {
      Object.defineProperty(o2, "default", { enumerable: true, value: v });
    } : function(o2, v) {
      o2["default"] = v;
    });
    var __importStar = exports && exports.__importStar || function(mod) {
      if (mod && mod.__esModule)
        return mod;
      var result = {};
      if (mod != null) {
        for (var k in mod)
          if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k))
            __createBinding(result, mod, k);
      }
      __setModuleDefault(result, mod);
      return result;
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.solPaymentBeet = void 0;
    var beet9 = __importStar(require_beet2());
    var beetSolana = __importStar(require_beet_solana5());
    exports.solPaymentBeet = new beet9.BeetArgsStruct([
      ["lamports", beet9.u64],
      ["destination", beetSolana.publicKey]
    ], "SolPayment");
  }
});

// ../../node_modules/@metaplex-foundation/mpl-candy-guard/dist/src/generated/types/TokenPayment.js
var require_TokenPayment = __commonJS({
  "../../node_modules/@metaplex-foundation/mpl-candy-guard/dist/src/generated/types/TokenPayment.js"(exports) {
    "use strict";
    var __createBinding = exports && exports.__createBinding || (Object.create ? function(o2, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      var desc = Object.getOwnPropertyDescriptor(m, k);
      if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m[k];
        } };
      }
      Object.defineProperty(o2, k2, desc);
    } : function(o2, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      o2[k2] = m[k];
    });
    var __setModuleDefault = exports && exports.__setModuleDefault || (Object.create ? function(o2, v) {
      Object.defineProperty(o2, "default", { enumerable: true, value: v });
    } : function(o2, v) {
      o2["default"] = v;
    });
    var __importStar = exports && exports.__importStar || function(mod) {
      if (mod && mod.__esModule)
        return mod;
      var result = {};
      if (mod != null) {
        for (var k in mod)
          if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k))
            __createBinding(result, mod, k);
      }
      __setModuleDefault(result, mod);
      return result;
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.tokenPaymentBeet = void 0;
    var beet9 = __importStar(require_beet2());
    var beetSolana = __importStar(require_beet_solana5());
    exports.tokenPaymentBeet = new beet9.BeetArgsStruct([
      ["amount", beet9.u64],
      ["mint", beetSolana.publicKey],
      ["destinationAta", beetSolana.publicKey]
    ], "TokenPayment");
  }
});

// ../../node_modules/@metaplex-foundation/mpl-candy-guard/dist/src/generated/types/StartDate.js
var require_StartDate = __commonJS({
  "../../node_modules/@metaplex-foundation/mpl-candy-guard/dist/src/generated/types/StartDate.js"(exports) {
    "use strict";
    var __createBinding = exports && exports.__createBinding || (Object.create ? function(o2, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      var desc = Object.getOwnPropertyDescriptor(m, k);
      if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m[k];
        } };
      }
      Object.defineProperty(o2, k2, desc);
    } : function(o2, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      o2[k2] = m[k];
    });
    var __setModuleDefault = exports && exports.__setModuleDefault || (Object.create ? function(o2, v) {
      Object.defineProperty(o2, "default", { enumerable: true, value: v });
    } : function(o2, v) {
      o2["default"] = v;
    });
    var __importStar = exports && exports.__importStar || function(mod) {
      if (mod && mod.__esModule)
        return mod;
      var result = {};
      if (mod != null) {
        for (var k in mod)
          if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k))
            __createBinding(result, mod, k);
      }
      __setModuleDefault(result, mod);
      return result;
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.startDateBeet = void 0;
    var beet9 = __importStar(require_beet2());
    exports.startDateBeet = new beet9.BeetArgsStruct([["date", beet9.i64]], "StartDate");
  }
});

// ../../node_modules/@metaplex-foundation/mpl-candy-guard/dist/src/generated/types/ThirdPartySigner.js
var require_ThirdPartySigner = __commonJS({
  "../../node_modules/@metaplex-foundation/mpl-candy-guard/dist/src/generated/types/ThirdPartySigner.js"(exports) {
    "use strict";
    var __createBinding = exports && exports.__createBinding || (Object.create ? function(o2, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      var desc = Object.getOwnPropertyDescriptor(m, k);
      if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m[k];
        } };
      }
      Object.defineProperty(o2, k2, desc);
    } : function(o2, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      o2[k2] = m[k];
    });
    var __setModuleDefault = exports && exports.__setModuleDefault || (Object.create ? function(o2, v) {
      Object.defineProperty(o2, "default", { enumerable: true, value: v });
    } : function(o2, v) {
      o2["default"] = v;
    });
    var __importStar = exports && exports.__importStar || function(mod) {
      if (mod && mod.__esModule)
        return mod;
      var result = {};
      if (mod != null) {
        for (var k in mod)
          if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k))
            __createBinding(result, mod, k);
      }
      __setModuleDefault(result, mod);
      return result;
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.thirdPartySignerBeet = void 0;
    var beetSolana = __importStar(require_beet_solana5());
    var beet9 = __importStar(require_beet2());
    exports.thirdPartySignerBeet = new beet9.BeetArgsStruct([["signerKey", beetSolana.publicKey]], "ThirdPartySigner");
  }
});

// ../../node_modules/@metaplex-foundation/mpl-candy-guard/dist/src/generated/types/TokenGate.js
var require_TokenGate = __commonJS({
  "../../node_modules/@metaplex-foundation/mpl-candy-guard/dist/src/generated/types/TokenGate.js"(exports) {
    "use strict";
    var __createBinding = exports && exports.__createBinding || (Object.create ? function(o2, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      var desc = Object.getOwnPropertyDescriptor(m, k);
      if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m[k];
        } };
      }
      Object.defineProperty(o2, k2, desc);
    } : function(o2, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      o2[k2] = m[k];
    });
    var __setModuleDefault = exports && exports.__setModuleDefault || (Object.create ? function(o2, v) {
      Object.defineProperty(o2, "default", { enumerable: true, value: v });
    } : function(o2, v) {
      o2["default"] = v;
    });
    var __importStar = exports && exports.__importStar || function(mod) {
      if (mod && mod.__esModule)
        return mod;
      var result = {};
      if (mod != null) {
        for (var k in mod)
          if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k))
            __createBinding(result, mod, k);
      }
      __setModuleDefault(result, mod);
      return result;
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.tokenGateBeet = void 0;
    var beet9 = __importStar(require_beet2());
    var beetSolana = __importStar(require_beet_solana5());
    exports.tokenGateBeet = new beet9.BeetArgsStruct([
      ["amount", beet9.u64],
      ["mint", beetSolana.publicKey]
    ], "TokenGate");
  }
});

// ../../node_modules/@metaplex-foundation/mpl-candy-guard/dist/src/generated/types/Gatekeeper.js
var require_Gatekeeper = __commonJS({
  "../../node_modules/@metaplex-foundation/mpl-candy-guard/dist/src/generated/types/Gatekeeper.js"(exports) {
    "use strict";
    var __createBinding = exports && exports.__createBinding || (Object.create ? function(o2, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      var desc = Object.getOwnPropertyDescriptor(m, k);
      if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m[k];
        } };
      }
      Object.defineProperty(o2, k2, desc);
    } : function(o2, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      o2[k2] = m[k];
    });
    var __setModuleDefault = exports && exports.__setModuleDefault || (Object.create ? function(o2, v) {
      Object.defineProperty(o2, "default", { enumerable: true, value: v });
    } : function(o2, v) {
      o2["default"] = v;
    });
    var __importStar = exports && exports.__importStar || function(mod) {
      if (mod && mod.__esModule)
        return mod;
      var result = {};
      if (mod != null) {
        for (var k in mod)
          if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k))
            __createBinding(result, mod, k);
      }
      __setModuleDefault(result, mod);
      return result;
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.gatekeeperBeet = void 0;
    var beetSolana = __importStar(require_beet_solana5());
    var beet9 = __importStar(require_beet2());
    exports.gatekeeperBeet = new beet9.BeetArgsStruct([
      ["gatekeeperNetwork", beetSolana.publicKey],
      ["expireOnUse", beet9.bool]
    ], "Gatekeeper");
  }
});

// ../../node_modules/@metaplex-foundation/mpl-candy-guard/dist/src/generated/types/EndDate.js
var require_EndDate = __commonJS({
  "../../node_modules/@metaplex-foundation/mpl-candy-guard/dist/src/generated/types/EndDate.js"(exports) {
    "use strict";
    var __createBinding = exports && exports.__createBinding || (Object.create ? function(o2, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      var desc = Object.getOwnPropertyDescriptor(m, k);
      if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m[k];
        } };
      }
      Object.defineProperty(o2, k2, desc);
    } : function(o2, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      o2[k2] = m[k];
    });
    var __setModuleDefault = exports && exports.__setModuleDefault || (Object.create ? function(o2, v) {
      Object.defineProperty(o2, "default", { enumerable: true, value: v });
    } : function(o2, v) {
      o2["default"] = v;
    });
    var __importStar = exports && exports.__importStar || function(mod) {
      if (mod && mod.__esModule)
        return mod;
      var result = {};
      if (mod != null) {
        for (var k in mod)
          if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k))
            __createBinding(result, mod, k);
      }
      __setModuleDefault(result, mod);
      return result;
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.endDateBeet = void 0;
    var beet9 = __importStar(require_beet2());
    exports.endDateBeet = new beet9.BeetArgsStruct([["date", beet9.i64]], "EndDate");
  }
});

// ../../node_modules/@metaplex-foundation/mpl-candy-guard/dist/src/generated/types/MintLimit.js
var require_MintLimit = __commonJS({
  "../../node_modules/@metaplex-foundation/mpl-candy-guard/dist/src/generated/types/MintLimit.js"(exports) {
    "use strict";
    var __createBinding = exports && exports.__createBinding || (Object.create ? function(o2, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      var desc = Object.getOwnPropertyDescriptor(m, k);
      if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m[k];
        } };
      }
      Object.defineProperty(o2, k2, desc);
    } : function(o2, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      o2[k2] = m[k];
    });
    var __setModuleDefault = exports && exports.__setModuleDefault || (Object.create ? function(o2, v) {
      Object.defineProperty(o2, "default", { enumerable: true, value: v });
    } : function(o2, v) {
      o2["default"] = v;
    });
    var __importStar = exports && exports.__importStar || function(mod) {
      if (mod && mod.__esModule)
        return mod;
      var result = {};
      if (mod != null) {
        for (var k in mod)
          if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k))
            __createBinding(result, mod, k);
      }
      __setModuleDefault(result, mod);
      return result;
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.mintLimitBeet = void 0;
    var beet9 = __importStar(require_beet2());
    exports.mintLimitBeet = new beet9.BeetArgsStruct([
      ["id", beet9.u8],
      ["limit", beet9.u16]
    ], "MintLimit");
  }
});

// ../../node_modules/@metaplex-foundation/mpl-candy-guard/dist/src/generated/types/NftPayment.js
var require_NftPayment = __commonJS({
  "../../node_modules/@metaplex-foundation/mpl-candy-guard/dist/src/generated/types/NftPayment.js"(exports) {
    "use strict";
    var __createBinding = exports && exports.__createBinding || (Object.create ? function(o2, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      var desc = Object.getOwnPropertyDescriptor(m, k);
      if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m[k];
        } };
      }
      Object.defineProperty(o2, k2, desc);
    } : function(o2, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      o2[k2] = m[k];
    });
    var __setModuleDefault = exports && exports.__setModuleDefault || (Object.create ? function(o2, v) {
      Object.defineProperty(o2, "default", { enumerable: true, value: v });
    } : function(o2, v) {
      o2["default"] = v;
    });
    var __importStar = exports && exports.__importStar || function(mod) {
      if (mod && mod.__esModule)
        return mod;
      var result = {};
      if (mod != null) {
        for (var k in mod)
          if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k))
            __createBinding(result, mod, k);
      }
      __setModuleDefault(result, mod);
      return result;
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.nftPaymentBeet = void 0;
    var beetSolana = __importStar(require_beet_solana5());
    var beet9 = __importStar(require_beet2());
    exports.nftPaymentBeet = new beet9.BeetArgsStruct([
      ["requiredCollection", beetSolana.publicKey],
      ["destination", beetSolana.publicKey]
    ], "NftPayment");
  }
});

// ../../node_modules/@metaplex-foundation/mpl-candy-guard/dist/src/generated/types/RedeemedAmount.js
var require_RedeemedAmount = __commonJS({
  "../../node_modules/@metaplex-foundation/mpl-candy-guard/dist/src/generated/types/RedeemedAmount.js"(exports) {
    "use strict";
    var __createBinding = exports && exports.__createBinding || (Object.create ? function(o2, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      var desc = Object.getOwnPropertyDescriptor(m, k);
      if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m[k];
        } };
      }
      Object.defineProperty(o2, k2, desc);
    } : function(o2, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      o2[k2] = m[k];
    });
    var __setModuleDefault = exports && exports.__setModuleDefault || (Object.create ? function(o2, v) {
      Object.defineProperty(o2, "default", { enumerable: true, value: v });
    } : function(o2, v) {
      o2["default"] = v;
    });
    var __importStar = exports && exports.__importStar || function(mod) {
      if (mod && mod.__esModule)
        return mod;
      var result = {};
      if (mod != null) {
        for (var k in mod)
          if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k))
            __createBinding(result, mod, k);
      }
      __setModuleDefault(result, mod);
      return result;
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.redeemedAmountBeet = void 0;
    var beet9 = __importStar(require_beet2());
    exports.redeemedAmountBeet = new beet9.BeetArgsStruct([["maximum", beet9.u64]], "RedeemedAmount");
  }
});

// ../../node_modules/@metaplex-foundation/mpl-candy-guard/dist/src/generated/types/NftGate.js
var require_NftGate = __commonJS({
  "../../node_modules/@metaplex-foundation/mpl-candy-guard/dist/src/generated/types/NftGate.js"(exports) {
    "use strict";
    var __createBinding = exports && exports.__createBinding || (Object.create ? function(o2, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      var desc = Object.getOwnPropertyDescriptor(m, k);
      if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m[k];
        } };
      }
      Object.defineProperty(o2, k2, desc);
    } : function(o2, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      o2[k2] = m[k];
    });
    var __setModuleDefault = exports && exports.__setModuleDefault || (Object.create ? function(o2, v) {
      Object.defineProperty(o2, "default", { enumerable: true, value: v });
    } : function(o2, v) {
      o2["default"] = v;
    });
    var __importStar = exports && exports.__importStar || function(mod) {
      if (mod && mod.__esModule)
        return mod;
      var result = {};
      if (mod != null) {
        for (var k in mod)
          if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k))
            __createBinding(result, mod, k);
      }
      __setModuleDefault(result, mod);
      return result;
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.nftGateBeet = void 0;
    var beetSolana = __importStar(require_beet_solana5());
    var beet9 = __importStar(require_beet2());
    exports.nftGateBeet = new beet9.BeetArgsStruct([["requiredCollection", beetSolana.publicKey]], "NftGate");
  }
});

// ../../node_modules/@metaplex-foundation/mpl-candy-guard/dist/src/generated/types/NftBurn.js
var require_NftBurn = __commonJS({
  "../../node_modules/@metaplex-foundation/mpl-candy-guard/dist/src/generated/types/NftBurn.js"(exports) {
    "use strict";
    var __createBinding = exports && exports.__createBinding || (Object.create ? function(o2, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      var desc = Object.getOwnPropertyDescriptor(m, k);
      if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m[k];
        } };
      }
      Object.defineProperty(o2, k2, desc);
    } : function(o2, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      o2[k2] = m[k];
    });
    var __setModuleDefault = exports && exports.__setModuleDefault || (Object.create ? function(o2, v) {
      Object.defineProperty(o2, "default", { enumerable: true, value: v });
    } : function(o2, v) {
      o2["default"] = v;
    });
    var __importStar = exports && exports.__importStar || function(mod) {
      if (mod && mod.__esModule)
        return mod;
      var result = {};
      if (mod != null) {
        for (var k in mod)
          if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k))
            __createBinding(result, mod, k);
      }
      __setModuleDefault(result, mod);
      return result;
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.nftBurnBeet = void 0;
    var beetSolana = __importStar(require_beet_solana5());
    var beet9 = __importStar(require_beet2());
    exports.nftBurnBeet = new beet9.BeetArgsStruct([["requiredCollection", beetSolana.publicKey]], "NftBurn");
  }
});

// ../../node_modules/@metaplex-foundation/mpl-candy-guard/dist/src/generated/types/TokenBurn.js
var require_TokenBurn = __commonJS({
  "../../node_modules/@metaplex-foundation/mpl-candy-guard/dist/src/generated/types/TokenBurn.js"(exports) {
    "use strict";
    var __createBinding = exports && exports.__createBinding || (Object.create ? function(o2, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      var desc = Object.getOwnPropertyDescriptor(m, k);
      if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m[k];
        } };
      }
      Object.defineProperty(o2, k2, desc);
    } : function(o2, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      o2[k2] = m[k];
    });
    var __setModuleDefault = exports && exports.__setModuleDefault || (Object.create ? function(o2, v) {
      Object.defineProperty(o2, "default", { enumerable: true, value: v });
    } : function(o2, v) {
      o2["default"] = v;
    });
    var __importStar = exports && exports.__importStar || function(mod) {
      if (mod && mod.__esModule)
        return mod;
      var result = {};
      if (mod != null) {
        for (var k in mod)
          if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k))
            __createBinding(result, mod, k);
      }
      __setModuleDefault(result, mod);
      return result;
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.tokenBurnBeet = void 0;
    var beet9 = __importStar(require_beet2());
    var beetSolana = __importStar(require_beet_solana5());
    exports.tokenBurnBeet = new beet9.BeetArgsStruct([
      ["amount", beet9.u64],
      ["mint", beetSolana.publicKey]
    ], "TokenBurn");
  }
});

// ../../node_modules/@metaplex-foundation/mpl-candy-guard/dist/src/generated/types/FreezeSolPayment.js
var require_FreezeSolPayment = __commonJS({
  "../../node_modules/@metaplex-foundation/mpl-candy-guard/dist/src/generated/types/FreezeSolPayment.js"(exports) {
    "use strict";
    var __createBinding = exports && exports.__createBinding || (Object.create ? function(o2, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      var desc = Object.getOwnPropertyDescriptor(m, k);
      if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m[k];
        } };
      }
      Object.defineProperty(o2, k2, desc);
    } : function(o2, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      o2[k2] = m[k];
    });
    var __setModuleDefault = exports && exports.__setModuleDefault || (Object.create ? function(o2, v) {
      Object.defineProperty(o2, "default", { enumerable: true, value: v });
    } : function(o2, v) {
      o2["default"] = v;
    });
    var __importStar = exports && exports.__importStar || function(mod) {
      if (mod && mod.__esModule)
        return mod;
      var result = {};
      if (mod != null) {
        for (var k in mod)
          if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k))
            __createBinding(result, mod, k);
      }
      __setModuleDefault(result, mod);
      return result;
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.freezeSolPaymentBeet = void 0;
    var beet9 = __importStar(require_beet2());
    var beetSolana = __importStar(require_beet_solana5());
    exports.freezeSolPaymentBeet = new beet9.BeetArgsStruct([
      ["lamports", beet9.u64],
      ["destination", beetSolana.publicKey]
    ], "FreezeSolPayment");
  }
});

// ../../node_modules/@metaplex-foundation/mpl-candy-guard/dist/src/generated/types/FreezeTokenPayment.js
var require_FreezeTokenPayment = __commonJS({
  "../../node_modules/@metaplex-foundation/mpl-candy-guard/dist/src/generated/types/FreezeTokenPayment.js"(exports) {
    "use strict";
    var __createBinding = exports && exports.__createBinding || (Object.create ? function(o2, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      var desc = Object.getOwnPropertyDescriptor(m, k);
      if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m[k];
        } };
      }
      Object.defineProperty(o2, k2, desc);
    } : function(o2, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      o2[k2] = m[k];
    });
    var __setModuleDefault = exports && exports.__setModuleDefault || (Object.create ? function(o2, v) {
      Object.defineProperty(o2, "default", { enumerable: true, value: v });
    } : function(o2, v) {
      o2["default"] = v;
    });
    var __importStar = exports && exports.__importStar || function(mod) {
      if (mod && mod.__esModule)
        return mod;
      var result = {};
      if (mod != null) {
        for (var k in mod)
          if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k))
            __createBinding(result, mod, k);
      }
      __setModuleDefault(result, mod);
      return result;
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.freezeTokenPaymentBeet = void 0;
    var beet9 = __importStar(require_beet2());
    var beetSolana = __importStar(require_beet_solana5());
    exports.freezeTokenPaymentBeet = new beet9.BeetArgsStruct([
      ["amount", beet9.u64],
      ["mint", beetSolana.publicKey],
      ["destinationAta", beetSolana.publicKey]
    ], "FreezeTokenPayment");
  }
});

// ../../node_modules/@metaplex-foundation/mpl-candy-guard/dist/src/generated/types/ProgramGate.js
var require_ProgramGate = __commonJS({
  "../../node_modules/@metaplex-foundation/mpl-candy-guard/dist/src/generated/types/ProgramGate.js"(exports) {
    "use strict";
    var __createBinding = exports && exports.__createBinding || (Object.create ? function(o2, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      var desc = Object.getOwnPropertyDescriptor(m, k);
      if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m[k];
        } };
      }
      Object.defineProperty(o2, k2, desc);
    } : function(o2, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      o2[k2] = m[k];
    });
    var __setModuleDefault = exports && exports.__setModuleDefault || (Object.create ? function(o2, v) {
      Object.defineProperty(o2, "default", { enumerable: true, value: v });
    } : function(o2, v) {
      o2["default"] = v;
    });
    var __importStar = exports && exports.__importStar || function(mod) {
      if (mod && mod.__esModule)
        return mod;
      var result = {};
      if (mod != null) {
        for (var k in mod)
          if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k))
            __createBinding(result, mod, k);
      }
      __setModuleDefault(result, mod);
      return result;
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.programGateBeet = void 0;
    var beetSolana = __importStar(require_beet_solana5());
    var beet9 = __importStar(require_beet2());
    exports.programGateBeet = new beet9.FixableBeetArgsStruct([["additional", beet9.array(beetSolana.publicKey)]], "ProgramGate");
  }
});

// ../../node_modules/@metaplex-foundation/mpl-candy-guard/dist/src/generated/types/GuardSet.js
var require_GuardSet = __commonJS({
  "../../node_modules/@metaplex-foundation/mpl-candy-guard/dist/src/generated/types/GuardSet.js"(exports) {
    "use strict";
    var __createBinding = exports && exports.__createBinding || (Object.create ? function(o2, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      var desc = Object.getOwnPropertyDescriptor(m, k);
      if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m[k];
        } };
      }
      Object.defineProperty(o2, k2, desc);
    } : function(o2, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      o2[k2] = m[k];
    });
    var __setModuleDefault = exports && exports.__setModuleDefault || (Object.create ? function(o2, v) {
      Object.defineProperty(o2, "default", { enumerable: true, value: v });
    } : function(o2, v) {
      o2["default"] = v;
    });
    var __importStar = exports && exports.__importStar || function(mod) {
      if (mod && mod.__esModule)
        return mod;
      var result = {};
      if (mod != null) {
        for (var k in mod)
          if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k))
            __createBinding(result, mod, k);
      }
      __setModuleDefault(result, mod);
      return result;
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.guardSetBeet = void 0;
    var beet9 = __importStar(require_beet2());
    var BotTax_1 = require_BotTax();
    var SolPayment_1 = require_SolPayment();
    var TokenPayment_1 = require_TokenPayment();
    var StartDate_1 = require_StartDate();
    var ThirdPartySigner_1 = require_ThirdPartySigner();
    var TokenGate_1 = require_TokenGate();
    var Gatekeeper_1 = require_Gatekeeper();
    var EndDate_1 = require_EndDate();
    var AllowList_1 = require_AllowList();
    var MintLimit_1 = require_MintLimit();
    var NftPayment_1 = require_NftPayment();
    var RedeemedAmount_1 = require_RedeemedAmount();
    var AddressGate_1 = require_AddressGate();
    var NftGate_1 = require_NftGate();
    var NftBurn_1 = require_NftBurn();
    var TokenBurn_1 = require_TokenBurn();
    var FreezeSolPayment_1 = require_FreezeSolPayment();
    var FreezeTokenPayment_1 = require_FreezeTokenPayment();
    var ProgramGate_1 = require_ProgramGate();
    var Allocation_1 = require_Allocation();
    exports.guardSetBeet = new beet9.FixableBeetArgsStruct([
      ["botTax", beet9.coption(BotTax_1.botTaxBeet)],
      ["solPayment", beet9.coption(SolPayment_1.solPaymentBeet)],
      ["tokenPayment", beet9.coption(TokenPayment_1.tokenPaymentBeet)],
      ["startDate", beet9.coption(StartDate_1.startDateBeet)],
      ["thirdPartySigner", beet9.coption(ThirdPartySigner_1.thirdPartySignerBeet)],
      ["tokenGate", beet9.coption(TokenGate_1.tokenGateBeet)],
      ["gatekeeper", beet9.coption(Gatekeeper_1.gatekeeperBeet)],
      ["endDate", beet9.coption(EndDate_1.endDateBeet)],
      ["allowList", beet9.coption(AllowList_1.allowListBeet)],
      ["mintLimit", beet9.coption(MintLimit_1.mintLimitBeet)],
      ["nftPayment", beet9.coption(NftPayment_1.nftPaymentBeet)],
      ["redeemedAmount", beet9.coption(RedeemedAmount_1.redeemedAmountBeet)],
      ["addressGate", beet9.coption(AddressGate_1.addressGateBeet)],
      ["nftGate", beet9.coption(NftGate_1.nftGateBeet)],
      ["nftBurn", beet9.coption(NftBurn_1.nftBurnBeet)],
      ["tokenBurn", beet9.coption(TokenBurn_1.tokenBurnBeet)],
      ["freezeSolPayment", beet9.coption(FreezeSolPayment_1.freezeSolPaymentBeet)],
      ["freezeTokenPayment", beet9.coption(FreezeTokenPayment_1.freezeTokenPaymentBeet)],
      ["programGate", beet9.coption(ProgramGate_1.programGateBeet)],
      ["allocation", beet9.coption(Allocation_1.allocationBeet)]
    ], "GuardSet");
  }
});

// ../../node_modules/@metaplex-foundation/mpl-candy-guard/dist/src/generated/types/Group.js
var require_Group = __commonJS({
  "../../node_modules/@metaplex-foundation/mpl-candy-guard/dist/src/generated/types/Group.js"(exports) {
    "use strict";
    var __createBinding = exports && exports.__createBinding || (Object.create ? function(o2, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      var desc = Object.getOwnPropertyDescriptor(m, k);
      if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m[k];
        } };
      }
      Object.defineProperty(o2, k2, desc);
    } : function(o2, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      o2[k2] = m[k];
    });
    var __setModuleDefault = exports && exports.__setModuleDefault || (Object.create ? function(o2, v) {
      Object.defineProperty(o2, "default", { enumerable: true, value: v });
    } : function(o2, v) {
      o2["default"] = v;
    });
    var __importStar = exports && exports.__importStar || function(mod) {
      if (mod && mod.__esModule)
        return mod;
      var result = {};
      if (mod != null) {
        for (var k in mod)
          if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k))
            __createBinding(result, mod, k);
      }
      __setModuleDefault(result, mod);
      return result;
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.groupBeet = void 0;
    var beet9 = __importStar(require_beet2());
    var GuardSet_1 = require_GuardSet();
    exports.groupBeet = new beet9.FixableBeetArgsStruct([
      ["label", beet9.utf8String],
      ["guards", GuardSet_1.guardSetBeet]
    ], "Group");
  }
});

// ../../node_modules/@metaplex-foundation/mpl-candy-guard/dist/src/generated/types/CandyGuardData.js
var require_CandyGuardData = __commonJS({
  "../../node_modules/@metaplex-foundation/mpl-candy-guard/dist/src/generated/types/CandyGuardData.js"(exports) {
    "use strict";
    var __createBinding = exports && exports.__createBinding || (Object.create ? function(o2, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      var desc = Object.getOwnPropertyDescriptor(m, k);
      if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m[k];
        } };
      }
      Object.defineProperty(o2, k2, desc);
    } : function(o2, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      o2[k2] = m[k];
    });
    var __setModuleDefault = exports && exports.__setModuleDefault || (Object.create ? function(o2, v) {
      Object.defineProperty(o2, "default", { enumerable: true, value: v });
    } : function(o2, v) {
      o2["default"] = v;
    });
    var __importStar = exports && exports.__importStar || function(mod) {
      if (mod && mod.__esModule)
        return mod;
      var result = {};
      if (mod != null) {
        for (var k in mod)
          if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k))
            __createBinding(result, mod, k);
      }
      __setModuleDefault(result, mod);
      return result;
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.candyGuardDataBeet = void 0;
    var beet9 = __importStar(require_beet2());
    var GuardSet_1 = require_GuardSet();
    var Group_1 = require_Group();
    exports.candyGuardDataBeet = new beet9.FixableBeetArgsStruct([
      ["default", GuardSet_1.guardSetBeet],
      ["groups", beet9.coption(beet9.array(Group_1.groupBeet))]
    ], "CandyGuardData");
  }
});

// ../../node_modules/@metaplex-foundation/mpl-candy-guard/dist/src/generated/types/FreezeInstruction.js
var require_FreezeInstruction = __commonJS({
  "../../node_modules/@metaplex-foundation/mpl-candy-guard/dist/src/generated/types/FreezeInstruction.js"(exports) {
    "use strict";
    var __createBinding = exports && exports.__createBinding || (Object.create ? function(o2, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      var desc = Object.getOwnPropertyDescriptor(m, k);
      if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m[k];
        } };
      }
      Object.defineProperty(o2, k2, desc);
    } : function(o2, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      o2[k2] = m[k];
    });
    var __setModuleDefault = exports && exports.__setModuleDefault || (Object.create ? function(o2, v) {
      Object.defineProperty(o2, "default", { enumerable: true, value: v });
    } : function(o2, v) {
      o2["default"] = v;
    });
    var __importStar = exports && exports.__importStar || function(mod) {
      if (mod && mod.__esModule)
        return mod;
      var result = {};
      if (mod != null) {
        for (var k in mod)
          if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k))
            __createBinding(result, mod, k);
      }
      __setModuleDefault(result, mod);
      return result;
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.freezeInstructionBeet = exports.FreezeInstruction = void 0;
    var beet9 = __importStar(require_beet2());
    var FreezeInstruction3;
    (function(FreezeInstruction4) {
      FreezeInstruction4[FreezeInstruction4["Initialize"] = 0] = "Initialize";
      FreezeInstruction4[FreezeInstruction4["Thaw"] = 1] = "Thaw";
      FreezeInstruction4[FreezeInstruction4["UnlockFunds"] = 2] = "UnlockFunds";
    })(FreezeInstruction3 = exports.FreezeInstruction || (exports.FreezeInstruction = {}));
    exports.freezeInstructionBeet = beet9.fixedScalarEnum(FreezeInstruction3);
  }
});

// ../../node_modules/@metaplex-foundation/mpl-candy-guard/dist/src/generated/types/MintCounter.js
var require_MintCounter = __commonJS({
  "../../node_modules/@metaplex-foundation/mpl-candy-guard/dist/src/generated/types/MintCounter.js"(exports) {
    "use strict";
    var __createBinding = exports && exports.__createBinding || (Object.create ? function(o2, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      var desc = Object.getOwnPropertyDescriptor(m, k);
      if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m[k];
        } };
      }
      Object.defineProperty(o2, k2, desc);
    } : function(o2, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      o2[k2] = m[k];
    });
    var __setModuleDefault = exports && exports.__setModuleDefault || (Object.create ? function(o2, v) {
      Object.defineProperty(o2, "default", { enumerable: true, value: v });
    } : function(o2, v) {
      o2["default"] = v;
    });
    var __importStar = exports && exports.__importStar || function(mod) {
      if (mod && mod.__esModule)
        return mod;
      var result = {};
      if (mod != null) {
        for (var k in mod)
          if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k))
            __createBinding(result, mod, k);
      }
      __setModuleDefault(result, mod);
      return result;
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.mintCounterBeet = void 0;
    var beet9 = __importStar(require_beet2());
    exports.mintCounterBeet = new beet9.BeetArgsStruct([["count", beet9.u16]], "MintCounter");
  }
});

// ../../node_modules/@metaplex-foundation/mpl-candy-guard/dist/src/generated/types/MintTracker.js
var require_MintTracker = __commonJS({
  "../../node_modules/@metaplex-foundation/mpl-candy-guard/dist/src/generated/types/MintTracker.js"(exports) {
    "use strict";
    var __createBinding = exports && exports.__createBinding || (Object.create ? function(o2, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      var desc = Object.getOwnPropertyDescriptor(m, k);
      if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m[k];
        } };
      }
      Object.defineProperty(o2, k2, desc);
    } : function(o2, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      o2[k2] = m[k];
    });
    var __setModuleDefault = exports && exports.__setModuleDefault || (Object.create ? function(o2, v) {
      Object.defineProperty(o2, "default", { enumerable: true, value: v });
    } : function(o2, v) {
      o2["default"] = v;
    });
    var __importStar = exports && exports.__importStar || function(mod) {
      if (mod && mod.__esModule)
        return mod;
      var result = {};
      if (mod != null) {
        for (var k in mod)
          if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k))
            __createBinding(result, mod, k);
      }
      __setModuleDefault(result, mod);
      return result;
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.mintTrackerBeet = void 0;
    var beet9 = __importStar(require_beet2());
    exports.mintTrackerBeet = new beet9.BeetArgsStruct([["count", beet9.u32]], "MintTracker");
  }
});

// ../../node_modules/@metaplex-foundation/mpl-candy-guard/dist/src/generated/types/index.js
var require_types10 = __commonJS({
  "../../node_modules/@metaplex-foundation/mpl-candy-guard/dist/src/generated/types/index.js"(exports) {
    "use strict";
    var __createBinding = exports && exports.__createBinding || (Object.create ? function(o2, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      var desc = Object.getOwnPropertyDescriptor(m, k);
      if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m[k];
        } };
      }
      Object.defineProperty(o2, k2, desc);
    } : function(o2, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      o2[k2] = m[k];
    });
    var __exportStar = exports && exports.__exportStar || function(m, exports2) {
      for (var p in m)
        if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports2, p))
          __createBinding(exports2, m, p);
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    __exportStar(require_AddressGate(), exports);
    __exportStar(require_Allocation(), exports);
    __exportStar(require_AllowList(), exports);
    __exportStar(require_AllowListProof(), exports);
    __exportStar(require_BotTax(), exports);
    __exportStar(require_CandyGuardData(), exports);
    __exportStar(require_EndDate(), exports);
    __exportStar(require_FreezeInstruction(), exports);
    __exportStar(require_FreezeSolPayment(), exports);
    __exportStar(require_FreezeTokenPayment(), exports);
    __exportStar(require_Gatekeeper(), exports);
    __exportStar(require_Group(), exports);
    __exportStar(require_GuardSet(), exports);
    __exportStar(require_GuardType(), exports);
    __exportStar(require_MintCounter(), exports);
    __exportStar(require_MintLimit(), exports);
    __exportStar(require_MintTracker(), exports);
    __exportStar(require_NftBurn(), exports);
    __exportStar(require_NftGate(), exports);
    __exportStar(require_NftPayment(), exports);
    __exportStar(require_ProgramGate(), exports);
    __exportStar(require_RedeemedAmount(), exports);
    __exportStar(require_RouteArgs(), exports);
    __exportStar(require_SolPayment(), exports);
    __exportStar(require_StartDate(), exports);
    __exportStar(require_ThirdPartySigner(), exports);
    __exportStar(require_TokenBurn(), exports);
    __exportStar(require_TokenGate(), exports);
    __exportStar(require_TokenPayment(), exports);
  }
});

// ../../node_modules/@metaplex-foundation/mpl-candy-guard/dist/src/generated/index.js
var require_generated5 = __commonJS({
  "../../node_modules/@metaplex-foundation/mpl-candy-guard/dist/src/generated/index.js"(exports) {
    "use strict";
    var __createBinding = exports && exports.__createBinding || (Object.create ? function(o2, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      var desc = Object.getOwnPropertyDescriptor(m, k);
      if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m[k];
        } };
      }
      Object.defineProperty(o2, k2, desc);
    } : function(o2, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      o2[k2] = m[k];
    });
    var __exportStar = exports && exports.__exportStar || function(m, exports2) {
      for (var p in m)
        if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports2, p))
          __createBinding(exports2, m, p);
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.PROGRAM_ID = exports.PROGRAM_ADDRESS = void 0;
    var web3_js_1 = (init_index_browser_esm(), __toCommonJS(index_browser_esm_exports));
    __exportStar(require_accounts5(), exports);
    __exportStar(require_errors11(), exports);
    __exportStar(require_instructions14(), exports);
    __exportStar(require_types10(), exports);
    exports.PROGRAM_ADDRESS = "Guard1JwRhJkVH6XZhzoYxeBVQe872VH6QggF4BWmS9g";
    exports.PROGRAM_ID = new web3_js_1.PublicKey(exports.PROGRAM_ADDRESS);
  }
});

// ../../node_modules/@metaplex-foundation/mpl-candy-guard/dist/src/errors.js
var require_errors12 = __commonJS({
  "../../node_modules/@metaplex-foundation/mpl-candy-guard/dist/src/errors.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.cusper = void 0;
    var cusper_1 = require_cusper();
    var generated_1 = require_generated5();
    exports.cusper = (0, cusper_1.initCusper)(generated_1.errorFromCode);
  }
});

// ../../node_modules/@metaplex-foundation/mpl-candy-guard/dist/src/utils/log.js
var require_log = __commonJS({
  "../../node_modules/@metaplex-foundation/mpl-candy-guard/dist/src/utils/log.js"(exports) {
    "use strict";
    var __importDefault = exports && exports.__importDefault || function(mod) {
      return mod && mod.__esModule ? mod : { "default": mod };
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.logTrace = exports.logDebug = exports.logInfo = exports.logError = void 0;
    var debug_1 = __importDefault(require_browser2());
    exports.logError = (0, debug_1.default)("candy-guard:error");
    exports.logInfo = (0, debug_1.default)("candy-guard:info");
    exports.logDebug = (0, debug_1.default)("candy-guard:debug");
    exports.logTrace = (0, debug_1.default)("candy-guard:trace");
  }
});

// ../../node_modules/@metaplex-foundation/mpl-candy-guard/dist/src/parser.js
var require_parser = __commonJS({
  "../../node_modules/@metaplex-foundation/mpl-candy-guard/dist/src/parser.js"(exports) {
    "use strict";
    var __createBinding = exports && exports.__createBinding || (Object.create ? function(o2, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      var desc = Object.getOwnPropertyDescriptor(m, k);
      if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m[k];
        } };
      }
      Object.defineProperty(o2, k2, desc);
    } : function(o2, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      o2[k2] = m[k];
    });
    var __setModuleDefault = exports && exports.__setModuleDefault || (Object.create ? function(o2, v) {
      Object.defineProperty(o2, "default", { enumerable: true, value: v });
    } : function(o2, v) {
      o2["default"] = v;
    });
    var __importStar = exports && exports.__importStar || function(mod) {
      if (mod && mod.__esModule)
        return mod;
      var result = {};
      if (mod != null) {
        for (var k in mod)
          if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k))
            __createBinding(result, mod, k);
      }
      __setModuleDefault(result, mod);
      return result;
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.serialize = exports.deserialize = void 0;
    var bn_js_1 = require_bn();
    var beet9 = __importStar(require_beet2());
    var log_1 = require_log();
    var generated_1 = require_generated5();
    var SolPayment_1 = require_SolPayment();
    var TokenPayment_1 = require_TokenPayment();
    var EndDate_1 = require_EndDate();
    var RedeemedAmount_1 = require_RedeemedAmount();
    var AddressGate_1 = require_AddressGate();
    var NftGate_1 = require_NftGate();
    var NftBurn_1 = require_NftBurn();
    var TokenBurn_1 = require_TokenBurn();
    var beet_1 = require_beet2();
    var GUARDS_SIZE = {
      botTax: 9,
      solPayment: 40,
      tokenPayment: 72,
      startDate: 8,
      thirdPartySigner: 32,
      tokenGate: 40,
      gatekeeper: 33,
      endDate: 8,
      allowList: 32,
      mintLimit: 3,
      nftPayment: 64,
      redeemedAmount: 8,
      addressGate: 32,
      nftGate: 32,
      nftBurn: 32,
      tokenBurn: 40,
      freezeSolPayment: 40,
      freezeTokenPayment: 72,
      programGate: 164,
      allocation: 5
    };
    var GUARDS_NAME = [
      "botTax",
      "solPayment",
      "tokenPayment",
      "startDate",
      "thirdPartySigner",
      "tokenGate",
      "gatekeeper",
      "endDate",
      "allowList",
      "mintLimit",
      "nftPayment",
      "redeemedAmount",
      "addressGate",
      "nftGate",
      "nftBurn",
      "tokenBurn",
      "freezeSolPayment",
      "freezeTokenPayment",
      "programGate",
      "allocation"
    ];
    var GUARDS_COUNT = GUARDS_NAME.length;
    var MAX_LABEL_LENGTH = 6;
    var MAX_PROGRAM_COUNT = 5;
    function guardsFromData(buffer2) {
      const enabled = new bn_js_1.BN(beet9.u64.read(buffer2, 0)).toNumber();
      const guards = [];
      for (let i = 0; i < GUARDS_COUNT; i++) {
        guards.push(!!(1 << i & enabled));
      }
      const [botTaxEnabled, solPaymentEnabled, tokenPaymentEnabled, startDateEnabled, thirdPartySignerEnabled, tokenGateEnabled, gatekeeperEnabled, endDateEnabled, allowListEnabled, mintLimitEnabled, nftPaymentEnabled, redeemedAmountEnabled, addressGateEnabled, nftGateEnabled, nftBurnEnabled, tokenBurnEnabled, freezeSolPaymentEnabled, freezeTokenPaymentEnabled, programGateEnabled, allocationEnabled] = guards;
      return {
        botTaxEnabled,
        solPaymentEnabled,
        tokenPaymentEnabled,
        startDateEnabled,
        thirdPartySignerEnabled,
        tokenGateEnabled,
        gatekeeperEnabled,
        endDateEnabled,
        allowListEnabled,
        mintLimitEnabled,
        nftPaymentEnabled,
        redeemedAmountEnabled,
        addressGateEnabled,
        nftGateEnabled,
        nftBurnEnabled,
        tokenBurnEnabled,
        freezeSolPaymentEnabled,
        freezeTokenPaymentEnabled,
        programGateEnabled,
        allocationEnabled
      };
    }
    function deserialize2(buffer2) {
      const { guardSet: defaultSet, offset } = deserializeGuardSet(buffer2);
      const groupsCount = new bn_js_1.BN(beet9.u32.read(buffer2, offset)).toNumber();
      const groups = [];
      let cursor = beet9.u32.byteSize + offset;
      for (let i = 0; i < groupsCount; i++) {
        const label = buffer2.subarray(cursor, cursor + MAX_LABEL_LENGTH).toString();
        cursor += MAX_LABEL_LENGTH;
        const { guardSet: guards, offset: offset2 } = deserializeGuardSet(buffer2.subarray(cursor));
        groups.push({ label, guards });
        cursor += offset2;
      }
      return {
        default: defaultSet,
        groups: groups.length === 0 ? null : groups
      };
    }
    exports.deserialize = deserialize2;
    function serialize2(data) {
      const buffer2 = Buffer.alloc(size(data));
      let offset = serializeGuardSet(buffer2, 0, data.default);
      const groupsCount = data.groups ? data.groups.length : 0;
      beet_1.u32.write(buffer2, offset, groupsCount);
      offset += beet_1.u32.byteSize;
      for (let i = 0; i < groupsCount; i++) {
        const group = data.groups.at(i);
        if (group.label.length > MAX_LABEL_LENGTH) {
          throw `Exceeded maximum label length: ${group.label.length} > ${MAX_LABEL_LENGTH}`;
        }
        buffer2.write(group.label, offset, MAX_LABEL_LENGTH, "utf8");
        offset += MAX_LABEL_LENGTH;
        offset = serializeGuardSet(buffer2, offset, group.guards);
      }
      return buffer2;
    }
    exports.serialize = serialize2;
    function size(data) {
      let size2 = guardSetSize(data.default);
      size2 += beet_1.u32.byteSize;
      if (data.groups) {
        for (let i = 0; i < data.groups.length; i++) {
          size2 += MAX_LABEL_LENGTH;
          size2 += guardSetSize(data.groups.at(i).guards);
        }
      }
      return size2;
    }
    function guardSetSize(guardSet) {
      const guards = [];
      for (let i = 0; i < GUARDS_COUNT; i++) {
        const index = GUARDS_NAME[i];
        if (guardSet[index]) {
          guards.push(GUARDS_SIZE[index]);
        }
      }
      return beet_1.u64.byteSize + guards.reduce((previousValue, currentValue) => previousValue + currentValue, 0);
    }
    function deserializeGuardSet(buffer2) {
      var _a, _b, _c, _d, _e, _f, _g, _h, _j, _k, _l, _m, _o, _p, _q, _r, _s, _t, _u, _v;
      const guards = guardsFromData(buffer2);
      const { botTaxEnabled, startDateEnabled, solPaymentEnabled, tokenPaymentEnabled, thirdPartySignerEnabled, tokenGateEnabled, gatekeeperEnabled, endDateEnabled, allowListEnabled, mintLimitEnabled, nftPaymentEnabled, redeemedAmountEnabled, addressGateEnabled, nftGateEnabled, nftBurnEnabled, tokenBurnEnabled, freezeSolPaymentEnabled, freezeTokenPaymentEnabled, programGateEnabled, allocationEnabled } = guards;
      (0, log_1.logDebug)("Guards: %O", guards);
      let cursor = beet9.u64.byteSize;
      const data = {};
      if (botTaxEnabled) {
        const [botTax] = generated_1.botTaxBeet.deserialize(buffer2, cursor);
        data.botTax = botTax;
        cursor += GUARDS_SIZE.botTax;
      }
      if (solPaymentEnabled) {
        const [solPayment] = SolPayment_1.solPaymentBeet.deserialize(buffer2, cursor);
        data.solPayment = solPayment;
        cursor += GUARDS_SIZE.solPayment;
      }
      if (tokenPaymentEnabled) {
        const [tokenPayment] = TokenPayment_1.tokenPaymentBeet.deserialize(buffer2, cursor);
        data.tokenPayment = tokenPayment;
        cursor += GUARDS_SIZE.tokenPayment;
      }
      if (startDateEnabled) {
        const [startDate] = generated_1.startDateBeet.deserialize(buffer2, cursor);
        data.startDate = startDate;
        cursor += GUARDS_SIZE.startDate;
      }
      if (thirdPartySignerEnabled) {
        const [thirdPartySigner] = generated_1.thirdPartySignerBeet.deserialize(buffer2, cursor);
        data.thirdPartySigner = thirdPartySigner;
        cursor += GUARDS_SIZE.thirdPartySigner;
      }
      if (tokenGateEnabled) {
        const [tokenGate] = generated_1.tokenGateBeet.deserialize(buffer2, cursor);
        data.tokenGate = tokenGate;
        cursor += GUARDS_SIZE.tokenGate;
      }
      if (gatekeeperEnabled) {
        const [gatekeeper] = generated_1.gatekeeperBeet.deserialize(buffer2, cursor);
        data.gatekeeper = gatekeeper;
        cursor += GUARDS_SIZE.gatekeeper;
      }
      if (endDateEnabled) {
        const [endDate] = EndDate_1.endDateBeet.deserialize(buffer2, cursor);
        data.endDate = endDate;
        cursor += GUARDS_SIZE.endDate;
      }
      if (allowListEnabled) {
        const [allowList] = generated_1.allowListBeet.deserialize(buffer2, cursor);
        data.allowList = allowList;
        cursor += GUARDS_SIZE.allowList;
      }
      if (mintLimitEnabled) {
        const [mintLimit] = generated_1.mintLimitBeet.deserialize(buffer2, cursor);
        data.mintLimit = mintLimit;
        cursor += GUARDS_SIZE.mintLimit;
      }
      if (nftPaymentEnabled) {
        const [nftPayment] = generated_1.nftPaymentBeet.deserialize(buffer2, cursor);
        data.nftPayment = nftPayment;
        cursor += GUARDS_SIZE.nftPayment;
      }
      if (redeemedAmountEnabled) {
        const [redeemedAmount] = RedeemedAmount_1.redeemedAmountBeet.deserialize(buffer2, cursor);
        data.redeemedAmount = redeemedAmount;
        cursor += GUARDS_SIZE.redeemedAmount;
      }
      if (addressGateEnabled) {
        const [addressGate] = AddressGate_1.addressGateBeet.deserialize(buffer2, cursor);
        data.addressGate = addressGate;
        cursor += GUARDS_SIZE.addressGate;
      }
      if (nftGateEnabled) {
        const [nftGate] = NftGate_1.nftGateBeet.deserialize(buffer2, cursor);
        data.nftGate = nftGate;
        cursor += GUARDS_SIZE.nftGate;
      }
      if (nftBurnEnabled) {
        const [nftBurn] = NftBurn_1.nftBurnBeet.deserialize(buffer2, cursor);
        data.nftBurn = nftBurn;
        cursor += GUARDS_SIZE.nftBurn;
      }
      if (tokenBurnEnabled) {
        const [tokenBurn] = TokenBurn_1.tokenBurnBeet.deserialize(buffer2, cursor);
        data.tokenBurn = tokenBurn;
        cursor += GUARDS_SIZE.tokenBurn;
      }
      if (freezeSolPaymentEnabled) {
        const [freezeSolPayment] = generated_1.freezeSolPaymentBeet.deserialize(buffer2, cursor);
        data.freezeSolPayment = freezeSolPayment;
        cursor += GUARDS_SIZE.freezeSolPayment;
      }
      if (freezeTokenPaymentEnabled) {
        const [freezeTokenPayment] = generated_1.freezeTokenPaymentBeet.deserialize(buffer2, cursor);
        data.freezeTokenPayment = freezeTokenPayment;
        cursor += GUARDS_SIZE.freezeTokenPayment;
      }
      if (programGateEnabled) {
        const [programGate] = generated_1.programGateBeet.deserialize(buffer2, cursor);
        data.programGate = programGate;
        cursor += GUARDS_SIZE.programGate;
      }
      if (allocationEnabled) {
        const [allocation] = generated_1.allocationBeet.deserialize(buffer2, cursor);
        data.allocation = allocation;
        cursor += GUARDS_SIZE.allocation;
      }
      return {
        guardSet: {
          botTax: (_a = data.botTax) !== null && _a !== void 0 ? _a : null,
          solPayment: (_b = data.solPayment) !== null && _b !== void 0 ? _b : null,
          tokenPayment: (_c = data.tokenPayment) !== null && _c !== void 0 ? _c : null,
          startDate: (_d = data.startDate) !== null && _d !== void 0 ? _d : null,
          thirdPartySigner: (_e = data.thirdPartySigner) !== null && _e !== void 0 ? _e : null,
          tokenGate: (_f = data.tokenGate) !== null && _f !== void 0 ? _f : null,
          gatekeeper: (_g = data.gateKeeper) !== null && _g !== void 0 ? _g : null,
          endDate: (_h = data.endDate) !== null && _h !== void 0 ? _h : null,
          allowList: (_j = data.allowList) !== null && _j !== void 0 ? _j : null,
          mintLimit: (_k = data.mintLimit) !== null && _k !== void 0 ? _k : null,
          nftPayment: (_l = data.nftPayment) !== null && _l !== void 0 ? _l : null,
          redeemedAmount: (_m = data.redeemedAmount) !== null && _m !== void 0 ? _m : null,
          addressGate: (_o = data.addressGate) !== null && _o !== void 0 ? _o : null,
          nftGate: (_p = data.nftGate) !== null && _p !== void 0 ? _p : null,
          nftBurn: (_q = data.nftBurn) !== null && _q !== void 0 ? _q : null,
          tokenBurn: (_r = data.tokenBurn) !== null && _r !== void 0 ? _r : null,
          freezeSolPayment: (_s = data.freezeSolPayment) !== null && _s !== void 0 ? _s : null,
          freezeTokenPayment: (_t = data.freezeTokenPayment) !== null && _t !== void 0 ? _t : null,
          programGate: (_u = data.programGate) !== null && _u !== void 0 ? _u : null,
          allocation: (_v = data.allocation) !== null && _v !== void 0 ? _v : null
        },
        offset: cursor
      };
    }
    function serializeGuardSet(buffer2, offset, guardSet) {
      const start = offset;
      offset += beet_1.u64.byteSize;
      let features = 0;
      let index = 0;
      if (guardSet.botTax) {
        generated_1.botTaxBeet.write(buffer2, offset, guardSet.botTax);
        offset += GUARDS_SIZE.botTax;
        features |= 1 << index;
      }
      index++;
      if (guardSet.solPayment) {
        SolPayment_1.solPaymentBeet.write(buffer2, offset, guardSet.solPayment);
        offset += GUARDS_SIZE.solPayment;
        features |= 1 << index;
      }
      index++;
      if (guardSet.tokenPayment) {
        TokenPayment_1.tokenPaymentBeet.write(buffer2, offset, guardSet.tokenPayment);
        offset += GUARDS_SIZE.tokenPayment;
        features |= 1 << index;
      }
      index++;
      if (guardSet.startDate) {
        generated_1.startDateBeet.write(buffer2, offset, guardSet.startDate);
        offset += GUARDS_SIZE.startDate;
        features |= 1 << index;
      }
      index++;
      if (guardSet.thirdPartySigner) {
        generated_1.thirdPartySignerBeet.write(buffer2, offset, guardSet.thirdPartySigner);
        offset += GUARDS_SIZE.thirdPartySigner;
        features |= 1 << index;
      }
      index++;
      if (guardSet.tokenGate) {
        generated_1.tokenGateBeet.write(buffer2, offset, guardSet.tokenGate);
        offset += GUARDS_SIZE.tokenGate;
        features |= 1 << index;
      }
      index++;
      if (guardSet.gatekeeper) {
        generated_1.gatekeeperBeet.write(buffer2, offset, guardSet.gatekeeper);
        offset += GUARDS_SIZE.gatekeeper;
        features |= 1 << index;
      }
      index++;
      if (guardSet.endDate) {
        EndDate_1.endDateBeet.write(buffer2, offset, guardSet.endDate);
        offset += GUARDS_SIZE.endDate;
        features |= 1 << index;
      }
      index++;
      if (guardSet.allowList) {
        generated_1.allowListBeet.write(buffer2, offset, guardSet.allowList);
        offset += GUARDS_SIZE.allowList;
        features |= 1 << index;
      }
      index++;
      if (guardSet.mintLimit) {
        generated_1.mintLimitBeet.write(buffer2, offset, guardSet.mintLimit);
        offset += GUARDS_SIZE.mintLimit;
        features |= 1 << index;
      }
      index++;
      if (guardSet.nftPayment) {
        generated_1.nftPaymentBeet.write(buffer2, offset, guardSet.nftPayment);
        offset += GUARDS_SIZE.nftPayment;
        features |= 1 << index;
      }
      index++;
      if (guardSet.redeemedAmount) {
        RedeemedAmount_1.redeemedAmountBeet.write(buffer2, offset, guardSet.redeemedAmount);
        offset += GUARDS_SIZE.redeemedAmount;
        features |= 1 << index;
      }
      index++;
      if (guardSet.addressGate) {
        AddressGate_1.addressGateBeet.write(buffer2, offset, guardSet.addressGate);
        offset += GUARDS_SIZE.addressGate;
        features |= 1 << index;
      }
      index++;
      if (guardSet.nftGate) {
        NftGate_1.nftGateBeet.write(buffer2, offset, guardSet.nftGate);
        offset += GUARDS_SIZE.nftGate;
        features |= 1 << index;
      }
      index++;
      if (guardSet.nftBurn) {
        NftBurn_1.nftBurnBeet.write(buffer2, offset, guardSet.nftBurn);
        offset += GUARDS_SIZE.nftBurn;
        features |= 1 << index;
      }
      index++;
      if (guardSet.tokenBurn) {
        TokenBurn_1.tokenBurnBeet.write(buffer2, offset, guardSet.tokenBurn);
        offset += GUARDS_SIZE.tokenBurn;
        features |= 1 << index;
      }
      index++;
      if (guardSet.freezeSolPayment) {
        generated_1.freezeSolPaymentBeet.write(buffer2, offset, guardSet.freezeSolPayment);
        offset += GUARDS_SIZE.freezeSolPayment;
        features |= 1 << index;
      }
      index++;
      if (guardSet.freezeTokenPayment) {
        generated_1.freezeTokenPaymentBeet.write(buffer2, offset, guardSet.freezeTokenPayment);
        offset += GUARDS_SIZE.freezeTokenPayment;
        features |= 1 << index;
      }
      index++;
      if (guardSet.programGate) {
        if (guardSet.programGate.additional && guardSet.programGate.additional.length > MAX_PROGRAM_COUNT) {
          throw `Exceeded maximum number of programs on additional list:        ${guardSet.programGate.additional.length} > ${MAX_PROGRAM_COUNT}`;
        }
        const [data] = generated_1.programGateBeet.serialize(guardSet.programGate, GUARDS_SIZE.programGate);
        data.copy(buffer2, offset);
        offset += GUARDS_SIZE.programGate;
        features |= 1 << index;
      }
      index++;
      if (guardSet.allocation) {
        generated_1.allocationBeet.write(buffer2, offset, guardSet.allocation);
        offset += GUARDS_SIZE.allocation;
        features |= 1 << index;
      }
      index++;
      beet_1.u64.write(buffer2, start, features);
      return offset;
    }
  }
});

// ../../node_modules/@metaplex-foundation/mpl-candy-guard/dist/src/index.js
var require_src2 = __commonJS({
  "../../node_modules/@metaplex-foundation/mpl-candy-guard/dist/src/index.js"(exports) {
    "use strict";
    var __createBinding = exports && exports.__createBinding || (Object.create ? function(o2, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      var desc = Object.getOwnPropertyDescriptor(m, k);
      if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m[k];
        } };
      }
      Object.defineProperty(o2, k2, desc);
    } : function(o2, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      o2[k2] = m[k];
    });
    var __exportStar = exports && exports.__exportStar || function(m, exports2) {
      for (var p in m)
        if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports2, p))
          __createBinding(exports2, m, p);
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    __exportStar(require_generated5(), exports);
    __exportStar(require_errors12(), exports);
    __exportStar(require_parser(), exports);
    __exportStar(require_log(), exports);
  }
});

// ../../node_modules/@metaplex-foundation/mpl-candy-machine-core/node_modules/@metaplex-foundation/beet/dist/cjs/src/types.js
var require_types11 = __commonJS({
  "../../node_modules/@metaplex-foundation/mpl-candy-machine-core/node_modules/@metaplex-foundation/beet/dist/cjs/src/types.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.isElementCollectionFixedSizeBeet = exports.isFixableBeet = exports.assertFixedSizeBeet = exports.isFixedSizeBeet = exports.BEET_TYPE_ARG_INNER = exports.BEET_TYPE_ARG_LEN = exports.BEET_PACKAGE = void 0;
    var assert_1 = require_assert();
    exports.BEET_PACKAGE = "@metaplex-foundation/beet";
    exports.BEET_TYPE_ARG_LEN = "len";
    exports.BEET_TYPE_ARG_INNER = "Beet<{innner}>";
    function isFixedSizeBeet(x) {
      return Object.keys(x).includes("byteSize");
    }
    exports.isFixedSizeBeet = isFixedSizeBeet;
    function assertFixedSizeBeet(x, msg = `${x} should have been a fixed beet`) {
      (0, assert_1.strict)(isFixedSizeBeet(x), msg);
    }
    exports.assertFixedSizeBeet = assertFixedSizeBeet;
    function isFixableBeet2(x) {
      return typeof x.toFixedFromData === "function" && typeof x.toFixedFromValue === "function";
    }
    exports.isFixableBeet = isFixableBeet2;
    function isElementCollectionFixedSizeBeet(x) {
      const keys = Object.keys(x);
      return keys.includes("length") && keys.includes("elementByteSize") && keys.includes("lenPrefixByteSize");
    }
    exports.isElementCollectionFixedSizeBeet = isElementCollectionFixedSizeBeet;
  }
});

// ../../node_modules/@metaplex-foundation/mpl-candy-machine-core/node_modules/@metaplex-foundation/beet/dist/cjs/src/beets/numbers.js
var require_numbers3 = __commonJS({
  "../../node_modules/@metaplex-foundation/mpl-candy-machine-core/node_modules/@metaplex-foundation/beet/dist/cjs/src/beets/numbers.js"(exports) {
    "use strict";
    var __importDefault = exports && exports.__importDefault || function(mod) {
      return mod && mod.__esModule ? mod : { "default": mod };
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.numbersTypeMap = exports.bool = exports.i512 = exports.i256 = exports.i128 = exports.i64 = exports.i32 = exports.i16 = exports.i8 = exports.u512 = exports.u256 = exports.u128 = exports.u64 = exports.u32 = exports.u16 = exports.u8 = void 0;
    var bn_js_1 = __importDefault(require_bn());
    var types_1 = require_types11();
    exports.u8 = {
      write: function(buf, offset, value) {
        buf.writeUInt8(value, offset);
      },
      read: function(buf, offset) {
        return buf.readUInt8(offset);
      },
      byteSize: 1,
      description: "u8"
    };
    exports.u16 = {
      write: function(buf, offset, value) {
        buf.writeUInt16LE(value, offset);
      },
      read: function(buf, offset) {
        return buf.readUInt16LE(offset);
      },
      byteSize: 2,
      description: "u16"
    };
    exports.u32 = {
      write: function(buf, offset, value) {
        buf.writeUInt32LE(value, offset);
      },
      read: function(buf, offset) {
        return buf.readUInt32LE(offset);
      },
      byteSize: 4,
      description: "u32"
    };
    function unsignedLargeBeet(byteSize, description) {
      return {
        write: function(buf, offset, value) {
          const bn = bn_js_1.default.isBN(value) ? value : new bn_js_1.default(value);
          const bytesArray = bn.toArray("le", this.byteSize);
          const bytesArrayBuf = Buffer.from(bytesArray);
          bytesArrayBuf.copy(buf, offset, 0, this.byteSize);
        },
        read: function(buf, offset) {
          const slice = buf.slice(offset, offset + this.byteSize);
          return new bn_js_1.default(slice, "le");
        },
        byteSize,
        description
      };
    }
    exports.u64 = unsignedLargeBeet(8, "u64");
    exports.u128 = unsignedLargeBeet(16, "u128");
    exports.u256 = unsignedLargeBeet(32, "u256");
    exports.u512 = unsignedLargeBeet(64, "u512");
    exports.i8 = {
      write: function(buf, offset, value) {
        buf.writeInt8(value, offset);
      },
      read: function(buf, offset) {
        return buf.readInt8(offset);
      },
      byteSize: 1,
      description: "i8"
    };
    exports.i16 = {
      write: function(buf, offset, value) {
        buf.writeInt16LE(value, offset);
      },
      read: function(buf, offset) {
        return buf.readInt16LE(offset);
      },
      byteSize: 2,
      description: "i16"
    };
    exports.i32 = {
      write: function(buf, offset, value) {
        buf.writeInt32LE(value, offset);
      },
      read: function(buf, offset) {
        return buf.readInt32LE(offset);
      },
      byteSize: 4,
      description: "i32"
    };
    function signedLargeBeet(byteSize, description) {
      const bitSize = byteSize * 8;
      return {
        write: function(buf, offset, value) {
          const bn = (bn_js_1.default.isBN(value) ? value : new bn_js_1.default(value)).toTwos(bitSize);
          const bytesArray = bn.toArray("le", this.byteSize);
          const bytesArrayBuf = Buffer.from(bytesArray);
          bytesArrayBuf.copy(buf, offset, 0, this.byteSize);
        },
        read: function(buf, offset) {
          const slice = buf.slice(offset, offset + this.byteSize);
          const x = new bn_js_1.default(slice, "le");
          return x.fromTwos(bitSize);
        },
        byteSize,
        description
      };
    }
    exports.i64 = signedLargeBeet(8, "i64");
    exports.i128 = signedLargeBeet(16, "i128");
    exports.i256 = signedLargeBeet(32, "i256");
    exports.i512 = signedLargeBeet(64, "i512");
    exports.bool = {
      write: function(buf, offset, value) {
        const n = value ? 1 : 0;
        exports.u8.write(buf, offset, n);
      },
      read: function(buf, offset) {
        return exports.u8.read(buf, offset) === 1;
      },
      byteSize: 1,
      description: "bool"
    };
    exports.numbersTypeMap = {
      // <= 32-bit numbers and boolean
      u8: { beet: "u8", isFixable: false, sourcePack: types_1.BEET_PACKAGE, ts: "number" },
      u16: { beet: "u16", isFixable: false, sourcePack: types_1.BEET_PACKAGE, ts: "number" },
      u32: { beet: "u32", isFixable: false, sourcePack: types_1.BEET_PACKAGE, ts: "number" },
      i8: { beet: "i8", isFixable: false, sourcePack: types_1.BEET_PACKAGE, ts: "number" },
      i16: { beet: "i16", isFixable: false, sourcePack: types_1.BEET_PACKAGE, ts: "number" },
      i32: { beet: "i32", isFixable: false, sourcePack: types_1.BEET_PACKAGE, ts: "number" },
      bool: { beet: "bool", isFixable: false, sourcePack: types_1.BEET_PACKAGE, ts: "boolean" },
      // Big Number, they use, the 'bignum' type which is defined in this package
      u64: { beet: "u64", isFixable: false, sourcePack: types_1.BEET_PACKAGE, ts: "bignum", pack: types_1.BEET_PACKAGE },
      u128: { beet: "u128", isFixable: false, sourcePack: types_1.BEET_PACKAGE, ts: "bignum", pack: types_1.BEET_PACKAGE },
      u256: { beet: "u256", isFixable: false, sourcePack: types_1.BEET_PACKAGE, ts: "bignum", pack: types_1.BEET_PACKAGE },
      u512: { beet: "u512", isFixable: false, sourcePack: types_1.BEET_PACKAGE, ts: "bignum", pack: types_1.BEET_PACKAGE },
      i64: { beet: "i64", isFixable: false, sourcePack: types_1.BEET_PACKAGE, ts: "bignum", pack: types_1.BEET_PACKAGE },
      i128: { beet: "i128", isFixable: false, sourcePack: types_1.BEET_PACKAGE, ts: "bignum", pack: types_1.BEET_PACKAGE },
      i256: { beet: "i256", isFixable: false, sourcePack: types_1.BEET_PACKAGE, ts: "bignum", pack: types_1.BEET_PACKAGE },
      i512: { beet: "i512", isFixable: false, sourcePack: types_1.BEET_PACKAGE, ts: "bignum", pack: types_1.BEET_PACKAGE }
    };
  }
});

// ../../node_modules/@metaplex-foundation/mpl-candy-machine-core/node_modules/@metaplex-foundation/beet/dist/cjs/src/utils.js
var require_utils9 = __commonJS({
  "../../node_modules/@metaplex-foundation/mpl-candy-machine-core/node_modules/@metaplex-foundation/beet/dist/cjs/src/utils.js"(exports) {
    "use strict";
    var __importDefault = exports && exports.__importDefault || function(mod) {
      return mod && mod.__esModule ? mod : { "default": mod };
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.bytes = exports.beetBytes = exports.logTrace = exports.logDebug = exports.logInfo = exports.logError = void 0;
    var debug_1 = __importDefault(require_browser2());
    var ansicolors_1 = __importDefault(require_ansicolors());
    var types_1 = require_types11();
    var { brightBlack } = ansicolors_1.default;
    exports.logError = (0, debug_1.default)("beet:error");
    exports.logInfo = (0, debug_1.default)("beet:info");
    exports.logDebug = (0, debug_1.default)("beet:debug");
    exports.logTrace = (0, debug_1.default)("beet:trace");
    function beetBytes(beet9, isFixable = false) {
      let bytes2;
      if ((0, types_1.isFixableBeet)(beet9)) {
        bytes2 = "? B";
      } else if ((0, types_1.isElementCollectionFixedSizeBeet)(beet9)) {
        const len = isFixable ? "length" : beet9.length;
        const lenBytes = beet9.lenPrefixByteSize;
        bytes2 = lenBytes > 0 ? `${lenBytes} + (${beet9.elementByteSize} * ${len}) B  (${beet9.byteSize} B)` : `(${beet9.elementByteSize} * ${len}) B (${beet9.byteSize} B)`;
      } else {
        bytes2 = `${beet9.byteSize} B`;
      }
      return brightBlack(bytes2);
    }
    exports.beetBytes = beetBytes;
    function bytes(n) {
      return brightBlack(`${n} B`);
    }
    exports.bytes = bytes;
  }
});

// ../../node_modules/@metaplex-foundation/mpl-candy-machine-core/node_modules/@metaplex-foundation/beet/dist/cjs/src/beet.fixable.js
var require_beet_fixable3 = __commonJS({
  "../../node_modules/@metaplex-foundation/mpl-candy-machine-core/node_modules/@metaplex-foundation/beet/dist/cjs/src/beet.fixable.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.fixBeetFromValue = exports.fixBeetFromData = void 0;
    var types_1 = require_types11();
    function fixBeetFromData(beet9, buf, offset) {
      if ((0, types_1.isFixedSizeBeet)(beet9)) {
        return beet9;
      }
      if ((0, types_1.isFixableBeet)(beet9)) {
        return beet9.toFixedFromData(buf, offset);
      }
      throw new Error(`${beet9.description} is neither fixed size nor fixable`);
    }
    exports.fixBeetFromData = fixBeetFromData;
    function fixBeetFromValue(beet9, val) {
      if ((0, types_1.isFixedSizeBeet)(beet9)) {
        return beet9;
      }
      if ((0, types_1.isFixableBeet)(beet9)) {
        return beet9.toFixedFromValue(val);
      }
      throw new Error(`${beet9.description} is neither fixed size nor fixable`);
    }
    exports.fixBeetFromValue = fixBeetFromValue;
  }
});

// ../../node_modules/@metaplex-foundation/mpl-candy-machine-core/node_modules/@metaplex-foundation/beet/dist/cjs/src/beets/collections.js
var require_collections3 = __commonJS({
  "../../node_modules/@metaplex-foundation/mpl-candy-machine-core/node_modules/@metaplex-foundation/beet/dist/cjs/src/beets/collections.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.collectionsTypeMap = exports.uint8Array = exports.fixedSizeUint8Array = exports.fixedSizeBuffer = exports.array = exports.fixedSizeArray = exports.uniformFixedSizeArray = void 0;
    var types_1 = require_types11();
    var assert_1 = require_assert();
    var numbers_1 = require_numbers3();
    var types_2 = require_types11();
    var utils_1 = require_utils9();
    var beet_fixable_1 = require_beet_fixable3();
    function uniformFixedSizeArray3(element, len, lenPrefix = false) {
      const arraySize = element.byteSize * len;
      const byteSize = lenPrefix ? 4 + arraySize : arraySize;
      return {
        write: function(buf, offset, value) {
          assert_1.strict.equal(value.length, len, `array length ${value.length} should match len ${len}`);
          if (lenPrefix) {
            numbers_1.u32.write(buf, offset, len);
            offset += 4;
          }
          for (let i = 0; i < len; i++) {
            element.write(buf, offset + i * element.byteSize, value[i]);
          }
        },
        read: function(buf, offset) {
          if (lenPrefix) {
            const size = numbers_1.u32.read(buf, offset);
            assert_1.strict.equal(size, len, "invalid byte size");
            offset += 4;
          }
          const arr = new Array(len);
          for (let i = 0; i < len; i++) {
            arr[i] = element.read(buf, offset + i * element.byteSize);
          }
          return arr;
        },
        byteSize,
        length: len,
        elementByteSize: element.byteSize,
        lenPrefixByteSize: 4,
        description: `Array<${element.description}>(${len})`
      };
    }
    exports.uniformFixedSizeArray = uniformFixedSizeArray3;
    function fixedSizeArray(elements, elementsByteSize) {
      const len = elements.length;
      const firstElement = len === 0 ? "<EMPTY>" : elements[0].description;
      return {
        write: function(buf, offset, value) {
          assert_1.strict.equal(value.length, len, `array length ${value.length} should match len ${len}`);
          numbers_1.u32.write(buf, offset, len);
          let cursor = offset + 4;
          for (let i = 0; i < len; i++) {
            const element = elements[i];
            element.write(buf, cursor, value[i]);
            cursor += element.byteSize;
          }
        },
        read: function(buf, offset) {
          const size = numbers_1.u32.read(buf, offset);
          assert_1.strict.equal(size, len, "invalid byte size");
          let cursor = offset + 4;
          const arr = new Array(len);
          for (let i = 0; i < len; i++) {
            const element = elements[i];
            arr[i] = element.read(buf, cursor);
            cursor += element.byteSize;
          }
          return arr;
        },
        byteSize: 4 + elementsByteSize,
        length: len,
        description: `Array<${firstElement}>(${len})[ 4 + ${elementsByteSize} ]`
      };
    }
    exports.fixedSizeArray = fixedSizeArray;
    function array(element) {
      return {
        toFixedFromData(buf, offset) {
          const len = numbers_1.u32.read(buf, offset);
          (0, utils_1.logTrace)(`${this.description}[${len}]`);
          const cursorStart = offset + 4;
          let cursor = cursorStart;
          const fixedElements = new Array(len);
          for (let i = 0; i < len; i++) {
            const fixedElement = (0, beet_fixable_1.fixBeetFromData)(element, buf, cursor);
            fixedElements[i] = fixedElement;
            cursor += fixedElement.byteSize;
          }
          return fixedSizeArray(fixedElements, cursor - cursorStart);
        },
        toFixedFromValue(vals) {
          (0, assert_1.strict)(Array.isArray(vals), `${vals} should be an array`);
          let elementsSize = 0;
          const fixedElements = new Array(vals.length);
          for (let i = 0; i < vals.length; i++) {
            const fixedElement = (0, beet_fixable_1.fixBeetFromValue)(element, vals[i]);
            fixedElements[i] = fixedElement;
            elementsSize += fixedElement.byteSize;
          }
          return fixedSizeArray(fixedElements, elementsSize);
        },
        description: `array`
      };
    }
    exports.array = array;
    function fixedSizeBuffer(bytes) {
      return {
        write: function(buf, offset, value) {
          value.copy(buf, offset, 0, bytes);
        },
        read: function(buf, offset) {
          return buf.slice(offset, offset + bytes);
        },
        byteSize: bytes,
        description: `Buffer(${bytes})`
      };
    }
    exports.fixedSizeBuffer = fixedSizeBuffer;
    function fixedSizeUint8Array(len, lenPrefix = false) {
      const arrayBufferBeet = fixedSizeBuffer(len);
      const byteSize = lenPrefix ? len + 4 : len;
      return {
        write: function(buf, offset, value) {
          assert_1.strict.equal(value.byteLength, len, `Uint8Array length ${value.byteLength} should match len ${len}`);
          if (lenPrefix) {
            numbers_1.u32.write(buf, offset, len);
            offset += 4;
          }
          const valueBuf = Buffer.from(value);
          arrayBufferBeet.write(buf, offset, valueBuf);
        },
        read: function(buf, offset) {
          if (lenPrefix) {
            const size = numbers_1.u32.read(buf, offset);
            assert_1.strict.equal(size, len, "invalid byte size");
            offset += 4;
          }
          const arrayBuffer = arrayBufferBeet.read(buf, offset);
          return Uint8Array.from(arrayBuffer);
        },
        byteSize,
        description: `Uint8Array(${len})`
      };
    }
    exports.fixedSizeUint8Array = fixedSizeUint8Array;
    exports.uint8Array = {
      toFixedFromData(buf, offset) {
        const len = numbers_1.u32.read(buf, offset);
        (0, utils_1.logTrace)(`${this.description}[${len}]`);
        return fixedSizeUint8Array(len, true);
      },
      toFixedFromValue(val) {
        const len = val.byteLength;
        return fixedSizeUint8Array(len, true);
      },
      description: `Uint8Array`
    };
    exports.collectionsTypeMap = {
      Array: {
        beet: "array",
        isFixable: true,
        sourcePack: types_2.BEET_PACKAGE,
        ts: "Array",
        arg: types_1.BEET_TYPE_ARG_LEN
      },
      FixedSizeArray: {
        beet: "fixedSizeArray",
        isFixable: false,
        sourcePack: types_2.BEET_PACKAGE,
        ts: "Array",
        arg: types_1.BEET_TYPE_ARG_LEN
      },
      UniformFixedSizeArray: {
        beet: "uniformFixedSizeArray",
        isFixable: false,
        sourcePack: types_2.BEET_PACKAGE,
        ts: "Array",
        arg: types_1.BEET_TYPE_ARG_LEN
      },
      Buffer: {
        beet: "fixedSizeBuffer",
        isFixable: false,
        sourcePack: types_2.BEET_PACKAGE,
        ts: "Buffer",
        arg: types_1.BEET_TYPE_ARG_LEN
      },
      FixedSizeUint8Array: {
        beet: "fixedSizeUint8Array",
        isFixable: false,
        sourcePack: types_2.BEET_PACKAGE,
        ts: "Uint8Array",
        arg: types_1.BEET_TYPE_ARG_LEN
      },
      Uint8Array: {
        beet: "uint8Array",
        isFixable: true,
        sourcePack: types_2.BEET_PACKAGE,
        ts: "Uint8Array",
        arg: types_1.BEET_TYPE_ARG_LEN
      }
    };
  }
});

// ../../node_modules/@metaplex-foundation/mpl-candy-machine-core/node_modules/@metaplex-foundation/beet/dist/cjs/src/beets/composites.js
var require_composites3 = __commonJS({
  "../../node_modules/@metaplex-foundation/mpl-candy-machine-core/node_modules/@metaplex-foundation/beet/dist/cjs/src/beets/composites.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.compositesTypeMap = exports.coption = exports.coptionSome = exports.coptionNone = exports.isNoneBuffer = exports.isSomeBuffer = void 0;
    var assert_1 = require_assert();
    var types_1 = require_types11();
    var types_2 = require_types11();
    var utils_1 = require_utils9();
    var beet_fixable_1 = require_beet_fixable3();
    var NONE = 0;
    var SOME = 1;
    function isSomeBuffer(buf, offset) {
      return buf[offset] === SOME;
    }
    exports.isSomeBuffer = isSomeBuffer;
    function isNoneBuffer(buf, offset) {
      return buf[offset] === NONE;
    }
    exports.isNoneBuffer = isNoneBuffer;
    function coptionNone(description) {
      (0, utils_1.logTrace)(`coptionNone(${description})`);
      return {
        write: function(buf, offset, value) {
          (0, assert_1.strict)(value == null, "coptionNone can only handle `null` values");
          buf[offset] = NONE;
        },
        read: function(buf, offset) {
          (0, assert_1.strict)(isNoneBuffer(buf, offset), "coptionNone can only handle `NONE` data");
          return null;
        },
        byteSize: 1,
        description: `COption<None(${description})>`
      };
    }
    exports.coptionNone = coptionNone;
    function coptionSome(inner) {
      const byteSize = 1 + inner.byteSize;
      const beet9 = {
        write: function(buf, offset, value) {
          (0, types_1.assertFixedSizeBeet)(inner, `coption inner type ${inner.description} needs to be fixed before calling write`);
          (0, assert_1.strict)(value != null, "coptionSome cannot handle `null` values");
          buf[offset] = SOME;
          inner.write(buf, offset + 1, value);
        },
        read: function(buf, offset) {
          (0, types_1.assertFixedSizeBeet)(inner, `coption inner type ${inner.description} needs to be fixed before calling read`);
          (0, assert_1.strict)(isSomeBuffer(buf, offset), "coptionSome can only handle `SOME` data");
          return inner.read(buf, offset + 1);
        },
        description: `COption<${inner.description}>[1 + ${inner.byteSize}]`,
        byteSize,
        inner
      };
      (0, utils_1.logTrace)(beet9.description);
      return beet9;
    }
    exports.coptionSome = coptionSome;
    function coption(inner) {
      return {
        toFixedFromData(buf, offset) {
          if (isSomeBuffer(buf, offset)) {
            const innerFixed = (0, beet_fixable_1.fixBeetFromData)(inner, buf, offset + 1);
            return coptionSome(innerFixed);
          } else {
            (0, assert_1.strict)(isNoneBuffer(buf, offset), `Expected ${buf} to hold a COption`);
            return coptionNone(inner.description);
          }
        },
        toFixedFromValue(val) {
          return val == null ? coptionNone(inner.description) : coptionSome((0, beet_fixable_1.fixBeetFromValue)(inner, val));
        },
        description: `COption<${inner.description}>`
      };
    }
    exports.coption = coption;
    exports.compositesTypeMap = {
      option: {
        beet: "coption",
        isFixable: true,
        sourcePack: types_2.BEET_PACKAGE,
        ts: "COption<Inner>",
        arg: types_1.BEET_TYPE_ARG_INNER,
        pack: types_2.BEET_PACKAGE
      }
    };
  }
});

// ../../node_modules/@metaplex-foundation/mpl-candy-machine-core/node_modules/@metaplex-foundation/beet/dist/cjs/src/beets/string.js
var require_string3 = __commonJS({
  "../../node_modules/@metaplex-foundation/mpl-candy-machine-core/node_modules/@metaplex-foundation/beet/dist/cjs/src/beets/string.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.stringTypeMap = exports.utf8String = exports.fixedSizeUtf8String = void 0;
    var types_1 = require_types11();
    var assert_1 = require_assert();
    var numbers_1 = require_numbers3();
    var utils_1 = require_utils9();
    var fixedSizeUtf8String = (stringByteLength) => {
      return {
        write: function(buf, offset, value) {
          const stringBuf = Buffer.from(value, "utf8");
          assert_1.strict.equal(stringBuf.byteLength, stringByteLength, `${value} has invalid byte size`);
          numbers_1.u32.write(buf, offset, stringByteLength);
          stringBuf.copy(buf, offset + 4, 0, stringByteLength);
        },
        read: function(buf, offset) {
          const size = numbers_1.u32.read(buf, offset);
          assert_1.strict.equal(size, stringByteLength, `invalid byte size`);
          const stringSlice = buf.slice(offset + 4, offset + 4 + stringByteLength);
          return stringSlice.toString("utf8");
        },
        elementByteSize: 1,
        length: stringByteLength,
        lenPrefixByteSize: 4,
        byteSize: 4 + stringByteLength,
        description: `Utf8String(4 + ${stringByteLength})`
      };
    };
    exports.fixedSizeUtf8String = fixedSizeUtf8String;
    exports.utf8String = {
      toFixedFromData(buf, offset) {
        const len = numbers_1.u32.read(buf, offset);
        (0, utils_1.logTrace)(`${this.description}[${len}]`);
        return (0, exports.fixedSizeUtf8String)(len);
      },
      toFixedFromValue(val) {
        const len = Buffer.from(val).byteLength;
        return (0, exports.fixedSizeUtf8String)(len);
      },
      description: `Utf8String`
    };
    exports.stringTypeMap = {
      fixedSizeString: {
        beet: "fixedSizeUtf8String",
        isFixable: false,
        sourcePack: types_1.BEET_PACKAGE,
        ts: "string",
        arg: types_1.BEET_TYPE_ARG_LEN
      },
      string: {
        beet: "utf8String",
        isFixable: true,
        sourcePack: types_1.BEET_PACKAGE,
        ts: "string"
      }
    };
  }
});

// ../../node_modules/@metaplex-foundation/mpl-candy-machine-core/node_modules/@metaplex-foundation/beet/dist/cjs/src/read-write.js
var require_read_write3 = __commonJS({
  "../../node_modules/@metaplex-foundation/mpl-candy-machine-core/node_modules/@metaplex-foundation/beet/dist/cjs/src/read-write.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.BeetReader = exports.BeetWriter = void 0;
    var assert_1 = require_assert();
    var BeetWriter3 = class {
      constructor(byteSize) {
        this.buf = Buffer.alloc(byteSize);
        this._offset = 0;
      }
      get buffer() {
        return this.buf;
      }
      get offset() {
        return this._offset;
      }
      maybeResize(bytesNeeded) {
        if (this._offset + bytesNeeded > this.buf.length) {
          assert_1.strict.fail(`We shouldn't ever need to resize, but ${this._offset + bytesNeeded} > ${this.buf.length}`);
        }
      }
      write(beet9, value) {
        this.maybeResize(beet9.byteSize);
        beet9.write(this.buf, this._offset, value);
        this._offset += beet9.byteSize;
      }
      writeStruct(instance, fields) {
        for (const [key, beet9] of fields) {
          const value = instance[key];
          this.write(beet9, value);
        }
      }
    };
    exports.BeetWriter = BeetWriter3;
    var BeetReader3 = class {
      constructor(buffer2, _offset = 0) {
        this.buffer = buffer2;
        this._offset = _offset;
      }
      get offset() {
        return this._offset;
      }
      read(beet9) {
        const value = beet9.read(this.buffer, this._offset);
        this._offset += beet9.byteSize;
        return value;
      }
      readStruct(fields) {
        const acc = {};
        for (const [key, beet9] of fields) {
          acc[key] = this.read(beet9);
        }
        return acc;
      }
    };
    exports.BeetReader = BeetReader3;
  }
});

// ../../node_modules/@metaplex-foundation/mpl-candy-machine-core/node_modules/@metaplex-foundation/beet/dist/cjs/src/struct.js
var require_struct3 = __commonJS({
  "../../node_modules/@metaplex-foundation/mpl-candy-machine-core/node_modules/@metaplex-foundation/beet/dist/cjs/src/struct.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.BeetArgsStruct = exports.isBeetStruct = exports.BeetStruct = void 0;
    var read_write_1 = require_read_write3();
    var utils_1 = require_utils9();
    var BeetStruct = class _BeetStruct {
      /**
       * Creates an instance of the BeetStruct.
       *
       * @param fields de/serializers for each field of the {@link Class}
       * @param construct the function that creates an instance of {@link Class}
       * from the args
       * @param description identifies this struct for diagnostics/debugging
       * purposes
       */
      constructor(fields, construct, description = _BeetStruct.description) {
        this.fields = fields;
        this.construct = construct;
        this.description = description;
        this.byteSize = this.getByteSize();
        if (utils_1.logDebug.enabled) {
          const flds = fields.map(([key, val]) => `${String(key)}: ${val.description} ${(0, utils_1.beetBytes)(val)}`).join("\n  ");
          (0, utils_1.logDebug)(`struct ${description} {
  ${flds}
} ${(0, utils_1.beetBytes)(this)}`);
        }
      }
      /**
       * Along with `write` this allows structs to be treated as {@link Beet}s and
       * thus supports composing/nesting them the same way.
       * @private
       */
      read(buf, offset) {
        const [value] = this.deserialize(buf, offset);
        return value;
      }
      /**
       * Along with `read` this allows structs to be treated as {@link Beet}s and
       * thus supports composing/nesting them the same way.
       * @private
       */
      write(buf, offset, value) {
        const [innerBuf, innerOffset] = this.serialize(value);
        innerBuf.copy(buf, offset, 0, innerOffset);
      }
      /**
       * Deserializes an instance of the Class from the provided buffer starting to
       * read at the provided offset.
       *
       * @returns `[instance of Class, offset into buffer after deserialization completed]`
       */
      deserialize(buffer2, offset = 0) {
        if (utils_1.logTrace.enabled) {
          (0, utils_1.logTrace)("deserializing [%s] from %d bytes buffer", this.description, buffer2.byteLength);
          (0, utils_1.logTrace)(buffer2);
          (0, utils_1.logTrace)(buffer2.toJSON().data);
        }
        const reader = new read_write_1.BeetReader(buffer2, offset);
        const args = reader.readStruct(this.fields);
        return [this.construct(args), reader.offset];
      }
      /**
       * Serializes the provided instance into a new {@link Buffer}
       *
       * @param instance of the struct to serialize
       * @param byteSize allows to override the size fo the created Buffer and
       * defaults to the size of the struct to serialize
       */
      serialize(instance, byteSize = this.byteSize) {
        (0, utils_1.logTrace)("serializing [%s] %o to %d bytes buffer", this.description, instance, byteSize);
        const writer = new read_write_1.BeetWriter(byteSize);
        writer.writeStruct(instance, this.fields);
        return [writer.buffer, writer.offset];
      }
      getByteSize() {
        return this.fields.reduce((acc, [_, beet9]) => acc + beet9.byteSize, 0);
      }
      get type() {
        return _BeetStruct.TYPE;
      }
    };
    exports.BeetStruct = BeetStruct;
    BeetStruct.description = "BeetStruct";
    BeetStruct.TYPE = "BeetStruct";
    function isBeetStruct(beet9) {
      return beet9.type === BeetStruct.TYPE;
    }
    exports.isBeetStruct = isBeetStruct;
    var BeetArgsStruct = class _BeetArgsStruct extends BeetStruct {
      constructor(fields, description = _BeetArgsStruct.description) {
        super(fields, (args) => args, description);
      }
    };
    exports.BeetArgsStruct = BeetArgsStruct;
    BeetArgsStruct.description = "BeetArgsStruct";
  }
});

// ../../node_modules/@metaplex-foundation/mpl-candy-machine-core/node_modules/@metaplex-foundation/beet/dist/cjs/src/struct.fixable.js
var require_struct_fixable3 = __commonJS({
  "../../node_modules/@metaplex-foundation/mpl-candy-machine-core/node_modules/@metaplex-foundation/beet/dist/cjs/src/struct.fixable.js"(exports) {
    "use strict";
    var __importDefault = exports && exports.__importDefault || function(mod) {
      return mod && mod.__esModule ? mod : { "default": mod };
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.FixableBeetArgsStruct = exports.isFixableBeetStruct = exports.FixableBeetStruct = void 0;
    var beet_fixable_1 = require_beet_fixable3();
    var struct_1 = require_struct3();
    var types_1 = require_types11();
    var assert_1 = require_assert();
    var utils_1 = require_utils9();
    var ansicolors_1 = __importDefault(require_ansicolors());
    var { brightBlack } = ansicolors_1.default;
    var FixableBeetStruct = class _FixableBeetStruct {
      /**
       * Creates an instance of the {@link FixableBeetStruct}.
       *
       * @param fields fixed or fixable de/serializers for each field of the {@link Class}
       * @param construct the function that creates an instance of {@link Class}
       * from the args
       * @param description identifies this struct for diagnostics/debugging
       * purposes
       */
      constructor(fields, construct, description = _FixableBeetStruct.description) {
        this.fields = fields;
        this.construct = construct;
        this.description = description;
        let minByteSize = 0;
        if (utils_1.logDebug.enabled) {
          const flds = fields.map(([key, val]) => {
            if ((0, types_1.isFixedSizeBeet)(val)) {
              minByteSize += val.byteSize;
            }
            return `${key}: ${val.description} ${(0, utils_1.beetBytes)(val)}`;
          }).join("\n  ");
          const bytes = `> ${minByteSize} B`;
          (0, utils_1.logDebug)(`struct ${description} {
  ${flds}
} ${brightBlack(bytes)}`);
        }
      }
      /**
       * Deserializes an instance of the Class from the provided buffer starting to
       * read at the provided offset.
       *
       * @returns `[instance of Class, offset into buffer after deserialization completed]`
       */
      deserialize(buffer2, offset = 0) {
        return this.toFixedFromData(buffer2, offset).deserialize(buffer2, offset);
      }
      /**
       * Serializes the provided instance into a new {@link Buffer}
       *
       * **NOTE:** that the `instance` is traversed and each of its fields accessed
       * twice, once to derive a _fixed size_ {@link BeetStruct} and then use it to
       * serialize the `instance`.
       * Therefore ensure that none of the properties that are part of the struct
       * have side effects, i.e. via `Getter`s.
       *
       * @param instance of the struct to serialize
       * @param byteSize allows to override the size fo the created Buffer and
       * defaults to the size of the struct to serialize
       */
      serialize(instance, byteSize) {
        return this.toFixedFromValue(instance).serialize(instance, byteSize);
      }
      toFixedFromData(buf, offset) {
        let cursor = offset;
        const fixedFields = new Array(this.fields.length);
        for (let i = 0; i < this.fields.length; i++) {
          const [key, beet9] = this.fields[i];
          const fixedBeet = (0, beet_fixable_1.fixBeetFromData)(beet9, buf, cursor);
          fixedFields[i] = [key, fixedBeet];
          cursor += fixedBeet.byteSize;
        }
        return this.description !== _FixableBeetStruct.description ? new struct_1.BeetStruct(fixedFields, this.construct, this.description) : new struct_1.BeetStruct(fixedFields, this.construct);
      }
      toFixedFromValue(args) {
        const argsKeys = Object.keys(args);
        const fixedFields = new Array(this.fields.length);
        for (let i = 0; i < this.fields.length; i++) {
          const [key, beet9] = this.fields[i];
          (0, assert_1.strict)(argsKeys.includes(key), `Value with keys [ ${argsKeys} ] should include struct key '${key}' but doesn't.`);
          const val = args[key];
          const fixedBeet = (0, beet_fixable_1.fixBeetFromValue)(beet9, val);
          fixedFields[i] = [key, fixedBeet];
        }
        return this.description !== _FixableBeetStruct.description ? new struct_1.BeetStruct(fixedFields, this.construct, this.description) : new struct_1.BeetStruct(fixedFields, this.construct);
      }
      get type() {
        return _FixableBeetStruct.TYPE;
      }
    };
    exports.FixableBeetStruct = FixableBeetStruct;
    FixableBeetStruct.description = "FixableBeetStruct";
    FixableBeetStruct.TYPE = "FixableBeetStruct";
    function isFixableBeetStruct(beet9) {
      return beet9.type === FixableBeetStruct.TYPE;
    }
    exports.isFixableBeetStruct = isFixableBeetStruct;
    var FixableBeetArgsStruct = class _FixableBeetArgsStruct extends FixableBeetStruct {
      constructor(fields, description = _FixableBeetArgsStruct.description) {
        super(fields, (args) => args, description);
      }
    };
    exports.FixableBeetArgsStruct = FixableBeetArgsStruct;
    FixableBeetArgsStruct.description = "FixableBeetArgsStruct";
  }
});

// ../../node_modules/@metaplex-foundation/mpl-candy-machine-core/node_modules/@metaplex-foundation/beet/dist/cjs/src/beets/enums.js
var require_enums3 = __commonJS({
  "../../node_modules/@metaplex-foundation/mpl-candy-machine-core/node_modules/@metaplex-foundation/beet/dist/cjs/src/beets/enums.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.enumsTypeMap = exports.dataEnum = exports.uniformDataEnum = exports.fixedScalarEnum = void 0;
    var types_1 = require_types11();
    var numbers_1 = require_numbers3();
    var assert_1 = require_assert();
    var struct_1 = require_struct3();
    var struct_fixable_1 = require_struct_fixable3();
    function resolveEnumVariant(value, isNumVariant) {
      return isNumVariant ? `${value}` : value;
    }
    function fixedScalarEnum(enumType) {
      const keys = Object.keys(enumType);
      return {
        write(buf, offset, value) {
          const isNumVariant = typeof value === "number";
          const variantKey = resolveEnumVariant(value, isNumVariant);
          if (!keys.includes(variantKey)) {
            assert_1.strict.fail(`${value} should be a variant of the provided enum type, i.e. [ ${Object.values(enumType).join(", ")} ], but isn't`);
          }
          if (isNumVariant) {
            numbers_1.u8.write(buf, offset, value);
          } else {
            const enumValue = enumType[variantKey];
            numbers_1.u8.write(buf, offset, enumValue);
          }
        },
        read(buf, offset) {
          const value = numbers_1.u8.read(buf, offset);
          const isNumVariant = typeof value === "number";
          const variantKey = resolveEnumVariant(value, isNumVariant);
          if (!keys.includes(variantKey)) {
            assert_1.strict.fail(`${value} should be a of a variant of the provided enum type, i.e. [ ${Object.values(enumType).join(", ")} ], but isn't`);
          }
          return isNumVariant ? value : enumType[variantKey];
        },
        byteSize: numbers_1.u8.byteSize,
        description: "Enum"
      };
    }
    exports.fixedScalarEnum = fixedScalarEnum;
    function uniformDataEnum(inner) {
      return {
        write: function(buf, offset, value) {
          numbers_1.u8.write(buf, offset, value.kind);
          inner.write(buf, offset + 1, value.data);
        },
        read: function(buf, offset) {
          const kind = numbers_1.u8.read(buf, offset);
          const data = inner.read(buf, offset + 1);
          return { kind, data };
        },
        byteSize: 1 + inner.byteSize,
        description: `UniformDataEnum<${inner.description}>`
      };
    }
    exports.uniformDataEnum = uniformDataEnum;
    function enumDataVariantBeet(inner, discriminant, kind) {
      return {
        write(buf, offset, value) {
          numbers_1.u8.write(buf, offset, discriminant);
          inner.write(buf, offset + numbers_1.u8.byteSize, value);
        },
        read(buf, offset) {
          const val = inner.read(buf, offset + numbers_1.u8.byteSize);
          return __spreadValues({ __kind: kind }, val);
        },
        byteSize: inner.byteSize + numbers_1.u8.byteSize,
        description: `EnumData<${inner.description}>`
      };
    }
    function dataEnum(variants) {
      for (const [_, beet9] of variants) {
        (0, assert_1.strict)((0, struct_1.isBeetStruct)(beet9) || (0, struct_fixable_1.isFixableBeetStruct)(beet9), "dataEnum: data beet must be a struct");
      }
      return {
        toFixedFromData(buf, offset) {
          const discriminant = numbers_1.u8.read(buf, offset);
          const variant = variants[discriminant];
          (0, assert_1.strict)(variant != null, `Discriminant ${discriminant} out of range for ${variants.length} variants`);
          const [__kind, dataBeet] = variant;
          const fixed = (0, types_1.isFixedSizeBeet)(dataBeet) ? dataBeet : dataBeet.toFixedFromData(buf, offset + 1);
          return enumDataVariantBeet(fixed, discriminant, __kind);
        },
        toFixedFromValue(val) {
          if (val.__kind == null) {
            const keys = Object.keys(val).join(", ");
            const validKinds = variants.map(([__kind2]) => __kind2).join(", ");
            assert_1.strict.fail(`Value with fields [ ${keys} ] is missing __kind, which needs to be set to one of [ ${validKinds} ]`);
          }
          const discriminant = variants.findIndex(([__kind2]) => __kind2 === val.__kind);
          if (discriminant < 0) {
            const validKinds = variants.map(([__kind2]) => __kind2).join(", ");
            assert_1.strict.fail(`${val.__kind} is not a valid kind, needs to be one of [ ${validKinds} ]`);
          }
          const variant = variants[discriminant];
          const _a = val, { __kind } = _a, dataValue = __objRest(_a, ["__kind"]);
          const [__variantKind, dataBeet] = variant;
          const fixed = (0, types_1.isFixedSizeBeet)(dataBeet) ? dataBeet : dataBeet.toFixedFromValue(dataValue);
          return enumDataVariantBeet(fixed, discriminant, __variantKind);
        },
        description: `DataEnum<${variants.length} variants>`
      };
    }
    exports.dataEnum = dataEnum;
    exports.enumsTypeMap = {
      fixedScalarEnum: {
        beet: "fixedScalarEnum",
        isFixable: false,
        sourcePack: types_1.BEET_PACKAGE,
        ts: "<TypeName>",
        arg: types_1.BEET_TYPE_ARG_INNER,
        pack: types_1.BEET_PACKAGE
      },
      dataEnum: {
        beet: "dataEnum",
        isFixable: false,
        sourcePack: types_1.BEET_PACKAGE,
        ts: "DataEnum<Kind, Inner>",
        arg: types_1.BEET_TYPE_ARG_INNER,
        pack: types_1.BEET_PACKAGE
      }
    };
  }
});

// ../../node_modules/@metaplex-foundation/mpl-candy-machine-core/node_modules/@metaplex-foundation/beet/dist/cjs/src/beets/aliases.js
var require_aliases3 = __commonJS({
  "../../node_modules/@metaplex-foundation/mpl-candy-machine-core/node_modules/@metaplex-foundation/beet/dist/cjs/src/beets/aliases.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.aliasesTypeMap = exports.bytes = void 0;
    var collections_1 = require_collections3();
    exports.bytes = collections_1.uint8Array;
    exports.aliasesTypeMap = {
      // @ts-ignore
      bytes: collections_1.collectionsTypeMap.Uint8Array
    };
  }
});

// ../../node_modules/@metaplex-foundation/mpl-candy-machine-core/node_modules/@metaplex-foundation/beet/dist/cjs/src/beet.js
var require_beet3 = __commonJS({
  "../../node_modules/@metaplex-foundation/mpl-candy-machine-core/node_modules/@metaplex-foundation/beet/dist/cjs/src/beet.js"(exports) {
    "use strict";
    var __createBinding = exports && exports.__createBinding || (Object.create ? function(o2, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      var desc = Object.getOwnPropertyDescriptor(m, k);
      if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m[k];
        } };
      }
      Object.defineProperty(o2, k2, desc);
    } : function(o2, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      o2[k2] = m[k];
    });
    var __exportStar = exports && exports.__exportStar || function(m, exports2) {
      for (var p in m)
        if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports2, p))
          __createBinding(exports2, m, p);
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.supportedTypeMap = void 0;
    var collections_1 = require_collections3();
    var composites_1 = require_composites3();
    var numbers_1 = require_numbers3();
    var string_1 = require_string3();
    var enums_1 = require_enums3();
    var aliases_1 = require_aliases3();
    __exportStar(require_aliases3(), exports);
    __exportStar(require_collections3(), exports);
    __exportStar(require_string3(), exports);
    __exportStar(require_composites3(), exports);
    __exportStar(require_enums3(), exports);
    __exportStar(require_numbers3(), exports);
    __exportStar(require_beet_fixable3(), exports);
    __exportStar(require_read_write3(), exports);
    __exportStar(require_struct3(), exports);
    __exportStar(require_struct_fixable3(), exports);
    __exportStar(require_types11(), exports);
    exports.supportedTypeMap = __spreadValues(__spreadValues(__spreadValues(__spreadValues(__spreadValues(__spreadValues({}, collections_1.collectionsTypeMap), string_1.stringTypeMap), composites_1.compositesTypeMap), enums_1.enumsTypeMap), numbers_1.numbersTypeMap), aliases_1.aliasesTypeMap);
  }
});

// ../../node_modules/@metaplex-foundation/mpl-candy-machine-core/dist/src/generated/types/Creator.js
var require_Creator4 = __commonJS({
  "../../node_modules/@metaplex-foundation/mpl-candy-machine-core/dist/src/generated/types/Creator.js"(exports) {
    "use strict";
    var __createBinding = exports && exports.__createBinding || (Object.create ? function(o2, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      var desc = Object.getOwnPropertyDescriptor(m, k);
      if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m[k];
        } };
      }
      Object.defineProperty(o2, k2, desc);
    } : function(o2, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      o2[k2] = m[k];
    });
    var __setModuleDefault = exports && exports.__setModuleDefault || (Object.create ? function(o2, v) {
      Object.defineProperty(o2, "default", { enumerable: true, value: v });
    } : function(o2, v) {
      o2["default"] = v;
    });
    var __importStar = exports && exports.__importStar || function(mod) {
      if (mod && mod.__esModule)
        return mod;
      var result = {};
      if (mod != null) {
        for (var k in mod)
          if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k))
            __createBinding(result, mod, k);
      }
      __setModuleDefault(result, mod);
      return result;
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.creatorBeet = void 0;
    var beetSolana = __importStar(require_beet_solana5());
    var beet9 = __importStar(require_beet3());
    exports.creatorBeet = new beet9.BeetArgsStruct([
      ["address", beetSolana.publicKey],
      ["verified", beet9.bool],
      ["percentageShare", beet9.u8]
    ], "Creator");
  }
});

// ../../node_modules/@metaplex-foundation/mpl-candy-machine-core/dist/src/generated/types/ConfigLineSettings.js
var require_ConfigLineSettings = __commonJS({
  "../../node_modules/@metaplex-foundation/mpl-candy-machine-core/dist/src/generated/types/ConfigLineSettings.js"(exports) {
    "use strict";
    var __createBinding = exports && exports.__createBinding || (Object.create ? function(o2, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      var desc = Object.getOwnPropertyDescriptor(m, k);
      if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m[k];
        } };
      }
      Object.defineProperty(o2, k2, desc);
    } : function(o2, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      o2[k2] = m[k];
    });
    var __setModuleDefault = exports && exports.__setModuleDefault || (Object.create ? function(o2, v) {
      Object.defineProperty(o2, "default", { enumerable: true, value: v });
    } : function(o2, v) {
      o2["default"] = v;
    });
    var __importStar = exports && exports.__importStar || function(mod) {
      if (mod && mod.__esModule)
        return mod;
      var result = {};
      if (mod != null) {
        for (var k in mod)
          if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k))
            __createBinding(result, mod, k);
      }
      __setModuleDefault(result, mod);
      return result;
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.configLineSettingsBeet = void 0;
    var beet9 = __importStar(require_beet3());
    exports.configLineSettingsBeet = new beet9.FixableBeetArgsStruct([
      ["prefixName", beet9.utf8String],
      ["nameLength", beet9.u32],
      ["prefixUri", beet9.utf8String],
      ["uriLength", beet9.u32],
      ["isSequential", beet9.bool]
    ], "ConfigLineSettings");
  }
});

// ../../node_modules/@metaplex-foundation/mpl-candy-machine-core/dist/src/generated/types/HiddenSettings.js
var require_HiddenSettings2 = __commonJS({
  "../../node_modules/@metaplex-foundation/mpl-candy-machine-core/dist/src/generated/types/HiddenSettings.js"(exports) {
    "use strict";
    var __createBinding = exports && exports.__createBinding || (Object.create ? function(o2, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      var desc = Object.getOwnPropertyDescriptor(m, k);
      if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m[k];
        } };
      }
      Object.defineProperty(o2, k2, desc);
    } : function(o2, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      o2[k2] = m[k];
    });
    var __setModuleDefault = exports && exports.__setModuleDefault || (Object.create ? function(o2, v) {
      Object.defineProperty(o2, "default", { enumerable: true, value: v });
    } : function(o2, v) {
      o2["default"] = v;
    });
    var __importStar = exports && exports.__importStar || function(mod) {
      if (mod && mod.__esModule)
        return mod;
      var result = {};
      if (mod != null) {
        for (var k in mod)
          if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k))
            __createBinding(result, mod, k);
      }
      __setModuleDefault(result, mod);
      return result;
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.hiddenSettingsBeet = void 0;
    var beet9 = __importStar(require_beet3());
    exports.hiddenSettingsBeet = new beet9.FixableBeetArgsStruct([
      ["name", beet9.utf8String],
      ["uri", beet9.utf8String],
      ["hash", beet9.uniformFixedSizeArray(beet9.u8, 32)]
    ], "HiddenSettings");
  }
});

// ../../node_modules/@metaplex-foundation/mpl-candy-machine-core/dist/src/generated/types/CandyMachineData.js
var require_CandyMachineData2 = __commonJS({
  "../../node_modules/@metaplex-foundation/mpl-candy-machine-core/dist/src/generated/types/CandyMachineData.js"(exports) {
    "use strict";
    var __createBinding = exports && exports.__createBinding || (Object.create ? function(o2, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      var desc = Object.getOwnPropertyDescriptor(m, k);
      if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m[k];
        } };
      }
      Object.defineProperty(o2, k2, desc);
    } : function(o2, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      o2[k2] = m[k];
    });
    var __setModuleDefault = exports && exports.__setModuleDefault || (Object.create ? function(o2, v) {
      Object.defineProperty(o2, "default", { enumerable: true, value: v });
    } : function(o2, v) {
      o2["default"] = v;
    });
    var __importStar = exports && exports.__importStar || function(mod) {
      if (mod && mod.__esModule)
        return mod;
      var result = {};
      if (mod != null) {
        for (var k in mod)
          if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k))
            __createBinding(result, mod, k);
      }
      __setModuleDefault(result, mod);
      return result;
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.candyMachineDataBeet = void 0;
    var beet9 = __importStar(require_beet3());
    var Creator_1 = require_Creator4();
    var ConfigLineSettings_1 = require_ConfigLineSettings();
    var HiddenSettings_1 = require_HiddenSettings2();
    exports.candyMachineDataBeet = new beet9.FixableBeetArgsStruct([
      ["itemsAvailable", beet9.u64],
      ["symbol", beet9.utf8String],
      ["sellerFeeBasisPoints", beet9.u16],
      ["maxSupply", beet9.u64],
      ["isMutable", beet9.bool],
      ["creators", beet9.array(Creator_1.creatorBeet)],
      ["configLineSettings", beet9.coption(ConfigLineSettings_1.configLineSettingsBeet)],
      ["hiddenSettings", beet9.coption(HiddenSettings_1.hiddenSettingsBeet)]
    ], "CandyMachineData");
  }
});

// ../../node_modules/@metaplex-foundation/mpl-candy-machine-core/dist/src/generated/accounts/CandyMachine.js
var require_CandyMachine2 = __commonJS({
  "../../node_modules/@metaplex-foundation/mpl-candy-machine-core/dist/src/generated/accounts/CandyMachine.js"(exports) {
    "use strict";
    var __createBinding = exports && exports.__createBinding || (Object.create ? function(o2, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      var desc = Object.getOwnPropertyDescriptor(m, k);
      if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m[k];
        } };
      }
      Object.defineProperty(o2, k2, desc);
    } : function(o2, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      o2[k2] = m[k];
    });
    var __setModuleDefault = exports && exports.__setModuleDefault || (Object.create ? function(o2, v) {
      Object.defineProperty(o2, "default", { enumerable: true, value: v });
    } : function(o2, v) {
      o2["default"] = v;
    });
    var __importStar = exports && exports.__importStar || function(mod) {
      if (mod && mod.__esModule)
        return mod;
      var result = {};
      if (mod != null) {
        for (var k in mod)
          if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k))
            __createBinding(result, mod, k);
      }
      __setModuleDefault(result, mod);
      return result;
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.candyMachineBeet = exports.CandyMachine = exports.candyMachineDiscriminator = void 0;
    var beet9 = __importStar(require_beet3());
    var web3 = __importStar((init_index_browser_esm(), __toCommonJS(index_browser_esm_exports)));
    var beetSolana = __importStar(require_beet_solana5());
    var CandyMachineData_1 = require_CandyMachineData2();
    exports.candyMachineDiscriminator = [51, 173, 177, 113, 25, 241, 109, 189];
    var CandyMachine3 = class _CandyMachine {
      constructor(features, authority, mintAuthority, collectionMint, itemsRedeemed, data) {
        this.features = features;
        this.authority = authority;
        this.mintAuthority = mintAuthority;
        this.collectionMint = collectionMint;
        this.itemsRedeemed = itemsRedeemed;
        this.data = data;
      }
      static fromArgs(args) {
        return new _CandyMachine(args.features, args.authority, args.mintAuthority, args.collectionMint, args.itemsRedeemed, args.data);
      }
      static fromAccountInfo(accountInfo, offset = 0) {
        return _CandyMachine.deserialize(accountInfo.data, offset);
      }
      static fromAccountAddress(connection, address) {
        return __async(this, null, function* () {
          const accountInfo = yield connection.getAccountInfo(address);
          if (accountInfo == null) {
            throw new Error(`Unable to find CandyMachine account at ${address}`);
          }
          return _CandyMachine.fromAccountInfo(accountInfo, 0)[0];
        });
      }
      static gpaBuilder(programId = new web3.PublicKey("CndyV3LdqHUfDLmE5naZjVN8rBZz4tqhdefbAnjHG3JR")) {
        return beetSolana.GpaBuilder.fromStruct(programId, exports.candyMachineBeet);
      }
      static deserialize(buf, offset = 0) {
        return exports.candyMachineBeet.deserialize(buf, offset);
      }
      serialize() {
        return exports.candyMachineBeet.serialize(__spreadValues({
          accountDiscriminator: exports.candyMachineDiscriminator
        }, this));
      }
      static byteSize(args) {
        const instance = _CandyMachine.fromArgs(args);
        return exports.candyMachineBeet.toFixedFromValue(__spreadValues({
          accountDiscriminator: exports.candyMachineDiscriminator
        }, instance)).byteSize;
      }
      static getMinimumBalanceForRentExemption(args, connection, commitment) {
        return __async(this, null, function* () {
          return connection.getMinimumBalanceForRentExemption(_CandyMachine.byteSize(args), commitment);
        });
      }
      pretty() {
        return {
          features: (() => {
            const x = this.features;
            if (typeof x.toNumber === "function") {
              try {
                return x.toNumber();
              } catch (_) {
                return x;
              }
            }
            return x;
          })(),
          authority: this.authority.toBase58(),
          mintAuthority: this.mintAuthority.toBase58(),
          collectionMint: this.collectionMint.toBase58(),
          itemsRedeemed: (() => {
            const x = this.itemsRedeemed;
            if (typeof x.toNumber === "function") {
              try {
                return x.toNumber();
              } catch (_) {
                return x;
              }
            }
            return x;
          })(),
          data: this.data
        };
      }
    };
    exports.CandyMachine = CandyMachine3;
    exports.candyMachineBeet = new beet9.FixableBeetStruct([
      ["accountDiscriminator", beet9.uniformFixedSizeArray(beet9.u8, 8)],
      ["features", beet9.u64],
      ["authority", beetSolana.publicKey],
      ["mintAuthority", beetSolana.publicKey],
      ["collectionMint", beetSolana.publicKey],
      ["itemsRedeemed", beet9.u64],
      ["data", CandyMachineData_1.candyMachineDataBeet]
    ], CandyMachine3.fromArgs, "CandyMachine");
  }
});

// ../../node_modules/@metaplex-foundation/mpl-candy-machine-core/dist/src/generated/accounts/index.js
var require_accounts6 = __commonJS({
  "../../node_modules/@metaplex-foundation/mpl-candy-machine-core/dist/src/generated/accounts/index.js"(exports) {
    "use strict";
    var __createBinding = exports && exports.__createBinding || (Object.create ? function(o2, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      var desc = Object.getOwnPropertyDescriptor(m, k);
      if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m[k];
        } };
      }
      Object.defineProperty(o2, k2, desc);
    } : function(o2, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      o2[k2] = m[k];
    });
    var __exportStar = exports && exports.__exportStar || function(m, exports2) {
      for (var p in m)
        if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports2, p))
          __createBinding(exports2, m, p);
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.accountProviders = void 0;
    __exportStar(require_CandyMachine2(), exports);
    var CandyMachine_1 = require_CandyMachine2();
    exports.accountProviders = { CandyMachine: CandyMachine_1.CandyMachine };
  }
});

// ../../node_modules/@metaplex-foundation/mpl-candy-machine-core/dist/src/generated/errors/index.js
var require_errors13 = __commonJS({
  "../../node_modules/@metaplex-foundation/mpl-candy-machine-core/dist/src/generated/errors/index.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.errorFromName = exports.errorFromCode = exports.NotFullyLoadedError = exports.CouldNotRetrieveConfigLineDataError = exports.CollectionKeyMismatchError = exports.CannotChangeSequentialIndexGenerationError = exports.CannotSwitchFromHiddenSettingsError = exports.CannotIncreaseLengthError = exports.MissingConfigLinesSettingsError = exports.ExceededLengthErrorError = exports.NoChangingCollectionDuringMintError = exports.MetadataAccountMustBeEmptyError = exports.IncorrectCollectionAuthorityError = exports.CannotSwitchToHiddenSettingsError = exports.CannotChangeNumberOfLinesError = exports.HiddenSettingsDoNotHaveConfigLinesError = exports.CandyMachineEmptyError = exports.TooManyCreatorsError = exports.NumericalOverflowErrorError = exports.IndexGreaterThanLengthError = exports.MintMismatchError = exports.UninitializedError = exports.IncorrectOwnerError = void 0;
    var createErrorFromCodeLookup = /* @__PURE__ */ new Map();
    var createErrorFromNameLookup = /* @__PURE__ */ new Map();
    var IncorrectOwnerError = class _IncorrectOwnerError extends Error {
      constructor() {
        super("Account does not have correct owner");
        this.code = 6e3;
        this.name = "IncorrectOwner";
        if (typeof Error.captureStackTrace === "function") {
          Error.captureStackTrace(this, _IncorrectOwnerError);
        }
      }
    };
    exports.IncorrectOwnerError = IncorrectOwnerError;
    createErrorFromCodeLookup.set(6e3, () => new IncorrectOwnerError());
    createErrorFromNameLookup.set("IncorrectOwner", () => new IncorrectOwnerError());
    var UninitializedError = class _UninitializedError extends Error {
      constructor() {
        super("Account is not initialized");
        this.code = 6001;
        this.name = "Uninitialized";
        if (typeof Error.captureStackTrace === "function") {
          Error.captureStackTrace(this, _UninitializedError);
        }
      }
    };
    exports.UninitializedError = UninitializedError;
    createErrorFromCodeLookup.set(6001, () => new UninitializedError());
    createErrorFromNameLookup.set("Uninitialized", () => new UninitializedError());
    var MintMismatchError = class _MintMismatchError extends Error {
      constructor() {
        super("Mint Mismatch");
        this.code = 6002;
        this.name = "MintMismatch";
        if (typeof Error.captureStackTrace === "function") {
          Error.captureStackTrace(this, _MintMismatchError);
        }
      }
    };
    exports.MintMismatchError = MintMismatchError;
    createErrorFromCodeLookup.set(6002, () => new MintMismatchError());
    createErrorFromNameLookup.set("MintMismatch", () => new MintMismatchError());
    var IndexGreaterThanLengthError = class _IndexGreaterThanLengthError extends Error {
      constructor() {
        super("Index greater than length");
        this.code = 6003;
        this.name = "IndexGreaterThanLength";
        if (typeof Error.captureStackTrace === "function") {
          Error.captureStackTrace(this, _IndexGreaterThanLengthError);
        }
      }
    };
    exports.IndexGreaterThanLengthError = IndexGreaterThanLengthError;
    createErrorFromCodeLookup.set(6003, () => new IndexGreaterThanLengthError());
    createErrorFromNameLookup.set("IndexGreaterThanLength", () => new IndexGreaterThanLengthError());
    var NumericalOverflowErrorError = class _NumericalOverflowErrorError extends Error {
      constructor() {
        super("Numerical overflow error");
        this.code = 6004;
        this.name = "NumericalOverflowError";
        if (typeof Error.captureStackTrace === "function") {
          Error.captureStackTrace(this, _NumericalOverflowErrorError);
        }
      }
    };
    exports.NumericalOverflowErrorError = NumericalOverflowErrorError;
    createErrorFromCodeLookup.set(6004, () => new NumericalOverflowErrorError());
    createErrorFromNameLookup.set("NumericalOverflowError", () => new NumericalOverflowErrorError());
    var TooManyCreatorsError = class _TooManyCreatorsError extends Error {
      constructor() {
        super("Can only provide up to 4 creators to candy machine (because candy machine is one)");
        this.code = 6005;
        this.name = "TooManyCreators";
        if (typeof Error.captureStackTrace === "function") {
          Error.captureStackTrace(this, _TooManyCreatorsError);
        }
      }
    };
    exports.TooManyCreatorsError = TooManyCreatorsError;
    createErrorFromCodeLookup.set(6005, () => new TooManyCreatorsError());
    createErrorFromNameLookup.set("TooManyCreators", () => new TooManyCreatorsError());
    var CandyMachineEmptyError = class _CandyMachineEmptyError extends Error {
      constructor() {
        super("Candy machine is empty");
        this.code = 6006;
        this.name = "CandyMachineEmpty";
        if (typeof Error.captureStackTrace === "function") {
          Error.captureStackTrace(this, _CandyMachineEmptyError);
        }
      }
    };
    exports.CandyMachineEmptyError = CandyMachineEmptyError;
    createErrorFromCodeLookup.set(6006, () => new CandyMachineEmptyError());
    createErrorFromNameLookup.set("CandyMachineEmpty", () => new CandyMachineEmptyError());
    var HiddenSettingsDoNotHaveConfigLinesError = class _HiddenSettingsDoNotHaveConfigLinesError extends Error {
      constructor() {
        super("Candy machines using hidden uris do not have config lines, they have a single hash representing hashed order");
        this.code = 6007;
        this.name = "HiddenSettingsDoNotHaveConfigLines";
        if (typeof Error.captureStackTrace === "function") {
          Error.captureStackTrace(this, _HiddenSettingsDoNotHaveConfigLinesError);
        }
      }
    };
    exports.HiddenSettingsDoNotHaveConfigLinesError = HiddenSettingsDoNotHaveConfigLinesError;
    createErrorFromCodeLookup.set(6007, () => new HiddenSettingsDoNotHaveConfigLinesError());
    createErrorFromNameLookup.set("HiddenSettingsDoNotHaveConfigLines", () => new HiddenSettingsDoNotHaveConfigLinesError());
    var CannotChangeNumberOfLinesError = class _CannotChangeNumberOfLinesError extends Error {
      constructor() {
        super("Cannot change number of lines unless is a hidden config");
        this.code = 6008;
        this.name = "CannotChangeNumberOfLines";
        if (typeof Error.captureStackTrace === "function") {
          Error.captureStackTrace(this, _CannotChangeNumberOfLinesError);
        }
      }
    };
    exports.CannotChangeNumberOfLinesError = CannotChangeNumberOfLinesError;
    createErrorFromCodeLookup.set(6008, () => new CannotChangeNumberOfLinesError());
    createErrorFromNameLookup.set("CannotChangeNumberOfLines", () => new CannotChangeNumberOfLinesError());
    var CannotSwitchToHiddenSettingsError = class _CannotSwitchToHiddenSettingsError extends Error {
      constructor() {
        super("Cannot switch to hidden settings after items available is greater than 0");
        this.code = 6009;
        this.name = "CannotSwitchToHiddenSettings";
        if (typeof Error.captureStackTrace === "function") {
          Error.captureStackTrace(this, _CannotSwitchToHiddenSettingsError);
        }
      }
    };
    exports.CannotSwitchToHiddenSettingsError = CannotSwitchToHiddenSettingsError;
    createErrorFromCodeLookup.set(6009, () => new CannotSwitchToHiddenSettingsError());
    createErrorFromNameLookup.set("CannotSwitchToHiddenSettings", () => new CannotSwitchToHiddenSettingsError());
    var IncorrectCollectionAuthorityError = class _IncorrectCollectionAuthorityError extends Error {
      constructor() {
        super("Incorrect collection NFT authority");
        this.code = 6010;
        this.name = "IncorrectCollectionAuthority";
        if (typeof Error.captureStackTrace === "function") {
          Error.captureStackTrace(this, _IncorrectCollectionAuthorityError);
        }
      }
    };
    exports.IncorrectCollectionAuthorityError = IncorrectCollectionAuthorityError;
    createErrorFromCodeLookup.set(6010, () => new IncorrectCollectionAuthorityError());
    createErrorFromNameLookup.set("IncorrectCollectionAuthority", () => new IncorrectCollectionAuthorityError());
    var MetadataAccountMustBeEmptyError = class _MetadataAccountMustBeEmptyError extends Error {
      constructor() {
        super("The metadata account has data in it, and this must be empty to mint a new NFT");
        this.code = 6011;
        this.name = "MetadataAccountMustBeEmpty";
        if (typeof Error.captureStackTrace === "function") {
          Error.captureStackTrace(this, _MetadataAccountMustBeEmptyError);
        }
      }
    };
    exports.MetadataAccountMustBeEmptyError = MetadataAccountMustBeEmptyError;
    createErrorFromCodeLookup.set(6011, () => new MetadataAccountMustBeEmptyError());
    createErrorFromNameLookup.set("MetadataAccountMustBeEmpty", () => new MetadataAccountMustBeEmptyError());
    var NoChangingCollectionDuringMintError = class _NoChangingCollectionDuringMintError extends Error {
      constructor() {
        super("Can't change collection settings after items have begun to be minted");
        this.code = 6012;
        this.name = "NoChangingCollectionDuringMint";
        if (typeof Error.captureStackTrace === "function") {
          Error.captureStackTrace(this, _NoChangingCollectionDuringMintError);
        }
      }
    };
    exports.NoChangingCollectionDuringMintError = NoChangingCollectionDuringMintError;
    createErrorFromCodeLookup.set(6012, () => new NoChangingCollectionDuringMintError());
    createErrorFromNameLookup.set("NoChangingCollectionDuringMint", () => new NoChangingCollectionDuringMintError());
    var ExceededLengthErrorError = class _ExceededLengthErrorError extends Error {
      constructor() {
        super("Value longer than expected maximum value");
        this.code = 6013;
        this.name = "ExceededLengthError";
        if (typeof Error.captureStackTrace === "function") {
          Error.captureStackTrace(this, _ExceededLengthErrorError);
        }
      }
    };
    exports.ExceededLengthErrorError = ExceededLengthErrorError;
    createErrorFromCodeLookup.set(6013, () => new ExceededLengthErrorError());
    createErrorFromNameLookup.set("ExceededLengthError", () => new ExceededLengthErrorError());
    var MissingConfigLinesSettingsError = class _MissingConfigLinesSettingsError extends Error {
      constructor() {
        super("Missing config lines settings");
        this.code = 6014;
        this.name = "MissingConfigLinesSettings";
        if (typeof Error.captureStackTrace === "function") {
          Error.captureStackTrace(this, _MissingConfigLinesSettingsError);
        }
      }
    };
    exports.MissingConfigLinesSettingsError = MissingConfigLinesSettingsError;
    createErrorFromCodeLookup.set(6014, () => new MissingConfigLinesSettingsError());
    createErrorFromNameLookup.set("MissingConfigLinesSettings", () => new MissingConfigLinesSettingsError());
    var CannotIncreaseLengthError = class _CannotIncreaseLengthError extends Error {
      constructor() {
        super("Cannot increase the length in config lines settings");
        this.code = 6015;
        this.name = "CannotIncreaseLength";
        if (typeof Error.captureStackTrace === "function") {
          Error.captureStackTrace(this, _CannotIncreaseLengthError);
        }
      }
    };
    exports.CannotIncreaseLengthError = CannotIncreaseLengthError;
    createErrorFromCodeLookup.set(6015, () => new CannotIncreaseLengthError());
    createErrorFromNameLookup.set("CannotIncreaseLength", () => new CannotIncreaseLengthError());
    var CannotSwitchFromHiddenSettingsError = class _CannotSwitchFromHiddenSettingsError extends Error {
      constructor() {
        super("Cannot switch from hidden settings");
        this.code = 6016;
        this.name = "CannotSwitchFromHiddenSettings";
        if (typeof Error.captureStackTrace === "function") {
          Error.captureStackTrace(this, _CannotSwitchFromHiddenSettingsError);
        }
      }
    };
    exports.CannotSwitchFromHiddenSettingsError = CannotSwitchFromHiddenSettingsError;
    createErrorFromCodeLookup.set(6016, () => new CannotSwitchFromHiddenSettingsError());
    createErrorFromNameLookup.set("CannotSwitchFromHiddenSettings", () => new CannotSwitchFromHiddenSettingsError());
    var CannotChangeSequentialIndexGenerationError = class _CannotChangeSequentialIndexGenerationError extends Error {
      constructor() {
        super("Cannot change sequential index generation after items have begun to be minted");
        this.code = 6017;
        this.name = "CannotChangeSequentialIndexGeneration";
        if (typeof Error.captureStackTrace === "function") {
          Error.captureStackTrace(this, _CannotChangeSequentialIndexGenerationError);
        }
      }
    };
    exports.CannotChangeSequentialIndexGenerationError = CannotChangeSequentialIndexGenerationError;
    createErrorFromCodeLookup.set(6017, () => new CannotChangeSequentialIndexGenerationError());
    createErrorFromNameLookup.set("CannotChangeSequentialIndexGeneration", () => new CannotChangeSequentialIndexGenerationError());
    var CollectionKeyMismatchError = class _CollectionKeyMismatchError extends Error {
      constructor() {
        super("Collection public key mismatch");
        this.code = 6018;
        this.name = "CollectionKeyMismatch";
        if (typeof Error.captureStackTrace === "function") {
          Error.captureStackTrace(this, _CollectionKeyMismatchError);
        }
      }
    };
    exports.CollectionKeyMismatchError = CollectionKeyMismatchError;
    createErrorFromCodeLookup.set(6018, () => new CollectionKeyMismatchError());
    createErrorFromNameLookup.set("CollectionKeyMismatch", () => new CollectionKeyMismatchError());
    var CouldNotRetrieveConfigLineDataError = class _CouldNotRetrieveConfigLineDataError extends Error {
      constructor() {
        super("Could not retrive config line data");
        this.code = 6019;
        this.name = "CouldNotRetrieveConfigLineData";
        if (typeof Error.captureStackTrace === "function") {
          Error.captureStackTrace(this, _CouldNotRetrieveConfigLineDataError);
        }
      }
    };
    exports.CouldNotRetrieveConfigLineDataError = CouldNotRetrieveConfigLineDataError;
    createErrorFromCodeLookup.set(6019, () => new CouldNotRetrieveConfigLineDataError());
    createErrorFromNameLookup.set("CouldNotRetrieveConfigLineData", () => new CouldNotRetrieveConfigLineDataError());
    var NotFullyLoadedError = class _NotFullyLoadedError extends Error {
      constructor() {
        super("Not all config lines were added to the candy machine");
        this.code = 6020;
        this.name = "NotFullyLoaded";
        if (typeof Error.captureStackTrace === "function") {
          Error.captureStackTrace(this, _NotFullyLoadedError);
        }
      }
    };
    exports.NotFullyLoadedError = NotFullyLoadedError;
    createErrorFromCodeLookup.set(6020, () => new NotFullyLoadedError());
    createErrorFromNameLookup.set("NotFullyLoaded", () => new NotFullyLoadedError());
    function errorFromCode(code2) {
      const createError = createErrorFromCodeLookup.get(code2);
      return createError != null ? createError() : null;
    }
    exports.errorFromCode = errorFromCode;
    function errorFromName(name) {
      const createError = createErrorFromNameLookup.get(name);
      return createError != null ? createError() : null;
    }
    exports.errorFromName = errorFromName;
  }
});

// ../../node_modules/@metaplex-foundation/mpl-candy-machine-core/dist/src/generated/types/ConfigLine.js
var require_ConfigLine2 = __commonJS({
  "../../node_modules/@metaplex-foundation/mpl-candy-machine-core/dist/src/generated/types/ConfigLine.js"(exports) {
    "use strict";
    var __createBinding = exports && exports.__createBinding || (Object.create ? function(o2, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      var desc = Object.getOwnPropertyDescriptor(m, k);
      if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m[k];
        } };
      }
      Object.defineProperty(o2, k2, desc);
    } : function(o2, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      o2[k2] = m[k];
    });
    var __setModuleDefault = exports && exports.__setModuleDefault || (Object.create ? function(o2, v) {
      Object.defineProperty(o2, "default", { enumerable: true, value: v });
    } : function(o2, v) {
      o2["default"] = v;
    });
    var __importStar = exports && exports.__importStar || function(mod) {
      if (mod && mod.__esModule)
        return mod;
      var result = {};
      if (mod != null) {
        for (var k in mod)
          if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k))
            __createBinding(result, mod, k);
      }
      __setModuleDefault(result, mod);
      return result;
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.configLineBeet = void 0;
    var beet9 = __importStar(require_beet3());
    exports.configLineBeet = new beet9.FixableBeetArgsStruct([
      ["name", beet9.utf8String],
      ["uri", beet9.utf8String]
    ], "ConfigLine");
  }
});

// ../../node_modules/@metaplex-foundation/mpl-candy-machine-core/dist/src/generated/instructions/addConfigLines.js
var require_addConfigLines2 = __commonJS({
  "../../node_modules/@metaplex-foundation/mpl-candy-machine-core/dist/src/generated/instructions/addConfigLines.js"(exports) {
    "use strict";
    var __createBinding = exports && exports.__createBinding || (Object.create ? function(o2, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      var desc = Object.getOwnPropertyDescriptor(m, k);
      if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m[k];
        } };
      }
      Object.defineProperty(o2, k2, desc);
    } : function(o2, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      o2[k2] = m[k];
    });
    var __setModuleDefault = exports && exports.__setModuleDefault || (Object.create ? function(o2, v) {
      Object.defineProperty(o2, "default", { enumerable: true, value: v });
    } : function(o2, v) {
      o2["default"] = v;
    });
    var __importStar = exports && exports.__importStar || function(mod) {
      if (mod && mod.__esModule)
        return mod;
      var result = {};
      if (mod != null) {
        for (var k in mod)
          if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k))
            __createBinding(result, mod, k);
      }
      __setModuleDefault(result, mod);
      return result;
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.createAddConfigLinesInstruction = exports.addConfigLinesInstructionDiscriminator = exports.addConfigLinesStruct = void 0;
    var beet9 = __importStar(require_beet3());
    var web3 = __importStar((init_index_browser_esm(), __toCommonJS(index_browser_esm_exports)));
    var ConfigLine_1 = require_ConfigLine2();
    exports.addConfigLinesStruct = new beet9.FixableBeetArgsStruct([
      ["instructionDiscriminator", beet9.uniformFixedSizeArray(beet9.u8, 8)],
      ["index", beet9.u32],
      ["configLines", beet9.array(ConfigLine_1.configLineBeet)]
    ], "AddConfigLinesInstructionArgs");
    exports.addConfigLinesInstructionDiscriminator = [223, 50, 224, 227, 151, 8, 115, 106];
    function createAddConfigLinesInstruction3(accounts, args, programId = new web3.PublicKey("CndyV3LdqHUfDLmE5naZjVN8rBZz4tqhdefbAnjHG3JR")) {
      const [data] = exports.addConfigLinesStruct.serialize(__spreadValues({
        instructionDiscriminator: exports.addConfigLinesInstructionDiscriminator
      }, args));
      const keys = [
        {
          pubkey: accounts.candyMachine,
          isWritable: true,
          isSigner: false
        },
        {
          pubkey: accounts.authority,
          isWritable: false,
          isSigner: true
        }
      ];
      const ix = new web3.TransactionInstruction({
        programId,
        keys,
        data
      });
      return ix;
    }
    exports.createAddConfigLinesInstruction = createAddConfigLinesInstruction3;
  }
});

// ../../node_modules/@metaplex-foundation/mpl-candy-machine-core/dist/src/generated/instructions/initialize.js
var require_initialize2 = __commonJS({
  "../../node_modules/@metaplex-foundation/mpl-candy-machine-core/dist/src/generated/instructions/initialize.js"(exports) {
    "use strict";
    var __createBinding = exports && exports.__createBinding || (Object.create ? function(o2, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      var desc = Object.getOwnPropertyDescriptor(m, k);
      if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m[k];
        } };
      }
      Object.defineProperty(o2, k2, desc);
    } : function(o2, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      o2[k2] = m[k];
    });
    var __setModuleDefault = exports && exports.__setModuleDefault || (Object.create ? function(o2, v) {
      Object.defineProperty(o2, "default", { enumerable: true, value: v });
    } : function(o2, v) {
      o2["default"] = v;
    });
    var __importStar = exports && exports.__importStar || function(mod) {
      if (mod && mod.__esModule)
        return mod;
      var result = {};
      if (mod != null) {
        for (var k in mod)
          if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k))
            __createBinding(result, mod, k);
      }
      __setModuleDefault(result, mod);
      return result;
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.createInitializeInstruction = exports.initializeInstructionDiscriminator = exports.initializeStruct = void 0;
    var beet9 = __importStar(require_beet3());
    var web3 = __importStar((init_index_browser_esm(), __toCommonJS(index_browser_esm_exports)));
    var CandyMachineData_1 = require_CandyMachineData2();
    exports.initializeStruct = new beet9.FixableBeetArgsStruct([
      ["instructionDiscriminator", beet9.uniformFixedSizeArray(beet9.u8, 8)],
      ["data", CandyMachineData_1.candyMachineDataBeet]
    ], "InitializeInstructionArgs");
    exports.initializeInstructionDiscriminator = [175, 175, 109, 31, 13, 152, 155, 237];
    function createInitializeInstruction4(accounts, args, programId = new web3.PublicKey("CndyV3LdqHUfDLmE5naZjVN8rBZz4tqhdefbAnjHG3JR")) {
      var _a;
      const [data] = exports.initializeStruct.serialize(__spreadValues({
        instructionDiscriminator: exports.initializeInstructionDiscriminator
      }, args));
      const keys = [
        {
          pubkey: accounts.candyMachine,
          isWritable: true,
          isSigner: false
        },
        {
          pubkey: accounts.authorityPda,
          isWritable: true,
          isSigner: false
        },
        {
          pubkey: accounts.authority,
          isWritable: false,
          isSigner: false
        },
        {
          pubkey: accounts.payer,
          isWritable: false,
          isSigner: true
        },
        {
          pubkey: accounts.collectionMetadata,
          isWritable: false,
          isSigner: false
        },
        {
          pubkey: accounts.collectionMint,
          isWritable: false,
          isSigner: false
        },
        {
          pubkey: accounts.collectionMasterEdition,
          isWritable: false,
          isSigner: false
        },
        {
          pubkey: accounts.collectionUpdateAuthority,
          isWritable: true,
          isSigner: true
        },
        {
          pubkey: accounts.collectionAuthorityRecord,
          isWritable: true,
          isSigner: false
        },
        {
          pubkey: accounts.tokenMetadataProgram,
          isWritable: false,
          isSigner: false
        },
        {
          pubkey: (_a = accounts.systemProgram) !== null && _a !== void 0 ? _a : web3.SystemProgram.programId,
          isWritable: false,
          isSigner: false
        }
      ];
      const ix = new web3.TransactionInstruction({
        programId,
        keys,
        data
      });
      return ix;
    }
    exports.createInitializeInstruction = createInitializeInstruction4;
  }
});

// ../../node_modules/@metaplex-foundation/mpl-candy-machine-core/dist/src/generated/instructions/mint.js
var require_mint3 = __commonJS({
  "../../node_modules/@metaplex-foundation/mpl-candy-machine-core/dist/src/generated/instructions/mint.js"(exports) {
    "use strict";
    var __createBinding = exports && exports.__createBinding || (Object.create ? function(o2, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      var desc = Object.getOwnPropertyDescriptor(m, k);
      if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m[k];
        } };
      }
      Object.defineProperty(o2, k2, desc);
    } : function(o2, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      o2[k2] = m[k];
    });
    var __setModuleDefault = exports && exports.__setModuleDefault || (Object.create ? function(o2, v) {
      Object.defineProperty(o2, "default", { enumerable: true, value: v });
    } : function(o2, v) {
      o2["default"] = v;
    });
    var __importStar = exports && exports.__importStar || function(mod) {
      if (mod && mod.__esModule)
        return mod;
      var result = {};
      if (mod != null) {
        for (var k in mod)
          if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k))
            __createBinding(result, mod, k);
      }
      __setModuleDefault(result, mod);
      return result;
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.createMintInstruction = exports.mintInstructionDiscriminator = exports.mintStruct = void 0;
    var splToken = __importStar(require_cjs4());
    var beet9 = __importStar(require_beet3());
    var web3 = __importStar((init_index_browser_esm(), __toCommonJS(index_browser_esm_exports)));
    exports.mintStruct = new beet9.BeetArgsStruct([["instructionDiscriminator", beet9.uniformFixedSizeArray(beet9.u8, 8)]], "MintInstructionArgs");
    exports.mintInstructionDiscriminator = [51, 57, 225, 47, 182, 146, 137, 166];
    function createMintInstruction3(accounts, programId = new web3.PublicKey("CndyV3LdqHUfDLmE5naZjVN8rBZz4tqhdefbAnjHG3JR")) {
      var _a, _b;
      const [data] = exports.mintStruct.serialize({
        instructionDiscriminator: exports.mintInstructionDiscriminator
      });
      const keys = [
        {
          pubkey: accounts.candyMachine,
          isWritable: true,
          isSigner: false
        },
        {
          pubkey: accounts.authorityPda,
          isWritable: true,
          isSigner: false
        },
        {
          pubkey: accounts.mintAuthority,
          isWritable: false,
          isSigner: true
        },
        {
          pubkey: accounts.payer,
          isWritable: true,
          isSigner: true
        },
        {
          pubkey: accounts.nftMint,
          isWritable: true,
          isSigner: false
        },
        {
          pubkey: accounts.nftMintAuthority,
          isWritable: false,
          isSigner: true
        },
        {
          pubkey: accounts.nftMetadata,
          isWritable: true,
          isSigner: false
        },
        {
          pubkey: accounts.nftMasterEdition,
          isWritable: true,
          isSigner: false
        },
        {
          pubkey: accounts.collectionAuthorityRecord,
          isWritable: false,
          isSigner: false
        },
        {
          pubkey: accounts.collectionMint,
          isWritable: false,
          isSigner: false
        },
        {
          pubkey: accounts.collectionMetadata,
          isWritable: true,
          isSigner: false
        },
        {
          pubkey: accounts.collectionMasterEdition,
          isWritable: false,
          isSigner: false
        },
        {
          pubkey: accounts.collectionUpdateAuthority,
          isWritable: false,
          isSigner: false
        },
        {
          pubkey: accounts.tokenMetadataProgram,
          isWritable: false,
          isSigner: false
        },
        {
          pubkey: (_a = accounts.tokenProgram) !== null && _a !== void 0 ? _a : splToken.TOKEN_PROGRAM_ID,
          isWritable: false,
          isSigner: false
        },
        {
          pubkey: (_b = accounts.systemProgram) !== null && _b !== void 0 ? _b : web3.SystemProgram.programId,
          isWritable: false,
          isSigner: false
        },
        {
          pubkey: accounts.recentSlothashes,
          isWritable: false,
          isSigner: false
        }
      ];
      const ix = new web3.TransactionInstruction({
        programId,
        keys,
        data
      });
      return ix;
    }
    exports.createMintInstruction = createMintInstruction3;
  }
});

// ../../node_modules/@metaplex-foundation/mpl-candy-machine-core/dist/src/generated/instructions/setAuthority.js
var require_setAuthority4 = __commonJS({
  "../../node_modules/@metaplex-foundation/mpl-candy-machine-core/dist/src/generated/instructions/setAuthority.js"(exports) {
    "use strict";
    var __createBinding = exports && exports.__createBinding || (Object.create ? function(o2, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      var desc = Object.getOwnPropertyDescriptor(m, k);
      if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m[k];
        } };
      }
      Object.defineProperty(o2, k2, desc);
    } : function(o2, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      o2[k2] = m[k];
    });
    var __setModuleDefault = exports && exports.__setModuleDefault || (Object.create ? function(o2, v) {
      Object.defineProperty(o2, "default", { enumerable: true, value: v });
    } : function(o2, v) {
      o2["default"] = v;
    });
    var __importStar = exports && exports.__importStar || function(mod) {
      if (mod && mod.__esModule)
        return mod;
      var result = {};
      if (mod != null) {
        for (var k in mod)
          if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k))
            __createBinding(result, mod, k);
      }
      __setModuleDefault(result, mod);
      return result;
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.createSetAuthorityInstruction = exports.setAuthorityInstructionDiscriminator = exports.setAuthorityStruct = void 0;
    var web3 = __importStar((init_index_browser_esm(), __toCommonJS(index_browser_esm_exports)));
    var beetSolana = __importStar(require_beet_solana5());
    var beet9 = __importStar(require_beet3());
    exports.setAuthorityStruct = new beet9.BeetArgsStruct([
      ["instructionDiscriminator", beet9.uniformFixedSizeArray(beet9.u8, 8)],
      ["newAuthority", beetSolana.publicKey]
    ], "SetAuthorityInstructionArgs");
    exports.setAuthorityInstructionDiscriminator = [133, 250, 37, 21, 110, 163, 26, 121];
    function createSetAuthorityInstruction4(accounts, args, programId = new web3.PublicKey("CndyV3LdqHUfDLmE5naZjVN8rBZz4tqhdefbAnjHG3JR")) {
      const [data] = exports.setAuthorityStruct.serialize(__spreadValues({
        instructionDiscriminator: exports.setAuthorityInstructionDiscriminator
      }, args));
      const keys = [
        {
          pubkey: accounts.candyMachine,
          isWritable: true,
          isSigner: false
        },
        {
          pubkey: accounts.authority,
          isWritable: false,
          isSigner: true
        }
      ];
      const ix = new web3.TransactionInstruction({
        programId,
        keys,
        data
      });
      return ix;
    }
    exports.createSetAuthorityInstruction = createSetAuthorityInstruction4;
  }
});

// ../../node_modules/@metaplex-foundation/mpl-candy-machine-core/dist/src/generated/instructions/setCollection.js
var require_setCollection2 = __commonJS({
  "../../node_modules/@metaplex-foundation/mpl-candy-machine-core/dist/src/generated/instructions/setCollection.js"(exports) {
    "use strict";
    var __createBinding = exports && exports.__createBinding || (Object.create ? function(o2, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      var desc = Object.getOwnPropertyDescriptor(m, k);
      if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m[k];
        } };
      }
      Object.defineProperty(o2, k2, desc);
    } : function(o2, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      o2[k2] = m[k];
    });
    var __setModuleDefault = exports && exports.__setModuleDefault || (Object.create ? function(o2, v) {
      Object.defineProperty(o2, "default", { enumerable: true, value: v });
    } : function(o2, v) {
      o2["default"] = v;
    });
    var __importStar = exports && exports.__importStar || function(mod) {
      if (mod && mod.__esModule)
        return mod;
      var result = {};
      if (mod != null) {
        for (var k in mod)
          if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k))
            __createBinding(result, mod, k);
      }
      __setModuleDefault(result, mod);
      return result;
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.createSetCollectionInstruction = exports.setCollectionInstructionDiscriminator = exports.setCollectionStruct = void 0;
    var beet9 = __importStar(require_beet3());
    var web3 = __importStar((init_index_browser_esm(), __toCommonJS(index_browser_esm_exports)));
    exports.setCollectionStruct = new beet9.BeetArgsStruct([["instructionDiscriminator", beet9.uniformFixedSizeArray(beet9.u8, 8)]], "SetCollectionInstructionArgs");
    exports.setCollectionInstructionDiscriminator = [192, 254, 206, 76, 168, 182, 59, 223];
    function createSetCollectionInstruction4(accounts, programId = new web3.PublicKey("CndyV3LdqHUfDLmE5naZjVN8rBZz4tqhdefbAnjHG3JR")) {
      var _a;
      const [data] = exports.setCollectionStruct.serialize({
        instructionDiscriminator: exports.setCollectionInstructionDiscriminator
      });
      const keys = [
        {
          pubkey: accounts.candyMachine,
          isWritable: true,
          isSigner: false
        },
        {
          pubkey: accounts.authority,
          isWritable: false,
          isSigner: true
        },
        {
          pubkey: accounts.authorityPda,
          isWritable: true,
          isSigner: false
        },
        {
          pubkey: accounts.payer,
          isWritable: false,
          isSigner: true
        },
        {
          pubkey: accounts.collectionMint,
          isWritable: false,
          isSigner: false
        },
        {
          pubkey: accounts.collectionMetadata,
          isWritable: false,
          isSigner: false
        },
        {
          pubkey: accounts.collectionAuthorityRecord,
          isWritable: true,
          isSigner: false
        },
        {
          pubkey: accounts.newCollectionUpdateAuthority,
          isWritable: true,
          isSigner: true
        },
        {
          pubkey: accounts.newCollectionMetadata,
          isWritable: false,
          isSigner: false
        },
        {
          pubkey: accounts.newCollectionMint,
          isWritable: false,
          isSigner: false
        },
        {
          pubkey: accounts.newCollectionMasterEdition,
          isWritable: false,
          isSigner: false
        },
        {
          pubkey: accounts.newCollectionAuthorityRecord,
          isWritable: true,
          isSigner: false
        },
        {
          pubkey: accounts.tokenMetadataProgram,
          isWritable: false,
          isSigner: false
        },
        {
          pubkey: (_a = accounts.systemProgram) !== null && _a !== void 0 ? _a : web3.SystemProgram.programId,
          isWritable: false,
          isSigner: false
        }
      ];
      const ix = new web3.TransactionInstruction({
        programId,
        keys,
        data
      });
      return ix;
    }
    exports.createSetCollectionInstruction = createSetCollectionInstruction4;
  }
});

// ../../node_modules/@metaplex-foundation/mpl-candy-machine-core/dist/src/generated/instructions/setMintAuthority.js
var require_setMintAuthority = __commonJS({
  "../../node_modules/@metaplex-foundation/mpl-candy-machine-core/dist/src/generated/instructions/setMintAuthority.js"(exports) {
    "use strict";
    var __createBinding = exports && exports.__createBinding || (Object.create ? function(o2, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      var desc = Object.getOwnPropertyDescriptor(m, k);
      if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m[k];
        } };
      }
      Object.defineProperty(o2, k2, desc);
    } : function(o2, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      o2[k2] = m[k];
    });
    var __setModuleDefault = exports && exports.__setModuleDefault || (Object.create ? function(o2, v) {
      Object.defineProperty(o2, "default", { enumerable: true, value: v });
    } : function(o2, v) {
      o2["default"] = v;
    });
    var __importStar = exports && exports.__importStar || function(mod) {
      if (mod && mod.__esModule)
        return mod;
      var result = {};
      if (mod != null) {
        for (var k in mod)
          if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k))
            __createBinding(result, mod, k);
      }
      __setModuleDefault(result, mod);
      return result;
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.createSetMintAuthorityInstruction = exports.setMintAuthorityInstructionDiscriminator = exports.setMintAuthorityStruct = void 0;
    var beet9 = __importStar(require_beet3());
    var web3 = __importStar((init_index_browser_esm(), __toCommonJS(index_browser_esm_exports)));
    exports.setMintAuthorityStruct = new beet9.BeetArgsStruct([["instructionDiscriminator", beet9.uniformFixedSizeArray(beet9.u8, 8)]], "SetMintAuthorityInstructionArgs");
    exports.setMintAuthorityInstructionDiscriminator = [67, 127, 155, 187, 100, 174, 103, 121];
    function createSetMintAuthorityInstruction2(accounts, programId = new web3.PublicKey("CndyV3LdqHUfDLmE5naZjVN8rBZz4tqhdefbAnjHG3JR")) {
      const [data] = exports.setMintAuthorityStruct.serialize({
        instructionDiscriminator: exports.setMintAuthorityInstructionDiscriminator
      });
      const keys = [
        {
          pubkey: accounts.candyMachine,
          isWritable: true,
          isSigner: false
        },
        {
          pubkey: accounts.authority,
          isWritable: false,
          isSigner: true
        },
        {
          pubkey: accounts.mintAuthority,
          isWritable: false,
          isSigner: true
        }
      ];
      const ix = new web3.TransactionInstruction({
        programId,
        keys,
        data
      });
      return ix;
    }
    exports.createSetMintAuthorityInstruction = createSetMintAuthorityInstruction2;
  }
});

// ../../node_modules/@metaplex-foundation/mpl-candy-machine-core/dist/src/generated/instructions/update.js
var require_update2 = __commonJS({
  "../../node_modules/@metaplex-foundation/mpl-candy-machine-core/dist/src/generated/instructions/update.js"(exports) {
    "use strict";
    var __createBinding = exports && exports.__createBinding || (Object.create ? function(o2, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      var desc = Object.getOwnPropertyDescriptor(m, k);
      if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m[k];
        } };
      }
      Object.defineProperty(o2, k2, desc);
    } : function(o2, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      o2[k2] = m[k];
    });
    var __setModuleDefault = exports && exports.__setModuleDefault || (Object.create ? function(o2, v) {
      Object.defineProperty(o2, "default", { enumerable: true, value: v });
    } : function(o2, v) {
      o2["default"] = v;
    });
    var __importStar = exports && exports.__importStar || function(mod) {
      if (mod && mod.__esModule)
        return mod;
      var result = {};
      if (mod != null) {
        for (var k in mod)
          if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k))
            __createBinding(result, mod, k);
      }
      __setModuleDefault(result, mod);
      return result;
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.createUpdateInstruction = exports.updateInstructionDiscriminator = exports.updateStruct = void 0;
    var beet9 = __importStar(require_beet3());
    var web3 = __importStar((init_index_browser_esm(), __toCommonJS(index_browser_esm_exports)));
    var CandyMachineData_1 = require_CandyMachineData2();
    exports.updateStruct = new beet9.FixableBeetArgsStruct([
      ["instructionDiscriminator", beet9.uniformFixedSizeArray(beet9.u8, 8)],
      ["data", CandyMachineData_1.candyMachineDataBeet]
    ], "UpdateInstructionArgs");
    exports.updateInstructionDiscriminator = [219, 200, 88, 176, 158, 63, 253, 127];
    function createUpdateInstruction4(accounts, args, programId = new web3.PublicKey("CndyV3LdqHUfDLmE5naZjVN8rBZz4tqhdefbAnjHG3JR")) {
      const [data] = exports.updateStruct.serialize(__spreadValues({
        instructionDiscriminator: exports.updateInstructionDiscriminator
      }, args));
      const keys = [
        {
          pubkey: accounts.candyMachine,
          isWritable: true,
          isSigner: false
        },
        {
          pubkey: accounts.authority,
          isWritable: false,
          isSigner: true
        }
      ];
      const ix = new web3.TransactionInstruction({
        programId,
        keys,
        data
      });
      return ix;
    }
    exports.createUpdateInstruction = createUpdateInstruction4;
  }
});

// ../../node_modules/@metaplex-foundation/mpl-candy-machine-core/dist/src/generated/instructions/withdraw.js
var require_withdraw2 = __commonJS({
  "../../node_modules/@metaplex-foundation/mpl-candy-machine-core/dist/src/generated/instructions/withdraw.js"(exports) {
    "use strict";
    var __createBinding = exports && exports.__createBinding || (Object.create ? function(o2, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      var desc = Object.getOwnPropertyDescriptor(m, k);
      if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m[k];
        } };
      }
      Object.defineProperty(o2, k2, desc);
    } : function(o2, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      o2[k2] = m[k];
    });
    var __setModuleDefault = exports && exports.__setModuleDefault || (Object.create ? function(o2, v) {
      Object.defineProperty(o2, "default", { enumerable: true, value: v });
    } : function(o2, v) {
      o2["default"] = v;
    });
    var __importStar = exports && exports.__importStar || function(mod) {
      if (mod && mod.__esModule)
        return mod;
      var result = {};
      if (mod != null) {
        for (var k in mod)
          if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k))
            __createBinding(result, mod, k);
      }
      __setModuleDefault(result, mod);
      return result;
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.createWithdrawInstruction = exports.withdrawInstructionDiscriminator = exports.withdrawStruct = void 0;
    var beet9 = __importStar(require_beet3());
    var web3 = __importStar((init_index_browser_esm(), __toCommonJS(index_browser_esm_exports)));
    exports.withdrawStruct = new beet9.BeetArgsStruct([["instructionDiscriminator", beet9.uniformFixedSizeArray(beet9.u8, 8)]], "WithdrawInstructionArgs");
    exports.withdrawInstructionDiscriminator = [183, 18, 70, 156, 148, 109, 161, 34];
    function createWithdrawInstruction4(accounts, programId = new web3.PublicKey("CndyV3LdqHUfDLmE5naZjVN8rBZz4tqhdefbAnjHG3JR")) {
      const [data] = exports.withdrawStruct.serialize({
        instructionDiscriminator: exports.withdrawInstructionDiscriminator
      });
      const keys = [
        {
          pubkey: accounts.candyMachine,
          isWritable: true,
          isSigner: false
        },
        {
          pubkey: accounts.authority,
          isWritable: true,
          isSigner: true
        }
      ];
      const ix = new web3.TransactionInstruction({
        programId,
        keys,
        data
      });
      return ix;
    }
    exports.createWithdrawInstruction = createWithdrawInstruction4;
  }
});

// ../../node_modules/@metaplex-foundation/mpl-candy-machine-core/dist/src/generated/instructions/index.js
var require_instructions15 = __commonJS({
  "../../node_modules/@metaplex-foundation/mpl-candy-machine-core/dist/src/generated/instructions/index.js"(exports) {
    "use strict";
    var __createBinding = exports && exports.__createBinding || (Object.create ? function(o2, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      var desc = Object.getOwnPropertyDescriptor(m, k);
      if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m[k];
        } };
      }
      Object.defineProperty(o2, k2, desc);
    } : function(o2, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      o2[k2] = m[k];
    });
    var __exportStar = exports && exports.__exportStar || function(m, exports2) {
      for (var p in m)
        if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports2, p))
          __createBinding(exports2, m, p);
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    __exportStar(require_addConfigLines2(), exports);
    __exportStar(require_initialize2(), exports);
    __exportStar(require_mint3(), exports);
    __exportStar(require_setAuthority4(), exports);
    __exportStar(require_setCollection2(), exports);
    __exportStar(require_setMintAuthority(), exports);
    __exportStar(require_update2(), exports);
    __exportStar(require_withdraw2(), exports);
  }
});

// ../../node_modules/@metaplex-foundation/mpl-candy-machine-core/dist/src/generated/types/index.js
var require_types12 = __commonJS({
  "../../node_modules/@metaplex-foundation/mpl-candy-machine-core/dist/src/generated/types/index.js"(exports) {
    "use strict";
    var __createBinding = exports && exports.__createBinding || (Object.create ? function(o2, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      var desc = Object.getOwnPropertyDescriptor(m, k);
      if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m[k];
        } };
      }
      Object.defineProperty(o2, k2, desc);
    } : function(o2, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      o2[k2] = m[k];
    });
    var __exportStar = exports && exports.__exportStar || function(m, exports2) {
      for (var p in m)
        if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports2, p))
          __createBinding(exports2, m, p);
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    __exportStar(require_CandyMachineData2(), exports);
    __exportStar(require_ConfigLine2(), exports);
    __exportStar(require_ConfigLineSettings(), exports);
    __exportStar(require_Creator4(), exports);
    __exportStar(require_HiddenSettings2(), exports);
  }
});

// ../../node_modules/@metaplex-foundation/mpl-candy-machine-core/dist/src/generated/index.js
var require_generated6 = __commonJS({
  "../../node_modules/@metaplex-foundation/mpl-candy-machine-core/dist/src/generated/index.js"(exports) {
    "use strict";
    var __createBinding = exports && exports.__createBinding || (Object.create ? function(o2, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      var desc = Object.getOwnPropertyDescriptor(m, k);
      if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m[k];
        } };
      }
      Object.defineProperty(o2, k2, desc);
    } : function(o2, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      o2[k2] = m[k];
    });
    var __exportStar = exports && exports.__exportStar || function(m, exports2) {
      for (var p in m)
        if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports2, p))
          __createBinding(exports2, m, p);
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.PROGRAM_ID = exports.PROGRAM_ADDRESS = void 0;
    var web3_js_1 = (init_index_browser_esm(), __toCommonJS(index_browser_esm_exports));
    __exportStar(require_accounts6(), exports);
    __exportStar(require_errors13(), exports);
    __exportStar(require_instructions15(), exports);
    __exportStar(require_types12(), exports);
    exports.PROGRAM_ADDRESS = "CndyV3LdqHUfDLmE5naZjVN8rBZz4tqhdefbAnjHG3JR";
    exports.PROGRAM_ID = new web3_js_1.PublicKey(exports.PROGRAM_ADDRESS);
  }
});

// ../../node_modules/@metaplex-foundation/mpl-candy-machine-core/dist/src/errors.js
var require_errors14 = __commonJS({
  "../../node_modules/@metaplex-foundation/mpl-candy-machine-core/dist/src/errors.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.cusper = void 0;
    var cusper_1 = require_cusper();
    var generated_1 = require_generated6();
    exports.cusper = (0, cusper_1.initCusper)(generated_1.errorFromCode);
  }
});

// ../../node_modules/@metaplex-foundation/mpl-candy-machine-core/dist/src/index.js
var require_src3 = __commonJS({
  "../../node_modules/@metaplex-foundation/mpl-candy-machine-core/dist/src/index.js"(exports) {
    "use strict";
    var __createBinding = exports && exports.__createBinding || (Object.create ? function(o2, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      var desc = Object.getOwnPropertyDescriptor(m, k);
      if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m[k];
        } };
      }
      Object.defineProperty(o2, k2, desc);
    } : function(o2, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      o2[k2] = m[k];
    });
    var __exportStar = exports && exports.__exportStar || function(m, exports2) {
      for (var p in m)
        if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports2, p))
          __createBinding(exports2, m, p);
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    __exportStar(require_generated6(), exports);
    __exportStar(require_errors14(), exports);
  }
});

// ../../node_modules/@metaplex-foundation/mpl-auction-house/node_modules/@metaplex-foundation/beet/dist/cjs/src/types.js
var require_types13 = __commonJS({
  "../../node_modules/@metaplex-foundation/mpl-auction-house/node_modules/@metaplex-foundation/beet/dist/cjs/src/types.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.isElementCollectionFixedSizeBeet = exports.isFixableBeet = exports.assertFixedSizeBeet = exports.isFixedSizeBeet = exports.BEET_TYPE_ARG_INNER = exports.BEET_TYPE_ARG_LEN = exports.BEET_PACKAGE = void 0;
    var assert_1 = require_assert();
    exports.BEET_PACKAGE = "@metaplex-foundation/beet";
    exports.BEET_TYPE_ARG_LEN = "len";
    exports.BEET_TYPE_ARG_INNER = "Beet<{innner}>";
    function isFixedSizeBeet(x) {
      return Object.keys(x).includes("byteSize");
    }
    exports.isFixedSizeBeet = isFixedSizeBeet;
    function assertFixedSizeBeet(x, msg = `${x} should have been a fixed beet`) {
      (0, assert_1.strict)(isFixedSizeBeet(x), msg);
    }
    exports.assertFixedSizeBeet = assertFixedSizeBeet;
    function isFixableBeet2(x) {
      return typeof x.toFixedFromData === "function" && typeof x.toFixedFromValue === "function";
    }
    exports.isFixableBeet = isFixableBeet2;
    function isElementCollectionFixedSizeBeet(x) {
      const keys = Object.keys(x);
      return keys.includes("length") && keys.includes("elementByteSize") && keys.includes("lenPrefixByteSize");
    }
    exports.isElementCollectionFixedSizeBeet = isElementCollectionFixedSizeBeet;
  }
});

// ../../node_modules/@metaplex-foundation/mpl-auction-house/node_modules/@metaplex-foundation/beet/dist/cjs/src/beets/numbers.js
var require_numbers4 = __commonJS({
  "../../node_modules/@metaplex-foundation/mpl-auction-house/node_modules/@metaplex-foundation/beet/dist/cjs/src/beets/numbers.js"(exports) {
    "use strict";
    var __importDefault = exports && exports.__importDefault || function(mod) {
      return mod && mod.__esModule ? mod : { "default": mod };
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.numbersTypeMap = exports.bool = exports.i512 = exports.i256 = exports.i128 = exports.i64 = exports.i32 = exports.i16 = exports.i8 = exports.u512 = exports.u256 = exports.u128 = exports.u64 = exports.u32 = exports.u16 = exports.u8 = void 0;
    var bn_js_1 = __importDefault(require_bn());
    var types_1 = require_types13();
    exports.u8 = {
      write: function(buf, offset, value) {
        buf.writeUInt8(value, offset);
      },
      read: function(buf, offset) {
        return buf.readUInt8(offset);
      },
      byteSize: 1,
      description: "u8"
    };
    exports.u16 = {
      write: function(buf, offset, value) {
        buf.writeUInt16LE(value, offset);
      },
      read: function(buf, offset) {
        return buf.readUInt16LE(offset);
      },
      byteSize: 2,
      description: "u16"
    };
    exports.u32 = {
      write: function(buf, offset, value) {
        buf.writeUInt32LE(value, offset);
      },
      read: function(buf, offset) {
        return buf.readUInt32LE(offset);
      },
      byteSize: 4,
      description: "u32"
    };
    function unsignedLargeBeet(byteSize, description) {
      return {
        write: function(buf, offset, value) {
          const bn = bn_js_1.default.isBN(value) ? value : new bn_js_1.default(value);
          const bytesArray = bn.toArray("le", this.byteSize);
          const bytesArrayBuf = Buffer.from(bytesArray);
          bytesArrayBuf.copy(buf, offset, 0, this.byteSize);
        },
        read: function(buf, offset) {
          const slice = buf.slice(offset, offset + this.byteSize);
          return new bn_js_1.default(slice, "le");
        },
        byteSize,
        description
      };
    }
    exports.u64 = unsignedLargeBeet(8, "u64");
    exports.u128 = unsignedLargeBeet(16, "u128");
    exports.u256 = unsignedLargeBeet(32, "u256");
    exports.u512 = unsignedLargeBeet(64, "u512");
    exports.i8 = {
      write: function(buf, offset, value) {
        buf.writeInt8(value, offset);
      },
      read: function(buf, offset) {
        return buf.readInt8(offset);
      },
      byteSize: 1,
      description: "i8"
    };
    exports.i16 = {
      write: function(buf, offset, value) {
        buf.writeInt16LE(value, offset);
      },
      read: function(buf, offset) {
        return buf.readInt16LE(offset);
      },
      byteSize: 2,
      description: "i16"
    };
    exports.i32 = {
      write: function(buf, offset, value) {
        buf.writeInt32LE(value, offset);
      },
      read: function(buf, offset) {
        return buf.readInt32LE(offset);
      },
      byteSize: 4,
      description: "i32"
    };
    function signedLargeBeet(byteSize, description) {
      const bitSize = byteSize * 8;
      return {
        write: function(buf, offset, value) {
          const bn = (bn_js_1.default.isBN(value) ? value : new bn_js_1.default(value)).toTwos(bitSize);
          const bytesArray = bn.toArray("le", this.byteSize);
          const bytesArrayBuf = Buffer.from(bytesArray);
          bytesArrayBuf.copy(buf, offset, 0, this.byteSize);
        },
        read: function(buf, offset) {
          const slice = buf.slice(offset, offset + this.byteSize);
          const x = new bn_js_1.default(slice, "le");
          return x.fromTwos(bitSize);
        },
        byteSize,
        description
      };
    }
    exports.i64 = signedLargeBeet(8, "i64");
    exports.i128 = signedLargeBeet(16, "i128");
    exports.i256 = signedLargeBeet(32, "i256");
    exports.i512 = signedLargeBeet(64, "i512");
    exports.bool = {
      write: function(buf, offset, value) {
        const n = value ? 1 : 0;
        exports.u8.write(buf, offset, n);
      },
      read: function(buf, offset) {
        return exports.u8.read(buf, offset) === 1;
      },
      byteSize: 1,
      description: "bool"
    };
    exports.numbersTypeMap = {
      // <= 32-bit numbers and boolean
      u8: { beet: "u8", isFixable: false, sourcePack: types_1.BEET_PACKAGE, ts: "number" },
      u16: { beet: "u16", isFixable: false, sourcePack: types_1.BEET_PACKAGE, ts: "number" },
      u32: { beet: "u32", isFixable: false, sourcePack: types_1.BEET_PACKAGE, ts: "number" },
      i8: { beet: "i8", isFixable: false, sourcePack: types_1.BEET_PACKAGE, ts: "number" },
      i16: { beet: "i16", isFixable: false, sourcePack: types_1.BEET_PACKAGE, ts: "number" },
      i32: { beet: "i32", isFixable: false, sourcePack: types_1.BEET_PACKAGE, ts: "number" },
      bool: { beet: "bool", isFixable: false, sourcePack: types_1.BEET_PACKAGE, ts: "boolean" },
      // Big Number, they use, the 'bignum' type which is defined in this package
      u64: { beet: "u64", isFixable: false, sourcePack: types_1.BEET_PACKAGE, ts: "bignum", pack: types_1.BEET_PACKAGE },
      u128: { beet: "u128", isFixable: false, sourcePack: types_1.BEET_PACKAGE, ts: "bignum", pack: types_1.BEET_PACKAGE },
      u256: { beet: "u256", isFixable: false, sourcePack: types_1.BEET_PACKAGE, ts: "bignum", pack: types_1.BEET_PACKAGE },
      u512: { beet: "u512", isFixable: false, sourcePack: types_1.BEET_PACKAGE, ts: "bignum", pack: types_1.BEET_PACKAGE },
      i64: { beet: "i64", isFixable: false, sourcePack: types_1.BEET_PACKAGE, ts: "bignum", pack: types_1.BEET_PACKAGE },
      i128: { beet: "i128", isFixable: false, sourcePack: types_1.BEET_PACKAGE, ts: "bignum", pack: types_1.BEET_PACKAGE },
      i256: { beet: "i256", isFixable: false, sourcePack: types_1.BEET_PACKAGE, ts: "bignum", pack: types_1.BEET_PACKAGE },
      i512: { beet: "i512", isFixable: false, sourcePack: types_1.BEET_PACKAGE, ts: "bignum", pack: types_1.BEET_PACKAGE }
    };
  }
});

// ../../node_modules/@metaplex-foundation/mpl-auction-house/node_modules/@metaplex-foundation/beet/dist/cjs/src/utils.js
var require_utils10 = __commonJS({
  "../../node_modules/@metaplex-foundation/mpl-auction-house/node_modules/@metaplex-foundation/beet/dist/cjs/src/utils.js"(exports) {
    "use strict";
    var __importDefault = exports && exports.__importDefault || function(mod) {
      return mod && mod.__esModule ? mod : { "default": mod };
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.UnreachableCaseError = exports.bytes = exports.beetBytes = exports.logTrace = exports.logDebug = exports.logInfo = exports.logError = void 0;
    var debug_1 = __importDefault(require_browser2());
    var ansicolors_1 = __importDefault(require_ansicolors());
    var types_1 = require_types13();
    var { brightBlack } = ansicolors_1.default;
    exports.logError = (0, debug_1.default)("beet:error");
    exports.logInfo = (0, debug_1.default)("beet:info");
    exports.logDebug = (0, debug_1.default)("beet:debug");
    exports.logTrace = (0, debug_1.default)("beet:trace");
    function beetBytes(beet9, isFixable = false) {
      let bytes2;
      if ((0, types_1.isFixableBeet)(beet9)) {
        bytes2 = "? B";
      } else if ((0, types_1.isElementCollectionFixedSizeBeet)(beet9)) {
        const len = isFixable ? "length" : beet9.length;
        const lenBytes = beet9.lenPrefixByteSize;
        bytes2 = lenBytes > 0 ? `${lenBytes} + (${beet9.elementByteSize} * ${len}) B  (${beet9.byteSize} B)` : `(${beet9.elementByteSize} * ${len}) B (${beet9.byteSize} B)`;
      } else {
        bytes2 = `${beet9.byteSize} B`;
      }
      return brightBlack(bytes2);
    }
    exports.beetBytes = beetBytes;
    function bytes(n) {
      return brightBlack(`${n} B`);
    }
    exports.bytes = bytes;
    var UnreachableCaseError2 = class extends Error {
      constructor(value) {
        super(`Unreachable case: ${value}`);
      }
    };
    exports.UnreachableCaseError = UnreachableCaseError2;
  }
});

// ../../node_modules/@metaplex-foundation/mpl-auction-house/node_modules/@metaplex-foundation/beet/dist/cjs/src/beet.fixable.js
var require_beet_fixable4 = __commonJS({
  "../../node_modules/@metaplex-foundation/mpl-auction-house/node_modules/@metaplex-foundation/beet/dist/cjs/src/beet.fixable.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.fixBeetFromValue = exports.fixBeetFromData = void 0;
    var types_1 = require_types13();
    var utils_1 = require_utils10();
    function fixBeetFromData(beet9, buf, offset) {
      if ((0, types_1.isFixedSizeBeet)(beet9)) {
        return beet9;
      }
      if ((0, types_1.isFixableBeet)(beet9)) {
        return beet9.toFixedFromData(buf, offset);
      }
      throw new utils_1.UnreachableCaseError(beet9);
    }
    exports.fixBeetFromData = fixBeetFromData;
    function fixBeetFromValue(beet9, val) {
      if ((0, types_1.isFixedSizeBeet)(beet9)) {
        return beet9;
      }
      if ((0, types_1.isFixableBeet)(beet9)) {
        return beet9.toFixedFromValue(val);
      }
      throw new utils_1.UnreachableCaseError(beet9);
    }
    exports.fixBeetFromValue = fixBeetFromValue;
  }
});

// ../../node_modules/@metaplex-foundation/mpl-auction-house/node_modules/@metaplex-foundation/beet/dist/cjs/src/beets/collections.js
var require_collections4 = __commonJS({
  "../../node_modules/@metaplex-foundation/mpl-auction-house/node_modules/@metaplex-foundation/beet/dist/cjs/src/beets/collections.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.collectionsTypeMap = exports.uint8Array = exports.fixedSizeUint8Array = exports.fixedSizeBuffer = exports.array = exports.fixedSizeArray = exports.uniformFixedSizeArray = void 0;
    var types_1 = require_types13();
    var assert_1 = require_assert();
    var numbers_1 = require_numbers4();
    var types_2 = require_types13();
    var utils_1 = require_utils10();
    var beet_fixable_1 = require_beet_fixable4();
    function uniformFixedSizeArray3(element, len, lenPrefix = false) {
      const arraySize = element.byteSize * len;
      const byteSize = lenPrefix ? 4 + arraySize : arraySize;
      return {
        write: function(buf, offset, value) {
          assert_1.strict.equal(value.length, len, `array length ${value.length} should match len ${len}`);
          if (lenPrefix) {
            numbers_1.u32.write(buf, offset, len);
            offset += 4;
          }
          for (let i = 0; i < len; i++) {
            element.write(buf, offset + i * element.byteSize, value[i]);
          }
        },
        read: function(buf, offset) {
          if (lenPrefix) {
            const size = numbers_1.u32.read(buf, offset);
            assert_1.strict.equal(size, len, "invalid byte size");
            offset += 4;
          }
          const arr = new Array(len);
          for (let i = 0; i < len; i++) {
            arr[i] = element.read(buf, offset + i * element.byteSize);
          }
          return arr;
        },
        byteSize,
        length: len,
        elementByteSize: element.byteSize,
        lenPrefixByteSize: 4,
        description: `Array<${element.description}>(${len})`
      };
    }
    exports.uniformFixedSizeArray = uniformFixedSizeArray3;
    function fixedSizeArray(elements, elementsByteSize) {
      const len = elements.length;
      const firstElement = len === 0 ? "<EMPTY>" : elements[0].description;
      return {
        write: function(buf, offset, value) {
          assert_1.strict.equal(value.length, len, `array length ${value.length} should match len ${len}`);
          numbers_1.u32.write(buf, offset, len);
          let cursor = offset + 4;
          for (let i = 0; i < len; i++) {
            const element = elements[i];
            element.write(buf, cursor, value[i]);
            cursor += element.byteSize;
          }
        },
        read: function(buf, offset) {
          const size = numbers_1.u32.read(buf, offset);
          assert_1.strict.equal(size, len, "invalid byte size");
          let cursor = offset + 4;
          const arr = new Array(len);
          for (let i = 0; i < len; i++) {
            const element = elements[i];
            arr[i] = element.read(buf, cursor);
            cursor += element.byteSize;
          }
          return arr;
        },
        byteSize: 4 + elementsByteSize,
        length: len,
        description: `Array<${firstElement}>(${len})[ 4 + ${elementsByteSize} ]`
      };
    }
    exports.fixedSizeArray = fixedSizeArray;
    function array(element) {
      return {
        toFixedFromData(buf, offset) {
          const len = numbers_1.u32.read(buf, offset);
          (0, utils_1.logTrace)(`${this.description}[${len}]`);
          const cursorStart = offset + 4;
          let cursor = cursorStart;
          const fixedElements = new Array(len);
          for (let i = 0; i < len; i++) {
            const fixedElement = (0, beet_fixable_1.fixBeetFromData)(element, buf, cursor);
            fixedElements[i] = fixedElement;
            cursor += fixedElement.byteSize;
          }
          return fixedSizeArray(fixedElements, cursor - cursorStart);
        },
        toFixedFromValue(vals) {
          (0, assert_1.strict)(Array.isArray(vals), `${vals} should be an array`);
          let elementsSize = 0;
          const fixedElements = new Array(vals.length);
          for (let i = 0; i < vals.length; i++) {
            const fixedElement = (0, beet_fixable_1.fixBeetFromValue)(element, vals[i]);
            fixedElements[i] = fixedElement;
            elementsSize += fixedElement.byteSize;
          }
          return fixedSizeArray(fixedElements, elementsSize);
        },
        description: `array`
      };
    }
    exports.array = array;
    function fixedSizeBuffer(bytes) {
      return {
        write: function(buf, offset, value) {
          value.copy(buf, offset, 0, bytes);
        },
        read: function(buf, offset) {
          return buf.slice(offset, offset + bytes);
        },
        byteSize: bytes,
        description: `Buffer(${bytes})`
      };
    }
    exports.fixedSizeBuffer = fixedSizeBuffer;
    function fixedSizeUint8Array(len, lenPrefix = false) {
      const arrayBufferBeet = fixedSizeBuffer(len);
      const byteSize = lenPrefix ? len + 4 : len;
      return {
        write: function(buf, offset, value) {
          assert_1.strict.equal(value.byteLength, len, `Uint8Array length ${value.byteLength} should match len ${len}`);
          if (lenPrefix) {
            numbers_1.u32.write(buf, offset, len);
            offset += 4;
          }
          const valueBuf = Buffer.from(value);
          arrayBufferBeet.write(buf, offset, valueBuf);
        },
        read: function(buf, offset) {
          if (lenPrefix) {
            const size = numbers_1.u32.read(buf, offset);
            assert_1.strict.equal(size, len, "invalid byte size");
            offset += 4;
          }
          const arrayBuffer = arrayBufferBeet.read(buf, offset);
          return Uint8Array.from(arrayBuffer);
        },
        byteSize,
        description: `Uint8Array(${len})`
      };
    }
    exports.fixedSizeUint8Array = fixedSizeUint8Array;
    exports.uint8Array = {
      toFixedFromData(buf, offset) {
        const len = numbers_1.u32.read(buf, offset);
        (0, utils_1.logTrace)(`${this.description}[${len}]`);
        return fixedSizeUint8Array(len, true);
      },
      toFixedFromValue(val) {
        const len = val.byteLength;
        return fixedSizeUint8Array(len, true);
      },
      description: `Uint8Array`
    };
    exports.collectionsTypeMap = {
      Array: {
        beet: "array",
        isFixable: true,
        sourcePack: types_2.BEET_PACKAGE,
        ts: "Array",
        arg: types_1.BEET_TYPE_ARG_LEN
      },
      FixedSizeArray: {
        beet: "fixedSizeArray",
        isFixable: false,
        sourcePack: types_2.BEET_PACKAGE,
        ts: "Array",
        arg: types_1.BEET_TYPE_ARG_LEN
      },
      UniformFixedSizeArray: {
        beet: "uniformFixedSizeArray",
        isFixable: false,
        sourcePack: types_2.BEET_PACKAGE,
        ts: "Array",
        arg: types_1.BEET_TYPE_ARG_LEN
      },
      Buffer: {
        beet: "fixedSizeBuffer",
        isFixable: false,
        sourcePack: types_2.BEET_PACKAGE,
        ts: "Buffer",
        arg: types_1.BEET_TYPE_ARG_LEN
      },
      FixedSizeUint8Array: {
        beet: "fixedSizeUint8Array",
        isFixable: false,
        sourcePack: types_2.BEET_PACKAGE,
        ts: "Uint8Array",
        arg: types_1.BEET_TYPE_ARG_LEN
      },
      Uint8Array: {
        beet: "uint8Array",
        isFixable: true,
        sourcePack: types_2.BEET_PACKAGE,
        ts: "Uint8Array",
        arg: types_1.BEET_TYPE_ARG_LEN
      }
    };
  }
});

// ../../node_modules/@metaplex-foundation/mpl-auction-house/node_modules/@metaplex-foundation/beet/dist/cjs/src/beets/composites.js
var require_composites4 = __commonJS({
  "../../node_modules/@metaplex-foundation/mpl-auction-house/node_modules/@metaplex-foundation/beet/dist/cjs/src/beets/composites.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.compositesTypeMap = exports.coption = exports.coptionSome = exports.coptionNone = exports.isNoneBuffer = exports.isSomeBuffer = void 0;
    var assert_1 = require_assert();
    var types_1 = require_types13();
    var types_2 = require_types13();
    var utils_1 = require_utils10();
    var beet_fixable_1 = require_beet_fixable4();
    var NONE = 0;
    var SOME = 1;
    function isSomeBuffer(buf, offset) {
      return buf[offset] === SOME;
    }
    exports.isSomeBuffer = isSomeBuffer;
    function isNoneBuffer(buf, offset) {
      return buf[offset] === NONE;
    }
    exports.isNoneBuffer = isNoneBuffer;
    function coptionNone(description) {
      (0, utils_1.logTrace)(`coptionNone(${description})`);
      return {
        write: function(buf, offset, value) {
          (0, assert_1.strict)(value == null, "coptionNone can only handle `null` values");
          buf[offset] = NONE;
        },
        read: function(buf, offset) {
          (0, assert_1.strict)(isNoneBuffer(buf, offset), "coptionNone can only handle `NONE` data");
          return null;
        },
        byteSize: 1,
        description: `COption<None(${description})>`
      };
    }
    exports.coptionNone = coptionNone;
    function coptionSome(inner) {
      const byteSize = 1 + inner.byteSize;
      const beet9 = {
        write: function(buf, offset, value) {
          (0, types_1.assertFixedSizeBeet)(inner, `coption inner type ${inner.description} needs to be fixed before calling write`);
          (0, assert_1.strict)(value != null, "coptionSome cannot handle `null` values");
          buf[offset] = SOME;
          inner.write(buf, offset + 1, value);
        },
        read: function(buf, offset) {
          (0, types_1.assertFixedSizeBeet)(inner, `coption inner type ${inner.description} needs to be fixed before calling read`);
          (0, assert_1.strict)(isSomeBuffer(buf, offset), "coptionSome can only handle `SOME` data");
          return inner.read(buf, offset + 1);
        },
        description: `COption<${inner.description}>[1 + ${inner.byteSize}]`,
        byteSize,
        inner
      };
      (0, utils_1.logTrace)(beet9.description);
      return beet9;
    }
    exports.coptionSome = coptionSome;
    function coption(inner) {
      return {
        toFixedFromData(buf, offset) {
          if (isSomeBuffer(buf, offset)) {
            const innerFixed = (0, beet_fixable_1.fixBeetFromData)(inner, buf, offset + 1);
            return coptionSome(innerFixed);
          } else {
            (0, assert_1.strict)(isNoneBuffer(buf, offset), `Expected ${buf} to hold a COption`);
            return coptionNone(inner.description);
          }
        },
        toFixedFromValue(val) {
          return val == null ? coptionNone(inner.description) : coptionSome((0, beet_fixable_1.fixBeetFromValue)(inner, val));
        },
        description: `COption<${inner.description}>`
      };
    }
    exports.coption = coption;
    exports.compositesTypeMap = {
      option: {
        beet: "coption",
        isFixable: true,
        sourcePack: types_2.BEET_PACKAGE,
        ts: "COption<Inner>",
        arg: types_1.BEET_TYPE_ARG_INNER,
        pack: types_2.BEET_PACKAGE
      }
    };
  }
});

// ../../node_modules/@metaplex-foundation/mpl-auction-house/node_modules/@metaplex-foundation/beet/dist/cjs/src/beets/string.js
var require_string4 = __commonJS({
  "../../node_modules/@metaplex-foundation/mpl-auction-house/node_modules/@metaplex-foundation/beet/dist/cjs/src/beets/string.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.stringTypeMap = exports.utf8String = exports.fixedSizeUtf8String = void 0;
    var types_1 = require_types13();
    var assert_1 = require_assert();
    var numbers_1 = require_numbers4();
    var utils_1 = require_utils10();
    var fixedSizeUtf8String = (stringByteLength) => {
      return {
        write: function(buf, offset, value) {
          const stringBuf = Buffer.from(value, "utf8");
          assert_1.strict.equal(stringBuf.byteLength, stringByteLength, `${value} has invalid byte size`);
          numbers_1.u32.write(buf, offset, stringByteLength);
          stringBuf.copy(buf, offset + 4, 0, stringByteLength);
        },
        read: function(buf, offset) {
          const size = numbers_1.u32.read(buf, offset);
          assert_1.strict.equal(size, stringByteLength, `invalid byte size`);
          const stringSlice = buf.slice(offset + 4, offset + 4 + stringByteLength);
          return stringSlice.toString("utf8");
        },
        elementByteSize: 1,
        length: stringByteLength,
        lenPrefixByteSize: 4,
        byteSize: 4 + stringByteLength,
        description: `Utf8String(4 + ${stringByteLength})`
      };
    };
    exports.fixedSizeUtf8String = fixedSizeUtf8String;
    exports.utf8String = {
      toFixedFromData(buf, offset) {
        const len = numbers_1.u32.read(buf, offset);
        (0, utils_1.logTrace)(`${this.description}[${len}]`);
        return (0, exports.fixedSizeUtf8String)(len);
      },
      toFixedFromValue(val) {
        const len = Buffer.from(val).byteLength;
        return (0, exports.fixedSizeUtf8String)(len);
      },
      description: `Utf8String`
    };
    exports.stringTypeMap = {
      fixedSizeString: {
        beet: "fixedSizeUtf8String",
        isFixable: false,
        sourcePack: types_1.BEET_PACKAGE,
        ts: "string",
        arg: types_1.BEET_TYPE_ARG_LEN
      },
      string: {
        beet: "utf8String",
        isFixable: true,
        sourcePack: types_1.BEET_PACKAGE,
        ts: "string"
      }
    };
  }
});

// ../../node_modules/@metaplex-foundation/mpl-auction-house/node_modules/@metaplex-foundation/beet/dist/cjs/src/read-write.js
var require_read_write4 = __commonJS({
  "../../node_modules/@metaplex-foundation/mpl-auction-house/node_modules/@metaplex-foundation/beet/dist/cjs/src/read-write.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.BeetReader = exports.BeetWriter = void 0;
    var assert_1 = require_assert();
    var BeetWriter3 = class {
      constructor(byteSize) {
        this.buf = Buffer.alloc(byteSize);
        this._offset = 0;
      }
      get buffer() {
        return this.buf;
      }
      get offset() {
        return this._offset;
      }
      maybeResize(bytesNeeded) {
        if (this._offset + bytesNeeded > this.buf.length) {
          assert_1.strict.fail(`We shouldn't ever need to resize, but ${this._offset + bytesNeeded} > ${this.buf.length}`);
        }
      }
      write(beet9, value) {
        this.maybeResize(beet9.byteSize);
        beet9.write(this.buf, this._offset, value);
        this._offset += beet9.byteSize;
      }
      writeStruct(instance, fields) {
        for (const [key, beet9] of fields) {
          const value = instance[key];
          this.write(beet9, value);
        }
      }
    };
    exports.BeetWriter = BeetWriter3;
    var BeetReader3 = class {
      constructor(buffer2, _offset = 0) {
        this.buffer = buffer2;
        this._offset = _offset;
      }
      get offset() {
        return this._offset;
      }
      read(beet9) {
        const value = beet9.read(this.buffer, this._offset);
        this._offset += beet9.byteSize;
        return value;
      }
      readStruct(fields) {
        const acc = {};
        for (const [key, beet9] of fields) {
          acc[key] = this.read(beet9);
        }
        return acc;
      }
    };
    exports.BeetReader = BeetReader3;
  }
});

// ../../node_modules/@metaplex-foundation/mpl-auction-house/node_modules/@metaplex-foundation/beet/dist/cjs/src/struct.js
var require_struct4 = __commonJS({
  "../../node_modules/@metaplex-foundation/mpl-auction-house/node_modules/@metaplex-foundation/beet/dist/cjs/src/struct.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.BeetArgsStruct = exports.isBeetStruct = exports.BeetStruct = void 0;
    var read_write_1 = require_read_write4();
    var utils_1 = require_utils10();
    var BeetStruct = class _BeetStruct {
      /**
       * Creates an instance of the BeetStruct.
       *
       * @param fields de/serializers for each field of the {@link Class}
       * @param construct the function that creates an instance of {@link Class}
       * from the args
       * @param description identifies this struct for diagnostics/debugging
       * purposes
       */
      constructor(fields, construct, description = _BeetStruct.description) {
        this.fields = fields;
        this.construct = construct;
        this.description = description;
        this.byteSize = this.getByteSize();
        if (utils_1.logDebug.enabled) {
          const flds = fields.map(([key, val]) => `${String(key)}: ${val.description} ${(0, utils_1.beetBytes)(val)}`).join("\n  ");
          (0, utils_1.logDebug)(`struct ${description} {
  ${flds}
} ${(0, utils_1.beetBytes)(this)}`);
        }
      }
      /**
       * Along with `write` this allows structs to be treated as {@link Beet}s and
       * thus supports composing/nesting them the same way.
       * @private
       */
      read(buf, offset) {
        const [value] = this.deserialize(buf, offset);
        return value;
      }
      /**
       * Along with `read` this allows structs to be treated as {@link Beet}s and
       * thus supports composing/nesting them the same way.
       * @private
       */
      write(buf, offset, value) {
        const [innerBuf, innerOffset] = this.serialize(value);
        innerBuf.copy(buf, offset, 0, innerOffset);
      }
      /**
       * Deserializes an instance of the Class from the provided buffer starting to
       * read at the provided offset.
       *
       * @returns `[instance of Class, offset into buffer after deserialization completed]`
       */
      deserialize(buffer2, offset = 0) {
        if (utils_1.logTrace.enabled) {
          (0, utils_1.logTrace)("deserializing [%s] from %d bytes buffer", this.description, buffer2.byteLength);
          (0, utils_1.logTrace)(buffer2);
          (0, utils_1.logTrace)(buffer2.toJSON().data);
        }
        const reader = new read_write_1.BeetReader(buffer2, offset);
        const args = reader.readStruct(this.fields);
        return [this.construct(args), reader.offset];
      }
      /**
       * Serializes the provided instance into a new {@link Buffer}
       *
       * @param instance of the struct to serialize
       * @param byteSize allows to override the size fo the created Buffer and
       * defaults to the size of the struct to serialize
       */
      serialize(instance, byteSize = this.byteSize) {
        (0, utils_1.logTrace)("serializing [%s] %o to %d bytes buffer", this.description, instance, byteSize);
        const writer = new read_write_1.BeetWriter(byteSize);
        writer.writeStruct(instance, this.fields);
        return [writer.buffer, writer.offset];
      }
      getByteSize() {
        return this.fields.reduce((acc, [_, beet9]) => acc + beet9.byteSize, 0);
      }
      get type() {
        return _BeetStruct.TYPE;
      }
    };
    exports.BeetStruct = BeetStruct;
    BeetStruct.description = "BeetStruct";
    BeetStruct.TYPE = "BeetStruct";
    function isBeetStruct(beet9) {
      return beet9.type === BeetStruct.TYPE;
    }
    exports.isBeetStruct = isBeetStruct;
    var BeetArgsStruct = class _BeetArgsStruct extends BeetStruct {
      constructor(fields, description = _BeetArgsStruct.description) {
        super(fields, (args) => args, description);
      }
    };
    exports.BeetArgsStruct = BeetArgsStruct;
    BeetArgsStruct.description = "BeetArgsStruct";
  }
});

// ../../node_modules/@metaplex-foundation/mpl-auction-house/node_modules/@metaplex-foundation/beet/dist/cjs/src/struct.fixable.js
var require_struct_fixable4 = __commonJS({
  "../../node_modules/@metaplex-foundation/mpl-auction-house/node_modules/@metaplex-foundation/beet/dist/cjs/src/struct.fixable.js"(exports) {
    "use strict";
    var __importDefault = exports && exports.__importDefault || function(mod) {
      return mod && mod.__esModule ? mod : { "default": mod };
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.FixableBeetArgsStruct = exports.isFixableBeetStruct = exports.FixableBeetStruct = void 0;
    var beet_fixable_1 = require_beet_fixable4();
    var struct_1 = require_struct4();
    var types_1 = require_types13();
    var assert_1 = require_assert();
    var utils_1 = require_utils10();
    var ansicolors_1 = __importDefault(require_ansicolors());
    var { brightBlack } = ansicolors_1.default;
    var FixableBeetStruct = class _FixableBeetStruct {
      /**
       * Creates an instance of the {@link FixableBeetStruct}.
       *
       * @param fields fixed or fixable de/serializers for each field of the {@link Class}
       * @param construct the function that creates an instance of {@link Class}
       * from the args
       * @param description identifies this struct for diagnostics/debugging
       * purposes
       */
      constructor(fields, construct, description = _FixableBeetStruct.description) {
        this.fields = fields;
        this.construct = construct;
        this.description = description;
        let minByteSize = 0;
        if (utils_1.logDebug.enabled) {
          const flds = fields.map(([key, val]) => {
            if ((0, types_1.isFixedSizeBeet)(val)) {
              minByteSize += val.byteSize;
            }
            return `${key}: ${val.description} ${(0, utils_1.beetBytes)(val)}`;
          }).join("\n  ");
          const bytes = `> ${minByteSize} B`;
          (0, utils_1.logDebug)(`struct ${description} {
  ${flds}
} ${brightBlack(bytes)}`);
        }
      }
      /**
       * Deserializes an instance of the Class from the provided buffer starting to
       * read at the provided offset.
       *
       * @returns `[instance of Class, offset into buffer after deserialization completed]`
       */
      deserialize(buffer2, offset = 0) {
        return this.toFixedFromData(buffer2, offset).deserialize(buffer2, offset);
      }
      /**
       * Serializes the provided instance into a new {@link Buffer}
       *
       * **NOTE:** that the `instance` is traversed and each of its fields accessed
       * twice, once to derive a _fixed size_ {@link BeetStruct} and then use it to
       * serialize the `instance`.
       * Therefore ensure that none of the properties that are part of the struct
       * have side effects, i.e. via `Getter`s.
       *
       * @param instance of the struct to serialize
       * @param byteSize allows to override the size fo the created Buffer and
       * defaults to the size of the struct to serialize
       */
      serialize(instance, byteSize) {
        return this.toFixedFromValue(instance).serialize(instance, byteSize);
      }
      toFixedFromData(buf, offset) {
        let cursor = offset;
        const fixedFields = new Array(this.fields.length);
        for (let i = 0; i < this.fields.length; i++) {
          const [key, beet9] = this.fields[i];
          const fixedBeet = (0, beet_fixable_1.fixBeetFromData)(beet9, buf, cursor);
          fixedFields[i] = [key, fixedBeet];
          cursor += fixedBeet.byteSize;
        }
        return this.description !== _FixableBeetStruct.description ? new struct_1.BeetStruct(fixedFields, this.construct, this.description) : new struct_1.BeetStruct(fixedFields, this.construct);
      }
      toFixedFromValue(args) {
        const argsKeys = Object.keys(args);
        const fixedFields = new Array(this.fields.length);
        for (let i = 0; i < this.fields.length; i++) {
          const [key, beet9] = this.fields[i];
          (0, assert_1.strict)(argsKeys.includes(key), `Value with keys [ ${argsKeys} ] should include struct key '${key}' but doesn't.`);
          const val = args[key];
          const fixedBeet = (0, beet_fixable_1.fixBeetFromValue)(beet9, val);
          fixedFields[i] = [key, fixedBeet];
        }
        return this.description !== _FixableBeetStruct.description ? new struct_1.BeetStruct(fixedFields, this.construct, this.description) : new struct_1.BeetStruct(fixedFields, this.construct);
      }
      get type() {
        return _FixableBeetStruct.TYPE;
      }
    };
    exports.FixableBeetStruct = FixableBeetStruct;
    FixableBeetStruct.description = "FixableBeetStruct";
    FixableBeetStruct.TYPE = "FixableBeetStruct";
    function isFixableBeetStruct(beet9) {
      return beet9.type === FixableBeetStruct.TYPE;
    }
    exports.isFixableBeetStruct = isFixableBeetStruct;
    var FixableBeetArgsStruct = class _FixableBeetArgsStruct extends FixableBeetStruct {
      constructor(fields, description = _FixableBeetArgsStruct.description) {
        super(fields, (args) => args, description);
      }
    };
    exports.FixableBeetArgsStruct = FixableBeetArgsStruct;
    FixableBeetArgsStruct.description = "FixableBeetArgsStruct";
  }
});

// ../../node_modules/@metaplex-foundation/mpl-auction-house/node_modules/@metaplex-foundation/beet/dist/cjs/src/beets/unit.js
var require_unit2 = __commonJS({
  "../../node_modules/@metaplex-foundation/mpl-auction-house/node_modules/@metaplex-foundation/beet/dist/cjs/src/beets/unit.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.unitTypeMap = exports.unit = void 0;
    var types_1 = require_types13();
    exports.unit = {
      write: function(_buf, _offset, _value) {
      },
      read: function(_buf, _offset) {
        return void 0;
      },
      byteSize: 0,
      description: "unit"
    };
    exports.unitTypeMap = {
      unit: {
        beet: "unit",
        isFixable: false,
        sourcePack: types_1.BEET_PACKAGE,
        ts: "void"
      }
    };
  }
});

// ../../node_modules/@metaplex-foundation/mpl-auction-house/node_modules/@metaplex-foundation/beet/dist/cjs/src/beets/enums.js
var require_enums4 = __commonJS({
  "../../node_modules/@metaplex-foundation/mpl-auction-house/node_modules/@metaplex-foundation/beet/dist/cjs/src/beets/enums.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.enumsTypeMap = exports.dataEnum = exports.uniformDataEnum = exports.fixedScalarEnum = void 0;
    var types_1 = require_types13();
    var numbers_1 = require_numbers4();
    var assert_1 = require_assert();
    var struct_1 = require_struct4();
    var struct_fixable_1 = require_struct_fixable4();
    var unit_1 = require_unit2();
    function resolveEnumVariant(value, isNumVariant) {
      return isNumVariant ? `${value}` : value;
    }
    function fixedScalarEnum(enumType) {
      const keys = Object.keys(enumType);
      return {
        write(buf, offset, value) {
          const isNumVariant = typeof value === "number";
          const variantKey = resolveEnumVariant(value, isNumVariant);
          if (!keys.includes(variantKey)) {
            assert_1.strict.fail(`${value} should be a variant of the provided enum type, i.e. [ ${Object.values(enumType).join(", ")} ], but isn't`);
          }
          if (isNumVariant) {
            numbers_1.u8.write(buf, offset, value);
          } else {
            const enumValue = enumType[variantKey];
            numbers_1.u8.write(buf, offset, enumValue);
          }
        },
        read(buf, offset) {
          const value = numbers_1.u8.read(buf, offset);
          const isNumVariant = typeof value === "number";
          const variantKey = resolveEnumVariant(value, isNumVariant);
          if (!keys.includes(variantKey)) {
            assert_1.strict.fail(`${value} should be a of a variant of the provided enum type, i.e. [ ${Object.values(enumType).join(", ")} ], but isn't`);
          }
          return isNumVariant ? value : enumType[variantKey];
        },
        byteSize: numbers_1.u8.byteSize,
        description: "Enum"
      };
    }
    exports.fixedScalarEnum = fixedScalarEnum;
    function uniformDataEnum(inner) {
      return {
        write: function(buf, offset, value) {
          numbers_1.u8.write(buf, offset, value.kind);
          inner.write(buf, offset + 1, value.data);
        },
        read: function(buf, offset) {
          const kind = numbers_1.u8.read(buf, offset);
          const data = inner.read(buf, offset + 1);
          return { kind, data };
        },
        byteSize: 1 + inner.byteSize,
        description: `UniformDataEnum<${inner.description}>`
      };
    }
    exports.uniformDataEnum = uniformDataEnum;
    function enumDataVariantBeet(inner, discriminant, kind) {
      return {
        write(buf, offset, value) {
          numbers_1.u8.write(buf, offset, discriminant);
          inner.write(buf, offset + numbers_1.u8.byteSize, value);
        },
        read(buf, offset) {
          const val = inner.read(buf, offset + numbers_1.u8.byteSize);
          return __spreadValues({ __kind: kind }, val);
        },
        byteSize: inner.byteSize + numbers_1.u8.byteSize,
        description: `EnumData<${inner.description}>`
      };
    }
    function dataEnum(variants) {
      for (const [_, beet9] of variants) {
        (0, assert_1.strict)((0, struct_1.isBeetStruct)(beet9) || (0, struct_fixable_1.isFixableBeetStruct)(beet9) || // scalar variant
        beet9 === unit_1.unit, "dataEnum: variants must be a data beet struct or a scalar unit");
      }
      return {
        toFixedFromData(buf, offset) {
          const discriminant = numbers_1.u8.read(buf, offset);
          const variant = variants[discriminant];
          (0, assert_1.strict)(variant != null, `Discriminant ${discriminant} out of range for ${variants.length} variants`);
          const [__kind, dataBeet] = variant;
          const fixed = (0, types_1.isFixedSizeBeet)(dataBeet) ? dataBeet : dataBeet.toFixedFromData(buf, offset + 1);
          return enumDataVariantBeet(fixed, discriminant, __kind);
        },
        toFixedFromValue(val) {
          if (val.__kind == null) {
            const keys = Object.keys(val).join(", ");
            const validKinds = variants.map(([__kind2]) => __kind2).join(", ");
            assert_1.strict.fail(`Value with fields [ ${keys} ] is missing __kind, which needs to be set to one of [ ${validKinds} ]`);
          }
          const discriminant = variants.findIndex(([__kind2]) => __kind2 === val.__kind);
          if (discriminant < 0) {
            const validKinds = variants.map(([__kind2]) => __kind2).join(", ");
            assert_1.strict.fail(`${val.__kind} is not a valid kind, needs to be one of [ ${validKinds} ]`);
          }
          const variant = variants[discriminant];
          const _a = val, { __kind } = _a, dataValue = __objRest(_a, ["__kind"]);
          const [__variantKind, dataBeet] = variant;
          const fixed = (0, types_1.isFixedSizeBeet)(dataBeet) ? dataBeet : dataBeet.toFixedFromValue(dataValue);
          return enumDataVariantBeet(fixed, discriminant, __variantKind);
        },
        description: `DataEnum<${variants.length} variants>`
      };
    }
    exports.dataEnum = dataEnum;
    exports.enumsTypeMap = {
      fixedScalarEnum: {
        beet: "fixedScalarEnum",
        isFixable: false,
        sourcePack: types_1.BEET_PACKAGE,
        ts: "<TypeName>",
        arg: types_1.BEET_TYPE_ARG_INNER,
        pack: types_1.BEET_PACKAGE
      },
      dataEnum: {
        beet: "dataEnum",
        isFixable: false,
        sourcePack: types_1.BEET_PACKAGE,
        ts: "DataEnum<Kind, Inner>",
        arg: types_1.BEET_TYPE_ARG_INNER,
        pack: types_1.BEET_PACKAGE
      }
    };
  }
});

// ../../node_modules/@metaplex-foundation/mpl-auction-house/node_modules/@metaplex-foundation/beet/dist/cjs/src/beets/aliases.js
var require_aliases4 = __commonJS({
  "../../node_modules/@metaplex-foundation/mpl-auction-house/node_modules/@metaplex-foundation/beet/dist/cjs/src/beets/aliases.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.aliasesTypeMap = exports.bytes = void 0;
    var collections_1 = require_collections4();
    exports.bytes = collections_1.uint8Array;
    exports.aliasesTypeMap = {
      // @ts-ignore
      bytes: collections_1.collectionsTypeMap.Uint8Array
    };
  }
});

// ../../node_modules/@metaplex-foundation/mpl-auction-house/node_modules/@metaplex-foundation/beet/dist/cjs/src/beets/tuples.js
var require_tuples2 = __commonJS({
  "../../node_modules/@metaplex-foundation/mpl-auction-house/node_modules/@metaplex-foundation/beet/dist/cjs/src/beets/tuples.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.tuplesTypeMap = exports.tuple = exports.fixedSizeTuple = void 0;
    var types_1 = require_types13();
    var assert_1 = require_assert();
    var beet_fixable_1 = require_beet_fixable4();
    function fixedSizeTuple(elements) {
      const len = elements.length;
      const elDescs = elements.map((x) => x.description);
      const byteSizes = elements.map((x) => x.byteSize);
      const byteSize = byteSizes.reduce((acc, x) => acc + x, 0);
      return {
        write: function(buf, offset, value) {
          assert_1.strict.equal(value.length, len, `tuple value element size ${value.length} should match len ${len}`);
          let cursor = offset;
          for (let i = 0; i < len; i++) {
            const v = value[i];
            const beetEl = elements[i];
            beetEl.write(buf, cursor, v);
            cursor += beetEl.byteSize;
          }
        },
        read: function(buf, offset) {
          const els = [];
          let cursor = offset;
          for (let i = 0; i < len; i++) {
            const elBeet = elements[i];
            els[i] = elBeet.read(buf, cursor);
            cursor += elBeet.byteSize;
          }
          return els;
        },
        byteSize,
        length: len,
        description: `FixedSizeTuple<${elDescs.join(",")}>[ ${byteSizes.join(", ")} ]`
      };
    }
    exports.fixedSizeTuple = fixedSizeTuple;
    function tuple(elements) {
      const len = elements.length;
      const elDescs = elements.map((x) => x.description);
      return {
        toFixedFromData(buf, offset) {
          let cursor = offset;
          const fixedElements = new Array(len);
          for (let i = 0; i < len; i++) {
            const fixedElement = (0, beet_fixable_1.fixBeetFromData)(elements[i], buf, cursor);
            fixedElements[i] = fixedElement;
            cursor += fixedElement.byteSize;
          }
          return fixedSizeTuple(fixedElements);
        },
        toFixedFromValue(vals) {
          (0, assert_1.strict)(Array.isArray(vals), `${vals} should be an array of tuple values`);
          assert_1.strict.equal(vals.length, len, `There should be ${len} tuple values, but there are ${vals.length}`);
          const fixedElements = new Array(len);
          for (let i = 0; i < vals.length; i++) {
            const fixedElement = (0, beet_fixable_1.fixBeetFromValue)(elements[i], vals[i]);
            fixedElements[i] = fixedElement;
          }
          return fixedSizeTuple(fixedElements);
        },
        description: `Tuple<${elDescs.join(",")}>`
      };
    }
    exports.tuple = tuple;
    exports.tuplesTypeMap = {
      Tuple: {
        beet: "tuple",
        isFixable: true,
        sourcePack: types_1.BEET_PACKAGE,
        ts: "[__tuple_elements__]"
      },
      FixedSizeTuple: {
        beet: "fixedSizeTuple",
        isFixable: false,
        sourcePack: types_1.BEET_PACKAGE,
        ts: "[__tuple_elements__]"
      }
    };
  }
});

// ../../node_modules/@metaplex-foundation/mpl-auction-house/node_modules/@metaplex-foundation/beet/dist/cjs/src/beets/maps.js
var require_maps2 = __commonJS({
  "../../node_modules/@metaplex-foundation/mpl-auction-house/node_modules/@metaplex-foundation/beet/dist/cjs/src/beets/maps.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.mapsTypeMap = exports.map = void 0;
    var types_1 = require_types13();
    var numbers_1 = require_numbers4();
    var assert_1 = require_assert();
    function fixedSizeMap(keyElement, valElement, fixedElements, len) {
      const keyElementFixed = (0, types_1.isFixedSizeBeet)(keyElement);
      const valElementFixed = (0, types_1.isFixedSizeBeet)(valElement);
      function determineSizes() {
        if (keyElementFixed && valElementFixed) {
          const elementByteSize2 = keyElement.byteSize + valElement.byteSize;
          return {
            elementByteSize: elementByteSize2,
            byteSize: 4 + len * elementByteSize2
          };
        } else if (keyElementFixed) {
          let valsByteSize = 0;
          for (const [_, v] of fixedElements.values()) {
            valsByteSize += v.byteSize;
          }
          const elementByteSize2 = keyElement.byteSize + Math.ceil(valsByteSize / len);
          return {
            elementByteSize: elementByteSize2,
            byteSize: 4 + keyElement.byteSize * len + valsByteSize
          };
        } else if (valElementFixed) {
          let keysByteSize = 0;
          for (const [k, _] of fixedElements.values()) {
            keysByteSize += k.byteSize;
          }
          const elementByteSize2 = Math.ceil(keysByteSize / len) + valElement.byteSize;
          return {
            elementByteSize: elementByteSize2,
            byteSize: 4 + keysByteSize + valElement.byteSize * len
          };
        } else {
          let keysByteSize = 0;
          let valsByteSize = 0;
          for (const [k, v] of fixedElements.values()) {
            keysByteSize += k.byteSize;
            valsByteSize += v.byteSize;
          }
          const elementByteSize2 = Math.ceil(keysByteSize / len + valsByteSize / len);
          return {
            elementByteSize: elementByteSize2,
            byteSize: 4 + keysByteSize + valsByteSize
          };
        }
      }
      const { elementByteSize, byteSize } = determineSizes();
      return {
        write: function(buf, offset, map3) {
          let cursor = offset + 4;
          let size = 0;
          for (const [k, v] of map3.entries()) {
            let fixedKey = keyElementFixed ? keyElement : null;
            let fixedVal = valElementFixed ? valElement : null;
            if (fixedKey == null || fixedVal == null) {
              const els = fixedElements.get(k);
              (0, assert_1.strict)(els != null, `Should be able to find beet els for ${k.toString()}, but could not`);
              fixedKey !== null && fixedKey !== void 0 ? fixedKey : fixedKey = els[0];
              fixedVal !== null && fixedVal !== void 0 ? fixedVal : fixedVal = els[1];
            }
            fixedKey.write(buf, cursor, k);
            cursor += fixedKey.byteSize;
            fixedVal.write(buf, cursor, v);
            cursor += fixedVal.byteSize;
            size++;
          }
          numbers_1.u32.write(buf, offset, size);
          assert_1.strict.equal(size, len, `Expected map to have size ${len}, but has ${size}.`);
        },
        read: function(buf, offset) {
          const size = numbers_1.u32.read(buf, offset);
          assert_1.strict.equal(size, len, `Expected map to have size ${len}, but has ${size}.`);
          let cursor = offset + 4;
          const map3 = /* @__PURE__ */ new Map();
          for (let i = 0; i < size; i++) {
            const fixedKey = keyElementFixed ? keyElement : keyElement.toFixedFromData(buf, cursor);
            const k = fixedKey.read(buf, cursor);
            cursor += fixedKey.byteSize;
            const fixedVal = valElementFixed ? valElement : valElement.toFixedFromData(buf, cursor);
            const v = fixedVal.read(buf, cursor);
            cursor += fixedVal.byteSize;
            map3.set(k, v);
          }
          return map3;
        },
        elementByteSize,
        byteSize,
        length: len,
        lenPrefixByteSize: 4,
        description: `Map<${keyElement.description}, ${valElement.description}>`
      };
    }
    function map2(keyElement, valElement) {
      const keyIsFixed = (0, types_1.isFixedSizeBeet)(keyElement);
      const valIsFixed = (0, types_1.isFixedSizeBeet)(valElement);
      return {
        toFixedFromData(buf, offset) {
          const len = numbers_1.u32.read(buf, offset);
          let cursor = offset + 4;
          if (keyIsFixed && valIsFixed) {
            return fixedSizeMap(keyElement, valElement, /* @__PURE__ */ new Map(), len);
          }
          const fixedBeets = /* @__PURE__ */ new Map();
          for (let i = 0; i < len; i++) {
            const keyFixed = keyIsFixed ? keyElement : keyElement.toFixedFromData(buf, cursor);
            const key = keyFixed.read(buf, cursor);
            cursor += keyFixed.byteSize;
            const valFixed = valIsFixed ? valElement : valElement.toFixedFromData(buf, cursor);
            cursor += valFixed.byteSize;
            fixedBeets.set(key, [keyFixed, valFixed]);
          }
          return fixedSizeMap(keyElement, valElement, fixedBeets, len);
        },
        toFixedFromValue(mapVal) {
          const len = mapVal.size;
          if (keyIsFixed && valIsFixed) {
            return fixedSizeMap(keyElement, valElement, /* @__PURE__ */ new Map(), len);
          }
          const fixedBeets = /* @__PURE__ */ new Map();
          for (const [k, v] of mapVal) {
            const keyFixed = keyIsFixed ? keyElement : keyElement.toFixedFromValue(k);
            const valFixed = valIsFixed ? valElement : valElement.toFixedFromValue(v);
            fixedBeets.set(k, [keyFixed, valFixed]);
          }
          return fixedSizeMap(keyElement, valElement, fixedBeets, len);
        },
        description: `FixableMap<${keyElement.description}, ${valElement.description}>`
      };
    }
    exports.map = map2;
    exports.mapsTypeMap = {
      Map: {
        beet: "map",
        isFixable: true,
        sourcePack: types_1.BEET_PACKAGE,
        ts: "Map"
      }
    };
  }
});

// ../../node_modules/@metaplex-foundation/mpl-auction-house/node_modules/@metaplex-foundation/beet/dist/cjs/src/beet.js
var require_beet4 = __commonJS({
  "../../node_modules/@metaplex-foundation/mpl-auction-house/node_modules/@metaplex-foundation/beet/dist/cjs/src/beet.js"(exports) {
    "use strict";
    var __createBinding = exports && exports.__createBinding || (Object.create ? function(o2, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      var desc = Object.getOwnPropertyDescriptor(m, k);
      if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m[k];
        } };
      }
      Object.defineProperty(o2, k2, desc);
    } : function(o2, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      o2[k2] = m[k];
    });
    var __exportStar = exports && exports.__exportStar || function(m, exports2) {
      for (var p in m)
        if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports2, p))
          __createBinding(exports2, m, p);
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.supportedTypeMap = void 0;
    var collections_1 = require_collections4();
    var composites_1 = require_composites4();
    var numbers_1 = require_numbers4();
    var string_1 = require_string4();
    var enums_1 = require_enums4();
    var aliases_1 = require_aliases4();
    var tuples_1 = require_tuples2();
    var maps_1 = require_maps2();
    var unit_1 = require_unit2();
    __exportStar(require_aliases4(), exports);
    __exportStar(require_collections4(), exports);
    __exportStar(require_composites4(), exports);
    __exportStar(require_enums4(), exports);
    __exportStar(require_maps2(), exports);
    __exportStar(require_numbers4(), exports);
    __exportStar(require_string4(), exports);
    __exportStar(require_tuples2(), exports);
    __exportStar(require_unit2(), exports);
    __exportStar(require_beet_fixable4(), exports);
    __exportStar(require_read_write4(), exports);
    __exportStar(require_struct4(), exports);
    __exportStar(require_struct_fixable4(), exports);
    __exportStar(require_types13(), exports);
    exports.supportedTypeMap = __spreadValues(__spreadValues(__spreadValues(__spreadValues(__spreadValues(__spreadValues(__spreadValues(__spreadValues(__spreadValues({}, collections_1.collectionsTypeMap), string_1.stringTypeMap), composites_1.compositesTypeMap), enums_1.enumsTypeMap), numbers_1.numbersTypeMap), aliases_1.aliasesTypeMap), tuples_1.tuplesTypeMap), maps_1.mapsTypeMap), unit_1.unitTypeMap);
  }
});

// ../../node_modules/@metaplex-foundation/mpl-auction-house/dist/src/generated/accounts/AuctionHouse.js
var require_AuctionHouse = __commonJS({
  "../../node_modules/@metaplex-foundation/mpl-auction-house/dist/src/generated/accounts/AuctionHouse.js"(exports) {
    "use strict";
    var __createBinding = exports && exports.__createBinding || (Object.create ? function(o2, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      var desc = Object.getOwnPropertyDescriptor(m, k);
      if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m[k];
        } };
      }
      Object.defineProperty(o2, k2, desc);
    } : function(o2, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      o2[k2] = m[k];
    });
    var __setModuleDefault = exports && exports.__setModuleDefault || (Object.create ? function(o2, v) {
      Object.defineProperty(o2, "default", { enumerable: true, value: v });
    } : function(o2, v) {
      o2["default"] = v;
    });
    var __importStar = exports && exports.__importStar || function(mod) {
      if (mod && mod.__esModule)
        return mod;
      var result = {};
      if (mod != null) {
        for (var k in mod)
          if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k))
            __createBinding(result, mod, k);
      }
      __setModuleDefault(result, mod);
      return result;
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.auctionHouseBeet = exports.AuctionHouse = exports.auctionHouseDiscriminator = void 0;
    var web3 = __importStar((init_index_browser_esm(), __toCommonJS(index_browser_esm_exports)));
    var beetSolana = __importStar(require_beet_solana5());
    var beet9 = __importStar(require_beet4());
    exports.auctionHouseDiscriminator = [40, 108, 215, 107, 213, 85, 245, 48];
    var AuctionHouse2 = class _AuctionHouse {
      constructor(auctionHouseFeeAccount, auctionHouseTreasury, treasuryWithdrawalDestination, feeWithdrawalDestination, treasuryMint, authority, creator, bump, treasuryBump, feePayerBump, sellerFeeBasisPoints, requiresSignOff, canChangeSalePrice, escrowPaymentBump, hasAuctioneer, auctioneerAddress, scopes) {
        this.auctionHouseFeeAccount = auctionHouseFeeAccount;
        this.auctionHouseTreasury = auctionHouseTreasury;
        this.treasuryWithdrawalDestination = treasuryWithdrawalDestination;
        this.feeWithdrawalDestination = feeWithdrawalDestination;
        this.treasuryMint = treasuryMint;
        this.authority = authority;
        this.creator = creator;
        this.bump = bump;
        this.treasuryBump = treasuryBump;
        this.feePayerBump = feePayerBump;
        this.sellerFeeBasisPoints = sellerFeeBasisPoints;
        this.requiresSignOff = requiresSignOff;
        this.canChangeSalePrice = canChangeSalePrice;
        this.escrowPaymentBump = escrowPaymentBump;
        this.hasAuctioneer = hasAuctioneer;
        this.auctioneerAddress = auctioneerAddress;
        this.scopes = scopes;
      }
      static fromArgs(args) {
        return new _AuctionHouse(args.auctionHouseFeeAccount, args.auctionHouseTreasury, args.treasuryWithdrawalDestination, args.feeWithdrawalDestination, args.treasuryMint, args.authority, args.creator, args.bump, args.treasuryBump, args.feePayerBump, args.sellerFeeBasisPoints, args.requiresSignOff, args.canChangeSalePrice, args.escrowPaymentBump, args.hasAuctioneer, args.auctioneerAddress, args.scopes);
      }
      static fromAccountInfo(accountInfo, offset = 0) {
        return _AuctionHouse.deserialize(accountInfo.data, offset);
      }
      static fromAccountAddress(connection, address) {
        return __async(this, null, function* () {
          const accountInfo = yield connection.getAccountInfo(address);
          if (accountInfo == null) {
            throw new Error(`Unable to find AuctionHouse account at ${address}`);
          }
          return _AuctionHouse.fromAccountInfo(accountInfo, 0)[0];
        });
      }
      static gpaBuilder(programId = new web3.PublicKey("hausS13jsjafwWwGqZTUQRmWyvyxn9EQpqMwV1PBBmk")) {
        return beetSolana.GpaBuilder.fromStruct(programId, exports.auctionHouseBeet);
      }
      static deserialize(buf, offset = 0) {
        return exports.auctionHouseBeet.deserialize(buf, offset);
      }
      serialize() {
        return exports.auctionHouseBeet.serialize(__spreadValues({
          accountDiscriminator: exports.auctionHouseDiscriminator
        }, this));
      }
      static get byteSize() {
        return exports.auctionHouseBeet.byteSize;
      }
      static getMinimumBalanceForRentExemption(connection, commitment) {
        return __async(this, null, function* () {
          return connection.getMinimumBalanceForRentExemption(_AuctionHouse.byteSize, commitment);
        });
      }
      static hasCorrectByteSize(buf, offset = 0) {
        return buf.byteLength - offset === _AuctionHouse.byteSize;
      }
      pretty() {
        return {
          auctionHouseFeeAccount: this.auctionHouseFeeAccount.toBase58(),
          auctionHouseTreasury: this.auctionHouseTreasury.toBase58(),
          treasuryWithdrawalDestination: this.treasuryWithdrawalDestination.toBase58(),
          feeWithdrawalDestination: this.feeWithdrawalDestination.toBase58(),
          treasuryMint: this.treasuryMint.toBase58(),
          authority: this.authority.toBase58(),
          creator: this.creator.toBase58(),
          bump: this.bump,
          treasuryBump: this.treasuryBump,
          feePayerBump: this.feePayerBump,
          sellerFeeBasisPoints: this.sellerFeeBasisPoints,
          requiresSignOff: this.requiresSignOff,
          canChangeSalePrice: this.canChangeSalePrice,
          escrowPaymentBump: this.escrowPaymentBump,
          hasAuctioneer: this.hasAuctioneer,
          auctioneerAddress: this.auctioneerAddress.toBase58(),
          scopes: this.scopes
        };
      }
    };
    exports.AuctionHouse = AuctionHouse2;
    exports.auctionHouseBeet = new beet9.BeetStruct([
      ["accountDiscriminator", beet9.uniformFixedSizeArray(beet9.u8, 8)],
      ["auctionHouseFeeAccount", beetSolana.publicKey],
      ["auctionHouseTreasury", beetSolana.publicKey],
      ["treasuryWithdrawalDestination", beetSolana.publicKey],
      ["feeWithdrawalDestination", beetSolana.publicKey],
      ["treasuryMint", beetSolana.publicKey],
      ["authority", beetSolana.publicKey],
      ["creator", beetSolana.publicKey],
      ["bump", beet9.u8],
      ["treasuryBump", beet9.u8],
      ["feePayerBump", beet9.u8],
      ["sellerFeeBasisPoints", beet9.u16],
      ["requiresSignOff", beet9.bool],
      ["canChangeSalePrice", beet9.bool],
      ["escrowPaymentBump", beet9.u8],
      ["hasAuctioneer", beet9.bool],
      ["auctioneerAddress", beetSolana.publicKey],
      ["scopes", beet9.uniformFixedSizeArray(beet9.bool, 7)]
    ], AuctionHouse2.fromArgs, "AuctionHouse");
  }
});

// ../../node_modules/@metaplex-foundation/mpl-auction-house/dist/src/generated/accounts/Auctioneer.js
var require_Auctioneer = __commonJS({
  "../../node_modules/@metaplex-foundation/mpl-auction-house/dist/src/generated/accounts/Auctioneer.js"(exports) {
    "use strict";
    var __createBinding = exports && exports.__createBinding || (Object.create ? function(o2, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      var desc = Object.getOwnPropertyDescriptor(m, k);
      if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m[k];
        } };
      }
      Object.defineProperty(o2, k2, desc);
    } : function(o2, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      o2[k2] = m[k];
    });
    var __setModuleDefault = exports && exports.__setModuleDefault || (Object.create ? function(o2, v) {
      Object.defineProperty(o2, "default", { enumerable: true, value: v });
    } : function(o2, v) {
      o2["default"] = v;
    });
    var __importStar = exports && exports.__importStar || function(mod) {
      if (mod && mod.__esModule)
        return mod;
      var result = {};
      if (mod != null) {
        for (var k in mod)
          if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k))
            __createBinding(result, mod, k);
      }
      __setModuleDefault(result, mod);
      return result;
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.auctioneerBeet = exports.Auctioneer = exports.auctioneerDiscriminator = void 0;
    var web3 = __importStar((init_index_browser_esm(), __toCommonJS(index_browser_esm_exports)));
    var beetSolana = __importStar(require_beet_solana5());
    var beet9 = __importStar(require_beet4());
    exports.auctioneerDiscriminator = [46, 101, 92, 150, 138, 30, 245, 120];
    var Auctioneer2 = class _Auctioneer {
      constructor(auctioneerAuthority, auctionHouse, bump) {
        this.auctioneerAuthority = auctioneerAuthority;
        this.auctionHouse = auctionHouse;
        this.bump = bump;
      }
      static fromArgs(args) {
        return new _Auctioneer(args.auctioneerAuthority, args.auctionHouse, args.bump);
      }
      static fromAccountInfo(accountInfo, offset = 0) {
        return _Auctioneer.deserialize(accountInfo.data, offset);
      }
      static fromAccountAddress(connection, address) {
        return __async(this, null, function* () {
          const accountInfo = yield connection.getAccountInfo(address);
          if (accountInfo == null) {
            throw new Error(`Unable to find Auctioneer account at ${address}`);
          }
          return _Auctioneer.fromAccountInfo(accountInfo, 0)[0];
        });
      }
      static gpaBuilder(programId = new web3.PublicKey("hausS13jsjafwWwGqZTUQRmWyvyxn9EQpqMwV1PBBmk")) {
        return beetSolana.GpaBuilder.fromStruct(programId, exports.auctioneerBeet);
      }
      static deserialize(buf, offset = 0) {
        return exports.auctioneerBeet.deserialize(buf, offset);
      }
      serialize() {
        return exports.auctioneerBeet.serialize(__spreadValues({
          accountDiscriminator: exports.auctioneerDiscriminator
        }, this));
      }
      static get byteSize() {
        return exports.auctioneerBeet.byteSize;
      }
      static getMinimumBalanceForRentExemption(connection, commitment) {
        return __async(this, null, function* () {
          return connection.getMinimumBalanceForRentExemption(_Auctioneer.byteSize, commitment);
        });
      }
      static hasCorrectByteSize(buf, offset = 0) {
        return buf.byteLength - offset === _Auctioneer.byteSize;
      }
      pretty() {
        return {
          auctioneerAuthority: this.auctioneerAuthority.toBase58(),
          auctionHouse: this.auctionHouse.toBase58(),
          bump: this.bump
        };
      }
    };
    exports.Auctioneer = Auctioneer2;
    exports.auctioneerBeet = new beet9.BeetStruct([
      ["accountDiscriminator", beet9.uniformFixedSizeArray(beet9.u8, 8)],
      ["auctioneerAuthority", beetSolana.publicKey],
      ["auctionHouse", beetSolana.publicKey],
      ["bump", beet9.u8]
    ], Auctioneer2.fromArgs, "Auctioneer");
  }
});

// ../../node_modules/@metaplex-foundation/mpl-auction-house/dist/src/generated/accounts/BidReceipt.js
var require_BidReceipt = __commonJS({
  "../../node_modules/@metaplex-foundation/mpl-auction-house/dist/src/generated/accounts/BidReceipt.js"(exports) {
    "use strict";
    var __createBinding = exports && exports.__createBinding || (Object.create ? function(o2, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      var desc = Object.getOwnPropertyDescriptor(m, k);
      if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m[k];
        } };
      }
      Object.defineProperty(o2, k2, desc);
    } : function(o2, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      o2[k2] = m[k];
    });
    var __setModuleDefault = exports && exports.__setModuleDefault || (Object.create ? function(o2, v) {
      Object.defineProperty(o2, "default", { enumerable: true, value: v });
    } : function(o2, v) {
      o2["default"] = v;
    });
    var __importStar = exports && exports.__importStar || function(mod) {
      if (mod && mod.__esModule)
        return mod;
      var result = {};
      if (mod != null) {
        for (var k in mod)
          if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k))
            __createBinding(result, mod, k);
      }
      __setModuleDefault(result, mod);
      return result;
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.bidReceiptBeet = exports.BidReceipt = exports.bidReceiptDiscriminator = void 0;
    var web3 = __importStar((init_index_browser_esm(), __toCommonJS(index_browser_esm_exports)));
    var beet9 = __importStar(require_beet4());
    var beetSolana = __importStar(require_beet_solana5());
    exports.bidReceiptDiscriminator = [186, 150, 141, 135, 59, 122, 39, 99];
    var BidReceipt2 = class _BidReceipt {
      constructor(tradeState, bookkeeper, auctionHouse, buyer, metadata, tokenAccount, purchaseReceipt, price, tokenSize, bump, tradeStateBump, createdAt, canceledAt) {
        this.tradeState = tradeState;
        this.bookkeeper = bookkeeper;
        this.auctionHouse = auctionHouse;
        this.buyer = buyer;
        this.metadata = metadata;
        this.tokenAccount = tokenAccount;
        this.purchaseReceipt = purchaseReceipt;
        this.price = price;
        this.tokenSize = tokenSize;
        this.bump = bump;
        this.tradeStateBump = tradeStateBump;
        this.createdAt = createdAt;
        this.canceledAt = canceledAt;
      }
      static fromArgs(args) {
        return new _BidReceipt(args.tradeState, args.bookkeeper, args.auctionHouse, args.buyer, args.metadata, args.tokenAccount, args.purchaseReceipt, args.price, args.tokenSize, args.bump, args.tradeStateBump, args.createdAt, args.canceledAt);
      }
      static fromAccountInfo(accountInfo, offset = 0) {
        return _BidReceipt.deserialize(accountInfo.data, offset);
      }
      static fromAccountAddress(connection, address) {
        return __async(this, null, function* () {
          const accountInfo = yield connection.getAccountInfo(address);
          if (accountInfo == null) {
            throw new Error(`Unable to find BidReceipt account at ${address}`);
          }
          return _BidReceipt.fromAccountInfo(accountInfo, 0)[0];
        });
      }
      static gpaBuilder(programId = new web3.PublicKey("hausS13jsjafwWwGqZTUQRmWyvyxn9EQpqMwV1PBBmk")) {
        return beetSolana.GpaBuilder.fromStruct(programId, exports.bidReceiptBeet);
      }
      static deserialize(buf, offset = 0) {
        return exports.bidReceiptBeet.deserialize(buf, offset);
      }
      serialize() {
        return exports.bidReceiptBeet.serialize(__spreadValues({
          accountDiscriminator: exports.bidReceiptDiscriminator
        }, this));
      }
      static byteSize(args) {
        const instance = _BidReceipt.fromArgs(args);
        return exports.bidReceiptBeet.toFixedFromValue(__spreadValues({
          accountDiscriminator: exports.bidReceiptDiscriminator
        }, instance)).byteSize;
      }
      static getMinimumBalanceForRentExemption(args, connection, commitment) {
        return __async(this, null, function* () {
          return connection.getMinimumBalanceForRentExemption(_BidReceipt.byteSize(args), commitment);
        });
      }
      pretty() {
        return {
          tradeState: this.tradeState.toBase58(),
          bookkeeper: this.bookkeeper.toBase58(),
          auctionHouse: this.auctionHouse.toBase58(),
          buyer: this.buyer.toBase58(),
          metadata: this.metadata.toBase58(),
          tokenAccount: this.tokenAccount,
          purchaseReceipt: this.purchaseReceipt,
          price: (() => {
            const x = this.price;
            if (typeof x.toNumber === "function") {
              try {
                return x.toNumber();
              } catch (_) {
                return x;
              }
            }
            return x;
          })(),
          tokenSize: (() => {
            const x = this.tokenSize;
            if (typeof x.toNumber === "function") {
              try {
                return x.toNumber();
              } catch (_) {
                return x;
              }
            }
            return x;
          })(),
          bump: this.bump,
          tradeStateBump: this.tradeStateBump,
          createdAt: (() => {
            const x = this.createdAt;
            if (typeof x.toNumber === "function") {
              try {
                return x.toNumber();
              } catch (_) {
                return x;
              }
            }
            return x;
          })(),
          canceledAt: this.canceledAt
        };
      }
    };
    exports.BidReceipt = BidReceipt2;
    exports.bidReceiptBeet = new beet9.FixableBeetStruct([
      ["accountDiscriminator", beet9.uniformFixedSizeArray(beet9.u8, 8)],
      ["tradeState", beetSolana.publicKey],
      ["bookkeeper", beetSolana.publicKey],
      ["auctionHouse", beetSolana.publicKey],
      ["buyer", beetSolana.publicKey],
      ["metadata", beetSolana.publicKey],
      ["tokenAccount", beet9.coption(beetSolana.publicKey)],
      ["purchaseReceipt", beet9.coption(beetSolana.publicKey)],
      ["price", beet9.u64],
      ["tokenSize", beet9.u64],
      ["bump", beet9.u8],
      ["tradeStateBump", beet9.u8],
      ["createdAt", beet9.i64],
      ["canceledAt", beet9.coption(beet9.i64)]
    ], BidReceipt2.fromArgs, "BidReceipt");
  }
});

// ../../node_modules/@metaplex-foundation/mpl-auction-house/dist/src/generated/accounts/ListingReceipt.js
var require_ListingReceipt = __commonJS({
  "../../node_modules/@metaplex-foundation/mpl-auction-house/dist/src/generated/accounts/ListingReceipt.js"(exports) {
    "use strict";
    var __createBinding = exports && exports.__createBinding || (Object.create ? function(o2, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      var desc = Object.getOwnPropertyDescriptor(m, k);
      if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m[k];
        } };
      }
      Object.defineProperty(o2, k2, desc);
    } : function(o2, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      o2[k2] = m[k];
    });
    var __setModuleDefault = exports && exports.__setModuleDefault || (Object.create ? function(o2, v) {
      Object.defineProperty(o2, "default", { enumerable: true, value: v });
    } : function(o2, v) {
      o2["default"] = v;
    });
    var __importStar = exports && exports.__importStar || function(mod) {
      if (mod && mod.__esModule)
        return mod;
      var result = {};
      if (mod != null) {
        for (var k in mod)
          if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k))
            __createBinding(result, mod, k);
      }
      __setModuleDefault(result, mod);
      return result;
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.listingReceiptBeet = exports.ListingReceipt = exports.listingReceiptDiscriminator = void 0;
    var web3 = __importStar((init_index_browser_esm(), __toCommonJS(index_browser_esm_exports)));
    var beet9 = __importStar(require_beet4());
    var beetSolana = __importStar(require_beet_solana5());
    exports.listingReceiptDiscriminator = [240, 71, 225, 94, 200, 75, 84, 231];
    var ListingReceipt2 = class _ListingReceipt {
      constructor(tradeState, bookkeeper, auctionHouse, seller, metadata, purchaseReceipt, price, tokenSize, bump, tradeStateBump, createdAt, canceledAt) {
        this.tradeState = tradeState;
        this.bookkeeper = bookkeeper;
        this.auctionHouse = auctionHouse;
        this.seller = seller;
        this.metadata = metadata;
        this.purchaseReceipt = purchaseReceipt;
        this.price = price;
        this.tokenSize = tokenSize;
        this.bump = bump;
        this.tradeStateBump = tradeStateBump;
        this.createdAt = createdAt;
        this.canceledAt = canceledAt;
      }
      static fromArgs(args) {
        return new _ListingReceipt(args.tradeState, args.bookkeeper, args.auctionHouse, args.seller, args.metadata, args.purchaseReceipt, args.price, args.tokenSize, args.bump, args.tradeStateBump, args.createdAt, args.canceledAt);
      }
      static fromAccountInfo(accountInfo, offset = 0) {
        return _ListingReceipt.deserialize(accountInfo.data, offset);
      }
      static fromAccountAddress(connection, address) {
        return __async(this, null, function* () {
          const accountInfo = yield connection.getAccountInfo(address);
          if (accountInfo == null) {
            throw new Error(`Unable to find ListingReceipt account at ${address}`);
          }
          return _ListingReceipt.fromAccountInfo(accountInfo, 0)[0];
        });
      }
      static gpaBuilder(programId = new web3.PublicKey("hausS13jsjafwWwGqZTUQRmWyvyxn9EQpqMwV1PBBmk")) {
        return beetSolana.GpaBuilder.fromStruct(programId, exports.listingReceiptBeet);
      }
      static deserialize(buf, offset = 0) {
        return exports.listingReceiptBeet.deserialize(buf, offset);
      }
      serialize() {
        return exports.listingReceiptBeet.serialize(__spreadValues({
          accountDiscriminator: exports.listingReceiptDiscriminator
        }, this));
      }
      static byteSize(args) {
        const instance = _ListingReceipt.fromArgs(args);
        return exports.listingReceiptBeet.toFixedFromValue(__spreadValues({
          accountDiscriminator: exports.listingReceiptDiscriminator
        }, instance)).byteSize;
      }
      static getMinimumBalanceForRentExemption(args, connection, commitment) {
        return __async(this, null, function* () {
          return connection.getMinimumBalanceForRentExemption(_ListingReceipt.byteSize(args), commitment);
        });
      }
      pretty() {
        return {
          tradeState: this.tradeState.toBase58(),
          bookkeeper: this.bookkeeper.toBase58(),
          auctionHouse: this.auctionHouse.toBase58(),
          seller: this.seller.toBase58(),
          metadata: this.metadata.toBase58(),
          purchaseReceipt: this.purchaseReceipt,
          price: (() => {
            const x = this.price;
            if (typeof x.toNumber === "function") {
              try {
                return x.toNumber();
              } catch (_) {
                return x;
              }
            }
            return x;
          })(),
          tokenSize: (() => {
            const x = this.tokenSize;
            if (typeof x.toNumber === "function") {
              try {
                return x.toNumber();
              } catch (_) {
                return x;
              }
            }
            return x;
          })(),
          bump: this.bump,
          tradeStateBump: this.tradeStateBump,
          createdAt: (() => {
            const x = this.createdAt;
            if (typeof x.toNumber === "function") {
              try {
                return x.toNumber();
              } catch (_) {
                return x;
              }
            }
            return x;
          })(),
          canceledAt: this.canceledAt
        };
      }
    };
    exports.ListingReceipt = ListingReceipt2;
    exports.listingReceiptBeet = new beet9.FixableBeetStruct([
      ["accountDiscriminator", beet9.uniformFixedSizeArray(beet9.u8, 8)],
      ["tradeState", beetSolana.publicKey],
      ["bookkeeper", beetSolana.publicKey],
      ["auctionHouse", beetSolana.publicKey],
      ["seller", beetSolana.publicKey],
      ["metadata", beetSolana.publicKey],
      ["purchaseReceipt", beet9.coption(beetSolana.publicKey)],
      ["price", beet9.u64],
      ["tokenSize", beet9.u64],
      ["bump", beet9.u8],
      ["tradeStateBump", beet9.u8],
      ["createdAt", beet9.i64],
      ["canceledAt", beet9.coption(beet9.i64)]
    ], ListingReceipt2.fromArgs, "ListingReceipt");
  }
});

// ../../node_modules/@metaplex-foundation/mpl-auction-house/dist/src/generated/accounts/PurchaseReceipt.js
var require_PurchaseReceipt = __commonJS({
  "../../node_modules/@metaplex-foundation/mpl-auction-house/dist/src/generated/accounts/PurchaseReceipt.js"(exports) {
    "use strict";
    var __createBinding = exports && exports.__createBinding || (Object.create ? function(o2, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      var desc = Object.getOwnPropertyDescriptor(m, k);
      if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m[k];
        } };
      }
      Object.defineProperty(o2, k2, desc);
    } : function(o2, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      o2[k2] = m[k];
    });
    var __setModuleDefault = exports && exports.__setModuleDefault || (Object.create ? function(o2, v) {
      Object.defineProperty(o2, "default", { enumerable: true, value: v });
    } : function(o2, v) {
      o2["default"] = v;
    });
    var __importStar = exports && exports.__importStar || function(mod) {
      if (mod && mod.__esModule)
        return mod;
      var result = {};
      if (mod != null) {
        for (var k in mod)
          if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k))
            __createBinding(result, mod, k);
      }
      __setModuleDefault(result, mod);
      return result;
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.purchaseReceiptBeet = exports.PurchaseReceipt = exports.purchaseReceiptDiscriminator = void 0;
    var web3 = __importStar((init_index_browser_esm(), __toCommonJS(index_browser_esm_exports)));
    var beet9 = __importStar(require_beet4());
    var beetSolana = __importStar(require_beet_solana5());
    exports.purchaseReceiptDiscriminator = [79, 127, 222, 137, 154, 131, 150, 134];
    var PurchaseReceipt2 = class _PurchaseReceipt {
      constructor(bookkeeper, buyer, seller, auctionHouse, metadata, tokenSize, price, bump, createdAt) {
        this.bookkeeper = bookkeeper;
        this.buyer = buyer;
        this.seller = seller;
        this.auctionHouse = auctionHouse;
        this.metadata = metadata;
        this.tokenSize = tokenSize;
        this.price = price;
        this.bump = bump;
        this.createdAt = createdAt;
      }
      static fromArgs(args) {
        return new _PurchaseReceipt(args.bookkeeper, args.buyer, args.seller, args.auctionHouse, args.metadata, args.tokenSize, args.price, args.bump, args.createdAt);
      }
      static fromAccountInfo(accountInfo, offset = 0) {
        return _PurchaseReceipt.deserialize(accountInfo.data, offset);
      }
      static fromAccountAddress(connection, address) {
        return __async(this, null, function* () {
          const accountInfo = yield connection.getAccountInfo(address);
          if (accountInfo == null) {
            throw new Error(`Unable to find PurchaseReceipt account at ${address}`);
          }
          return _PurchaseReceipt.fromAccountInfo(accountInfo, 0)[0];
        });
      }
      static gpaBuilder(programId = new web3.PublicKey("hausS13jsjafwWwGqZTUQRmWyvyxn9EQpqMwV1PBBmk")) {
        return beetSolana.GpaBuilder.fromStruct(programId, exports.purchaseReceiptBeet);
      }
      static deserialize(buf, offset = 0) {
        return exports.purchaseReceiptBeet.deserialize(buf, offset);
      }
      serialize() {
        return exports.purchaseReceiptBeet.serialize(__spreadValues({
          accountDiscriminator: exports.purchaseReceiptDiscriminator
        }, this));
      }
      static get byteSize() {
        return exports.purchaseReceiptBeet.byteSize;
      }
      static getMinimumBalanceForRentExemption(connection, commitment) {
        return __async(this, null, function* () {
          return connection.getMinimumBalanceForRentExemption(_PurchaseReceipt.byteSize, commitment);
        });
      }
      static hasCorrectByteSize(buf, offset = 0) {
        return buf.byteLength - offset === _PurchaseReceipt.byteSize;
      }
      pretty() {
        return {
          bookkeeper: this.bookkeeper.toBase58(),
          buyer: this.buyer.toBase58(),
          seller: this.seller.toBase58(),
          auctionHouse: this.auctionHouse.toBase58(),
          metadata: this.metadata.toBase58(),
          tokenSize: (() => {
            const x = this.tokenSize;
            if (typeof x.toNumber === "function") {
              try {
                return x.toNumber();
              } catch (_) {
                return x;
              }
            }
            return x;
          })(),
          price: (() => {
            const x = this.price;
            if (typeof x.toNumber === "function") {
              try {
                return x.toNumber();
              } catch (_) {
                return x;
              }
            }
            return x;
          })(),
          bump: this.bump,
          createdAt: (() => {
            const x = this.createdAt;
            if (typeof x.toNumber === "function") {
              try {
                return x.toNumber();
              } catch (_) {
                return x;
              }
            }
            return x;
          })()
        };
      }
    };
    exports.PurchaseReceipt = PurchaseReceipt2;
    exports.purchaseReceiptBeet = new beet9.BeetStruct([
      ["accountDiscriminator", beet9.uniformFixedSizeArray(beet9.u8, 8)],
      ["bookkeeper", beetSolana.publicKey],
      ["buyer", beetSolana.publicKey],
      ["seller", beetSolana.publicKey],
      ["auctionHouse", beetSolana.publicKey],
      ["metadata", beetSolana.publicKey],
      ["tokenSize", beet9.u64],
      ["price", beet9.u64],
      ["bump", beet9.u8],
      ["createdAt", beet9.i64]
    ], PurchaseReceipt2.fromArgs, "PurchaseReceipt");
  }
});

// ../../node_modules/@metaplex-foundation/mpl-auction-house/dist/src/generated/accounts/index.js
var require_accounts7 = __commonJS({
  "../../node_modules/@metaplex-foundation/mpl-auction-house/dist/src/generated/accounts/index.js"(exports) {
    "use strict";
    var __createBinding = exports && exports.__createBinding || (Object.create ? function(o2, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      var desc = Object.getOwnPropertyDescriptor(m, k);
      if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m[k];
        } };
      }
      Object.defineProperty(o2, k2, desc);
    } : function(o2, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      o2[k2] = m[k];
    });
    var __exportStar = exports && exports.__exportStar || function(m, exports2) {
      for (var p in m)
        if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports2, p))
          __createBinding(exports2, m, p);
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.accountProviders = void 0;
    __exportStar(require_AuctionHouse(), exports);
    __exportStar(require_Auctioneer(), exports);
    __exportStar(require_BidReceipt(), exports);
    __exportStar(require_ListingReceipt(), exports);
    __exportStar(require_PurchaseReceipt(), exports);
    var BidReceipt_1 = require_BidReceipt();
    var ListingReceipt_1 = require_ListingReceipt();
    var PurchaseReceipt_1 = require_PurchaseReceipt();
    var AuctionHouse_1 = require_AuctionHouse();
    var Auctioneer_1 = require_Auctioneer();
    exports.accountProviders = {
      BidReceipt: BidReceipt_1.BidReceipt,
      ListingReceipt: ListingReceipt_1.ListingReceipt,
      PurchaseReceipt: PurchaseReceipt_1.PurchaseReceipt,
      AuctionHouse: AuctionHouse_1.AuctionHouse,
      Auctioneer: Auctioneer_1.Auctioneer
    };
  }
});

// ../../node_modules/@metaplex-foundation/mpl-auction-house/dist/src/generated/errors/index.js
var require_errors15 = __commonJS({
  "../../node_modules/@metaplex-foundation/mpl-auction-house/dist/src/generated/errors/index.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.errorFromName = exports.errorFromCode = exports.SaleRequiresExactlyOneSignerError = exports.InsufficientFundsError = exports.AuctioneerAuthorityMismatchError = exports.AuctionHouseAlreadyDelegatedError = exports.PartialPriceMismatchError = exports.NotEnoughTokensAvailableForPurchaseError = exports.MissingElementForPartialOrderError = exports.BuyerTradeStateNotValidError = exports.InvalidSeedsOrAuctionHouseNotDelegatedError = exports.EscrowUnderRentExemptionError = exports.BumpSeedNotInHashMapError = exports.AuctionHouseNotDelegatedError = exports.TooManyScopesError = exports.NoAuctioneerProgramSetError = exports.MustUseAuctioneerHandlerError = exports.MissingAuctioneerScopeError = exports.InvalidAuctioneerError = exports.InstructionMismatchError = exports.ReceiptIsEmptyError = exports.TradeStateIsNotEmptyError = exports.TradeStateDoesntExistError = exports.InvalidBasisPointsError = exports.NoValidSignerPresentError = exports.BuyerATACannotHaveDelegateError = exports.SellerATACannotHaveDelegateError = exports.OldSellerNotInitializedError = exports.SaleRequiresSignerError = exports.CannotMatchFreeSalesWithoutAuctionHouseOrSellerSignoffError = exports.BothPartiesNeedToAgreeToSaleError = exports.InvalidTokenAmountError = exports.MetadataDoesntExistError = exports.DerivedKeyInvalidError = exports.NoPayerPresentError = exports.CannotTakeThisActionWithoutAuctionHouseSignOffError = exports.SOLWalletMustSignError = exports.CannotExchangeSOLForSolError = exports.ExpectedSolAccountError = exports.NumericalOverflowError = exports.NotRentExemptError = exports.StatementFalseError = exports.PublicKeysShouldBeUniqueError = exports.IncorrectOwnerError = exports.UninitializedAccountError = exports.InvalidMintAuthorityError = exports.PublicKeyMismatchError = void 0;
    var createErrorFromCodeLookup = /* @__PURE__ */ new Map();
    var createErrorFromNameLookup = /* @__PURE__ */ new Map();
    var PublicKeyMismatchError = class _PublicKeyMismatchError extends Error {
      constructor() {
        super("PublicKeyMismatch");
        this.code = 6e3;
        this.name = "PublicKeyMismatch";
        if (typeof Error.captureStackTrace === "function") {
          Error.captureStackTrace(this, _PublicKeyMismatchError);
        }
      }
    };
    exports.PublicKeyMismatchError = PublicKeyMismatchError;
    createErrorFromCodeLookup.set(6e3, () => new PublicKeyMismatchError());
    createErrorFromNameLookup.set("PublicKeyMismatch", () => new PublicKeyMismatchError());
    var InvalidMintAuthorityError = class _InvalidMintAuthorityError extends Error {
      constructor() {
        super("InvalidMintAuthority");
        this.code = 6001;
        this.name = "InvalidMintAuthority";
        if (typeof Error.captureStackTrace === "function") {
          Error.captureStackTrace(this, _InvalidMintAuthorityError);
        }
      }
    };
    exports.InvalidMintAuthorityError = InvalidMintAuthorityError;
    createErrorFromCodeLookup.set(6001, () => new InvalidMintAuthorityError());
    createErrorFromNameLookup.set("InvalidMintAuthority", () => new InvalidMintAuthorityError());
    var UninitializedAccountError = class _UninitializedAccountError extends Error {
      constructor() {
        super("UninitializedAccount");
        this.code = 6002;
        this.name = "UninitializedAccount";
        if (typeof Error.captureStackTrace === "function") {
          Error.captureStackTrace(this, _UninitializedAccountError);
        }
      }
    };
    exports.UninitializedAccountError = UninitializedAccountError;
    createErrorFromCodeLookup.set(6002, () => new UninitializedAccountError());
    createErrorFromNameLookup.set("UninitializedAccount", () => new UninitializedAccountError());
    var IncorrectOwnerError = class _IncorrectOwnerError extends Error {
      constructor() {
        super("IncorrectOwner");
        this.code = 6003;
        this.name = "IncorrectOwner";
        if (typeof Error.captureStackTrace === "function") {
          Error.captureStackTrace(this, _IncorrectOwnerError);
        }
      }
    };
    exports.IncorrectOwnerError = IncorrectOwnerError;
    createErrorFromCodeLookup.set(6003, () => new IncorrectOwnerError());
    createErrorFromNameLookup.set("IncorrectOwner", () => new IncorrectOwnerError());
    var PublicKeysShouldBeUniqueError = class _PublicKeysShouldBeUniqueError extends Error {
      constructor() {
        super("PublicKeysShouldBeUnique");
        this.code = 6004;
        this.name = "PublicKeysShouldBeUnique";
        if (typeof Error.captureStackTrace === "function") {
          Error.captureStackTrace(this, _PublicKeysShouldBeUniqueError);
        }
      }
    };
    exports.PublicKeysShouldBeUniqueError = PublicKeysShouldBeUniqueError;
    createErrorFromCodeLookup.set(6004, () => new PublicKeysShouldBeUniqueError());
    createErrorFromNameLookup.set("PublicKeysShouldBeUnique", () => new PublicKeysShouldBeUniqueError());
    var StatementFalseError = class _StatementFalseError extends Error {
      constructor() {
        super("StatementFalse");
        this.code = 6005;
        this.name = "StatementFalse";
        if (typeof Error.captureStackTrace === "function") {
          Error.captureStackTrace(this, _StatementFalseError);
        }
      }
    };
    exports.StatementFalseError = StatementFalseError;
    createErrorFromCodeLookup.set(6005, () => new StatementFalseError());
    createErrorFromNameLookup.set("StatementFalse", () => new StatementFalseError());
    var NotRentExemptError = class _NotRentExemptError extends Error {
      constructor() {
        super("NotRentExempt");
        this.code = 6006;
        this.name = "NotRentExempt";
        if (typeof Error.captureStackTrace === "function") {
          Error.captureStackTrace(this, _NotRentExemptError);
        }
      }
    };
    exports.NotRentExemptError = NotRentExemptError;
    createErrorFromCodeLookup.set(6006, () => new NotRentExemptError());
    createErrorFromNameLookup.set("NotRentExempt", () => new NotRentExemptError());
    var NumericalOverflowError = class _NumericalOverflowError extends Error {
      constructor() {
        super("NumericalOverflow");
        this.code = 6007;
        this.name = "NumericalOverflow";
        if (typeof Error.captureStackTrace === "function") {
          Error.captureStackTrace(this, _NumericalOverflowError);
        }
      }
    };
    exports.NumericalOverflowError = NumericalOverflowError;
    createErrorFromCodeLookup.set(6007, () => new NumericalOverflowError());
    createErrorFromNameLookup.set("NumericalOverflow", () => new NumericalOverflowError());
    var ExpectedSolAccountError = class _ExpectedSolAccountError extends Error {
      constructor() {
        super("Expected a sol account but got an spl token account instead");
        this.code = 6008;
        this.name = "ExpectedSolAccount";
        if (typeof Error.captureStackTrace === "function") {
          Error.captureStackTrace(this, _ExpectedSolAccountError);
        }
      }
    };
    exports.ExpectedSolAccountError = ExpectedSolAccountError;
    createErrorFromCodeLookup.set(6008, () => new ExpectedSolAccountError());
    createErrorFromNameLookup.set("ExpectedSolAccount", () => new ExpectedSolAccountError());
    var CannotExchangeSOLForSolError = class _CannotExchangeSOLForSolError extends Error {
      constructor() {
        super("Cannot exchange sol for sol");
        this.code = 6009;
        this.name = "CannotExchangeSOLForSol";
        if (typeof Error.captureStackTrace === "function") {
          Error.captureStackTrace(this, _CannotExchangeSOLForSolError);
        }
      }
    };
    exports.CannotExchangeSOLForSolError = CannotExchangeSOLForSolError;
    createErrorFromCodeLookup.set(6009, () => new CannotExchangeSOLForSolError());
    createErrorFromNameLookup.set("CannotExchangeSOLForSol", () => new CannotExchangeSOLForSolError());
    var SOLWalletMustSignError = class _SOLWalletMustSignError extends Error {
      constructor() {
        super("If paying with sol, sol wallet must be signer");
        this.code = 6010;
        this.name = "SOLWalletMustSign";
        if (typeof Error.captureStackTrace === "function") {
          Error.captureStackTrace(this, _SOLWalletMustSignError);
        }
      }
    };
    exports.SOLWalletMustSignError = SOLWalletMustSignError;
    createErrorFromCodeLookup.set(6010, () => new SOLWalletMustSignError());
    createErrorFromNameLookup.set("SOLWalletMustSign", () => new SOLWalletMustSignError());
    var CannotTakeThisActionWithoutAuctionHouseSignOffError = class _CannotTakeThisActionWithoutAuctionHouseSignOffError extends Error {
      constructor() {
        super("Cannot take this action without auction house signing too");
        this.code = 6011;
        this.name = "CannotTakeThisActionWithoutAuctionHouseSignOff";
        if (typeof Error.captureStackTrace === "function") {
          Error.captureStackTrace(this, _CannotTakeThisActionWithoutAuctionHouseSignOffError);
        }
      }
    };
    exports.CannotTakeThisActionWithoutAuctionHouseSignOffError = CannotTakeThisActionWithoutAuctionHouseSignOffError;
    createErrorFromCodeLookup.set(6011, () => new CannotTakeThisActionWithoutAuctionHouseSignOffError());
    createErrorFromNameLookup.set("CannotTakeThisActionWithoutAuctionHouseSignOff", () => new CannotTakeThisActionWithoutAuctionHouseSignOffError());
    var NoPayerPresentError = class _NoPayerPresentError extends Error {
      constructor() {
        super("No payer present on this txn");
        this.code = 6012;
        this.name = "NoPayerPresent";
        if (typeof Error.captureStackTrace === "function") {
          Error.captureStackTrace(this, _NoPayerPresentError);
        }
      }
    };
    exports.NoPayerPresentError = NoPayerPresentError;
    createErrorFromCodeLookup.set(6012, () => new NoPayerPresentError());
    createErrorFromNameLookup.set("NoPayerPresent", () => new NoPayerPresentError());
    var DerivedKeyInvalidError = class _DerivedKeyInvalidError extends Error {
      constructor() {
        super("Derived key invalid");
        this.code = 6013;
        this.name = "DerivedKeyInvalid";
        if (typeof Error.captureStackTrace === "function") {
          Error.captureStackTrace(this, _DerivedKeyInvalidError);
        }
      }
    };
    exports.DerivedKeyInvalidError = DerivedKeyInvalidError;
    createErrorFromCodeLookup.set(6013, () => new DerivedKeyInvalidError());
    createErrorFromNameLookup.set("DerivedKeyInvalid", () => new DerivedKeyInvalidError());
    var MetadataDoesntExistError = class _MetadataDoesntExistError extends Error {
      constructor() {
        super("Metadata doesn't exist");
        this.code = 6014;
        this.name = "MetadataDoesntExist";
        if (typeof Error.captureStackTrace === "function") {
          Error.captureStackTrace(this, _MetadataDoesntExistError);
        }
      }
    };
    exports.MetadataDoesntExistError = MetadataDoesntExistError;
    createErrorFromCodeLookup.set(6014, () => new MetadataDoesntExistError());
    createErrorFromNameLookup.set("MetadataDoesntExist", () => new MetadataDoesntExistError());
    var InvalidTokenAmountError = class _InvalidTokenAmountError extends Error {
      constructor() {
        super("Invalid token amount");
        this.code = 6015;
        this.name = "InvalidTokenAmount";
        if (typeof Error.captureStackTrace === "function") {
          Error.captureStackTrace(this, _InvalidTokenAmountError);
        }
      }
    };
    exports.InvalidTokenAmountError = InvalidTokenAmountError;
    createErrorFromCodeLookup.set(6015, () => new InvalidTokenAmountError());
    createErrorFromNameLookup.set("InvalidTokenAmount", () => new InvalidTokenAmountError());
    var BothPartiesNeedToAgreeToSaleError = class _BothPartiesNeedToAgreeToSaleError extends Error {
      constructor() {
        super("Both parties need to agree to this sale");
        this.code = 6016;
        this.name = "BothPartiesNeedToAgreeToSale";
        if (typeof Error.captureStackTrace === "function") {
          Error.captureStackTrace(this, _BothPartiesNeedToAgreeToSaleError);
        }
      }
    };
    exports.BothPartiesNeedToAgreeToSaleError = BothPartiesNeedToAgreeToSaleError;
    createErrorFromCodeLookup.set(6016, () => new BothPartiesNeedToAgreeToSaleError());
    createErrorFromNameLookup.set("BothPartiesNeedToAgreeToSale", () => new BothPartiesNeedToAgreeToSaleError());
    var CannotMatchFreeSalesWithoutAuctionHouseOrSellerSignoffError = class _CannotMatchFreeSalesWithoutAuctionHouseOrSellerSignoffError extends Error {
      constructor() {
        super("Cannot match free sales unless the auction house or seller signs off");
        this.code = 6017;
        this.name = "CannotMatchFreeSalesWithoutAuctionHouseOrSellerSignoff";
        if (typeof Error.captureStackTrace === "function") {
          Error.captureStackTrace(this, _CannotMatchFreeSalesWithoutAuctionHouseOrSellerSignoffError);
        }
      }
    };
    exports.CannotMatchFreeSalesWithoutAuctionHouseOrSellerSignoffError = CannotMatchFreeSalesWithoutAuctionHouseOrSellerSignoffError;
    createErrorFromCodeLookup.set(6017, () => new CannotMatchFreeSalesWithoutAuctionHouseOrSellerSignoffError());
    createErrorFromNameLookup.set("CannotMatchFreeSalesWithoutAuctionHouseOrSellerSignoff", () => new CannotMatchFreeSalesWithoutAuctionHouseOrSellerSignoffError());
    var SaleRequiresSignerError = class _SaleRequiresSignerError extends Error {
      constructor() {
        super("This sale requires a signer");
        this.code = 6018;
        this.name = "SaleRequiresSigner";
        if (typeof Error.captureStackTrace === "function") {
          Error.captureStackTrace(this, _SaleRequiresSignerError);
        }
      }
    };
    exports.SaleRequiresSignerError = SaleRequiresSignerError;
    createErrorFromCodeLookup.set(6018, () => new SaleRequiresSignerError());
    createErrorFromNameLookup.set("SaleRequiresSigner", () => new SaleRequiresSignerError());
    var OldSellerNotInitializedError = class _OldSellerNotInitializedError extends Error {
      constructor() {
        super("Old seller not initialized");
        this.code = 6019;
        this.name = "OldSellerNotInitialized";
        if (typeof Error.captureStackTrace === "function") {
          Error.captureStackTrace(this, _OldSellerNotInitializedError);
        }
      }
    };
    exports.OldSellerNotInitializedError = OldSellerNotInitializedError;
    createErrorFromCodeLookup.set(6019, () => new OldSellerNotInitializedError());
    createErrorFromNameLookup.set("OldSellerNotInitialized", () => new OldSellerNotInitializedError());
    var SellerATACannotHaveDelegateError = class _SellerATACannotHaveDelegateError extends Error {
      constructor() {
        super("Seller ata cannot have a delegate set");
        this.code = 6020;
        this.name = "SellerATACannotHaveDelegate";
        if (typeof Error.captureStackTrace === "function") {
          Error.captureStackTrace(this, _SellerATACannotHaveDelegateError);
        }
      }
    };
    exports.SellerATACannotHaveDelegateError = SellerATACannotHaveDelegateError;
    createErrorFromCodeLookup.set(6020, () => new SellerATACannotHaveDelegateError());
    createErrorFromNameLookup.set("SellerATACannotHaveDelegate", () => new SellerATACannotHaveDelegateError());
    var BuyerATACannotHaveDelegateError = class _BuyerATACannotHaveDelegateError extends Error {
      constructor() {
        super("Buyer ata cannot have a delegate set");
        this.code = 6021;
        this.name = "BuyerATACannotHaveDelegate";
        if (typeof Error.captureStackTrace === "function") {
          Error.captureStackTrace(this, _BuyerATACannotHaveDelegateError);
        }
      }
    };
    exports.BuyerATACannotHaveDelegateError = BuyerATACannotHaveDelegateError;
    createErrorFromCodeLookup.set(6021, () => new BuyerATACannotHaveDelegateError());
    createErrorFromNameLookup.set("BuyerATACannotHaveDelegate", () => new BuyerATACannotHaveDelegateError());
    var NoValidSignerPresentError = class _NoValidSignerPresentError extends Error {
      constructor() {
        super("No valid signer present");
        this.code = 6022;
        this.name = "NoValidSignerPresent";
        if (typeof Error.captureStackTrace === "function") {
          Error.captureStackTrace(this, _NoValidSignerPresentError);
        }
      }
    };
    exports.NoValidSignerPresentError = NoValidSignerPresentError;
    createErrorFromCodeLookup.set(6022, () => new NoValidSignerPresentError());
    createErrorFromNameLookup.set("NoValidSignerPresent", () => new NoValidSignerPresentError());
    var InvalidBasisPointsError = class _InvalidBasisPointsError extends Error {
      constructor() {
        super("BP must be less than or equal to 10000");
        this.code = 6023;
        this.name = "InvalidBasisPoints";
        if (typeof Error.captureStackTrace === "function") {
          Error.captureStackTrace(this, _InvalidBasisPointsError);
        }
      }
    };
    exports.InvalidBasisPointsError = InvalidBasisPointsError;
    createErrorFromCodeLookup.set(6023, () => new InvalidBasisPointsError());
    createErrorFromNameLookup.set("InvalidBasisPoints", () => new InvalidBasisPointsError());
    var TradeStateDoesntExistError = class _TradeStateDoesntExistError extends Error {
      constructor() {
        super("The trade state account does not exist");
        this.code = 6024;
        this.name = "TradeStateDoesntExist";
        if (typeof Error.captureStackTrace === "function") {
          Error.captureStackTrace(this, _TradeStateDoesntExistError);
        }
      }
    };
    exports.TradeStateDoesntExistError = TradeStateDoesntExistError;
    createErrorFromCodeLookup.set(6024, () => new TradeStateDoesntExistError());
    createErrorFromNameLookup.set("TradeStateDoesntExist", () => new TradeStateDoesntExistError());
    var TradeStateIsNotEmptyError = class _TradeStateIsNotEmptyError extends Error {
      constructor() {
        super("The trade state is not empty");
        this.code = 6025;
        this.name = "TradeStateIsNotEmpty";
        if (typeof Error.captureStackTrace === "function") {
          Error.captureStackTrace(this, _TradeStateIsNotEmptyError);
        }
      }
    };
    exports.TradeStateIsNotEmptyError = TradeStateIsNotEmptyError;
    createErrorFromCodeLookup.set(6025, () => new TradeStateIsNotEmptyError());
    createErrorFromNameLookup.set("TradeStateIsNotEmpty", () => new TradeStateIsNotEmptyError());
    var ReceiptIsEmptyError = class _ReceiptIsEmptyError extends Error {
      constructor() {
        super("The receipt is empty");
        this.code = 6026;
        this.name = "ReceiptIsEmpty";
        if (typeof Error.captureStackTrace === "function") {
          Error.captureStackTrace(this, _ReceiptIsEmptyError);
        }
      }
    };
    exports.ReceiptIsEmptyError = ReceiptIsEmptyError;
    createErrorFromCodeLookup.set(6026, () => new ReceiptIsEmptyError());
    createErrorFromNameLookup.set("ReceiptIsEmpty", () => new ReceiptIsEmptyError());
    var InstructionMismatchError = class _InstructionMismatchError extends Error {
      constructor() {
        super("The instruction does not match");
        this.code = 6027;
        this.name = "InstructionMismatch";
        if (typeof Error.captureStackTrace === "function") {
          Error.captureStackTrace(this, _InstructionMismatchError);
        }
      }
    };
    exports.InstructionMismatchError = InstructionMismatchError;
    createErrorFromCodeLookup.set(6027, () => new InstructionMismatchError());
    createErrorFromNameLookup.set("InstructionMismatch", () => new InstructionMismatchError());
    var InvalidAuctioneerError = class _InvalidAuctioneerError extends Error {
      constructor() {
        super("Invalid Auctioneer for this Auction House instance.");
        this.code = 6028;
        this.name = "InvalidAuctioneer";
        if (typeof Error.captureStackTrace === "function") {
          Error.captureStackTrace(this, _InvalidAuctioneerError);
        }
      }
    };
    exports.InvalidAuctioneerError = InvalidAuctioneerError;
    createErrorFromCodeLookup.set(6028, () => new InvalidAuctioneerError());
    createErrorFromNameLookup.set("InvalidAuctioneer", () => new InvalidAuctioneerError());
    var MissingAuctioneerScopeError = class _MissingAuctioneerScopeError extends Error {
      constructor() {
        super("The Auctioneer does not have the correct scope for this action.");
        this.code = 6029;
        this.name = "MissingAuctioneerScope";
        if (typeof Error.captureStackTrace === "function") {
          Error.captureStackTrace(this, _MissingAuctioneerScopeError);
        }
      }
    };
    exports.MissingAuctioneerScopeError = MissingAuctioneerScopeError;
    createErrorFromCodeLookup.set(6029, () => new MissingAuctioneerScopeError());
    createErrorFromNameLookup.set("MissingAuctioneerScope", () => new MissingAuctioneerScopeError());
    var MustUseAuctioneerHandlerError = class _MustUseAuctioneerHandlerError extends Error {
      constructor() {
        super("Must use auctioneer handler.");
        this.code = 6030;
        this.name = "MustUseAuctioneerHandler";
        if (typeof Error.captureStackTrace === "function") {
          Error.captureStackTrace(this, _MustUseAuctioneerHandlerError);
        }
      }
    };
    exports.MustUseAuctioneerHandlerError = MustUseAuctioneerHandlerError;
    createErrorFromCodeLookup.set(6030, () => new MustUseAuctioneerHandlerError());
    createErrorFromNameLookup.set("MustUseAuctioneerHandler", () => new MustUseAuctioneerHandlerError());
    var NoAuctioneerProgramSetError = class _NoAuctioneerProgramSetError extends Error {
      constructor() {
        super("No Auctioneer program set.");
        this.code = 6031;
        this.name = "NoAuctioneerProgramSet";
        if (typeof Error.captureStackTrace === "function") {
          Error.captureStackTrace(this, _NoAuctioneerProgramSetError);
        }
      }
    };
    exports.NoAuctioneerProgramSetError = NoAuctioneerProgramSetError;
    createErrorFromCodeLookup.set(6031, () => new NoAuctioneerProgramSetError());
    createErrorFromNameLookup.set("NoAuctioneerProgramSet", () => new NoAuctioneerProgramSetError());
    var TooManyScopesError = class _TooManyScopesError extends Error {
      constructor() {
        super("Too many scopes.");
        this.code = 6032;
        this.name = "TooManyScopes";
        if (typeof Error.captureStackTrace === "function") {
          Error.captureStackTrace(this, _TooManyScopesError);
        }
      }
    };
    exports.TooManyScopesError = TooManyScopesError;
    createErrorFromCodeLookup.set(6032, () => new TooManyScopesError());
    createErrorFromNameLookup.set("TooManyScopes", () => new TooManyScopesError());
    var AuctionHouseNotDelegatedError = class _AuctionHouseNotDelegatedError extends Error {
      constructor() {
        super("Auction House not delegated.");
        this.code = 6033;
        this.name = "AuctionHouseNotDelegated";
        if (typeof Error.captureStackTrace === "function") {
          Error.captureStackTrace(this, _AuctionHouseNotDelegatedError);
        }
      }
    };
    exports.AuctionHouseNotDelegatedError = AuctionHouseNotDelegatedError;
    createErrorFromCodeLookup.set(6033, () => new AuctionHouseNotDelegatedError());
    createErrorFromNameLookup.set("AuctionHouseNotDelegated", () => new AuctionHouseNotDelegatedError());
    var BumpSeedNotInHashMapError = class _BumpSeedNotInHashMapError extends Error {
      constructor() {
        super("Bump seed not in hash map.");
        this.code = 6034;
        this.name = "BumpSeedNotInHashMap";
        if (typeof Error.captureStackTrace === "function") {
          Error.captureStackTrace(this, _BumpSeedNotInHashMapError);
        }
      }
    };
    exports.BumpSeedNotInHashMapError = BumpSeedNotInHashMapError;
    createErrorFromCodeLookup.set(6034, () => new BumpSeedNotInHashMapError());
    createErrorFromNameLookup.set("BumpSeedNotInHashMap", () => new BumpSeedNotInHashMapError());
    var EscrowUnderRentExemptionError = class _EscrowUnderRentExemptionError extends Error {
      constructor() {
        super("The instruction would drain the escrow below rent exemption threshold");
        this.code = 6035;
        this.name = "EscrowUnderRentExemption";
        if (typeof Error.captureStackTrace === "function") {
          Error.captureStackTrace(this, _EscrowUnderRentExemptionError);
        }
      }
    };
    exports.EscrowUnderRentExemptionError = EscrowUnderRentExemptionError;
    createErrorFromCodeLookup.set(6035, () => new EscrowUnderRentExemptionError());
    createErrorFromNameLookup.set("EscrowUnderRentExemption", () => new EscrowUnderRentExemptionError());
    var InvalidSeedsOrAuctionHouseNotDelegatedError = class _InvalidSeedsOrAuctionHouseNotDelegatedError extends Error {
      constructor() {
        super("Invalid seeds or Auction House not delegated");
        this.code = 6036;
        this.name = "InvalidSeedsOrAuctionHouseNotDelegated";
        if (typeof Error.captureStackTrace === "function") {
          Error.captureStackTrace(this, _InvalidSeedsOrAuctionHouseNotDelegatedError);
        }
      }
    };
    exports.InvalidSeedsOrAuctionHouseNotDelegatedError = InvalidSeedsOrAuctionHouseNotDelegatedError;
    createErrorFromCodeLookup.set(6036, () => new InvalidSeedsOrAuctionHouseNotDelegatedError());
    createErrorFromNameLookup.set("InvalidSeedsOrAuctionHouseNotDelegated", () => new InvalidSeedsOrAuctionHouseNotDelegatedError());
    var BuyerTradeStateNotValidError = class _BuyerTradeStateNotValidError extends Error {
      constructor() {
        super("The buyer trade state was unable to be initialized.");
        this.code = 6037;
        this.name = "BuyerTradeStateNotValid";
        if (typeof Error.captureStackTrace === "function") {
          Error.captureStackTrace(this, _BuyerTradeStateNotValidError);
        }
      }
    };
    exports.BuyerTradeStateNotValidError = BuyerTradeStateNotValidError;
    createErrorFromCodeLookup.set(6037, () => new BuyerTradeStateNotValidError());
    createErrorFromNameLookup.set("BuyerTradeStateNotValid", () => new BuyerTradeStateNotValidError());
    var MissingElementForPartialOrderError = class _MissingElementForPartialOrderError extends Error {
      constructor() {
        super("Partial order size and price must both be provided in a partial buy.");
        this.code = 6038;
        this.name = "MissingElementForPartialOrder";
        if (typeof Error.captureStackTrace === "function") {
          Error.captureStackTrace(this, _MissingElementForPartialOrderError);
        }
      }
    };
    exports.MissingElementForPartialOrderError = MissingElementForPartialOrderError;
    createErrorFromCodeLookup.set(6038, () => new MissingElementForPartialOrderError());
    createErrorFromNameLookup.set("MissingElementForPartialOrder", () => new MissingElementForPartialOrderError());
    var NotEnoughTokensAvailableForPurchaseError = class _NotEnoughTokensAvailableForPurchaseError extends Error {
      constructor() {
        super("Amount of tokens available for purchase is less than the partial order amount.");
        this.code = 6039;
        this.name = "NotEnoughTokensAvailableForPurchase";
        if (typeof Error.captureStackTrace === "function") {
          Error.captureStackTrace(this, _NotEnoughTokensAvailableForPurchaseError);
        }
      }
    };
    exports.NotEnoughTokensAvailableForPurchaseError = NotEnoughTokensAvailableForPurchaseError;
    createErrorFromCodeLookup.set(6039, () => new NotEnoughTokensAvailableForPurchaseError());
    createErrorFromNameLookup.set("NotEnoughTokensAvailableForPurchase", () => new NotEnoughTokensAvailableForPurchaseError());
    var PartialPriceMismatchError2 = class _PartialPriceMismatchError extends Error {
      constructor() {
        super("Calculated partial price does not not partial price that was provided.");
        this.code = 6040;
        this.name = "PartialPriceMismatch";
        if (typeof Error.captureStackTrace === "function") {
          Error.captureStackTrace(this, _PartialPriceMismatchError);
        }
      }
    };
    exports.PartialPriceMismatchError = PartialPriceMismatchError2;
    createErrorFromCodeLookup.set(6040, () => new PartialPriceMismatchError2());
    createErrorFromNameLookup.set("PartialPriceMismatch", () => new PartialPriceMismatchError2());
    var AuctionHouseAlreadyDelegatedError = class _AuctionHouseAlreadyDelegatedError extends Error {
      constructor() {
        super("Auction House already delegated.");
        this.code = 6041;
        this.name = "AuctionHouseAlreadyDelegated";
        if (typeof Error.captureStackTrace === "function") {
          Error.captureStackTrace(this, _AuctionHouseAlreadyDelegatedError);
        }
      }
    };
    exports.AuctionHouseAlreadyDelegatedError = AuctionHouseAlreadyDelegatedError;
    createErrorFromCodeLookup.set(6041, () => new AuctionHouseAlreadyDelegatedError());
    createErrorFromNameLookup.set("AuctionHouseAlreadyDelegated", () => new AuctionHouseAlreadyDelegatedError());
    var AuctioneerAuthorityMismatchError = class _AuctioneerAuthorityMismatchError extends Error {
      constructor() {
        super("Auctioneer Authority Mismatch");
        this.code = 6042;
        this.name = "AuctioneerAuthorityMismatch";
        if (typeof Error.captureStackTrace === "function") {
          Error.captureStackTrace(this, _AuctioneerAuthorityMismatchError);
        }
      }
    };
    exports.AuctioneerAuthorityMismatchError = AuctioneerAuthorityMismatchError;
    createErrorFromCodeLookup.set(6042, () => new AuctioneerAuthorityMismatchError());
    createErrorFromNameLookup.set("AuctioneerAuthorityMismatch", () => new AuctioneerAuthorityMismatchError());
    var InsufficientFundsError = class _InsufficientFundsError extends Error {
      constructor() {
        super("Insufficient funds in escrow account to purchase.");
        this.code = 6043;
        this.name = "InsufficientFunds";
        if (typeof Error.captureStackTrace === "function") {
          Error.captureStackTrace(this, _InsufficientFundsError);
        }
      }
    };
    exports.InsufficientFundsError = InsufficientFundsError;
    createErrorFromCodeLookup.set(6043, () => new InsufficientFundsError());
    createErrorFromNameLookup.set("InsufficientFunds", () => new InsufficientFundsError());
    var SaleRequiresExactlyOneSignerError = class _SaleRequiresExactlyOneSignerError extends Error {
      constructor() {
        super("This sale requires exactly one signer: either the seller or the authority.");
        this.code = 6044;
        this.name = "SaleRequiresExactlyOneSigner";
        if (typeof Error.captureStackTrace === "function") {
          Error.captureStackTrace(this, _SaleRequiresExactlyOneSignerError);
        }
      }
    };
    exports.SaleRequiresExactlyOneSignerError = SaleRequiresExactlyOneSignerError;
    createErrorFromCodeLookup.set(6044, () => new SaleRequiresExactlyOneSignerError());
    createErrorFromNameLookup.set("SaleRequiresExactlyOneSigner", () => new SaleRequiresExactlyOneSignerError());
    function errorFromCode(code2) {
      const createError = createErrorFromCodeLookup.get(code2);
      return createError != null ? createError() : null;
    }
    exports.errorFromCode = errorFromCode;
    function errorFromName(name) {
      const createError = createErrorFromNameLookup.get(name);
      return createError != null ? createError() : null;
    }
    exports.errorFromName = errorFromName;
  }
});

// ../../node_modules/@metaplex-foundation/mpl-auction-house/dist/src/generated/instructions/auctioneerBuy.js
var require_auctioneerBuy = __commonJS({
  "../../node_modules/@metaplex-foundation/mpl-auction-house/dist/src/generated/instructions/auctioneerBuy.js"(exports) {
    "use strict";
    var __createBinding = exports && exports.__createBinding || (Object.create ? function(o2, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      var desc = Object.getOwnPropertyDescriptor(m, k);
      if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m[k];
        } };
      }
      Object.defineProperty(o2, k2, desc);
    } : function(o2, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      o2[k2] = m[k];
    });
    var __setModuleDefault = exports && exports.__setModuleDefault || (Object.create ? function(o2, v) {
      Object.defineProperty(o2, "default", { enumerable: true, value: v });
    } : function(o2, v) {
      o2["default"] = v;
    });
    var __importStar = exports && exports.__importStar || function(mod) {
      if (mod && mod.__esModule)
        return mod;
      var result = {};
      if (mod != null) {
        for (var k in mod)
          if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k))
            __createBinding(result, mod, k);
      }
      __setModuleDefault(result, mod);
      return result;
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.createAuctioneerBuyInstruction = exports.auctioneerBuyInstructionDiscriminator = exports.auctioneerBuyStruct = void 0;
    var splToken = __importStar(require_cjs4());
    var beet9 = __importStar(require_beet4());
    var web3 = __importStar((init_index_browser_esm(), __toCommonJS(index_browser_esm_exports)));
    exports.auctioneerBuyStruct = new beet9.BeetArgsStruct([
      ["instructionDiscriminator", beet9.uniformFixedSizeArray(beet9.u8, 8)],
      ["tradeStateBump", beet9.u8],
      ["escrowPaymentBump", beet9.u8],
      ["buyerPrice", beet9.u64],
      ["tokenSize", beet9.u64]
    ], "AuctioneerBuyInstructionArgs");
    exports.auctioneerBuyInstructionDiscriminator = [17, 106, 133, 46, 229, 48, 45, 208];
    function createAuctioneerBuyInstruction2(accounts, args, programId = new web3.PublicKey("hausS13jsjafwWwGqZTUQRmWyvyxn9EQpqMwV1PBBmk")) {
      var _a, _b, _c;
      const [data] = exports.auctioneerBuyStruct.serialize(__spreadValues({
        instructionDiscriminator: exports.auctioneerBuyInstructionDiscriminator
      }, args));
      const keys = [
        {
          pubkey: accounts.wallet,
          isWritable: false,
          isSigner: true
        },
        {
          pubkey: accounts.paymentAccount,
          isWritable: true,
          isSigner: false
        },
        {
          pubkey: accounts.transferAuthority,
          isWritable: false,
          isSigner: false
        },
        {
          pubkey: accounts.treasuryMint,
          isWritable: false,
          isSigner: false
        },
        {
          pubkey: accounts.tokenAccount,
          isWritable: false,
          isSigner: false
        },
        {
          pubkey: accounts.metadata,
          isWritable: false,
          isSigner: false
        },
        {
          pubkey: accounts.escrowPaymentAccount,
          isWritable: true,
          isSigner: false
        },
        {
          pubkey: accounts.authority,
          isWritable: false,
          isSigner: false
        },
        {
          pubkey: accounts.auctioneerAuthority,
          isWritable: false,
          isSigner: true
        },
        {
          pubkey: accounts.auctionHouse,
          isWritable: false,
          isSigner: false
        },
        {
          pubkey: accounts.auctionHouseFeeAccount,
          isWritable: true,
          isSigner: false
        },
        {
          pubkey: accounts.buyerTradeState,
          isWritable: true,
          isSigner: false
        },
        {
          pubkey: accounts.ahAuctioneerPda,
          isWritable: false,
          isSigner: false
        },
        {
          pubkey: (_a = accounts.tokenProgram) !== null && _a !== void 0 ? _a : splToken.TOKEN_PROGRAM_ID,
          isWritable: false,
          isSigner: false
        },
        {
          pubkey: (_b = accounts.systemProgram) !== null && _b !== void 0 ? _b : web3.SystemProgram.programId,
          isWritable: false,
          isSigner: false
        },
        {
          pubkey: (_c = accounts.rent) !== null && _c !== void 0 ? _c : web3.SYSVAR_RENT_PUBKEY,
          isWritable: false,
          isSigner: false
        }
      ];
      if (accounts.anchorRemainingAccounts != null) {
        for (const acc of accounts.anchorRemainingAccounts) {
          keys.push(acc);
        }
      }
      const ix = new web3.TransactionInstruction({
        programId,
        keys,
        data
      });
      return ix;
    }
    exports.createAuctioneerBuyInstruction = createAuctioneerBuyInstruction2;
  }
});

// ../../node_modules/@metaplex-foundation/mpl-auction-house/dist/src/generated/instructions/auctioneerCancel.js
var require_auctioneerCancel = __commonJS({
  "../../node_modules/@metaplex-foundation/mpl-auction-house/dist/src/generated/instructions/auctioneerCancel.js"(exports) {
    "use strict";
    var __createBinding = exports && exports.__createBinding || (Object.create ? function(o2, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      var desc = Object.getOwnPropertyDescriptor(m, k);
      if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m[k];
        } };
      }
      Object.defineProperty(o2, k2, desc);
    } : function(o2, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      o2[k2] = m[k];
    });
    var __setModuleDefault = exports && exports.__setModuleDefault || (Object.create ? function(o2, v) {
      Object.defineProperty(o2, "default", { enumerable: true, value: v });
    } : function(o2, v) {
      o2["default"] = v;
    });
    var __importStar = exports && exports.__importStar || function(mod) {
      if (mod && mod.__esModule)
        return mod;
      var result = {};
      if (mod != null) {
        for (var k in mod)
          if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k))
            __createBinding(result, mod, k);
      }
      __setModuleDefault(result, mod);
      return result;
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.createAuctioneerCancelInstruction = exports.auctioneerCancelInstructionDiscriminator = exports.auctioneerCancelStruct = void 0;
    var splToken = __importStar(require_cjs4());
    var beet9 = __importStar(require_beet4());
    var web3 = __importStar((init_index_browser_esm(), __toCommonJS(index_browser_esm_exports)));
    exports.auctioneerCancelStruct = new beet9.BeetArgsStruct([
      ["instructionDiscriminator", beet9.uniformFixedSizeArray(beet9.u8, 8)],
      ["buyerPrice", beet9.u64],
      ["tokenSize", beet9.u64]
    ], "AuctioneerCancelInstructionArgs");
    exports.auctioneerCancelInstructionDiscriminator = [197, 97, 152, 196, 115, 204, 64, 215];
    function createAuctioneerCancelInstruction3(accounts, args, programId = new web3.PublicKey("hausS13jsjafwWwGqZTUQRmWyvyxn9EQpqMwV1PBBmk")) {
      var _a;
      const [data] = exports.auctioneerCancelStruct.serialize(__spreadValues({
        instructionDiscriminator: exports.auctioneerCancelInstructionDiscriminator
      }, args));
      const keys = [
        {
          pubkey: accounts.wallet,
          isWritable: true,
          isSigner: false
        },
        {
          pubkey: accounts.tokenAccount,
          isWritable: true,
          isSigner: false
        },
        {
          pubkey: accounts.tokenMint,
          isWritable: false,
          isSigner: false
        },
        {
          pubkey: accounts.authority,
          isWritable: false,
          isSigner: false
        },
        {
          pubkey: accounts.auctioneerAuthority,
          isWritable: false,
          isSigner: true
        },
        {
          pubkey: accounts.auctionHouse,
          isWritable: false,
          isSigner: false
        },
        {
          pubkey: accounts.auctionHouseFeeAccount,
          isWritable: true,
          isSigner: false
        },
        {
          pubkey: accounts.tradeState,
          isWritable: true,
          isSigner: false
        },
        {
          pubkey: accounts.ahAuctioneerPda,
          isWritable: false,
          isSigner: false
        },
        {
          pubkey: (_a = accounts.tokenProgram) !== null && _a !== void 0 ? _a : splToken.TOKEN_PROGRAM_ID,
          isWritable: false,
          isSigner: false
        }
      ];
      if (accounts.anchorRemainingAccounts != null) {
        for (const acc of accounts.anchorRemainingAccounts) {
          keys.push(acc);
        }
      }
      const ix = new web3.TransactionInstruction({
        programId,
        keys,
        data
      });
      return ix;
    }
    exports.createAuctioneerCancelInstruction = createAuctioneerCancelInstruction3;
  }
});

// ../../node_modules/@metaplex-foundation/mpl-auction-house/dist/src/generated/instructions/auctioneerDeposit.js
var require_auctioneerDeposit = __commonJS({
  "../../node_modules/@metaplex-foundation/mpl-auction-house/dist/src/generated/instructions/auctioneerDeposit.js"(exports) {
    "use strict";
    var __createBinding = exports && exports.__createBinding || (Object.create ? function(o2, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      var desc = Object.getOwnPropertyDescriptor(m, k);
      if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m[k];
        } };
      }
      Object.defineProperty(o2, k2, desc);
    } : function(o2, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      o2[k2] = m[k];
    });
    var __setModuleDefault = exports && exports.__setModuleDefault || (Object.create ? function(o2, v) {
      Object.defineProperty(o2, "default", { enumerable: true, value: v });
    } : function(o2, v) {
      o2["default"] = v;
    });
    var __importStar = exports && exports.__importStar || function(mod) {
      if (mod && mod.__esModule)
        return mod;
      var result = {};
      if (mod != null) {
        for (var k in mod)
          if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k))
            __createBinding(result, mod, k);
      }
      __setModuleDefault(result, mod);
      return result;
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.createAuctioneerDepositInstruction = exports.auctioneerDepositInstructionDiscriminator = exports.auctioneerDepositStruct = void 0;
    var splToken = __importStar(require_cjs4());
    var beet9 = __importStar(require_beet4());
    var web3 = __importStar((init_index_browser_esm(), __toCommonJS(index_browser_esm_exports)));
    exports.auctioneerDepositStruct = new beet9.BeetArgsStruct([
      ["instructionDiscriminator", beet9.uniformFixedSizeArray(beet9.u8, 8)],
      ["escrowPaymentBump", beet9.u8],
      ["amount", beet9.u64]
    ], "AuctioneerDepositInstructionArgs");
    exports.auctioneerDepositInstructionDiscriminator = [79, 122, 37, 162, 120, 173, 57, 127];
    function createAuctioneerDepositInstruction2(accounts, args, programId = new web3.PublicKey("hausS13jsjafwWwGqZTUQRmWyvyxn9EQpqMwV1PBBmk")) {
      var _a, _b, _c;
      const [data] = exports.auctioneerDepositStruct.serialize(__spreadValues({
        instructionDiscriminator: exports.auctioneerDepositInstructionDiscriminator
      }, args));
      const keys = [
        {
          pubkey: accounts.wallet,
          isWritable: false,
          isSigner: true
        },
        {
          pubkey: accounts.paymentAccount,
          isWritable: true,
          isSigner: false
        },
        {
          pubkey: accounts.transferAuthority,
          isWritable: false,
          isSigner: false
        },
        {
          pubkey: accounts.escrowPaymentAccount,
          isWritable: true,
          isSigner: false
        },
        {
          pubkey: accounts.treasuryMint,
          isWritable: false,
          isSigner: false
        },
        {
          pubkey: accounts.authority,
          isWritable: false,
          isSigner: false
        },
        {
          pubkey: accounts.auctioneerAuthority,
          isWritable: false,
          isSigner: true
        },
        {
          pubkey: accounts.auctionHouse,
          isWritable: false,
          isSigner: false
        },
        {
          pubkey: accounts.auctionHouseFeeAccount,
          isWritable: true,
          isSigner: false
        },
        {
          pubkey: accounts.ahAuctioneerPda,
          isWritable: false,
          isSigner: false
        },
        {
          pubkey: (_a = accounts.tokenProgram) !== null && _a !== void 0 ? _a : splToken.TOKEN_PROGRAM_ID,
          isWritable: false,
          isSigner: false
        },
        {
          pubkey: (_b = accounts.systemProgram) !== null && _b !== void 0 ? _b : web3.SystemProgram.programId,
          isWritable: false,
          isSigner: false
        },
        {
          pubkey: (_c = accounts.rent) !== null && _c !== void 0 ? _c : web3.SYSVAR_RENT_PUBKEY,
          isWritable: false,
          isSigner: false
        }
      ];
      if (accounts.anchorRemainingAccounts != null) {
        for (const acc of accounts.anchorRemainingAccounts) {
          keys.push(acc);
        }
      }
      const ix = new web3.TransactionInstruction({
        programId,
        keys,
        data
      });
      return ix;
    }
    exports.createAuctioneerDepositInstruction = createAuctioneerDepositInstruction2;
  }
});

// ../../node_modules/@metaplex-foundation/mpl-auction-house/dist/src/generated/instructions/auctioneerExecutePartialSale.js
var require_auctioneerExecutePartialSale = __commonJS({
  "../../node_modules/@metaplex-foundation/mpl-auction-house/dist/src/generated/instructions/auctioneerExecutePartialSale.js"(exports) {
    "use strict";
    var __createBinding = exports && exports.__createBinding || (Object.create ? function(o2, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      var desc = Object.getOwnPropertyDescriptor(m, k);
      if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m[k];
        } };
      }
      Object.defineProperty(o2, k2, desc);
    } : function(o2, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      o2[k2] = m[k];
    });
    var __setModuleDefault = exports && exports.__setModuleDefault || (Object.create ? function(o2, v) {
      Object.defineProperty(o2, "default", { enumerable: true, value: v });
    } : function(o2, v) {
      o2["default"] = v;
    });
    var __importStar = exports && exports.__importStar || function(mod) {
      if (mod && mod.__esModule)
        return mod;
      var result = {};
      if (mod != null) {
        for (var k in mod)
          if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k))
            __createBinding(result, mod, k);
      }
      __setModuleDefault(result, mod);
      return result;
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.createAuctioneerExecutePartialSaleInstruction = exports.auctioneerExecutePartialSaleInstructionDiscriminator = exports.auctioneerExecutePartialSaleStruct = void 0;
    var splToken = __importStar(require_cjs4());
    var beet9 = __importStar(require_beet4());
    var web3 = __importStar((init_index_browser_esm(), __toCommonJS(index_browser_esm_exports)));
    exports.auctioneerExecutePartialSaleStruct = new beet9.FixableBeetArgsStruct([
      ["instructionDiscriminator", beet9.uniformFixedSizeArray(beet9.u8, 8)],
      ["escrowPaymentBump", beet9.u8],
      ["freeTradeStateBump", beet9.u8],
      ["programAsSignerBump", beet9.u8],
      ["buyerPrice", beet9.u64],
      ["tokenSize", beet9.u64],
      ["partialOrderSize", beet9.coption(beet9.u64)],
      ["partialOrderPrice", beet9.coption(beet9.u64)]
    ], "AuctioneerExecutePartialSaleInstructionArgs");
    exports.auctioneerExecutePartialSaleInstructionDiscriminator = [
      9,
      44,
      46,
      15,
      161,
      143,
      21,
      54
    ];
    function createAuctioneerExecutePartialSaleInstruction(accounts, args, programId = new web3.PublicKey("hausS13jsjafwWwGqZTUQRmWyvyxn9EQpqMwV1PBBmk")) {
      var _a, _b, _c, _d;
      const [data] = exports.auctioneerExecutePartialSaleStruct.serialize(__spreadValues({
        instructionDiscriminator: exports.auctioneerExecutePartialSaleInstructionDiscriminator
      }, args));
      const keys = [
        {
          pubkey: accounts.buyer,
          isWritable: true,
          isSigner: false
        },
        {
          pubkey: accounts.seller,
          isWritable: true,
          isSigner: false
        },
        {
          pubkey: accounts.tokenAccount,
          isWritable: true,
          isSigner: false
        },
        {
          pubkey: accounts.tokenMint,
          isWritable: false,
          isSigner: false
        },
        {
          pubkey: accounts.metadata,
          isWritable: false,
          isSigner: false
        },
        {
          pubkey: accounts.treasuryMint,
          isWritable: false,
          isSigner: false
        },
        {
          pubkey: accounts.escrowPaymentAccount,
          isWritable: true,
          isSigner: false
        },
        {
          pubkey: accounts.sellerPaymentReceiptAccount,
          isWritable: true,
          isSigner: false
        },
        {
          pubkey: accounts.buyerReceiptTokenAccount,
          isWritable: true,
          isSigner: false
        },
        {
          pubkey: accounts.authority,
          isWritable: false,
          isSigner: false
        },
        {
          pubkey: accounts.auctioneerAuthority,
          isWritable: false,
          isSigner: true
        },
        {
          pubkey: accounts.auctionHouse,
          isWritable: false,
          isSigner: false
        },
        {
          pubkey: accounts.auctionHouseFeeAccount,
          isWritable: true,
          isSigner: false
        },
        {
          pubkey: accounts.auctionHouseTreasury,
          isWritable: true,
          isSigner: false
        },
        {
          pubkey: accounts.buyerTradeState,
          isWritable: true,
          isSigner: false
        },
        {
          pubkey: accounts.sellerTradeState,
          isWritable: true,
          isSigner: false
        },
        {
          pubkey: accounts.freeTradeState,
          isWritable: true,
          isSigner: false
        },
        {
          pubkey: accounts.ahAuctioneerPda,
          isWritable: false,
          isSigner: false
        },
        {
          pubkey: (_a = accounts.tokenProgram) !== null && _a !== void 0 ? _a : splToken.TOKEN_PROGRAM_ID,
          isWritable: false,
          isSigner: false
        },
        {
          pubkey: (_b = accounts.systemProgram) !== null && _b !== void 0 ? _b : web3.SystemProgram.programId,
          isWritable: false,
          isSigner: false
        },
        {
          pubkey: (_c = accounts.ataProgram) !== null && _c !== void 0 ? _c : splToken.ASSOCIATED_TOKEN_PROGRAM_ID,
          isWritable: false,
          isSigner: false
        },
        {
          pubkey: accounts.programAsSigner,
          isWritable: false,
          isSigner: false
        },
        {
          pubkey: (_d = accounts.rent) !== null && _d !== void 0 ? _d : web3.SYSVAR_RENT_PUBKEY,
          isWritable: false,
          isSigner: false
        }
      ];
      if (accounts.anchorRemainingAccounts != null) {
        for (const acc of accounts.anchorRemainingAccounts) {
          keys.push(acc);
        }
      }
      const ix = new web3.TransactionInstruction({
        programId,
        keys,
        data
      });
      return ix;
    }
    exports.createAuctioneerExecutePartialSaleInstruction = createAuctioneerExecutePartialSaleInstruction;
  }
});

// ../../node_modules/@metaplex-foundation/mpl-auction-house/dist/src/generated/instructions/auctioneerExecuteSale.js
var require_auctioneerExecuteSale = __commonJS({
  "../../node_modules/@metaplex-foundation/mpl-auction-house/dist/src/generated/instructions/auctioneerExecuteSale.js"(exports) {
    "use strict";
    var __createBinding = exports && exports.__createBinding || (Object.create ? function(o2, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      var desc = Object.getOwnPropertyDescriptor(m, k);
      if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m[k];
        } };
      }
      Object.defineProperty(o2, k2, desc);
    } : function(o2, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      o2[k2] = m[k];
    });
    var __setModuleDefault = exports && exports.__setModuleDefault || (Object.create ? function(o2, v) {
      Object.defineProperty(o2, "default", { enumerable: true, value: v });
    } : function(o2, v) {
      o2["default"] = v;
    });
    var __importStar = exports && exports.__importStar || function(mod) {
      if (mod && mod.__esModule)
        return mod;
      var result = {};
      if (mod != null) {
        for (var k in mod)
          if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k))
            __createBinding(result, mod, k);
      }
      __setModuleDefault(result, mod);
      return result;
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.createAuctioneerExecuteSaleInstruction = exports.auctioneerExecuteSaleInstructionDiscriminator = exports.auctioneerExecuteSaleStruct = void 0;
    var splToken = __importStar(require_cjs4());
    var beet9 = __importStar(require_beet4());
    var web3 = __importStar((init_index_browser_esm(), __toCommonJS(index_browser_esm_exports)));
    exports.auctioneerExecuteSaleStruct = new beet9.BeetArgsStruct([
      ["instructionDiscriminator", beet9.uniformFixedSizeArray(beet9.u8, 8)],
      ["escrowPaymentBump", beet9.u8],
      ["freeTradeStateBump", beet9.u8],
      ["programAsSignerBump", beet9.u8],
      ["buyerPrice", beet9.u64],
      ["tokenSize", beet9.u64]
    ], "AuctioneerExecuteSaleInstructionArgs");
    exports.auctioneerExecuteSaleInstructionDiscriminator = [68, 125, 32, 65, 251, 43, 35, 53];
    function createAuctioneerExecuteSaleInstruction2(accounts, args, programId = new web3.PublicKey("hausS13jsjafwWwGqZTUQRmWyvyxn9EQpqMwV1PBBmk")) {
      var _a, _b, _c, _d;
      const [data] = exports.auctioneerExecuteSaleStruct.serialize(__spreadValues({
        instructionDiscriminator: exports.auctioneerExecuteSaleInstructionDiscriminator
      }, args));
      const keys = [
        {
          pubkey: accounts.buyer,
          isWritable: true,
          isSigner: false
        },
        {
          pubkey: accounts.seller,
          isWritable: true,
          isSigner: false
        },
        {
          pubkey: accounts.tokenAccount,
          isWritable: true,
          isSigner: false
        },
        {
          pubkey: accounts.tokenMint,
          isWritable: false,
          isSigner: false
        },
        {
          pubkey: accounts.metadata,
          isWritable: false,
          isSigner: false
        },
        {
          pubkey: accounts.treasuryMint,
          isWritable: false,
          isSigner: false
        },
        {
          pubkey: accounts.escrowPaymentAccount,
          isWritable: true,
          isSigner: false
        },
        {
          pubkey: accounts.sellerPaymentReceiptAccount,
          isWritable: true,
          isSigner: false
        },
        {
          pubkey: accounts.buyerReceiptTokenAccount,
          isWritable: true,
          isSigner: false
        },
        {
          pubkey: accounts.authority,
          isWritable: false,
          isSigner: false
        },
        {
          pubkey: accounts.auctioneerAuthority,
          isWritable: false,
          isSigner: true
        },
        {
          pubkey: accounts.auctionHouse,
          isWritable: false,
          isSigner: false
        },
        {
          pubkey: accounts.auctionHouseFeeAccount,
          isWritable: true,
          isSigner: false
        },
        {
          pubkey: accounts.auctionHouseTreasury,
          isWritable: true,
          isSigner: false
        },
        {
          pubkey: accounts.buyerTradeState,
          isWritable: true,
          isSigner: false
        },
        {
          pubkey: accounts.sellerTradeState,
          isWritable: true,
          isSigner: false
        },
        {
          pubkey: accounts.freeTradeState,
          isWritable: true,
          isSigner: false
        },
        {
          pubkey: accounts.ahAuctioneerPda,
          isWritable: false,
          isSigner: false
        },
        {
          pubkey: (_a = accounts.tokenProgram) !== null && _a !== void 0 ? _a : splToken.TOKEN_PROGRAM_ID,
          isWritable: false,
          isSigner: false
        },
        {
          pubkey: (_b = accounts.systemProgram) !== null && _b !== void 0 ? _b : web3.SystemProgram.programId,
          isWritable: false,
          isSigner: false
        },
        {
          pubkey: (_c = accounts.ataProgram) !== null && _c !== void 0 ? _c : splToken.ASSOCIATED_TOKEN_PROGRAM_ID,
          isWritable: false,
          isSigner: false
        },
        {
          pubkey: accounts.programAsSigner,
          isWritable: false,
          isSigner: false
        },
        {
          pubkey: (_d = accounts.rent) !== null && _d !== void 0 ? _d : web3.SYSVAR_RENT_PUBKEY,
          isWritable: false,
          isSigner: false
        }
      ];
      if (accounts.anchorRemainingAccounts != null) {
        for (const acc of accounts.anchorRemainingAccounts) {
          keys.push(acc);
        }
      }
      const ix = new web3.TransactionInstruction({
        programId,
        keys,
        data
      });
      return ix;
    }
    exports.createAuctioneerExecuteSaleInstruction = createAuctioneerExecuteSaleInstruction2;
  }
});

// ../../node_modules/@metaplex-foundation/mpl-auction-house/dist/src/generated/instructions/auctioneerPublicBuy.js
var require_auctioneerPublicBuy = __commonJS({
  "../../node_modules/@metaplex-foundation/mpl-auction-house/dist/src/generated/instructions/auctioneerPublicBuy.js"(exports) {
    "use strict";
    var __createBinding = exports && exports.__createBinding || (Object.create ? function(o2, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      var desc = Object.getOwnPropertyDescriptor(m, k);
      if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m[k];
        } };
      }
      Object.defineProperty(o2, k2, desc);
    } : function(o2, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      o2[k2] = m[k];
    });
    var __setModuleDefault = exports && exports.__setModuleDefault || (Object.create ? function(o2, v) {
      Object.defineProperty(o2, "default", { enumerable: true, value: v });
    } : function(o2, v) {
      o2["default"] = v;
    });
    var __importStar = exports && exports.__importStar || function(mod) {
      if (mod && mod.__esModule)
        return mod;
      var result = {};
      if (mod != null) {
        for (var k in mod)
          if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k))
            __createBinding(result, mod, k);
      }
      __setModuleDefault(result, mod);
      return result;
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.createAuctioneerPublicBuyInstruction = exports.auctioneerPublicBuyInstructionDiscriminator = exports.auctioneerPublicBuyStruct = void 0;
    var splToken = __importStar(require_cjs4());
    var beet9 = __importStar(require_beet4());
    var web3 = __importStar((init_index_browser_esm(), __toCommonJS(index_browser_esm_exports)));
    exports.auctioneerPublicBuyStruct = new beet9.BeetArgsStruct([
      ["instructionDiscriminator", beet9.uniformFixedSizeArray(beet9.u8, 8)],
      ["tradeStateBump", beet9.u8],
      ["escrowPaymentBump", beet9.u8],
      ["buyerPrice", beet9.u64],
      ["tokenSize", beet9.u64]
    ], "AuctioneerPublicBuyInstructionArgs");
    exports.auctioneerPublicBuyInstructionDiscriminator = [221, 239, 99, 240, 86, 46, 213, 126];
    function createAuctioneerPublicBuyInstruction2(accounts, args, programId = new web3.PublicKey("hausS13jsjafwWwGqZTUQRmWyvyxn9EQpqMwV1PBBmk")) {
      var _a, _b, _c;
      const [data] = exports.auctioneerPublicBuyStruct.serialize(__spreadValues({
        instructionDiscriminator: exports.auctioneerPublicBuyInstructionDiscriminator
      }, args));
      const keys = [
        {
          pubkey: accounts.wallet,
          isWritable: false,
          isSigner: true
        },
        {
          pubkey: accounts.paymentAccount,
          isWritable: true,
          isSigner: false
        },
        {
          pubkey: accounts.transferAuthority,
          isWritable: false,
          isSigner: false
        },
        {
          pubkey: accounts.treasuryMint,
          isWritable: false,
          isSigner: false
        },
        {
          pubkey: accounts.tokenAccount,
          isWritable: false,
          isSigner: false
        },
        {
          pubkey: accounts.metadata,
          isWritable: false,
          isSigner: false
        },
        {
          pubkey: accounts.escrowPaymentAccount,
          isWritable: true,
          isSigner: false
        },
        {
          pubkey: accounts.authority,
          isWritable: false,
          isSigner: false
        },
        {
          pubkey: accounts.auctioneerAuthority,
          isWritable: false,
          isSigner: true
        },
        {
          pubkey: accounts.auctionHouse,
          isWritable: false,
          isSigner: false
        },
        {
          pubkey: accounts.auctionHouseFeeAccount,
          isWritable: true,
          isSigner: false
        },
        {
          pubkey: accounts.buyerTradeState,
          isWritable: true,
          isSigner: false
        },
        {
          pubkey: accounts.ahAuctioneerPda,
          isWritable: false,
          isSigner: false
        },
        {
          pubkey: (_a = accounts.tokenProgram) !== null && _a !== void 0 ? _a : splToken.TOKEN_PROGRAM_ID,
          isWritable: false,
          isSigner: false
        },
        {
          pubkey: (_b = accounts.systemProgram) !== null && _b !== void 0 ? _b : web3.SystemProgram.programId,
          isWritable: false,
          isSigner: false
        },
        {
          pubkey: (_c = accounts.rent) !== null && _c !== void 0 ? _c : web3.SYSVAR_RENT_PUBKEY,
          isWritable: false,
          isSigner: false
        }
      ];
      if (accounts.anchorRemainingAccounts != null) {
        for (const acc of accounts.anchorRemainingAccounts) {
          keys.push(acc);
        }
      }
      const ix = new web3.TransactionInstruction({
        programId,
        keys,
        data
      });
      return ix;
    }
    exports.createAuctioneerPublicBuyInstruction = createAuctioneerPublicBuyInstruction2;
  }
});

// ../../node_modules/@metaplex-foundation/mpl-auction-house/dist/src/generated/instructions/auctioneerSell.js
var require_auctioneerSell = __commonJS({
  "../../node_modules/@metaplex-foundation/mpl-auction-house/dist/src/generated/instructions/auctioneerSell.js"(exports) {
    "use strict";
    var __createBinding = exports && exports.__createBinding || (Object.create ? function(o2, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      var desc = Object.getOwnPropertyDescriptor(m, k);
      if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m[k];
        } };
      }
      Object.defineProperty(o2, k2, desc);
    } : function(o2, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      o2[k2] = m[k];
    });
    var __setModuleDefault = exports && exports.__setModuleDefault || (Object.create ? function(o2, v) {
      Object.defineProperty(o2, "default", { enumerable: true, value: v });
    } : function(o2, v) {
      o2["default"] = v;
    });
    var __importStar = exports && exports.__importStar || function(mod) {
      if (mod && mod.__esModule)
        return mod;
      var result = {};
      if (mod != null) {
        for (var k in mod)
          if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k))
            __createBinding(result, mod, k);
      }
      __setModuleDefault(result, mod);
      return result;
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.createAuctioneerSellInstruction = exports.auctioneerSellInstructionDiscriminator = exports.auctioneerSellStruct = void 0;
    var splToken = __importStar(require_cjs4());
    var beet9 = __importStar(require_beet4());
    var web3 = __importStar((init_index_browser_esm(), __toCommonJS(index_browser_esm_exports)));
    exports.auctioneerSellStruct = new beet9.BeetArgsStruct([
      ["instructionDiscriminator", beet9.uniformFixedSizeArray(beet9.u8, 8)],
      ["tradeStateBump", beet9.u8],
      ["freeTradeStateBump", beet9.u8],
      ["programAsSignerBump", beet9.u8],
      ["tokenSize", beet9.u64]
    ], "AuctioneerSellInstructionArgs");
    exports.auctioneerSellInstructionDiscriminator = [251, 60, 142, 195, 121, 203, 26, 183];
    function createAuctioneerSellInstruction2(accounts, args, programId = new web3.PublicKey("hausS13jsjafwWwGqZTUQRmWyvyxn9EQpqMwV1PBBmk")) {
      var _a, _b, _c;
      const [data] = exports.auctioneerSellStruct.serialize(__spreadValues({
        instructionDiscriminator: exports.auctioneerSellInstructionDiscriminator
      }, args));
      const keys = [
        {
          pubkey: accounts.wallet,
          isWritable: true,
          isSigner: false
        },
        {
          pubkey: accounts.tokenAccount,
          isWritable: true,
          isSigner: false
        },
        {
          pubkey: accounts.metadata,
          isWritable: false,
          isSigner: false
        },
        {
          pubkey: accounts.authority,
          isWritable: false,
          isSigner: false
        },
        {
          pubkey: accounts.auctioneerAuthority,
          isWritable: false,
          isSigner: true
        },
        {
          pubkey: accounts.auctionHouse,
          isWritable: false,
          isSigner: false
        },
        {
          pubkey: accounts.auctionHouseFeeAccount,
          isWritable: true,
          isSigner: false
        },
        {
          pubkey: accounts.sellerTradeState,
          isWritable: true,
          isSigner: false
        },
        {
          pubkey: accounts.freeSellerTradeState,
          isWritable: true,
          isSigner: false
        },
        {
          pubkey: accounts.ahAuctioneerPda,
          isWritable: false,
          isSigner: false
        },
        {
          pubkey: accounts.programAsSigner,
          isWritable: false,
          isSigner: false
        },
        {
          pubkey: (_a = accounts.tokenProgram) !== null && _a !== void 0 ? _a : splToken.TOKEN_PROGRAM_ID,
          isWritable: false,
          isSigner: false
        },
        {
          pubkey: (_b = accounts.systemProgram) !== null && _b !== void 0 ? _b : web3.SystemProgram.programId,
          isWritable: false,
          isSigner: false
        },
        {
          pubkey: (_c = accounts.rent) !== null && _c !== void 0 ? _c : web3.SYSVAR_RENT_PUBKEY,
          isWritable: false,
          isSigner: false
        }
      ];
      if (accounts.anchorRemainingAccounts != null) {
        for (const acc of accounts.anchorRemainingAccounts) {
          keys.push(acc);
        }
      }
      const ix = new web3.TransactionInstruction({
        programId,
        keys,
        data
      });
      return ix;
    }
    exports.createAuctioneerSellInstruction = createAuctioneerSellInstruction2;
  }
});

// ../../node_modules/@metaplex-foundation/mpl-auction-house/dist/src/generated/instructions/auctioneerWithdraw.js
var require_auctioneerWithdraw = __commonJS({
  "../../node_modules/@metaplex-foundation/mpl-auction-house/dist/src/generated/instructions/auctioneerWithdraw.js"(exports) {
    "use strict";
    var __createBinding = exports && exports.__createBinding || (Object.create ? function(o2, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      var desc = Object.getOwnPropertyDescriptor(m, k);
      if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m[k];
        } };
      }
      Object.defineProperty(o2, k2, desc);
    } : function(o2, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      o2[k2] = m[k];
    });
    var __setModuleDefault = exports && exports.__setModuleDefault || (Object.create ? function(o2, v) {
      Object.defineProperty(o2, "default", { enumerable: true, value: v });
    } : function(o2, v) {
      o2["default"] = v;
    });
    var __importStar = exports && exports.__importStar || function(mod) {
      if (mod && mod.__esModule)
        return mod;
      var result = {};
      if (mod != null) {
        for (var k in mod)
          if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k))
            __createBinding(result, mod, k);
      }
      __setModuleDefault(result, mod);
      return result;
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.createAuctioneerWithdrawInstruction = exports.auctioneerWithdrawInstructionDiscriminator = exports.auctioneerWithdrawStruct = void 0;
    var splToken = __importStar(require_cjs4());
    var beet9 = __importStar(require_beet4());
    var web3 = __importStar((init_index_browser_esm(), __toCommonJS(index_browser_esm_exports)));
    exports.auctioneerWithdrawStruct = new beet9.BeetArgsStruct([
      ["instructionDiscriminator", beet9.uniformFixedSizeArray(beet9.u8, 8)],
      ["escrowPaymentBump", beet9.u8],
      ["amount", beet9.u64]
    ], "AuctioneerWithdrawInstructionArgs");
    exports.auctioneerWithdrawInstructionDiscriminator = [85, 166, 219, 110, 168, 143, 180, 236];
    function createAuctioneerWithdrawInstruction2(accounts, args, programId = new web3.PublicKey("hausS13jsjafwWwGqZTUQRmWyvyxn9EQpqMwV1PBBmk")) {
      var _a, _b, _c, _d;
      const [data] = exports.auctioneerWithdrawStruct.serialize(__spreadValues({
        instructionDiscriminator: exports.auctioneerWithdrawInstructionDiscriminator
      }, args));
      const keys = [
        {
          pubkey: accounts.wallet,
          isWritable: false,
          isSigner: false
        },
        {
          pubkey: accounts.receiptAccount,
          isWritable: true,
          isSigner: false
        },
        {
          pubkey: accounts.escrowPaymentAccount,
          isWritable: true,
          isSigner: false
        },
        {
          pubkey: accounts.treasuryMint,
          isWritable: false,
          isSigner: false
        },
        {
          pubkey: accounts.authority,
          isWritable: false,
          isSigner: false
        },
        {
          pubkey: accounts.auctioneerAuthority,
          isWritable: false,
          isSigner: true
        },
        {
          pubkey: accounts.auctionHouse,
          isWritable: false,
          isSigner: false
        },
        {
          pubkey: accounts.auctionHouseFeeAccount,
          isWritable: true,
          isSigner: false
        },
        {
          pubkey: accounts.ahAuctioneerPda,
          isWritable: false,
          isSigner: false
        },
        {
          pubkey: (_a = accounts.tokenProgram) !== null && _a !== void 0 ? _a : splToken.TOKEN_PROGRAM_ID,
          isWritable: false,
          isSigner: false
        },
        {
          pubkey: (_b = accounts.systemProgram) !== null && _b !== void 0 ? _b : web3.SystemProgram.programId,
          isWritable: false,
          isSigner: false
        },
        {
          pubkey: (_c = accounts.ataProgram) !== null && _c !== void 0 ? _c : splToken.ASSOCIATED_TOKEN_PROGRAM_ID,
          isWritable: false,
          isSigner: false
        },
        {
          pubkey: (_d = accounts.rent) !== null && _d !== void 0 ? _d : web3.SYSVAR_RENT_PUBKEY,
          isWritable: false,
          isSigner: false
        }
      ];
      if (accounts.anchorRemainingAccounts != null) {
        for (const acc of accounts.anchorRemainingAccounts) {
          keys.push(acc);
        }
      }
      const ix = new web3.TransactionInstruction({
        programId,
        keys,
        data
      });
      return ix;
    }
    exports.createAuctioneerWithdrawInstruction = createAuctioneerWithdrawInstruction2;
  }
});

// ../../node_modules/@metaplex-foundation/mpl-auction-house/dist/src/generated/instructions/buy.js
var require_buy = __commonJS({
  "../../node_modules/@metaplex-foundation/mpl-auction-house/dist/src/generated/instructions/buy.js"(exports) {
    "use strict";
    var __createBinding = exports && exports.__createBinding || (Object.create ? function(o2, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      var desc = Object.getOwnPropertyDescriptor(m, k);
      if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m[k];
        } };
      }
      Object.defineProperty(o2, k2, desc);
    } : function(o2, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      o2[k2] = m[k];
    });
    var __setModuleDefault = exports && exports.__setModuleDefault || (Object.create ? function(o2, v) {
      Object.defineProperty(o2, "default", { enumerable: true, value: v });
    } : function(o2, v) {
      o2["default"] = v;
    });
    var __importStar = exports && exports.__importStar || function(mod) {
      if (mod && mod.__esModule)
        return mod;
      var result = {};
      if (mod != null) {
        for (var k in mod)
          if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k))
            __createBinding(result, mod, k);
      }
      __setModuleDefault(result, mod);
      return result;
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.createBuyInstruction = exports.buyInstructionDiscriminator = exports.buyStruct = void 0;
    var splToken = __importStar(require_cjs4());
    var beet9 = __importStar(require_beet4());
    var web3 = __importStar((init_index_browser_esm(), __toCommonJS(index_browser_esm_exports)));
    exports.buyStruct = new beet9.BeetArgsStruct([
      ["instructionDiscriminator", beet9.uniformFixedSizeArray(beet9.u8, 8)],
      ["tradeStateBump", beet9.u8],
      ["escrowPaymentBump", beet9.u8],
      ["buyerPrice", beet9.u64],
      ["tokenSize", beet9.u64]
    ], "BuyInstructionArgs");
    exports.buyInstructionDiscriminator = [102, 6, 61, 18, 1, 218, 235, 234];
    function createBuyInstruction2(accounts, args, programId = new web3.PublicKey("hausS13jsjafwWwGqZTUQRmWyvyxn9EQpqMwV1PBBmk")) {
      var _a, _b, _c;
      const [data] = exports.buyStruct.serialize(__spreadValues({
        instructionDiscriminator: exports.buyInstructionDiscriminator
      }, args));
      const keys = [
        {
          pubkey: accounts.wallet,
          isWritable: false,
          isSigner: true
        },
        {
          pubkey: accounts.paymentAccount,
          isWritable: true,
          isSigner: false
        },
        {
          pubkey: accounts.transferAuthority,
          isWritable: false,
          isSigner: false
        },
        {
          pubkey: accounts.treasuryMint,
          isWritable: false,
          isSigner: false
        },
        {
          pubkey: accounts.tokenAccount,
          isWritable: false,
          isSigner: false
        },
        {
          pubkey: accounts.metadata,
          isWritable: false,
          isSigner: false
        },
        {
          pubkey: accounts.escrowPaymentAccount,
          isWritable: true,
          isSigner: false
        },
        {
          pubkey: accounts.authority,
          isWritable: false,
          isSigner: false
        },
        {
          pubkey: accounts.auctionHouse,
          isWritable: false,
          isSigner: false
        },
        {
          pubkey: accounts.auctionHouseFeeAccount,
          isWritable: true,
          isSigner: false
        },
        {
          pubkey: accounts.buyerTradeState,
          isWritable: true,
          isSigner: false
        },
        {
          pubkey: (_a = accounts.tokenProgram) !== null && _a !== void 0 ? _a : splToken.TOKEN_PROGRAM_ID,
          isWritable: false,
          isSigner: false
        },
        {
          pubkey: (_b = accounts.systemProgram) !== null && _b !== void 0 ? _b : web3.SystemProgram.programId,
          isWritable: false,
          isSigner: false
        },
        {
          pubkey: (_c = accounts.rent) !== null && _c !== void 0 ? _c : web3.SYSVAR_RENT_PUBKEY,
          isWritable: false,
          isSigner: false
        }
      ];
      if (accounts.anchorRemainingAccounts != null) {
        for (const acc of accounts.anchorRemainingAccounts) {
          keys.push(acc);
        }
      }
      const ix = new web3.TransactionInstruction({
        programId,
        keys,
        data
      });
      return ix;
    }
    exports.createBuyInstruction = createBuyInstruction2;
  }
});

// ../../node_modules/@metaplex-foundation/mpl-auction-house/dist/src/generated/instructions/cancel.js
var require_cancel = __commonJS({
  "../../node_modules/@metaplex-foundation/mpl-auction-house/dist/src/generated/instructions/cancel.js"(exports) {
    "use strict";
    var __createBinding = exports && exports.__createBinding || (Object.create ? function(o2, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      var desc = Object.getOwnPropertyDescriptor(m, k);
      if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m[k];
        } };
      }
      Object.defineProperty(o2, k2, desc);
    } : function(o2, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      o2[k2] = m[k];
    });
    var __setModuleDefault = exports && exports.__setModuleDefault || (Object.create ? function(o2, v) {
      Object.defineProperty(o2, "default", { enumerable: true, value: v });
    } : function(o2, v) {
      o2["default"] = v;
    });
    var __importStar = exports && exports.__importStar || function(mod) {
      if (mod && mod.__esModule)
        return mod;
      var result = {};
      if (mod != null) {
        for (var k in mod)
          if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k))
            __createBinding(result, mod, k);
      }
      __setModuleDefault(result, mod);
      return result;
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.createCancelInstruction = exports.cancelInstructionDiscriminator = exports.cancelStruct = void 0;
    var splToken = __importStar(require_cjs4());
    var beet9 = __importStar(require_beet4());
    var web3 = __importStar((init_index_browser_esm(), __toCommonJS(index_browser_esm_exports)));
    exports.cancelStruct = new beet9.BeetArgsStruct([
      ["instructionDiscriminator", beet9.uniformFixedSizeArray(beet9.u8, 8)],
      ["buyerPrice", beet9.u64],
      ["tokenSize", beet9.u64]
    ], "CancelInstructionArgs");
    exports.cancelInstructionDiscriminator = [232, 219, 223, 41, 219, 236, 220, 190];
    function createCancelInstruction3(accounts, args, programId = new web3.PublicKey("hausS13jsjafwWwGqZTUQRmWyvyxn9EQpqMwV1PBBmk")) {
      var _a;
      const [data] = exports.cancelStruct.serialize(__spreadValues({
        instructionDiscriminator: exports.cancelInstructionDiscriminator
      }, args));
      const keys = [
        {
          pubkey: accounts.wallet,
          isWritable: true,
          isSigner: false
        },
        {
          pubkey: accounts.tokenAccount,
          isWritable: true,
          isSigner: false
        },
        {
          pubkey: accounts.tokenMint,
          isWritable: false,
          isSigner: false
        },
        {
          pubkey: accounts.authority,
          isWritable: false,
          isSigner: false
        },
        {
          pubkey: accounts.auctionHouse,
          isWritable: false,
          isSigner: false
        },
        {
          pubkey: accounts.auctionHouseFeeAccount,
          isWritable: true,
          isSigner: false
        },
        {
          pubkey: accounts.tradeState,
          isWritable: true,
          isSigner: false
        },
        {
          pubkey: (_a = accounts.tokenProgram) !== null && _a !== void 0 ? _a : splToken.TOKEN_PROGRAM_ID,
          isWritable: false,
          isSigner: false
        }
      ];
      if (accounts.anchorRemainingAccounts != null) {
        for (const acc of accounts.anchorRemainingAccounts) {
          keys.push(acc);
        }
      }
      const ix = new web3.TransactionInstruction({
        programId,
        keys,
        data
      });
      return ix;
    }
    exports.createCancelInstruction = createCancelInstruction3;
  }
});

// ../../node_modules/@metaplex-foundation/mpl-auction-house/dist/src/generated/instructions/cancelBidReceipt.js
var require_cancelBidReceipt = __commonJS({
  "../../node_modules/@metaplex-foundation/mpl-auction-house/dist/src/generated/instructions/cancelBidReceipt.js"(exports) {
    "use strict";
    var __createBinding = exports && exports.__createBinding || (Object.create ? function(o2, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      var desc = Object.getOwnPropertyDescriptor(m, k);
      if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m[k];
        } };
      }
      Object.defineProperty(o2, k2, desc);
    } : function(o2, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      o2[k2] = m[k];
    });
    var __setModuleDefault = exports && exports.__setModuleDefault || (Object.create ? function(o2, v) {
      Object.defineProperty(o2, "default", { enumerable: true, value: v });
    } : function(o2, v) {
      o2["default"] = v;
    });
    var __importStar = exports && exports.__importStar || function(mod) {
      if (mod && mod.__esModule)
        return mod;
      var result = {};
      if (mod != null) {
        for (var k in mod)
          if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k))
            __createBinding(result, mod, k);
      }
      __setModuleDefault(result, mod);
      return result;
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.createCancelBidReceiptInstruction = exports.cancelBidReceiptInstructionDiscriminator = exports.cancelBidReceiptStruct = void 0;
    var beet9 = __importStar(require_beet4());
    var web3 = __importStar((init_index_browser_esm(), __toCommonJS(index_browser_esm_exports)));
    exports.cancelBidReceiptStruct = new beet9.BeetArgsStruct([["instructionDiscriminator", beet9.uniformFixedSizeArray(beet9.u8, 8)]], "CancelBidReceiptInstructionArgs");
    exports.cancelBidReceiptInstructionDiscriminator = [246, 108, 27, 229, 220, 42, 176, 43];
    function createCancelBidReceiptInstruction2(accounts, programId = new web3.PublicKey("hausS13jsjafwWwGqZTUQRmWyvyxn9EQpqMwV1PBBmk")) {
      var _a;
      const [data] = exports.cancelBidReceiptStruct.serialize({
        instructionDiscriminator: exports.cancelBidReceiptInstructionDiscriminator
      });
      const keys = [
        {
          pubkey: accounts.receipt,
          isWritable: true,
          isSigner: false
        },
        {
          pubkey: (_a = accounts.systemProgram) !== null && _a !== void 0 ? _a : web3.SystemProgram.programId,
          isWritable: false,
          isSigner: false
        },
        {
          pubkey: accounts.instruction,
          isWritable: false,
          isSigner: false
        }
      ];
      if (accounts.anchorRemainingAccounts != null) {
        for (const acc of accounts.anchorRemainingAccounts) {
          keys.push(acc);
        }
      }
      const ix = new web3.TransactionInstruction({
        programId,
        keys,
        data
      });
      return ix;
    }
    exports.createCancelBidReceiptInstruction = createCancelBidReceiptInstruction2;
  }
});

// ../../node_modules/@metaplex-foundation/mpl-auction-house/dist/src/generated/instructions/cancelListingReceipt.js
var require_cancelListingReceipt = __commonJS({
  "../../node_modules/@metaplex-foundation/mpl-auction-house/dist/src/generated/instructions/cancelListingReceipt.js"(exports) {
    "use strict";
    var __createBinding = exports && exports.__createBinding || (Object.create ? function(o2, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      var desc = Object.getOwnPropertyDescriptor(m, k);
      if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m[k];
        } };
      }
      Object.defineProperty(o2, k2, desc);
    } : function(o2, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      o2[k2] = m[k];
    });
    var __setModuleDefault = exports && exports.__setModuleDefault || (Object.create ? function(o2, v) {
      Object.defineProperty(o2, "default", { enumerable: true, value: v });
    } : function(o2, v) {
      o2["default"] = v;
    });
    var __importStar = exports && exports.__importStar || function(mod) {
      if (mod && mod.__esModule)
        return mod;
      var result = {};
      if (mod != null) {
        for (var k in mod)
          if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k))
            __createBinding(result, mod, k);
      }
      __setModuleDefault(result, mod);
      return result;
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.createCancelListingReceiptInstruction = exports.cancelListingReceiptInstructionDiscriminator = exports.cancelListingReceiptStruct = void 0;
    var beet9 = __importStar(require_beet4());
    var web3 = __importStar((init_index_browser_esm(), __toCommonJS(index_browser_esm_exports)));
    exports.cancelListingReceiptStruct = new beet9.BeetArgsStruct([["instructionDiscriminator", beet9.uniformFixedSizeArray(beet9.u8, 8)]], "CancelListingReceiptInstructionArgs");
    exports.cancelListingReceiptInstructionDiscriminator = [171, 59, 138, 126, 246, 189, 91, 11];
    function createCancelListingReceiptInstruction2(accounts, programId = new web3.PublicKey("hausS13jsjafwWwGqZTUQRmWyvyxn9EQpqMwV1PBBmk")) {
      var _a;
      const [data] = exports.cancelListingReceiptStruct.serialize({
        instructionDiscriminator: exports.cancelListingReceiptInstructionDiscriminator
      });
      const keys = [
        {
          pubkey: accounts.receipt,
          isWritable: true,
          isSigner: false
        },
        {
          pubkey: (_a = accounts.systemProgram) !== null && _a !== void 0 ? _a : web3.SystemProgram.programId,
          isWritable: false,
          isSigner: false
        },
        {
          pubkey: accounts.instruction,
          isWritable: false,
          isSigner: false
        }
      ];
      if (accounts.anchorRemainingAccounts != null) {
        for (const acc of accounts.anchorRemainingAccounts) {
          keys.push(acc);
        }
      }
      const ix = new web3.TransactionInstruction({
        programId,
        keys,
        data
      });
      return ix;
    }
    exports.createCancelListingReceiptInstruction = createCancelListingReceiptInstruction2;
  }
});

// ../../node_modules/@metaplex-foundation/mpl-auction-house/dist/src/generated/instructions/cancelRemainingAccounts.js
var require_cancelRemainingAccounts = __commonJS({
  "../../node_modules/@metaplex-foundation/mpl-auction-house/dist/src/generated/instructions/cancelRemainingAccounts.js"(exports) {
    "use strict";
    var __createBinding = exports && exports.__createBinding || (Object.create ? function(o2, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      var desc = Object.getOwnPropertyDescriptor(m, k);
      if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m[k];
        } };
      }
      Object.defineProperty(o2, k2, desc);
    } : function(o2, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      o2[k2] = m[k];
    });
    var __setModuleDefault = exports && exports.__setModuleDefault || (Object.create ? function(o2, v) {
      Object.defineProperty(o2, "default", { enumerable: true, value: v });
    } : function(o2, v) {
      o2["default"] = v;
    });
    var __importStar = exports && exports.__importStar || function(mod) {
      if (mod && mod.__esModule)
        return mod;
      var result = {};
      if (mod != null) {
        for (var k in mod)
          if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k))
            __createBinding(result, mod, k);
      }
      __setModuleDefault(result, mod);
      return result;
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.createCancelRemainingAccountsInstruction = exports.cancelRemainingAccountsInstructionDiscriminator = exports.cancelRemainingAccountsStruct = void 0;
    var beet9 = __importStar(require_beet4());
    var web3 = __importStar((init_index_browser_esm(), __toCommonJS(index_browser_esm_exports)));
    exports.cancelRemainingAccountsStruct = new beet9.BeetArgsStruct([["instructionDiscriminator", beet9.uniformFixedSizeArray(beet9.u8, 8)]], "CancelRemainingAccountsInstructionArgs");
    exports.cancelRemainingAccountsInstructionDiscriminator = [
      107,
      77,
      161,
      251,
      70,
      129,
      189,
      156
    ];
    function createCancelRemainingAccountsInstruction(accounts, programId = new web3.PublicKey("hausS13jsjafwWwGqZTUQRmWyvyxn9EQpqMwV1PBBmk")) {
      var _a;
      const [data] = exports.cancelRemainingAccountsStruct.serialize({
        instructionDiscriminator: exports.cancelRemainingAccountsInstructionDiscriminator
      });
      const keys = [
        {
          pubkey: accounts.metadataProgram,
          isWritable: false,
          isSigner: false
        },
        {
          pubkey: accounts.delegateRecord,
          isWritable: true,
          isSigner: false
        },
        {
          pubkey: accounts.programAsSigner,
          isWritable: false,
          isSigner: false
        },
        {
          pubkey: accounts.metadata,
          isWritable: true,
          isSigner: false
        },
        {
          pubkey: accounts.edition,
          isWritable: false,
          isSigner: false
        },
        {
          pubkey: accounts.tokenRecord,
          isWritable: true,
          isSigner: false
        },
        {
          pubkey: accounts.tokenMint,
          isWritable: false,
          isSigner: false
        },
        {
          pubkey: accounts.authRulesProgram,
          isWritable: false,
          isSigner: false
        },
        {
          pubkey: accounts.authRules,
          isWritable: false,
          isSigner: false
        },
        {
          pubkey: accounts.sysvarInstructions,
          isWritable: false,
          isSigner: false
        },
        {
          pubkey: (_a = accounts.systemProgram) !== null && _a !== void 0 ? _a : web3.SystemProgram.programId,
          isWritable: false,
          isSigner: false
        }
      ];
      if (accounts.anchorRemainingAccounts != null) {
        for (const acc of accounts.anchorRemainingAccounts) {
          keys.push(acc);
        }
      }
      const ix = new web3.TransactionInstruction({
        programId,
        keys,
        data
      });
      return ix;
    }
    exports.createCancelRemainingAccountsInstruction = createCancelRemainingAccountsInstruction;
  }
});

// ../../node_modules/@metaplex-foundation/mpl-auction-house/dist/src/generated/instructions/closeEscrowAccount.js
var require_closeEscrowAccount = __commonJS({
  "../../node_modules/@metaplex-foundation/mpl-auction-house/dist/src/generated/instructions/closeEscrowAccount.js"(exports) {
    "use strict";
    var __createBinding = exports && exports.__createBinding || (Object.create ? function(o2, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      var desc = Object.getOwnPropertyDescriptor(m, k);
      if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m[k];
        } };
      }
      Object.defineProperty(o2, k2, desc);
    } : function(o2, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      o2[k2] = m[k];
    });
    var __setModuleDefault = exports && exports.__setModuleDefault || (Object.create ? function(o2, v) {
      Object.defineProperty(o2, "default", { enumerable: true, value: v });
    } : function(o2, v) {
      o2["default"] = v;
    });
    var __importStar = exports && exports.__importStar || function(mod) {
      if (mod && mod.__esModule)
        return mod;
      var result = {};
      if (mod != null) {
        for (var k in mod)
          if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k))
            __createBinding(result, mod, k);
      }
      __setModuleDefault(result, mod);
      return result;
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.createCloseEscrowAccountInstruction = exports.closeEscrowAccountInstructionDiscriminator = exports.closeEscrowAccountStruct = void 0;
    var beet9 = __importStar(require_beet4());
    var web3 = __importStar((init_index_browser_esm(), __toCommonJS(index_browser_esm_exports)));
    exports.closeEscrowAccountStruct = new beet9.BeetArgsStruct([
      ["instructionDiscriminator", beet9.uniformFixedSizeArray(beet9.u8, 8)],
      ["escrowPaymentBump", beet9.u8]
    ], "CloseEscrowAccountInstructionArgs");
    exports.closeEscrowAccountInstructionDiscriminator = [209, 42, 208, 179, 140, 78, 18, 43];
    function createCloseEscrowAccountInstruction(accounts, args, programId = new web3.PublicKey("hausS13jsjafwWwGqZTUQRmWyvyxn9EQpqMwV1PBBmk")) {
      var _a;
      const [data] = exports.closeEscrowAccountStruct.serialize(__spreadValues({
        instructionDiscriminator: exports.closeEscrowAccountInstructionDiscriminator
      }, args));
      const keys = [
        {
          pubkey: accounts.wallet,
          isWritable: false,
          isSigner: true
        },
        {
          pubkey: accounts.escrowPaymentAccount,
          isWritable: true,
          isSigner: false
        },
        {
          pubkey: accounts.auctionHouse,
          isWritable: false,
          isSigner: false
        },
        {
          pubkey: (_a = accounts.systemProgram) !== null && _a !== void 0 ? _a : web3.SystemProgram.programId,
          isWritable: false,
          isSigner: false
        }
      ];
      if (accounts.anchorRemainingAccounts != null) {
        for (const acc of accounts.anchorRemainingAccounts) {
          keys.push(acc);
        }
      }
      const ix = new web3.TransactionInstruction({
        programId,
        keys,
        data
      });
      return ix;
    }
    exports.createCloseEscrowAccountInstruction = createCloseEscrowAccountInstruction;
  }
});

// ../../node_modules/@metaplex-foundation/mpl-auction-house/dist/src/generated/instructions/createAuctionHouse.js
var require_createAuctionHouse = __commonJS({
  "../../node_modules/@metaplex-foundation/mpl-auction-house/dist/src/generated/instructions/createAuctionHouse.js"(exports) {
    "use strict";
    var __createBinding = exports && exports.__createBinding || (Object.create ? function(o2, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      var desc = Object.getOwnPropertyDescriptor(m, k);
      if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m[k];
        } };
      }
      Object.defineProperty(o2, k2, desc);
    } : function(o2, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      o2[k2] = m[k];
    });
    var __setModuleDefault = exports && exports.__setModuleDefault || (Object.create ? function(o2, v) {
      Object.defineProperty(o2, "default", { enumerable: true, value: v });
    } : function(o2, v) {
      o2["default"] = v;
    });
    var __importStar = exports && exports.__importStar || function(mod) {
      if (mod && mod.__esModule)
        return mod;
      var result = {};
      if (mod != null) {
        for (var k in mod)
          if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k))
            __createBinding(result, mod, k);
      }
      __setModuleDefault(result, mod);
      return result;
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.createCreateAuctionHouseInstruction = exports.createAuctionHouseInstructionDiscriminator = exports.createAuctionHouseStruct = void 0;
    var splToken = __importStar(require_cjs4());
    var beet9 = __importStar(require_beet4());
    var web3 = __importStar((init_index_browser_esm(), __toCommonJS(index_browser_esm_exports)));
    exports.createAuctionHouseStruct = new beet9.BeetArgsStruct([
      ["instructionDiscriminator", beet9.uniformFixedSizeArray(beet9.u8, 8)],
      ["bump", beet9.u8],
      ["feePayerBump", beet9.u8],
      ["treasuryBump", beet9.u8],
      ["sellerFeeBasisPoints", beet9.u16],
      ["requiresSignOff", beet9.bool],
      ["canChangeSalePrice", beet9.bool]
    ], "CreateAuctionHouseInstructionArgs");
    exports.createAuctionHouseInstructionDiscriminator = [221, 66, 242, 159, 249, 206, 134, 241];
    function createCreateAuctionHouseInstruction2(accounts, args, programId = new web3.PublicKey("hausS13jsjafwWwGqZTUQRmWyvyxn9EQpqMwV1PBBmk")) {
      var _a, _b, _c, _d;
      const [data] = exports.createAuctionHouseStruct.serialize(__spreadValues({
        instructionDiscriminator: exports.createAuctionHouseInstructionDiscriminator
      }, args));
      const keys = [
        {
          pubkey: accounts.treasuryMint,
          isWritable: false,
          isSigner: false
        },
        {
          pubkey: accounts.payer,
          isWritable: true,
          isSigner: true
        },
        {
          pubkey: accounts.authority,
          isWritable: false,
          isSigner: false
        },
        {
          pubkey: accounts.feeWithdrawalDestination,
          isWritable: true,
          isSigner: false
        },
        {
          pubkey: accounts.treasuryWithdrawalDestination,
          isWritable: true,
          isSigner: false
        },
        {
          pubkey: accounts.treasuryWithdrawalDestinationOwner,
          isWritable: false,
          isSigner: false
        },
        {
          pubkey: accounts.auctionHouse,
          isWritable: true,
          isSigner: false
        },
        {
          pubkey: accounts.auctionHouseFeeAccount,
          isWritable: true,
          isSigner: false
        },
        {
          pubkey: accounts.auctionHouseTreasury,
          isWritable: true,
          isSigner: false
        },
        {
          pubkey: (_a = accounts.tokenProgram) !== null && _a !== void 0 ? _a : splToken.TOKEN_PROGRAM_ID,
          isWritable: false,
          isSigner: false
        },
        {
          pubkey: (_b = accounts.systemProgram) !== null && _b !== void 0 ? _b : web3.SystemProgram.programId,
          isWritable: false,
          isSigner: false
        },
        {
          pubkey: (_c = accounts.ataProgram) !== null && _c !== void 0 ? _c : splToken.ASSOCIATED_TOKEN_PROGRAM_ID,
          isWritable: false,
          isSigner: false
        },
        {
          pubkey: (_d = accounts.rent) !== null && _d !== void 0 ? _d : web3.SYSVAR_RENT_PUBKEY,
          isWritable: false,
          isSigner: false
        }
      ];
      if (accounts.anchorRemainingAccounts != null) {
        for (const acc of accounts.anchorRemainingAccounts) {
          keys.push(acc);
        }
      }
      const ix = new web3.TransactionInstruction({
        programId,
        keys,
        data
      });
      return ix;
    }
    exports.createCreateAuctionHouseInstruction = createCreateAuctionHouseInstruction2;
  }
});

// ../../node_modules/@metaplex-foundation/mpl-auction-house/dist/src/generated/types/AuthorityScope.js
var require_AuthorityScope = __commonJS({
  "../../node_modules/@metaplex-foundation/mpl-auction-house/dist/src/generated/types/AuthorityScope.js"(exports) {
    "use strict";
    var __createBinding = exports && exports.__createBinding || (Object.create ? function(o2, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      var desc = Object.getOwnPropertyDescriptor(m, k);
      if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m[k];
        } };
      }
      Object.defineProperty(o2, k2, desc);
    } : function(o2, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      o2[k2] = m[k];
    });
    var __setModuleDefault = exports && exports.__setModuleDefault || (Object.create ? function(o2, v) {
      Object.defineProperty(o2, "default", { enumerable: true, value: v });
    } : function(o2, v) {
      o2["default"] = v;
    });
    var __importStar = exports && exports.__importStar || function(mod) {
      if (mod && mod.__esModule)
        return mod;
      var result = {};
      if (mod != null) {
        for (var k in mod)
          if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k))
            __createBinding(result, mod, k);
      }
      __setModuleDefault(result, mod);
      return result;
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.authorityScopeBeet = exports.AuthorityScope = void 0;
    var beet9 = __importStar(require_beet4());
    var AuthorityScope2;
    (function(AuthorityScope3) {
      AuthorityScope3[AuthorityScope3["Deposit"] = 0] = "Deposit";
      AuthorityScope3[AuthorityScope3["Buy"] = 1] = "Buy";
      AuthorityScope3[AuthorityScope3["PublicBuy"] = 2] = "PublicBuy";
      AuthorityScope3[AuthorityScope3["ExecuteSale"] = 3] = "ExecuteSale";
      AuthorityScope3[AuthorityScope3["Sell"] = 4] = "Sell";
      AuthorityScope3[AuthorityScope3["Cancel"] = 5] = "Cancel";
      AuthorityScope3[AuthorityScope3["Withdraw"] = 6] = "Withdraw";
    })(AuthorityScope2 = exports.AuthorityScope || (exports.AuthorityScope = {}));
    exports.authorityScopeBeet = beet9.fixedScalarEnum(AuthorityScope2);
  }
});

// ../../node_modules/@metaplex-foundation/mpl-auction-house/dist/src/generated/instructions/delegateAuctioneer.js
var require_delegateAuctioneer = __commonJS({
  "../../node_modules/@metaplex-foundation/mpl-auction-house/dist/src/generated/instructions/delegateAuctioneer.js"(exports) {
    "use strict";
    var __createBinding = exports && exports.__createBinding || (Object.create ? function(o2, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      var desc = Object.getOwnPropertyDescriptor(m, k);
      if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m[k];
        } };
      }
      Object.defineProperty(o2, k2, desc);
    } : function(o2, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      o2[k2] = m[k];
    });
    var __setModuleDefault = exports && exports.__setModuleDefault || (Object.create ? function(o2, v) {
      Object.defineProperty(o2, "default", { enumerable: true, value: v });
    } : function(o2, v) {
      o2["default"] = v;
    });
    var __importStar = exports && exports.__importStar || function(mod) {
      if (mod && mod.__esModule)
        return mod;
      var result = {};
      if (mod != null) {
        for (var k in mod)
          if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k))
            __createBinding(result, mod, k);
      }
      __setModuleDefault(result, mod);
      return result;
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.createDelegateAuctioneerInstruction = exports.delegateAuctioneerInstructionDiscriminator = exports.delegateAuctioneerStruct = void 0;
    var beet9 = __importStar(require_beet4());
    var web3 = __importStar((init_index_browser_esm(), __toCommonJS(index_browser_esm_exports)));
    var AuthorityScope_1 = require_AuthorityScope();
    exports.delegateAuctioneerStruct = new beet9.FixableBeetArgsStruct([
      ["instructionDiscriminator", beet9.uniformFixedSizeArray(beet9.u8, 8)],
      ["scopes", beet9.array(AuthorityScope_1.authorityScopeBeet)]
    ], "DelegateAuctioneerInstructionArgs");
    exports.delegateAuctioneerInstructionDiscriminator = [106, 178, 12, 122, 74, 173, 251, 222];
    function createDelegateAuctioneerInstruction3(accounts, args, programId = new web3.PublicKey("hausS13jsjafwWwGqZTUQRmWyvyxn9EQpqMwV1PBBmk")) {
      var _a;
      const [data] = exports.delegateAuctioneerStruct.serialize(__spreadValues({
        instructionDiscriminator: exports.delegateAuctioneerInstructionDiscriminator
      }, args));
      const keys = [
        {
          pubkey: accounts.auctionHouse,
          isWritable: true,
          isSigner: false
        },
        {
          pubkey: accounts.authority,
          isWritable: true,
          isSigner: true
        },
        {
          pubkey: accounts.auctioneerAuthority,
          isWritable: false,
          isSigner: false
        },
        {
          pubkey: accounts.ahAuctioneerPda,
          isWritable: true,
          isSigner: false
        },
        {
          pubkey: (_a = accounts.systemProgram) !== null && _a !== void 0 ? _a : web3.SystemProgram.programId,
          isWritable: false,
          isSigner: false
        }
      ];
      if (accounts.anchorRemainingAccounts != null) {
        for (const acc of accounts.anchorRemainingAccounts) {
          keys.push(acc);
        }
      }
      const ix = new web3.TransactionInstruction({
        programId,
        keys,
        data
      });
      return ix;
    }
    exports.createDelegateAuctioneerInstruction = createDelegateAuctioneerInstruction3;
  }
});

// ../../node_modules/@metaplex-foundation/mpl-auction-house/dist/src/generated/instructions/deposit.js
var require_deposit = __commonJS({
  "../../node_modules/@metaplex-foundation/mpl-auction-house/dist/src/generated/instructions/deposit.js"(exports) {
    "use strict";
    var __createBinding = exports && exports.__createBinding || (Object.create ? function(o2, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      var desc = Object.getOwnPropertyDescriptor(m, k);
      if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m[k];
        } };
      }
      Object.defineProperty(o2, k2, desc);
    } : function(o2, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      o2[k2] = m[k];
    });
    var __setModuleDefault = exports && exports.__setModuleDefault || (Object.create ? function(o2, v) {
      Object.defineProperty(o2, "default", { enumerable: true, value: v });
    } : function(o2, v) {
      o2["default"] = v;
    });
    var __importStar = exports && exports.__importStar || function(mod) {
      if (mod && mod.__esModule)
        return mod;
      var result = {};
      if (mod != null) {
        for (var k in mod)
          if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k))
            __createBinding(result, mod, k);
      }
      __setModuleDefault(result, mod);
      return result;
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.createDepositInstruction = exports.depositInstructionDiscriminator = exports.depositStruct = void 0;
    var splToken = __importStar(require_cjs4());
    var beet9 = __importStar(require_beet4());
    var web3 = __importStar((init_index_browser_esm(), __toCommonJS(index_browser_esm_exports)));
    exports.depositStruct = new beet9.BeetArgsStruct([
      ["instructionDiscriminator", beet9.uniformFixedSizeArray(beet9.u8, 8)],
      ["escrowPaymentBump", beet9.u8],
      ["amount", beet9.u64]
    ], "DepositInstructionArgs");
    exports.depositInstructionDiscriminator = [242, 35, 198, 137, 82, 225, 242, 182];
    function createDepositInstruction2(accounts, args, programId = new web3.PublicKey("hausS13jsjafwWwGqZTUQRmWyvyxn9EQpqMwV1PBBmk")) {
      var _a, _b, _c;
      const [data] = exports.depositStruct.serialize(__spreadValues({
        instructionDiscriminator: exports.depositInstructionDiscriminator
      }, args));
      const keys = [
        {
          pubkey: accounts.wallet,
          isWritable: false,
          isSigner: true
        },
        {
          pubkey: accounts.paymentAccount,
          isWritable: true,
          isSigner: false
        },
        {
          pubkey: accounts.transferAuthority,
          isWritable: false,
          isSigner: false
        },
        {
          pubkey: accounts.escrowPaymentAccount,
          isWritable: true,
          isSigner: false
        },
        {
          pubkey: accounts.treasuryMint,
          isWritable: false,
          isSigner: false
        },
        {
          pubkey: accounts.authority,
          isWritable: false,
          isSigner: false
        },
        {
          pubkey: accounts.auctionHouse,
          isWritable: false,
          isSigner: false
        },
        {
          pubkey: accounts.auctionHouseFeeAccount,
          isWritable: true,
          isSigner: false
        },
        {
          pubkey: (_a = accounts.tokenProgram) !== null && _a !== void 0 ? _a : splToken.TOKEN_PROGRAM_ID,
          isWritable: false,
          isSigner: false
        },
        {
          pubkey: (_b = accounts.systemProgram) !== null && _b !== void 0 ? _b : web3.SystemProgram.programId,
          isWritable: false,
          isSigner: false
        },
        {
          pubkey: (_c = accounts.rent) !== null && _c !== void 0 ? _c : web3.SYSVAR_RENT_PUBKEY,
          isWritable: false,
          isSigner: false
        }
      ];
      if (accounts.anchorRemainingAccounts != null) {
        for (const acc of accounts.anchorRemainingAccounts) {
          keys.push(acc);
        }
      }
      const ix = new web3.TransactionInstruction({
        programId,
        keys,
        data
      });
      return ix;
    }
    exports.createDepositInstruction = createDepositInstruction2;
  }
});

// ../../node_modules/@metaplex-foundation/mpl-auction-house/dist/src/generated/instructions/executePartialSale.js
var require_executePartialSale = __commonJS({
  "../../node_modules/@metaplex-foundation/mpl-auction-house/dist/src/generated/instructions/executePartialSale.js"(exports) {
    "use strict";
    var __createBinding = exports && exports.__createBinding || (Object.create ? function(o2, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      var desc = Object.getOwnPropertyDescriptor(m, k);
      if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m[k];
        } };
      }
      Object.defineProperty(o2, k2, desc);
    } : function(o2, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      o2[k2] = m[k];
    });
    var __setModuleDefault = exports && exports.__setModuleDefault || (Object.create ? function(o2, v) {
      Object.defineProperty(o2, "default", { enumerable: true, value: v });
    } : function(o2, v) {
      o2["default"] = v;
    });
    var __importStar = exports && exports.__importStar || function(mod) {
      if (mod && mod.__esModule)
        return mod;
      var result = {};
      if (mod != null) {
        for (var k in mod)
          if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k))
            __createBinding(result, mod, k);
      }
      __setModuleDefault(result, mod);
      return result;
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.createExecutePartialSaleInstruction = exports.executePartialSaleInstructionDiscriminator = exports.executePartialSaleStruct = void 0;
    var splToken = __importStar(require_cjs4());
    var beet9 = __importStar(require_beet4());
    var web3 = __importStar((init_index_browser_esm(), __toCommonJS(index_browser_esm_exports)));
    exports.executePartialSaleStruct = new beet9.FixableBeetArgsStruct([
      ["instructionDiscriminator", beet9.uniformFixedSizeArray(beet9.u8, 8)],
      ["escrowPaymentBump", beet9.u8],
      ["freeTradeStateBump", beet9.u8],
      ["programAsSignerBump", beet9.u8],
      ["buyerPrice", beet9.u64],
      ["tokenSize", beet9.u64],
      ["partialOrderSize", beet9.coption(beet9.u64)],
      ["partialOrderPrice", beet9.coption(beet9.u64)]
    ], "ExecutePartialSaleInstructionArgs");
    exports.executePartialSaleInstructionDiscriminator = [163, 18, 35, 157, 49, 164, 203, 133];
    function createExecutePartialSaleInstruction2(accounts, args, programId = new web3.PublicKey("hausS13jsjafwWwGqZTUQRmWyvyxn9EQpqMwV1PBBmk")) {
      var _a, _b, _c, _d;
      const [data] = exports.executePartialSaleStruct.serialize(__spreadValues({
        instructionDiscriminator: exports.executePartialSaleInstructionDiscriminator
      }, args));
      const keys = [
        {
          pubkey: accounts.buyer,
          isWritable: true,
          isSigner: false
        },
        {
          pubkey: accounts.seller,
          isWritable: true,
          isSigner: false
        },
        {
          pubkey: accounts.tokenAccount,
          isWritable: true,
          isSigner: false
        },
        {
          pubkey: accounts.tokenMint,
          isWritable: false,
          isSigner: false
        },
        {
          pubkey: accounts.metadata,
          isWritable: false,
          isSigner: false
        },
        {
          pubkey: accounts.treasuryMint,
          isWritable: false,
          isSigner: false
        },
        {
          pubkey: accounts.escrowPaymentAccount,
          isWritable: true,
          isSigner: false
        },
        {
          pubkey: accounts.sellerPaymentReceiptAccount,
          isWritable: true,
          isSigner: false
        },
        {
          pubkey: accounts.buyerReceiptTokenAccount,
          isWritable: true,
          isSigner: false
        },
        {
          pubkey: accounts.authority,
          isWritable: false,
          isSigner: false
        },
        {
          pubkey: accounts.auctionHouse,
          isWritable: false,
          isSigner: false
        },
        {
          pubkey: accounts.auctionHouseFeeAccount,
          isWritable: true,
          isSigner: false
        },
        {
          pubkey: accounts.auctionHouseTreasury,
          isWritable: true,
          isSigner: false
        },
        {
          pubkey: accounts.buyerTradeState,
          isWritable: true,
          isSigner: false
        },
        {
          pubkey: accounts.sellerTradeState,
          isWritable: true,
          isSigner: false
        },
        {
          pubkey: accounts.freeTradeState,
          isWritable: true,
          isSigner: false
        },
        {
          pubkey: (_a = accounts.tokenProgram) !== null && _a !== void 0 ? _a : splToken.TOKEN_PROGRAM_ID,
          isWritable: false,
          isSigner: false
        },
        {
          pubkey: (_b = accounts.systemProgram) !== null && _b !== void 0 ? _b : web3.SystemProgram.programId,
          isWritable: false,
          isSigner: false
        },
        {
          pubkey: (_c = accounts.ataProgram) !== null && _c !== void 0 ? _c : splToken.ASSOCIATED_TOKEN_PROGRAM_ID,
          isWritable: false,
          isSigner: false
        },
        {
          pubkey: accounts.programAsSigner,
          isWritable: false,
          isSigner: false
        },
        {
          pubkey: (_d = accounts.rent) !== null && _d !== void 0 ? _d : web3.SYSVAR_RENT_PUBKEY,
          isWritable: false,
          isSigner: false
        }
      ];
      if (accounts.anchorRemainingAccounts != null) {
        for (const acc of accounts.anchorRemainingAccounts) {
          keys.push(acc);
        }
      }
      const ix = new web3.TransactionInstruction({
        programId,
        keys,
        data
      });
      return ix;
    }
    exports.createExecutePartialSaleInstruction = createExecutePartialSaleInstruction2;
  }
});

// ../../node_modules/@metaplex-foundation/mpl-auction-house/dist/src/generated/instructions/executeSale.js
var require_executeSale = __commonJS({
  "../../node_modules/@metaplex-foundation/mpl-auction-house/dist/src/generated/instructions/executeSale.js"(exports) {
    "use strict";
    var __createBinding = exports && exports.__createBinding || (Object.create ? function(o2, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      var desc = Object.getOwnPropertyDescriptor(m, k);
      if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m[k];
        } };
      }
      Object.defineProperty(o2, k2, desc);
    } : function(o2, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      o2[k2] = m[k];
    });
    var __setModuleDefault = exports && exports.__setModuleDefault || (Object.create ? function(o2, v) {
      Object.defineProperty(o2, "default", { enumerable: true, value: v });
    } : function(o2, v) {
      o2["default"] = v;
    });
    var __importStar = exports && exports.__importStar || function(mod) {
      if (mod && mod.__esModule)
        return mod;
      var result = {};
      if (mod != null) {
        for (var k in mod)
          if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k))
            __createBinding(result, mod, k);
      }
      __setModuleDefault(result, mod);
      return result;
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.createExecuteSaleInstruction = exports.executeSaleInstructionDiscriminator = exports.executeSaleStruct = void 0;
    var splToken = __importStar(require_cjs4());
    var beet9 = __importStar(require_beet4());
    var web3 = __importStar((init_index_browser_esm(), __toCommonJS(index_browser_esm_exports)));
    exports.executeSaleStruct = new beet9.BeetArgsStruct([
      ["instructionDiscriminator", beet9.uniformFixedSizeArray(beet9.u8, 8)],
      ["escrowPaymentBump", beet9.u8],
      ["freeTradeStateBump", beet9.u8],
      ["programAsSignerBump", beet9.u8],
      ["buyerPrice", beet9.u64],
      ["tokenSize", beet9.u64]
    ], "ExecuteSaleInstructionArgs");
    exports.executeSaleInstructionDiscriminator = [37, 74, 217, 157, 79, 49, 35, 6];
    function createExecuteSaleInstruction2(accounts, args, programId = new web3.PublicKey("hausS13jsjafwWwGqZTUQRmWyvyxn9EQpqMwV1PBBmk")) {
      var _a, _b, _c, _d;
      const [data] = exports.executeSaleStruct.serialize(__spreadValues({
        instructionDiscriminator: exports.executeSaleInstructionDiscriminator
      }, args));
      const keys = [
        {
          pubkey: accounts.buyer,
          isWritable: true,
          isSigner: false
        },
        {
          pubkey: accounts.seller,
          isWritable: true,
          isSigner: false
        },
        {
          pubkey: accounts.tokenAccount,
          isWritable: true,
          isSigner: false
        },
        {
          pubkey: accounts.tokenMint,
          isWritable: false,
          isSigner: false
        },
        {
          pubkey: accounts.metadata,
          isWritable: false,
          isSigner: false
        },
        {
          pubkey: accounts.treasuryMint,
          isWritable: false,
          isSigner: false
        },
        {
          pubkey: accounts.escrowPaymentAccount,
          isWritable: true,
          isSigner: false
        },
        {
          pubkey: accounts.sellerPaymentReceiptAccount,
          isWritable: true,
          isSigner: false
        },
        {
          pubkey: accounts.buyerReceiptTokenAccount,
          isWritable: true,
          isSigner: false
        },
        {
          pubkey: accounts.authority,
          isWritable: false,
          isSigner: false
        },
        {
          pubkey: accounts.auctionHouse,
          isWritable: false,
          isSigner: false
        },
        {
          pubkey: accounts.auctionHouseFeeAccount,
          isWritable: true,
          isSigner: false
        },
        {
          pubkey: accounts.auctionHouseTreasury,
          isWritable: true,
          isSigner: false
        },
        {
          pubkey: accounts.buyerTradeState,
          isWritable: true,
          isSigner: false
        },
        {
          pubkey: accounts.sellerTradeState,
          isWritable: true,
          isSigner: false
        },
        {
          pubkey: accounts.freeTradeState,
          isWritable: true,
          isSigner: false
        },
        {
          pubkey: (_a = accounts.tokenProgram) !== null && _a !== void 0 ? _a : splToken.TOKEN_PROGRAM_ID,
          isWritable: false,
          isSigner: false
        },
        {
          pubkey: (_b = accounts.systemProgram) !== null && _b !== void 0 ? _b : web3.SystemProgram.programId,
          isWritable: false,
          isSigner: false
        },
        {
          pubkey: (_c = accounts.ataProgram) !== null && _c !== void 0 ? _c : splToken.ASSOCIATED_TOKEN_PROGRAM_ID,
          isWritable: false,
          isSigner: false
        },
        {
          pubkey: accounts.programAsSigner,
          isWritable: false,
          isSigner: false
        },
        {
          pubkey: (_d = accounts.rent) !== null && _d !== void 0 ? _d : web3.SYSVAR_RENT_PUBKEY,
          isWritable: false,
          isSigner: false
        }
      ];
      if (accounts.anchorRemainingAccounts != null) {
        for (const acc of accounts.anchorRemainingAccounts) {
          keys.push(acc);
        }
      }
      const ix = new web3.TransactionInstruction({
        programId,
        keys,
        data
      });
      return ix;
    }
    exports.createExecuteSaleInstruction = createExecuteSaleInstruction2;
  }
});

// ../../node_modules/@metaplex-foundation/mpl-auction-house/dist/src/generated/instructions/executeSaleRemainingAccounts.js
var require_executeSaleRemainingAccounts = __commonJS({
  "../../node_modules/@metaplex-foundation/mpl-auction-house/dist/src/generated/instructions/executeSaleRemainingAccounts.js"(exports) {
    "use strict";
    var __createBinding = exports && exports.__createBinding || (Object.create ? function(o2, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      var desc = Object.getOwnPropertyDescriptor(m, k);
      if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m[k];
        } };
      }
      Object.defineProperty(o2, k2, desc);
    } : function(o2, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      o2[k2] = m[k];
    });
    var __setModuleDefault = exports && exports.__setModuleDefault || (Object.create ? function(o2, v) {
      Object.defineProperty(o2, "default", { enumerable: true, value: v });
    } : function(o2, v) {
      o2["default"] = v;
    });
    var __importStar = exports && exports.__importStar || function(mod) {
      if (mod && mod.__esModule)
        return mod;
      var result = {};
      if (mod != null) {
        for (var k in mod)
          if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k))
            __createBinding(result, mod, k);
      }
      __setModuleDefault(result, mod);
      return result;
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.createExecuteSaleRemainingAccountsInstruction = exports.executeSaleRemainingAccountsInstructionDiscriminator = exports.executeSaleRemainingAccountsStruct = void 0;
    var beet9 = __importStar(require_beet4());
    var web3 = __importStar((init_index_browser_esm(), __toCommonJS(index_browser_esm_exports)));
    exports.executeSaleRemainingAccountsStruct = new beet9.BeetArgsStruct([["instructionDiscriminator", beet9.uniformFixedSizeArray(beet9.u8, 8)]], "ExecuteSaleRemainingAccountsInstructionArgs");
    exports.executeSaleRemainingAccountsInstructionDiscriminator = [
      159,
      12,
      171,
      254,
      141,
      198,
      122,
      7
    ];
    function createExecuteSaleRemainingAccountsInstruction(accounts, programId = new web3.PublicKey("hausS13jsjafwWwGqZTUQRmWyvyxn9EQpqMwV1PBBmk")) {
      const [data] = exports.executeSaleRemainingAccountsStruct.serialize({
        instructionDiscriminator: exports.executeSaleRemainingAccountsInstructionDiscriminator
      });
      const keys = [
        {
          pubkey: accounts.metadataProgram,
          isWritable: false,
          isSigner: false
        },
        {
          pubkey: accounts.edition,
          isWritable: false,
          isSigner: false
        },
        {
          pubkey: accounts.ownerTr,
          isWritable: true,
          isSigner: false
        },
        {
          pubkey: accounts.destinationTr,
          isWritable: true,
          isSigner: false
        },
        {
          pubkey: accounts.authRulesProgram,
          isWritable: false,
          isSigner: false
        },
        {
          pubkey: accounts.authRules,
          isWritable: false,
          isSigner: false
        },
        {
          pubkey: accounts.sysvarInstructions,
          isWritable: false,
          isSigner: false
        }
      ];
      if (accounts.anchorRemainingAccounts != null) {
        for (const acc of accounts.anchorRemainingAccounts) {
          keys.push(acc);
        }
      }
      const ix = new web3.TransactionInstruction({
        programId,
        keys,
        data
      });
      return ix;
    }
    exports.createExecuteSaleRemainingAccountsInstruction = createExecuteSaleRemainingAccountsInstruction;
  }
});

// ../../node_modules/@metaplex-foundation/mpl-auction-house/dist/src/generated/instructions/printBidReceipt.js
var require_printBidReceipt = __commonJS({
  "../../node_modules/@metaplex-foundation/mpl-auction-house/dist/src/generated/instructions/printBidReceipt.js"(exports) {
    "use strict";
    var __createBinding = exports && exports.__createBinding || (Object.create ? function(o2, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      var desc = Object.getOwnPropertyDescriptor(m, k);
      if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m[k];
        } };
      }
      Object.defineProperty(o2, k2, desc);
    } : function(o2, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      o2[k2] = m[k];
    });
    var __setModuleDefault = exports && exports.__setModuleDefault || (Object.create ? function(o2, v) {
      Object.defineProperty(o2, "default", { enumerable: true, value: v });
    } : function(o2, v) {
      o2["default"] = v;
    });
    var __importStar = exports && exports.__importStar || function(mod) {
      if (mod && mod.__esModule)
        return mod;
      var result = {};
      if (mod != null) {
        for (var k in mod)
          if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k))
            __createBinding(result, mod, k);
      }
      __setModuleDefault(result, mod);
      return result;
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.createPrintBidReceiptInstruction = exports.printBidReceiptInstructionDiscriminator = exports.printBidReceiptStruct = void 0;
    var beet9 = __importStar(require_beet4());
    var web3 = __importStar((init_index_browser_esm(), __toCommonJS(index_browser_esm_exports)));
    exports.printBidReceiptStruct = new beet9.BeetArgsStruct([
      ["instructionDiscriminator", beet9.uniformFixedSizeArray(beet9.u8, 8)],
      ["receiptBump", beet9.u8]
    ], "PrintBidReceiptInstructionArgs");
    exports.printBidReceiptInstructionDiscriminator = [94, 249, 90, 230, 239, 64, 68, 218];
    function createPrintBidReceiptInstruction2(accounts, args, programId = new web3.PublicKey("hausS13jsjafwWwGqZTUQRmWyvyxn9EQpqMwV1PBBmk")) {
      var _a, _b;
      const [data] = exports.printBidReceiptStruct.serialize(__spreadValues({
        instructionDiscriminator: exports.printBidReceiptInstructionDiscriminator
      }, args));
      const keys = [
        {
          pubkey: accounts.receipt,
          isWritable: true,
          isSigner: false
        },
        {
          pubkey: accounts.bookkeeper,
          isWritable: true,
          isSigner: true
        },
        {
          pubkey: (_a = accounts.systemProgram) !== null && _a !== void 0 ? _a : web3.SystemProgram.programId,
          isWritable: false,
          isSigner: false
        },
        {
          pubkey: (_b = accounts.rent) !== null && _b !== void 0 ? _b : web3.SYSVAR_RENT_PUBKEY,
          isWritable: false,
          isSigner: false
        },
        {
          pubkey: accounts.instruction,
          isWritable: false,
          isSigner: false
        }
      ];
      if (accounts.anchorRemainingAccounts != null) {
        for (const acc of accounts.anchorRemainingAccounts) {
          keys.push(acc);
        }
      }
      const ix = new web3.TransactionInstruction({
        programId,
        keys,
        data
      });
      return ix;
    }
    exports.createPrintBidReceiptInstruction = createPrintBidReceiptInstruction2;
  }
});

// ../../node_modules/@metaplex-foundation/mpl-auction-house/dist/src/generated/instructions/printListingReceipt.js
var require_printListingReceipt = __commonJS({
  "../../node_modules/@metaplex-foundation/mpl-auction-house/dist/src/generated/instructions/printListingReceipt.js"(exports) {
    "use strict";
    var __createBinding = exports && exports.__createBinding || (Object.create ? function(o2, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      var desc = Object.getOwnPropertyDescriptor(m, k);
      if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m[k];
        } };
      }
      Object.defineProperty(o2, k2, desc);
    } : function(o2, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      o2[k2] = m[k];
    });
    var __setModuleDefault = exports && exports.__setModuleDefault || (Object.create ? function(o2, v) {
      Object.defineProperty(o2, "default", { enumerable: true, value: v });
    } : function(o2, v) {
      o2["default"] = v;
    });
    var __importStar = exports && exports.__importStar || function(mod) {
      if (mod && mod.__esModule)
        return mod;
      var result = {};
      if (mod != null) {
        for (var k in mod)
          if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k))
            __createBinding(result, mod, k);
      }
      __setModuleDefault(result, mod);
      return result;
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.createPrintListingReceiptInstruction = exports.printListingReceiptInstructionDiscriminator = exports.printListingReceiptStruct = void 0;
    var beet9 = __importStar(require_beet4());
    var web3 = __importStar((init_index_browser_esm(), __toCommonJS(index_browser_esm_exports)));
    exports.printListingReceiptStruct = new beet9.BeetArgsStruct([
      ["instructionDiscriminator", beet9.uniformFixedSizeArray(beet9.u8, 8)],
      ["receiptBump", beet9.u8]
    ], "PrintListingReceiptInstructionArgs");
    exports.printListingReceiptInstructionDiscriminator = [207, 107, 44, 160, 75, 222, 195, 27];
    function createPrintListingReceiptInstruction2(accounts, args, programId = new web3.PublicKey("hausS13jsjafwWwGqZTUQRmWyvyxn9EQpqMwV1PBBmk")) {
      var _a, _b;
      const [data] = exports.printListingReceiptStruct.serialize(__spreadValues({
        instructionDiscriminator: exports.printListingReceiptInstructionDiscriminator
      }, args));
      const keys = [
        {
          pubkey: accounts.receipt,
          isWritable: true,
          isSigner: false
        },
        {
          pubkey: accounts.bookkeeper,
          isWritable: true,
          isSigner: true
        },
        {
          pubkey: (_a = accounts.systemProgram) !== null && _a !== void 0 ? _a : web3.SystemProgram.programId,
          isWritable: false,
          isSigner: false
        },
        {
          pubkey: (_b = accounts.rent) !== null && _b !== void 0 ? _b : web3.SYSVAR_RENT_PUBKEY,
          isWritable: false,
          isSigner: false
        },
        {
          pubkey: accounts.instruction,
          isWritable: false,
          isSigner: false
        }
      ];
      if (accounts.anchorRemainingAccounts != null) {
        for (const acc of accounts.anchorRemainingAccounts) {
          keys.push(acc);
        }
      }
      const ix = new web3.TransactionInstruction({
        programId,
        keys,
        data
      });
      return ix;
    }
    exports.createPrintListingReceiptInstruction = createPrintListingReceiptInstruction2;
  }
});

// ../../node_modules/@metaplex-foundation/mpl-auction-house/dist/src/generated/instructions/printPurchaseReceipt.js
var require_printPurchaseReceipt = __commonJS({
  "../../node_modules/@metaplex-foundation/mpl-auction-house/dist/src/generated/instructions/printPurchaseReceipt.js"(exports) {
    "use strict";
    var __createBinding = exports && exports.__createBinding || (Object.create ? function(o2, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      var desc = Object.getOwnPropertyDescriptor(m, k);
      if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m[k];
        } };
      }
      Object.defineProperty(o2, k2, desc);
    } : function(o2, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      o2[k2] = m[k];
    });
    var __setModuleDefault = exports && exports.__setModuleDefault || (Object.create ? function(o2, v) {
      Object.defineProperty(o2, "default", { enumerable: true, value: v });
    } : function(o2, v) {
      o2["default"] = v;
    });
    var __importStar = exports && exports.__importStar || function(mod) {
      if (mod && mod.__esModule)
        return mod;
      var result = {};
      if (mod != null) {
        for (var k in mod)
          if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k))
            __createBinding(result, mod, k);
      }
      __setModuleDefault(result, mod);
      return result;
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.createPrintPurchaseReceiptInstruction = exports.printPurchaseReceiptInstructionDiscriminator = exports.printPurchaseReceiptStruct = void 0;
    var beet9 = __importStar(require_beet4());
    var web3 = __importStar((init_index_browser_esm(), __toCommonJS(index_browser_esm_exports)));
    exports.printPurchaseReceiptStruct = new beet9.BeetArgsStruct([
      ["instructionDiscriminator", beet9.uniformFixedSizeArray(beet9.u8, 8)],
      ["purchaseReceiptBump", beet9.u8]
    ], "PrintPurchaseReceiptInstructionArgs");
    exports.printPurchaseReceiptInstructionDiscriminator = [227, 154, 251, 7, 180, 56, 100, 143];
    function createPrintPurchaseReceiptInstruction2(accounts, args, programId = new web3.PublicKey("hausS13jsjafwWwGqZTUQRmWyvyxn9EQpqMwV1PBBmk")) {
      var _a, _b;
      const [data] = exports.printPurchaseReceiptStruct.serialize(__spreadValues({
        instructionDiscriminator: exports.printPurchaseReceiptInstructionDiscriminator
      }, args));
      const keys = [
        {
          pubkey: accounts.purchaseReceipt,
          isWritable: true,
          isSigner: false
        },
        {
          pubkey: accounts.listingReceipt,
          isWritable: true,
          isSigner: false
        },
        {
          pubkey: accounts.bidReceipt,
          isWritable: true,
          isSigner: false
        },
        {
          pubkey: accounts.bookkeeper,
          isWritable: true,
          isSigner: true
        },
        {
          pubkey: (_a = accounts.systemProgram) !== null && _a !== void 0 ? _a : web3.SystemProgram.programId,
          isWritable: false,
          isSigner: false
        },
        {
          pubkey: (_b = accounts.rent) !== null && _b !== void 0 ? _b : web3.SYSVAR_RENT_PUBKEY,
          isWritable: false,
          isSigner: false
        },
        {
          pubkey: accounts.instruction,
          isWritable: false,
          isSigner: false
        }
      ];
      if (accounts.anchorRemainingAccounts != null) {
        for (const acc of accounts.anchorRemainingAccounts) {
          keys.push(acc);
        }
      }
      const ix = new web3.TransactionInstruction({
        programId,
        keys,
        data
      });
      return ix;
    }
    exports.createPrintPurchaseReceiptInstruction = createPrintPurchaseReceiptInstruction2;
  }
});

// ../../node_modules/@metaplex-foundation/mpl-auction-house/dist/src/generated/instructions/publicBuy.js
var require_publicBuy = __commonJS({
  "../../node_modules/@metaplex-foundation/mpl-auction-house/dist/src/generated/instructions/publicBuy.js"(exports) {
    "use strict";
    var __createBinding = exports && exports.__createBinding || (Object.create ? function(o2, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      var desc = Object.getOwnPropertyDescriptor(m, k);
      if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m[k];
        } };
      }
      Object.defineProperty(o2, k2, desc);
    } : function(o2, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      o2[k2] = m[k];
    });
    var __setModuleDefault = exports && exports.__setModuleDefault || (Object.create ? function(o2, v) {
      Object.defineProperty(o2, "default", { enumerable: true, value: v });
    } : function(o2, v) {
      o2["default"] = v;
    });
    var __importStar = exports && exports.__importStar || function(mod) {
      if (mod && mod.__esModule)
        return mod;
      var result = {};
      if (mod != null) {
        for (var k in mod)
          if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k))
            __createBinding(result, mod, k);
      }
      __setModuleDefault(result, mod);
      return result;
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.createPublicBuyInstruction = exports.publicBuyInstructionDiscriminator = exports.publicBuyStruct = void 0;
    var splToken = __importStar(require_cjs4());
    var beet9 = __importStar(require_beet4());
    var web3 = __importStar((init_index_browser_esm(), __toCommonJS(index_browser_esm_exports)));
    exports.publicBuyStruct = new beet9.BeetArgsStruct([
      ["instructionDiscriminator", beet9.uniformFixedSizeArray(beet9.u8, 8)],
      ["tradeStateBump", beet9.u8],
      ["escrowPaymentBump", beet9.u8],
      ["buyerPrice", beet9.u64],
      ["tokenSize", beet9.u64]
    ], "PublicBuyInstructionArgs");
    exports.publicBuyInstructionDiscriminator = [169, 84, 218, 35, 42, 206, 16, 171];
    function createPublicBuyInstruction2(accounts, args, programId = new web3.PublicKey("hausS13jsjafwWwGqZTUQRmWyvyxn9EQpqMwV1PBBmk")) {
      var _a, _b, _c;
      const [data] = exports.publicBuyStruct.serialize(__spreadValues({
        instructionDiscriminator: exports.publicBuyInstructionDiscriminator
      }, args));
      const keys = [
        {
          pubkey: accounts.wallet,
          isWritable: false,
          isSigner: true
        },
        {
          pubkey: accounts.paymentAccount,
          isWritable: true,
          isSigner: false
        },
        {
          pubkey: accounts.transferAuthority,
          isWritable: false,
          isSigner: false
        },
        {
          pubkey: accounts.treasuryMint,
          isWritable: false,
          isSigner: false
        },
        {
          pubkey: accounts.tokenAccount,
          isWritable: false,
          isSigner: false
        },
        {
          pubkey: accounts.metadata,
          isWritable: false,
          isSigner: false
        },
        {
          pubkey: accounts.escrowPaymentAccount,
          isWritable: true,
          isSigner: false
        },
        {
          pubkey: accounts.authority,
          isWritable: false,
          isSigner: false
        },
        {
          pubkey: accounts.auctionHouse,
          isWritable: false,
          isSigner: false
        },
        {
          pubkey: accounts.auctionHouseFeeAccount,
          isWritable: true,
          isSigner: false
        },
        {
          pubkey: accounts.buyerTradeState,
          isWritable: true,
          isSigner: false
        },
        {
          pubkey: (_a = accounts.tokenProgram) !== null && _a !== void 0 ? _a : splToken.TOKEN_PROGRAM_ID,
          isWritable: false,
          isSigner: false
        },
        {
          pubkey: (_b = accounts.systemProgram) !== null && _b !== void 0 ? _b : web3.SystemProgram.programId,
          isWritable: false,
          isSigner: false
        },
        {
          pubkey: (_c = accounts.rent) !== null && _c !== void 0 ? _c : web3.SYSVAR_RENT_PUBKEY,
          isWritable: false,
          isSigner: false
        }
      ];
      if (accounts.anchorRemainingAccounts != null) {
        for (const acc of accounts.anchorRemainingAccounts) {
          keys.push(acc);
        }
      }
      const ix = new web3.TransactionInstruction({
        programId,
        keys,
        data
      });
      return ix;
    }
    exports.createPublicBuyInstruction = createPublicBuyInstruction2;
  }
});

// ../../node_modules/@metaplex-foundation/mpl-auction-house/dist/src/generated/instructions/sell.js
var require_sell = __commonJS({
  "../../node_modules/@metaplex-foundation/mpl-auction-house/dist/src/generated/instructions/sell.js"(exports) {
    "use strict";
    var __createBinding = exports && exports.__createBinding || (Object.create ? function(o2, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      var desc = Object.getOwnPropertyDescriptor(m, k);
      if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m[k];
        } };
      }
      Object.defineProperty(o2, k2, desc);
    } : function(o2, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      o2[k2] = m[k];
    });
    var __setModuleDefault = exports && exports.__setModuleDefault || (Object.create ? function(o2, v) {
      Object.defineProperty(o2, "default", { enumerable: true, value: v });
    } : function(o2, v) {
      o2["default"] = v;
    });
    var __importStar = exports && exports.__importStar || function(mod) {
      if (mod && mod.__esModule)
        return mod;
      var result = {};
      if (mod != null) {
        for (var k in mod)
          if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k))
            __createBinding(result, mod, k);
      }
      __setModuleDefault(result, mod);
      return result;
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.createSellInstruction = exports.sellInstructionDiscriminator = exports.sellStruct = void 0;
    var splToken = __importStar(require_cjs4());
    var beet9 = __importStar(require_beet4());
    var web3 = __importStar((init_index_browser_esm(), __toCommonJS(index_browser_esm_exports)));
    exports.sellStruct = new beet9.BeetArgsStruct([
      ["instructionDiscriminator", beet9.uniformFixedSizeArray(beet9.u8, 8)],
      ["tradeStateBump", beet9.u8],
      ["freeTradeStateBump", beet9.u8],
      ["programAsSignerBump", beet9.u8],
      ["buyerPrice", beet9.u64],
      ["tokenSize", beet9.u64]
    ], "SellInstructionArgs");
    exports.sellInstructionDiscriminator = [51, 230, 133, 164, 1, 127, 131, 173];
    function createSellInstruction2(accounts, args, programId = new web3.PublicKey("hausS13jsjafwWwGqZTUQRmWyvyxn9EQpqMwV1PBBmk")) {
      var _a, _b, _c;
      const [data] = exports.sellStruct.serialize(__spreadValues({
        instructionDiscriminator: exports.sellInstructionDiscriminator
      }, args));
      const keys = [
        {
          pubkey: accounts.wallet,
          isWritable: false,
          isSigner: false
        },
        {
          pubkey: accounts.tokenAccount,
          isWritable: true,
          isSigner: false
        },
        {
          pubkey: accounts.metadata,
          isWritable: false,
          isSigner: false
        },
        {
          pubkey: accounts.authority,
          isWritable: false,
          isSigner: false
        },
        {
          pubkey: accounts.auctionHouse,
          isWritable: false,
          isSigner: false
        },
        {
          pubkey: accounts.auctionHouseFeeAccount,
          isWritable: true,
          isSigner: false
        },
        {
          pubkey: accounts.sellerTradeState,
          isWritable: true,
          isSigner: false
        },
        {
          pubkey: accounts.freeSellerTradeState,
          isWritable: true,
          isSigner: false
        },
        {
          pubkey: (_a = accounts.tokenProgram) !== null && _a !== void 0 ? _a : splToken.TOKEN_PROGRAM_ID,
          isWritable: false,
          isSigner: false
        },
        {
          pubkey: (_b = accounts.systemProgram) !== null && _b !== void 0 ? _b : web3.SystemProgram.programId,
          isWritable: false,
          isSigner: false
        },
        {
          pubkey: accounts.programAsSigner,
          isWritable: false,
          isSigner: false
        },
        {
          pubkey: (_c = accounts.rent) !== null && _c !== void 0 ? _c : web3.SYSVAR_RENT_PUBKEY,
          isWritable: false,
          isSigner: false
        }
      ];
      if (accounts.anchorRemainingAccounts != null) {
        for (const acc of accounts.anchorRemainingAccounts) {
          keys.push(acc);
        }
      }
      const ix = new web3.TransactionInstruction({
        programId,
        keys,
        data
      });
      return ix;
    }
    exports.createSellInstruction = createSellInstruction2;
  }
});

// ../../node_modules/@metaplex-foundation/mpl-auction-house/dist/src/generated/instructions/sellRemainingAccounts.js
var require_sellRemainingAccounts = __commonJS({
  "../../node_modules/@metaplex-foundation/mpl-auction-house/dist/src/generated/instructions/sellRemainingAccounts.js"(exports) {
    "use strict";
    var __createBinding = exports && exports.__createBinding || (Object.create ? function(o2, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      var desc = Object.getOwnPropertyDescriptor(m, k);
      if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m[k];
        } };
      }
      Object.defineProperty(o2, k2, desc);
    } : function(o2, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      o2[k2] = m[k];
    });
    var __setModuleDefault = exports && exports.__setModuleDefault || (Object.create ? function(o2, v) {
      Object.defineProperty(o2, "default", { enumerable: true, value: v });
    } : function(o2, v) {
      o2["default"] = v;
    });
    var __importStar = exports && exports.__importStar || function(mod) {
      if (mod && mod.__esModule)
        return mod;
      var result = {};
      if (mod != null) {
        for (var k in mod)
          if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k))
            __createBinding(result, mod, k);
      }
      __setModuleDefault(result, mod);
      return result;
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.createSellRemainingAccountsInstruction = exports.sellRemainingAccountsInstructionDiscriminator = exports.sellRemainingAccountsStruct = void 0;
    var beet9 = __importStar(require_beet4());
    var web3 = __importStar((init_index_browser_esm(), __toCommonJS(index_browser_esm_exports)));
    exports.sellRemainingAccountsStruct = new beet9.BeetArgsStruct([["instructionDiscriminator", beet9.uniformFixedSizeArray(beet9.u8, 8)]], "SellRemainingAccountsInstructionArgs");
    exports.sellRemainingAccountsInstructionDiscriminator = [113, 23, 199, 41, 25, 203, 234, 30];
    function createSellRemainingAccountsInstruction(accounts, programId = new web3.PublicKey("hausS13jsjafwWwGqZTUQRmWyvyxn9EQpqMwV1PBBmk")) {
      const [data] = exports.sellRemainingAccountsStruct.serialize({
        instructionDiscriminator: exports.sellRemainingAccountsInstructionDiscriminator
      });
      const keys = [
        {
          pubkey: accounts.metadataProgram,
          isWritable: false,
          isSigner: false
        },
        {
          pubkey: accounts.delegateRecord,
          isWritable: true,
          isSigner: false
        },
        {
          pubkey: accounts.tokenRecord,
          isWritable: true,
          isSigner: false
        },
        {
          pubkey: accounts.tokenMint,
          isWritable: false,
          isSigner: false
        },
        {
          pubkey: accounts.edition,
          isWritable: false,
          isSigner: false
        },
        {
          pubkey: accounts.authRulesProgram,
          isWritable: false,
          isSigner: false
        },
        {
          pubkey: accounts.authRules,
          isWritable: false,
          isSigner: false
        },
        {
          pubkey: accounts.sysvarInstructions,
          isWritable: false,
          isSigner: false
        }
      ];
      if (accounts.anchorRemainingAccounts != null) {
        for (const acc of accounts.anchorRemainingAccounts) {
          keys.push(acc);
        }
      }
      const ix = new web3.TransactionInstruction({
        programId,
        keys,
        data
      });
      return ix;
    }
    exports.createSellRemainingAccountsInstruction = createSellRemainingAccountsInstruction;
  }
});

// ../../node_modules/@metaplex-foundation/mpl-auction-house/dist/src/generated/instructions/updateAuctionHouse.js
var require_updateAuctionHouse = __commonJS({
  "../../node_modules/@metaplex-foundation/mpl-auction-house/dist/src/generated/instructions/updateAuctionHouse.js"(exports) {
    "use strict";
    var __createBinding = exports && exports.__createBinding || (Object.create ? function(o2, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      var desc = Object.getOwnPropertyDescriptor(m, k);
      if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m[k];
        } };
      }
      Object.defineProperty(o2, k2, desc);
    } : function(o2, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      o2[k2] = m[k];
    });
    var __setModuleDefault = exports && exports.__setModuleDefault || (Object.create ? function(o2, v) {
      Object.defineProperty(o2, "default", { enumerable: true, value: v });
    } : function(o2, v) {
      o2["default"] = v;
    });
    var __importStar = exports && exports.__importStar || function(mod) {
      if (mod && mod.__esModule)
        return mod;
      var result = {};
      if (mod != null) {
        for (var k in mod)
          if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k))
            __createBinding(result, mod, k);
      }
      __setModuleDefault(result, mod);
      return result;
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.createUpdateAuctionHouseInstruction = exports.updateAuctionHouseInstructionDiscriminator = exports.updateAuctionHouseStruct = void 0;
    var splToken = __importStar(require_cjs4());
    var beet9 = __importStar(require_beet4());
    var web3 = __importStar((init_index_browser_esm(), __toCommonJS(index_browser_esm_exports)));
    exports.updateAuctionHouseStruct = new beet9.FixableBeetArgsStruct([
      ["instructionDiscriminator", beet9.uniformFixedSizeArray(beet9.u8, 8)],
      ["sellerFeeBasisPoints", beet9.coption(beet9.u16)],
      ["requiresSignOff", beet9.coption(beet9.bool)],
      ["canChangeSalePrice", beet9.coption(beet9.bool)]
    ], "UpdateAuctionHouseInstructionArgs");
    exports.updateAuctionHouseInstructionDiscriminator = [84, 215, 2, 172, 241, 0, 245, 219];
    function createUpdateAuctionHouseInstruction2(accounts, args, programId = new web3.PublicKey("hausS13jsjafwWwGqZTUQRmWyvyxn9EQpqMwV1PBBmk")) {
      var _a, _b, _c, _d;
      const [data] = exports.updateAuctionHouseStruct.serialize(__spreadValues({
        instructionDiscriminator: exports.updateAuctionHouseInstructionDiscriminator
      }, args));
      const keys = [
        {
          pubkey: accounts.treasuryMint,
          isWritable: false,
          isSigner: false
        },
        {
          pubkey: accounts.payer,
          isWritable: false,
          isSigner: true
        },
        {
          pubkey: accounts.authority,
          isWritable: false,
          isSigner: true
        },
        {
          pubkey: accounts.newAuthority,
          isWritable: false,
          isSigner: false
        },
        {
          pubkey: accounts.feeWithdrawalDestination,
          isWritable: true,
          isSigner: false
        },
        {
          pubkey: accounts.treasuryWithdrawalDestination,
          isWritable: true,
          isSigner: false
        },
        {
          pubkey: accounts.treasuryWithdrawalDestinationOwner,
          isWritable: false,
          isSigner: false
        },
        {
          pubkey: accounts.auctionHouse,
          isWritable: true,
          isSigner: false
        },
        {
          pubkey: (_a = accounts.tokenProgram) !== null && _a !== void 0 ? _a : splToken.TOKEN_PROGRAM_ID,
          isWritable: false,
          isSigner: false
        },
        {
          pubkey: (_b = accounts.systemProgram) !== null && _b !== void 0 ? _b : web3.SystemProgram.programId,
          isWritable: false,
          isSigner: false
        },
        {
          pubkey: (_c = accounts.ataProgram) !== null && _c !== void 0 ? _c : splToken.ASSOCIATED_TOKEN_PROGRAM_ID,
          isWritable: false,
          isSigner: false
        },
        {
          pubkey: (_d = accounts.rent) !== null && _d !== void 0 ? _d : web3.SYSVAR_RENT_PUBKEY,
          isWritable: false,
          isSigner: false
        }
      ];
      if (accounts.anchorRemainingAccounts != null) {
        for (const acc of accounts.anchorRemainingAccounts) {
          keys.push(acc);
        }
      }
      const ix = new web3.TransactionInstruction({
        programId,
        keys,
        data
      });
      return ix;
    }
    exports.createUpdateAuctionHouseInstruction = createUpdateAuctionHouseInstruction2;
  }
});

// ../../node_modules/@metaplex-foundation/mpl-auction-house/dist/src/generated/instructions/updateAuctioneer.js
var require_updateAuctioneer = __commonJS({
  "../../node_modules/@metaplex-foundation/mpl-auction-house/dist/src/generated/instructions/updateAuctioneer.js"(exports) {
    "use strict";
    var __createBinding = exports && exports.__createBinding || (Object.create ? function(o2, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      var desc = Object.getOwnPropertyDescriptor(m, k);
      if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m[k];
        } };
      }
      Object.defineProperty(o2, k2, desc);
    } : function(o2, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      o2[k2] = m[k];
    });
    var __setModuleDefault = exports && exports.__setModuleDefault || (Object.create ? function(o2, v) {
      Object.defineProperty(o2, "default", { enumerable: true, value: v });
    } : function(o2, v) {
      o2["default"] = v;
    });
    var __importStar = exports && exports.__importStar || function(mod) {
      if (mod && mod.__esModule)
        return mod;
      var result = {};
      if (mod != null) {
        for (var k in mod)
          if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k))
            __createBinding(result, mod, k);
      }
      __setModuleDefault(result, mod);
      return result;
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.createUpdateAuctioneerInstruction = exports.updateAuctioneerInstructionDiscriminator = exports.updateAuctioneerStruct = void 0;
    var beet9 = __importStar(require_beet4());
    var web3 = __importStar((init_index_browser_esm(), __toCommonJS(index_browser_esm_exports)));
    var AuthorityScope_1 = require_AuthorityScope();
    exports.updateAuctioneerStruct = new beet9.FixableBeetArgsStruct([
      ["instructionDiscriminator", beet9.uniformFixedSizeArray(beet9.u8, 8)],
      ["scopes", beet9.array(AuthorityScope_1.authorityScopeBeet)]
    ], "UpdateAuctioneerInstructionArgs");
    exports.updateAuctioneerInstructionDiscriminator = [103, 255, 80, 234, 94, 56, 168, 208];
    function createUpdateAuctioneerInstruction2(accounts, args, programId = new web3.PublicKey("hausS13jsjafwWwGqZTUQRmWyvyxn9EQpqMwV1PBBmk")) {
      var _a;
      const [data] = exports.updateAuctioneerStruct.serialize(__spreadValues({
        instructionDiscriminator: exports.updateAuctioneerInstructionDiscriminator
      }, args));
      const keys = [
        {
          pubkey: accounts.auctionHouse,
          isWritable: true,
          isSigner: false
        },
        {
          pubkey: accounts.authority,
          isWritable: true,
          isSigner: true
        },
        {
          pubkey: accounts.auctioneerAuthority,
          isWritable: false,
          isSigner: false
        },
        {
          pubkey: accounts.ahAuctioneerPda,
          isWritable: true,
          isSigner: false
        },
        {
          pubkey: (_a = accounts.systemProgram) !== null && _a !== void 0 ? _a : web3.SystemProgram.programId,
          isWritable: false,
          isSigner: false
        }
      ];
      if (accounts.anchorRemainingAccounts != null) {
        for (const acc of accounts.anchorRemainingAccounts) {
          keys.push(acc);
        }
      }
      const ix = new web3.TransactionInstruction({
        programId,
        keys,
        data
      });
      return ix;
    }
    exports.createUpdateAuctioneerInstruction = createUpdateAuctioneerInstruction2;
  }
});

// ../../node_modules/@metaplex-foundation/mpl-auction-house/dist/src/generated/instructions/withdraw.js
var require_withdraw3 = __commonJS({
  "../../node_modules/@metaplex-foundation/mpl-auction-house/dist/src/generated/instructions/withdraw.js"(exports) {
    "use strict";
    var __createBinding = exports && exports.__createBinding || (Object.create ? function(o2, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      var desc = Object.getOwnPropertyDescriptor(m, k);
      if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m[k];
        } };
      }
      Object.defineProperty(o2, k2, desc);
    } : function(o2, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      o2[k2] = m[k];
    });
    var __setModuleDefault = exports && exports.__setModuleDefault || (Object.create ? function(o2, v) {
      Object.defineProperty(o2, "default", { enumerable: true, value: v });
    } : function(o2, v) {
      o2["default"] = v;
    });
    var __importStar = exports && exports.__importStar || function(mod) {
      if (mod && mod.__esModule)
        return mod;
      var result = {};
      if (mod != null) {
        for (var k in mod)
          if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k))
            __createBinding(result, mod, k);
      }
      __setModuleDefault(result, mod);
      return result;
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.createWithdrawInstruction = exports.withdrawInstructionDiscriminator = exports.withdrawStruct = void 0;
    var splToken = __importStar(require_cjs4());
    var beet9 = __importStar(require_beet4());
    var web3 = __importStar((init_index_browser_esm(), __toCommonJS(index_browser_esm_exports)));
    exports.withdrawStruct = new beet9.BeetArgsStruct([
      ["instructionDiscriminator", beet9.uniformFixedSizeArray(beet9.u8, 8)],
      ["escrowPaymentBump", beet9.u8],
      ["amount", beet9.u64]
    ], "WithdrawInstructionArgs");
    exports.withdrawInstructionDiscriminator = [183, 18, 70, 156, 148, 109, 161, 34];
    function createWithdrawInstruction4(accounts, args, programId = new web3.PublicKey("hausS13jsjafwWwGqZTUQRmWyvyxn9EQpqMwV1PBBmk")) {
      var _a, _b, _c, _d;
      const [data] = exports.withdrawStruct.serialize(__spreadValues({
        instructionDiscriminator: exports.withdrawInstructionDiscriminator
      }, args));
      const keys = [
        {
          pubkey: accounts.wallet,
          isWritable: false,
          isSigner: false
        },
        {
          pubkey: accounts.receiptAccount,
          isWritable: true,
          isSigner: false
        },
        {
          pubkey: accounts.escrowPaymentAccount,
          isWritable: true,
          isSigner: false
        },
        {
          pubkey: accounts.treasuryMint,
          isWritable: false,
          isSigner: false
        },
        {
          pubkey: accounts.authority,
          isWritable: false,
          isSigner: false
        },
        {
          pubkey: accounts.auctionHouse,
          isWritable: false,
          isSigner: false
        },
        {
          pubkey: accounts.auctionHouseFeeAccount,
          isWritable: true,
          isSigner: false
        },
        {
          pubkey: (_a = accounts.tokenProgram) !== null && _a !== void 0 ? _a : splToken.TOKEN_PROGRAM_ID,
          isWritable: false,
          isSigner: false
        },
        {
          pubkey: (_b = accounts.systemProgram) !== null && _b !== void 0 ? _b : web3.SystemProgram.programId,
          isWritable: false,
          isSigner: false
        },
        {
          pubkey: (_c = accounts.ataProgram) !== null && _c !== void 0 ? _c : splToken.ASSOCIATED_TOKEN_PROGRAM_ID,
          isWritable: false,
          isSigner: false
        },
        {
          pubkey: (_d = accounts.rent) !== null && _d !== void 0 ? _d : web3.SYSVAR_RENT_PUBKEY,
          isWritable: false,
          isSigner: false
        }
      ];
      if (accounts.anchorRemainingAccounts != null) {
        for (const acc of accounts.anchorRemainingAccounts) {
          keys.push(acc);
        }
      }
      const ix = new web3.TransactionInstruction({
        programId,
        keys,
        data
      });
      return ix;
    }
    exports.createWithdrawInstruction = createWithdrawInstruction4;
  }
});

// ../../node_modules/@metaplex-foundation/mpl-auction-house/dist/src/generated/instructions/withdrawFromFee.js
var require_withdrawFromFee = __commonJS({
  "../../node_modules/@metaplex-foundation/mpl-auction-house/dist/src/generated/instructions/withdrawFromFee.js"(exports) {
    "use strict";
    var __createBinding = exports && exports.__createBinding || (Object.create ? function(o2, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      var desc = Object.getOwnPropertyDescriptor(m, k);
      if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m[k];
        } };
      }
      Object.defineProperty(o2, k2, desc);
    } : function(o2, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      o2[k2] = m[k];
    });
    var __setModuleDefault = exports && exports.__setModuleDefault || (Object.create ? function(o2, v) {
      Object.defineProperty(o2, "default", { enumerable: true, value: v });
    } : function(o2, v) {
      o2["default"] = v;
    });
    var __importStar = exports && exports.__importStar || function(mod) {
      if (mod && mod.__esModule)
        return mod;
      var result = {};
      if (mod != null) {
        for (var k in mod)
          if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k))
            __createBinding(result, mod, k);
      }
      __setModuleDefault(result, mod);
      return result;
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.createWithdrawFromFeeInstruction = exports.withdrawFromFeeInstructionDiscriminator = exports.withdrawFromFeeStruct = void 0;
    var beet9 = __importStar(require_beet4());
    var web3 = __importStar((init_index_browser_esm(), __toCommonJS(index_browser_esm_exports)));
    exports.withdrawFromFeeStruct = new beet9.BeetArgsStruct([
      ["instructionDiscriminator", beet9.uniformFixedSizeArray(beet9.u8, 8)],
      ["amount", beet9.u64]
    ], "WithdrawFromFeeInstructionArgs");
    exports.withdrawFromFeeInstructionDiscriminator = [179, 208, 190, 154, 32, 179, 19, 59];
    function createWithdrawFromFeeInstruction2(accounts, args, programId = new web3.PublicKey("hausS13jsjafwWwGqZTUQRmWyvyxn9EQpqMwV1PBBmk")) {
      var _a;
      const [data] = exports.withdrawFromFeeStruct.serialize(__spreadValues({
        instructionDiscriminator: exports.withdrawFromFeeInstructionDiscriminator
      }, args));
      const keys = [
        {
          pubkey: accounts.authority,
          isWritable: false,
          isSigner: true
        },
        {
          pubkey: accounts.feeWithdrawalDestination,
          isWritable: true,
          isSigner: false
        },
        {
          pubkey: accounts.auctionHouseFeeAccount,
          isWritable: true,
          isSigner: false
        },
        {
          pubkey: accounts.auctionHouse,
          isWritable: true,
          isSigner: false
        },
        {
          pubkey: (_a = accounts.systemProgram) !== null && _a !== void 0 ? _a : web3.SystemProgram.programId,
          isWritable: false,
          isSigner: false
        }
      ];
      if (accounts.anchorRemainingAccounts != null) {
        for (const acc of accounts.anchorRemainingAccounts) {
          keys.push(acc);
        }
      }
      const ix = new web3.TransactionInstruction({
        programId,
        keys,
        data
      });
      return ix;
    }
    exports.createWithdrawFromFeeInstruction = createWithdrawFromFeeInstruction2;
  }
});

// ../../node_modules/@metaplex-foundation/mpl-auction-house/dist/src/generated/instructions/withdrawFromTreasury.js
var require_withdrawFromTreasury = __commonJS({
  "../../node_modules/@metaplex-foundation/mpl-auction-house/dist/src/generated/instructions/withdrawFromTreasury.js"(exports) {
    "use strict";
    var __createBinding = exports && exports.__createBinding || (Object.create ? function(o2, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      var desc = Object.getOwnPropertyDescriptor(m, k);
      if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m[k];
        } };
      }
      Object.defineProperty(o2, k2, desc);
    } : function(o2, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      o2[k2] = m[k];
    });
    var __setModuleDefault = exports && exports.__setModuleDefault || (Object.create ? function(o2, v) {
      Object.defineProperty(o2, "default", { enumerable: true, value: v });
    } : function(o2, v) {
      o2["default"] = v;
    });
    var __importStar = exports && exports.__importStar || function(mod) {
      if (mod && mod.__esModule)
        return mod;
      var result = {};
      if (mod != null) {
        for (var k in mod)
          if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k))
            __createBinding(result, mod, k);
      }
      __setModuleDefault(result, mod);
      return result;
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.createWithdrawFromTreasuryInstruction = exports.withdrawFromTreasuryInstructionDiscriminator = exports.withdrawFromTreasuryStruct = void 0;
    var splToken = __importStar(require_cjs4());
    var beet9 = __importStar(require_beet4());
    var web3 = __importStar((init_index_browser_esm(), __toCommonJS(index_browser_esm_exports)));
    exports.withdrawFromTreasuryStruct = new beet9.BeetArgsStruct([
      ["instructionDiscriminator", beet9.uniformFixedSizeArray(beet9.u8, 8)],
      ["amount", beet9.u64]
    ], "WithdrawFromTreasuryInstructionArgs");
    exports.withdrawFromTreasuryInstructionDiscriminator = [0, 164, 86, 76, 56, 72, 12, 170];
    function createWithdrawFromTreasuryInstruction2(accounts, args, programId = new web3.PublicKey("hausS13jsjafwWwGqZTUQRmWyvyxn9EQpqMwV1PBBmk")) {
      var _a, _b;
      const [data] = exports.withdrawFromTreasuryStruct.serialize(__spreadValues({
        instructionDiscriminator: exports.withdrawFromTreasuryInstructionDiscriminator
      }, args));
      const keys = [
        {
          pubkey: accounts.treasuryMint,
          isWritable: false,
          isSigner: false
        },
        {
          pubkey: accounts.authority,
          isWritable: false,
          isSigner: true
        },
        {
          pubkey: accounts.treasuryWithdrawalDestination,
          isWritable: true,
          isSigner: false
        },
        {
          pubkey: accounts.auctionHouseTreasury,
          isWritable: true,
          isSigner: false
        },
        {
          pubkey: accounts.auctionHouse,
          isWritable: true,
          isSigner: false
        },
        {
          pubkey: (_a = accounts.tokenProgram) !== null && _a !== void 0 ? _a : splToken.TOKEN_PROGRAM_ID,
          isWritable: false,
          isSigner: false
        },
        {
          pubkey: (_b = accounts.systemProgram) !== null && _b !== void 0 ? _b : web3.SystemProgram.programId,
          isWritable: false,
          isSigner: false
        }
      ];
      if (accounts.anchorRemainingAccounts != null) {
        for (const acc of accounts.anchorRemainingAccounts) {
          keys.push(acc);
        }
      }
      const ix = new web3.TransactionInstruction({
        programId,
        keys,
        data
      });
      return ix;
    }
    exports.createWithdrawFromTreasuryInstruction = createWithdrawFromTreasuryInstruction2;
  }
});

// ../../node_modules/@metaplex-foundation/mpl-auction-house/dist/src/generated/instructions/index.js
var require_instructions16 = __commonJS({
  "../../node_modules/@metaplex-foundation/mpl-auction-house/dist/src/generated/instructions/index.js"(exports) {
    "use strict";
    var __createBinding = exports && exports.__createBinding || (Object.create ? function(o2, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      var desc = Object.getOwnPropertyDescriptor(m, k);
      if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m[k];
        } };
      }
      Object.defineProperty(o2, k2, desc);
    } : function(o2, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      o2[k2] = m[k];
    });
    var __exportStar = exports && exports.__exportStar || function(m, exports2) {
      for (var p in m)
        if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports2, p))
          __createBinding(exports2, m, p);
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    __exportStar(require_auctioneerBuy(), exports);
    __exportStar(require_auctioneerCancel(), exports);
    __exportStar(require_auctioneerDeposit(), exports);
    __exportStar(require_auctioneerExecutePartialSale(), exports);
    __exportStar(require_auctioneerExecuteSale(), exports);
    __exportStar(require_auctioneerPublicBuy(), exports);
    __exportStar(require_auctioneerSell(), exports);
    __exportStar(require_auctioneerWithdraw(), exports);
    __exportStar(require_buy(), exports);
    __exportStar(require_cancel(), exports);
    __exportStar(require_cancelBidReceipt(), exports);
    __exportStar(require_cancelListingReceipt(), exports);
    __exportStar(require_cancelRemainingAccounts(), exports);
    __exportStar(require_closeEscrowAccount(), exports);
    __exportStar(require_createAuctionHouse(), exports);
    __exportStar(require_delegateAuctioneer(), exports);
    __exportStar(require_deposit(), exports);
    __exportStar(require_executePartialSale(), exports);
    __exportStar(require_executeSale(), exports);
    __exportStar(require_executeSaleRemainingAccounts(), exports);
    __exportStar(require_printBidReceipt(), exports);
    __exportStar(require_printListingReceipt(), exports);
    __exportStar(require_printPurchaseReceipt(), exports);
    __exportStar(require_publicBuy(), exports);
    __exportStar(require_sell(), exports);
    __exportStar(require_sellRemainingAccounts(), exports);
    __exportStar(require_updateAuctionHouse(), exports);
    __exportStar(require_updateAuctioneer(), exports);
    __exportStar(require_withdraw3(), exports);
    __exportStar(require_withdrawFromFee(), exports);
    __exportStar(require_withdrawFromTreasury(), exports);
  }
});

// ../../node_modules/@metaplex-foundation/mpl-auction-house/dist/src/generated/types/BidType.js
var require_BidType = __commonJS({
  "../../node_modules/@metaplex-foundation/mpl-auction-house/dist/src/generated/types/BidType.js"(exports) {
    "use strict";
    var __createBinding = exports && exports.__createBinding || (Object.create ? function(o2, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      var desc = Object.getOwnPropertyDescriptor(m, k);
      if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m[k];
        } };
      }
      Object.defineProperty(o2, k2, desc);
    } : function(o2, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      o2[k2] = m[k];
    });
    var __setModuleDefault = exports && exports.__setModuleDefault || (Object.create ? function(o2, v) {
      Object.defineProperty(o2, "default", { enumerable: true, value: v });
    } : function(o2, v) {
      o2["default"] = v;
    });
    var __importStar = exports && exports.__importStar || function(mod) {
      if (mod && mod.__esModule)
        return mod;
      var result = {};
      if (mod != null) {
        for (var k in mod)
          if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k))
            __createBinding(result, mod, k);
      }
      __setModuleDefault(result, mod);
      return result;
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.bidTypeBeet = exports.BidType = void 0;
    var beet9 = __importStar(require_beet4());
    var BidType;
    (function(BidType2) {
      BidType2[BidType2["PublicSale"] = 0] = "PublicSale";
      BidType2[BidType2["PrivateSale"] = 1] = "PrivateSale";
      BidType2[BidType2["AuctioneerPublicSale"] = 2] = "AuctioneerPublicSale";
      BidType2[BidType2["AuctioneerPrivateSale"] = 3] = "AuctioneerPrivateSale";
    })(BidType = exports.BidType || (exports.BidType = {}));
    exports.bidTypeBeet = beet9.fixedScalarEnum(BidType);
  }
});

// ../../node_modules/@metaplex-foundation/mpl-auction-house/dist/src/generated/types/CancelType.js
var require_CancelType = __commonJS({
  "../../node_modules/@metaplex-foundation/mpl-auction-house/dist/src/generated/types/CancelType.js"(exports) {
    "use strict";
    var __createBinding = exports && exports.__createBinding || (Object.create ? function(o2, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      var desc = Object.getOwnPropertyDescriptor(m, k);
      if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m[k];
        } };
      }
      Object.defineProperty(o2, k2, desc);
    } : function(o2, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      o2[k2] = m[k];
    });
    var __setModuleDefault = exports && exports.__setModuleDefault || (Object.create ? function(o2, v) {
      Object.defineProperty(o2, "default", { enumerable: true, value: v });
    } : function(o2, v) {
      o2["default"] = v;
    });
    var __importStar = exports && exports.__importStar || function(mod) {
      if (mod && mod.__esModule)
        return mod;
      var result = {};
      if (mod != null) {
        for (var k in mod)
          if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k))
            __createBinding(result, mod, k);
      }
      __setModuleDefault(result, mod);
      return result;
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.cancelTypeBeet = exports.CancelType = void 0;
    var beet9 = __importStar(require_beet4());
    var CancelType;
    (function(CancelType2) {
      CancelType2[CancelType2["Cancel"] = 0] = "Cancel";
      CancelType2[CancelType2["AuctioneerCancel"] = 1] = "AuctioneerCancel";
    })(CancelType = exports.CancelType || (exports.CancelType = {}));
    exports.cancelTypeBeet = beet9.fixedScalarEnum(CancelType);
  }
});

// ../../node_modules/@metaplex-foundation/mpl-auction-house/dist/src/generated/types/ListingType.js
var require_ListingType = __commonJS({
  "../../node_modules/@metaplex-foundation/mpl-auction-house/dist/src/generated/types/ListingType.js"(exports) {
    "use strict";
    var __createBinding = exports && exports.__createBinding || (Object.create ? function(o2, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      var desc = Object.getOwnPropertyDescriptor(m, k);
      if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m[k];
        } };
      }
      Object.defineProperty(o2, k2, desc);
    } : function(o2, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      o2[k2] = m[k];
    });
    var __setModuleDefault = exports && exports.__setModuleDefault || (Object.create ? function(o2, v) {
      Object.defineProperty(o2, "default", { enumerable: true, value: v });
    } : function(o2, v) {
      o2["default"] = v;
    });
    var __importStar = exports && exports.__importStar || function(mod) {
      if (mod && mod.__esModule)
        return mod;
      var result = {};
      if (mod != null) {
        for (var k in mod)
          if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k))
            __createBinding(result, mod, k);
      }
      __setModuleDefault(result, mod);
      return result;
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.listingTypeBeet = exports.ListingType = void 0;
    var beet9 = __importStar(require_beet4());
    var ListingType;
    (function(ListingType2) {
      ListingType2[ListingType2["Sell"] = 0] = "Sell";
      ListingType2[ListingType2["AuctioneerSell"] = 1] = "AuctioneerSell";
    })(ListingType = exports.ListingType || (exports.ListingType = {}));
    exports.listingTypeBeet = beet9.fixedScalarEnum(ListingType);
  }
});

// ../../node_modules/@metaplex-foundation/mpl-auction-house/dist/src/generated/types/PurchaseType.js
var require_PurchaseType = __commonJS({
  "../../node_modules/@metaplex-foundation/mpl-auction-house/dist/src/generated/types/PurchaseType.js"(exports) {
    "use strict";
    var __createBinding = exports && exports.__createBinding || (Object.create ? function(o2, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      var desc = Object.getOwnPropertyDescriptor(m, k);
      if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m[k];
        } };
      }
      Object.defineProperty(o2, k2, desc);
    } : function(o2, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      o2[k2] = m[k];
    });
    var __setModuleDefault = exports && exports.__setModuleDefault || (Object.create ? function(o2, v) {
      Object.defineProperty(o2, "default", { enumerable: true, value: v });
    } : function(o2, v) {
      o2["default"] = v;
    });
    var __importStar = exports && exports.__importStar || function(mod) {
      if (mod && mod.__esModule)
        return mod;
      var result = {};
      if (mod != null) {
        for (var k in mod)
          if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k))
            __createBinding(result, mod, k);
      }
      __setModuleDefault(result, mod);
      return result;
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.purchaseTypeBeet = exports.PurchaseType = void 0;
    var beet9 = __importStar(require_beet4());
    var PurchaseType;
    (function(PurchaseType2) {
      PurchaseType2[PurchaseType2["ExecuteSale"] = 0] = "ExecuteSale";
      PurchaseType2[PurchaseType2["AuctioneerExecuteSale"] = 1] = "AuctioneerExecuteSale";
    })(PurchaseType = exports.PurchaseType || (exports.PurchaseType = {}));
    exports.purchaseTypeBeet = beet9.fixedScalarEnum(PurchaseType);
  }
});

// ../../node_modules/@metaplex-foundation/mpl-auction-house/dist/src/generated/types/index.js
var require_types14 = __commonJS({
  "../../node_modules/@metaplex-foundation/mpl-auction-house/dist/src/generated/types/index.js"(exports) {
    "use strict";
    var __createBinding = exports && exports.__createBinding || (Object.create ? function(o2, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      var desc = Object.getOwnPropertyDescriptor(m, k);
      if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m[k];
        } };
      }
      Object.defineProperty(o2, k2, desc);
    } : function(o2, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      o2[k2] = m[k];
    });
    var __exportStar = exports && exports.__exportStar || function(m, exports2) {
      for (var p in m)
        if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports2, p))
          __createBinding(exports2, m, p);
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    __exportStar(require_AuthorityScope(), exports);
    __exportStar(require_BidType(), exports);
    __exportStar(require_CancelType(), exports);
    __exportStar(require_ListingType(), exports);
    __exportStar(require_PurchaseType(), exports);
  }
});

// ../../node_modules/@metaplex-foundation/mpl-auction-house/dist/src/generated/index.js
var require_generated7 = __commonJS({
  "../../node_modules/@metaplex-foundation/mpl-auction-house/dist/src/generated/index.js"(exports) {
    "use strict";
    var __createBinding = exports && exports.__createBinding || (Object.create ? function(o2, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      var desc = Object.getOwnPropertyDescriptor(m, k);
      if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m[k];
        } };
      }
      Object.defineProperty(o2, k2, desc);
    } : function(o2, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      o2[k2] = m[k];
    });
    var __exportStar = exports && exports.__exportStar || function(m, exports2) {
      for (var p in m)
        if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports2, p))
          __createBinding(exports2, m, p);
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.PROGRAM_ID = exports.PROGRAM_ADDRESS = void 0;
    var web3_js_1 = (init_index_browser_esm(), __toCommonJS(index_browser_esm_exports));
    __exportStar(require_accounts7(), exports);
    __exportStar(require_errors15(), exports);
    __exportStar(require_instructions16(), exports);
    __exportStar(require_types14(), exports);
    exports.PROGRAM_ADDRESS = "hausS13jsjafwWwGqZTUQRmWyvyxn9EQpqMwV1PBBmk";
    exports.PROGRAM_ID = new web3_js_1.PublicKey(exports.PROGRAM_ADDRESS);
  }
});

// ../../node_modules/@metaplex-foundation/mpl-auction-house/dist/src/errors.js
var require_errors16 = __commonJS({
  "../../node_modules/@metaplex-foundation/mpl-auction-house/dist/src/errors.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.cusper = void 0;
    var cusper_1 = require_cusper();
    var generated_1 = require_generated7();
    exports.cusper = (0, cusper_1.initCusper)(generated_1.errorFromCode);
  }
});

// ../../node_modules/@metaplex-foundation/mpl-auction-house/dist/src/mpl-auction-house.js
var require_mpl_auction_house = __commonJS({
  "../../node_modules/@metaplex-foundation/mpl-auction-house/dist/src/mpl-auction-house.js"(exports) {
    "use strict";
    var __createBinding = exports && exports.__createBinding || (Object.create ? function(o2, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      var desc = Object.getOwnPropertyDescriptor(m, k);
      if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m[k];
        } };
      }
      Object.defineProperty(o2, k2, desc);
    } : function(o2, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      o2[k2] = m[k];
    });
    var __exportStar = exports && exports.__exportStar || function(m, exports2) {
      for (var p in m)
        if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports2, p))
          __createBinding(exports2, m, p);
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    __exportStar(require_errors16(), exports);
    __exportStar(require_generated7(), exports);
  }
});

// ../../node_modules/buffer-reverse/index.js
var require_buffer_reverse = __commonJS({
  "../../node_modules/buffer-reverse/index.js"(exports, module) {
    module.exports = function reverse(src) {
      var buffer2 = new Buffer(src.length);
      for (var i = 0, j = src.length - 1; i <= j; ++i, --j) {
        buffer2[i] = src[j];
        buffer2[j] = src[i];
      }
      return buffer2;
    };
  }
});

// ../../node_modules/crypto-js/core.js
var require_core = __commonJS({
  "../../node_modules/crypto-js/core.js"(exports, module) {
    (function(root, factory) {
      if (typeof exports === "object") {
        module.exports = exports = factory();
      } else if (typeof define === "function" && define.amd) {
        define([], factory);
      } else {
        root.CryptoJS = factory();
      }
    })(exports, function() {
      var CryptoJS = CryptoJS || function(Math2, undefined2) {
        var crypto2;
        if (typeof window !== "undefined" && window.crypto) {
          crypto2 = window.crypto;
        }
        if (typeof self !== "undefined" && self.crypto) {
          crypto2 = self.crypto;
        }
        if (typeof globalThis !== "undefined" && globalThis.crypto) {
          crypto2 = globalThis.crypto;
        }
        if (!crypto2 && typeof window !== "undefined" && window.msCrypto) {
          crypto2 = window.msCrypto;
        }
        if (!crypto2 && typeof global !== "undefined" && global.crypto) {
          crypto2 = global.crypto;
        }
        if (!crypto2 && typeof __require === "function") {
          try {
            crypto2 = require_crypto();
          } catch (err) {
          }
        }
        var cryptoSecureRandomInt = function() {
          if (crypto2) {
            if (typeof crypto2.getRandomValues === "function") {
              try {
                return crypto2.getRandomValues(new Uint32Array(1))[0];
              } catch (err) {
              }
            }
            if (typeof crypto2.randomBytes === "function") {
              try {
                return crypto2.randomBytes(4).readInt32LE();
              } catch (err) {
              }
            }
          }
          throw new Error("Native crypto module could not be used to get secure random number.");
        };
        var create = Object.create || function() {
          function F() {
          }
          return function(obj) {
            var subtype;
            F.prototype = obj;
            subtype = new F();
            F.prototype = null;
            return subtype;
          };
        }();
        var C = {};
        var C_lib = C.lib = {};
        var Base = C_lib.Base = function() {
          return {
            /**
             * Creates a new object that inherits from this object.
             *
             * @param {Object} overrides Properties to copy into the new object.
             *
             * @return {Object} The new object.
             *
             * @static
             *
             * @example
             *
             *     var MyType = CryptoJS.lib.Base.extend({
             *         field: 'value',
             *
             *         method: function () {
             *         }
             *     });
             */
            extend: function(overrides) {
              var subtype = create(this);
              if (overrides) {
                subtype.mixIn(overrides);
              }
              if (!subtype.hasOwnProperty("init") || this.init === subtype.init) {
                subtype.init = function() {
                  subtype.$super.init.apply(this, arguments);
                };
              }
              subtype.init.prototype = subtype;
              subtype.$super = this;
              return subtype;
            },
            /**
             * Extends this object and runs the init method.
             * Arguments to create() will be passed to init().
             *
             * @return {Object} The new object.
             *
             * @static
             *
             * @example
             *
             *     var instance = MyType.create();
             */
            create: function() {
              var instance = this.extend();
              instance.init.apply(instance, arguments);
              return instance;
            },
            /**
             * Initializes a newly created object.
             * Override this method to add some logic when your objects are created.
             *
             * @example
             *
             *     var MyType = CryptoJS.lib.Base.extend({
             *         init: function () {
             *             // ...
             *         }
             *     });
             */
            init: function() {
            },
            /**
             * Copies properties into this object.
             *
             * @param {Object} properties The properties to mix in.
             *
             * @example
             *
             *     MyType.mixIn({
             *         field: 'value'
             *     });
             */
            mixIn: function(properties) {
              for (var propertyName in properties) {
                if (properties.hasOwnProperty(propertyName)) {
                  this[propertyName] = properties[propertyName];
                }
              }
              if (properties.hasOwnProperty("toString")) {
                this.toString = properties.toString;
              }
            },
            /**
             * Creates a copy of this object.
             *
             * @return {Object} The clone.
             *
             * @example
             *
             *     var clone = instance.clone();
             */
            clone: function() {
              return this.init.prototype.extend(this);
            }
          };
        }();
        var WordArray = C_lib.WordArray = Base.extend({
          /**
           * Initializes a newly created word array.
           *
           * @param {Array} words (Optional) An array of 32-bit words.
           * @param {number} sigBytes (Optional) The number of significant bytes in the words.
           *
           * @example
           *
           *     var wordArray = CryptoJS.lib.WordArray.create();
           *     var wordArray = CryptoJS.lib.WordArray.create([0x00010203, 0x04050607]);
           *     var wordArray = CryptoJS.lib.WordArray.create([0x00010203, 0x04050607], 6);
           */
          init: function(words, sigBytes) {
            words = this.words = words || [];
            if (sigBytes != undefined2) {
              this.sigBytes = sigBytes;
            } else {
              this.sigBytes = words.length * 4;
            }
          },
          /**
           * Converts this word array to a string.
           *
           * @param {Encoder} encoder (Optional) The encoding strategy to use. Default: CryptoJS.enc.Hex
           *
           * @return {string} The stringified word array.
           *
           * @example
           *
           *     var string = wordArray + '';
           *     var string = wordArray.toString();
           *     var string = wordArray.toString(CryptoJS.enc.Utf8);
           */
          toString: function(encoder) {
            return (encoder || Hex).stringify(this);
          },
          /**
           * Concatenates a word array to this word array.
           *
           * @param {WordArray} wordArray The word array to append.
           *
           * @return {WordArray} This word array.
           *
           * @example
           *
           *     wordArray1.concat(wordArray2);
           */
          concat: function(wordArray) {
            var thisWords = this.words;
            var thatWords = wordArray.words;
            var thisSigBytes = this.sigBytes;
            var thatSigBytes = wordArray.sigBytes;
            this.clamp();
            if (thisSigBytes % 4) {
              for (var i = 0; i < thatSigBytes; i++) {
                var thatByte = thatWords[i >>> 2] >>> 24 - i % 4 * 8 & 255;
                thisWords[thisSigBytes + i >>> 2] |= thatByte << 24 - (thisSigBytes + i) % 4 * 8;
              }
            } else {
              for (var j = 0; j < thatSigBytes; j += 4) {
                thisWords[thisSigBytes + j >>> 2] = thatWords[j >>> 2];
              }
            }
            this.sigBytes += thatSigBytes;
            return this;
          },
          /**
           * Removes insignificant bits.
           *
           * @example
           *
           *     wordArray.clamp();
           */
          clamp: function() {
            var words = this.words;
            var sigBytes = this.sigBytes;
            words[sigBytes >>> 2] &= 4294967295 << 32 - sigBytes % 4 * 8;
            words.length = Math2.ceil(sigBytes / 4);
          },
          /**
           * Creates a copy of this word array.
           *
           * @return {WordArray} The clone.
           *
           * @example
           *
           *     var clone = wordArray.clone();
           */
          clone: function() {
            var clone2 = Base.clone.call(this);
            clone2.words = this.words.slice(0);
            return clone2;
          },
          /**
           * Creates a word array filled with random bytes.
           *
           * @param {number} nBytes The number of random bytes to generate.
           *
           * @return {WordArray} The random word array.
           *
           * @static
           *
           * @example
           *
           *     var wordArray = CryptoJS.lib.WordArray.random(16);
           */
          random: function(nBytes) {
            var words = [];
            for (var i = 0; i < nBytes; i += 4) {
              words.push(cryptoSecureRandomInt());
            }
            return new WordArray.init(words, nBytes);
          }
        });
        var C_enc = C.enc = {};
        var Hex = C_enc.Hex = {
          /**
           * Converts a word array to a hex string.
           *
           * @param {WordArray} wordArray The word array.
           *
           * @return {string} The hex string.
           *
           * @static
           *
           * @example
           *
           *     var hexString = CryptoJS.enc.Hex.stringify(wordArray);
           */
          stringify: function(wordArray) {
            var words = wordArray.words;
            var sigBytes = wordArray.sigBytes;
            var hexChars = [];
            for (var i = 0; i < sigBytes; i++) {
              var bite = words[i >>> 2] >>> 24 - i % 4 * 8 & 255;
              hexChars.push((bite >>> 4).toString(16));
              hexChars.push((bite & 15).toString(16));
            }
            return hexChars.join("");
          },
          /**
           * Converts a hex string to a word array.
           *
           * @param {string} hexStr The hex string.
           *
           * @return {WordArray} The word array.
           *
           * @static
           *
           * @example
           *
           *     var wordArray = CryptoJS.enc.Hex.parse(hexString);
           */
          parse: function(hexStr) {
            var hexStrLength = hexStr.length;
            var words = [];
            for (var i = 0; i < hexStrLength; i += 2) {
              words[i >>> 3] |= parseInt(hexStr.substr(i, 2), 16) << 24 - i % 8 * 4;
            }
            return new WordArray.init(words, hexStrLength / 2);
          }
        };
        var Latin1 = C_enc.Latin1 = {
          /**
           * Converts a word array to a Latin1 string.
           *
           * @param {WordArray} wordArray The word array.
           *
           * @return {string} The Latin1 string.
           *
           * @static
           *
           * @example
           *
           *     var latin1String = CryptoJS.enc.Latin1.stringify(wordArray);
           */
          stringify: function(wordArray) {
            var words = wordArray.words;
            var sigBytes = wordArray.sigBytes;
            var latin1Chars = [];
            for (var i = 0; i < sigBytes; i++) {
              var bite = words[i >>> 2] >>> 24 - i % 4 * 8 & 255;
              latin1Chars.push(String.fromCharCode(bite));
            }
            return latin1Chars.join("");
          },
          /**
           * Converts a Latin1 string to a word array.
           *
           * @param {string} latin1Str The Latin1 string.
           *
           * @return {WordArray} The word array.
           *
           * @static
           *
           * @example
           *
           *     var wordArray = CryptoJS.enc.Latin1.parse(latin1String);
           */
          parse: function(latin1Str) {
            var latin1StrLength = latin1Str.length;
            var words = [];
            for (var i = 0; i < latin1StrLength; i++) {
              words[i >>> 2] |= (latin1Str.charCodeAt(i) & 255) << 24 - i % 4 * 8;
            }
            return new WordArray.init(words, latin1StrLength);
          }
        };
        var Utf8 = C_enc.Utf8 = {
          /**
           * Converts a word array to a UTF-8 string.
           *
           * @param {WordArray} wordArray The word array.
           *
           * @return {string} The UTF-8 string.
           *
           * @static
           *
           * @example
           *
           *     var utf8String = CryptoJS.enc.Utf8.stringify(wordArray);
           */
          stringify: function(wordArray) {
            try {
              return decodeURIComponent(escape(Latin1.stringify(wordArray)));
            } catch (e2) {
              throw new Error("Malformed UTF-8 data");
            }
          },
          /**
           * Converts a UTF-8 string to a word array.
           *
           * @param {string} utf8Str The UTF-8 string.
           *
           * @return {WordArray} The word array.
           *
           * @static
           *
           * @example
           *
           *     var wordArray = CryptoJS.enc.Utf8.parse(utf8String);
           */
          parse: function(utf8Str) {
            return Latin1.parse(unescape(encodeURIComponent(utf8Str)));
          }
        };
        var BufferedBlockAlgorithm = C_lib.BufferedBlockAlgorithm = Base.extend({
          /**
           * Resets this block algorithm's data buffer to its initial state.
           *
           * @example
           *
           *     bufferedBlockAlgorithm.reset();
           */
          reset: function() {
            this._data = new WordArray.init();
            this._nDataBytes = 0;
          },
          /**
           * Adds new data to this block algorithm's buffer.
           *
           * @param {WordArray|string} data The data to append. Strings are converted to a WordArray using UTF-8.
           *
           * @example
           *
           *     bufferedBlockAlgorithm._append('data');
           *     bufferedBlockAlgorithm._append(wordArray);
           */
          _append: function(data) {
            if (typeof data == "string") {
              data = Utf8.parse(data);
            }
            this._data.concat(data);
            this._nDataBytes += data.sigBytes;
          },
          /**
           * Processes available data blocks.
           *
           * This method invokes _doProcessBlock(offset), which must be implemented by a concrete subtype.
           *
           * @param {boolean} doFlush Whether all blocks and partial blocks should be processed.
           *
           * @return {WordArray} The processed data.
           *
           * @example
           *
           *     var processedData = bufferedBlockAlgorithm._process();
           *     var processedData = bufferedBlockAlgorithm._process(!!'flush');
           */
          _process: function(doFlush) {
            var processedWords;
            var data = this._data;
            var dataWords = data.words;
            var dataSigBytes = data.sigBytes;
            var blockSize = this.blockSize;
            var blockSizeBytes = blockSize * 4;
            var nBlocksReady = dataSigBytes / blockSizeBytes;
            if (doFlush) {
              nBlocksReady = Math2.ceil(nBlocksReady);
            } else {
              nBlocksReady = Math2.max((nBlocksReady | 0) - this._minBufferSize, 0);
            }
            var nWordsReady = nBlocksReady * blockSize;
            var nBytesReady = Math2.min(nWordsReady * 4, dataSigBytes);
            if (nWordsReady) {
              for (var offset = 0; offset < nWordsReady; offset += blockSize) {
                this._doProcessBlock(dataWords, offset);
              }
              processedWords = dataWords.splice(0, nWordsReady);
              data.sigBytes -= nBytesReady;
            }
            return new WordArray.init(processedWords, nBytesReady);
          },
          /**
           * Creates a copy of this object.
           *
           * @return {Object} The clone.
           *
           * @example
           *
           *     var clone = bufferedBlockAlgorithm.clone();
           */
          clone: function() {
            var clone2 = Base.clone.call(this);
            clone2._data = this._data.clone();
            return clone2;
          },
          _minBufferSize: 0
        });
        var Hasher = C_lib.Hasher = BufferedBlockAlgorithm.extend({
          /**
           * Configuration options.
           */
          cfg: Base.extend(),
          /**
           * Initializes a newly created hasher.
           *
           * @param {Object} cfg (Optional) The configuration options to use for this hash computation.
           *
           * @example
           *
           *     var hasher = CryptoJS.algo.SHA256.create();
           */
          init: function(cfg) {
            this.cfg = this.cfg.extend(cfg);
            this.reset();
          },
          /**
           * Resets this hasher to its initial state.
           *
           * @example
           *
           *     hasher.reset();
           */
          reset: function() {
            BufferedBlockAlgorithm.reset.call(this);
            this._doReset();
          },
          /**
           * Updates this hasher with a message.
           *
           * @param {WordArray|string} messageUpdate The message to append.
           *
           * @return {Hasher} This hasher.
           *
           * @example
           *
           *     hasher.update('message');
           *     hasher.update(wordArray);
           */
          update: function(messageUpdate) {
            this._append(messageUpdate);
            this._process();
            return this;
          },
          /**
           * Finalizes the hash computation.
           * Note that the finalize operation is effectively a destructive, read-once operation.
           *
           * @param {WordArray|string} messageUpdate (Optional) A final message update.
           *
           * @return {WordArray} The hash.
           *
           * @example
           *
           *     var hash = hasher.finalize();
           *     var hash = hasher.finalize('message');
           *     var hash = hasher.finalize(wordArray);
           */
          finalize: function(messageUpdate) {
            if (messageUpdate) {
              this._append(messageUpdate);
            }
            var hash = this._doFinalize();
            return hash;
          },
          blockSize: 512 / 32,
          /**
           * Creates a shortcut function to a hasher's object interface.
           *
           * @param {Hasher} hasher The hasher to create a helper for.
           *
           * @return {Function} The shortcut function.
           *
           * @static
           *
           * @example
           *
           *     var SHA256 = CryptoJS.lib.Hasher._createHelper(CryptoJS.algo.SHA256);
           */
          _createHelper: function(hasher) {
            return function(message, cfg) {
              return new hasher.init(cfg).finalize(message);
            };
          },
          /**
           * Creates a shortcut function to the HMAC's object interface.
           *
           * @param {Hasher} hasher The hasher to use in this HMAC helper.
           *
           * @return {Function} The shortcut function.
           *
           * @static
           *
           * @example
           *
           *     var HmacSHA256 = CryptoJS.lib.Hasher._createHmacHelper(CryptoJS.algo.SHA256);
           */
          _createHmacHelper: function(hasher) {
            return function(message, key) {
              return new C_algo.HMAC.init(hasher, key).finalize(message);
            };
          }
        });
        var C_algo = C.algo = {};
        return C;
      }(Math);
      return CryptoJS;
    });
  }
});

// ../../node_modules/crypto-js/sha256.js
var require_sha256 = __commonJS({
  "../../node_modules/crypto-js/sha256.js"(exports, module) {
    (function(root, factory) {
      if (typeof exports === "object") {
        module.exports = exports = factory(require_core());
      } else if (typeof define === "function" && define.amd) {
        define(["./core"], factory);
      } else {
        factory(root.CryptoJS);
      }
    })(exports, function(CryptoJS) {
      (function(Math2) {
        var C = CryptoJS;
        var C_lib = C.lib;
        var WordArray = C_lib.WordArray;
        var Hasher = C_lib.Hasher;
        var C_algo = C.algo;
        var H = [];
        var K = [];
        (function() {
          function isPrime(n2) {
            var sqrtN = Math2.sqrt(n2);
            for (var factor = 2; factor <= sqrtN; factor++) {
              if (!(n2 % factor)) {
                return false;
              }
            }
            return true;
          }
          function getFractionalBits(n2) {
            return (n2 - (n2 | 0)) * 4294967296 | 0;
          }
          var n = 2;
          var nPrime = 0;
          while (nPrime < 64) {
            if (isPrime(n)) {
              if (nPrime < 8) {
                H[nPrime] = getFractionalBits(Math2.pow(n, 1 / 2));
              }
              K[nPrime] = getFractionalBits(Math2.pow(n, 1 / 3));
              nPrime++;
            }
            n++;
          }
        })();
        var W = [];
        var SHA256 = C_algo.SHA256 = Hasher.extend({
          _doReset: function() {
            this._hash = new WordArray.init(H.slice(0));
          },
          _doProcessBlock: function(M, offset) {
            var H2 = this._hash.words;
            var a = H2[0];
            var b = H2[1];
            var c = H2[2];
            var d = H2[3];
            var e2 = H2[4];
            var f = H2[5];
            var g = H2[6];
            var h = H2[7];
            for (var i = 0; i < 64; i++) {
              if (i < 16) {
                W[i] = M[offset + i] | 0;
              } else {
                var gamma0x = W[i - 15];
                var gamma0 = (gamma0x << 25 | gamma0x >>> 7) ^ (gamma0x << 14 | gamma0x >>> 18) ^ gamma0x >>> 3;
                var gamma1x = W[i - 2];
                var gamma1 = (gamma1x << 15 | gamma1x >>> 17) ^ (gamma1x << 13 | gamma1x >>> 19) ^ gamma1x >>> 10;
                W[i] = gamma0 + W[i - 7] + gamma1 + W[i - 16];
              }
              var ch = e2 & f ^ ~e2 & g;
              var maj = a & b ^ a & c ^ b & c;
              var sigma0 = (a << 30 | a >>> 2) ^ (a << 19 | a >>> 13) ^ (a << 10 | a >>> 22);
              var sigma1 = (e2 << 26 | e2 >>> 6) ^ (e2 << 21 | e2 >>> 11) ^ (e2 << 7 | e2 >>> 25);
              var t1 = h + sigma1 + ch + K[i] + W[i];
              var t2 = sigma0 + maj;
              h = g;
              g = f;
              f = e2;
              e2 = d + t1 | 0;
              d = c;
              c = b;
              b = a;
              a = t1 + t2 | 0;
            }
            H2[0] = H2[0] + a | 0;
            H2[1] = H2[1] + b | 0;
            H2[2] = H2[2] + c | 0;
            H2[3] = H2[3] + d | 0;
            H2[4] = H2[4] + e2 | 0;
            H2[5] = H2[5] + f | 0;
            H2[6] = H2[6] + g | 0;
            H2[7] = H2[7] + h | 0;
          },
          _doFinalize: function() {
            var data = this._data;
            var dataWords = data.words;
            var nBitsTotal = this._nDataBytes * 8;
            var nBitsLeft = data.sigBytes * 8;
            dataWords[nBitsLeft >>> 5] |= 128 << 24 - nBitsLeft % 32;
            dataWords[(nBitsLeft + 64 >>> 9 << 4) + 14] = Math2.floor(nBitsTotal / 4294967296);
            dataWords[(nBitsLeft + 64 >>> 9 << 4) + 15] = nBitsTotal;
            data.sigBytes = dataWords.length * 4;
            this._process();
            return this._hash;
          },
          clone: function() {
            var clone2 = Hasher.clone.call(this);
            clone2._hash = this._hash.clone();
            return clone2;
          }
        });
        C.SHA256 = Hasher._createHelper(SHA256);
        C.HmacSHA256 = Hasher._createHmacHelper(SHA256);
      })(Math);
      return CryptoJS.SHA256;
    });
  }
});

// ../../node_modules/treeify/treeify.js
var require_treeify = __commonJS({
  "../../node_modules/treeify/treeify.js"(exports, module) {
    (function(root, factory) {
      if (typeof exports === "object") {
        module.exports = factory();
      } else if (typeof define === "function" && define.amd) {
        define(factory);
      } else {
        root.treeify = factory();
      }
    })(exports, function() {
      function makePrefix(key, last) {
        var str = last ? "└" : "├";
        if (key) {
          str += "─ ";
        } else {
          str += "──┐";
        }
        return str;
      }
      function filterKeys(obj, hideFunctions) {
        var keys = [];
        for (var branch in obj) {
          if (!obj.hasOwnProperty(branch)) {
            continue;
          }
          if (hideFunctions && typeof obj[branch] === "function") {
            continue;
          }
          keys.push(branch);
        }
        return keys;
      }
      function growBranch(key, root, last, lastStates, showValues, hideFunctions, callback) {
        var line = "", index = 0, lastKey, circular, lastStatesCopy = lastStates.slice(0);
        if (lastStatesCopy.push([root, last]) && lastStates.length > 0) {
          lastStates.forEach(function(lastState, idx) {
            if (idx > 0) {
              line += (lastState[1] ? " " : "│") + "  ";
            }
            if (!circular && lastState[0] === root) {
              circular = true;
            }
          });
          line += makePrefix(key, last) + key;
          showValues && (typeof root !== "object" || root instanceof Date) && (line += ": " + root);
          circular && (line += " (circular ref.)");
          callback(line);
        }
        if (!circular && typeof root === "object") {
          var keys = filterKeys(root, hideFunctions);
          keys.forEach(function(branch) {
            lastKey = ++index === keys.length;
            growBranch(branch, root[branch], lastKey, lastStatesCopy, showValues, hideFunctions, callback);
          });
        }
      }
      ;
      var Treeify = {};
      Treeify.asLines = function(obj, showValues, hideFunctions, lineCallback) {
        var hideFunctionsArg = typeof hideFunctions !== "function" ? hideFunctions : false;
        growBranch(".", obj, false, [], showValues, hideFunctionsArg, lineCallback || hideFunctions);
      };
      Treeify.asTree = function(obj, showValues, hideFunctions) {
        var tree = "";
        growBranch(".", obj, false, [], showValues, hideFunctions, function(line) {
          tree += line + "\n";
        });
        return tree;
      };
      return Treeify;
    });
  }
});

// ../../node_modules/crypto-js/x64-core.js
var require_x64_core = __commonJS({
  "../../node_modules/crypto-js/x64-core.js"(exports, module) {
    (function(root, factory) {
      if (typeof exports === "object") {
        module.exports = exports = factory(require_core());
      } else if (typeof define === "function" && define.amd) {
        define(["./core"], factory);
      } else {
        factory(root.CryptoJS);
      }
    })(exports, function(CryptoJS) {
      (function(undefined2) {
        var C = CryptoJS;
        var C_lib = C.lib;
        var Base = C_lib.Base;
        var X32WordArray = C_lib.WordArray;
        var C_x64 = C.x64 = {};
        var X64Word = C_x64.Word = Base.extend({
          /**
           * Initializes a newly created 64-bit word.
           *
           * @param {number} high The high 32 bits.
           * @param {number} low The low 32 bits.
           *
           * @example
           *
           *     var x64Word = CryptoJS.x64.Word.create(0x00010203, 0x04050607);
           */
          init: function(high, low) {
            this.high = high;
            this.low = low;
          }
          /**
           * Bitwise NOTs this word.
           *
           * @return {X64Word} A new x64-Word object after negating.
           *
           * @example
           *
           *     var negated = x64Word.not();
           */
          // not: function () {
          // var high = ~this.high;
          // var low = ~this.low;
          // return X64Word.create(high, low);
          // },
          /**
           * Bitwise ANDs this word with the passed word.
           *
           * @param {X64Word} word The x64-Word to AND with this word.
           *
           * @return {X64Word} A new x64-Word object after ANDing.
           *
           * @example
           *
           *     var anded = x64Word.and(anotherX64Word);
           */
          // and: function (word) {
          // var high = this.high & word.high;
          // var low = this.low & word.low;
          // return X64Word.create(high, low);
          // },
          /**
           * Bitwise ORs this word with the passed word.
           *
           * @param {X64Word} word The x64-Word to OR with this word.
           *
           * @return {X64Word} A new x64-Word object after ORing.
           *
           * @example
           *
           *     var ored = x64Word.or(anotherX64Word);
           */
          // or: function (word) {
          // var high = this.high | word.high;
          // var low = this.low | word.low;
          // return X64Word.create(high, low);
          // },
          /**
           * Bitwise XORs this word with the passed word.
           *
           * @param {X64Word} word The x64-Word to XOR with this word.
           *
           * @return {X64Word} A new x64-Word object after XORing.
           *
           * @example
           *
           *     var xored = x64Word.xor(anotherX64Word);
           */
          // xor: function (word) {
          // var high = this.high ^ word.high;
          // var low = this.low ^ word.low;
          // return X64Word.create(high, low);
          // },
          /**
           * Shifts this word n bits to the left.
           *
           * @param {number} n The number of bits to shift.
           *
           * @return {X64Word} A new x64-Word object after shifting.
           *
           * @example
           *
           *     var shifted = x64Word.shiftL(25);
           */
          // shiftL: function (n) {
          // if (n < 32) {
          // var high = (this.high << n) | (this.low >>> (32 - n));
          // var low = this.low << n;
          // } else {
          // var high = this.low << (n - 32);
          // var low = 0;
          // }
          // return X64Word.create(high, low);
          // },
          /**
           * Shifts this word n bits to the right.
           *
           * @param {number} n The number of bits to shift.
           *
           * @return {X64Word} A new x64-Word object after shifting.
           *
           * @example
           *
           *     var shifted = x64Word.shiftR(7);
           */
          // shiftR: function (n) {
          // if (n < 32) {
          // var low = (this.low >>> n) | (this.high << (32 - n));
          // var high = this.high >>> n;
          // } else {
          // var low = this.high >>> (n - 32);
          // var high = 0;
          // }
          // return X64Word.create(high, low);
          // },
          /**
           * Rotates this word n bits to the left.
           *
           * @param {number} n The number of bits to rotate.
           *
           * @return {X64Word} A new x64-Word object after rotating.
           *
           * @example
           *
           *     var rotated = x64Word.rotL(25);
           */
          // rotL: function (n) {
          // return this.shiftL(n).or(this.shiftR(64 - n));
          // },
          /**
           * Rotates this word n bits to the right.
           *
           * @param {number} n The number of bits to rotate.
           *
           * @return {X64Word} A new x64-Word object after rotating.
           *
           * @example
           *
           *     var rotated = x64Word.rotR(7);
           */
          // rotR: function (n) {
          // return this.shiftR(n).or(this.shiftL(64 - n));
          // },
          /**
           * Adds this word with the passed word.
           *
           * @param {X64Word} word The x64-Word to add with this word.
           *
           * @return {X64Word} A new x64-Word object after adding.
           *
           * @example
           *
           *     var added = x64Word.add(anotherX64Word);
           */
          // add: function (word) {
          // var low = (this.low + word.low) | 0;
          // var carry = (low >>> 0) < (this.low >>> 0) ? 1 : 0;
          // var high = (this.high + word.high + carry) | 0;
          // return X64Word.create(high, low);
          // }
        });
        var X64WordArray = C_x64.WordArray = Base.extend({
          /**
           * Initializes a newly created word array.
           *
           * @param {Array} words (Optional) An array of CryptoJS.x64.Word objects.
           * @param {number} sigBytes (Optional) The number of significant bytes in the words.
           *
           * @example
           *
           *     var wordArray = CryptoJS.x64.WordArray.create();
           *
           *     var wordArray = CryptoJS.x64.WordArray.create([
           *         CryptoJS.x64.Word.create(0x00010203, 0x04050607),
           *         CryptoJS.x64.Word.create(0x18191a1b, 0x1c1d1e1f)
           *     ]);
           *
           *     var wordArray = CryptoJS.x64.WordArray.create([
           *         CryptoJS.x64.Word.create(0x00010203, 0x04050607),
           *         CryptoJS.x64.Word.create(0x18191a1b, 0x1c1d1e1f)
           *     ], 10);
           */
          init: function(words, sigBytes) {
            words = this.words = words || [];
            if (sigBytes != undefined2) {
              this.sigBytes = sigBytes;
            } else {
              this.sigBytes = words.length * 8;
            }
          },
          /**
           * Converts this 64-bit word array to a 32-bit word array.
           *
           * @return {CryptoJS.lib.WordArray} This word array's data as a 32-bit word array.
           *
           * @example
           *
           *     var x32WordArray = x64WordArray.toX32();
           */
          toX32: function() {
            var x64Words = this.words;
            var x64WordsLength = x64Words.length;
            var x32Words = [];
            for (var i = 0; i < x64WordsLength; i++) {
              var x64Word = x64Words[i];
              x32Words.push(x64Word.high);
              x32Words.push(x64Word.low);
            }
            return X32WordArray.create(x32Words, this.sigBytes);
          },
          /**
           * Creates a copy of this word array.
           *
           * @return {X64WordArray} The clone.
           *
           * @example
           *
           *     var clone = x64WordArray.clone();
           */
          clone: function() {
            var clone2 = Base.clone.call(this);
            var words = clone2.words = this.words.slice(0);
            var wordsLength = words.length;
            for (var i = 0; i < wordsLength; i++) {
              words[i] = words[i].clone();
            }
            return clone2;
          }
        });
      })();
      return CryptoJS;
    });
  }
});

// ../../node_modules/crypto-js/lib-typedarrays.js
var require_lib_typedarrays = __commonJS({
  "../../node_modules/crypto-js/lib-typedarrays.js"(exports, module) {
    (function(root, factory) {
      if (typeof exports === "object") {
        module.exports = exports = factory(require_core());
      } else if (typeof define === "function" && define.amd) {
        define(["./core"], factory);
      } else {
        factory(root.CryptoJS);
      }
    })(exports, function(CryptoJS) {
      (function() {
        if (typeof ArrayBuffer != "function") {
          return;
        }
        var C = CryptoJS;
        var C_lib = C.lib;
        var WordArray = C_lib.WordArray;
        var superInit = WordArray.init;
        var subInit = WordArray.init = function(typedArray) {
          if (typedArray instanceof ArrayBuffer) {
            typedArray = new Uint8Array(typedArray);
          }
          if (typedArray instanceof Int8Array || typeof Uint8ClampedArray !== "undefined" && typedArray instanceof Uint8ClampedArray || typedArray instanceof Int16Array || typedArray instanceof Uint16Array || typedArray instanceof Int32Array || typedArray instanceof Uint32Array || typedArray instanceof Float32Array || typedArray instanceof Float64Array) {
            typedArray = new Uint8Array(typedArray.buffer, typedArray.byteOffset, typedArray.byteLength);
          }
          if (typedArray instanceof Uint8Array) {
            var typedArrayByteLength = typedArray.byteLength;
            var words = [];
            for (var i = 0; i < typedArrayByteLength; i++) {
              words[i >>> 2] |= typedArray[i] << 24 - i % 4 * 8;
            }
            superInit.call(this, words, typedArrayByteLength);
          } else {
            superInit.apply(this, arguments);
          }
        };
        subInit.prototype = WordArray;
      })();
      return CryptoJS.lib.WordArray;
    });
  }
});

// ../../node_modules/crypto-js/enc-utf16.js
var require_enc_utf16 = __commonJS({
  "../../node_modules/crypto-js/enc-utf16.js"(exports, module) {
    (function(root, factory) {
      if (typeof exports === "object") {
        module.exports = exports = factory(require_core());
      } else if (typeof define === "function" && define.amd) {
        define(["./core"], factory);
      } else {
        factory(root.CryptoJS);
      }
    })(exports, function(CryptoJS) {
      (function() {
        var C = CryptoJS;
        var C_lib = C.lib;
        var WordArray = C_lib.WordArray;
        var C_enc = C.enc;
        var Utf16BE = C_enc.Utf16 = C_enc.Utf16BE = {
          /**
           * Converts a word array to a UTF-16 BE string.
           *
           * @param {WordArray} wordArray The word array.
           *
           * @return {string} The UTF-16 BE string.
           *
           * @static
           *
           * @example
           *
           *     var utf16String = CryptoJS.enc.Utf16.stringify(wordArray);
           */
          stringify: function(wordArray) {
            var words = wordArray.words;
            var sigBytes = wordArray.sigBytes;
            var utf16Chars = [];
            for (var i = 0; i < sigBytes; i += 2) {
              var codePoint = words[i >>> 2] >>> 16 - i % 4 * 8 & 65535;
              utf16Chars.push(String.fromCharCode(codePoint));
            }
            return utf16Chars.join("");
          },
          /**
           * Converts a UTF-16 BE string to a word array.
           *
           * @param {string} utf16Str The UTF-16 BE string.
           *
           * @return {WordArray} The word array.
           *
           * @static
           *
           * @example
           *
           *     var wordArray = CryptoJS.enc.Utf16.parse(utf16String);
           */
          parse: function(utf16Str) {
            var utf16StrLength = utf16Str.length;
            var words = [];
            for (var i = 0; i < utf16StrLength; i++) {
              words[i >>> 1] |= utf16Str.charCodeAt(i) << 16 - i % 2 * 16;
            }
            return WordArray.create(words, utf16StrLength * 2);
          }
        };
        C_enc.Utf16LE = {
          /**
           * Converts a word array to a UTF-16 LE string.
           *
           * @param {WordArray} wordArray The word array.
           *
           * @return {string} The UTF-16 LE string.
           *
           * @static
           *
           * @example
           *
           *     var utf16Str = CryptoJS.enc.Utf16LE.stringify(wordArray);
           */
          stringify: function(wordArray) {
            var words = wordArray.words;
            var sigBytes = wordArray.sigBytes;
            var utf16Chars = [];
            for (var i = 0; i < sigBytes; i += 2) {
              var codePoint = swapEndian(words[i >>> 2] >>> 16 - i % 4 * 8 & 65535);
              utf16Chars.push(String.fromCharCode(codePoint));
            }
            return utf16Chars.join("");
          },
          /**
           * Converts a UTF-16 LE string to a word array.
           *
           * @param {string} utf16Str The UTF-16 LE string.
           *
           * @return {WordArray} The word array.
           *
           * @static
           *
           * @example
           *
           *     var wordArray = CryptoJS.enc.Utf16LE.parse(utf16Str);
           */
          parse: function(utf16Str) {
            var utf16StrLength = utf16Str.length;
            var words = [];
            for (var i = 0; i < utf16StrLength; i++) {
              words[i >>> 1] |= swapEndian(utf16Str.charCodeAt(i) << 16 - i % 2 * 16);
            }
            return WordArray.create(words, utf16StrLength * 2);
          }
        };
        function swapEndian(word) {
          return word << 8 & 4278255360 | word >>> 8 & 16711935;
        }
      })();
      return CryptoJS.enc.Utf16;
    });
  }
});

// ../../node_modules/crypto-js/enc-base64.js
var require_enc_base64 = __commonJS({
  "../../node_modules/crypto-js/enc-base64.js"(exports, module) {
    (function(root, factory) {
      if (typeof exports === "object") {
        module.exports = exports = factory(require_core());
      } else if (typeof define === "function" && define.amd) {
        define(["./core"], factory);
      } else {
        factory(root.CryptoJS);
      }
    })(exports, function(CryptoJS) {
      (function() {
        var C = CryptoJS;
        var C_lib = C.lib;
        var WordArray = C_lib.WordArray;
        var C_enc = C.enc;
        var Base64 = C_enc.Base64 = {
          /**
           * Converts a word array to a Base64 string.
           *
           * @param {WordArray} wordArray The word array.
           *
           * @return {string} The Base64 string.
           *
           * @static
           *
           * @example
           *
           *     var base64String = CryptoJS.enc.Base64.stringify(wordArray);
           */
          stringify: function(wordArray) {
            var words = wordArray.words;
            var sigBytes = wordArray.sigBytes;
            var map2 = this._map;
            wordArray.clamp();
            var base64Chars = [];
            for (var i = 0; i < sigBytes; i += 3) {
              var byte1 = words[i >>> 2] >>> 24 - i % 4 * 8 & 255;
              var byte2 = words[i + 1 >>> 2] >>> 24 - (i + 1) % 4 * 8 & 255;
              var byte3 = words[i + 2 >>> 2] >>> 24 - (i + 2) % 4 * 8 & 255;
              var triplet = byte1 << 16 | byte2 << 8 | byte3;
              for (var j = 0; j < 4 && i + j * 0.75 < sigBytes; j++) {
                base64Chars.push(map2.charAt(triplet >>> 6 * (3 - j) & 63));
              }
            }
            var paddingChar = map2.charAt(64);
            if (paddingChar) {
              while (base64Chars.length % 4) {
                base64Chars.push(paddingChar);
              }
            }
            return base64Chars.join("");
          },
          /**
           * Converts a Base64 string to a word array.
           *
           * @param {string} base64Str The Base64 string.
           *
           * @return {WordArray} The word array.
           *
           * @static
           *
           * @example
           *
           *     var wordArray = CryptoJS.enc.Base64.parse(base64String);
           */
          parse: function(base64Str) {
            var base64StrLength = base64Str.length;
            var map2 = this._map;
            var reverseMap = this._reverseMap;
            if (!reverseMap) {
              reverseMap = this._reverseMap = [];
              for (var j = 0; j < map2.length; j++) {
                reverseMap[map2.charCodeAt(j)] = j;
              }
            }
            var paddingChar = map2.charAt(64);
            if (paddingChar) {
              var paddingIndex = base64Str.indexOf(paddingChar);
              if (paddingIndex !== -1) {
                base64StrLength = paddingIndex;
              }
            }
            return parseLoop(base64Str, base64StrLength, reverseMap);
          },
          _map: "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/="
        };
        function parseLoop(base64Str, base64StrLength, reverseMap) {
          var words = [];
          var nBytes = 0;
          for (var i = 0; i < base64StrLength; i++) {
            if (i % 4) {
              var bits1 = reverseMap[base64Str.charCodeAt(i - 1)] << i % 4 * 2;
              var bits2 = reverseMap[base64Str.charCodeAt(i)] >>> 6 - i % 4 * 2;
              var bitsCombined = bits1 | bits2;
              words[nBytes >>> 2] |= bitsCombined << 24 - nBytes % 4 * 8;
              nBytes++;
            }
          }
          return WordArray.create(words, nBytes);
        }
      })();
      return CryptoJS.enc.Base64;
    });
  }
});

// ../../node_modules/crypto-js/enc-base64url.js
var require_enc_base64url = __commonJS({
  "../../node_modules/crypto-js/enc-base64url.js"(exports, module) {
    (function(root, factory) {
      if (typeof exports === "object") {
        module.exports = exports = factory(require_core());
      } else if (typeof define === "function" && define.amd) {
        define(["./core"], factory);
      } else {
        factory(root.CryptoJS);
      }
    })(exports, function(CryptoJS) {
      (function() {
        var C = CryptoJS;
        var C_lib = C.lib;
        var WordArray = C_lib.WordArray;
        var C_enc = C.enc;
        var Base64url = C_enc.Base64url = {
          /**
           * Converts a word array to a Base64url string.
           *
           * @param {WordArray} wordArray The word array.
           *
           * @param {boolean} urlSafe Whether to use url safe
           *
           * @return {string} The Base64url string.
           *
           * @static
           *
           * @example
           *
           *     var base64String = CryptoJS.enc.Base64url.stringify(wordArray);
           */
          stringify: function(wordArray, urlSafe) {
            if (urlSafe === void 0) {
              urlSafe = true;
            }
            var words = wordArray.words;
            var sigBytes = wordArray.sigBytes;
            var map2 = urlSafe ? this._safe_map : this._map;
            wordArray.clamp();
            var base64Chars = [];
            for (var i = 0; i < sigBytes; i += 3) {
              var byte1 = words[i >>> 2] >>> 24 - i % 4 * 8 & 255;
              var byte2 = words[i + 1 >>> 2] >>> 24 - (i + 1) % 4 * 8 & 255;
              var byte3 = words[i + 2 >>> 2] >>> 24 - (i + 2) % 4 * 8 & 255;
              var triplet = byte1 << 16 | byte2 << 8 | byte3;
              for (var j = 0; j < 4 && i + j * 0.75 < sigBytes; j++) {
                base64Chars.push(map2.charAt(triplet >>> 6 * (3 - j) & 63));
              }
            }
            var paddingChar = map2.charAt(64);
            if (paddingChar) {
              while (base64Chars.length % 4) {
                base64Chars.push(paddingChar);
              }
            }
            return base64Chars.join("");
          },
          /**
           * Converts a Base64url string to a word array.
           *
           * @param {string} base64Str The Base64url string.
           *
           * @param {boolean} urlSafe Whether to use url safe
           *
           * @return {WordArray} The word array.
           *
           * @static
           *
           * @example
           *
           *     var wordArray = CryptoJS.enc.Base64url.parse(base64String);
           */
          parse: function(base64Str, urlSafe) {
            if (urlSafe === void 0) {
              urlSafe = true;
            }
            var base64StrLength = base64Str.length;
            var map2 = urlSafe ? this._safe_map : this._map;
            var reverseMap = this._reverseMap;
            if (!reverseMap) {
              reverseMap = this._reverseMap = [];
              for (var j = 0; j < map2.length; j++) {
                reverseMap[map2.charCodeAt(j)] = j;
              }
            }
            var paddingChar = map2.charAt(64);
            if (paddingChar) {
              var paddingIndex = base64Str.indexOf(paddingChar);
              if (paddingIndex !== -1) {
                base64StrLength = paddingIndex;
              }
            }
            return parseLoop(base64Str, base64StrLength, reverseMap);
          },
          _map: "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=",
          _safe_map: "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789-_"
        };
        function parseLoop(base64Str, base64StrLength, reverseMap) {
          var words = [];
          var nBytes = 0;
          for (var i = 0; i < base64StrLength; i++) {
            if (i % 4) {
              var bits1 = reverseMap[base64Str.charCodeAt(i - 1)] << i % 4 * 2;
              var bits2 = reverseMap[base64Str.charCodeAt(i)] >>> 6 - i % 4 * 2;
              var bitsCombined = bits1 | bits2;
              words[nBytes >>> 2] |= bitsCombined << 24 - nBytes % 4 * 8;
              nBytes++;
            }
          }
          return WordArray.create(words, nBytes);
        }
      })();
      return CryptoJS.enc.Base64url;
    });
  }
});

// ../../node_modules/crypto-js/md5.js
var require_md5 = __commonJS({
  "../../node_modules/crypto-js/md5.js"(exports, module) {
    (function(root, factory) {
      if (typeof exports === "object") {
        module.exports = exports = factory(require_core());
      } else if (typeof define === "function" && define.amd) {
        define(["./core"], factory);
      } else {
        factory(root.CryptoJS);
      }
    })(exports, function(CryptoJS) {
      (function(Math2) {
        var C = CryptoJS;
        var C_lib = C.lib;
        var WordArray = C_lib.WordArray;
        var Hasher = C_lib.Hasher;
        var C_algo = C.algo;
        var T = [];
        (function() {
          for (var i = 0; i < 64; i++) {
            T[i] = Math2.abs(Math2.sin(i + 1)) * 4294967296 | 0;
          }
        })();
        var MD5 = C_algo.MD5 = Hasher.extend({
          _doReset: function() {
            this._hash = new WordArray.init([
              1732584193,
              4023233417,
              2562383102,
              271733878
            ]);
          },
          _doProcessBlock: function(M, offset) {
            for (var i = 0; i < 16; i++) {
              var offset_i = offset + i;
              var M_offset_i = M[offset_i];
              M[offset_i] = (M_offset_i << 8 | M_offset_i >>> 24) & 16711935 | (M_offset_i << 24 | M_offset_i >>> 8) & 4278255360;
            }
            var H = this._hash.words;
            var M_offset_0 = M[offset + 0];
            var M_offset_1 = M[offset + 1];
            var M_offset_2 = M[offset + 2];
            var M_offset_3 = M[offset + 3];
            var M_offset_4 = M[offset + 4];
            var M_offset_5 = M[offset + 5];
            var M_offset_6 = M[offset + 6];
            var M_offset_7 = M[offset + 7];
            var M_offset_8 = M[offset + 8];
            var M_offset_9 = M[offset + 9];
            var M_offset_10 = M[offset + 10];
            var M_offset_11 = M[offset + 11];
            var M_offset_12 = M[offset + 12];
            var M_offset_13 = M[offset + 13];
            var M_offset_14 = M[offset + 14];
            var M_offset_15 = M[offset + 15];
            var a = H[0];
            var b = H[1];
            var c = H[2];
            var d = H[3];
            a = FF(a, b, c, d, M_offset_0, 7, T[0]);
            d = FF(d, a, b, c, M_offset_1, 12, T[1]);
            c = FF(c, d, a, b, M_offset_2, 17, T[2]);
            b = FF(b, c, d, a, M_offset_3, 22, T[3]);
            a = FF(a, b, c, d, M_offset_4, 7, T[4]);
            d = FF(d, a, b, c, M_offset_5, 12, T[5]);
            c = FF(c, d, a, b, M_offset_6, 17, T[6]);
            b = FF(b, c, d, a, M_offset_7, 22, T[7]);
            a = FF(a, b, c, d, M_offset_8, 7, T[8]);
            d = FF(d, a, b, c, M_offset_9, 12, T[9]);
            c = FF(c, d, a, b, M_offset_10, 17, T[10]);
            b = FF(b, c, d, a, M_offset_11, 22, T[11]);
            a = FF(a, b, c, d, M_offset_12, 7, T[12]);
            d = FF(d, a, b, c, M_offset_13, 12, T[13]);
            c = FF(c, d, a, b, M_offset_14, 17, T[14]);
            b = FF(b, c, d, a, M_offset_15, 22, T[15]);
            a = GG(a, b, c, d, M_offset_1, 5, T[16]);
            d = GG(d, a, b, c, M_offset_6, 9, T[17]);
            c = GG(c, d, a, b, M_offset_11, 14, T[18]);
            b = GG(b, c, d, a, M_offset_0, 20, T[19]);
            a = GG(a, b, c, d, M_offset_5, 5, T[20]);
            d = GG(d, a, b, c, M_offset_10, 9, T[21]);
            c = GG(c, d, a, b, M_offset_15, 14, T[22]);
            b = GG(b, c, d, a, M_offset_4, 20, T[23]);
            a = GG(a, b, c, d, M_offset_9, 5, T[24]);
            d = GG(d, a, b, c, M_offset_14, 9, T[25]);
            c = GG(c, d, a, b, M_offset_3, 14, T[26]);
            b = GG(b, c, d, a, M_offset_8, 20, T[27]);
            a = GG(a, b, c, d, M_offset_13, 5, T[28]);
            d = GG(d, a, b, c, M_offset_2, 9, T[29]);
            c = GG(c, d, a, b, M_offset_7, 14, T[30]);
            b = GG(b, c, d, a, M_offset_12, 20, T[31]);
            a = HH(a, b, c, d, M_offset_5, 4, T[32]);
            d = HH(d, a, b, c, M_offset_8, 11, T[33]);
            c = HH(c, d, a, b, M_offset_11, 16, T[34]);
            b = HH(b, c, d, a, M_offset_14, 23, T[35]);
            a = HH(a, b, c, d, M_offset_1, 4, T[36]);
            d = HH(d, a, b, c, M_offset_4, 11, T[37]);
            c = HH(c, d, a, b, M_offset_7, 16, T[38]);
            b = HH(b, c, d, a, M_offset_10, 23, T[39]);
            a = HH(a, b, c, d, M_offset_13, 4, T[40]);
            d = HH(d, a, b, c, M_offset_0, 11, T[41]);
            c = HH(c, d, a, b, M_offset_3, 16, T[42]);
            b = HH(b, c, d, a, M_offset_6, 23, T[43]);
            a = HH(a, b, c, d, M_offset_9, 4, T[44]);
            d = HH(d, a, b, c, M_offset_12, 11, T[45]);
            c = HH(c, d, a, b, M_offset_15, 16, T[46]);
            b = HH(b, c, d, a, M_offset_2, 23, T[47]);
            a = II(a, b, c, d, M_offset_0, 6, T[48]);
            d = II(d, a, b, c, M_offset_7, 10, T[49]);
            c = II(c, d, a, b, M_offset_14, 15, T[50]);
            b = II(b, c, d, a, M_offset_5, 21, T[51]);
            a = II(a, b, c, d, M_offset_12, 6, T[52]);
            d = II(d, a, b, c, M_offset_3, 10, T[53]);
            c = II(c, d, a, b, M_offset_10, 15, T[54]);
            b = II(b, c, d, a, M_offset_1, 21, T[55]);
            a = II(a, b, c, d, M_offset_8, 6, T[56]);
            d = II(d, a, b, c, M_offset_15, 10, T[57]);
            c = II(c, d, a, b, M_offset_6, 15, T[58]);
            b = II(b, c, d, a, M_offset_13, 21, T[59]);
            a = II(a, b, c, d, M_offset_4, 6, T[60]);
            d = II(d, a, b, c, M_offset_11, 10, T[61]);
            c = II(c, d, a, b, M_offset_2, 15, T[62]);
            b = II(b, c, d, a, M_offset_9, 21, T[63]);
            H[0] = H[0] + a | 0;
            H[1] = H[1] + b | 0;
            H[2] = H[2] + c | 0;
            H[3] = H[3] + d | 0;
          },
          _doFinalize: function() {
            var data = this._data;
            var dataWords = data.words;
            var nBitsTotal = this._nDataBytes * 8;
            var nBitsLeft = data.sigBytes * 8;
            dataWords[nBitsLeft >>> 5] |= 128 << 24 - nBitsLeft % 32;
            var nBitsTotalH = Math2.floor(nBitsTotal / 4294967296);
            var nBitsTotalL = nBitsTotal;
            dataWords[(nBitsLeft + 64 >>> 9 << 4) + 15] = (nBitsTotalH << 8 | nBitsTotalH >>> 24) & 16711935 | (nBitsTotalH << 24 | nBitsTotalH >>> 8) & 4278255360;
            dataWords[(nBitsLeft + 64 >>> 9 << 4) + 14] = (nBitsTotalL << 8 | nBitsTotalL >>> 24) & 16711935 | (nBitsTotalL << 24 | nBitsTotalL >>> 8) & 4278255360;
            data.sigBytes = (dataWords.length + 1) * 4;
            this._process();
            var hash = this._hash;
            var H = hash.words;
            for (var i = 0; i < 4; i++) {
              var H_i = H[i];
              H[i] = (H_i << 8 | H_i >>> 24) & 16711935 | (H_i << 24 | H_i >>> 8) & 4278255360;
            }
            return hash;
          },
          clone: function() {
            var clone2 = Hasher.clone.call(this);
            clone2._hash = this._hash.clone();
            return clone2;
          }
        });
        function FF(a, b, c, d, x, s, t) {
          var n = a + (b & c | ~b & d) + x + t;
          return (n << s | n >>> 32 - s) + b;
        }
        function GG(a, b, c, d, x, s, t) {
          var n = a + (b & d | c & ~d) + x + t;
          return (n << s | n >>> 32 - s) + b;
        }
        function HH(a, b, c, d, x, s, t) {
          var n = a + (b ^ c ^ d) + x + t;
          return (n << s | n >>> 32 - s) + b;
        }
        function II(a, b, c, d, x, s, t) {
          var n = a + (c ^ (b | ~d)) + x + t;
          return (n << s | n >>> 32 - s) + b;
        }
        C.MD5 = Hasher._createHelper(MD5);
        C.HmacMD5 = Hasher._createHmacHelper(MD5);
      })(Math);
      return CryptoJS.MD5;
    });
  }
});

// ../../node_modules/crypto-js/sha1.js
var require_sha1 = __commonJS({
  "../../node_modules/crypto-js/sha1.js"(exports, module) {
    (function(root, factory) {
      if (typeof exports === "object") {
        module.exports = exports = factory(require_core());
      } else if (typeof define === "function" && define.amd) {
        define(["./core"], factory);
      } else {
        factory(root.CryptoJS);
      }
    })(exports, function(CryptoJS) {
      (function() {
        var C = CryptoJS;
        var C_lib = C.lib;
        var WordArray = C_lib.WordArray;
        var Hasher = C_lib.Hasher;
        var C_algo = C.algo;
        var W = [];
        var SHA1 = C_algo.SHA1 = Hasher.extend({
          _doReset: function() {
            this._hash = new WordArray.init([
              1732584193,
              4023233417,
              2562383102,
              271733878,
              3285377520
            ]);
          },
          _doProcessBlock: function(M, offset) {
            var H = this._hash.words;
            var a = H[0];
            var b = H[1];
            var c = H[2];
            var d = H[3];
            var e2 = H[4];
            for (var i = 0; i < 80; i++) {
              if (i < 16) {
                W[i] = M[offset + i] | 0;
              } else {
                var n = W[i - 3] ^ W[i - 8] ^ W[i - 14] ^ W[i - 16];
                W[i] = n << 1 | n >>> 31;
              }
              var t = (a << 5 | a >>> 27) + e2 + W[i];
              if (i < 20) {
                t += (b & c | ~b & d) + 1518500249;
              } else if (i < 40) {
                t += (b ^ c ^ d) + 1859775393;
              } else if (i < 60) {
                t += (b & c | b & d | c & d) - 1894007588;
              } else {
                t += (b ^ c ^ d) - 899497514;
              }
              e2 = d;
              d = c;
              c = b << 30 | b >>> 2;
              b = a;
              a = t;
            }
            H[0] = H[0] + a | 0;
            H[1] = H[1] + b | 0;
            H[2] = H[2] + c | 0;
            H[3] = H[3] + d | 0;
            H[4] = H[4] + e2 | 0;
          },
          _doFinalize: function() {
            var data = this._data;
            var dataWords = data.words;
            var nBitsTotal = this._nDataBytes * 8;
            var nBitsLeft = data.sigBytes * 8;
            dataWords[nBitsLeft >>> 5] |= 128 << 24 - nBitsLeft % 32;
            dataWords[(nBitsLeft + 64 >>> 9 << 4) + 14] = Math.floor(nBitsTotal / 4294967296);
            dataWords[(nBitsLeft + 64 >>> 9 << 4) + 15] = nBitsTotal;
            data.sigBytes = dataWords.length * 4;
            this._process();
            return this._hash;
          },
          clone: function() {
            var clone2 = Hasher.clone.call(this);
            clone2._hash = this._hash.clone();
            return clone2;
          }
        });
        C.SHA1 = Hasher._createHelper(SHA1);
        C.HmacSHA1 = Hasher._createHmacHelper(SHA1);
      })();
      return CryptoJS.SHA1;
    });
  }
});

// ../../node_modules/crypto-js/sha224.js
var require_sha224 = __commonJS({
  "../../node_modules/crypto-js/sha224.js"(exports, module) {
    (function(root, factory, undef) {
      if (typeof exports === "object") {
        module.exports = exports = factory(require_core(), require_sha256());
      } else if (typeof define === "function" && define.amd) {
        define(["./core", "./sha256"], factory);
      } else {
        factory(root.CryptoJS);
      }
    })(exports, function(CryptoJS) {
      (function() {
        var C = CryptoJS;
        var C_lib = C.lib;
        var WordArray = C_lib.WordArray;
        var C_algo = C.algo;
        var SHA256 = C_algo.SHA256;
        var SHA224 = C_algo.SHA224 = SHA256.extend({
          _doReset: function() {
            this._hash = new WordArray.init([
              3238371032,
              914150663,
              812702999,
              4144912697,
              4290775857,
              1750603025,
              1694076839,
              3204075428
            ]);
          },
          _doFinalize: function() {
            var hash = SHA256._doFinalize.call(this);
            hash.sigBytes -= 4;
            return hash;
          }
        });
        C.SHA224 = SHA256._createHelper(SHA224);
        C.HmacSHA224 = SHA256._createHmacHelper(SHA224);
      })();
      return CryptoJS.SHA224;
    });
  }
});

// ../../node_modules/crypto-js/sha512.js
var require_sha512 = __commonJS({
  "../../node_modules/crypto-js/sha512.js"(exports, module) {
    (function(root, factory, undef) {
      if (typeof exports === "object") {
        module.exports = exports = factory(require_core(), require_x64_core());
      } else if (typeof define === "function" && define.amd) {
        define(["./core", "./x64-core"], factory);
      } else {
        factory(root.CryptoJS);
      }
    })(exports, function(CryptoJS) {
      (function() {
        var C = CryptoJS;
        var C_lib = C.lib;
        var Hasher = C_lib.Hasher;
        var C_x64 = C.x64;
        var X64Word = C_x64.Word;
        var X64WordArray = C_x64.WordArray;
        var C_algo = C.algo;
        function X64Word_create() {
          return X64Word.create.apply(X64Word, arguments);
        }
        var K = [
          X64Word_create(1116352408, 3609767458),
          X64Word_create(1899447441, 602891725),
          X64Word_create(3049323471, 3964484399),
          X64Word_create(3921009573, 2173295548),
          X64Word_create(961987163, 4081628472),
          X64Word_create(1508970993, 3053834265),
          X64Word_create(2453635748, 2937671579),
          X64Word_create(2870763221, 3664609560),
          X64Word_create(3624381080, 2734883394),
          X64Word_create(310598401, 1164996542),
          X64Word_create(607225278, 1323610764),
          X64Word_create(1426881987, 3590304994),
          X64Word_create(1925078388, 4068182383),
          X64Word_create(2162078206, 991336113),
          X64Word_create(2614888103, 633803317),
          X64Word_create(3248222580, 3479774868),
          X64Word_create(3835390401, 2666613458),
          X64Word_create(4022224774, 944711139),
          X64Word_create(264347078, 2341262773),
          X64Word_create(604807628, 2007800933),
          X64Word_create(770255983, 1495990901),
          X64Word_create(1249150122, 1856431235),
          X64Word_create(1555081692, 3175218132),
          X64Word_create(1996064986, 2198950837),
          X64Word_create(2554220882, 3999719339),
          X64Word_create(2821834349, 766784016),
          X64Word_create(2952996808, 2566594879),
          X64Word_create(3210313671, 3203337956),
          X64Word_create(3336571891, 1034457026),
          X64Word_create(3584528711, 2466948901),
          X64Word_create(113926993, 3758326383),
          X64Word_create(338241895, 168717936),
          X64Word_create(666307205, 1188179964),
          X64Word_create(773529912, 1546045734),
          X64Word_create(1294757372, 1522805485),
          X64Word_create(1396182291, 2643833823),
          X64Word_create(1695183700, 2343527390),
          X64Word_create(1986661051, 1014477480),
          X64Word_create(2177026350, 1206759142),
          X64Word_create(2456956037, 344077627),
          X64Word_create(2730485921, 1290863460),
          X64Word_create(2820302411, 3158454273),
          X64Word_create(3259730800, 3505952657),
          X64Word_create(3345764771, 106217008),
          X64Word_create(3516065817, 3606008344),
          X64Word_create(3600352804, 1432725776),
          X64Word_create(4094571909, 1467031594),
          X64Word_create(275423344, 851169720),
          X64Word_create(430227734, 3100823752),
          X64Word_create(506948616, 1363258195),
          X64Word_create(659060556, 3750685593),
          X64Word_create(883997877, 3785050280),
          X64Word_create(958139571, 3318307427),
          X64Word_create(1322822218, 3812723403),
          X64Word_create(1537002063, 2003034995),
          X64Word_create(1747873779, 3602036899),
          X64Word_create(1955562222, 1575990012),
          X64Word_create(2024104815, 1125592928),
          X64Word_create(2227730452, 2716904306),
          X64Word_create(2361852424, 442776044),
          X64Word_create(2428436474, 593698344),
          X64Word_create(2756734187, 3733110249),
          X64Word_create(3204031479, 2999351573),
          X64Word_create(3329325298, 3815920427),
          X64Word_create(3391569614, 3928383900),
          X64Word_create(3515267271, 566280711),
          X64Word_create(3940187606, 3454069534),
          X64Word_create(4118630271, 4000239992),
          X64Word_create(116418474, 1914138554),
          X64Word_create(174292421, 2731055270),
          X64Word_create(289380356, 3203993006),
          X64Word_create(460393269, 320620315),
          X64Word_create(685471733, 587496836),
          X64Word_create(852142971, 1086792851),
          X64Word_create(1017036298, 365543100),
          X64Word_create(1126000580, 2618297676),
          X64Word_create(1288033470, 3409855158),
          X64Word_create(1501505948, 4234509866),
          X64Word_create(1607167915, 987167468),
          X64Word_create(1816402316, 1246189591)
        ];
        var W = [];
        (function() {
          for (var i = 0; i < 80; i++) {
            W[i] = X64Word_create();
          }
        })();
        var SHA512 = C_algo.SHA512 = Hasher.extend({
          _doReset: function() {
            this._hash = new X64WordArray.init([
              new X64Word.init(1779033703, 4089235720),
              new X64Word.init(3144134277, 2227873595),
              new X64Word.init(1013904242, 4271175723),
              new X64Word.init(2773480762, 1595750129),
              new X64Word.init(1359893119, 2917565137),
              new X64Word.init(2600822924, 725511199),
              new X64Word.init(528734635, 4215389547),
              new X64Word.init(1541459225, 327033209)
            ]);
          },
          _doProcessBlock: function(M, offset) {
            var H = this._hash.words;
            var H0 = H[0];
            var H1 = H[1];
            var H2 = H[2];
            var H3 = H[3];
            var H4 = H[4];
            var H5 = H[5];
            var H6 = H[6];
            var H7 = H[7];
            var H0h = H0.high;
            var H0l = H0.low;
            var H1h = H1.high;
            var H1l = H1.low;
            var H2h = H2.high;
            var H2l = H2.low;
            var H3h = H3.high;
            var H3l = H3.low;
            var H4h = H4.high;
            var H4l = H4.low;
            var H5h = H5.high;
            var H5l = H5.low;
            var H6h = H6.high;
            var H6l = H6.low;
            var H7h = H7.high;
            var H7l = H7.low;
            var ah = H0h;
            var al = H0l;
            var bh = H1h;
            var bl = H1l;
            var ch = H2h;
            var cl = H2l;
            var dh = H3h;
            var dl = H3l;
            var eh = H4h;
            var el = H4l;
            var fh = H5h;
            var fl = H5l;
            var gh = H6h;
            var gl = H6l;
            var hh = H7h;
            var hl = H7l;
            for (var i = 0; i < 80; i++) {
              var Wil;
              var Wih;
              var Wi = W[i];
              if (i < 16) {
                Wih = Wi.high = M[offset + i * 2] | 0;
                Wil = Wi.low = M[offset + i * 2 + 1] | 0;
              } else {
                var gamma0x = W[i - 15];
                var gamma0xh = gamma0x.high;
                var gamma0xl = gamma0x.low;
                var gamma0h = (gamma0xh >>> 1 | gamma0xl << 31) ^ (gamma0xh >>> 8 | gamma0xl << 24) ^ gamma0xh >>> 7;
                var gamma0l = (gamma0xl >>> 1 | gamma0xh << 31) ^ (gamma0xl >>> 8 | gamma0xh << 24) ^ (gamma0xl >>> 7 | gamma0xh << 25);
                var gamma1x = W[i - 2];
                var gamma1xh = gamma1x.high;
                var gamma1xl = gamma1x.low;
                var gamma1h = (gamma1xh >>> 19 | gamma1xl << 13) ^ (gamma1xh << 3 | gamma1xl >>> 29) ^ gamma1xh >>> 6;
                var gamma1l = (gamma1xl >>> 19 | gamma1xh << 13) ^ (gamma1xl << 3 | gamma1xh >>> 29) ^ (gamma1xl >>> 6 | gamma1xh << 26);
                var Wi7 = W[i - 7];
                var Wi7h = Wi7.high;
                var Wi7l = Wi7.low;
                var Wi16 = W[i - 16];
                var Wi16h = Wi16.high;
                var Wi16l = Wi16.low;
                Wil = gamma0l + Wi7l;
                Wih = gamma0h + Wi7h + (Wil >>> 0 < gamma0l >>> 0 ? 1 : 0);
                Wil = Wil + gamma1l;
                Wih = Wih + gamma1h + (Wil >>> 0 < gamma1l >>> 0 ? 1 : 0);
                Wil = Wil + Wi16l;
                Wih = Wih + Wi16h + (Wil >>> 0 < Wi16l >>> 0 ? 1 : 0);
                Wi.high = Wih;
                Wi.low = Wil;
              }
              var chh = eh & fh ^ ~eh & gh;
              var chl = el & fl ^ ~el & gl;
              var majh = ah & bh ^ ah & ch ^ bh & ch;
              var majl = al & bl ^ al & cl ^ bl & cl;
              var sigma0h = (ah >>> 28 | al << 4) ^ (ah << 30 | al >>> 2) ^ (ah << 25 | al >>> 7);
              var sigma0l = (al >>> 28 | ah << 4) ^ (al << 30 | ah >>> 2) ^ (al << 25 | ah >>> 7);
              var sigma1h = (eh >>> 14 | el << 18) ^ (eh >>> 18 | el << 14) ^ (eh << 23 | el >>> 9);
              var sigma1l = (el >>> 14 | eh << 18) ^ (el >>> 18 | eh << 14) ^ (el << 23 | eh >>> 9);
              var Ki = K[i];
              var Kih = Ki.high;
              var Kil = Ki.low;
              var t1l = hl + sigma1l;
              var t1h = hh + sigma1h + (t1l >>> 0 < hl >>> 0 ? 1 : 0);
              var t1l = t1l + chl;
              var t1h = t1h + chh + (t1l >>> 0 < chl >>> 0 ? 1 : 0);
              var t1l = t1l + Kil;
              var t1h = t1h + Kih + (t1l >>> 0 < Kil >>> 0 ? 1 : 0);
              var t1l = t1l + Wil;
              var t1h = t1h + Wih + (t1l >>> 0 < Wil >>> 0 ? 1 : 0);
              var t2l = sigma0l + majl;
              var t2h = sigma0h + majh + (t2l >>> 0 < sigma0l >>> 0 ? 1 : 0);
              hh = gh;
              hl = gl;
              gh = fh;
              gl = fl;
              fh = eh;
              fl = el;
              el = dl + t1l | 0;
              eh = dh + t1h + (el >>> 0 < dl >>> 0 ? 1 : 0) | 0;
              dh = ch;
              dl = cl;
              ch = bh;
              cl = bl;
              bh = ah;
              bl = al;
              al = t1l + t2l | 0;
              ah = t1h + t2h + (al >>> 0 < t1l >>> 0 ? 1 : 0) | 0;
            }
            H0l = H0.low = H0l + al;
            H0.high = H0h + ah + (H0l >>> 0 < al >>> 0 ? 1 : 0);
            H1l = H1.low = H1l + bl;
            H1.high = H1h + bh + (H1l >>> 0 < bl >>> 0 ? 1 : 0);
            H2l = H2.low = H2l + cl;
            H2.high = H2h + ch + (H2l >>> 0 < cl >>> 0 ? 1 : 0);
            H3l = H3.low = H3l + dl;
            H3.high = H3h + dh + (H3l >>> 0 < dl >>> 0 ? 1 : 0);
            H4l = H4.low = H4l + el;
            H4.high = H4h + eh + (H4l >>> 0 < el >>> 0 ? 1 : 0);
            H5l = H5.low = H5l + fl;
            H5.high = H5h + fh + (H5l >>> 0 < fl >>> 0 ? 1 : 0);
            H6l = H6.low = H6l + gl;
            H6.high = H6h + gh + (H6l >>> 0 < gl >>> 0 ? 1 : 0);
            H7l = H7.low = H7l + hl;
            H7.high = H7h + hh + (H7l >>> 0 < hl >>> 0 ? 1 : 0);
          },
          _doFinalize: function() {
            var data = this._data;
            var dataWords = data.words;
            var nBitsTotal = this._nDataBytes * 8;
            var nBitsLeft = data.sigBytes * 8;
            dataWords[nBitsLeft >>> 5] |= 128 << 24 - nBitsLeft % 32;
            dataWords[(nBitsLeft + 128 >>> 10 << 5) + 30] = Math.floor(nBitsTotal / 4294967296);
            dataWords[(nBitsLeft + 128 >>> 10 << 5) + 31] = nBitsTotal;
            data.sigBytes = dataWords.length * 4;
            this._process();
            var hash = this._hash.toX32();
            return hash;
          },
          clone: function() {
            var clone2 = Hasher.clone.call(this);
            clone2._hash = this._hash.clone();
            return clone2;
          },
          blockSize: 1024 / 32
        });
        C.SHA512 = Hasher._createHelper(SHA512);
        C.HmacSHA512 = Hasher._createHmacHelper(SHA512);
      })();
      return CryptoJS.SHA512;
    });
  }
});

// ../../node_modules/crypto-js/sha384.js
var require_sha384 = __commonJS({
  "../../node_modules/crypto-js/sha384.js"(exports, module) {
    (function(root, factory, undef) {
      if (typeof exports === "object") {
        module.exports = exports = factory(require_core(), require_x64_core(), require_sha512());
      } else if (typeof define === "function" && define.amd) {
        define(["./core", "./x64-core", "./sha512"], factory);
      } else {
        factory(root.CryptoJS);
      }
    })(exports, function(CryptoJS) {
      (function() {
        var C = CryptoJS;
        var C_x64 = C.x64;
        var X64Word = C_x64.Word;
        var X64WordArray = C_x64.WordArray;
        var C_algo = C.algo;
        var SHA512 = C_algo.SHA512;
        var SHA384 = C_algo.SHA384 = SHA512.extend({
          _doReset: function() {
            this._hash = new X64WordArray.init([
              new X64Word.init(3418070365, 3238371032),
              new X64Word.init(1654270250, 914150663),
              new X64Word.init(2438529370, 812702999),
              new X64Word.init(355462360, 4144912697),
              new X64Word.init(1731405415, 4290775857),
              new X64Word.init(2394180231, 1750603025),
              new X64Word.init(3675008525, 1694076839),
              new X64Word.init(1203062813, 3204075428)
            ]);
          },
          _doFinalize: function() {
            var hash = SHA512._doFinalize.call(this);
            hash.sigBytes -= 16;
            return hash;
          }
        });
        C.SHA384 = SHA512._createHelper(SHA384);
        C.HmacSHA384 = SHA512._createHmacHelper(SHA384);
      })();
      return CryptoJS.SHA384;
    });
  }
});

// ../../node_modules/crypto-js/sha3.js
var require_sha32 = __commonJS({
  "../../node_modules/crypto-js/sha3.js"(exports, module) {
    (function(root, factory, undef) {
      if (typeof exports === "object") {
        module.exports = exports = factory(require_core(), require_x64_core());
      } else if (typeof define === "function" && define.amd) {
        define(["./core", "./x64-core"], factory);
      } else {
        factory(root.CryptoJS);
      }
    })(exports, function(CryptoJS) {
      (function(Math2) {
        var C = CryptoJS;
        var C_lib = C.lib;
        var WordArray = C_lib.WordArray;
        var Hasher = C_lib.Hasher;
        var C_x64 = C.x64;
        var X64Word = C_x64.Word;
        var C_algo = C.algo;
        var RHO_OFFSETS = [];
        var PI_INDEXES = [];
        var ROUND_CONSTANTS = [];
        (function() {
          var x = 1, y = 0;
          for (var t = 0; t < 24; t++) {
            RHO_OFFSETS[x + 5 * y] = (t + 1) * (t + 2) / 2 % 64;
            var newX = y % 5;
            var newY = (2 * x + 3 * y) % 5;
            x = newX;
            y = newY;
          }
          for (var x = 0; x < 5; x++) {
            for (var y = 0; y < 5; y++) {
              PI_INDEXES[x + 5 * y] = y + (2 * x + 3 * y) % 5 * 5;
            }
          }
          var LFSR = 1;
          for (var i = 0; i < 24; i++) {
            var roundConstantMsw = 0;
            var roundConstantLsw = 0;
            for (var j = 0; j < 7; j++) {
              if (LFSR & 1) {
                var bitPosition = (1 << j) - 1;
                if (bitPosition < 32) {
                  roundConstantLsw ^= 1 << bitPosition;
                } else {
                  roundConstantMsw ^= 1 << bitPosition - 32;
                }
              }
              if (LFSR & 128) {
                LFSR = LFSR << 1 ^ 113;
              } else {
                LFSR <<= 1;
              }
            }
            ROUND_CONSTANTS[i] = X64Word.create(roundConstantMsw, roundConstantLsw);
          }
        })();
        var T = [];
        (function() {
          for (var i = 0; i < 25; i++) {
            T[i] = X64Word.create();
          }
        })();
        var SHA3 = C_algo.SHA3 = Hasher.extend({
          /**
           * Configuration options.
           *
           * @property {number} outputLength
           *   The desired number of bits in the output hash.
           *   Only values permitted are: 224, 256, 384, 512.
           *   Default: 512
           */
          cfg: Hasher.cfg.extend({
            outputLength: 512
          }),
          _doReset: function() {
            var state = this._state = [];
            for (var i = 0; i < 25; i++) {
              state[i] = new X64Word.init();
            }
            this.blockSize = (1600 - 2 * this.cfg.outputLength) / 32;
          },
          _doProcessBlock: function(M, offset) {
            var state = this._state;
            var nBlockSizeLanes = this.blockSize / 2;
            for (var i = 0; i < nBlockSizeLanes; i++) {
              var M2i = M[offset + 2 * i];
              var M2i1 = M[offset + 2 * i + 1];
              M2i = (M2i << 8 | M2i >>> 24) & 16711935 | (M2i << 24 | M2i >>> 8) & 4278255360;
              M2i1 = (M2i1 << 8 | M2i1 >>> 24) & 16711935 | (M2i1 << 24 | M2i1 >>> 8) & 4278255360;
              var lane = state[i];
              lane.high ^= M2i1;
              lane.low ^= M2i;
            }
            for (var round = 0; round < 24; round++) {
              for (var x = 0; x < 5; x++) {
                var tMsw = 0, tLsw = 0;
                for (var y = 0; y < 5; y++) {
                  var lane = state[x + 5 * y];
                  tMsw ^= lane.high;
                  tLsw ^= lane.low;
                }
                var Tx = T[x];
                Tx.high = tMsw;
                Tx.low = tLsw;
              }
              for (var x = 0; x < 5; x++) {
                var Tx4 = T[(x + 4) % 5];
                var Tx1 = T[(x + 1) % 5];
                var Tx1Msw = Tx1.high;
                var Tx1Lsw = Tx1.low;
                var tMsw = Tx4.high ^ (Tx1Msw << 1 | Tx1Lsw >>> 31);
                var tLsw = Tx4.low ^ (Tx1Lsw << 1 | Tx1Msw >>> 31);
                for (var y = 0; y < 5; y++) {
                  var lane = state[x + 5 * y];
                  lane.high ^= tMsw;
                  lane.low ^= tLsw;
                }
              }
              for (var laneIndex = 1; laneIndex < 25; laneIndex++) {
                var tMsw;
                var tLsw;
                var lane = state[laneIndex];
                var laneMsw = lane.high;
                var laneLsw = lane.low;
                var rhoOffset = RHO_OFFSETS[laneIndex];
                if (rhoOffset < 32) {
                  tMsw = laneMsw << rhoOffset | laneLsw >>> 32 - rhoOffset;
                  tLsw = laneLsw << rhoOffset | laneMsw >>> 32 - rhoOffset;
                } else {
                  tMsw = laneLsw << rhoOffset - 32 | laneMsw >>> 64 - rhoOffset;
                  tLsw = laneMsw << rhoOffset - 32 | laneLsw >>> 64 - rhoOffset;
                }
                var TPiLane = T[PI_INDEXES[laneIndex]];
                TPiLane.high = tMsw;
                TPiLane.low = tLsw;
              }
              var T0 = T[0];
              var state0 = state[0];
              T0.high = state0.high;
              T0.low = state0.low;
              for (var x = 0; x < 5; x++) {
                for (var y = 0; y < 5; y++) {
                  var laneIndex = x + 5 * y;
                  var lane = state[laneIndex];
                  var TLane = T[laneIndex];
                  var Tx1Lane = T[(x + 1) % 5 + 5 * y];
                  var Tx2Lane = T[(x + 2) % 5 + 5 * y];
                  lane.high = TLane.high ^ ~Tx1Lane.high & Tx2Lane.high;
                  lane.low = TLane.low ^ ~Tx1Lane.low & Tx2Lane.low;
                }
              }
              var lane = state[0];
              var roundConstant = ROUND_CONSTANTS[round];
              lane.high ^= roundConstant.high;
              lane.low ^= roundConstant.low;
            }
          },
          _doFinalize: function() {
            var data = this._data;
            var dataWords = data.words;
            var nBitsTotal = this._nDataBytes * 8;
            var nBitsLeft = data.sigBytes * 8;
            var blockSizeBits = this.blockSize * 32;
            dataWords[nBitsLeft >>> 5] |= 1 << 24 - nBitsLeft % 32;
            dataWords[(Math2.ceil((nBitsLeft + 1) / blockSizeBits) * blockSizeBits >>> 5) - 1] |= 128;
            data.sigBytes = dataWords.length * 4;
            this._process();
            var state = this._state;
            var outputLengthBytes = this.cfg.outputLength / 8;
            var outputLengthLanes = outputLengthBytes / 8;
            var hashWords = [];
            for (var i = 0; i < outputLengthLanes; i++) {
              var lane = state[i];
              var laneMsw = lane.high;
              var laneLsw = lane.low;
              laneMsw = (laneMsw << 8 | laneMsw >>> 24) & 16711935 | (laneMsw << 24 | laneMsw >>> 8) & 4278255360;
              laneLsw = (laneLsw << 8 | laneLsw >>> 24) & 16711935 | (laneLsw << 24 | laneLsw >>> 8) & 4278255360;
              hashWords.push(laneLsw);
              hashWords.push(laneMsw);
            }
            return new WordArray.init(hashWords, outputLengthBytes);
          },
          clone: function() {
            var clone2 = Hasher.clone.call(this);
            var state = clone2._state = this._state.slice(0);
            for (var i = 0; i < 25; i++) {
              state[i] = state[i].clone();
            }
            return clone2;
          }
        });
        C.SHA3 = Hasher._createHelper(SHA3);
        C.HmacSHA3 = Hasher._createHmacHelper(SHA3);
      })(Math);
      return CryptoJS.SHA3;
    });
  }
});

// ../../node_modules/crypto-js/ripemd160.js
var require_ripemd160 = __commonJS({
  "../../node_modules/crypto-js/ripemd160.js"(exports, module) {
    (function(root, factory) {
      if (typeof exports === "object") {
        module.exports = exports = factory(require_core());
      } else if (typeof define === "function" && define.amd) {
        define(["./core"], factory);
      } else {
        factory(root.CryptoJS);
      }
    })(exports, function(CryptoJS) {
      (function(Math2) {
        var C = CryptoJS;
        var C_lib = C.lib;
        var WordArray = C_lib.WordArray;
        var Hasher = C_lib.Hasher;
        var C_algo = C.algo;
        var _zl = WordArray.create([
          0,
          1,
          2,
          3,
          4,
          5,
          6,
          7,
          8,
          9,
          10,
          11,
          12,
          13,
          14,
          15,
          7,
          4,
          13,
          1,
          10,
          6,
          15,
          3,
          12,
          0,
          9,
          5,
          2,
          14,
          11,
          8,
          3,
          10,
          14,
          4,
          9,
          15,
          8,
          1,
          2,
          7,
          0,
          6,
          13,
          11,
          5,
          12,
          1,
          9,
          11,
          10,
          0,
          8,
          12,
          4,
          13,
          3,
          7,
          15,
          14,
          5,
          6,
          2,
          4,
          0,
          5,
          9,
          7,
          12,
          2,
          10,
          14,
          1,
          3,
          8,
          11,
          6,
          15,
          13
        ]);
        var _zr = WordArray.create([
          5,
          14,
          7,
          0,
          9,
          2,
          11,
          4,
          13,
          6,
          15,
          8,
          1,
          10,
          3,
          12,
          6,
          11,
          3,
          7,
          0,
          13,
          5,
          10,
          14,
          15,
          8,
          12,
          4,
          9,
          1,
          2,
          15,
          5,
          1,
          3,
          7,
          14,
          6,
          9,
          11,
          8,
          12,
          2,
          10,
          0,
          4,
          13,
          8,
          6,
          4,
          1,
          3,
          11,
          15,
          0,
          5,
          12,
          2,
          13,
          9,
          7,
          10,
          14,
          12,
          15,
          10,
          4,
          1,
          5,
          8,
          7,
          6,
          2,
          13,
          14,
          0,
          3,
          9,
          11
        ]);
        var _sl = WordArray.create([
          11,
          14,
          15,
          12,
          5,
          8,
          7,
          9,
          11,
          13,
          14,
          15,
          6,
          7,
          9,
          8,
          7,
          6,
          8,
          13,
          11,
          9,
          7,
          15,
          7,
          12,
          15,
          9,
          11,
          7,
          13,
          12,
          11,
          13,
          6,
          7,
          14,
          9,
          13,
          15,
          14,
          8,
          13,
          6,
          5,
          12,
          7,
          5,
          11,
          12,
          14,
          15,
          14,
          15,
          9,
          8,
          9,
          14,
          5,
          6,
          8,
          6,
          5,
          12,
          9,
          15,
          5,
          11,
          6,
          8,
          13,
          12,
          5,
          12,
          13,
          14,
          11,
          8,
          5,
          6
        ]);
        var _sr = WordArray.create([
          8,
          9,
          9,
          11,
          13,
          15,
          15,
          5,
          7,
          7,
          8,
          11,
          14,
          14,
          12,
          6,
          9,
          13,
          15,
          7,
          12,
          8,
          9,
          11,
          7,
          7,
          12,
          7,
          6,
          15,
          13,
          11,
          9,
          7,
          15,
          11,
          8,
          6,
          6,
          14,
          12,
          13,
          5,
          14,
          13,
          13,
          7,
          5,
          15,
          5,
          8,
          11,
          14,
          14,
          6,
          14,
          6,
          9,
          12,
          9,
          12,
          5,
          15,
          8,
          8,
          5,
          12,
          9,
          12,
          5,
          14,
          6,
          8,
          13,
          6,
          5,
          15,
          13,
          11,
          11
        ]);
        var _hl = WordArray.create([0, 1518500249, 1859775393, 2400959708, 2840853838]);
        var _hr = WordArray.create([1352829926, 1548603684, 1836072691, 2053994217, 0]);
        var RIPEMD160 = C_algo.RIPEMD160 = Hasher.extend({
          _doReset: function() {
            this._hash = WordArray.create([1732584193, 4023233417, 2562383102, 271733878, 3285377520]);
          },
          _doProcessBlock: function(M, offset) {
            for (var i = 0; i < 16; i++) {
              var offset_i = offset + i;
              var M_offset_i = M[offset_i];
              M[offset_i] = (M_offset_i << 8 | M_offset_i >>> 24) & 16711935 | (M_offset_i << 24 | M_offset_i >>> 8) & 4278255360;
            }
            var H = this._hash.words;
            var hl = _hl.words;
            var hr = _hr.words;
            var zl = _zl.words;
            var zr = _zr.words;
            var sl = _sl.words;
            var sr = _sr.words;
            var al, bl, cl, dl, el;
            var ar, br, cr, dr, er;
            ar = al = H[0];
            br = bl = H[1];
            cr = cl = H[2];
            dr = dl = H[3];
            er = el = H[4];
            var t;
            for (var i = 0; i < 80; i += 1) {
              t = al + M[offset + zl[i]] | 0;
              if (i < 16) {
                t += f1(bl, cl, dl) + hl[0];
              } else if (i < 32) {
                t += f2(bl, cl, dl) + hl[1];
              } else if (i < 48) {
                t += f3(bl, cl, dl) + hl[2];
              } else if (i < 64) {
                t += f4(bl, cl, dl) + hl[3];
              } else {
                t += f5(bl, cl, dl) + hl[4];
              }
              t = t | 0;
              t = rotl(t, sl[i]);
              t = t + el | 0;
              al = el;
              el = dl;
              dl = rotl(cl, 10);
              cl = bl;
              bl = t;
              t = ar + M[offset + zr[i]] | 0;
              if (i < 16) {
                t += f5(br, cr, dr) + hr[0];
              } else if (i < 32) {
                t += f4(br, cr, dr) + hr[1];
              } else if (i < 48) {
                t += f3(br, cr, dr) + hr[2];
              } else if (i < 64) {
                t += f2(br, cr, dr) + hr[3];
              } else {
                t += f1(br, cr, dr) + hr[4];
              }
              t = t | 0;
              t = rotl(t, sr[i]);
              t = t + er | 0;
              ar = er;
              er = dr;
              dr = rotl(cr, 10);
              cr = br;
              br = t;
            }
            t = H[1] + cl + dr | 0;
            H[1] = H[2] + dl + er | 0;
            H[2] = H[3] + el + ar | 0;
            H[3] = H[4] + al + br | 0;
            H[4] = H[0] + bl + cr | 0;
            H[0] = t;
          },
          _doFinalize: function() {
            var data = this._data;
            var dataWords = data.words;
            var nBitsTotal = this._nDataBytes * 8;
            var nBitsLeft = data.sigBytes * 8;
            dataWords[nBitsLeft >>> 5] |= 128 << 24 - nBitsLeft % 32;
            dataWords[(nBitsLeft + 64 >>> 9 << 4) + 14] = (nBitsTotal << 8 | nBitsTotal >>> 24) & 16711935 | (nBitsTotal << 24 | nBitsTotal >>> 8) & 4278255360;
            data.sigBytes = (dataWords.length + 1) * 4;
            this._process();
            var hash = this._hash;
            var H = hash.words;
            for (var i = 0; i < 5; i++) {
              var H_i = H[i];
              H[i] = (H_i << 8 | H_i >>> 24) & 16711935 | (H_i << 24 | H_i >>> 8) & 4278255360;
            }
            return hash;
          },
          clone: function() {
            var clone2 = Hasher.clone.call(this);
            clone2._hash = this._hash.clone();
            return clone2;
          }
        });
        function f1(x, y, z) {
          return x ^ y ^ z;
        }
        function f2(x, y, z) {
          return x & y | ~x & z;
        }
        function f3(x, y, z) {
          return (x | ~y) ^ z;
        }
        function f4(x, y, z) {
          return x & z | y & ~z;
        }
        function f5(x, y, z) {
          return x ^ (y | ~z);
        }
        function rotl(x, n) {
          return x << n | x >>> 32 - n;
        }
        C.RIPEMD160 = Hasher._createHelper(RIPEMD160);
        C.HmacRIPEMD160 = Hasher._createHmacHelper(RIPEMD160);
      })(Math);
      return CryptoJS.RIPEMD160;
    });
  }
});

// ../../node_modules/crypto-js/hmac.js
var require_hmac = __commonJS({
  "../../node_modules/crypto-js/hmac.js"(exports, module) {
    (function(root, factory) {
      if (typeof exports === "object") {
        module.exports = exports = factory(require_core());
      } else if (typeof define === "function" && define.amd) {
        define(["./core"], factory);
      } else {
        factory(root.CryptoJS);
      }
    })(exports, function(CryptoJS) {
      (function() {
        var C = CryptoJS;
        var C_lib = C.lib;
        var Base = C_lib.Base;
        var C_enc = C.enc;
        var Utf8 = C_enc.Utf8;
        var C_algo = C.algo;
        var HMAC = C_algo.HMAC = Base.extend({
          /**
           * Initializes a newly created HMAC.
           *
           * @param {Hasher} hasher The hash algorithm to use.
           * @param {WordArray|string} key The secret key.
           *
           * @example
           *
           *     var hmacHasher = CryptoJS.algo.HMAC.create(CryptoJS.algo.SHA256, key);
           */
          init: function(hasher, key) {
            hasher = this._hasher = new hasher.init();
            if (typeof key == "string") {
              key = Utf8.parse(key);
            }
            var hasherBlockSize = hasher.blockSize;
            var hasherBlockSizeBytes = hasherBlockSize * 4;
            if (key.sigBytes > hasherBlockSizeBytes) {
              key = hasher.finalize(key);
            }
            key.clamp();
            var oKey = this._oKey = key.clone();
            var iKey = this._iKey = key.clone();
            var oKeyWords = oKey.words;
            var iKeyWords = iKey.words;
            for (var i = 0; i < hasherBlockSize; i++) {
              oKeyWords[i] ^= 1549556828;
              iKeyWords[i] ^= 909522486;
            }
            oKey.sigBytes = iKey.sigBytes = hasherBlockSizeBytes;
            this.reset();
          },
          /**
           * Resets this HMAC to its initial state.
           *
           * @example
           *
           *     hmacHasher.reset();
           */
          reset: function() {
            var hasher = this._hasher;
            hasher.reset();
            hasher.update(this._iKey);
          },
          /**
           * Updates this HMAC with a message.
           *
           * @param {WordArray|string} messageUpdate The message to append.
           *
           * @return {HMAC} This HMAC instance.
           *
           * @example
           *
           *     hmacHasher.update('message');
           *     hmacHasher.update(wordArray);
           */
          update: function(messageUpdate) {
            this._hasher.update(messageUpdate);
            return this;
          },
          /**
           * Finalizes the HMAC computation.
           * Note that the finalize operation is effectively a destructive, read-once operation.
           *
           * @param {WordArray|string} messageUpdate (Optional) A final message update.
           *
           * @return {WordArray} The HMAC.
           *
           * @example
           *
           *     var hmac = hmacHasher.finalize();
           *     var hmac = hmacHasher.finalize('message');
           *     var hmac = hmacHasher.finalize(wordArray);
           */
          finalize: function(messageUpdate) {
            var hasher = this._hasher;
            var innerHash = hasher.finalize(messageUpdate);
            hasher.reset();
            var hmac = hasher.finalize(this._oKey.clone().concat(innerHash));
            return hmac;
          }
        });
      })();
    });
  }
});

// ../../node_modules/crypto-js/pbkdf2.js
var require_pbkdf2 = __commonJS({
  "../../node_modules/crypto-js/pbkdf2.js"(exports, module) {
    (function(root, factory, undef) {
      if (typeof exports === "object") {
        module.exports = exports = factory(require_core(), require_sha256(), require_hmac());
      } else if (typeof define === "function" && define.amd) {
        define(["./core", "./sha256", "./hmac"], factory);
      } else {
        factory(root.CryptoJS);
      }
    })(exports, function(CryptoJS) {
      (function() {
        var C = CryptoJS;
        var C_lib = C.lib;
        var Base = C_lib.Base;
        var WordArray = C_lib.WordArray;
        var C_algo = C.algo;
        var SHA256 = C_algo.SHA256;
        var HMAC = C_algo.HMAC;
        var PBKDF2 = C_algo.PBKDF2 = Base.extend({
          /**
           * Configuration options.
           *
           * @property {number} keySize The key size in words to generate. Default: 4 (128 bits)
           * @property {Hasher} hasher The hasher to use. Default: SHA256
           * @property {number} iterations The number of iterations to perform. Default: 250000
           */
          cfg: Base.extend({
            keySize: 128 / 32,
            hasher: SHA256,
            iterations: 25e4
          }),
          /**
           * Initializes a newly created key derivation function.
           *
           * @param {Object} cfg (Optional) The configuration options to use for the derivation.
           *
           * @example
           *
           *     var kdf = CryptoJS.algo.PBKDF2.create();
           *     var kdf = CryptoJS.algo.PBKDF2.create({ keySize: 8 });
           *     var kdf = CryptoJS.algo.PBKDF2.create({ keySize: 8, iterations: 1000 });
           */
          init: function(cfg) {
            this.cfg = this.cfg.extend(cfg);
          },
          /**
           * Computes the Password-Based Key Derivation Function 2.
           *
           * @param {WordArray|string} password The password.
           * @param {WordArray|string} salt A salt.
           *
           * @return {WordArray} The derived key.
           *
           * @example
           *
           *     var key = kdf.compute(password, salt);
           */
          compute: function(password, salt) {
            var cfg = this.cfg;
            var hmac = HMAC.create(cfg.hasher, password);
            var derivedKey = WordArray.create();
            var blockIndex = WordArray.create([1]);
            var derivedKeyWords = derivedKey.words;
            var blockIndexWords = blockIndex.words;
            var keySize = cfg.keySize;
            var iterations = cfg.iterations;
            while (derivedKeyWords.length < keySize) {
              var block = hmac.update(salt).finalize(blockIndex);
              hmac.reset();
              var blockWords = block.words;
              var blockWordsLength = blockWords.length;
              var intermediate = block;
              for (var i = 1; i < iterations; i++) {
                intermediate = hmac.finalize(intermediate);
                hmac.reset();
                var intermediateWords = intermediate.words;
                for (var j = 0; j < blockWordsLength; j++) {
                  blockWords[j] ^= intermediateWords[j];
                }
              }
              derivedKey.concat(block);
              blockIndexWords[0]++;
            }
            derivedKey.sigBytes = keySize * 4;
            return derivedKey;
          }
        });
        C.PBKDF2 = function(password, salt, cfg) {
          return PBKDF2.create(cfg).compute(password, salt);
        };
      })();
      return CryptoJS.PBKDF2;
    });
  }
});

// ../../node_modules/crypto-js/evpkdf.js
var require_evpkdf = __commonJS({
  "../../node_modules/crypto-js/evpkdf.js"(exports, module) {
    (function(root, factory, undef) {
      if (typeof exports === "object") {
        module.exports = exports = factory(require_core(), require_sha1(), require_hmac());
      } else if (typeof define === "function" && define.amd) {
        define(["./core", "./sha1", "./hmac"], factory);
      } else {
        factory(root.CryptoJS);
      }
    })(exports, function(CryptoJS) {
      (function() {
        var C = CryptoJS;
        var C_lib = C.lib;
        var Base = C_lib.Base;
        var WordArray = C_lib.WordArray;
        var C_algo = C.algo;
        var MD5 = C_algo.MD5;
        var EvpKDF = C_algo.EvpKDF = Base.extend({
          /**
           * Configuration options.
           *
           * @property {number} keySize The key size in words to generate. Default: 4 (128 bits)
           * @property {Hasher} hasher The hash algorithm to use. Default: MD5
           * @property {number} iterations The number of iterations to perform. Default: 1
           */
          cfg: Base.extend({
            keySize: 128 / 32,
            hasher: MD5,
            iterations: 1
          }),
          /**
           * Initializes a newly created key derivation function.
           *
           * @param {Object} cfg (Optional) The configuration options to use for the derivation.
           *
           * @example
           *
           *     var kdf = CryptoJS.algo.EvpKDF.create();
           *     var kdf = CryptoJS.algo.EvpKDF.create({ keySize: 8 });
           *     var kdf = CryptoJS.algo.EvpKDF.create({ keySize: 8, iterations: 1000 });
           */
          init: function(cfg) {
            this.cfg = this.cfg.extend(cfg);
          },
          /**
           * Derives a key from a password.
           *
           * @param {WordArray|string} password The password.
           * @param {WordArray|string} salt A salt.
           *
           * @return {WordArray} The derived key.
           *
           * @example
           *
           *     var key = kdf.compute(password, salt);
           */
          compute: function(password, salt) {
            var block;
            var cfg = this.cfg;
            var hasher = cfg.hasher.create();
            var derivedKey = WordArray.create();
            var derivedKeyWords = derivedKey.words;
            var keySize = cfg.keySize;
            var iterations = cfg.iterations;
            while (derivedKeyWords.length < keySize) {
              if (block) {
                hasher.update(block);
              }
              block = hasher.update(password).finalize(salt);
              hasher.reset();
              for (var i = 1; i < iterations; i++) {
                block = hasher.finalize(block);
                hasher.reset();
              }
              derivedKey.concat(block);
            }
            derivedKey.sigBytes = keySize * 4;
            return derivedKey;
          }
        });
        C.EvpKDF = function(password, salt, cfg) {
          return EvpKDF.create(cfg).compute(password, salt);
        };
      })();
      return CryptoJS.EvpKDF;
    });
  }
});

// ../../node_modules/crypto-js/cipher-core.js
var require_cipher_core = __commonJS({
  "../../node_modules/crypto-js/cipher-core.js"(exports, module) {
    (function(root, factory, undef) {
      if (typeof exports === "object") {
        module.exports = exports = factory(require_core(), require_evpkdf());
      } else if (typeof define === "function" && define.amd) {
        define(["./core", "./evpkdf"], factory);
      } else {
        factory(root.CryptoJS);
      }
    })(exports, function(CryptoJS) {
      CryptoJS.lib.Cipher || function(undefined2) {
        var C = CryptoJS;
        var C_lib = C.lib;
        var Base = C_lib.Base;
        var WordArray = C_lib.WordArray;
        var BufferedBlockAlgorithm = C_lib.BufferedBlockAlgorithm;
        var C_enc = C.enc;
        var Utf8 = C_enc.Utf8;
        var Base64 = C_enc.Base64;
        var C_algo = C.algo;
        var EvpKDF = C_algo.EvpKDF;
        var Cipher = C_lib.Cipher = BufferedBlockAlgorithm.extend({
          /**
           * Configuration options.
           *
           * @property {WordArray} iv The IV to use for this operation.
           */
          cfg: Base.extend(),
          /**
           * Creates this cipher in encryption mode.
           *
           * @param {WordArray} key The key.
           * @param {Object} cfg (Optional) The configuration options to use for this operation.
           *
           * @return {Cipher} A cipher instance.
           *
           * @static
           *
           * @example
           *
           *     var cipher = CryptoJS.algo.AES.createEncryptor(keyWordArray, { iv: ivWordArray });
           */
          createEncryptor: function(key, cfg) {
            return this.create(this._ENC_XFORM_MODE, key, cfg);
          },
          /**
           * Creates this cipher in decryption mode.
           *
           * @param {WordArray} key The key.
           * @param {Object} cfg (Optional) The configuration options to use for this operation.
           *
           * @return {Cipher} A cipher instance.
           *
           * @static
           *
           * @example
           *
           *     var cipher = CryptoJS.algo.AES.createDecryptor(keyWordArray, { iv: ivWordArray });
           */
          createDecryptor: function(key, cfg) {
            return this.create(this._DEC_XFORM_MODE, key, cfg);
          },
          /**
           * Initializes a newly created cipher.
           *
           * @param {number} xformMode Either the encryption or decryption transormation mode constant.
           * @param {WordArray} key The key.
           * @param {Object} cfg (Optional) The configuration options to use for this operation.
           *
           * @example
           *
           *     var cipher = CryptoJS.algo.AES.create(CryptoJS.algo.AES._ENC_XFORM_MODE, keyWordArray, { iv: ivWordArray });
           */
          init: function(xformMode, key, cfg) {
            this.cfg = this.cfg.extend(cfg);
            this._xformMode = xformMode;
            this._key = key;
            this.reset();
          },
          /**
           * Resets this cipher to its initial state.
           *
           * @example
           *
           *     cipher.reset();
           */
          reset: function() {
            BufferedBlockAlgorithm.reset.call(this);
            this._doReset();
          },
          /**
           * Adds data to be encrypted or decrypted.
           *
           * @param {WordArray|string} dataUpdate The data to encrypt or decrypt.
           *
           * @return {WordArray} The data after processing.
           *
           * @example
           *
           *     var encrypted = cipher.process('data');
           *     var encrypted = cipher.process(wordArray);
           */
          process: function(dataUpdate) {
            this._append(dataUpdate);
            return this._process();
          },
          /**
           * Finalizes the encryption or decryption process.
           * Note that the finalize operation is effectively a destructive, read-once operation.
           *
           * @param {WordArray|string} dataUpdate The final data to encrypt or decrypt.
           *
           * @return {WordArray} The data after final processing.
           *
           * @example
           *
           *     var encrypted = cipher.finalize();
           *     var encrypted = cipher.finalize('data');
           *     var encrypted = cipher.finalize(wordArray);
           */
          finalize: function(dataUpdate) {
            if (dataUpdate) {
              this._append(dataUpdate);
            }
            var finalProcessedData = this._doFinalize();
            return finalProcessedData;
          },
          keySize: 128 / 32,
          ivSize: 128 / 32,
          _ENC_XFORM_MODE: 1,
          _DEC_XFORM_MODE: 2,
          /**
           * Creates shortcut functions to a cipher's object interface.
           *
           * @param {Cipher} cipher The cipher to create a helper for.
           *
           * @return {Object} An object with encrypt and decrypt shortcut functions.
           *
           * @static
           *
           * @example
           *
           *     var AES = CryptoJS.lib.Cipher._createHelper(CryptoJS.algo.AES);
           */
          _createHelper: function() {
            function selectCipherStrategy(key) {
              if (typeof key == "string") {
                return PasswordBasedCipher;
              } else {
                return SerializableCipher;
              }
            }
            return function(cipher) {
              return {
                encrypt: function(message, key, cfg) {
                  return selectCipherStrategy(key).encrypt(cipher, message, key, cfg);
                },
                decrypt: function(ciphertext, key, cfg) {
                  return selectCipherStrategy(key).decrypt(cipher, ciphertext, key, cfg);
                }
              };
            };
          }()
        });
        var StreamCipher = C_lib.StreamCipher = Cipher.extend({
          _doFinalize: function() {
            var finalProcessedBlocks = this._process(true);
            return finalProcessedBlocks;
          },
          blockSize: 1
        });
        var C_mode = C.mode = {};
        var BlockCipherMode = C_lib.BlockCipherMode = Base.extend({
          /**
           * Creates this mode for encryption.
           *
           * @param {Cipher} cipher A block cipher instance.
           * @param {Array} iv The IV words.
           *
           * @static
           *
           * @example
           *
           *     var mode = CryptoJS.mode.CBC.createEncryptor(cipher, iv.words);
           */
          createEncryptor: function(cipher, iv) {
            return this.Encryptor.create(cipher, iv);
          },
          /**
           * Creates this mode for decryption.
           *
           * @param {Cipher} cipher A block cipher instance.
           * @param {Array} iv The IV words.
           *
           * @static
           *
           * @example
           *
           *     var mode = CryptoJS.mode.CBC.createDecryptor(cipher, iv.words);
           */
          createDecryptor: function(cipher, iv) {
            return this.Decryptor.create(cipher, iv);
          },
          /**
           * Initializes a newly created mode.
           *
           * @param {Cipher} cipher A block cipher instance.
           * @param {Array} iv The IV words.
           *
           * @example
           *
           *     var mode = CryptoJS.mode.CBC.Encryptor.create(cipher, iv.words);
           */
          init: function(cipher, iv) {
            this._cipher = cipher;
            this._iv = iv;
          }
        });
        var CBC = C_mode.CBC = function() {
          var CBC2 = BlockCipherMode.extend();
          CBC2.Encryptor = CBC2.extend({
            /**
             * Processes the data block at offset.
             *
             * @param {Array} words The data words to operate on.
             * @param {number} offset The offset where the block starts.
             *
             * @example
             *
             *     mode.processBlock(data.words, offset);
             */
            processBlock: function(words, offset) {
              var cipher = this._cipher;
              var blockSize = cipher.blockSize;
              xorBlock.call(this, words, offset, blockSize);
              cipher.encryptBlock(words, offset);
              this._prevBlock = words.slice(offset, offset + blockSize);
            }
          });
          CBC2.Decryptor = CBC2.extend({
            /**
             * Processes the data block at offset.
             *
             * @param {Array} words The data words to operate on.
             * @param {number} offset The offset where the block starts.
             *
             * @example
             *
             *     mode.processBlock(data.words, offset);
             */
            processBlock: function(words, offset) {
              var cipher = this._cipher;
              var blockSize = cipher.blockSize;
              var thisBlock = words.slice(offset, offset + blockSize);
              cipher.decryptBlock(words, offset);
              xorBlock.call(this, words, offset, blockSize);
              this._prevBlock = thisBlock;
            }
          });
          function xorBlock(words, offset, blockSize) {
            var block;
            var iv = this._iv;
            if (iv) {
              block = iv;
              this._iv = undefined2;
            } else {
              block = this._prevBlock;
            }
            for (var i = 0; i < blockSize; i++) {
              words[offset + i] ^= block[i];
            }
          }
          return CBC2;
        }();
        var C_pad = C.pad = {};
        var Pkcs7 = C_pad.Pkcs7 = {
          /**
           * Pads data using the algorithm defined in PKCS #5/7.
           *
           * @param {WordArray} data The data to pad.
           * @param {number} blockSize The multiple that the data should be padded to.
           *
           * @static
           *
           * @example
           *
           *     CryptoJS.pad.Pkcs7.pad(wordArray, 4);
           */
          pad: function(data, blockSize) {
            var blockSizeBytes = blockSize * 4;
            var nPaddingBytes = blockSizeBytes - data.sigBytes % blockSizeBytes;
            var paddingWord = nPaddingBytes << 24 | nPaddingBytes << 16 | nPaddingBytes << 8 | nPaddingBytes;
            var paddingWords = [];
            for (var i = 0; i < nPaddingBytes; i += 4) {
              paddingWords.push(paddingWord);
            }
            var padding = WordArray.create(paddingWords, nPaddingBytes);
            data.concat(padding);
          },
          /**
           * Unpads data that had been padded using the algorithm defined in PKCS #5/7.
           *
           * @param {WordArray} data The data to unpad.
           *
           * @static
           *
           * @example
           *
           *     CryptoJS.pad.Pkcs7.unpad(wordArray);
           */
          unpad: function(data) {
            var nPaddingBytes = data.words[data.sigBytes - 1 >>> 2] & 255;
            data.sigBytes -= nPaddingBytes;
          }
        };
        var BlockCipher = C_lib.BlockCipher = Cipher.extend({
          /**
           * Configuration options.
           *
           * @property {Mode} mode The block mode to use. Default: CBC
           * @property {Padding} padding The padding strategy to use. Default: Pkcs7
           */
          cfg: Cipher.cfg.extend({
            mode: CBC,
            padding: Pkcs7
          }),
          reset: function() {
            var modeCreator;
            Cipher.reset.call(this);
            var cfg = this.cfg;
            var iv = cfg.iv;
            var mode = cfg.mode;
            if (this._xformMode == this._ENC_XFORM_MODE) {
              modeCreator = mode.createEncryptor;
            } else {
              modeCreator = mode.createDecryptor;
              this._minBufferSize = 1;
            }
            if (this._mode && this._mode.__creator == modeCreator) {
              this._mode.init(this, iv && iv.words);
            } else {
              this._mode = modeCreator.call(mode, this, iv && iv.words);
              this._mode.__creator = modeCreator;
            }
          },
          _doProcessBlock: function(words, offset) {
            this._mode.processBlock(words, offset);
          },
          _doFinalize: function() {
            var finalProcessedBlocks;
            var padding = this.cfg.padding;
            if (this._xformMode == this._ENC_XFORM_MODE) {
              padding.pad(this._data, this.blockSize);
              finalProcessedBlocks = this._process(true);
            } else {
              finalProcessedBlocks = this._process(true);
              padding.unpad(finalProcessedBlocks);
            }
            return finalProcessedBlocks;
          },
          blockSize: 128 / 32
        });
        var CipherParams = C_lib.CipherParams = Base.extend({
          /**
           * Initializes a newly created cipher params object.
           *
           * @param {Object} cipherParams An object with any of the possible cipher parameters.
           *
           * @example
           *
           *     var cipherParams = CryptoJS.lib.CipherParams.create({
           *         ciphertext: ciphertextWordArray,
           *         key: keyWordArray,
           *         iv: ivWordArray,
           *         salt: saltWordArray,
           *         algorithm: CryptoJS.algo.AES,
           *         mode: CryptoJS.mode.CBC,
           *         padding: CryptoJS.pad.PKCS7,
           *         blockSize: 4,
           *         formatter: CryptoJS.format.OpenSSL
           *     });
           */
          init: function(cipherParams) {
            this.mixIn(cipherParams);
          },
          /**
           * Converts this cipher params object to a string.
           *
           * @param {Format} formatter (Optional) The formatting strategy to use.
           *
           * @return {string} The stringified cipher params.
           *
           * @throws Error If neither the formatter nor the default formatter is set.
           *
           * @example
           *
           *     var string = cipherParams + '';
           *     var string = cipherParams.toString();
           *     var string = cipherParams.toString(CryptoJS.format.OpenSSL);
           */
          toString: function(formatter) {
            return (formatter || this.formatter).stringify(this);
          }
        });
        var C_format = C.format = {};
        var OpenSSLFormatter = C_format.OpenSSL = {
          /**
           * Converts a cipher params object to an OpenSSL-compatible string.
           *
           * @param {CipherParams} cipherParams The cipher params object.
           *
           * @return {string} The OpenSSL-compatible string.
           *
           * @static
           *
           * @example
           *
           *     var openSSLString = CryptoJS.format.OpenSSL.stringify(cipherParams);
           */
          stringify: function(cipherParams) {
            var wordArray;
            var ciphertext = cipherParams.ciphertext;
            var salt = cipherParams.salt;
            if (salt) {
              wordArray = WordArray.create([1398893684, 1701076831]).concat(salt).concat(ciphertext);
            } else {
              wordArray = ciphertext;
            }
            return wordArray.toString(Base64);
          },
          /**
           * Converts an OpenSSL-compatible string to a cipher params object.
           *
           * @param {string} openSSLStr The OpenSSL-compatible string.
           *
           * @return {CipherParams} The cipher params object.
           *
           * @static
           *
           * @example
           *
           *     var cipherParams = CryptoJS.format.OpenSSL.parse(openSSLString);
           */
          parse: function(openSSLStr) {
            var salt;
            var ciphertext = Base64.parse(openSSLStr);
            var ciphertextWords = ciphertext.words;
            if (ciphertextWords[0] == 1398893684 && ciphertextWords[1] == 1701076831) {
              salt = WordArray.create(ciphertextWords.slice(2, 4));
              ciphertextWords.splice(0, 4);
              ciphertext.sigBytes -= 16;
            }
            return CipherParams.create({ ciphertext, salt });
          }
        };
        var SerializableCipher = C_lib.SerializableCipher = Base.extend({
          /**
           * Configuration options.
           *
           * @property {Formatter} format The formatting strategy to convert cipher param objects to and from a string. Default: OpenSSL
           */
          cfg: Base.extend({
            format: OpenSSLFormatter
          }),
          /**
           * Encrypts a message.
           *
           * @param {Cipher} cipher The cipher algorithm to use.
           * @param {WordArray|string} message The message to encrypt.
           * @param {WordArray} key The key.
           * @param {Object} cfg (Optional) The configuration options to use for this operation.
           *
           * @return {CipherParams} A cipher params object.
           *
           * @static
           *
           * @example
           *
           *     var ciphertextParams = CryptoJS.lib.SerializableCipher.encrypt(CryptoJS.algo.AES, message, key);
           *     var ciphertextParams = CryptoJS.lib.SerializableCipher.encrypt(CryptoJS.algo.AES, message, key, { iv: iv });
           *     var ciphertextParams = CryptoJS.lib.SerializableCipher.encrypt(CryptoJS.algo.AES, message, key, { iv: iv, format: CryptoJS.format.OpenSSL });
           */
          encrypt: function(cipher, message, key, cfg) {
            cfg = this.cfg.extend(cfg);
            var encryptor = cipher.createEncryptor(key, cfg);
            var ciphertext = encryptor.finalize(message);
            var cipherCfg = encryptor.cfg;
            return CipherParams.create({
              ciphertext,
              key,
              iv: cipherCfg.iv,
              algorithm: cipher,
              mode: cipherCfg.mode,
              padding: cipherCfg.padding,
              blockSize: cipher.blockSize,
              formatter: cfg.format
            });
          },
          /**
           * Decrypts serialized ciphertext.
           *
           * @param {Cipher} cipher The cipher algorithm to use.
           * @param {CipherParams|string} ciphertext The ciphertext to decrypt.
           * @param {WordArray} key The key.
           * @param {Object} cfg (Optional) The configuration options to use for this operation.
           *
           * @return {WordArray} The plaintext.
           *
           * @static
           *
           * @example
           *
           *     var plaintext = CryptoJS.lib.SerializableCipher.decrypt(CryptoJS.algo.AES, formattedCiphertext, key, { iv: iv, format: CryptoJS.format.OpenSSL });
           *     var plaintext = CryptoJS.lib.SerializableCipher.decrypt(CryptoJS.algo.AES, ciphertextParams, key, { iv: iv, format: CryptoJS.format.OpenSSL });
           */
          decrypt: function(cipher, ciphertext, key, cfg) {
            cfg = this.cfg.extend(cfg);
            ciphertext = this._parse(ciphertext, cfg.format);
            var plaintext = cipher.createDecryptor(key, cfg).finalize(ciphertext.ciphertext);
            return plaintext;
          },
          /**
           * Converts serialized ciphertext to CipherParams,
           * else assumed CipherParams already and returns ciphertext unchanged.
           *
           * @param {CipherParams|string} ciphertext The ciphertext.
           * @param {Formatter} format The formatting strategy to use to parse serialized ciphertext.
           *
           * @return {CipherParams} The unserialized ciphertext.
           *
           * @static
           *
           * @example
           *
           *     var ciphertextParams = CryptoJS.lib.SerializableCipher._parse(ciphertextStringOrParams, format);
           */
          _parse: function(ciphertext, format) {
            if (typeof ciphertext == "string") {
              return format.parse(ciphertext, this);
            } else {
              return ciphertext;
            }
          }
        });
        var C_kdf = C.kdf = {};
        var OpenSSLKdf = C_kdf.OpenSSL = {
          /**
           * Derives a key and IV from a password.
           *
           * @param {string} password The password to derive from.
           * @param {number} keySize The size in words of the key to generate.
           * @param {number} ivSize The size in words of the IV to generate.
           * @param {WordArray|string} salt (Optional) A 64-bit salt to use. If omitted, a salt will be generated randomly.
           *
           * @return {CipherParams} A cipher params object with the key, IV, and salt.
           *
           * @static
           *
           * @example
           *
           *     var derivedParams = CryptoJS.kdf.OpenSSL.execute('Password', 256/32, 128/32);
           *     var derivedParams = CryptoJS.kdf.OpenSSL.execute('Password', 256/32, 128/32, 'saltsalt');
           */
          execute: function(password, keySize, ivSize, salt, hasher) {
            if (!salt) {
              salt = WordArray.random(64 / 8);
            }
            if (!hasher) {
              var key = EvpKDF.create({ keySize: keySize + ivSize }).compute(password, salt);
            } else {
              var key = EvpKDF.create({ keySize: keySize + ivSize, hasher }).compute(password, salt);
            }
            var iv = WordArray.create(key.words.slice(keySize), ivSize * 4);
            key.sigBytes = keySize * 4;
            return CipherParams.create({ key, iv, salt });
          }
        };
        var PasswordBasedCipher = C_lib.PasswordBasedCipher = SerializableCipher.extend({
          /**
           * Configuration options.
           *
           * @property {KDF} kdf The key derivation function to use to generate a key and IV from a password. Default: OpenSSL
           */
          cfg: SerializableCipher.cfg.extend({
            kdf: OpenSSLKdf
          }),
          /**
           * Encrypts a message using a password.
           *
           * @param {Cipher} cipher The cipher algorithm to use.
           * @param {WordArray|string} message The message to encrypt.
           * @param {string} password The password.
           * @param {Object} cfg (Optional) The configuration options to use for this operation.
           *
           * @return {CipherParams} A cipher params object.
           *
           * @static
           *
           * @example
           *
           *     var ciphertextParams = CryptoJS.lib.PasswordBasedCipher.encrypt(CryptoJS.algo.AES, message, 'password');
           *     var ciphertextParams = CryptoJS.lib.PasswordBasedCipher.encrypt(CryptoJS.algo.AES, message, 'password', { format: CryptoJS.format.OpenSSL });
           */
          encrypt: function(cipher, message, password, cfg) {
            cfg = this.cfg.extend(cfg);
            var derivedParams = cfg.kdf.execute(password, cipher.keySize, cipher.ivSize, cfg.salt, cfg.hasher);
            cfg.iv = derivedParams.iv;
            var ciphertext = SerializableCipher.encrypt.call(this, cipher, message, derivedParams.key, cfg);
            ciphertext.mixIn(derivedParams);
            return ciphertext;
          },
          /**
           * Decrypts serialized ciphertext using a password.
           *
           * @param {Cipher} cipher The cipher algorithm to use.
           * @param {CipherParams|string} ciphertext The ciphertext to decrypt.
           * @param {string} password The password.
           * @param {Object} cfg (Optional) The configuration options to use for this operation.
           *
           * @return {WordArray} The plaintext.
           *
           * @static
           *
           * @example
           *
           *     var plaintext = CryptoJS.lib.PasswordBasedCipher.decrypt(CryptoJS.algo.AES, formattedCiphertext, 'password', { format: CryptoJS.format.OpenSSL });
           *     var plaintext = CryptoJS.lib.PasswordBasedCipher.decrypt(CryptoJS.algo.AES, ciphertextParams, 'password', { format: CryptoJS.format.OpenSSL });
           */
          decrypt: function(cipher, ciphertext, password, cfg) {
            cfg = this.cfg.extend(cfg);
            ciphertext = this._parse(ciphertext, cfg.format);
            var derivedParams = cfg.kdf.execute(password, cipher.keySize, cipher.ivSize, ciphertext.salt, cfg.hasher);
            cfg.iv = derivedParams.iv;
            var plaintext = SerializableCipher.decrypt.call(this, cipher, ciphertext, derivedParams.key, cfg);
            return plaintext;
          }
        });
      }();
    });
  }
});

// ../../node_modules/crypto-js/mode-cfb.js
var require_mode_cfb = __commonJS({
  "../../node_modules/crypto-js/mode-cfb.js"(exports, module) {
    (function(root, factory, undef) {
      if (typeof exports === "object") {
        module.exports = exports = factory(require_core(), require_cipher_core());
      } else if (typeof define === "function" && define.amd) {
        define(["./core", "./cipher-core"], factory);
      } else {
        factory(root.CryptoJS);
      }
    })(exports, function(CryptoJS) {
      CryptoJS.mode.CFB = function() {
        var CFB = CryptoJS.lib.BlockCipherMode.extend();
        CFB.Encryptor = CFB.extend({
          processBlock: function(words, offset) {
            var cipher = this._cipher;
            var blockSize = cipher.blockSize;
            generateKeystreamAndEncrypt.call(this, words, offset, blockSize, cipher);
            this._prevBlock = words.slice(offset, offset + blockSize);
          }
        });
        CFB.Decryptor = CFB.extend({
          processBlock: function(words, offset) {
            var cipher = this._cipher;
            var blockSize = cipher.blockSize;
            var thisBlock = words.slice(offset, offset + blockSize);
            generateKeystreamAndEncrypt.call(this, words, offset, blockSize, cipher);
            this._prevBlock = thisBlock;
          }
        });
        function generateKeystreamAndEncrypt(words, offset, blockSize, cipher) {
          var keystream;
          var iv = this._iv;
          if (iv) {
            keystream = iv.slice(0);
            this._iv = void 0;
          } else {
            keystream = this._prevBlock;
          }
          cipher.encryptBlock(keystream, 0);
          for (var i = 0; i < blockSize; i++) {
            words[offset + i] ^= keystream[i];
          }
        }
        return CFB;
      }();
      return CryptoJS.mode.CFB;
    });
  }
});

// ../../node_modules/crypto-js/mode-ctr.js
var require_mode_ctr = __commonJS({
  "../../node_modules/crypto-js/mode-ctr.js"(exports, module) {
    (function(root, factory, undef) {
      if (typeof exports === "object") {
        module.exports = exports = factory(require_core(), require_cipher_core());
      } else if (typeof define === "function" && define.amd) {
        define(["./core", "./cipher-core"], factory);
      } else {
        factory(root.CryptoJS);
      }
    })(exports, function(CryptoJS) {
      CryptoJS.mode.CTR = function() {
        var CTR = CryptoJS.lib.BlockCipherMode.extend();
        var Encryptor = CTR.Encryptor = CTR.extend({
          processBlock: function(words, offset) {
            var cipher = this._cipher;
            var blockSize = cipher.blockSize;
            var iv = this._iv;
            var counter = this._counter;
            if (iv) {
              counter = this._counter = iv.slice(0);
              this._iv = void 0;
            }
            var keystream = counter.slice(0);
            cipher.encryptBlock(keystream, 0);
            counter[blockSize - 1] = counter[blockSize - 1] + 1 | 0;
            for (var i = 0; i < blockSize; i++) {
              words[offset + i] ^= keystream[i];
            }
          }
        });
        CTR.Decryptor = Encryptor;
        return CTR;
      }();
      return CryptoJS.mode.CTR;
    });
  }
});

// ../../node_modules/crypto-js/mode-ctr-gladman.js
var require_mode_ctr_gladman = __commonJS({
  "../../node_modules/crypto-js/mode-ctr-gladman.js"(exports, module) {
    (function(root, factory, undef) {
      if (typeof exports === "object") {
        module.exports = exports = factory(require_core(), require_cipher_core());
      } else if (typeof define === "function" && define.amd) {
        define(["./core", "./cipher-core"], factory);
      } else {
        factory(root.CryptoJS);
      }
    })(exports, function(CryptoJS) {
      CryptoJS.mode.CTRGladman = function() {
        var CTRGladman = CryptoJS.lib.BlockCipherMode.extend();
        function incWord(word) {
          if ((word >> 24 & 255) === 255) {
            var b1 = word >> 16 & 255;
            var b2 = word >> 8 & 255;
            var b3 = word & 255;
            if (b1 === 255) {
              b1 = 0;
              if (b2 === 255) {
                b2 = 0;
                if (b3 === 255) {
                  b3 = 0;
                } else {
                  ++b3;
                }
              } else {
                ++b2;
              }
            } else {
              ++b1;
            }
            word = 0;
            word += b1 << 16;
            word += b2 << 8;
            word += b3;
          } else {
            word += 1 << 24;
          }
          return word;
        }
        function incCounter(counter) {
          if ((counter[0] = incWord(counter[0])) === 0) {
            counter[1] = incWord(counter[1]);
          }
          return counter;
        }
        var Encryptor = CTRGladman.Encryptor = CTRGladman.extend({
          processBlock: function(words, offset) {
            var cipher = this._cipher;
            var blockSize = cipher.blockSize;
            var iv = this._iv;
            var counter = this._counter;
            if (iv) {
              counter = this._counter = iv.slice(0);
              this._iv = void 0;
            }
            incCounter(counter);
            var keystream = counter.slice(0);
            cipher.encryptBlock(keystream, 0);
            for (var i = 0; i < blockSize; i++) {
              words[offset + i] ^= keystream[i];
            }
          }
        });
        CTRGladman.Decryptor = Encryptor;
        return CTRGladman;
      }();
      return CryptoJS.mode.CTRGladman;
    });
  }
});

// ../../node_modules/crypto-js/mode-ofb.js
var require_mode_ofb = __commonJS({
  "../../node_modules/crypto-js/mode-ofb.js"(exports, module) {
    (function(root, factory, undef) {
      if (typeof exports === "object") {
        module.exports = exports = factory(require_core(), require_cipher_core());
      } else if (typeof define === "function" && define.amd) {
        define(["./core", "./cipher-core"], factory);
      } else {
        factory(root.CryptoJS);
      }
    })(exports, function(CryptoJS) {
      CryptoJS.mode.OFB = function() {
        var OFB = CryptoJS.lib.BlockCipherMode.extend();
        var Encryptor = OFB.Encryptor = OFB.extend({
          processBlock: function(words, offset) {
            var cipher = this._cipher;
            var blockSize = cipher.blockSize;
            var iv = this._iv;
            var keystream = this._keystream;
            if (iv) {
              keystream = this._keystream = iv.slice(0);
              this._iv = void 0;
            }
            cipher.encryptBlock(keystream, 0);
            for (var i = 0; i < blockSize; i++) {
              words[offset + i] ^= keystream[i];
            }
          }
        });
        OFB.Decryptor = Encryptor;
        return OFB;
      }();
      return CryptoJS.mode.OFB;
    });
  }
});

// ../../node_modules/crypto-js/mode-ecb.js
var require_mode_ecb = __commonJS({
  "../../node_modules/crypto-js/mode-ecb.js"(exports, module) {
    (function(root, factory, undef) {
      if (typeof exports === "object") {
        module.exports = exports = factory(require_core(), require_cipher_core());
      } else if (typeof define === "function" && define.amd) {
        define(["./core", "./cipher-core"], factory);
      } else {
        factory(root.CryptoJS);
      }
    })(exports, function(CryptoJS) {
      CryptoJS.mode.ECB = function() {
        var ECB = CryptoJS.lib.BlockCipherMode.extend();
        ECB.Encryptor = ECB.extend({
          processBlock: function(words, offset) {
            this._cipher.encryptBlock(words, offset);
          }
        });
        ECB.Decryptor = ECB.extend({
          processBlock: function(words, offset) {
            this._cipher.decryptBlock(words, offset);
          }
        });
        return ECB;
      }();
      return CryptoJS.mode.ECB;
    });
  }
});

// ../../node_modules/crypto-js/pad-ansix923.js
var require_pad_ansix923 = __commonJS({
  "../../node_modules/crypto-js/pad-ansix923.js"(exports, module) {
    (function(root, factory, undef) {
      if (typeof exports === "object") {
        module.exports = exports = factory(require_core(), require_cipher_core());
      } else if (typeof define === "function" && define.amd) {
        define(["./core", "./cipher-core"], factory);
      } else {
        factory(root.CryptoJS);
      }
    })(exports, function(CryptoJS) {
      CryptoJS.pad.AnsiX923 = {
        pad: function(data, blockSize) {
          var dataSigBytes = data.sigBytes;
          var blockSizeBytes = blockSize * 4;
          var nPaddingBytes = blockSizeBytes - dataSigBytes % blockSizeBytes;
          var lastBytePos = dataSigBytes + nPaddingBytes - 1;
          data.clamp();
          data.words[lastBytePos >>> 2] |= nPaddingBytes << 24 - lastBytePos % 4 * 8;
          data.sigBytes += nPaddingBytes;
        },
        unpad: function(data) {
          var nPaddingBytes = data.words[data.sigBytes - 1 >>> 2] & 255;
          data.sigBytes -= nPaddingBytes;
        }
      };
      return CryptoJS.pad.Ansix923;
    });
  }
});

// ../../node_modules/crypto-js/pad-iso10126.js
var require_pad_iso10126 = __commonJS({
  "../../node_modules/crypto-js/pad-iso10126.js"(exports, module) {
    (function(root, factory, undef) {
      if (typeof exports === "object") {
        module.exports = exports = factory(require_core(), require_cipher_core());
      } else if (typeof define === "function" && define.amd) {
        define(["./core", "./cipher-core"], factory);
      } else {
        factory(root.CryptoJS);
      }
    })(exports, function(CryptoJS) {
      CryptoJS.pad.Iso10126 = {
        pad: function(data, blockSize) {
          var blockSizeBytes = blockSize * 4;
          var nPaddingBytes = blockSizeBytes - data.sigBytes % blockSizeBytes;
          data.concat(CryptoJS.lib.WordArray.random(nPaddingBytes - 1)).concat(CryptoJS.lib.WordArray.create([nPaddingBytes << 24], 1));
        },
        unpad: function(data) {
          var nPaddingBytes = data.words[data.sigBytes - 1 >>> 2] & 255;
          data.sigBytes -= nPaddingBytes;
        }
      };
      return CryptoJS.pad.Iso10126;
    });
  }
});

// ../../node_modules/crypto-js/pad-iso97971.js
var require_pad_iso97971 = __commonJS({
  "../../node_modules/crypto-js/pad-iso97971.js"(exports, module) {
    (function(root, factory, undef) {
      if (typeof exports === "object") {
        module.exports = exports = factory(require_core(), require_cipher_core());
      } else if (typeof define === "function" && define.amd) {
        define(["./core", "./cipher-core"], factory);
      } else {
        factory(root.CryptoJS);
      }
    })(exports, function(CryptoJS) {
      CryptoJS.pad.Iso97971 = {
        pad: function(data, blockSize) {
          data.concat(CryptoJS.lib.WordArray.create([2147483648], 1));
          CryptoJS.pad.ZeroPadding.pad(data, blockSize);
        },
        unpad: function(data) {
          CryptoJS.pad.ZeroPadding.unpad(data);
          data.sigBytes--;
        }
      };
      return CryptoJS.pad.Iso97971;
    });
  }
});

// ../../node_modules/crypto-js/pad-zeropadding.js
var require_pad_zeropadding = __commonJS({
  "../../node_modules/crypto-js/pad-zeropadding.js"(exports, module) {
    (function(root, factory, undef) {
      if (typeof exports === "object") {
        module.exports = exports = factory(require_core(), require_cipher_core());
      } else if (typeof define === "function" && define.amd) {
        define(["./core", "./cipher-core"], factory);
      } else {
        factory(root.CryptoJS);
      }
    })(exports, function(CryptoJS) {
      CryptoJS.pad.ZeroPadding = {
        pad: function(data, blockSize) {
          var blockSizeBytes = blockSize * 4;
          data.clamp();
          data.sigBytes += blockSizeBytes - (data.sigBytes % blockSizeBytes || blockSizeBytes);
        },
        unpad: function(data) {
          var dataWords = data.words;
          var i = data.sigBytes - 1;
          for (var i = data.sigBytes - 1; i >= 0; i--) {
            if (dataWords[i >>> 2] >>> 24 - i % 4 * 8 & 255) {
              data.sigBytes = i + 1;
              break;
            }
          }
        }
      };
      return CryptoJS.pad.ZeroPadding;
    });
  }
});

// ../../node_modules/crypto-js/pad-nopadding.js
var require_pad_nopadding = __commonJS({
  "../../node_modules/crypto-js/pad-nopadding.js"(exports, module) {
    (function(root, factory, undef) {
      if (typeof exports === "object") {
        module.exports = exports = factory(require_core(), require_cipher_core());
      } else if (typeof define === "function" && define.amd) {
        define(["./core", "./cipher-core"], factory);
      } else {
        factory(root.CryptoJS);
      }
    })(exports, function(CryptoJS) {
      CryptoJS.pad.NoPadding = {
        pad: function() {
        },
        unpad: function() {
        }
      };
      return CryptoJS.pad.NoPadding;
    });
  }
});

// ../../node_modules/crypto-js/format-hex.js
var require_format_hex = __commonJS({
  "../../node_modules/crypto-js/format-hex.js"(exports, module) {
    (function(root, factory, undef) {
      if (typeof exports === "object") {
        module.exports = exports = factory(require_core(), require_cipher_core());
      } else if (typeof define === "function" && define.amd) {
        define(["./core", "./cipher-core"], factory);
      } else {
        factory(root.CryptoJS);
      }
    })(exports, function(CryptoJS) {
      (function(undefined2) {
        var C = CryptoJS;
        var C_lib = C.lib;
        var CipherParams = C_lib.CipherParams;
        var C_enc = C.enc;
        var Hex = C_enc.Hex;
        var C_format = C.format;
        var HexFormatter = C_format.Hex = {
          /**
           * Converts the ciphertext of a cipher params object to a hexadecimally encoded string.
           *
           * @param {CipherParams} cipherParams The cipher params object.
           *
           * @return {string} The hexadecimally encoded string.
           *
           * @static
           *
           * @example
           *
           *     var hexString = CryptoJS.format.Hex.stringify(cipherParams);
           */
          stringify: function(cipherParams) {
            return cipherParams.ciphertext.toString(Hex);
          },
          /**
           * Converts a hexadecimally encoded ciphertext string to a cipher params object.
           *
           * @param {string} input The hexadecimally encoded string.
           *
           * @return {CipherParams} The cipher params object.
           *
           * @static
           *
           * @example
           *
           *     var cipherParams = CryptoJS.format.Hex.parse(hexString);
           */
          parse: function(input) {
            var ciphertext = Hex.parse(input);
            return CipherParams.create({ ciphertext });
          }
        };
      })();
      return CryptoJS.format.Hex;
    });
  }
});

// ../../node_modules/crypto-js/aes.js
var require_aes = __commonJS({
  "../../node_modules/crypto-js/aes.js"(exports, module) {
    (function(root, factory, undef) {
      if (typeof exports === "object") {
        module.exports = exports = factory(require_core(), require_enc_base64(), require_md5(), require_evpkdf(), require_cipher_core());
      } else if (typeof define === "function" && define.amd) {
        define(["./core", "./enc-base64", "./md5", "./evpkdf", "./cipher-core"], factory);
      } else {
        factory(root.CryptoJS);
      }
    })(exports, function(CryptoJS) {
      (function() {
        var C = CryptoJS;
        var C_lib = C.lib;
        var BlockCipher = C_lib.BlockCipher;
        var C_algo = C.algo;
        var SBOX = [];
        var INV_SBOX = [];
        var SUB_MIX_0 = [];
        var SUB_MIX_1 = [];
        var SUB_MIX_2 = [];
        var SUB_MIX_3 = [];
        var INV_SUB_MIX_0 = [];
        var INV_SUB_MIX_1 = [];
        var INV_SUB_MIX_2 = [];
        var INV_SUB_MIX_3 = [];
        (function() {
          var d = [];
          for (var i = 0; i < 256; i++) {
            if (i < 128) {
              d[i] = i << 1;
            } else {
              d[i] = i << 1 ^ 283;
            }
          }
          var x = 0;
          var xi = 0;
          for (var i = 0; i < 256; i++) {
            var sx = xi ^ xi << 1 ^ xi << 2 ^ xi << 3 ^ xi << 4;
            sx = sx >>> 8 ^ sx & 255 ^ 99;
            SBOX[x] = sx;
            INV_SBOX[sx] = x;
            var x2 = d[x];
            var x4 = d[x2];
            var x8 = d[x4];
            var t = d[sx] * 257 ^ sx * 16843008;
            SUB_MIX_0[x] = t << 24 | t >>> 8;
            SUB_MIX_1[x] = t << 16 | t >>> 16;
            SUB_MIX_2[x] = t << 8 | t >>> 24;
            SUB_MIX_3[x] = t;
            var t = x8 * 16843009 ^ x4 * 65537 ^ x2 * 257 ^ x * 16843008;
            INV_SUB_MIX_0[sx] = t << 24 | t >>> 8;
            INV_SUB_MIX_1[sx] = t << 16 | t >>> 16;
            INV_SUB_MIX_2[sx] = t << 8 | t >>> 24;
            INV_SUB_MIX_3[sx] = t;
            if (!x) {
              x = xi = 1;
            } else {
              x = x2 ^ d[d[d[x8 ^ x2]]];
              xi ^= d[d[xi]];
            }
          }
        })();
        var RCON = [0, 1, 2, 4, 8, 16, 32, 64, 128, 27, 54];
        var AES = C_algo.AES = BlockCipher.extend({
          _doReset: function() {
            var t;
            if (this._nRounds && this._keyPriorReset === this._key) {
              return;
            }
            var key = this._keyPriorReset = this._key;
            var keyWords = key.words;
            var keySize = key.sigBytes / 4;
            var nRounds = this._nRounds = keySize + 6;
            var ksRows = (nRounds + 1) * 4;
            var keySchedule = this._keySchedule = [];
            for (var ksRow = 0; ksRow < ksRows; ksRow++) {
              if (ksRow < keySize) {
                keySchedule[ksRow] = keyWords[ksRow];
              } else {
                t = keySchedule[ksRow - 1];
                if (!(ksRow % keySize)) {
                  t = t << 8 | t >>> 24;
                  t = SBOX[t >>> 24] << 24 | SBOX[t >>> 16 & 255] << 16 | SBOX[t >>> 8 & 255] << 8 | SBOX[t & 255];
                  t ^= RCON[ksRow / keySize | 0] << 24;
                } else if (keySize > 6 && ksRow % keySize == 4) {
                  t = SBOX[t >>> 24] << 24 | SBOX[t >>> 16 & 255] << 16 | SBOX[t >>> 8 & 255] << 8 | SBOX[t & 255];
                }
                keySchedule[ksRow] = keySchedule[ksRow - keySize] ^ t;
              }
            }
            var invKeySchedule = this._invKeySchedule = [];
            for (var invKsRow = 0; invKsRow < ksRows; invKsRow++) {
              var ksRow = ksRows - invKsRow;
              if (invKsRow % 4) {
                var t = keySchedule[ksRow];
              } else {
                var t = keySchedule[ksRow - 4];
              }
              if (invKsRow < 4 || ksRow <= 4) {
                invKeySchedule[invKsRow] = t;
              } else {
                invKeySchedule[invKsRow] = INV_SUB_MIX_0[SBOX[t >>> 24]] ^ INV_SUB_MIX_1[SBOX[t >>> 16 & 255]] ^ INV_SUB_MIX_2[SBOX[t >>> 8 & 255]] ^ INV_SUB_MIX_3[SBOX[t & 255]];
              }
            }
          },
          encryptBlock: function(M, offset) {
            this._doCryptBlock(M, offset, this._keySchedule, SUB_MIX_0, SUB_MIX_1, SUB_MIX_2, SUB_MIX_3, SBOX);
          },
          decryptBlock: function(M, offset) {
            var t = M[offset + 1];
            M[offset + 1] = M[offset + 3];
            M[offset + 3] = t;
            this._doCryptBlock(M, offset, this._invKeySchedule, INV_SUB_MIX_0, INV_SUB_MIX_1, INV_SUB_MIX_2, INV_SUB_MIX_3, INV_SBOX);
            var t = M[offset + 1];
            M[offset + 1] = M[offset + 3];
            M[offset + 3] = t;
          },
          _doCryptBlock: function(M, offset, keySchedule, SUB_MIX_02, SUB_MIX_12, SUB_MIX_22, SUB_MIX_32, SBOX2) {
            var nRounds = this._nRounds;
            var s0 = M[offset] ^ keySchedule[0];
            var s1 = M[offset + 1] ^ keySchedule[1];
            var s2 = M[offset + 2] ^ keySchedule[2];
            var s3 = M[offset + 3] ^ keySchedule[3];
            var ksRow = 4;
            for (var round = 1; round < nRounds; round++) {
              var t0 = SUB_MIX_02[s0 >>> 24] ^ SUB_MIX_12[s1 >>> 16 & 255] ^ SUB_MIX_22[s2 >>> 8 & 255] ^ SUB_MIX_32[s3 & 255] ^ keySchedule[ksRow++];
              var t1 = SUB_MIX_02[s1 >>> 24] ^ SUB_MIX_12[s2 >>> 16 & 255] ^ SUB_MIX_22[s3 >>> 8 & 255] ^ SUB_MIX_32[s0 & 255] ^ keySchedule[ksRow++];
              var t2 = SUB_MIX_02[s2 >>> 24] ^ SUB_MIX_12[s3 >>> 16 & 255] ^ SUB_MIX_22[s0 >>> 8 & 255] ^ SUB_MIX_32[s1 & 255] ^ keySchedule[ksRow++];
              var t3 = SUB_MIX_02[s3 >>> 24] ^ SUB_MIX_12[s0 >>> 16 & 255] ^ SUB_MIX_22[s1 >>> 8 & 255] ^ SUB_MIX_32[s2 & 255] ^ keySchedule[ksRow++];
              s0 = t0;
              s1 = t1;
              s2 = t2;
              s3 = t3;
            }
            var t0 = (SBOX2[s0 >>> 24] << 24 | SBOX2[s1 >>> 16 & 255] << 16 | SBOX2[s2 >>> 8 & 255] << 8 | SBOX2[s3 & 255]) ^ keySchedule[ksRow++];
            var t1 = (SBOX2[s1 >>> 24] << 24 | SBOX2[s2 >>> 16 & 255] << 16 | SBOX2[s3 >>> 8 & 255] << 8 | SBOX2[s0 & 255]) ^ keySchedule[ksRow++];
            var t2 = (SBOX2[s2 >>> 24] << 24 | SBOX2[s3 >>> 16 & 255] << 16 | SBOX2[s0 >>> 8 & 255] << 8 | SBOX2[s1 & 255]) ^ keySchedule[ksRow++];
            var t3 = (SBOX2[s3 >>> 24] << 24 | SBOX2[s0 >>> 16 & 255] << 16 | SBOX2[s1 >>> 8 & 255] << 8 | SBOX2[s2 & 255]) ^ keySchedule[ksRow++];
            M[offset] = t0;
            M[offset + 1] = t1;
            M[offset + 2] = t2;
            M[offset + 3] = t3;
          },
          keySize: 256 / 32
        });
        C.AES = BlockCipher._createHelper(AES);
      })();
      return CryptoJS.AES;
    });
  }
});

// ../../node_modules/crypto-js/tripledes.js
var require_tripledes = __commonJS({
  "../../node_modules/crypto-js/tripledes.js"(exports, module) {
    (function(root, factory, undef) {
      if (typeof exports === "object") {
        module.exports = exports = factory(require_core(), require_enc_base64(), require_md5(), require_evpkdf(), require_cipher_core());
      } else if (typeof define === "function" && define.amd) {
        define(["./core", "./enc-base64", "./md5", "./evpkdf", "./cipher-core"], factory);
      } else {
        factory(root.CryptoJS);
      }
    })(exports, function(CryptoJS) {
      (function() {
        var C = CryptoJS;
        var C_lib = C.lib;
        var WordArray = C_lib.WordArray;
        var BlockCipher = C_lib.BlockCipher;
        var C_algo = C.algo;
        var PC1 = [
          57,
          49,
          41,
          33,
          25,
          17,
          9,
          1,
          58,
          50,
          42,
          34,
          26,
          18,
          10,
          2,
          59,
          51,
          43,
          35,
          27,
          19,
          11,
          3,
          60,
          52,
          44,
          36,
          63,
          55,
          47,
          39,
          31,
          23,
          15,
          7,
          62,
          54,
          46,
          38,
          30,
          22,
          14,
          6,
          61,
          53,
          45,
          37,
          29,
          21,
          13,
          5,
          28,
          20,
          12,
          4
        ];
        var PC2 = [
          14,
          17,
          11,
          24,
          1,
          5,
          3,
          28,
          15,
          6,
          21,
          10,
          23,
          19,
          12,
          4,
          26,
          8,
          16,
          7,
          27,
          20,
          13,
          2,
          41,
          52,
          31,
          37,
          47,
          55,
          30,
          40,
          51,
          45,
          33,
          48,
          44,
          49,
          39,
          56,
          34,
          53,
          46,
          42,
          50,
          36,
          29,
          32
        ];
        var BIT_SHIFTS = [1, 2, 4, 6, 8, 10, 12, 14, 15, 17, 19, 21, 23, 25, 27, 28];
        var SBOX_P = [
          {
            0: 8421888,
            268435456: 32768,
            536870912: 8421378,
            805306368: 2,
            1073741824: 512,
            1342177280: 8421890,
            1610612736: 8389122,
            1879048192: 8388608,
            2147483648: 514,
            2415919104: 8389120,
            2684354560: 33280,
            2952790016: 8421376,
            3221225472: 32770,
            3489660928: 8388610,
            3758096384: 0,
            4026531840: 33282,
            134217728: 0,
            402653184: 8421890,
            671088640: 33282,
            939524096: 32768,
            1207959552: 8421888,
            1476395008: 512,
            1744830464: 8421378,
            2013265920: 2,
            2281701376: 8389120,
            2550136832: 33280,
            2818572288: 8421376,
            3087007744: 8389122,
            3355443200: 8388610,
            3623878656: 32770,
            3892314112: 514,
            4160749568: 8388608,
            1: 32768,
            268435457: 2,
            536870913: 8421888,
            805306369: 8388608,
            1073741825: 8421378,
            1342177281: 33280,
            1610612737: 512,
            1879048193: 8389122,
            2147483649: 8421890,
            2415919105: 8421376,
            2684354561: 8388610,
            2952790017: 33282,
            3221225473: 514,
            3489660929: 8389120,
            3758096385: 32770,
            4026531841: 0,
            134217729: 8421890,
            402653185: 8421376,
            671088641: 8388608,
            939524097: 512,
            1207959553: 32768,
            1476395009: 8388610,
            1744830465: 2,
            2013265921: 33282,
            2281701377: 32770,
            2550136833: 8389122,
            2818572289: 514,
            3087007745: 8421888,
            3355443201: 8389120,
            3623878657: 0,
            3892314113: 33280,
            4160749569: 8421378
          },
          {
            0: 1074282512,
            16777216: 16384,
            33554432: 524288,
            50331648: 1074266128,
            67108864: 1073741840,
            83886080: 1074282496,
            100663296: 1073758208,
            117440512: 16,
            134217728: 540672,
            150994944: 1073758224,
            167772160: 1073741824,
            184549376: 540688,
            201326592: 524304,
            218103808: 0,
            234881024: 16400,
            251658240: 1074266112,
            8388608: 1073758208,
            25165824: 540688,
            41943040: 16,
            58720256: 1073758224,
            75497472: 1074282512,
            92274688: 1073741824,
            109051904: 524288,
            125829120: 1074266128,
            142606336: 524304,
            159383552: 0,
            176160768: 16384,
            192937984: 1074266112,
            209715200: 1073741840,
            226492416: 540672,
            243269632: 1074282496,
            260046848: 16400,
            268435456: 0,
            285212672: 1074266128,
            301989888: 1073758224,
            318767104: 1074282496,
            335544320: 1074266112,
            352321536: 16,
            369098752: 540688,
            385875968: 16384,
            402653184: 16400,
            419430400: 524288,
            436207616: 524304,
            452984832: 1073741840,
            469762048: 540672,
            486539264: 1073758208,
            503316480: 1073741824,
            520093696: 1074282512,
            276824064: 540688,
            293601280: 524288,
            310378496: 1074266112,
            327155712: 16384,
            343932928: 1073758208,
            360710144: 1074282512,
            377487360: 16,
            394264576: 1073741824,
            411041792: 1074282496,
            427819008: 1073741840,
            444596224: 1073758224,
            461373440: 524304,
            478150656: 0,
            494927872: 16400,
            511705088: 1074266128,
            528482304: 540672
          },
          {
            0: 260,
            1048576: 0,
            2097152: 67109120,
            3145728: 65796,
            4194304: 65540,
            5242880: 67108868,
            6291456: 67174660,
            7340032: 67174400,
            8388608: 67108864,
            9437184: 67174656,
            10485760: 65792,
            11534336: 67174404,
            12582912: 67109124,
            13631488: 65536,
            14680064: 4,
            15728640: 256,
            524288: 67174656,
            1572864: 67174404,
            2621440: 0,
            3670016: 67109120,
            4718592: 67108868,
            5767168: 65536,
            6815744: 65540,
            7864320: 260,
            8912896: 4,
            9961472: 256,
            11010048: 67174400,
            12058624: 65796,
            13107200: 65792,
            14155776: 67109124,
            15204352: 67174660,
            16252928: 67108864,
            16777216: 67174656,
            17825792: 65540,
            18874368: 65536,
            19922944: 67109120,
            20971520: 256,
            22020096: 67174660,
            23068672: 67108868,
            24117248: 0,
            25165824: 67109124,
            26214400: 67108864,
            27262976: 4,
            28311552: 65792,
            29360128: 67174400,
            30408704: 260,
            31457280: 65796,
            32505856: 67174404,
            17301504: 67108864,
            18350080: 260,
            19398656: 67174656,
            20447232: 0,
            21495808: 65540,
            22544384: 67109120,
            23592960: 256,
            24641536: 67174404,
            25690112: 65536,
            26738688: 67174660,
            27787264: 65796,
            28835840: 67108868,
            29884416: 67109124,
            30932992: 67174400,
            31981568: 4,
            33030144: 65792
          },
          {
            0: 2151682048,
            65536: 2147487808,
            131072: 4198464,
            196608: 2151677952,
            262144: 0,
            327680: 4198400,
            393216: 2147483712,
            458752: 4194368,
            524288: 2147483648,
            589824: 4194304,
            655360: 64,
            720896: 2147487744,
            786432: 2151678016,
            851968: 4160,
            917504: 4096,
            983040: 2151682112,
            32768: 2147487808,
            98304: 64,
            163840: 2151678016,
            229376: 2147487744,
            294912: 4198400,
            360448: 2151682112,
            425984: 0,
            491520: 2151677952,
            557056: 4096,
            622592: 2151682048,
            688128: 4194304,
            753664: 4160,
            819200: 2147483648,
            884736: 4194368,
            950272: 4198464,
            1015808: 2147483712,
            1048576: 4194368,
            1114112: 4198400,
            1179648: 2147483712,
            1245184: 0,
            1310720: 4160,
            1376256: 2151678016,
            1441792: 2151682048,
            1507328: 2147487808,
            1572864: 2151682112,
            1638400: 2147483648,
            1703936: 2151677952,
            1769472: 4198464,
            1835008: 2147487744,
            1900544: 4194304,
            1966080: 64,
            2031616: 4096,
            1081344: 2151677952,
            1146880: 2151682112,
            1212416: 0,
            1277952: 4198400,
            1343488: 4194368,
            1409024: 2147483648,
            1474560: 2147487808,
            1540096: 64,
            1605632: 2147483712,
            1671168: 4096,
            1736704: 2147487744,
            1802240: 2151678016,
            1867776: 4160,
            1933312: 2151682048,
            1998848: 4194304,
            2064384: 4198464
          },
          {
            0: 128,
            4096: 17039360,
            8192: 262144,
            12288: 536870912,
            16384: 537133184,
            20480: 16777344,
            24576: 553648256,
            28672: 262272,
            32768: 16777216,
            36864: 537133056,
            40960: 536871040,
            45056: 553910400,
            49152: 553910272,
            53248: 0,
            57344: 17039488,
            61440: 553648128,
            2048: 17039488,
            6144: 553648256,
            10240: 128,
            14336: 17039360,
            18432: 262144,
            22528: 537133184,
            26624: 553910272,
            30720: 536870912,
            34816: 537133056,
            38912: 0,
            43008: 553910400,
            47104: 16777344,
            51200: 536871040,
            55296: 553648128,
            59392: 16777216,
            63488: 262272,
            65536: 262144,
            69632: 128,
            73728: 536870912,
            77824: 553648256,
            81920: 16777344,
            86016: 553910272,
            90112: 537133184,
            94208: 16777216,
            98304: 553910400,
            102400: 553648128,
            106496: 17039360,
            110592: 537133056,
            114688: 262272,
            118784: 536871040,
            122880: 0,
            126976: 17039488,
            67584: 553648256,
            71680: 16777216,
            75776: 17039360,
            79872: 537133184,
            83968: 536870912,
            88064: 17039488,
            92160: 128,
            96256: 553910272,
            100352: 262272,
            104448: 553910400,
            108544: 0,
            112640: 553648128,
            116736: 16777344,
            120832: 262144,
            124928: 537133056,
            129024: 536871040
          },
          {
            0: 268435464,
            256: 8192,
            512: 270532608,
            768: 270540808,
            1024: 268443648,
            1280: 2097152,
            1536: 2097160,
            1792: 268435456,
            2048: 0,
            2304: 268443656,
            2560: 2105344,
            2816: 8,
            3072: 270532616,
            3328: 2105352,
            3584: 8200,
            3840: 270540800,
            128: 270532608,
            384: 270540808,
            640: 8,
            896: 2097152,
            1152: 2105352,
            1408: 268435464,
            1664: 268443648,
            1920: 8200,
            2176: 2097160,
            2432: 8192,
            2688: 268443656,
            2944: 270532616,
            3200: 0,
            3456: 270540800,
            3712: 2105344,
            3968: 268435456,
            4096: 268443648,
            4352: 270532616,
            4608: 270540808,
            4864: 8200,
            5120: 2097152,
            5376: 268435456,
            5632: 268435464,
            5888: 2105344,
            6144: 2105352,
            6400: 0,
            6656: 8,
            6912: 270532608,
            7168: 8192,
            7424: 268443656,
            7680: 270540800,
            7936: 2097160,
            4224: 8,
            4480: 2105344,
            4736: 2097152,
            4992: 268435464,
            5248: 268443648,
            5504: 8200,
            5760: 270540808,
            6016: 270532608,
            6272: 270540800,
            6528: 270532616,
            6784: 8192,
            7040: 2105352,
            7296: 2097160,
            7552: 0,
            7808: 268435456,
            8064: 268443656
          },
          {
            0: 1048576,
            16: 33555457,
            32: 1024,
            48: 1049601,
            64: 34604033,
            80: 0,
            96: 1,
            112: 34603009,
            128: 33555456,
            144: 1048577,
            160: 33554433,
            176: 34604032,
            192: 34603008,
            208: 1025,
            224: 1049600,
            240: 33554432,
            8: 34603009,
            24: 0,
            40: 33555457,
            56: 34604032,
            72: 1048576,
            88: 33554433,
            104: 33554432,
            120: 1025,
            136: 1049601,
            152: 33555456,
            168: 34603008,
            184: 1048577,
            200: 1024,
            216: 34604033,
            232: 1,
            248: 1049600,
            256: 33554432,
            272: 1048576,
            288: 33555457,
            304: 34603009,
            320: 1048577,
            336: 33555456,
            352: 34604032,
            368: 1049601,
            384: 1025,
            400: 34604033,
            416: 1049600,
            432: 1,
            448: 0,
            464: 34603008,
            480: 33554433,
            496: 1024,
            264: 1049600,
            280: 33555457,
            296: 34603009,
            312: 1,
            328: 33554432,
            344: 1048576,
            360: 1025,
            376: 34604032,
            392: 33554433,
            408: 34603008,
            424: 0,
            440: 34604033,
            456: 1049601,
            472: 1024,
            488: 33555456,
            504: 1048577
          },
          {
            0: 134219808,
            1: 131072,
            2: 134217728,
            3: 32,
            4: 131104,
            5: 134350880,
            6: 134350848,
            7: 2048,
            8: 134348800,
            9: 134219776,
            10: 133120,
            11: 134348832,
            12: 2080,
            13: 0,
            14: 134217760,
            15: 133152,
            2147483648: 2048,
            2147483649: 134350880,
            2147483650: 134219808,
            2147483651: 134217728,
            2147483652: 134348800,
            2147483653: 133120,
            2147483654: 133152,
            2147483655: 32,
            2147483656: 134217760,
            2147483657: 2080,
            2147483658: 131104,
            2147483659: 134350848,
            2147483660: 0,
            2147483661: 134348832,
            2147483662: 134219776,
            2147483663: 131072,
            16: 133152,
            17: 134350848,
            18: 32,
            19: 2048,
            20: 134219776,
            21: 134217760,
            22: 134348832,
            23: 131072,
            24: 0,
            25: 131104,
            26: 134348800,
            27: 134219808,
            28: 134350880,
            29: 133120,
            30: 2080,
            31: 134217728,
            2147483664: 131072,
            2147483665: 2048,
            2147483666: 134348832,
            2147483667: 133152,
            2147483668: 32,
            2147483669: 134348800,
            2147483670: 134217728,
            2147483671: 134219808,
            2147483672: 134350880,
            2147483673: 134217760,
            2147483674: 134219776,
            2147483675: 0,
            2147483676: 133120,
            2147483677: 2080,
            2147483678: 131104,
            2147483679: 134350848
          }
        ];
        var SBOX_MASK = [
          4160749569,
          528482304,
          33030144,
          2064384,
          129024,
          8064,
          504,
          2147483679
        ];
        var DES = C_algo.DES = BlockCipher.extend({
          _doReset: function() {
            var key = this._key;
            var keyWords = key.words;
            var keyBits = [];
            for (var i = 0; i < 56; i++) {
              var keyBitPos = PC1[i] - 1;
              keyBits[i] = keyWords[keyBitPos >>> 5] >>> 31 - keyBitPos % 32 & 1;
            }
            var subKeys = this._subKeys = [];
            for (var nSubKey = 0; nSubKey < 16; nSubKey++) {
              var subKey = subKeys[nSubKey] = [];
              var bitShift = BIT_SHIFTS[nSubKey];
              for (var i = 0; i < 24; i++) {
                subKey[i / 6 | 0] |= keyBits[(PC2[i] - 1 + bitShift) % 28] << 31 - i % 6;
                subKey[4 + (i / 6 | 0)] |= keyBits[28 + (PC2[i + 24] - 1 + bitShift) % 28] << 31 - i % 6;
              }
              subKey[0] = subKey[0] << 1 | subKey[0] >>> 31;
              for (var i = 1; i < 7; i++) {
                subKey[i] = subKey[i] >>> (i - 1) * 4 + 3;
              }
              subKey[7] = subKey[7] << 5 | subKey[7] >>> 27;
            }
            var invSubKeys = this._invSubKeys = [];
            for (var i = 0; i < 16; i++) {
              invSubKeys[i] = subKeys[15 - i];
            }
          },
          encryptBlock: function(M, offset) {
            this._doCryptBlock(M, offset, this._subKeys);
          },
          decryptBlock: function(M, offset) {
            this._doCryptBlock(M, offset, this._invSubKeys);
          },
          _doCryptBlock: function(M, offset, subKeys) {
            this._lBlock = M[offset];
            this._rBlock = M[offset + 1];
            exchangeLR.call(this, 4, 252645135);
            exchangeLR.call(this, 16, 65535);
            exchangeRL.call(this, 2, 858993459);
            exchangeRL.call(this, 8, 16711935);
            exchangeLR.call(this, 1, 1431655765);
            for (var round = 0; round < 16; round++) {
              var subKey = subKeys[round];
              var lBlock = this._lBlock;
              var rBlock = this._rBlock;
              var f = 0;
              for (var i = 0; i < 8; i++) {
                f |= SBOX_P[i][((rBlock ^ subKey[i]) & SBOX_MASK[i]) >>> 0];
              }
              this._lBlock = rBlock;
              this._rBlock = lBlock ^ f;
            }
            var t = this._lBlock;
            this._lBlock = this._rBlock;
            this._rBlock = t;
            exchangeLR.call(this, 1, 1431655765);
            exchangeRL.call(this, 8, 16711935);
            exchangeRL.call(this, 2, 858993459);
            exchangeLR.call(this, 16, 65535);
            exchangeLR.call(this, 4, 252645135);
            M[offset] = this._lBlock;
            M[offset + 1] = this._rBlock;
          },
          keySize: 64 / 32,
          ivSize: 64 / 32,
          blockSize: 64 / 32
        });
        function exchangeLR(offset, mask) {
          var t = (this._lBlock >>> offset ^ this._rBlock) & mask;
          this._rBlock ^= t;
          this._lBlock ^= t << offset;
        }
        function exchangeRL(offset, mask) {
          var t = (this._rBlock >>> offset ^ this._lBlock) & mask;
          this._lBlock ^= t;
          this._rBlock ^= t << offset;
        }
        C.DES = BlockCipher._createHelper(DES);
        var TripleDES = C_algo.TripleDES = BlockCipher.extend({
          _doReset: function() {
            var key = this._key;
            var keyWords = key.words;
            if (keyWords.length !== 2 && keyWords.length !== 4 && keyWords.length < 6) {
              throw new Error("Invalid key length - 3DES requires the key length to be 64, 128, 192 or >192.");
            }
            var key1 = keyWords.slice(0, 2);
            var key2 = keyWords.length < 4 ? keyWords.slice(0, 2) : keyWords.slice(2, 4);
            var key3 = keyWords.length < 6 ? keyWords.slice(0, 2) : keyWords.slice(4, 6);
            this._des1 = DES.createEncryptor(WordArray.create(key1));
            this._des2 = DES.createEncryptor(WordArray.create(key2));
            this._des3 = DES.createEncryptor(WordArray.create(key3));
          },
          encryptBlock: function(M, offset) {
            this._des1.encryptBlock(M, offset);
            this._des2.decryptBlock(M, offset);
            this._des3.encryptBlock(M, offset);
          },
          decryptBlock: function(M, offset) {
            this._des3.decryptBlock(M, offset);
            this._des2.encryptBlock(M, offset);
            this._des1.decryptBlock(M, offset);
          },
          keySize: 192 / 32,
          ivSize: 64 / 32,
          blockSize: 64 / 32
        });
        C.TripleDES = BlockCipher._createHelper(TripleDES);
      })();
      return CryptoJS.TripleDES;
    });
  }
});

// ../../node_modules/crypto-js/rc4.js
var require_rc4 = __commonJS({
  "../../node_modules/crypto-js/rc4.js"(exports, module) {
    (function(root, factory, undef) {
      if (typeof exports === "object") {
        module.exports = exports = factory(require_core(), require_enc_base64(), require_md5(), require_evpkdf(), require_cipher_core());
      } else if (typeof define === "function" && define.amd) {
        define(["./core", "./enc-base64", "./md5", "./evpkdf", "./cipher-core"], factory);
      } else {
        factory(root.CryptoJS);
      }
    })(exports, function(CryptoJS) {
      (function() {
        var C = CryptoJS;
        var C_lib = C.lib;
        var StreamCipher = C_lib.StreamCipher;
        var C_algo = C.algo;
        var RC4 = C_algo.RC4 = StreamCipher.extend({
          _doReset: function() {
            var key = this._key;
            var keyWords = key.words;
            var keySigBytes = key.sigBytes;
            var S = this._S = [];
            for (var i = 0; i < 256; i++) {
              S[i] = i;
            }
            for (var i = 0, j = 0; i < 256; i++) {
              var keyByteIndex = i % keySigBytes;
              var keyByte = keyWords[keyByteIndex >>> 2] >>> 24 - keyByteIndex % 4 * 8 & 255;
              j = (j + S[i] + keyByte) % 256;
              var t = S[i];
              S[i] = S[j];
              S[j] = t;
            }
            this._i = this._j = 0;
          },
          _doProcessBlock: function(M, offset) {
            M[offset] ^= generateKeystreamWord.call(this);
          },
          keySize: 256 / 32,
          ivSize: 0
        });
        function generateKeystreamWord() {
          var S = this._S;
          var i = this._i;
          var j = this._j;
          var keystreamWord = 0;
          for (var n = 0; n < 4; n++) {
            i = (i + 1) % 256;
            j = (j + S[i]) % 256;
            var t = S[i];
            S[i] = S[j];
            S[j] = t;
            keystreamWord |= S[(S[i] + S[j]) % 256] << 24 - n * 8;
          }
          this._i = i;
          this._j = j;
          return keystreamWord;
        }
        C.RC4 = StreamCipher._createHelper(RC4);
        var RC4Drop = C_algo.RC4Drop = RC4.extend({
          /**
           * Configuration options.
           *
           * @property {number} drop The number of keystream words to drop. Default 192
           */
          cfg: RC4.cfg.extend({
            drop: 192
          }),
          _doReset: function() {
            RC4._doReset.call(this);
            for (var i = this.cfg.drop; i > 0; i--) {
              generateKeystreamWord.call(this);
            }
          }
        });
        C.RC4Drop = StreamCipher._createHelper(RC4Drop);
      })();
      return CryptoJS.RC4;
    });
  }
});

// ../../node_modules/crypto-js/rabbit.js
var require_rabbit = __commonJS({
  "../../node_modules/crypto-js/rabbit.js"(exports, module) {
    (function(root, factory, undef) {
      if (typeof exports === "object") {
        module.exports = exports = factory(require_core(), require_enc_base64(), require_md5(), require_evpkdf(), require_cipher_core());
      } else if (typeof define === "function" && define.amd) {
        define(["./core", "./enc-base64", "./md5", "./evpkdf", "./cipher-core"], factory);
      } else {
        factory(root.CryptoJS);
      }
    })(exports, function(CryptoJS) {
      (function() {
        var C = CryptoJS;
        var C_lib = C.lib;
        var StreamCipher = C_lib.StreamCipher;
        var C_algo = C.algo;
        var S = [];
        var C_ = [];
        var G = [];
        var Rabbit = C_algo.Rabbit = StreamCipher.extend({
          _doReset: function() {
            var K = this._key.words;
            var iv = this.cfg.iv;
            for (var i = 0; i < 4; i++) {
              K[i] = (K[i] << 8 | K[i] >>> 24) & 16711935 | (K[i] << 24 | K[i] >>> 8) & 4278255360;
            }
            var X = this._X = [
              K[0],
              K[3] << 16 | K[2] >>> 16,
              K[1],
              K[0] << 16 | K[3] >>> 16,
              K[2],
              K[1] << 16 | K[0] >>> 16,
              K[3],
              K[2] << 16 | K[1] >>> 16
            ];
            var C2 = this._C = [
              K[2] << 16 | K[2] >>> 16,
              K[0] & 4294901760 | K[1] & 65535,
              K[3] << 16 | K[3] >>> 16,
              K[1] & 4294901760 | K[2] & 65535,
              K[0] << 16 | K[0] >>> 16,
              K[2] & 4294901760 | K[3] & 65535,
              K[1] << 16 | K[1] >>> 16,
              K[3] & 4294901760 | K[0] & 65535
            ];
            this._b = 0;
            for (var i = 0; i < 4; i++) {
              nextState.call(this);
            }
            for (var i = 0; i < 8; i++) {
              C2[i] ^= X[i + 4 & 7];
            }
            if (iv) {
              var IV = iv.words;
              var IV_0 = IV[0];
              var IV_1 = IV[1];
              var i0 = (IV_0 << 8 | IV_0 >>> 24) & 16711935 | (IV_0 << 24 | IV_0 >>> 8) & 4278255360;
              var i2 = (IV_1 << 8 | IV_1 >>> 24) & 16711935 | (IV_1 << 24 | IV_1 >>> 8) & 4278255360;
              var i1 = i0 >>> 16 | i2 & 4294901760;
              var i3 = i2 << 16 | i0 & 65535;
              C2[0] ^= i0;
              C2[1] ^= i1;
              C2[2] ^= i2;
              C2[3] ^= i3;
              C2[4] ^= i0;
              C2[5] ^= i1;
              C2[6] ^= i2;
              C2[7] ^= i3;
              for (var i = 0; i < 4; i++) {
                nextState.call(this);
              }
            }
          },
          _doProcessBlock: function(M, offset) {
            var X = this._X;
            nextState.call(this);
            S[0] = X[0] ^ X[5] >>> 16 ^ X[3] << 16;
            S[1] = X[2] ^ X[7] >>> 16 ^ X[5] << 16;
            S[2] = X[4] ^ X[1] >>> 16 ^ X[7] << 16;
            S[3] = X[6] ^ X[3] >>> 16 ^ X[1] << 16;
            for (var i = 0; i < 4; i++) {
              S[i] = (S[i] << 8 | S[i] >>> 24) & 16711935 | (S[i] << 24 | S[i] >>> 8) & 4278255360;
              M[offset + i] ^= S[i];
            }
          },
          blockSize: 128 / 32,
          ivSize: 64 / 32
        });
        function nextState() {
          var X = this._X;
          var C2 = this._C;
          for (var i = 0; i < 8; i++) {
            C_[i] = C2[i];
          }
          C2[0] = C2[0] + 1295307597 + this._b | 0;
          C2[1] = C2[1] + 3545052371 + (C2[0] >>> 0 < C_[0] >>> 0 ? 1 : 0) | 0;
          C2[2] = C2[2] + 886263092 + (C2[1] >>> 0 < C_[1] >>> 0 ? 1 : 0) | 0;
          C2[3] = C2[3] + 1295307597 + (C2[2] >>> 0 < C_[2] >>> 0 ? 1 : 0) | 0;
          C2[4] = C2[4] + 3545052371 + (C2[3] >>> 0 < C_[3] >>> 0 ? 1 : 0) | 0;
          C2[5] = C2[5] + 886263092 + (C2[4] >>> 0 < C_[4] >>> 0 ? 1 : 0) | 0;
          C2[6] = C2[6] + 1295307597 + (C2[5] >>> 0 < C_[5] >>> 0 ? 1 : 0) | 0;
          C2[7] = C2[7] + 3545052371 + (C2[6] >>> 0 < C_[6] >>> 0 ? 1 : 0) | 0;
          this._b = C2[7] >>> 0 < C_[7] >>> 0 ? 1 : 0;
          for (var i = 0; i < 8; i++) {
            var gx = X[i] + C2[i];
            var ga = gx & 65535;
            var gb = gx >>> 16;
            var gh = ((ga * ga >>> 17) + ga * gb >>> 15) + gb * gb;
            var gl = ((gx & 4294901760) * gx | 0) + ((gx & 65535) * gx | 0);
            G[i] = gh ^ gl;
          }
          X[0] = G[0] + (G[7] << 16 | G[7] >>> 16) + (G[6] << 16 | G[6] >>> 16) | 0;
          X[1] = G[1] + (G[0] << 8 | G[0] >>> 24) + G[7] | 0;
          X[2] = G[2] + (G[1] << 16 | G[1] >>> 16) + (G[0] << 16 | G[0] >>> 16) | 0;
          X[3] = G[3] + (G[2] << 8 | G[2] >>> 24) + G[1] | 0;
          X[4] = G[4] + (G[3] << 16 | G[3] >>> 16) + (G[2] << 16 | G[2] >>> 16) | 0;
          X[5] = G[5] + (G[4] << 8 | G[4] >>> 24) + G[3] | 0;
          X[6] = G[6] + (G[5] << 16 | G[5] >>> 16) + (G[4] << 16 | G[4] >>> 16) | 0;
          X[7] = G[7] + (G[6] << 8 | G[6] >>> 24) + G[5] | 0;
        }
        C.Rabbit = StreamCipher._createHelper(Rabbit);
      })();
      return CryptoJS.Rabbit;
    });
  }
});

// ../../node_modules/crypto-js/rabbit-legacy.js
var require_rabbit_legacy = __commonJS({
  "../../node_modules/crypto-js/rabbit-legacy.js"(exports, module) {
    (function(root, factory, undef) {
      if (typeof exports === "object") {
        module.exports = exports = factory(require_core(), require_enc_base64(), require_md5(), require_evpkdf(), require_cipher_core());
      } else if (typeof define === "function" && define.amd) {
        define(["./core", "./enc-base64", "./md5", "./evpkdf", "./cipher-core"], factory);
      } else {
        factory(root.CryptoJS);
      }
    })(exports, function(CryptoJS) {
      (function() {
        var C = CryptoJS;
        var C_lib = C.lib;
        var StreamCipher = C_lib.StreamCipher;
        var C_algo = C.algo;
        var S = [];
        var C_ = [];
        var G = [];
        var RabbitLegacy = C_algo.RabbitLegacy = StreamCipher.extend({
          _doReset: function() {
            var K = this._key.words;
            var iv = this.cfg.iv;
            var X = this._X = [
              K[0],
              K[3] << 16 | K[2] >>> 16,
              K[1],
              K[0] << 16 | K[3] >>> 16,
              K[2],
              K[1] << 16 | K[0] >>> 16,
              K[3],
              K[2] << 16 | K[1] >>> 16
            ];
            var C2 = this._C = [
              K[2] << 16 | K[2] >>> 16,
              K[0] & 4294901760 | K[1] & 65535,
              K[3] << 16 | K[3] >>> 16,
              K[1] & 4294901760 | K[2] & 65535,
              K[0] << 16 | K[0] >>> 16,
              K[2] & 4294901760 | K[3] & 65535,
              K[1] << 16 | K[1] >>> 16,
              K[3] & 4294901760 | K[0] & 65535
            ];
            this._b = 0;
            for (var i = 0; i < 4; i++) {
              nextState.call(this);
            }
            for (var i = 0; i < 8; i++) {
              C2[i] ^= X[i + 4 & 7];
            }
            if (iv) {
              var IV = iv.words;
              var IV_0 = IV[0];
              var IV_1 = IV[1];
              var i0 = (IV_0 << 8 | IV_0 >>> 24) & 16711935 | (IV_0 << 24 | IV_0 >>> 8) & 4278255360;
              var i2 = (IV_1 << 8 | IV_1 >>> 24) & 16711935 | (IV_1 << 24 | IV_1 >>> 8) & 4278255360;
              var i1 = i0 >>> 16 | i2 & 4294901760;
              var i3 = i2 << 16 | i0 & 65535;
              C2[0] ^= i0;
              C2[1] ^= i1;
              C2[2] ^= i2;
              C2[3] ^= i3;
              C2[4] ^= i0;
              C2[5] ^= i1;
              C2[6] ^= i2;
              C2[7] ^= i3;
              for (var i = 0; i < 4; i++) {
                nextState.call(this);
              }
            }
          },
          _doProcessBlock: function(M, offset) {
            var X = this._X;
            nextState.call(this);
            S[0] = X[0] ^ X[5] >>> 16 ^ X[3] << 16;
            S[1] = X[2] ^ X[7] >>> 16 ^ X[5] << 16;
            S[2] = X[4] ^ X[1] >>> 16 ^ X[7] << 16;
            S[3] = X[6] ^ X[3] >>> 16 ^ X[1] << 16;
            for (var i = 0; i < 4; i++) {
              S[i] = (S[i] << 8 | S[i] >>> 24) & 16711935 | (S[i] << 24 | S[i] >>> 8) & 4278255360;
              M[offset + i] ^= S[i];
            }
          },
          blockSize: 128 / 32,
          ivSize: 64 / 32
        });
        function nextState() {
          var X = this._X;
          var C2 = this._C;
          for (var i = 0; i < 8; i++) {
            C_[i] = C2[i];
          }
          C2[0] = C2[0] + 1295307597 + this._b | 0;
          C2[1] = C2[1] + 3545052371 + (C2[0] >>> 0 < C_[0] >>> 0 ? 1 : 0) | 0;
          C2[2] = C2[2] + 886263092 + (C2[1] >>> 0 < C_[1] >>> 0 ? 1 : 0) | 0;
          C2[3] = C2[3] + 1295307597 + (C2[2] >>> 0 < C_[2] >>> 0 ? 1 : 0) | 0;
          C2[4] = C2[4] + 3545052371 + (C2[3] >>> 0 < C_[3] >>> 0 ? 1 : 0) | 0;
          C2[5] = C2[5] + 886263092 + (C2[4] >>> 0 < C_[4] >>> 0 ? 1 : 0) | 0;
          C2[6] = C2[6] + 1295307597 + (C2[5] >>> 0 < C_[5] >>> 0 ? 1 : 0) | 0;
          C2[7] = C2[7] + 3545052371 + (C2[6] >>> 0 < C_[6] >>> 0 ? 1 : 0) | 0;
          this._b = C2[7] >>> 0 < C_[7] >>> 0 ? 1 : 0;
          for (var i = 0; i < 8; i++) {
            var gx = X[i] + C2[i];
            var ga = gx & 65535;
            var gb = gx >>> 16;
            var gh = ((ga * ga >>> 17) + ga * gb >>> 15) + gb * gb;
            var gl = ((gx & 4294901760) * gx | 0) + ((gx & 65535) * gx | 0);
            G[i] = gh ^ gl;
          }
          X[0] = G[0] + (G[7] << 16 | G[7] >>> 16) + (G[6] << 16 | G[6] >>> 16) | 0;
          X[1] = G[1] + (G[0] << 8 | G[0] >>> 24) + G[7] | 0;
          X[2] = G[2] + (G[1] << 16 | G[1] >>> 16) + (G[0] << 16 | G[0] >>> 16) | 0;
          X[3] = G[3] + (G[2] << 8 | G[2] >>> 24) + G[1] | 0;
          X[4] = G[4] + (G[3] << 16 | G[3] >>> 16) + (G[2] << 16 | G[2] >>> 16) | 0;
          X[5] = G[5] + (G[4] << 8 | G[4] >>> 24) + G[3] | 0;
          X[6] = G[6] + (G[5] << 16 | G[5] >>> 16) + (G[4] << 16 | G[4] >>> 16) | 0;
          X[7] = G[7] + (G[6] << 8 | G[6] >>> 24) + G[5] | 0;
        }
        C.RabbitLegacy = StreamCipher._createHelper(RabbitLegacy);
      })();
      return CryptoJS.RabbitLegacy;
    });
  }
});

// ../../node_modules/crypto-js/blowfish.js
var require_blowfish = __commonJS({
  "../../node_modules/crypto-js/blowfish.js"(exports, module) {
    (function(root, factory, undef) {
      if (typeof exports === "object") {
        module.exports = exports = factory(require_core(), require_enc_base64(), require_md5(), require_evpkdf(), require_cipher_core());
      } else if (typeof define === "function" && define.amd) {
        define(["./core", "./enc-base64", "./md5", "./evpkdf", "./cipher-core"], factory);
      } else {
        factory(root.CryptoJS);
      }
    })(exports, function(CryptoJS) {
      (function() {
        var C = CryptoJS;
        var C_lib = C.lib;
        var BlockCipher = C_lib.BlockCipher;
        var C_algo = C.algo;
        const N = 16;
        const ORIG_P = [
          608135816,
          2242054355,
          320440878,
          57701188,
          2752067618,
          698298832,
          137296536,
          3964562569,
          1160258022,
          953160567,
          3193202383,
          887688300,
          3232508343,
          3380367581,
          1065670069,
          3041331479,
          2450970073,
          2306472731
        ];
        const ORIG_S = [
          [
            3509652390,
            2564797868,
            805139163,
            3491422135,
            3101798381,
            1780907670,
            3128725573,
            4046225305,
            614570311,
            3012652279,
            134345442,
            2240740374,
            1667834072,
            1901547113,
            2757295779,
            4103290238,
            227898511,
            1921955416,
            1904987480,
            2182433518,
            2069144605,
            3260701109,
            2620446009,
            720527379,
            3318853667,
            677414384,
            3393288472,
            3101374703,
            2390351024,
            1614419982,
            1822297739,
            2954791486,
            3608508353,
            3174124327,
            2024746970,
            1432378464,
            3864339955,
            2857741204,
            1464375394,
            1676153920,
            1439316330,
            715854006,
            3033291828,
            289532110,
            2706671279,
            2087905683,
            3018724369,
            1668267050,
            732546397,
            1947742710,
            3462151702,
            2609353502,
            2950085171,
            1814351708,
            2050118529,
            680887927,
            999245976,
            1800124847,
            3300911131,
            1713906067,
            1641548236,
            4213287313,
            1216130144,
            1575780402,
            4018429277,
            3917837745,
            3693486850,
            3949271944,
            596196993,
            3549867205,
            258830323,
            2213823033,
            772490370,
            2760122372,
            1774776394,
            2652871518,
            566650946,
            4142492826,
            1728879713,
            2882767088,
            1783734482,
            3629395816,
            2517608232,
            2874225571,
            1861159788,
            326777828,
            3124490320,
            2130389656,
            2716951837,
            967770486,
            1724537150,
            2185432712,
            2364442137,
            1164943284,
            2105845187,
            998989502,
            3765401048,
            2244026483,
            1075463327,
            1455516326,
            1322494562,
            910128902,
            469688178,
            1117454909,
            936433444,
            3490320968,
            3675253459,
            1240580251,
            122909385,
            2157517691,
            634681816,
            4142456567,
            3825094682,
            3061402683,
            2540495037,
            79693498,
            3249098678,
            1084186820,
            1583128258,
            426386531,
            1761308591,
            1047286709,
            322548459,
            995290223,
            1845252383,
            2603652396,
            3431023940,
            2942221577,
            3202600964,
            3727903485,
            1712269319,
            422464435,
            3234572375,
            1170764815,
            3523960633,
            3117677531,
            1434042557,
            442511882,
            3600875718,
            1076654713,
            1738483198,
            4213154764,
            2393238008,
            3677496056,
            1014306527,
            4251020053,
            793779912,
            2902807211,
            842905082,
            4246964064,
            1395751752,
            1040244610,
            2656851899,
            3396308128,
            445077038,
            3742853595,
            3577915638,
            679411651,
            2892444358,
            2354009459,
            1767581616,
            3150600392,
            3791627101,
            3102740896,
            284835224,
            4246832056,
            1258075500,
            768725851,
            2589189241,
            3069724005,
            3532540348,
            1274779536,
            3789419226,
            2764799539,
            1660621633,
            3471099624,
            4011903706,
            913787905,
            3497959166,
            737222580,
            2514213453,
            2928710040,
            3937242737,
            1804850592,
            3499020752,
            2949064160,
            2386320175,
            2390070455,
            2415321851,
            4061277028,
            2290661394,
            2416832540,
            1336762016,
            1754252060,
            3520065937,
            3014181293,
            791618072,
            3188594551,
            3933548030,
            2332172193,
            3852520463,
            3043980520,
            413987798,
            3465142937,
            3030929376,
            4245938359,
            2093235073,
            3534596313,
            375366246,
            2157278981,
            2479649556,
            555357303,
            3870105701,
            2008414854,
            3344188149,
            4221384143,
            3956125452,
            2067696032,
            3594591187,
            2921233993,
            2428461,
            544322398,
            577241275,
            1471733935,
            610547355,
            4027169054,
            1432588573,
            1507829418,
            2025931657,
            3646575487,
            545086370,
            48609733,
            2200306550,
            1653985193,
            298326376,
            1316178497,
            3007786442,
            2064951626,
            458293330,
            2589141269,
            3591329599,
            3164325604,
            727753846,
            2179363840,
            146436021,
            1461446943,
            4069977195,
            705550613,
            3059967265,
            3887724982,
            4281599278,
            3313849956,
            1404054877,
            2845806497,
            146425753,
            1854211946
          ],
          [
            1266315497,
            3048417604,
            3681880366,
            3289982499,
            290971e4,
            1235738493,
            2632868024,
            2414719590,
            3970600049,
            1771706367,
            1449415276,
            3266420449,
            422970021,
            1963543593,
            2690192192,
            3826793022,
            1062508698,
            1531092325,
            1804592342,
            2583117782,
            2714934279,
            4024971509,
            1294809318,
            4028980673,
            1289560198,
            2221992742,
            1669523910,
            35572830,
            157838143,
            1052438473,
            1016535060,
            1802137761,
            1753167236,
            1386275462,
            3080475397,
            2857371447,
            1040679964,
            2145300060,
            2390574316,
            1461121720,
            2956646967,
            4031777805,
            4028374788,
            33600511,
            2920084762,
            1018524850,
            629373528,
            3691585981,
            3515945977,
            2091462646,
            2486323059,
            586499841,
            988145025,
            935516892,
            3367335476,
            2599673255,
            2839830854,
            265290510,
            3972581182,
            2759138881,
            3795373465,
            1005194799,
            847297441,
            406762289,
            1314163512,
            1332590856,
            1866599683,
            4127851711,
            750260880,
            613907577,
            1450815602,
            3165620655,
            3734664991,
            3650291728,
            3012275730,
            3704569646,
            1427272223,
            778793252,
            1343938022,
            2676280711,
            2052605720,
            1946737175,
            3164576444,
            3914038668,
            3967478842,
            3682934266,
            1661551462,
            3294938066,
            4011595847,
            840292616,
            3712170807,
            616741398,
            312560963,
            711312465,
            1351876610,
            322626781,
            1910503582,
            271666773,
            2175563734,
            1594956187,
            70604529,
            3617834859,
            1007753275,
            1495573769,
            4069517037,
            2549218298,
            2663038764,
            504708206,
            2263041392,
            3941167025,
            2249088522,
            1514023603,
            1998579484,
            1312622330,
            694541497,
            2582060303,
            2151582166,
            1382467621,
            776784248,
            2618340202,
            3323268794,
            2497899128,
            2784771155,
            503983604,
            4076293799,
            907881277,
            423175695,
            432175456,
            1378068232,
            4145222326,
            3954048622,
            3938656102,
            3820766613,
            2793130115,
            2977904593,
            26017576,
            3274890735,
            3194772133,
            1700274565,
            1756076034,
            4006520079,
            3677328699,
            720338349,
            1533947780,
            354530856,
            688349552,
            3973924725,
            1637815568,
            332179504,
            3949051286,
            53804574,
            2852348879,
            3044236432,
            1282449977,
            3583942155,
            3416972820,
            4006381244,
            1617046695,
            2628476075,
            3002303598,
            1686838959,
            431878346,
            2686675385,
            1700445008,
            1080580658,
            1009431731,
            832498133,
            3223435511,
            2605976345,
            2271191193,
            2516031870,
            1648197032,
            4164389018,
            2548247927,
            300782431,
            375919233,
            238389289,
            3353747414,
            2531188641,
            2019080857,
            1475708069,
            455242339,
            2609103871,
            448939670,
            3451063019,
            1395535956,
            2413381860,
            1841049896,
            1491858159,
            885456874,
            4264095073,
            4001119347,
            1565136089,
            3898914787,
            1108368660,
            540939232,
            1173283510,
            2745871338,
            3681308437,
            4207628240,
            3343053890,
            4016749493,
            1699691293,
            1103962373,
            3625875870,
            2256883143,
            3830138730,
            1031889488,
            3479347698,
            1535977030,
            4236805024,
            3251091107,
            2132092099,
            1774941330,
            1199868427,
            1452454533,
            157007616,
            2904115357,
            342012276,
            595725824,
            1480756522,
            206960106,
            497939518,
            591360097,
            863170706,
            2375253569,
            3596610801,
            1814182875,
            2094937945,
            3421402208,
            1082520231,
            3463918190,
            2785509508,
            435703966,
            3908032597,
            1641649973,
            2842273706,
            3305899714,
            1510255612,
            2148256476,
            2655287854,
            3276092548,
            4258621189,
            236887753,
            3681803219,
            274041037,
            1734335097,
            3815195456,
            3317970021,
            1899903192,
            1026095262,
            4050517792,
            356393447,
            2410691914,
            3873677099,
            3682840055
          ],
          [
            3913112168,
            2491498743,
            4132185628,
            2489919796,
            1091903735,
            1979897079,
            3170134830,
            3567386728,
            3557303409,
            857797738,
            1136121015,
            1342202287,
            507115054,
            2535736646,
            337727348,
            3213592640,
            1301675037,
            2528481711,
            1895095763,
            1721773893,
            3216771564,
            62756741,
            2142006736,
            835421444,
            2531993523,
            1442658625,
            3659876326,
            2882144922,
            676362277,
            1392781812,
            170690266,
            3921047035,
            1759253602,
            3611846912,
            1745797284,
            664899054,
            1329594018,
            3901205900,
            3045908486,
            2062866102,
            2865634940,
            3543621612,
            3464012697,
            1080764994,
            553557557,
            3656615353,
            3996768171,
            991055499,
            499776247,
            1265440854,
            648242737,
            3940784050,
            980351604,
            3713745714,
            1749149687,
            3396870395,
            4211799374,
            3640570775,
            1161844396,
            3125318951,
            1431517754,
            545492359,
            4268468663,
            3499529547,
            1437099964,
            2702547544,
            3433638243,
            2581715763,
            2787789398,
            1060185593,
            1593081372,
            2418618748,
            4260947970,
            69676912,
            2159744348,
            86519011,
            2512459080,
            3838209314,
            1220612927,
            3339683548,
            133810670,
            1090789135,
            1078426020,
            1569222167,
            845107691,
            3583754449,
            4072456591,
            1091646820,
            628848692,
            1613405280,
            3757631651,
            526609435,
            236106946,
            48312990,
            2942717905,
            3402727701,
            1797494240,
            859738849,
            992217954,
            4005476642,
            2243076622,
            3870952857,
            3732016268,
            765654824,
            3490871365,
            2511836413,
            1685915746,
            3888969200,
            1414112111,
            2273134842,
            3281911079,
            4080962846,
            172450625,
            2569994100,
            980381355,
            4109958455,
            2819808352,
            2716589560,
            2568741196,
            3681446669,
            3329971472,
            1835478071,
            660984891,
            3704678404,
            4045999559,
            3422617507,
            3040415634,
            1762651403,
            1719377915,
            3470491036,
            2693910283,
            3642056355,
            3138596744,
            1364962596,
            2073328063,
            1983633131,
            926494387,
            3423689081,
            2150032023,
            4096667949,
            1749200295,
            3328846651,
            309677260,
            2016342300,
            1779581495,
            3079819751,
            111262694,
            1274766160,
            443224088,
            298511866,
            1025883608,
            3806446537,
            1145181785,
            168956806,
            3641502830,
            3584813610,
            1689216846,
            3666258015,
            3200248200,
            1692713982,
            2646376535,
            4042768518,
            1618508792,
            1610833997,
            3523052358,
            4130873264,
            2001055236,
            3610705100,
            2202168115,
            4028541809,
            2961195399,
            1006657119,
            2006996926,
            3186142756,
            1430667929,
            3210227297,
            1314452623,
            4074634658,
            4101304120,
            2273951170,
            1399257539,
            3367210612,
            3027628629,
            1190975929,
            2062231137,
            2333990788,
            2221543033,
            2438960610,
            1181637006,
            548689776,
            2362791313,
            3372408396,
            3104550113,
            3145860560,
            296247880,
            1970579870,
            3078560182,
            3769228297,
            1714227617,
            3291629107,
            3898220290,
            166772364,
            1251581989,
            493813264,
            448347421,
            195405023,
            2709975567,
            677966185,
            3703036547,
            1463355134,
            2715995803,
            1338867538,
            1343315457,
            2802222074,
            2684532164,
            233230375,
            2599980071,
            2000651841,
            3277868038,
            1638401717,
            4028070440,
            3237316320,
            6314154,
            819756386,
            300326615,
            590932579,
            1405279636,
            3267499572,
            3150704214,
            2428286686,
            3959192993,
            3461946742,
            1862657033,
            1266418056,
            963775037,
            2089974820,
            2263052895,
            1917689273,
            448879540,
            3550394620,
            3981727096,
            150775221,
            3627908307,
            1303187396,
            508620638,
            2975983352,
            2726630617,
            1817252668,
            1876281319,
            1457606340,
            908771278,
            3720792119,
            3617206836,
            2455994898,
            1729034894,
            1080033504
          ],
          [
            976866871,
            3556439503,
            2881648439,
            1522871579,
            1555064734,
            1336096578,
            3548522304,
            2579274686,
            3574697629,
            3205460757,
            3593280638,
            3338716283,
            3079412587,
            564236357,
            2993598910,
            1781952180,
            1464380207,
            3163844217,
            3332601554,
            1699332808,
            1393555694,
            1183702653,
            3581086237,
            1288719814,
            691649499,
            2847557200,
            2895455976,
            3193889540,
            2717570544,
            1781354906,
            1676643554,
            2592534050,
            3230253752,
            1126444790,
            2770207658,
            2633158820,
            2210423226,
            2615765581,
            2414155088,
            3127139286,
            673620729,
            2805611233,
            1269405062,
            4015350505,
            3341807571,
            4149409754,
            1057255273,
            2012875353,
            2162469141,
            2276492801,
            2601117357,
            993977747,
            3918593370,
            2654263191,
            753973209,
            36408145,
            2530585658,
            25011837,
            3520020182,
            2088578344,
            530523599,
            2918365339,
            1524020338,
            1518925132,
            3760827505,
            3759777254,
            1202760957,
            3985898139,
            3906192525,
            674977740,
            4174734889,
            2031300136,
            2019492241,
            3983892565,
            4153806404,
            3822280332,
            352677332,
            2297720250,
            60907813,
            90501309,
            3286998549,
            1016092578,
            2535922412,
            2839152426,
            457141659,
            509813237,
            4120667899,
            652014361,
            1966332200,
            2975202805,
            55981186,
            2327461051,
            676427537,
            3255491064,
            2882294119,
            3433927263,
            1307055953,
            942726286,
            933058658,
            2468411793,
            3933900994,
            4215176142,
            1361170020,
            2001714738,
            2830558078,
            3274259782,
            1222529897,
            1679025792,
            2729314320,
            3714953764,
            1770335741,
            151462246,
            3013232138,
            1682292957,
            1483529935,
            471910574,
            1539241949,
            458788160,
            3436315007,
            1807016891,
            3718408830,
            978976581,
            1043663428,
            3165965781,
            1927990952,
            4200891579,
            2372276910,
            3208408903,
            3533431907,
            1412390302,
            2931980059,
            4132332400,
            1947078029,
            3881505623,
            4168226417,
            2941484381,
            1077988104,
            1320477388,
            886195818,
            18198404,
            3786409e3,
            2509781533,
            112762804,
            3463356488,
            1866414978,
            891333506,
            18488651,
            661792760,
            1628790961,
            3885187036,
            3141171499,
            876946877,
            2693282273,
            1372485963,
            791857591,
            2686433993,
            3759982718,
            3167212022,
            3472953795,
            2716379847,
            445679433,
            3561995674,
            3504004811,
            3574258232,
            54117162,
            3331405415,
            2381918588,
            3769707343,
            4154350007,
            1140177722,
            4074052095,
            668550556,
            3214352940,
            367459370,
            261225585,
            2610173221,
            4209349473,
            3468074219,
            3265815641,
            314222801,
            3066103646,
            3808782860,
            282218597,
            3406013506,
            3773591054,
            379116347,
            1285071038,
            846784868,
            2669647154,
            3771962079,
            3550491691,
            2305946142,
            453669953,
            1268987020,
            3317592352,
            3279303384,
            3744833421,
            2610507566,
            3859509063,
            266596637,
            3847019092,
            517658769,
            3462560207,
            3443424879,
            370717030,
            4247526661,
            2224018117,
            4143653529,
            4112773975,
            2788324899,
            2477274417,
            1456262402,
            2901442914,
            1517677493,
            1846949527,
            2295493580,
            3734397586,
            2176403920,
            1280348187,
            1908823572,
            3871786941,
            846861322,
            1172426758,
            3287448474,
            3383383037,
            1655181056,
            3139813346,
            901632758,
            1897031941,
            2986607138,
            3066810236,
            3447102507,
            1393639104,
            373351379,
            950779232,
            625454576,
            3124240540,
            4148612726,
            2007998917,
            544563296,
            2244738638,
            2330496472,
            2058025392,
            1291430526,
            424198748,
            50039436,
            29584100,
            3605783033,
            2429876329,
            2791104160,
            1057563949,
            3255363231,
            3075367218,
            3463963227,
            1469046755,
            985887462
          ]
        ];
        var BLOWFISH_CTX = {
          pbox: [],
          sbox: []
        };
        function F(ctx, x) {
          let a = x >> 24 & 255;
          let b = x >> 16 & 255;
          let c = x >> 8 & 255;
          let d = x & 255;
          let y = ctx.sbox[0][a] + ctx.sbox[1][b];
          y = y ^ ctx.sbox[2][c];
          y = y + ctx.sbox[3][d];
          return y;
        }
        function BlowFish_Encrypt(ctx, left, right) {
          let Xl = left;
          let Xr = right;
          let temp;
          for (let i = 0; i < N; ++i) {
            Xl = Xl ^ ctx.pbox[i];
            Xr = F(ctx, Xl) ^ Xr;
            temp = Xl;
            Xl = Xr;
            Xr = temp;
          }
          temp = Xl;
          Xl = Xr;
          Xr = temp;
          Xr = Xr ^ ctx.pbox[N];
          Xl = Xl ^ ctx.pbox[N + 1];
          return { left: Xl, right: Xr };
        }
        function BlowFish_Decrypt(ctx, left, right) {
          let Xl = left;
          let Xr = right;
          let temp;
          for (let i = N + 1; i > 1; --i) {
            Xl = Xl ^ ctx.pbox[i];
            Xr = F(ctx, Xl) ^ Xr;
            temp = Xl;
            Xl = Xr;
            Xr = temp;
          }
          temp = Xl;
          Xl = Xr;
          Xr = temp;
          Xr = Xr ^ ctx.pbox[1];
          Xl = Xl ^ ctx.pbox[0];
          return { left: Xl, right: Xr };
        }
        function BlowFishInit(ctx, key, keysize) {
          for (let Row = 0; Row < 4; Row++) {
            ctx.sbox[Row] = [];
            for (let Col = 0; Col < 256; Col++) {
              ctx.sbox[Row][Col] = ORIG_S[Row][Col];
            }
          }
          let keyIndex = 0;
          for (let index = 0; index < N + 2; index++) {
            ctx.pbox[index] = ORIG_P[index] ^ key[keyIndex];
            keyIndex++;
            if (keyIndex >= keysize) {
              keyIndex = 0;
            }
          }
          let Data1 = 0;
          let Data2 = 0;
          let res = 0;
          for (let i = 0; i < N + 2; i += 2) {
            res = BlowFish_Encrypt(ctx, Data1, Data2);
            Data1 = res.left;
            Data2 = res.right;
            ctx.pbox[i] = Data1;
            ctx.pbox[i + 1] = Data2;
          }
          for (let i = 0; i < 4; i++) {
            for (let j = 0; j < 256; j += 2) {
              res = BlowFish_Encrypt(ctx, Data1, Data2);
              Data1 = res.left;
              Data2 = res.right;
              ctx.sbox[i][j] = Data1;
              ctx.sbox[i][j + 1] = Data2;
            }
          }
          return true;
        }
        var Blowfish = C_algo.Blowfish = BlockCipher.extend({
          _doReset: function() {
            if (this._keyPriorReset === this._key) {
              return;
            }
            var key = this._keyPriorReset = this._key;
            var keyWords = key.words;
            var keySize = key.sigBytes / 4;
            BlowFishInit(BLOWFISH_CTX, keyWords, keySize);
          },
          encryptBlock: function(M, offset) {
            var res = BlowFish_Encrypt(BLOWFISH_CTX, M[offset], M[offset + 1]);
            M[offset] = res.left;
            M[offset + 1] = res.right;
          },
          decryptBlock: function(M, offset) {
            var res = BlowFish_Decrypt(BLOWFISH_CTX, M[offset], M[offset + 1]);
            M[offset] = res.left;
            M[offset + 1] = res.right;
          },
          blockSize: 64 / 32,
          keySize: 128 / 32,
          ivSize: 64 / 32
        });
        C.Blowfish = BlockCipher._createHelper(Blowfish);
      })();
      return CryptoJS.Blowfish;
    });
  }
});

// ../../node_modules/crypto-js/index.js
var require_crypto_js = __commonJS({
  "../../node_modules/crypto-js/index.js"(exports, module) {
    (function(root, factory, undef) {
      if (typeof exports === "object") {
        module.exports = exports = factory(require_core(), require_x64_core(), require_lib_typedarrays(), require_enc_utf16(), require_enc_base64(), require_enc_base64url(), require_md5(), require_sha1(), require_sha256(), require_sha224(), require_sha512(), require_sha384(), require_sha32(), require_ripemd160(), require_hmac(), require_pbkdf2(), require_evpkdf(), require_cipher_core(), require_mode_cfb(), require_mode_ctr(), require_mode_ctr_gladman(), require_mode_ofb(), require_mode_ecb(), require_pad_ansix923(), require_pad_iso10126(), require_pad_iso97971(), require_pad_zeropadding(), require_pad_nopadding(), require_format_hex(), require_aes(), require_tripledes(), require_rc4(), require_rabbit(), require_rabbit_legacy(), require_blowfish());
      } else if (typeof define === "function" && define.amd) {
        define(["./core", "./x64-core", "./lib-typedarrays", "./enc-utf16", "./enc-base64", "./enc-base64url", "./md5", "./sha1", "./sha256", "./sha224", "./sha512", "./sha384", "./sha3", "./ripemd160", "./hmac", "./pbkdf2", "./evpkdf", "./cipher-core", "./mode-cfb", "./mode-ctr", "./mode-ctr-gladman", "./mode-ofb", "./mode-ecb", "./pad-ansix923", "./pad-iso10126", "./pad-iso97971", "./pad-zeropadding", "./pad-nopadding", "./format-hex", "./aes", "./tripledes", "./rc4", "./rabbit", "./rabbit-legacy", "./blowfish"], factory);
      } else {
        root.CryptoJS = factory(root.CryptoJS);
      }
    })(exports, function(CryptoJS) {
      return CryptoJS;
    });
  }
});

// ../../node_modules/merkletreejs/dist/Base.js
var require_Base = __commonJS({
  "../../node_modules/merkletreejs/dist/Base.js"(exports) {
    "use strict";
    var __importDefault = exports && exports.__importDefault || function(mod) {
      return mod && mod.__esModule ? mod : { "default": mod };
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.Base = void 0;
    var buffer_1 = require_buffer();
    var crypto_js_1 = __importDefault(require_crypto_js());
    var Base = class _Base {
      /**
       * print
       * @desc Prints out a visual representation of the merkle tree.
       * @example
       *```js
       *tree.print()
       *```
       */
      print() {
        _Base.print(this);
      }
      /**
       * bufferIndexOf
       * @desc Returns the first index of which given buffer is found in array.
       * @param {Buffer[]} haystack - Array of buffers.
       * @param {Buffer} needle - Buffer to find.
       * @return {Number} - Index number
       *
       * @example
       * ```js
       *const index = tree.bufferIndexOf(haystack, needle)
       *```
       */
      bufferIndexOf(array, element, isSorted = false) {
        if (isSorted) {
          return this.binarySearch(array, element, buffer_1.Buffer.compare);
        }
        const eqChecker = (buffer1, buffer2) => buffer1.equals(buffer2);
        return this.linearSearch(array, element, eqChecker);
      }
      /**
       * binarySearch
       * @desc Returns the first index of which given item is found in array using binary search.
       * @param {Buffer[]} array - Array of items.
       * @param {Buffer} element - Item to find.
       * @param {Function} compareFunction
       * @return {Number} - Index number
       *
       * @example
       * ```js
       *const index = MerkleTree.binarySearch(array, element, Buffer.compare)
       *```
       */
      static binarySearch(array, element, compareFunction) {
        let start = 0;
        let end = array.length - 1;
        while (start <= end) {
          const mid = Math.floor((start + end) / 2);
          const ordering = compareFunction(array[mid], element);
          if (ordering === 0) {
            for (let i = mid - 1; i >= 0; i--) {
              if (compareFunction(array[i], element) === 0)
                continue;
              return i + 1;
            }
            return 0;
          } else if (ordering < 0) {
            start = mid + 1;
          } else {
            end = mid - 1;
          }
        }
        return -1;
      }
      /**
       * binarySearch
       * @desc Returns the first index of which given item is found in array using binary search.
       * @param {Buffer[]} array - Array of items.
       * @param {Buffer} element - Item to find.
       * @param {Function} compareFunction
       * @return {Number} - Index number
       *
       * @example
       * ```js
       *const index = tree.binarySearch(array, element, Buffer.compare)
       *```
       */
      binarySearch(array, element, compareFunction) {
        return _Base.binarySearch(array, element, compareFunction);
      }
      /**
       * linearSearch
       * @desc Returns the first index of which given item is found in array using linear search.
       * @param {Buffer[]} array - Array of items.
       * @param {Buffer} element - Item to find.
       * @param {Function} eqChecker
       * @return {Number} - Index number
       *
       * @example
       * ```js
       *const index = MerkleTree.linearSearch(array, element, (a, b) => a === b)
       *```
       */
      static linearSearch(array, element, eqChecker) {
        for (let i = 0; i < array.length; i++) {
          if (eqChecker(array[i], element)) {
            return i;
          }
        }
        return -1;
      }
      /**
       * linearSearch
       * @desc Returns the first index of which given item is found in array using linear search.
       * @param {Buffer[]} array - Array of items.
       * @param {Buffer} element - Item to find.
       * @param {Function} eqChecker
       * @return {Number} - Index number
       *
       * @example
       * ```js
       *const index = tree.linearSearch(array, element, (a, b) => a === b)
       *```
       */
      linearSearch(array, element, eqChecker) {
        return _Base.linearSearch(array, element, eqChecker);
      }
      /**
       * bufferify
       * @desc Returns a buffer type for the given value.
       * @param {String|Number|Object|Buffer|ArrayBuffer} value
       * @return {Buffer}
       *
       * @example
       * ```js
       *const buf = MerkleTree.bufferify('0x1234')
       *```
       */
      static bufferify(value) {
        if (!buffer_1.Buffer.isBuffer(value)) {
          if (typeof value === "object" && value.words) {
            return buffer_1.Buffer.from(value.toString(crypto_js_1.default.enc.Hex), "hex");
          } else if (_Base.isHexString(value)) {
            return buffer_1.Buffer.from(value.replace(/^0x/, ""), "hex");
          } else if (typeof value === "string") {
            return buffer_1.Buffer.from(value);
          } else if (typeof value === "bigint") {
            return buffer_1.Buffer.from(value.toString(16), "hex");
          } else if (value instanceof Uint8Array) {
            return buffer_1.Buffer.from(value.buffer);
          } else if (typeof value === "number") {
            let s = value.toString();
            if (s.length % 2) {
              s = `0${s}`;
            }
            return buffer_1.Buffer.from(s, "hex");
          } else if (ArrayBuffer.isView(value)) {
            return buffer_1.Buffer.from(value.buffer, value.byteOffset, value.byteLength);
          }
        }
        return value;
      }
      bigNumberify(value) {
        return _Base.bigNumberify(value);
      }
      static bigNumberify(value) {
        if (typeof value === "bigint") {
          return value;
        }
        if (typeof value === "string") {
          if (value.startsWith("0x") && _Base.isHexString(value)) {
            return BigInt("0x" + value.replace("0x", "").toString());
          }
          return BigInt(value);
        }
        if (buffer_1.Buffer.isBuffer(value)) {
          return BigInt("0x" + value.toString("hex"));
        }
        if (value instanceof Uint8Array) {
          return BigInt(value);
        }
        if (typeof value === "number") {
          return BigInt(value);
        }
        throw new Error("cannot bigNumberify");
      }
      /**
       * isHexString
       * @desc Returns true if value is a hex string.
       * @param {String} value
       * @return {Boolean}
       *
       * @example
       * ```js
       *console.log(MerkleTree.isHexString('0x1234'))
       *```
       */
      static isHexString(v) {
        return typeof v === "string" && /^(0x)?[0-9A-Fa-f]*$/.test(v);
      }
      /**
       * print
       * @desc Prints out a visual representation of the given merkle tree.
       * @param {Object} tree - Merkle tree instance.
       * @return {String}
       * @example
       *```js
       *MerkleTree.print(tree)
       *```
       */
      static print(tree) {
        console.log(tree.toString());
      }
      /**
       * bufferToHex
       * @desc Returns a hex string with 0x prefix for given buffer.
       * @param {Buffer} value
       * @return {String}
       * @example
       *```js
       *const hexStr = tree.bufferToHex(Buffer.from('A'))
       *```
       */
      bufferToHex(value, withPrefix = true) {
        return _Base.bufferToHex(value, withPrefix);
      }
      /**
       * bufferToHex
       * @desc Returns a hex string with 0x prefix for given buffer.
       * @param {Buffer} value
       * @return {String}
       * @example
       *```js
       *const hexStr = MerkleTree.bufferToHex(Buffer.from('A'))
       *```
       */
      static bufferToHex(value, withPrefix = true) {
        return `${withPrefix ? "0x" : ""}${(value || buffer_1.Buffer.alloc(0)).toString("hex")}`;
      }
      /**
       * bufferify
       * @desc Returns a buffer type for the given value.
       * @param {String|Number|Object|Buffer} value
       * @return {Buffer}
       *
       * @example
       * ```js
       *const buf = tree.bufferify('0x1234')
       *```
       */
      bufferify(value) {
        return _Base.bufferify(value);
      }
      /**
       * bufferifyFn
       * @desc Returns a function that will bufferify the return value.
       * @param {Function}
       * @return {Function}
       *
       * @example
       * ```js
       *const fn = tree.bufferifyFn((value) => sha256(value))
       *```
       */
      bufferifyFn(f) {
        return (value) => {
          const v = f(value);
          if (buffer_1.Buffer.isBuffer(v)) {
            return v;
          }
          if (this.isHexString(v)) {
            return buffer_1.Buffer.from(v.replace("0x", ""), "hex");
          }
          if (typeof v === "string") {
            return buffer_1.Buffer.from(v);
          }
          if (typeof v === "bigint") {
            return buffer_1.Buffer.from(value.toString(16), "hex");
          }
          if (ArrayBuffer.isView(v)) {
            return buffer_1.Buffer.from(v.buffer, v.byteOffset, v.byteLength);
          }
          return buffer_1.Buffer.from(f(crypto_js_1.default.enc.Hex.parse(value.toString("hex"))).toString(crypto_js_1.default.enc.Hex), "hex");
        };
      }
      /**
       * isHexString
       * @desc Returns true if value is a hex string.
       * @param {String} value
       * @return {Boolean}
       *
       * @example
       * ```js
       *console.log(MerkleTree.isHexString('0x1234'))
       *```
       */
      isHexString(value) {
        return _Base.isHexString(value);
      }
      /**
       * log2
       * @desc Returns the log2 of number.
       * @param {Number} value
       * @return {Number}
       */
      log2(n) {
        return n === 1 ? 0 : 1 + this.log2(n / 2 | 0);
      }
      /**
       * zip
       * @desc Returns true if value is a hex string.
       * @param {String[]|Number[]|Buffer[]} a - first array
       * @param {String[]|Number[]|Buffer[]} b -  second array
       * @return {String[][]|Number[][]|Buffer[][]}
       *
       * @example
       * ```js
       *const zipped = tree.zip(['a', 'b'],['A', 'B'])
       *console.log(zipped) // [ [ 'a', 'A' ], [ 'b', 'B' ] ]
       *```
       */
      zip(a, b) {
        return a.map((e2, i) => [e2, b[i]]);
      }
      static hexZeroPad(hexStr, length) {
        return "0x" + hexStr.replace("0x", "").padStart(length, "0");
      }
    };
    exports.Base = Base;
    exports.default = Base;
  }
});

// ../../node_modules/merkletreejs/dist/MerkleTree.js
var require_MerkleTree = __commonJS({
  "../../node_modules/merkletreejs/dist/MerkleTree.js"(exports) {
    "use strict";
    var __importDefault = exports && exports.__importDefault || function(mod) {
      return mod && mod.__esModule ? mod : { "default": mod };
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.MerkleTree = void 0;
    var buffer_1 = require_buffer();
    var buffer_reverse_1 = __importDefault(require_buffer_reverse());
    var sha256_1 = __importDefault(require_sha256());
    var treeify_1 = __importDefault(require_treeify());
    var Base_1 = __importDefault(require_Base());
    var MerkleTree3 = class _MerkleTree extends Base_1.default {
      /**
       * @desc Constructs a Merkle Tree.
       * All nodes and leaves are stored as Buffers.
       * Lonely leaf nodes are promoted to the next level up without being hashed again.
       * @param {Buffer[]} leaves - Array of hashed leaves. Each leaf must be a Buffer.
       * @param {Function} hashFunction - Hash function to use for hashing leaves and nodes
       * @param {Object} options - Additional options
       * @example
       *```js
       *const MerkleTree = require('merkletreejs')
       *const crypto = require('crypto')
       *
       *function sha256(data) {
       *  // returns Buffer
       *  return crypto.createHash('sha256').update(data).digest()
       *}
       *
       *const leaves = ['a', 'b', 'c'].map(value => keccak(value))
       *
       *const tree = new MerkleTree(leaves, sha256)
       *```
       */
      constructor(leaves, hashFn = sha256_1.default, options = {}) {
        super();
        this.duplicateOdd = false;
        this.concatenator = buffer_1.Buffer.concat;
        this.hashLeaves = false;
        this.isBitcoinTree = false;
        this.leaves = [];
        this.layers = [];
        this.sortLeaves = false;
        this.sortPairs = false;
        this.sort = false;
        this.fillDefaultHash = null;
        this.complete = false;
        if (options.complete) {
          if (options.isBitcoinTree) {
            throw new Error('option "complete" is incompatible with "isBitcoinTree"');
          }
          if (options.duplicateOdd) {
            throw new Error('option "complete" is incompatible with "duplicateOdd"');
          }
        }
        this.isBitcoinTree = !!options.isBitcoinTree;
        this.hashLeaves = !!options.hashLeaves;
        this.sortLeaves = !!options.sortLeaves;
        this.sortPairs = !!options.sortPairs;
        this.complete = !!options.complete;
        if (options.fillDefaultHash) {
          if (typeof options.fillDefaultHash === "function") {
            this.fillDefaultHash = options.fillDefaultHash;
          } else if (buffer_1.Buffer.isBuffer(options.fillDefaultHash) || typeof options.fillDefaultHash === "string") {
            this.fillDefaultHash = (idx, hashFn2) => options.fillDefaultHash;
          } else {
            throw new Error('method "fillDefaultHash" must be a function, Buffer, or string');
          }
        }
        this.sort = !!options.sort;
        if (this.sort) {
          this.sortLeaves = true;
          this.sortPairs = true;
        }
        this.duplicateOdd = !!options.duplicateOdd;
        if (options.concatenator) {
          this.concatenator = options.concatenator;
        }
        this.hashFn = this.bufferifyFn(hashFn);
        this.processLeaves(leaves);
      }
      getOptions() {
        var _a, _b;
        return {
          complete: this.complete,
          isBitcoinTree: this.isBitcoinTree,
          hashLeaves: this.hashLeaves,
          sortLeaves: this.sortLeaves,
          sortPairs: this.sortPairs,
          sort: this.sort,
          fillDefaultHash: (_b = (_a = this.fillDefaultHash) === null || _a === void 0 ? void 0 : _a.toString()) !== null && _b !== void 0 ? _b : null,
          duplicateOdd: this.duplicateOdd
        };
      }
      processLeaves(leaves) {
        if (this.hashLeaves) {
          leaves = leaves.map(this.hashFn);
        }
        this.leaves = leaves.map(this.bufferify);
        if (this.sortLeaves) {
          this.leaves = this.leaves.sort(buffer_1.Buffer.compare);
        }
        if (this.fillDefaultHash) {
          for (let i = this.leaves.length; i < Math.pow(2, Math.ceil(Math.log2(this.leaves.length))); i++) {
            this.leaves.push(this.bufferify(this.fillDefaultHash(i, this.hashFn)));
          }
        }
        this.createHashes(this.leaves);
      }
      createHashes(nodes) {
        this.layers = [nodes];
        while (nodes.length > 1) {
          const layerIndex = this.layers.length;
          this.layers.push([]);
          const layerLimit = this.complete && layerIndex === 1 && !Number.isInteger(Math.log2(nodes.length)) ? 2 * nodes.length - Math.pow(2, Math.ceil(Math.log2(nodes.length))) : nodes.length;
          for (let i = 0; i < nodes.length; i += 2) {
            if (i >= layerLimit) {
              this.layers[layerIndex].push(...nodes.slice(layerLimit));
              break;
            } else if (i + 1 === nodes.length) {
              if (nodes.length % 2 === 1) {
                const data = nodes[nodes.length - 1];
                let hash2 = data;
                if (this.isBitcoinTree) {
                  hash2 = this.hashFn(this.concatenator([buffer_reverse_1.default(data), buffer_reverse_1.default(data)]));
                  hash2 = buffer_reverse_1.default(this.hashFn(hash2));
                  this.layers[layerIndex].push(hash2);
                  continue;
                } else {
                  if (this.duplicateOdd) {
                  } else {
                    this.layers[layerIndex].push(nodes[i]);
                    continue;
                  }
                }
              }
            }
            const left = nodes[i];
            const right = i + 1 === nodes.length ? left : nodes[i + 1];
            let combined = null;
            if (this.isBitcoinTree) {
              combined = [buffer_reverse_1.default(left), buffer_reverse_1.default(right)];
            } else {
              combined = [left, right];
            }
            if (this.sortPairs) {
              combined.sort(buffer_1.Buffer.compare);
            }
            let hash = this.hashFn(this.concatenator(combined));
            if (this.isBitcoinTree) {
              hash = buffer_reverse_1.default(this.hashFn(hash));
            }
            this.layers[layerIndex].push(hash);
          }
          nodes = this.layers[layerIndex];
        }
      }
      /**
       * addLeaf
       * @desc Adds a leaf to the tree and re-calculates layers.
       * @param {String|Buffer} - Leaf
       * @param {Boolean} - Set to true if the leaf should be hashed before being added to tree.
       * @example
       *```js
       *tree.addLeaf(newLeaf)
       *```
       */
      addLeaf(leaf, shouldHash = false) {
        if (shouldHash) {
          leaf = this.hashFn(leaf);
        }
        this.processLeaves(this.leaves.concat(leaf));
      }
      /**
       * addLeaves
       * @desc Adds multiple leaves to the tree and re-calculates layers.
       * @param {String[]|Buffer[]} - Array of leaves
       * @param {Boolean} - Set to true if the leaves should be hashed before being added to tree.
       * @example
       *```js
       *tree.addLeaves(newLeaves)
       *```
       */
      addLeaves(leaves, shouldHash = false) {
        if (shouldHash) {
          leaves = leaves.map(this.hashFn);
        }
        this.processLeaves(this.leaves.concat(leaves));
      }
      /**
       * getLeaves
       * @desc Returns array of leaves of Merkle Tree.
       * @return {Buffer[]}
       * @example
       *```js
       *const leaves = tree.getLeaves()
       *```
       */
      getLeaves(values) {
        if (Array.isArray(values)) {
          if (this.hashLeaves) {
            values = values.map(this.hashFn);
            if (this.sortLeaves) {
              values = values.sort(buffer_1.Buffer.compare);
            }
          }
          return this.leaves.filter((leaf) => this.bufferIndexOf(values, leaf, this.sortLeaves) !== -1);
        }
        return this.leaves;
      }
      /**
       * getLeaf
       * @desc Returns the leaf at the given index.
       * @param {Number} - Index number
       * @return {Buffer}
       * @example
       *```js
       *const leaf = tree.getLeaf(1)
       *```
       */
      getLeaf(index) {
        if (index < 0 || index > this.leaves.length - 1) {
          return buffer_1.Buffer.from([]);
        }
        return this.leaves[index];
      }
      /**
       * getLeafIndex
       * @desc Returns the index of the given leaf, or -1 if the leaf is not found.
       * @param {String|Buffer} - Target leaf
       * @return {number}
       * @example
       *```js
       *const leaf = Buffer.from('abc')
       *const index = tree.getLeafIndex(leaf)
       *```
       */
      getLeafIndex(target) {
        target = this.bufferify(target);
        const leaves = this.getLeaves();
        for (let i = 0; i < leaves.length; i++) {
          const leaf = leaves[i];
          if (leaf.equals(target)) {
            return i;
          }
        }
        return -1;
      }
      /**
       * getLeafCount
       * @desc Returns the total number of leaves.
       * @return {number}
       * @example
       *```js
       *const count = tree.getLeafCount()
       *```
       */
      getLeafCount() {
        return this.leaves.length;
      }
      /**
       * getHexLeaves
       * @desc Returns array of leaves of Merkle Tree as hex strings.
       * @return {String[]}
       * @example
       *```js
       *const leaves = tree.getHexLeaves()
       *```
       */
      getHexLeaves() {
        return this.leaves.map((leaf) => this.bufferToHex(leaf));
      }
      /**
       * marshalLeaves
       * @desc Returns array of leaves of Merkle Tree as a JSON string.
       * @param {String[]|Buffer[]} - Merkle tree leaves
       * @return {String} - List of leaves as JSON string
       * @example
       *```js
       *const jsonStr = MerkleTree.marshalLeaves(leaves)
       *```
       */
      static marshalLeaves(leaves) {
        return JSON.stringify(leaves.map((leaf) => _MerkleTree.bufferToHex(leaf)), null, 2);
      }
      /**
       * unmarshalLeaves
       * @desc Returns array of leaves of Merkle Tree as a Buffers.
       * @param {String|Object} - JSON stringified leaves
       * @return {Buffer[]} - Unmarshalled list of leaves
       * @example
       *```js
       *const leaves = MerkleTree.unmarshalLeaves(jsonStr)
       *```
       */
      static unmarshalLeaves(jsonStr) {
        let parsed = null;
        if (typeof jsonStr === "string") {
          parsed = JSON.parse(jsonStr);
        } else if (jsonStr instanceof Object) {
          parsed = jsonStr;
        } else {
          throw new Error("Expected type of string or object");
        }
        if (!parsed) {
          return [];
        }
        if (!Array.isArray(parsed)) {
          throw new Error("Expected JSON string to be array");
        }
        return parsed.map(_MerkleTree.bufferify);
      }
      /**
       * getLayers
       * @desc Returns multi-dimensional array of all layers of Merkle Tree, including leaves and root.
       * @return {Buffer[][]}
       * @example
       *```js
       *const layers = tree.getLayers()
       *```
       */
      getLayers() {
        return this.layers;
      }
      /**
       * getHexLayers
       * @desc Returns multi-dimensional array of all layers of Merkle Tree, including leaves and root as hex strings.
       * @return {String[][]}
       * @example
       *```js
       *const layers = tree.getHexLayers()
       *```
       */
      getHexLayers() {
        return this.layers.reduce((acc, item) => {
          if (Array.isArray(item)) {
            acc.push(item.map((layer) => this.bufferToHex(layer)));
          } else {
            acc.push(item);
          }
          return acc;
        }, []);
      }
      /**
       * getLayersFlat
       * @desc Returns single flat array of all layers of Merkle Tree, including leaves and root.
       * @return {Buffer[]}
       * @example
       *```js
       *const layers = tree.getLayersFlat()
       *```
       */
      getLayersFlat() {
        const layers = this.layers.reduce((acc, item) => {
          if (Array.isArray(item)) {
            acc.unshift(...item);
          } else {
            acc.unshift(item);
          }
          return acc;
        }, []);
        layers.unshift(buffer_1.Buffer.from([0]));
        return layers;
      }
      /**
       * getHexLayersFlat
       * @desc Returns single flat array of all layers of Merkle Tree, including leaves and root as hex string.
       * @return {String[]}
       * @example
       *```js
       *const layers = tree.getHexLayersFlat()
       *```
       */
      getHexLayersFlat() {
        return this.getLayersFlat().map((layer) => this.bufferToHex(layer));
      }
      /**
       * getLayerCount
       * @desc Returns the total number of layers.
       * @return {number}
       * @example
       *```js
       *const count = tree.getLayerCount()
       *```
       */
      getLayerCount() {
        return this.getLayers().length;
      }
      /**
       * getRoot
       * @desc Returns the Merkle root hash as a Buffer.
       * @return {Buffer}
       * @example
       *```js
       *const root = tree.getRoot()
       *```
       */
      getRoot() {
        if (this.layers.length === 0) {
          return buffer_1.Buffer.from([]);
        }
        return this.layers[this.layers.length - 1][0] || buffer_1.Buffer.from([]);
      }
      /**
       * getHexRoot
       * @desc Returns the Merkle root hash as a hex string.
       * @return {String}
       * @example
       *```js
       *const root = tree.getHexRoot()
       *```
       */
      getHexRoot() {
        return this.bufferToHex(this.getRoot());
      }
      /**
       * getProof
       * @desc Returns the proof for a target leaf.
       * @param {Buffer} leaf - Target leaf
       * @param {Number} [index] - Target leaf index in leaves array.
       * Use if there are leaves containing duplicate data in order to distinguish it.
       * @return {Object[]} - Array of objects containing a position property of type string
       * with values of 'left' or 'right' and a data property of type Buffer.
       * @example
       * ```js
       *const proof = tree.getProof(leaves[2])
       *```
       *
       * @example
       *```js
       *const leaves = ['a', 'b', 'a'].map(value => keccak(value))
       *const tree = new MerkleTree(leaves, keccak)
       *const proof = tree.getProof(leaves[2], 2)
       *```
       */
      getProof(leaf, index) {
        if (typeof leaf === "undefined") {
          throw new Error("leaf is required");
        }
        leaf = this.bufferify(leaf);
        const proof = [];
        if (!Number.isInteger(index)) {
          index = -1;
          for (let i = 0; i < this.leaves.length; i++) {
            if (buffer_1.Buffer.compare(leaf, this.leaves[i]) === 0) {
              index = i;
            }
          }
        }
        if (index <= -1) {
          return [];
        }
        for (let i = 0; i < this.layers.length; i++) {
          const layer = this.layers[i];
          const isRightNode = index % 2;
          const pairIndex = isRightNode ? index - 1 : this.isBitcoinTree && index === layer.length - 1 && i < this.layers.length - 1 ? index : index + 1;
          if (pairIndex < layer.length) {
            proof.push({
              position: isRightNode ? "left" : "right",
              data: layer[pairIndex]
            });
          }
          index = index / 2 | 0;
        }
        return proof;
      }
      /**
       * getHexProof
       * @desc Returns the proof for a target leaf as hex strings.
       * @param {Buffer} leaf - Target leaf
       * @param {Number} [index] - Target leaf index in leaves array.
       * Use if there are leaves containing duplicate data in order to distinguish it.
       * @return {String[]} - Proof array as hex strings.
       * @example
       * ```js
       *const proof = tree.getHexProof(leaves[2])
       *```
       */
      getHexProof(leaf, index) {
        return this.getProof(leaf, index).map((item) => this.bufferToHex(item.data));
      }
      /**
       * getProofs
       * @desc Returns the proofs for all leaves.
       * @return {Object[]} - Array of objects containing a position property of type string
       * with values of 'left' or 'right' and a data property of type Buffer for all leaves.
       * @example
       * ```js
       *const proofs = tree.getProofs()
       *```
       *
       * @example
       *```js
       *const leaves = ['a', 'b', 'a'].map(value => keccak(value))
       *const tree = new MerkleTree(leaves, keccak)
       *const proofs = tree.getProofs()
       *```
       */
      getProofs() {
        const proof = [];
        const proofs = [];
        this.getProofsDFS(this.layers.length - 1, 0, proof, proofs);
        return proofs;
      }
      /**
       * getProofsDFS
       * @desc Get all proofs through single traverse
       * @param {Number} currentLayer - Current layer index in traverse.
       * @param {Number} index - Current tarvese node index in traverse.
       * @param {Object[]} proof - Proof chain for single leaf.
       * @param {Object[]} proofs - Proofs for all leaves
       * @example
       * ```js
       *const layers = tree.getLayers()
       *const index = 0;
       *let proof = [];
       *let proofs = [];
       *const proof = tree.getProofsDFS(layers, index, proof, proofs)
       *```
       */
      getProofsDFS(currentLayer, index, proof, proofs) {
        const isRightNode = index % 2;
        if (currentLayer === -1) {
          if (!isRightNode)
            proofs.push([...proof].reverse());
          return;
        }
        if (index >= this.layers[currentLayer].length)
          return;
        const layer = this.layers[currentLayer];
        const pairIndex = isRightNode ? index - 1 : index + 1;
        let pushed = false;
        if (pairIndex < layer.length) {
          pushed = true;
          proof.push({
            position: isRightNode ? "left" : "right",
            data: layer[pairIndex]
          });
        }
        const leftchildIndex = index * 2;
        const rightchildIndex = index * 2 + 1;
        this.getProofsDFS(currentLayer - 1, leftchildIndex, proof, proofs);
        this.getProofsDFS(currentLayer - 1, rightchildIndex, proof, proofs);
        if (pushed)
          proof.splice(proof.length - 1, 1);
      }
      /**
       * getHexProofs
       * @desc Returns the proofs for all leaves as hex strings.
       * @return {String[]} - Proofs array as hex strings.
       * @example
       * ```js
       *const proofs = tree.getHexProofs()
       *```
       */
      getHexProofs() {
        return this.getProofs().map((item) => this.bufferToHex(item.data));
      }
      /**
      * getPositionalHexProof
      * @desc Returns the proof for a target leaf as hex strings and the position in binary (left == 0).
      * @param {Buffer} leaf - Target leaf
      * @param {Number} [index] - Target leaf index in leaves array.
      * Use if there are leaves containing duplicate data in order to distinguish it.
      * @return {(string | number)[][]} - Proof array as hex strings. position at index 0
      * @example
      * ```js
      *const proof = tree.getPositionalHexProof(leaves[2])
      *```
      */
      getPositionalHexProof(leaf, index) {
        return this.getProof(leaf, index).map((item) => {
          return [
            item.position === "left" ? 0 : 1,
            this.bufferToHex(item.data)
          ];
        });
      }
      /**
       * marshalProof
       * @desc Returns proof array as JSON string.
       * @param {String[]|Object[]} proof - Merkle tree proof array
       * @return {String} - Proof array as JSON string.
       * @example
       * ```js
       *const jsonStr = MerkleTree.marshalProof(proof)
       *```
       */
      static marshalProof(proof) {
        const json = proof.map((item) => {
          if (typeof item === "string") {
            return item;
          }
          if (buffer_1.Buffer.isBuffer(item)) {
            return _MerkleTree.bufferToHex(item);
          }
          return {
            position: item.position,
            data: _MerkleTree.bufferToHex(item.data)
          };
        });
        return JSON.stringify(json, null, 2);
      }
      /**
       * unmarshalProof
       * @desc Returns the proof for a target leaf as a list of Buffers.
       * @param {String|Object} - Merkle tree leaves
       * @return {String|Object} - Marshalled proof
       * @example
       * ```js
       *const proof = MerkleTree.unmarshalProof(jsonStr)
       *```
       */
      static unmarshalProof(jsonStr) {
        let parsed = null;
        if (typeof jsonStr === "string") {
          parsed = JSON.parse(jsonStr);
        } else if (jsonStr instanceof Object) {
          parsed = jsonStr;
        } else {
          throw new Error("Expected type of string or object");
        }
        if (!parsed) {
          return [];
        }
        if (!Array.isArray(parsed)) {
          throw new Error("Expected JSON string to be array");
        }
        return parsed.map((item) => {
          if (typeof item === "string") {
            return _MerkleTree.bufferify(item);
          } else if (item instanceof Object) {
            return {
              position: item.position,
              data: _MerkleTree.bufferify(item.data)
            };
          } else {
            throw new Error("Expected item to be of type string or object");
          }
        });
      }
      static marshalTree(tree) {
        const root = tree.getHexRoot();
        const leaves = tree.leaves.map((leaf) => _MerkleTree.bufferToHex(leaf));
        const layers = tree.getHexLayers();
        const options = tree.getOptions();
        return JSON.stringify({
          options,
          root,
          layers,
          leaves
        }, null, 2);
      }
      static unmarshalTree(jsonStr, hashFn = sha256_1.default, options = {}) {
        let parsed = null;
        if (typeof jsonStr === "string") {
          parsed = JSON.parse(jsonStr);
        } else if (jsonStr instanceof Object) {
          parsed = jsonStr;
        } else {
          throw new Error("Expected type of string or object");
        }
        if (!parsed) {
          throw new Error("could not parse json");
        }
        options = Object.assign({}, parsed.options || {}, options);
        return new _MerkleTree(parsed.leaves, hashFn, options);
      }
      /**
       * getProofIndices
       * @desc Returns the proof indices for given tree indices.
       * @param {Number[]} treeIndices - Tree indices
       * @param {Number} depth - Tree depth; number of layers.
       * @return {Number[]} - Proof indices
       * @example
       * ```js
       *const proofIndices = tree.getProofIndices([2,5,6], 4)
       *console.log(proofIndices) // [ 23, 20, 19, 8, 3 ]
       *```
       */
      getProofIndices(treeIndices, depth) {
        const leafCount = Math.pow(2, depth);
        let maximalIndices = /* @__PURE__ */ new Set();
        for (const index of treeIndices) {
          let x = leafCount + index;
          while (x > 1) {
            maximalIndices.add(x ^ 1);
            x = x / 2 | 0;
          }
        }
        const a = treeIndices.map((index) => leafCount + index);
        const b = Array.from(maximalIndices).sort((a2, b2) => a2 - b2).reverse();
        maximalIndices = a.concat(b);
        const redundantIndices = /* @__PURE__ */ new Set();
        const proof = [];
        for (let index of maximalIndices) {
          if (!redundantIndices.has(index)) {
            proof.push(index);
            while (index > 1) {
              redundantIndices.add(index);
              if (!redundantIndices.has(index ^ 1))
                break;
              index = index / 2 | 0;
            }
          }
        }
        return proof.filter((index) => {
          return !treeIndices.includes(index - leafCount);
        });
      }
      getProofIndicesForUnevenTree(sortedLeafIndices, leavesCount) {
        const depth = Math.ceil(Math.log2(leavesCount));
        const unevenLayers = [];
        for (let index = 0; index < depth; index++) {
          const unevenLayer = leavesCount % 2 !== 0;
          if (unevenLayer) {
            unevenLayers.push({ index, leavesCount });
          }
          leavesCount = Math.ceil(leavesCount / 2);
        }
        const proofIndices = [];
        let layerNodes = sortedLeafIndices;
        for (let layerIndex = 0; layerIndex < depth; layerIndex++) {
          const siblingIndices = layerNodes.map((index) => {
            if (index % 2 === 0) {
              return index + 1;
            }
            return index - 1;
          });
          let proofNodeIndices = siblingIndices.filter((index) => !layerNodes.includes(index));
          const unevenLayer = unevenLayers.find(({ index }) => index === layerIndex);
          if (unevenLayer && layerNodes.includes(unevenLayer.leavesCount - 1)) {
            proofNodeIndices = proofNodeIndices.slice(0, -1);
          }
          proofIndices.push(proofNodeIndices);
          layerNodes = [...new Set(layerNodes.map((index) => {
            if (index % 2 === 0) {
              return index / 2;
            }
            if (index % 2 === 0) {
              return (index + 1) / 2;
            }
            return (index - 1) / 2;
          }))];
        }
        return proofIndices;
      }
      /**
       * getMultiProof
       * @desc Returns the multiproof for given tree indices.
       * @param {Number[]} indices - Tree indices.
       * @return {Buffer[]} - Multiproofs
       * @example
       * ```js
       *const indices = [2, 5, 6]
       *const proof = tree.getMultiProof(indices)
       *```
       */
      getMultiProof(tree, indices) {
        if (!this.complete) {
          console.warn("Warning: For correct multiProofs it's strongly recommended to set complete: true");
        }
        if (!indices) {
          indices = tree;
          tree = this.getLayersFlat();
        }
        const isUneven = this.isUnevenTree();
        if (isUneven) {
          if (indices.every(Number.isInteger)) {
            return this.getMultiProofForUnevenTree(indices);
          }
        }
        if (!indices.every(Number.isInteger)) {
          let els = indices;
          if (this.sortPairs) {
            els = els.sort(buffer_1.Buffer.compare);
          }
          let ids = els.map((el) => this.bufferIndexOf(this.leaves, el, this.sortLeaves)).sort((a, b) => a === b ? 0 : a > b ? 1 : -1);
          if (!ids.every((idx) => idx !== -1)) {
            throw new Error("Element does not exist in Merkle tree");
          }
          const hashes = [];
          const proof = [];
          let nextIds = [];
          for (let i = 0; i < this.layers.length; i++) {
            const layer = this.layers[i];
            for (let j = 0; j < ids.length; j++) {
              const idx = ids[j];
              const pairElement = this.getPairNode(layer, idx);
              hashes.push(layer[idx]);
              if (pairElement) {
                proof.push(pairElement);
              }
              nextIds.push(idx / 2 | 0);
            }
            ids = nextIds.filter((value, i2, self2) => self2.indexOf(value) === i2);
            nextIds = [];
          }
          return proof.filter((value) => !hashes.includes(value));
        }
        return this.getProofIndices(indices, Math.log2(tree.length / 2 | 0)).map((index) => tree[index]);
      }
      getMultiProofForUnevenTree(tree, indices) {
        if (!indices) {
          indices = tree;
          tree = this.getLayers();
        }
        let proofHashes = [];
        let currentLayerIndices = indices;
        for (const treeLayer of tree) {
          const siblings = [];
          for (const index of currentLayerIndices) {
            if (index % 2 === 0) {
              const idx2 = index + 1;
              if (!currentLayerIndices.includes(idx2)) {
                if (treeLayer[idx2]) {
                  siblings.push(treeLayer[idx2]);
                  continue;
                }
              }
            }
            const idx = index - 1;
            if (!currentLayerIndices.includes(idx)) {
              if (treeLayer[idx]) {
                siblings.push(treeLayer[idx]);
                continue;
              }
            }
          }
          proofHashes = proofHashes.concat(siblings);
          const uniqueIndices = /* @__PURE__ */ new Set();
          for (const index of currentLayerIndices) {
            if (index % 2 === 0) {
              uniqueIndices.add(index / 2);
              continue;
            }
            if (index % 2 === 0) {
              uniqueIndices.add((index + 1) / 2);
              continue;
            }
            uniqueIndices.add((index - 1) / 2);
          }
          currentLayerIndices = Array.from(uniqueIndices);
        }
        return proofHashes;
      }
      /**
       * getHexMultiProof
       * @desc Returns the multiproof for given tree indices as hex strings.
       * @param {Number[]} indices - Tree indices.
       * @return {String[]} - Multiproofs as hex strings.
       * @example
       * ```js
       *const indices = [2, 5, 6]
       *const proof = tree.getHexMultiProof(indices)
       *```
       */
      getHexMultiProof(tree, indices) {
        return this.getMultiProof(tree, indices).map((x) => this.bufferToHex(x));
      }
      /**
       * getProofFlags
       * @desc Returns list of booleans where proofs should be used instead of hashing.
       * Proof flags are used in the Solidity multiproof verifiers.
       * @param {Number[]|Buffer[]} leaves
       * @param {Buffer[]} proofs
       * @return {Boolean[]} - Boolean flags
       * @example
       * ```js
       *const indices = [2, 5, 6]
       *const proof = tree.getMultiProof(indices)
       *const proofFlags = tree.getProofFlags(leaves, proof)
       *```
       */
      getProofFlags(leaves, proofs) {
        if (!Array.isArray(leaves) || leaves.length <= 0) {
          throw new Error("Invalid Inputs!");
        }
        let ids;
        if (leaves.every(Number.isInteger)) {
          ids = [...leaves].sort((a, b) => a === b ? 0 : a > b ? 1 : -1);
        } else {
          ids = leaves.map((el) => this.bufferIndexOf(this.leaves, el, this.sortLeaves)).sort((a, b) => a === b ? 0 : a > b ? 1 : -1);
        }
        if (!ids.every((idx) => idx !== -1)) {
          throw new Error("Element does not exist in Merkle tree");
        }
        const _proofs = proofs.map((item) => this.bufferify(item));
        const tested = [];
        const flags = [];
        for (let index = 0; index < this.layers.length; index++) {
          const layer = this.layers[index];
          ids = ids.reduce((ids2, idx) => {
            const skipped = tested.includes(layer[idx]);
            if (!skipped) {
              const pairElement = this.getPairNode(layer, idx);
              const proofUsed = _proofs.includes(layer[idx]) || _proofs.includes(pairElement);
              pairElement && flags.push(!proofUsed);
              tested.push(layer[idx]);
              tested.push(pairElement);
            }
            ids2.push(idx / 2 | 0);
            return ids2;
          }, []);
        }
        return flags;
      }
      /**
       * verify
       * @desc Returns true if the proof path (array of hashes) can connect the target node
       * to the Merkle root.
       * @param {Object[]} proof - Array of proof objects that should connect
       * target node to Merkle root.
       * @param {Buffer} targetNode - Target node Buffer
       * @param {Buffer} root - Merkle root Buffer
       * @return {Boolean}
       * @example
       *```js
       *const root = tree.getRoot()
       *const proof = tree.getProof(leaves[2])
       *const verified = tree.verify(proof, leaves[2], root)
       *```
       */
      verify(proof, targetNode, root) {
        let hash = this.bufferify(targetNode);
        root = this.bufferify(root);
        if (!Array.isArray(proof) || !targetNode || !root) {
          return false;
        }
        for (let i = 0; i < proof.length; i++) {
          const node = proof[i];
          let data = null;
          let isLeftNode = null;
          if (typeof node === "string") {
            data = this.bufferify(node);
            isLeftNode = true;
          } else if (Array.isArray(node)) {
            isLeftNode = node[0] === 0;
            data = this.bufferify(node[1]);
          } else if (buffer_1.Buffer.isBuffer(node)) {
            data = node;
            isLeftNode = true;
          } else if (node instanceof Object) {
            data = this.bufferify(node.data);
            isLeftNode = node.position === "left";
          } else {
            throw new Error("Expected node to be of type string or object");
          }
          const buffers = [];
          if (this.isBitcoinTree) {
            buffers.push(buffer_reverse_1.default(hash));
            buffers[isLeftNode ? "unshift" : "push"](buffer_reverse_1.default(data));
            hash = this.hashFn(this.concatenator(buffers));
            hash = buffer_reverse_1.default(this.hashFn(hash));
          } else {
            if (this.sortPairs) {
              if (buffer_1.Buffer.compare(hash, data) === -1) {
                buffers.push(hash, data);
                hash = this.hashFn(this.concatenator(buffers));
              } else {
                buffers.push(data, hash);
                hash = this.hashFn(this.concatenator(buffers));
              }
            } else {
              buffers.push(hash);
              buffers[isLeftNode ? "unshift" : "push"](data);
              hash = this.hashFn(this.concatenator(buffers));
            }
          }
        }
        return buffer_1.Buffer.compare(hash, root) === 0;
      }
      /**
       * verifyMultiProof
       * @desc Returns true if the multiproofs can connect the leaves to the Merkle root.
       * @param {Buffer} root - Merkle tree root
       * @param {Number[]} proofIndices - Leave indices for proof
       * @param {Buffer[]} proofLeaves - Leaf values at indices for proof
       * @param {Number} leavesCount - Count of original leaves
       * @param {Buffer[]} proof - Multiproofs given indices
       * @return {Boolean}
       * @example
       *```js
       *const leaves = tree.getLeaves()
       *const root = tree.getRoot()
       *const treeFlat = tree.getLayersFlat()
       *const leavesCount = leaves.length
       *const proofIndices = [2, 5, 6]
       *const proofLeaves = proofIndices.map(i => leaves[i])
       *const proof = tree.getMultiProof(treeFlat, indices)
       *const verified = tree.verifyMultiProof(root, proofIndices, proofLeaves, leavesCount, proof)
       *```
       */
      verifyMultiProof(root, proofIndices, proofLeaves, leavesCount, proof) {
        const isUneven = this.isUnevenTree();
        if (isUneven) {
          return this.verifyMultiProofForUnevenTree(root, proofIndices, proofLeaves, leavesCount, proof);
        }
        const depth = Math.ceil(Math.log2(leavesCount));
        root = this.bufferify(root);
        proofLeaves = proofLeaves.map((leaf) => this.bufferify(leaf));
        proof = proof.map((leaf) => this.bufferify(leaf));
        const tree = {};
        for (const [index, leaf] of this.zip(proofIndices, proofLeaves)) {
          tree[Math.pow(2, depth) + index] = leaf;
        }
        for (const [index, proofitem] of this.zip(this.getProofIndices(proofIndices, depth), proof)) {
          tree[index] = proofitem;
        }
        let indexqueue = Object.keys(tree).map((value) => +value).sort((a, b) => a - b);
        indexqueue = indexqueue.slice(0, indexqueue.length - 1);
        let i = 0;
        while (i < indexqueue.length) {
          const index = indexqueue[i];
          if (index >= 2 && {}.hasOwnProperty.call(tree, index ^ 1)) {
            let pair = [tree[index - index % 2], tree[index - index % 2 + 1]];
            if (this.sortPairs) {
              pair = pair.sort(buffer_1.Buffer.compare);
            }
            const hash = pair[1] ? this.hashFn(this.concatenator(pair)) : pair[0];
            tree[index / 2 | 0] = hash;
            indexqueue.push(index / 2 | 0);
          }
          i += 1;
        }
        return !proofIndices.length || {}.hasOwnProperty.call(tree, 1) && tree[1].equals(root);
      }
      verifyMultiProofWithFlags(root, leaves, proofs, proofFlag) {
        root = this.bufferify(root);
        leaves = leaves.map(this.bufferify);
        proofs = proofs.map(this.bufferify);
        const leavesLen = leaves.length;
        const totalHashes = proofFlag.length;
        const hashes = [];
        let leafPos = 0;
        let hashPos = 0;
        let proofPos = 0;
        for (let i = 0; i < totalHashes; i++) {
          const bufA = proofFlag[i] ? leafPos < leavesLen ? leaves[leafPos++] : hashes[hashPos++] : proofs[proofPos++];
          const bufB = leafPos < leavesLen ? leaves[leafPos++] : hashes[hashPos++];
          const buffers = [bufA, bufB].sort(buffer_1.Buffer.compare);
          hashes[i] = this.hashFn(this.concatenator(buffers));
        }
        return buffer_1.Buffer.compare(hashes[totalHashes - 1], root) === 0;
      }
      verifyMultiProofForUnevenTree(root, indices, leaves, leavesCount, proof) {
        root = this.bufferify(root);
        leaves = leaves.map((leaf) => this.bufferify(leaf));
        proof = proof.map((leaf) => this.bufferify(leaf));
        const computedRoot = this.calculateRootForUnevenTree(indices, leaves, leavesCount, proof);
        return root.equals(computedRoot);
      }
      /**
       * getDepth
       * @desc Returns the tree depth (number of layers)
       * @return {Number}
       * @example
       *```js
       *const depth = tree.getDepth()
       *```
       */
      getDepth() {
        return this.getLayers().length - 1;
      }
      /**
       * getLayersAsObject
       * @desc Returns the layers as nested objects instead of an array.
       * @example
       *```js
       *const layersObj = tree.getLayersAsObject()
       *```
       */
      getLayersAsObject() {
        const layers = this.getLayers().map((layer) => layer.map((value) => this.bufferToHex(value, false)));
        const objs = [];
        for (let i = 0; i < layers.length; i++) {
          const arr = [];
          for (let j = 0; j < layers[i].length; j++) {
            const obj = { [layers[i][j]]: null };
            if (objs.length) {
              obj[layers[i][j]] = {};
              const a = objs.shift();
              const akey = Object.keys(a)[0];
              obj[layers[i][j]][akey] = a[akey];
              if (objs.length) {
                const b = objs.shift();
                const bkey = Object.keys(b)[0];
                obj[layers[i][j]][bkey] = b[bkey];
              }
            }
            arr.push(obj);
          }
          objs.push(...arr);
        }
        return objs[0];
      }
      /**
       * verify
       * @desc Returns true if the proof path (array of hashes) can connect the target node
       * to the Merkle root.
       * @param {Object[]} proof - Array of proof objects that should connect
       * target node to Merkle root.
       * @param {Buffer} targetNode - Target node Buffer
       * @param {Buffer} root - Merkle root Buffer
       * @param {Function} hashFunction - Hash function for hashing leaves and nodes
       * @param {Object} options - Additional options
       * @return {Boolean}
       * @example
       *```js
       *const verified = MerkleTree.verify(proof, leaf, root, sha256, options)
       *```
       */
      static verify(proof, targetNode, root, hashFn = sha256_1.default, options = {}) {
        const tree = new _MerkleTree([], hashFn, options);
        return tree.verify(proof, targetNode, root);
      }
      /**
       * getMultiProof
       * @desc Returns the multiproof for given tree indices.
       * @param {Buffer[]} tree - Tree as a flat array.
       * @param {Number[]} indices - Tree indices.
       * @return {Buffer[]} - Multiproofs
       *
       *@example
       * ```js
       *const flatTree = tree.getLayersFlat()
       *const indices = [2, 5, 6]
       *const proof = MerkleTree.getMultiProof(flatTree, indices)
       *```
       */
      static getMultiProof(tree, indices) {
        const t = new _MerkleTree([]);
        return t.getMultiProof(tree, indices);
      }
      /**
       * resetTree
       * @desc Resets the tree by clearing the leaves and layers.
       * @example
       *```js
       *tree.resetTree()
       *```
       */
      resetTree() {
        this.leaves = [];
        this.layers = [];
      }
      /**
       * getPairNode
       * @desc Returns the node at the index for given layer.
       * @param {Buffer[]} layer - Tree layer
       * @param {Number} index - Index at layer.
       * @return {Buffer} - Node
       *
       *@example
       * ```js
       *const node = tree.getPairNode(layer, index)
       *```
       */
      getPairNode(layer, idx) {
        const pairIdx = idx % 2 === 0 ? idx + 1 : idx - 1;
        if (pairIdx < layer.length) {
          return layer[pairIdx];
        } else {
          return null;
        }
      }
      /**
       * toTreeString
       * @desc Returns a visual representation of the merkle tree as a string.
       * @return {String}
       * @example
       *```js
       *console.log(tree.toTreeString())
       *```
       */
      toTreeString() {
        const obj = this.getLayersAsObject();
        return treeify_1.default.asTree(obj, true);
      }
      /**
       * toString
       * @desc Returns a visual representation of the merkle tree as a string.
       * @example
       *```js
       *console.log(tree.toString())
       *```
       */
      toString() {
        return this.toTreeString();
      }
      isUnevenTree(treeLayers) {
        const depth = (treeLayers === null || treeLayers === void 0 ? void 0 : treeLayers.length) || this.getDepth();
        return !this.isPowOf2(depth);
      }
      isPowOf2(v) {
        return v && !(v & v - 1);
      }
      calculateRootForUnevenTree(leafIndices, leafHashes, totalLeavesCount, proofHashes) {
        const leafTuples = this.zip(leafIndices, leafHashes).sort(([indexA], [indexB]) => indexA - indexB);
        const leafTupleIndices = leafTuples.map(([index]) => index);
        const proofIndices = this.getProofIndicesForUnevenTree(leafTupleIndices, totalLeavesCount);
        let nextSliceStart = 0;
        const proofTuplesByLayers = [];
        for (let i = 0; i < proofIndices.length; i++) {
          const indices = proofIndices[i];
          const sliceStart = nextSliceStart;
          nextSliceStart += indices.length;
          proofTuplesByLayers[i] = this.zip(indices, proofHashes.slice(sliceStart, nextSliceStart));
        }
        const tree = [leafTuples];
        for (let layerIndex = 0; layerIndex < proofTuplesByLayers.length; layerIndex++) {
          const currentLayer = proofTuplesByLayers[layerIndex].concat(tree[layerIndex]).sort(([indexA], [indexB]) => indexA - indexB).map(([, hash]) => hash);
          const s = tree[layerIndex].map(([layerIndex2]) => layerIndex2);
          const parentIndices = [...new Set(s.map((index) => {
            if (index % 2 === 0) {
              return index / 2;
            }
            if (index % 2 === 0) {
              return (index + 1) / 2;
            }
            return (index - 1) / 2;
          }))];
          const parentLayer = [];
          for (let i = 0; i < parentIndices.length; i++) {
            const parentNodeTreeIndex = parentIndices[i];
            const bufA = currentLayer[i * 2];
            const bufB = currentLayer[i * 2 + 1];
            const hash = bufB ? this.hashFn(this.concatenator([bufA, bufB])) : bufA;
            parentLayer.push([parentNodeTreeIndex, hash]);
          }
          tree.push(parentLayer);
        }
        return tree[tree.length - 1][0][1];
      }
    };
    exports.MerkleTree = MerkleTree3;
    if (typeof window !== "undefined") {
      ;
      window.MerkleTree = MerkleTree3;
    }
    exports.default = MerkleTree3;
  }
});

// ../../node_modules/merkletreejs/dist/MerkleMountainRange.js
var require_MerkleMountainRange = __commonJS({
  "../../node_modules/merkletreejs/dist/MerkleMountainRange.js"(exports) {
    "use strict";
    var __importDefault = exports && exports.__importDefault || function(mod) {
      return mod && mod.__esModule ? mod : { "default": mod };
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.MerkleMountainRange = void 0;
    var buffer_1 = require_buffer();
    var sha256_1 = __importDefault(require_sha256());
    var Base_1 = __importDefault(require_Base());
    var MerkleMountainRange = class extends Base_1.default {
      constructor(hashFn = sha256_1.default, leaves = [], hashLeafFn, peakBaggingFn, hashBranchFn) {
        super();
        this.root = buffer_1.Buffer.alloc(0);
        this.size = 0;
        this.width = 0;
        this.hashes = {};
        this.data = {};
        leaves = leaves.map(this.bufferify);
        this.hashFn = this.bufferifyFn(hashFn);
        this.hashLeafFn = hashLeafFn;
        this.peakBaggingFn = peakBaggingFn;
        this.hashBranchFn = hashBranchFn;
        for (const leaf of leaves) {
          this.append(leaf);
        }
      }
      /**
       * @desc This only stores the hashed value of the leaf.
       * If you need to retrieve the detail data later, use a map to store them.
       */
      append(data) {
        data = this.bufferify(data);
        const dataHash = this.hashFn(data);
        const dataHashHex = this.bufferToHex(dataHash);
        if (!this.data[dataHashHex] || this.bufferToHex(this.hashFn(this.data[dataHashHex])) !== dataHashHex) {
          this.data[dataHashHex] = data;
        }
        const leaf = this.hashLeaf(this.size + 1, dataHash);
        this.hashes[this.size + 1] = leaf;
        this.width += 1;
        const peakIndexes = this.getPeakIndexes(this.width);
        this.size = this.getSize(this.width);
        const peaks = [];
        for (let i = 0; i < peakIndexes.length; i++) {
          peaks[i] = this._getOrCreateNode(peakIndexes[i]);
        }
        this.root = this.peakBagging(this.width, peaks);
      }
      /**
       * @desc It returns the hash of a leaf node with hash(M | DATA )
       *       M is the index of the node.
       */
      hashLeaf(index, dataHash) {
        dataHash = this.bufferify(dataHash);
        if (this.hashLeafFn) {
          return this.bufferify(this.hashLeafFn(index, dataHash));
        }
        return this.hashFn(buffer_1.Buffer.concat([this.bufferify(index), dataHash]));
      }
      /**
       * @desc It returns the hash a parent node with hash(M | Left child | Right child)
       *       M is the index of the node.
       */
      hashBranch(index, left, right) {
        if (this.hashBranchFn) {
          return this.bufferify(this.hashBranchFn(index, left, right));
        }
        return this.hashFn(buffer_1.Buffer.concat([this.bufferify(index), this.bufferify(left), this.bufferify(right)]));
      }
      getPeaks() {
        const peakIndexes = this.getPeakIndexes(this.width);
        const peaks = [];
        for (let i = 0; i < peakIndexes.length; i++) {
          peaks[i] = this.hashes[peakIndexes[i]];
        }
        return peaks;
      }
      getLeafIndex(width) {
        if (width % 2 === 1) {
          return this.getSize(width);
        }
        return this.getSize(width - 1) + 1;
      }
      /**
       * @desc It returns all peaks of the smallest merkle mountain range tree which includes
       *       the given index(size).
       */
      getPeakIndexes(width) {
        const numPeaks = this.numOfPeaks(width);
        const peakIndexes = [];
        let count = 0;
        let size = 0;
        for (let i = 255; i > 0; i--) {
          if ((width & 1 << i - 1) !== 0) {
            size = size + (1 << i) - 1;
            peakIndexes[count++] = size;
            if (peakIndexes.length >= numPeaks) {
              break;
            }
          }
        }
        if (count !== peakIndexes.length) {
          throw new Error("invalid bit calculation");
        }
        return peakIndexes;
      }
      numOfPeaks(width) {
        let bits = width;
        let num = 0;
        while (bits > 0) {
          if (bits % 2 === 1) {
            num++;
          }
          bits = bits >> 1;
        }
        return num;
      }
      peakBagging(width, peaks) {
        const size = this.getSize(width);
        if (this.numOfPeaks(width) !== peaks.length) {
          throw new Error("received invalid number of peaks");
        }
        if (width === 0 && !peaks.length) {
          return buffer_1.Buffer.alloc(0);
        }
        if (this.peakBaggingFn) {
          return this.bufferify(this.peakBaggingFn(size, peaks));
        }
        return this.hashFn(buffer_1.Buffer.concat([this.bufferify(size), ...peaks.map(this.bufferify)]));
      }
      /**
       * @desc It returns the size of the tree.
       */
      getSize(width) {
        return (width << 1) - this.numOfPeaks(width);
      }
      /**
       * @desc It returns the root value of the tree.
       */
      getRoot() {
        return this.root;
      }
      getHexRoot() {
        return this.bufferToHex(this.getRoot());
      }
      /**
       * @dev It returns the hash value of a node for the given position. Note that the index starts from 1.
       */
      getNode(index) {
        return this.hashes[index];
      }
      /**
       * @desc It returns the height of the highest peak.
       */
      mountainHeight(size) {
        let height = 1;
        while (1 << height <= size + height) {
          height++;
        }
        return height - 1;
      }
      /**
       * @desc It returns the height of the index.
       */
      heightAt(index) {
        let reducedIndex = index;
        let peakIndex = 0;
        let height = 0;
        while (reducedIndex > peakIndex) {
          reducedIndex -= (1 << height) - 1;
          height = this.mountainHeight(reducedIndex);
          peakIndex = (1 << height) - 1;
        }
        return height - (peakIndex - reducedIndex);
      }
      /**
       * @desc It returns whether the index is the leaf node or not
       */
      isLeaf(index) {
        return this.heightAt(index) === 1;
      }
      /**
       * @desc It returns the children when it is a parent node.
       */
      getChildren(index) {
        const left = index - (1 << this.heightAt(index) - 1);
        const right = index - 1;
        if (left === right) {
          throw new Error("not a parent");
        }
        return [left, right];
      }
      /**
       * @desc It returns a merkle proof for a leaf. Note that the index starts from 1.
       */
      getMerkleProof(index) {
        if (index > this.size) {
          throw new Error("out of range");
        }
        if (!this.isLeaf(index)) {
          throw new Error("not a leaf");
        }
        const root = this.root;
        const width = this.width;
        const peaks = this.getPeakIndexes(this.width);
        const peakBagging = [];
        let cursor = 0;
        for (let i = 0; i < peaks.length; i++) {
          peakBagging[i] = this.hashes[peaks[i]];
          if (peaks[i] >= index && cursor === 0) {
            cursor = peaks[i];
          }
        }
        let left = 0;
        let right = 0;
        let height = this.heightAt(cursor);
        const siblings = [];
        while (cursor !== index) {
          height--;
          [left, right] = this.getChildren(cursor);
          cursor = index <= left ? left : right;
          siblings[height - 1] = this.hashes[index <= left ? right : left];
        }
        return {
          root,
          width,
          peakBagging,
          siblings
        };
      }
      /**
       * @desc It returns true when the given params verifies that the given value exists in the tree or reverts the transaction.
       */
      verify(root, width, index, value, peaks, siblings) {
        value = this.bufferify(value);
        const size = this.getSize(width);
        if (size < index) {
          throw new Error("index is out of range");
        }
        if (!root.equals(this.peakBagging(width, peaks))) {
          throw new Error("invalid root hash from the peaks");
        }
        let cursor = 0;
        let targetPeak;
        const peakIndexes = this.getPeakIndexes(width);
        for (let i = 0; i < peakIndexes.length; i++) {
          if (peakIndexes[i] >= index) {
            targetPeak = peaks[i];
            cursor = peakIndexes[i];
            break;
          }
        }
        if (!targetPeak) {
          throw new Error("target not found");
        }
        let height = siblings.length + 1;
        const path = new Array(height);
        let left = 0;
        let right = 0;
        while (height > 0) {
          path[--height] = cursor;
          if (cursor === index) {
            break;
          } else {
            [left, right] = this.getChildren(cursor);
            cursor = index > left ? right : left;
            continue;
          }
        }
        let node;
        while (height < path.length) {
          cursor = path[height];
          if (height === 0) {
            node = this.hashLeaf(cursor, this.hashFn(value));
          } else if (cursor - 1 === path[height - 1]) {
            node = this.hashBranch(cursor, siblings[height - 1], node);
          } else {
            node = this.hashBranch(cursor, node, siblings[height - 1]);
          }
          height++;
        }
        if (!node.equals(targetPeak)) {
          throw new Error("hashed peak is invalid");
        }
        return true;
      }
      peaksToPeakMap(width, peaks) {
        const peakMap = {};
        let bitIndex = 0;
        let peakRef = 0;
        let count = peaks.length;
        for (let height = 1; height <= 32; height++) {
          bitIndex = 32 - height;
          peakRef = 1 << height - 1;
          if ((width & peakRef) !== 0) {
            peakMap[bitIndex] = peaks[--count];
          } else {
            peakMap[bitIndex] = 0;
          }
        }
        if (count !== 0) {
          throw new Error("invalid number of peaks");
        }
        return peakMap;
      }
      peakMapToPeaks(width, peakMap) {
        const arrLength = this.numOfPeaks(width);
        const peaks = new Array(arrLength);
        let count = 0;
        for (let i = 0; i < 32; i++) {
          if (peakMap[i] !== 0) {
            peaks[count++] = peakMap[i];
          }
        }
        if (count !== arrLength) {
          throw new Error("invalid number of peaks");
        }
        return peaks;
      }
      peakUpdate(width, prevPeakMap, itemHash) {
        const nextPeakMap = {};
        const newWidth = width + 1;
        let cursorIndex = this.getLeafIndex(newWidth);
        let cursorNode = this.hashLeaf(cursorIndex, itemHash);
        let bitIndex = 0;
        let peakRef = 0;
        let prevPeakExist = false;
        let nextPeakExist = false;
        let obtained = false;
        for (let height = 1; height <= 32; height++) {
          bitIndex = 32 - height;
          if (obtained) {
            nextPeakMap[bitIndex] = prevPeakMap[bitIndex];
          } else {
            peakRef = 1 << height - 1;
            prevPeakExist = (width & peakRef) !== 0;
            nextPeakExist = (newWidth & peakRef) !== 0;
            cursorIndex++;
            if (prevPeakExist) {
              cursorNode = this.hashBranch(cursorIndex, prevPeakMap[bitIndex], cursorNode);
            }
            if (nextPeakExist) {
              if (prevPeakExist) {
                nextPeakMap[bitIndex] = prevPeakMap[bitIndex];
              } else {
                nextPeakMap[bitIndex] = cursorNode;
              }
              obtained = true;
            } else {
              nextPeakMap[bitIndex] = 0;
            }
          }
        }
        return nextPeakMap;
      }
      rollUp(root, width, peaks, itemHashes) {
        if (!root.equals(this.peakBagging(width, peaks))) {
          throw new Error("invalid root hash from the peaks");
        }
        let tmpWidth = width;
        let tmpPeakMap = this.peaksToPeakMap(width, peaks);
        for (let i = 0; i < itemHashes.length; i++) {
          tmpPeakMap = this.peakUpdate(tmpWidth, tmpPeakMap, itemHashes[i]);
          tmpWidth++;
        }
        return this.peakBagging(tmpWidth, this.peakMapToPeaks(tmpWidth, tmpPeakMap));
      }
      /**
       * @desc It returns the hash value of the node for the index.
       *      If the hash already exists it simply returns the stored value. On the other hand,
       *      it computes hashes recursively downward.
       *      Only appending an item calls this function.
       */
      _getOrCreateNode(index) {
        if (index > this.size) {
          throw new Error("out of range");
        }
        if (!this.hashes[index]) {
          const [leftIndex, rightIndex] = this.getChildren(index);
          const leftHash = this._getOrCreateNode(leftIndex);
          const rightHash = this._getOrCreateNode(rightIndex);
          this.hashes[index] = this.hashBranch(index, leftHash, rightHash);
        }
        return this.hashes[index];
      }
    };
    exports.MerkleMountainRange = MerkleMountainRange;
    if (typeof window !== "undefined") {
      ;
      window.MerkleMountainRange = MerkleMountainRange;
    }
    exports.default = MerkleMountainRange;
  }
});

// ../../node_modules/merkletreejs/dist/IncrementalMerkleTree.js
var require_IncrementalMerkleTree = __commonJS({
  "../../node_modules/merkletreejs/dist/IncrementalMerkleTree.js"(exports) {
    "use strict";
    var __importDefault = exports && exports.__importDefault || function(mod) {
      return mod && mod.__esModule ? mod : { "default": mod };
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.IncrementalMerkleTree = void 0;
    var Base_1 = __importDefault(require_Base());
    var treeify_1 = __importDefault(require_treeify());
    var IncrementalMerkleTree = class extends Base_1.default {
      constructor(hashFn, options) {
        super();
        this.hashFn = hashFn;
        if (options.depth) {
          this.depth = options.depth;
        }
        if (options.arity) {
          this.arity = options.arity;
        }
        if (this.depth < 1) {
          throw new Error("depth must be greater than 0");
        }
        if (this.arity < 1) {
          throw new Error("arity must be greater than 0");
        }
        const nodes = [];
        let zeroValue = options.zeroValue;
        this.zeroValue = zeroValue;
        this.zeroes = [];
        if (this.depth) {
          for (let i = 0; i < this.depth; i++) {
            this.zeroes.push(zeroValue);
            nodes[i] = [];
            zeroValue = this.hashFn(Array(this.arity).fill(zeroValue));
          }
        }
        this.nodes = nodes;
        this.root = zeroValue;
      }
      getRoot() {
        return this.root;
      }
      getHexRoot() {
        return this.bufferToHex(this.bufferify(this.getRoot()));
      }
      insert(leaf) {
        if (this.depth && this.arity) {
          if (this.nodes[0].length >= this.getMaxLeaves()) {
            throw new Error("tree is full");
          }
        }
        let node = leaf;
        let index = this.nodes[0].length;
        for (let level = 0; level < this.depth; level += 1) {
          const position = index % this.arity;
          const levelStartIndex = index - position;
          const levelEndIndex = levelStartIndex + this.arity;
          const children = [];
          this.nodes[level][index] = node;
          for (let i = levelStartIndex; i < levelEndIndex; i += 1) {
            if (i < this.nodes[level].length) {
              children.push(this.nodes[level][i]);
            } else {
              children.push(this.zeroes[level]);
            }
          }
          node = this.hashFn(children);
          index = Math.floor(index / this.arity);
        }
        this.root = node;
      }
      delete(index) {
        this.update(index, this.zeroValue);
      }
      update(index, newLeaf) {
        if (index < 0 || index >= this.nodes[0].length) {
          throw new Error("out of bounds");
        }
        let node = newLeaf;
        for (let level = 0; level < this.depth; level += 1) {
          const position = index % this.arity;
          const levelStartIndex = index - position;
          const levelEndIndex = levelStartIndex + this.arity;
          const children = [];
          this.nodes[level][index] = node;
          for (let i = levelStartIndex; i < levelEndIndex; i += 1) {
            if (i < this.nodes[level].length) {
              children.push(this.nodes[level][i]);
            } else {
              children.push(this.zeroes[level]);
            }
          }
          node = this.hashFn(children);
          index = Math.floor(index / this.arity);
        }
        this.root = node;
      }
      getDepth() {
        return this.depth;
      }
      getArity() {
        return this.arity;
      }
      getMaxLeaves() {
        return Math.pow(this.depth, this.arity);
      }
      indexOf(leaf) {
        return this.nodes[0].indexOf(leaf);
      }
      getLeaves() {
        const leaves = this.copyList(this.nodes[0]);
        const index = this.nodes[0].length;
        for (let i = index; i < this.getMaxLeaves(); i++) {
          leaves[i] = this.zeroValue;
        }
        return leaves;
      }
      copyList(list) {
        return list.map((x) => BigInt(x));
      }
      getLayers() {
        const layers = [];
        for (const list of this.nodes) {
          layers.push(this.copyList(list));
        }
        if (layers[0].length < this.getMaxLeaves()) {
          let index = layers[0].length;
          for (let i = index; i < this.getMaxLeaves(); i++) {
            layers[0][i] = this.zeroValue;
          }
          for (let level = 0; level < this.depth; level++) {
            const position = index % this.arity;
            const levelStartIndex = index - position;
            const levelEndIndex = levelStartIndex + this.arity;
            for (let i = levelStartIndex; i < levelEndIndex; i++) {
              if (i >= layers[level].length) {
                layers[level][i] = this.zeroes[level];
              }
            }
            index = Math.floor(index / this.arity);
          }
        }
        layers.push([this.root]);
        return layers;
      }
      getHexLayers() {
        return this.getLayers().reduce((acc, item) => {
          if (Array.isArray(item)) {
            acc.push(item.map((layer) => this.bufferToHex(this.bufferify(layer))));
          } else {
            acc.push(item);
          }
          return acc;
        }, []);
      }
      getLayersAsObject() {
        const layers = this.getLayers().map((layer) => layer.map((value) => this.bufferToHex(this.bufferify(value), false)));
        const objs = [];
        for (let i = 0; i < layers.length; i++) {
          const arr = [];
          for (let j = 0; j < layers[i].length; j++) {
            const obj = { [layers[i][j]]: null };
            if (objs.length) {
              obj[layers[i][j]] = {};
              const a = objs.shift();
              const akey = Object.keys(a)[0];
              obj[layers[i][j]][akey] = a[akey];
              if (objs.length) {
                const b = objs.shift();
                const bkey = Object.keys(b)[0];
                obj[layers[i][j]][bkey] = b[bkey];
              }
            }
            arr.push(obj);
          }
          objs.push(...arr);
        }
        return objs[0];
      }
      computeRoot() {
        let node;
        let index = this.nodes[0].length;
        for (let level = 0; level < this.depth; level += 1) {
          const position = index % this.arity;
          const levelStartIndex = index - position;
          const levelEndIndex = levelStartIndex + this.arity;
          const children = [];
          for (let i = levelStartIndex; i < levelEndIndex; i += 1) {
            if (i < this.nodes[level].length) {
              children.push(this.nodes[level][i]);
            } else {
              children.push(this.zeroes[level]);
            }
          }
          node = this.hashFn(children);
          index = Math.floor(index / this.arity);
        }
        return node;
      }
      getProof(index) {
        if (index < 0 || index >= this.nodes[0].length) {
          throw new Error("The leaf does not exist in this tree");
        }
        const siblings = [];
        const pathIndices = [];
        const leafIndex = index;
        for (let level = 0; level < this.depth; level += 1) {
          const position = index % this.arity;
          const levelStartIndex = index - position;
          const levelEndIndex = levelStartIndex + this.arity;
          pathIndices[level] = position;
          siblings[level] = [];
          for (let i = levelStartIndex; i < levelEndIndex; i += 1) {
            if (i !== index) {
              if (i < this.nodes[level].length) {
                siblings[level].push(this.nodes[level][i]);
              } else {
                siblings[level].push(this.zeroes[level]);
              }
            }
          }
          index = Math.floor(index / this.arity);
        }
        return { root: this.root, leaf: this.nodes[0][leafIndex], pathIndices, siblings };
      }
      verify(proof) {
        let node = proof.leaf;
        for (let i = 0; i < proof.siblings.length; i += 1) {
          const children = proof.siblings[i].slice();
          children.splice(proof.pathIndices[i], 0, node);
          node = this.hashFn(children);
        }
        return proof.root === node;
      }
      toString() {
        return this.toTreeString();
      }
      toTreeString() {
        const obj = this.getLayersAsObject();
        return treeify_1.default.asTree(obj, true);
      }
    };
    exports.IncrementalMerkleTree = IncrementalMerkleTree;
    if (typeof window !== "undefined") {
      ;
      window.IncrementalMerkleTree = IncrementalMerkleTree;
    }
    exports.default = IncrementalMerkleTree;
  }
});

// ../../node_modules/merkletreejs/dist/MerkleSumTree.js
var require_MerkleSumTree = __commonJS({
  "../../node_modules/merkletreejs/dist/MerkleSumTree.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.MerkleSumTree = exports.ProofStep = exports.Leaf = exports.Bucket = void 0;
    var Base_1 = require_Base();
    var Bucket = class {
      constructor(size, hashed) {
        this.size = BigInt(size);
        this.hashed = hashed;
        this.parent = null;
        this.left = null;
        this.right = null;
      }
    };
    exports.Bucket = Bucket;
    var Leaf = class {
      constructor(hashFn, rng, data) {
        this.hashFn = hashFn;
        this.rng = rng.map((x) => BigInt(x));
        this.data = data;
      }
      getBucket() {
        let hashed;
        if (this.data) {
          hashed = this.hashFn(this.data);
        } else {
          hashed = Buffer.alloc(32);
        }
        return new Bucket(BigInt(this.rng[1]) - BigInt(this.rng[0]), hashed);
      }
    };
    exports.Leaf = Leaf;
    var ProofStep = class {
      constructor(bucket, right) {
        this.bucket = bucket;
        this.right = right;
      }
    };
    exports.ProofStep = ProofStep;
    var MerkleSumTree = class _MerkleSumTree extends Base_1.Base {
      constructor(leaves, hashFn) {
        super();
        this.leaves = leaves;
        this.hashFn = hashFn;
        _MerkleSumTree.checkConsecutive(leaves);
        this.buckets = [];
        for (const l of leaves) {
          this.buckets.push(l.getBucket());
        }
        let buckets = [];
        for (const bucket of this.buckets) {
          buckets.push(bucket);
        }
        while (buckets.length !== 1) {
          const newBuckets = [];
          while (buckets.length) {
            if (buckets.length >= 2) {
              const b1 = buckets.shift();
              const b2 = buckets.shift();
              const size = b1.size + b2.size;
              const hashed = this.hashFn(Buffer.concat([this.sizeToBuffer(b1.size), this.bufferify(b1.hashed), this.sizeToBuffer(b2.size), this.bufferify(b2.hashed)]));
              const b = new Bucket(size, hashed);
              b2.parent = b;
              b1.parent = b2.parent;
              b1.right = b2;
              b2.left = b1;
              newBuckets.push(b);
            } else {
              newBuckets.push(buckets.shift());
            }
          }
          buckets = newBuckets;
        }
        this.root = buckets[0];
      }
      sizeToBuffer(size) {
        const buf = Buffer.alloc(8);
        const view = new DataView(buf.buffer);
        view.setBigInt64(0, BigInt(size), false);
        return buf;
      }
      static checkConsecutive(leaves) {
        let curr = BigInt(0);
        for (const leaf of leaves) {
          if (leaf.rng[0] !== curr) {
            throw new Error("leaf ranges are invalid");
          }
          curr = BigInt(leaf.rng[1]);
        }
      }
      // gets inclusion/exclusion proof of a bucket in the specified index
      getProof(index) {
        let curr = this.buckets[Number(index)];
        const proof = [];
        while (curr && curr.parent) {
          const right = !!curr.right;
          const bucket = curr.right ? curr.right : curr.left;
          curr = curr.parent;
          proof.push(new ProofStep(bucket, right));
        }
        return proof;
      }
      sum(arr) {
        let total = BigInt(0);
        for (const value of arr) {
          total += BigInt(value);
        }
        return total;
      }
      // validates the suppplied proof for a specified leaf according to the root bucket
      verifyProof(root, leaf, proof) {
        const rng = [this.sum(proof.filter((x) => !x.right).map((x) => x.bucket.size)), BigInt(root.size) - this.sum(proof.filter((x) => x.right).map((x) => x.bucket.size))];
        if (!(rng[0] === leaf.rng[0] && rng[1] === leaf.rng[1])) {
          return false;
        }
        let curr = leaf.getBucket();
        let hashed;
        for (const step of proof) {
          if (step.right) {
            hashed = this.hashFn(Buffer.concat([this.sizeToBuffer(curr.size), this.bufferify(curr.hashed), this.sizeToBuffer(step.bucket.size), this.bufferify(step.bucket.hashed)]));
          } else {
            hashed = this.hashFn(Buffer.concat([this.sizeToBuffer(step.bucket.size), this.bufferify(step.bucket.hashed), this.sizeToBuffer(curr.size), this.bufferify(curr.hashed)]));
          }
          curr = new Bucket(BigInt(curr.size) + BigInt(step.bucket.size), hashed);
        }
        return curr.size === root.size && curr.hashed.toString("hex") === root.hashed.toString("hex");
      }
    };
    exports.MerkleSumTree = MerkleSumTree;
    if (typeof window !== "undefined") {
      ;
      window.MerkleSumTree = MerkleSumTree;
    }
    exports.default = MerkleSumTree;
  }
});

// ../../node_modules/merkletreejs/dist/index.js
var require_dist = __commonJS({
  "../../node_modules/merkletreejs/dist/index.js"(exports) {
    "use strict";
    var __importDefault = exports && exports.__importDefault || function(mod) {
      return mod && mod.__esModule ? mod : { "default": mod };
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.MerkleTree = void 0;
    var MerkleTree_1 = __importDefault(require_MerkleTree());
    exports.MerkleTree = MerkleTree_1.default;
    var MerkleMountainRange_1 = require_MerkleMountainRange();
    Object.defineProperty(exports, "MerkleMountainRange", { enumerable: true, get: function() {
      return MerkleMountainRange_1.MerkleMountainRange;
    } });
    var IncrementalMerkleTree_1 = require_IncrementalMerkleTree();
    Object.defineProperty(exports, "IncrementalMerkleTree", { enumerable: true, get: function() {
      return IncrementalMerkleTree_1.IncrementalMerkleTree;
    } });
    var MerkleSumTree_1 = require_MerkleSumTree();
    Object.defineProperty(exports, "MerkleSumTree", { enumerable: true, get: function() {
      return MerkleSumTree_1.MerkleSumTree;
    } });
    exports.default = MerkleTree_1.default;
  }
});

// ../../node_modules/@metaplex-foundation/js/dist/esm/types/Cluster.mjs
var MAINNET_BETA_DOMAINS = ["api.mainnet-beta.solana.com", "ssc-dao.genesysgo.net"];
var DEVNET_DOMAINS = ["api.devnet.solana.com", "psytrbhymqlkfrhudd.dev.genesysgo.net"];
var TESTNET_DOMAINS = ["api.testnet.solana.com"];
var LOCALNET_DOMAINS = ["localhost", "127.0.0.1"];
var resolveClusterFromConnection = (connection) => {
  return resolveClusterFromEndpoint(connection.rpcEndpoint);
};
var resolveClusterFromEndpoint = (endpoint) => {
  const domain = new URL(endpoint).hostname;
  if (MAINNET_BETA_DOMAINS.includes(domain))
    return "mainnet-beta";
  if (DEVNET_DOMAINS.includes(domain))
    return "devnet";
  if (TESTNET_DOMAINS.includes(domain))
    return "testnet";
  if (LOCALNET_DOMAINS.includes(domain))
    return "localnet";
  return "custom";
};

// ../../node_modules/@metaplex-foundation/js/dist/esm/_virtual/_rollupPluginBabelHelpers.mjs
function _defineProperty(obj, key, value) {
  key = _toPropertyKey(key);
  if (key in obj) {
    Object.defineProperty(obj, key, {
      value,
      enumerable: true,
      configurable: true,
      writable: true
    });
  } else {
    obj[key] = value;
  }
  return obj;
}
function _toPrimitive(input, hint) {
  if (typeof input !== "object" || input === null)
    return input;
  var prim = input[Symbol.toPrimitive];
  if (prim !== void 0) {
    var res = prim.call(input, hint || "default");
    if (typeof res !== "object")
      return res;
    throw new TypeError("@@toPrimitive must return a primitive value.");
  }
  return (hint === "string" ? String : Number)(input);
}
function _toPropertyKey(arg) {
  var key = _toPrimitive(arg, "string");
  return typeof key === "symbol" ? key : String(key);
}

// ../../node_modules/@metaplex-foundation/js/dist/esm/errors/MetaplexError.mjs
var MetaplexError = class extends Error {
  constructor(message, source, sourceDetails, cause) {
    super(message);
    _defineProperty(this, "name", "MetaplexError");
    this.source = source;
    this.sourceDetails = sourceDetails;
    this.cause = cause;
    this.message = this.message + `

Source: ${this.getFullSource()}` + (this.cause ? `

Caused By: ${this.cause}` : "") + "\n";
  }
  getCapitalizedSource() {
    if (this.source === "sdk" || this.source === "rpc") {
      return this.source.toUpperCase();
    }
    return this.source[0].toUpperCase() + this.source.slice(1);
  }
  getFullSource() {
    const capitalizedSource = this.getCapitalizedSource();
    const sourceDetails = this.sourceDetails ? ` > ${this.sourceDetails}` : "";
    return capitalizedSource + sourceDetails;
  }
  toString() {
    return `[${this.name}] ${this.message}`;
  }
};

// ../../node_modules/@metaplex-foundation/js/dist/esm/errors/SdkError.mjs
var SdkError = class extends MetaplexError {
  constructor(message, cause) {
    super(message, "sdk", void 0, cause);
    _defineProperty(this, "name", "SdkError");
  }
};
var OperationHandlerMissingError = class extends SdkError {
  constructor(operationKey) {
    const message = `No operation handler was registered for the [${operationKey}] operation. Did you forget to register it? You may do this by using: "metaplex.operations().register(operation, operationHandler)".`;
    super(message);
    _defineProperty(this, "name", "OperationHandlerMissingError");
  }
};
var DriverNotProvidedError = class extends SdkError {
  constructor(driver) {
    const message = `The SDK tried to access the driver [${driver}] but was not provided. Make sure the driver is registered by using the "setDriver(myDriver)" method.`;
    super(message);
    _defineProperty(this, "name", "DriverNotProvidedError");
  }
};
var UnexpectedCurrencyError = class extends SdkError {
  constructor(actual, expected) {
    const message = `Expected currency [${expected}] but got [${actual}]. Ensure the provided Amount or Currency is of the expected type.`;
    super(message);
    _defineProperty(this, "name", "UnexpectedCurrencyError");
    this.actual = actual;
    this.expected = expected;
  }
};
var CurrencyMismatchError = class extends SdkError {
  constructor(left, right, operation) {
    const wrappedOperation = operation ? ` [${operation}]` : "";
    const message = `The SDK tried to execute an operation${wrappedOperation} on two different currencies: ${left.symbol} and ${right.symbol}. Provide both amounts in the same currency to perform this operation.`;
    super(message);
    _defineProperty(this, "name", "CurrencyMismatchError");
    this.left = left;
    this.right = right;
    this.operation = operation;
  }
};
var InvalidJsonVariableError = class extends SdkError {
  constructor(cause) {
    super("The provided JSON variable could not be parsed into a string.", cause);
    _defineProperty(this, "name", "InvalidJsonVariableError");
  }
};
var InvalidJsonStringError = class extends SdkError {
  constructor(cause) {
    super("The provided string could not be parsed into a JSON variable.", cause);
    _defineProperty(this, "name", "InvalidJsonStringError");
  }
};
var OperationUnauthorizedForGuestsError = class extends SdkError {
  constructor(operation) {
    const message = `Trying to access the [${operation}] operation as a guest. Ensure your wallet is connected using the identity driver. For instance, by using "metaplex.use(walletAdapterIdentity(wallet))" or "metaplex.use(keypairIdentity(keypair))".`;
    super(message);
    _defineProperty(this, "name", "OperationUnauthorizedForGuestsError");
  }
};
var UninitializedWalletAdapterError = class extends SdkError {
  constructor() {
    const message = `The current wallet adapter is not initialized. You likely have selected a wallet adapter but forgot to initialize it. You may do this by running the following asynchronous method: "wallet.connect();".`;
    super(message);
    _defineProperty(this, "name", "UninitializedWalletAdapterError");
  }
};
var OperationNotSupportedByWalletAdapterError = class extends SdkError {
  constructor(operation) {
    const message = `The current wallet adapter does not support the following operation: [${operation}]. Ensure your wallet is connected using a compatible wallet adapter.`;
    super(message);
    _defineProperty(this, "name", "OperationNotSupportedByWalletAdapterError");
  }
};
var TaskIsAlreadyRunningError = class extends SdkError {
  constructor() {
    const message = `Trying to re-run a task that hasn't completed yet. Ensure the task has completed using "await" before trying to run it again.`;
    super(message);
    _defineProperty(this, "name", "TaskIsAlreadyRunningError");
  }
};
var AssetNotFoundError = class extends SdkError {
  constructor(location) {
    super(`The asset at [${location}] could not be found.`);
    _defineProperty(this, "name", "AssetNotFoundError");
  }
};
var AccountNotFoundError = class extends SdkError {
  constructor(address, accountType, solution) {
    const message = (accountType ? `The account of type [${accountType}] was not found` : "No account was found") + ` at the provided address [${address.toString()}].` + (solution ? ` ${solution}` : "");
    super(message);
    _defineProperty(this, "name", "AccountNotFoundError");
  }
};
var UnexpectedAccountError = class extends SdkError {
  constructor(address, expectedType, cause) {
    const message = `The account at the provided address [${address.toString()}] is not of the expected type [${expectedType}].`;
    super(message, cause);
    _defineProperty(this, "name", "UnexpectedAccountError");
  }
};
var UnexpectedTypeError = class extends SdkError {
  constructor(variable, actualType, expectedType) {
    const message = `Expected variable [${variable}] to be of type [${expectedType}] but got [${actualType}].`;
    super(message);
    _defineProperty(this, "name", "UnexpectedTypeError");
  }
};
var ExpectedSignerError = class extends SdkError {
  constructor(variable, actualType, solution) {
    const message = `Expected variable [${variable}] to be of type [Signer] but got [${actualType}]. ` + (solution ?? "Please check that you are providing the variable as a signer. Note that, it may be allowed to provide a non-signer variable for certain use cases but not this one.");
    super(message);
    _defineProperty(this, "name", "ExpectedSignerError");
  }
};
var ProgramNotRecognizedError = class extends SdkError {
  constructor(nameOrAddress, cluster) {
    const isName = typeof nameOrAddress === "string";
    const toString = isName ? nameOrAddress : nameOrAddress.toString();
    const message = `The provided program ${isName ? "name" : "address"} [${toString}] is not recognized in the [${cluster}] cluster.Did you forget to register this program? If so, you may use "metaplex.programs().register(myProgram)" to fix this.`;
    super(message);
    _defineProperty(this, "name", "ProgramNotRecognizedError");
    this.nameOrAddress = nameOrAddress;
    this.cluster = cluster;
  }
};
var NoInstructionsToSendError = class extends SdkError {
  constructor(operation, solution) {
    const message = `The input provided to the [${operation}] resulted in a Transaction containing no Instructions. ` + (solution ?? `Ensure that the provided input has an effect on the operation. This typically happens when trying to update an account with the same data it already contains.`);
    super(message);
    _defineProperty(this, "name", "NoInstructionsToSendError");
  }
};
var FailedToSerializeDataError = class extends SdkError {
  constructor(dataDescription, cause) {
    const message = `The received data could not be serialized as a [${dataDescription}].`;
    super(message, cause);
    _defineProperty(this, "name", "FailedToSerializeDataError");
  }
};
var FailedToDeserializeDataError = class extends SdkError {
  constructor(dataDescription, cause) {
    const message = `The received serialized data could not be deserialized to a [${dataDescription}].`;
    super(message, cause);
    _defineProperty(this, "name", "FailedToDeserializeDataError");
  }
};
var MissingInputDataError = class extends SdkError {
  constructor(missingParameters, solution) {
    const message = `Some parameters are missing from the provided input object. Please provide the following missing parameters [${missingParameters.join(", ")}].` + (solution ? ` ${solution}` : "");
    super(message);
    _defineProperty(this, "name", "MissingInputDataError");
  }
};
var NotYetImplementedError = class extends SdkError {
  constructor() {
    const message = `This feature is not yet implemented. Please check back later.`;
    super(message);
    _defineProperty(this, "name", "NotYetImplementedError");
  }
};
var UnreachableCaseError = class extends SdkError {
  constructor(value) {
    const message = `A switch statement is not handling the provided case [${value}]. Check your inputs or raise an issue to have ensure all cases are handled properly.`;
    super(message);
    _defineProperty(this, "name", "UnreachableCaseError");
  }
};

// ../../node_modules/@metaplex-foundation/js/dist/esm/types/Signer.mjs
var isSigner = (input) => {
  return typeof input === "object" && "publicKey" in input && ("secretKey" in input || "signTransaction" in input);
};
var isKeypairSigner = (input) => {
  return isSigner(input) && "secretKey" in input && input.secretKey != null;
};
var isIdentitySigner = (input) => {
  return isSigner(input) && !isKeypairSigner(input);
};
var getSignerHistogram = (signers) => signers.reduce((signers2, signer) => {
  const duplicateIndex = signers2.all.findIndex(({
    publicKey: publicKey3
  }) => publicKey3.equals(signer.publicKey));
  const duplicate = signers2.all[duplicateIndex] ?? null;
  const duplicateIsIdentity = duplicate ? isIdentitySigner(duplicate) : false;
  const signerIsIdentity = isIdentitySigner(signer);
  if (!duplicate) {
    signers2.all.push(signer);
    if (signerIsIdentity) {
      signers2.identities.push(signer);
    } else {
      signers2.keypairs.push(signer);
    }
  } else if (duplicateIsIdentity && !signerIsIdentity) {
    const duplicateIdentitiesIndex = signers2.identities.findIndex(({
      publicKey: publicKey3
    }) => publicKey3.equals(signer.publicKey));
    signers2.all.splice(duplicateIndex, 1);
    signers2.identities.splice(duplicateIdentitiesIndex, 1);
    signers2.all.push(signer);
    signers2.keypairs.push(signer);
  }
  return signers2;
}, {
  all: [],
  keypairs: [],
  identities: []
});

// ../../node_modules/@metaplex-foundation/js/dist/esm/plugins/identityModule/IdentityClient.mjs
var IdentityClient = class {
  constructor() {
    _defineProperty(this, "_driver", null);
  }
  driver() {
    if (!this._driver) {
      throw new DriverNotProvidedError("IdentityDriver");
    }
    return this._driver;
  }
  setDriver(newDriver) {
    this._driver = newDriver;
  }
  get publicKey() {
    return this.driver().publicKey;
  }
  get secretKey() {
    return this.driver().secretKey;
  }
  signMessage(message) {
    return this.driver().signMessage(message);
  }
  signTransaction(transaction) {
    return this.driver().signTransaction(transaction);
  }
  signAllTransactions(transactions) {
    return this.driver().signAllTransactions(transactions);
  }
  verifyMessage(message, signature) {
    return sync.verify(message, signature, this.publicKey.toBytes());
  }
  equals(that) {
    if (isSigner(that)) {
      that = that.publicKey;
    }
    return this.publicKey.equals(that);
  }
  hasSecretKey() {
    return this.secretKey != null;
  }
};

// ../../node_modules/@metaplex-foundation/js/dist/esm/plugins/identityModule/plugin.mjs
var identityModule = () => ({
  install(metaplex) {
    const identityClient = new IdentityClient();
    metaplex.identity = () => identityClient;
  }
});

// ../../node_modules/node-fetch/lib/index.mjs
var import_stream = __toESM(require_stream(), 1);
var import_http = __toESM(require_http(), 1);
var import_url = __toESM(require_url(), 1);
var import_whatwg_url = __toESM(require_public_api(), 1);
var import_https = __toESM(require_https(), 1);
var import_zlib = __toESM(require_zlib(), 1);
var Readable = import_stream.default.Readable;
var BUFFER = Symbol("buffer");
var TYPE = Symbol("type");
var Blob = class _Blob {
  constructor() {
    this[TYPE] = "";
    const blobParts = arguments[0];
    const options = arguments[1];
    const buffers = [];
    let size = 0;
    if (blobParts) {
      const a = blobParts;
      const length = Number(a.length);
      for (let i = 0; i < length; i++) {
        const element = a[i];
        let buffer2;
        if (element instanceof Buffer) {
          buffer2 = element;
        } else if (ArrayBuffer.isView(element)) {
          buffer2 = Buffer.from(element.buffer, element.byteOffset, element.byteLength);
        } else if (element instanceof ArrayBuffer) {
          buffer2 = Buffer.from(element);
        } else if (element instanceof _Blob) {
          buffer2 = element[BUFFER];
        } else {
          buffer2 = Buffer.from(typeof element === "string" ? element : String(element));
        }
        size += buffer2.length;
        buffers.push(buffer2);
      }
    }
    this[BUFFER] = Buffer.concat(buffers);
    let type = options && options.type !== void 0 && String(options.type).toLowerCase();
    if (type && !/[^\u0020-\u007E]/.test(type)) {
      this[TYPE] = type;
    }
  }
  get size() {
    return this[BUFFER].length;
  }
  get type() {
    return this[TYPE];
  }
  text() {
    return Promise.resolve(this[BUFFER].toString());
  }
  arrayBuffer() {
    const buf = this[BUFFER];
    const ab = buf.buffer.slice(buf.byteOffset, buf.byteOffset + buf.byteLength);
    return Promise.resolve(ab);
  }
  stream() {
    const readable = new Readable();
    readable._read = function() {
    };
    readable.push(this[BUFFER]);
    readable.push(null);
    return readable;
  }
  toString() {
    return "[object Blob]";
  }
  slice() {
    const size = this.size;
    const start = arguments[0];
    const end = arguments[1];
    let relativeStart, relativeEnd;
    if (start === void 0) {
      relativeStart = 0;
    } else if (start < 0) {
      relativeStart = Math.max(size + start, 0);
    } else {
      relativeStart = Math.min(start, size);
    }
    if (end === void 0) {
      relativeEnd = size;
    } else if (end < 0) {
      relativeEnd = Math.max(size + end, 0);
    } else {
      relativeEnd = Math.min(end, size);
    }
    const span = Math.max(relativeEnd - relativeStart, 0);
    const buffer2 = this[BUFFER];
    const slicedBuffer = buffer2.slice(relativeStart, relativeStart + span);
    const blob6 = new _Blob([], { type: arguments[2] });
    blob6[BUFFER] = slicedBuffer;
    return blob6;
  }
};
Object.defineProperties(Blob.prototype, {
  size: { enumerable: true },
  type: { enumerable: true },
  slice: { enumerable: true }
});
Object.defineProperty(Blob.prototype, Symbol.toStringTag, {
  value: "Blob",
  writable: false,
  enumerable: false,
  configurable: true
});
function FetchError(message, type, systemError) {
  Error.call(this, message);
  this.message = message;
  this.type = type;
  if (systemError) {
    this.code = this.errno = systemError.code;
  }
  Error.captureStackTrace(this, this.constructor);
}
FetchError.prototype = Object.create(Error.prototype);
FetchError.prototype.constructor = FetchError;
FetchError.prototype.name = "FetchError";
var convert;
try {
  convert = require_encoding().convert;
} catch (e2) {
}
var INTERNALS = Symbol("Body internals");
var PassThrough = import_stream.default.PassThrough;
function Body(body) {
  var _this = this;
  var _ref = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : {}, _ref$size = _ref.size;
  let size = _ref$size === void 0 ? 0 : _ref$size;
  var _ref$timeout = _ref.timeout;
  let timeout = _ref$timeout === void 0 ? 0 : _ref$timeout;
  if (body == null) {
    body = null;
  } else if (isURLSearchParams(body)) {
    body = Buffer.from(body.toString());
  } else if (isBlob(body))
    ;
  else if (Buffer.isBuffer(body))
    ;
  else if (Object.prototype.toString.call(body) === "[object ArrayBuffer]") {
    body = Buffer.from(body);
  } else if (ArrayBuffer.isView(body)) {
    body = Buffer.from(body.buffer, body.byteOffset, body.byteLength);
  } else if (body instanceof import_stream.default)
    ;
  else {
    body = Buffer.from(String(body));
  }
  this[INTERNALS] = {
    body,
    disturbed: false,
    error: null
  };
  this.size = size;
  this.timeout = timeout;
  if (body instanceof import_stream.default) {
    body.on("error", function(err) {
      const error2 = err.name === "AbortError" ? err : new FetchError(`Invalid response body while trying to fetch ${_this.url}: ${err.message}`, "system", err);
      _this[INTERNALS].error = error2;
    });
  }
}
Body.prototype = {
  get body() {
    return this[INTERNALS].body;
  },
  get bodyUsed() {
    return this[INTERNALS].disturbed;
  },
  /**
   * Decode response as ArrayBuffer
   *
   * @return  Promise
   */
  arrayBuffer() {
    return consumeBody.call(this).then(function(buf) {
      return buf.buffer.slice(buf.byteOffset, buf.byteOffset + buf.byteLength);
    });
  },
  /**
   * Return raw response as Blob
   *
   * @return Promise
   */
  blob() {
    let ct = this.headers && this.headers.get("content-type") || "";
    return consumeBody.call(this).then(function(buf) {
      return Object.assign(
        // Prevent copying
        new Blob([], {
          type: ct.toLowerCase()
        }),
        {
          [BUFFER]: buf
        }
      );
    });
  },
  /**
   * Decode response as json
   *
   * @return  Promise
   */
  json() {
    var _this2 = this;
    return consumeBody.call(this).then(function(buffer2) {
      try {
        return JSON.parse(buffer2.toString());
      } catch (err) {
        return Body.Promise.reject(new FetchError(`invalid json response body at ${_this2.url} reason: ${err.message}`, "invalid-json"));
      }
    });
  },
  /**
   * Decode response as text
   *
   * @return  Promise
   */
  text() {
    return consumeBody.call(this).then(function(buffer2) {
      return buffer2.toString();
    });
  },
  /**
   * Decode response as buffer (non-spec api)
   *
   * @return  Promise
   */
  buffer() {
    return consumeBody.call(this);
  },
  /**
   * Decode response as text, while automatically detecting the encoding and
   * trying to decode to UTF-8 (non-spec api)
   *
   * @return  Promise
   */
  textConverted() {
    var _this3 = this;
    return consumeBody.call(this).then(function(buffer2) {
      return convertBody(buffer2, _this3.headers);
    });
  }
};
Object.defineProperties(Body.prototype, {
  body: { enumerable: true },
  bodyUsed: { enumerable: true },
  arrayBuffer: { enumerable: true },
  blob: { enumerable: true },
  json: { enumerable: true },
  text: { enumerable: true }
});
Body.mixIn = function(proto) {
  for (const name of Object.getOwnPropertyNames(Body.prototype)) {
    if (!(name in proto)) {
      const desc = Object.getOwnPropertyDescriptor(Body.prototype, name);
      Object.defineProperty(proto, name, desc);
    }
  }
};
function consumeBody() {
  var _this4 = this;
  if (this[INTERNALS].disturbed) {
    return Body.Promise.reject(new TypeError(`body used already for: ${this.url}`));
  }
  this[INTERNALS].disturbed = true;
  if (this[INTERNALS].error) {
    return Body.Promise.reject(this[INTERNALS].error);
  }
  let body = this.body;
  if (body === null) {
    return Body.Promise.resolve(Buffer.alloc(0));
  }
  if (isBlob(body)) {
    body = body.stream();
  }
  if (Buffer.isBuffer(body)) {
    return Body.Promise.resolve(body);
  }
  if (!(body instanceof import_stream.default)) {
    return Body.Promise.resolve(Buffer.alloc(0));
  }
  let accum = [];
  let accumBytes = 0;
  let abort = false;
  return new Body.Promise(function(resolve, reject) {
    let resTimeout;
    if (_this4.timeout) {
      resTimeout = setTimeout(function() {
        abort = true;
        reject(new FetchError(`Response timeout while trying to fetch ${_this4.url} (over ${_this4.timeout}ms)`, "body-timeout"));
      }, _this4.timeout);
    }
    body.on("error", function(err) {
      if (err.name === "AbortError") {
        abort = true;
        reject(err);
      } else {
        reject(new FetchError(`Invalid response body while trying to fetch ${_this4.url}: ${err.message}`, "system", err));
      }
    });
    body.on("data", function(chunk2) {
      if (abort || chunk2 === null) {
        return;
      }
      if (_this4.size && accumBytes + chunk2.length > _this4.size) {
        abort = true;
        reject(new FetchError(`content size at ${_this4.url} over limit: ${_this4.size}`, "max-size"));
        return;
      }
      accumBytes += chunk2.length;
      accum.push(chunk2);
    });
    body.on("end", function() {
      if (abort) {
        return;
      }
      clearTimeout(resTimeout);
      try {
        resolve(Buffer.concat(accum, accumBytes));
      } catch (err) {
        reject(new FetchError(`Could not create Buffer from response body for ${_this4.url}: ${err.message}`, "system", err));
      }
    });
  });
}
function convertBody(buffer2, headers) {
  if (typeof convert !== "function") {
    throw new Error("The package `encoding` must be installed to use the textConverted() function");
  }
  const ct = headers.get("content-type");
  let charset = "utf-8";
  let res, str;
  if (ct) {
    res = /charset=([^;]*)/i.exec(ct);
  }
  str = buffer2.slice(0, 1024).toString();
  if (!res && str) {
    res = /<meta.+?charset=(['"])(.+?)\1/i.exec(str);
  }
  if (!res && str) {
    res = /<meta[\s]+?http-equiv=(['"])content-type\1[\s]+?content=(['"])(.+?)\2/i.exec(str);
    if (!res) {
      res = /<meta[\s]+?content=(['"])(.+?)\1[\s]+?http-equiv=(['"])content-type\3/i.exec(str);
      if (res) {
        res.pop();
      }
    }
    if (res) {
      res = /charset=(.*)/i.exec(res.pop());
    }
  }
  if (!res && str) {
    res = /<\?xml.+?encoding=(['"])(.+?)\1/i.exec(str);
  }
  if (res) {
    charset = res.pop();
    if (charset === "gb2312" || charset === "gbk") {
      charset = "gb18030";
    }
  }
  return convert(buffer2, "UTF-8", charset).toString();
}
function isURLSearchParams(obj) {
  if (typeof obj !== "object" || typeof obj.append !== "function" || typeof obj.delete !== "function" || typeof obj.get !== "function" || typeof obj.getAll !== "function" || typeof obj.has !== "function" || typeof obj.set !== "function") {
    return false;
  }
  return obj.constructor.name === "URLSearchParams" || Object.prototype.toString.call(obj) === "[object URLSearchParams]" || typeof obj.sort === "function";
}
function isBlob(obj) {
  return typeof obj === "object" && typeof obj.arrayBuffer === "function" && typeof obj.type === "string" && typeof obj.stream === "function" && typeof obj.constructor === "function" && typeof obj.constructor.name === "string" && /^(Blob|File)$/.test(obj.constructor.name) && /^(Blob|File)$/.test(obj[Symbol.toStringTag]);
}
function clone(instance) {
  let p1, p2;
  let body = instance.body;
  if (instance.bodyUsed) {
    throw new Error("cannot clone body after it is used");
  }
  if (body instanceof import_stream.default && typeof body.getBoundary !== "function") {
    p1 = new PassThrough();
    p2 = new PassThrough();
    body.pipe(p1);
    body.pipe(p2);
    instance[INTERNALS].body = p1;
    body = p2;
  }
  return body;
}
function extractContentType(body) {
  if (body === null) {
    return null;
  } else if (typeof body === "string") {
    return "text/plain;charset=UTF-8";
  } else if (isURLSearchParams(body)) {
    return "application/x-www-form-urlencoded;charset=UTF-8";
  } else if (isBlob(body)) {
    return body.type || null;
  } else if (Buffer.isBuffer(body)) {
    return null;
  } else if (Object.prototype.toString.call(body) === "[object ArrayBuffer]") {
    return null;
  } else if (ArrayBuffer.isView(body)) {
    return null;
  } else if (typeof body.getBoundary === "function") {
    return `multipart/form-data;boundary=${body.getBoundary()}`;
  } else if (body instanceof import_stream.default) {
    return null;
  } else {
    return "text/plain;charset=UTF-8";
  }
}
function getTotalBytes(instance) {
  const body = instance.body;
  if (body === null) {
    return 0;
  } else if (isBlob(body)) {
    return body.size;
  } else if (Buffer.isBuffer(body)) {
    return body.length;
  } else if (body && typeof body.getLengthSync === "function") {
    if (body._lengthRetrievers && body._lengthRetrievers.length == 0 || // 1.x
    body.hasKnownLength && body.hasKnownLength()) {
      return body.getLengthSync();
    }
    return null;
  } else {
    return null;
  }
}
function writeToStream(dest, instance) {
  const body = instance.body;
  if (body === null) {
    dest.end();
  } else if (isBlob(body)) {
    body.stream().pipe(dest);
  } else if (Buffer.isBuffer(body)) {
    dest.write(body);
    dest.end();
  } else {
    body.pipe(dest);
  }
}
Body.Promise = global.Promise;
var invalidTokenRegex = /[^\^_`a-zA-Z\-0-9!#$%&'*+.|~]/;
var invalidHeaderCharRegex = /[^\t\x20-\x7e\x80-\xff]/;
function validateName(name) {
  name = `${name}`;
  if (invalidTokenRegex.test(name) || name === "") {
    throw new TypeError(`${name} is not a legal HTTP header name`);
  }
}
function validateValue(value) {
  value = `${value}`;
  if (invalidHeaderCharRegex.test(value)) {
    throw new TypeError(`${value} is not a legal HTTP header value`);
  }
}
function find(map2, name) {
  name = name.toLowerCase();
  for (const key in map2) {
    if (key.toLowerCase() === name) {
      return key;
    }
  }
  return void 0;
}
var MAP = Symbol("map");
var Headers = class _Headers {
  /**
   * Headers class
   *
   * @param   Object  headers  Response headers
   * @return  Void
   */
  constructor() {
    let init = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : void 0;
    this[MAP] = /* @__PURE__ */ Object.create(null);
    if (init instanceof _Headers) {
      const rawHeaders = init.raw();
      const headerNames = Object.keys(rawHeaders);
      for (const headerName of headerNames) {
        for (const value of rawHeaders[headerName]) {
          this.append(headerName, value);
        }
      }
      return;
    }
    if (init == null)
      ;
    else if (typeof init === "object") {
      const method = init[Symbol.iterator];
      if (method != null) {
        if (typeof method !== "function") {
          throw new TypeError("Header pairs must be iterable");
        }
        const pairs = [];
        for (const pair of init) {
          if (typeof pair !== "object" || typeof pair[Symbol.iterator] !== "function") {
            throw new TypeError("Each header pair must be iterable");
          }
          pairs.push(Array.from(pair));
        }
        for (const pair of pairs) {
          if (pair.length !== 2) {
            throw new TypeError("Each header pair must be a name/value tuple");
          }
          this.append(pair[0], pair[1]);
        }
      } else {
        for (const key of Object.keys(init)) {
          const value = init[key];
          this.append(key, value);
        }
      }
    } else {
      throw new TypeError("Provided initializer must be an object");
    }
  }
  /**
   * Return combined header value given name
   *
   * @param   String  name  Header name
   * @return  Mixed
   */
  get(name) {
    name = `${name}`;
    validateName(name);
    const key = find(this[MAP], name);
    if (key === void 0) {
      return null;
    }
    return this[MAP][key].join(", ");
  }
  /**
   * Iterate over all headers
   *
   * @param   Function  callback  Executed for each item with parameters (value, name, thisArg)
   * @param   Boolean   thisArg   `this` context for callback function
   * @return  Void
   */
  forEach(callback) {
    let thisArg = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : void 0;
    let pairs = getHeaders(this);
    let i = 0;
    while (i < pairs.length) {
      var _pairs$i = pairs[i];
      const name = _pairs$i[0], value = _pairs$i[1];
      callback.call(thisArg, value, name, this);
      pairs = getHeaders(this);
      i++;
    }
  }
  /**
   * Overwrite header values given name
   *
   * @param   String  name   Header name
   * @param   String  value  Header value
   * @return  Void
   */
  set(name, value) {
    name = `${name}`;
    value = `${value}`;
    validateName(name);
    validateValue(value);
    const key = find(this[MAP], name);
    this[MAP][key !== void 0 ? key : name] = [value];
  }
  /**
   * Append a value onto existing header
   *
   * @param   String  name   Header name
   * @param   String  value  Header value
   * @return  Void
   */
  append(name, value) {
    name = `${name}`;
    value = `${value}`;
    validateName(name);
    validateValue(value);
    const key = find(this[MAP], name);
    if (key !== void 0) {
      this[MAP][key].push(value);
    } else {
      this[MAP][name] = [value];
    }
  }
  /**
   * Check for header name existence
   *
   * @param   String   name  Header name
   * @return  Boolean
   */
  has(name) {
    name = `${name}`;
    validateName(name);
    return find(this[MAP], name) !== void 0;
  }
  /**
   * Delete all header values given name
   *
   * @param   String  name  Header name
   * @return  Void
   */
  delete(name) {
    name = `${name}`;
    validateName(name);
    const key = find(this[MAP], name);
    if (key !== void 0) {
      delete this[MAP][key];
    }
  }
  /**
   * Return raw headers (non-spec api)
   *
   * @return  Object
   */
  raw() {
    return this[MAP];
  }
  /**
   * Get an iterator on keys.
   *
   * @return  Iterator
   */
  keys() {
    return createHeadersIterator(this, "key");
  }
  /**
   * Get an iterator on values.
   *
   * @return  Iterator
   */
  values() {
    return createHeadersIterator(this, "value");
  }
  /**
   * Get an iterator on entries.
   *
   * This is the default iterator of the Headers object.
   *
   * @return  Iterator
   */
  [Symbol.iterator]() {
    return createHeadersIterator(this, "key+value");
  }
};
Headers.prototype.entries = Headers.prototype[Symbol.iterator];
Object.defineProperty(Headers.prototype, Symbol.toStringTag, {
  value: "Headers",
  writable: false,
  enumerable: false,
  configurable: true
});
Object.defineProperties(Headers.prototype, {
  get: { enumerable: true },
  forEach: { enumerable: true },
  set: { enumerable: true },
  append: { enumerable: true },
  has: { enumerable: true },
  delete: { enumerable: true },
  keys: { enumerable: true },
  values: { enumerable: true },
  entries: { enumerable: true }
});
function getHeaders(headers) {
  let kind = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : "key+value";
  const keys = Object.keys(headers[MAP]).sort();
  return keys.map(kind === "key" ? function(k) {
    return k.toLowerCase();
  } : kind === "value" ? function(k) {
    return headers[MAP][k].join(", ");
  } : function(k) {
    return [k.toLowerCase(), headers[MAP][k].join(", ")];
  });
}
var INTERNAL = Symbol("internal");
function createHeadersIterator(target, kind) {
  const iterator = Object.create(HeadersIteratorPrototype);
  iterator[INTERNAL] = {
    target,
    kind,
    index: 0
  };
  return iterator;
}
var HeadersIteratorPrototype = Object.setPrototypeOf({
  next() {
    if (!this || Object.getPrototypeOf(this) !== HeadersIteratorPrototype) {
      throw new TypeError("Value of `this` is not a HeadersIterator");
    }
    var _INTERNAL = this[INTERNAL];
    const target = _INTERNAL.target, kind = _INTERNAL.kind, index = _INTERNAL.index;
    const values = getHeaders(target, kind);
    const len = values.length;
    if (index >= len) {
      return {
        value: void 0,
        done: true
      };
    }
    this[INTERNAL].index = index + 1;
    return {
      value: values[index],
      done: false
    };
  }
}, Object.getPrototypeOf(Object.getPrototypeOf([][Symbol.iterator]())));
Object.defineProperty(HeadersIteratorPrototype, Symbol.toStringTag, {
  value: "HeadersIterator",
  writable: false,
  enumerable: false,
  configurable: true
});
function exportNodeCompatibleHeaders(headers) {
  const obj = Object.assign({ __proto__: null }, headers[MAP]);
  const hostHeaderKey = find(headers[MAP], "Host");
  if (hostHeaderKey !== void 0) {
    obj[hostHeaderKey] = obj[hostHeaderKey][0];
  }
  return obj;
}
function createHeadersLenient(obj) {
  const headers = new Headers();
  for (const name of Object.keys(obj)) {
    if (invalidTokenRegex.test(name)) {
      continue;
    }
    if (Array.isArray(obj[name])) {
      for (const val of obj[name]) {
        if (invalidHeaderCharRegex.test(val)) {
          continue;
        }
        if (headers[MAP][name] === void 0) {
          headers[MAP][name] = [val];
        } else {
          headers[MAP][name].push(val);
        }
      }
    } else if (!invalidHeaderCharRegex.test(obj[name])) {
      headers[MAP][name] = [obj[name]];
    }
  }
  return headers;
}
var INTERNALS$1 = Symbol("Response internals");
var STATUS_CODES = import_http.default.STATUS_CODES;
var Response = class _Response {
  constructor() {
    let body = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : null;
    let opts = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : {};
    Body.call(this, body, opts);
    const status = opts.status || 200;
    const headers = new Headers(opts.headers);
    if (body != null && !headers.has("Content-Type")) {
      const contentType = extractContentType(body);
      if (contentType) {
        headers.append("Content-Type", contentType);
      }
    }
    this[INTERNALS$1] = {
      url: opts.url,
      status,
      statusText: opts.statusText || STATUS_CODES[status],
      headers,
      counter: opts.counter
    };
  }
  get url() {
    return this[INTERNALS$1].url || "";
  }
  get status() {
    return this[INTERNALS$1].status;
  }
  /**
   * Convenience property representing if the request ended normally
   */
  get ok() {
    return this[INTERNALS$1].status >= 200 && this[INTERNALS$1].status < 300;
  }
  get redirected() {
    return this[INTERNALS$1].counter > 0;
  }
  get statusText() {
    return this[INTERNALS$1].statusText;
  }
  get headers() {
    return this[INTERNALS$1].headers;
  }
  /**
   * Clone this response
   *
   * @return  Response
   */
  clone() {
    return new _Response(clone(this), {
      url: this.url,
      status: this.status,
      statusText: this.statusText,
      headers: this.headers,
      ok: this.ok,
      redirected: this.redirected
    });
  }
};
Body.mixIn(Response.prototype);
Object.defineProperties(Response.prototype, {
  url: { enumerable: true },
  status: { enumerable: true },
  ok: { enumerable: true },
  redirected: { enumerable: true },
  statusText: { enumerable: true },
  headers: { enumerable: true },
  clone: { enumerable: true }
});
Object.defineProperty(Response.prototype, Symbol.toStringTag, {
  value: "Response",
  writable: false,
  enumerable: false,
  configurable: true
});
var INTERNALS$2 = Symbol("Request internals");
var URL2 = import_url.default.URL || import_whatwg_url.default.URL;
var parse_url = import_url.default.parse;
var format_url = import_url.default.format;
function parseURL(urlStr) {
  if (/^[a-zA-Z][a-zA-Z\d+\-.]*:/.exec(urlStr)) {
    urlStr = new URL2(urlStr).toString();
  }
  return parse_url(urlStr);
}
var streamDestructionSupported = "destroy" in import_stream.default.Readable.prototype;
function isRequest(input) {
  return typeof input === "object" && typeof input[INTERNALS$2] === "object";
}
function isAbortSignal(signal) {
  const proto = signal && typeof signal === "object" && Object.getPrototypeOf(signal);
  return !!(proto && proto.constructor.name === "AbortSignal");
}
var Request = class _Request {
  constructor(input) {
    let init = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : {};
    let parsedURL;
    if (!isRequest(input)) {
      if (input && input.href) {
        parsedURL = parseURL(input.href);
      } else {
        parsedURL = parseURL(`${input}`);
      }
      input = {};
    } else {
      parsedURL = parseURL(input.url);
    }
    let method = init.method || input.method || "GET";
    method = method.toUpperCase();
    if ((init.body != null || isRequest(input) && input.body !== null) && (method === "GET" || method === "HEAD")) {
      throw new TypeError("Request with GET/HEAD method cannot have body");
    }
    let inputBody = init.body != null ? init.body : isRequest(input) && input.body !== null ? clone(input) : null;
    Body.call(this, inputBody, {
      timeout: init.timeout || input.timeout || 0,
      size: init.size || input.size || 0
    });
    const headers = new Headers(init.headers || input.headers || {});
    if (inputBody != null && !headers.has("Content-Type")) {
      const contentType = extractContentType(inputBody);
      if (contentType) {
        headers.append("Content-Type", contentType);
      }
    }
    let signal = isRequest(input) ? input.signal : null;
    if ("signal" in init)
      signal = init.signal;
    if (signal != null && !isAbortSignal(signal)) {
      throw new TypeError("Expected signal to be an instanceof AbortSignal");
    }
    this[INTERNALS$2] = {
      method,
      redirect: init.redirect || input.redirect || "follow",
      headers,
      parsedURL,
      signal
    };
    this.follow = init.follow !== void 0 ? init.follow : input.follow !== void 0 ? input.follow : 20;
    this.compress = init.compress !== void 0 ? init.compress : input.compress !== void 0 ? input.compress : true;
    this.counter = init.counter || input.counter || 0;
    this.agent = init.agent || input.agent;
  }
  get method() {
    return this[INTERNALS$2].method;
  }
  get url() {
    return format_url(this[INTERNALS$2].parsedURL);
  }
  get headers() {
    return this[INTERNALS$2].headers;
  }
  get redirect() {
    return this[INTERNALS$2].redirect;
  }
  get signal() {
    return this[INTERNALS$2].signal;
  }
  /**
   * Clone this request
   *
   * @return  Request
   */
  clone() {
    return new _Request(this);
  }
};
Body.mixIn(Request.prototype);
Object.defineProperty(Request.prototype, Symbol.toStringTag, {
  value: "Request",
  writable: false,
  enumerable: false,
  configurable: true
});
Object.defineProperties(Request.prototype, {
  method: { enumerable: true },
  url: { enumerable: true },
  headers: { enumerable: true },
  redirect: { enumerable: true },
  clone: { enumerable: true },
  signal: { enumerable: true }
});
function getNodeRequestOptions(request) {
  const parsedURL = request[INTERNALS$2].parsedURL;
  const headers = new Headers(request[INTERNALS$2].headers);
  if (!headers.has("Accept")) {
    headers.set("Accept", "*/*");
  }
  if (!parsedURL.protocol || !parsedURL.hostname) {
    throw new TypeError("Only absolute URLs are supported");
  }
  if (!/^https?:$/.test(parsedURL.protocol)) {
    throw new TypeError("Only HTTP(S) protocols are supported");
  }
  if (request.signal && request.body instanceof import_stream.default.Readable && !streamDestructionSupported) {
    throw new Error("Cancellation of streamed requests with AbortSignal is not supported in node < 8");
  }
  let contentLengthValue = null;
  if (request.body == null && /^(POST|PUT)$/i.test(request.method)) {
    contentLengthValue = "0";
  }
  if (request.body != null) {
    const totalBytes = getTotalBytes(request);
    if (typeof totalBytes === "number") {
      contentLengthValue = String(totalBytes);
    }
  }
  if (contentLengthValue) {
    headers.set("Content-Length", contentLengthValue);
  }
  if (!headers.has("User-Agent")) {
    headers.set("User-Agent", "node-fetch/1.0 (+https://github.com/bitinn/node-fetch)");
  }
  if (request.compress && !headers.has("Accept-Encoding")) {
    headers.set("Accept-Encoding", "gzip,deflate");
  }
  let agent = request.agent;
  if (typeof agent === "function") {
    agent = agent(parsedURL);
  }
  return Object.assign({}, parsedURL, {
    method: request.method,
    headers: exportNodeCompatibleHeaders(headers),
    agent
  });
}
function AbortError(message) {
  Error.call(this, message);
  this.type = "aborted";
  this.message = message;
  Error.captureStackTrace(this, this.constructor);
}
AbortError.prototype = Object.create(Error.prototype);
AbortError.prototype.constructor = AbortError;
AbortError.prototype.name = "AbortError";
var URL$1 = import_url.default.URL || import_whatwg_url.default.URL;
var PassThrough$1 = import_stream.default.PassThrough;
var isDomainOrSubdomain = function isDomainOrSubdomain2(destination, original) {
  const orig = new URL$1(original).hostname;
  const dest = new URL$1(destination).hostname;
  return orig === dest || orig[orig.length - dest.length - 1] === "." && orig.endsWith(dest);
};
var isSameProtocol = function isSameProtocol2(destination, original) {
  const orig = new URL$1(original).protocol;
  const dest = new URL$1(destination).protocol;
  return orig === dest;
};
function fetch2(url, opts) {
  if (!fetch2.Promise) {
    throw new Error("native promise missing, set fetch.Promise to your favorite alternative");
  }
  Body.Promise = fetch2.Promise;
  return new fetch2.Promise(function(resolve, reject) {
    const request = new Request(url, opts);
    const options = getNodeRequestOptions(request);
    const send = (options.protocol === "https:" ? import_https.default : import_http.default).request;
    const signal = request.signal;
    let response = null;
    const abort = function abort2() {
      let error2 = new AbortError("The user aborted a request.");
      reject(error2);
      if (request.body && request.body instanceof import_stream.default.Readable) {
        destroyStream(request.body, error2);
      }
      if (!response || !response.body)
        return;
      response.body.emit("error", error2);
    };
    if (signal && signal.aborted) {
      abort();
      return;
    }
    const abortAndFinalize = function abortAndFinalize2() {
      abort();
      finalize();
    };
    const req = send(options);
    let reqTimeout;
    if (signal) {
      signal.addEventListener("abort", abortAndFinalize);
    }
    function finalize() {
      req.abort();
      if (signal)
        signal.removeEventListener("abort", abortAndFinalize);
      clearTimeout(reqTimeout);
    }
    if (request.timeout) {
      req.once("socket", function(socket) {
        reqTimeout = setTimeout(function() {
          reject(new FetchError(`network timeout at: ${request.url}`, "request-timeout"));
          finalize();
        }, request.timeout);
      });
    }
    req.on("error", function(err) {
      reject(new FetchError(`request to ${request.url} failed, reason: ${err.message}`, "system", err));
      if (response && response.body) {
        destroyStream(response.body, err);
      }
      finalize();
    });
    fixResponseChunkedTransferBadEnding(req, function(err) {
      if (signal && signal.aborted) {
        return;
      }
      if (response && response.body) {
        destroyStream(response.body, err);
      }
    });
    if (parseInt(process.version.substring(1)) < 14) {
      req.on("socket", function(s) {
        s.addListener("close", function(hadError) {
          const hasDataListener = s.listenerCount("data") > 0;
          if (response && hasDataListener && !hadError && !(signal && signal.aborted)) {
            const err = new Error("Premature close");
            err.code = "ERR_STREAM_PREMATURE_CLOSE";
            response.body.emit("error", err);
          }
        });
      });
    }
    req.on("response", function(res) {
      clearTimeout(reqTimeout);
      const headers = createHeadersLenient(res.headers);
      if (fetch2.isRedirect(res.statusCode)) {
        const location = headers.get("Location");
        let locationURL = null;
        try {
          locationURL = location === null ? null : new URL$1(location, request.url).toString();
        } catch (err) {
          if (request.redirect !== "manual") {
            reject(new FetchError(`uri requested responds with an invalid redirect URL: ${location}`, "invalid-redirect"));
            finalize();
            return;
          }
        }
        switch (request.redirect) {
          case "error":
            reject(new FetchError(`uri requested responds with a redirect, redirect mode is set to error: ${request.url}`, "no-redirect"));
            finalize();
            return;
          case "manual":
            if (locationURL !== null) {
              try {
                headers.set("Location", locationURL);
              } catch (err) {
                reject(err);
              }
            }
            break;
          case "follow":
            if (locationURL === null) {
              break;
            }
            if (request.counter >= request.follow) {
              reject(new FetchError(`maximum redirect reached at: ${request.url}`, "max-redirect"));
              finalize();
              return;
            }
            const requestOpts = {
              headers: new Headers(request.headers),
              follow: request.follow,
              counter: request.counter + 1,
              agent: request.agent,
              compress: request.compress,
              method: request.method,
              body: request.body,
              signal: request.signal,
              timeout: request.timeout,
              size: request.size
            };
            if (!isDomainOrSubdomain(request.url, locationURL) || !isSameProtocol(request.url, locationURL)) {
              for (const name of ["authorization", "www-authenticate", "cookie", "cookie2"]) {
                requestOpts.headers.delete(name);
              }
            }
            if (res.statusCode !== 303 && request.body && getTotalBytes(request) === null) {
              reject(new FetchError("Cannot follow redirect with body being a readable stream", "unsupported-redirect"));
              finalize();
              return;
            }
            if (res.statusCode === 303 || (res.statusCode === 301 || res.statusCode === 302) && request.method === "POST") {
              requestOpts.method = "GET";
              requestOpts.body = void 0;
              requestOpts.headers.delete("content-length");
            }
            resolve(fetch2(new Request(locationURL, requestOpts)));
            finalize();
            return;
        }
      }
      res.once("end", function() {
        if (signal)
          signal.removeEventListener("abort", abortAndFinalize);
      });
      let body = res.pipe(new PassThrough$1());
      const response_options = {
        url: request.url,
        status: res.statusCode,
        statusText: res.statusMessage,
        headers,
        size: request.size,
        timeout: request.timeout,
        counter: request.counter
      };
      const codings = headers.get("Content-Encoding");
      if (!request.compress || request.method === "HEAD" || codings === null || res.statusCode === 204 || res.statusCode === 304) {
        response = new Response(body, response_options);
        resolve(response);
        return;
      }
      const zlibOptions = {
        flush: import_zlib.default.Z_SYNC_FLUSH,
        finishFlush: import_zlib.default.Z_SYNC_FLUSH
      };
      if (codings == "gzip" || codings == "x-gzip") {
        body = body.pipe(import_zlib.default.createGunzip(zlibOptions));
        response = new Response(body, response_options);
        resolve(response);
        return;
      }
      if (codings == "deflate" || codings == "x-deflate") {
        const raw = res.pipe(new PassThrough$1());
        raw.once("data", function(chunk2) {
          if ((chunk2[0] & 15) === 8) {
            body = body.pipe(import_zlib.default.createInflate());
          } else {
            body = body.pipe(import_zlib.default.createInflateRaw());
          }
          response = new Response(body, response_options);
          resolve(response);
        });
        raw.on("end", function() {
          if (!response) {
            response = new Response(body, response_options);
            resolve(response);
          }
        });
        return;
      }
      if (codings == "br" && typeof import_zlib.default.createBrotliDecompress === "function") {
        body = body.pipe(import_zlib.default.createBrotliDecompress());
        response = new Response(body, response_options);
        resolve(response);
        return;
      }
      response = new Response(body, response_options);
      resolve(response);
    });
    writeToStream(req, request);
  });
}
function fixResponseChunkedTransferBadEnding(request, errorCallback) {
  let socket;
  request.on("socket", function(s) {
    socket = s;
  });
  request.on("response", function(response) {
    const headers = response.headers;
    if (headers["transfer-encoding"] === "chunked" && !headers["content-length"]) {
      response.once("close", function(hadError) {
        const hasDataListener = socket && socket.listenerCount("data") > 0;
        if (hasDataListener && !hadError) {
          const err = new Error("Premature close");
          err.code = "ERR_STREAM_PREMATURE_CLOSE";
          errorCallback(err);
        }
      });
    }
  });
}
function destroyStream(stream, err) {
  if (stream.destroy) {
    stream.destroy(err);
  } else {
    stream.emit("error", err);
    stream.end();
  }
}
fetch2.isRedirect = function(code2) {
  return code2 === 301 || code2 === 302 || code2 === 303 || code2 === 307 || code2 === 308;
};
fetch2.Promise = global.Promise;
var lib_default = fetch2;

// ../../node_modules/@metaplex-foundation/js/dist/esm/plugins/storageModule/MetaplexFile.mjs
var import_buffer = __toESM(require_buffer2(), 1);

// ../../node_modules/@metaplex-foundation/js/dist/esm/utils/common.mjs
var import_mime = __toESM(require_mime(), 1);
var removeEmptyChars = (value) => value.replace(/\u0000/g, "");
var padEmptyChars = (value, chars) => value.padEnd(chars, "\0");
var tryOr = (callback, defaultValue) => {
  try {
    return callback();
  } catch (error2) {
    return defaultValue;
  }
};
var tryOrNull = (cb) => tryOr(cb, null);
var chunk = (array, chunkSize) => array.reduce((accumulator, item, index) => {
  const chunkIndex = Math.floor(index / chunkSize);
  if (!accumulator[chunkIndex]) {
    accumulator[chunkIndex] = [];
  }
  accumulator[chunkIndex].push(item);
  return accumulator;
}, []);
var zipMap = (left, right, fn) => left.map((t, index) => fn(t, right?.[index] ?? null, index));
var randomStr = (length = 20, alphabet = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789") => {
  let result = "";
  const alphabetLength = alphabet.length;
  for (var i = 0; i < length; i++) {
    result += alphabet.charAt(Math.floor(Math.random() * alphabetLength));
  }
  return result;
};
var getContentType = (fileName) => import_mime.default.getType(fileName);
var getExtension = (fileName) => {
  const lastDotIndex = fileName.lastIndexOf(".");
  return lastDotIndex < 0 ? null : fileName.slice(lastDotIndex + 1);
};
var walk = (parent, cb, options) => {
  const recursiveWalk = (child) => walk(child, cb, options);
  if (parent && Array.isArray(parent)) {
    parent.forEach((child, index) => {
      cb(recursiveWalk, child, index, parent);
    });
  } else if (parent && typeof parent === "object") {
    const keys = Object.keys(parent);
    if (options?.sortObjectKeys ?? true) {
      keys.sort();
    }
    keys.forEach((key) => {
      const child = parent[key];
      cb(recursiveWalk, child, key, parent);
    });
  }
};
var removeUndefinedAttributes = (object) => Object.keys(object).reduce((acc, key) => {
  if (object[key] !== void 0) {
    acc[key] = object[key];
  }
  return acc;
}, {});

// ../../node_modules/@metaplex-foundation/js/dist/esm/plugins/storageModule/MetaplexFile.mjs
var toMetaplexFile = (content, fileName, options = {}) => ({
  buffer: parseMetaplexFileContent(content),
  fileName,
  displayName: options.displayName ?? fileName,
  uniqueName: options.uniqueName ?? randomStr(),
  contentType: options.contentType ?? getContentType(fileName),
  extension: options.extension ?? getExtension(fileName),
  tags: options.tags ?? []
});
var toMetaplexFileFromBrowser = (_0, ..._1) => __async(void 0, [_0, ..._1], function* (file, options = {}) {
  const buffer2 = yield file.arrayBuffer();
  return toMetaplexFile(buffer2, file.name, options);
});
var toMetaplexFileFromJson = (json, fileName = "inline.json", options = {}) => {
  let jsonString;
  try {
    jsonString = JSON.stringify(json);
  } catch (error2) {
    throw new InvalidJsonVariableError(error2);
  }
  return toMetaplexFile(jsonString, fileName, options);
};
var parseMetaplexFileContent = (content) => {
  if (content instanceof ArrayBuffer) {
    return import_buffer.Buffer.from(new Uint8Array(content));
  }
  return import_buffer.Buffer.from(content);
};
var getBytesFromMetaplexFiles = (...files) => files.reduce((acc, file) => acc + file.buffer.byteLength, 0);
var getBrowserFileFromMetaplexFile = (file) => new File([file.buffer], file.fileName);
var isMetaplexFile = (metaplexFile) => {
  return metaplexFile != null && typeof metaplexFile === "object" && "buffer" in metaplexFile && "fileName" in metaplexFile && "displayName" in metaplexFile && "uniqueName" in metaplexFile && "contentType" in metaplexFile && "extension" in metaplexFile && "tags" in metaplexFile;
};

// ../../node_modules/@metaplex-foundation/js/dist/esm/plugins/storageModule/StorageClient.mjs
var StorageClient = class {
  constructor() {
    _defineProperty(this, "_driver", null);
  }
  driver() {
    if (!this._driver) {
      throw new DriverNotProvidedError("StorageDriver");
    }
    return this._driver;
  }
  setDriver(newDriver) {
    this._driver = newDriver;
  }
  getUploadPriceForBytes(bytes) {
    return this.driver().getUploadPrice(bytes);
  }
  getUploadPriceForFile(file) {
    return this.getUploadPriceForFiles([file]);
  }
  getUploadPriceForFiles(files) {
    const driver = this.driver();
    return driver.getUploadPriceForFiles ? driver.getUploadPriceForFiles(files) : this.getUploadPriceForBytes(getBytesFromMetaplexFiles(...files));
  }
  upload(file) {
    return this.driver().upload(file);
  }
  uploadAll(files) {
    const driver = this.driver();
    return driver.uploadAll ? driver.uploadAll(files) : Promise.all(files.map((file) => this.driver().upload(file)));
  }
  uploadJson(json) {
    return this.upload(toMetaplexFileFromJson(json));
  }
  download(uri, options) {
    return __async(this, null, function* () {
      const driver = this.driver();
      if (driver.download) {
        return driver.download(uri, options);
      }
      const response = yield lib_default(uri, options);
      const buffer2 = yield response.arrayBuffer();
      return toMetaplexFile(buffer2, uri);
    });
  }
  downloadJson(uri, options) {
    return __async(this, null, function* () {
      const file = yield this.download(uri, options);
      try {
        return JSON.parse(file.buffer.toString());
      } catch (error2) {
        throw new InvalidJsonStringError(error2);
      }
    });
  }
};

// ../../node_modules/@metaplex-foundation/js/dist/esm/plugins/storageModule/plugin.mjs
var storageModule = () => ({
  install(metaplex) {
    const storageClient = new StorageClient();
    metaplex.storage = () => storageClient;
  }
});

// ../../node_modules/@metaplex-foundation/js/dist/esm/utils/readApiConnection.mjs
var import_mpl_token_metadata = __toESM(require_mpl_token_metadata(), 1);
var import_mpl_bubblegum = __toESM(require_src(), 1);
init_index_browser_esm();
var import_bn4 = __toESM(require_bn(), 1);

// ../../node_modules/@metaplex-foundation/js/dist/esm/errors/ReadApiError.mjs
var ReadApiError = class extends MetaplexError {
  constructor(message, cause) {
    super(message, "rpc", void 0, cause);
    _defineProperty(this, "name", "ReadApiError");
  }
};

// ../../node_modules/@metaplex-foundation/js/dist/esm/types/BigNumber.mjs
var import_bn2 = __toESM(require_bn(), 1);

// ../../node_modules/@metaplex-foundation/js/dist/esm/utils/assert.mjs
var AssertionError2 = class extends Error {
  constructor(message) {
    super(message);
    this.name = "AssertionError";
    if (Error.captureStackTrace) {
      Error.captureStackTrace(this, this.constructor);
    }
  }
};
function assert2(condition, message) {
  if (!condition) {
    throw new AssertionError2(message ?? "Assertion failed");
  }
}
assert2.equal = function assertEqual(actual, expected, message) {
  if (actual !== expected) {
    throw new AssertionError2((message ?? "") + ` ${actual} !== ${expected}`);
  }
};
function assertObjectHasDefinedKeys(input, keys, onError) {
  const missingKeys = keys.filter((property) => input?.[property] === void 0);
  if (missingKeys.length > 0) {
    throw onError(missingKeys);
  }
}

// ../../node_modules/@metaplex-foundation/js/dist/esm/types/BigNumber.mjs
var toBigNumber = (value, endian) => {
  return new import_bn2.default(value, endian);
};
var toOptionBigNumber = (value) => {
  return value === null ? null : toBigNumber(value);
};
var isBigNumber = (value) => {
  return value?.__opaque__ === "BigNumber";
};
function assertBigNumber(value) {
  assert2(isBigNumber(value), "Expected BigNumber type");
}

// ../../node_modules/@metaplex-foundation/js/dist/esm/types/Amount.mjs
init_index_browser_esm();
var import_bn3 = __toESM(require_bn(), 1);
var SOL = {
  symbol: "SOL",
  decimals: 9
};
var USD = {
  symbol: "USD",
  decimals: 2
};
var amount = (basisPoints, currency) => {
  return {
    basisPoints: toBigNumber(basisPoints),
    currency
  };
};
var lamports = (lamports2) => {
  return amount(lamports2, SOL);
};
var sol = (sol2) => {
  return lamports(sol2 * LAMPORTS_PER_SOL);
};
var usd = (usd2) => {
  return amount(usd2 * 100, USD);
};
var token = (amount2, decimals = 0, symbol = "Token") => {
  if (typeof amount2 !== "number") {
    amount2 = toBigNumber(amount2).toNumber();
  }
  return {
    basisPoints: toBigNumber(amount2 * Math.pow(10, decimals)),
    currency: {
      symbol,
      decimals,
      namespace: "spl-token"
    }
  };
};
var isSol = (currencyOrAmount) => {
  return sameCurrencies(currencyOrAmount, SOL);
};
var sameAmounts = (left, right) => {
  return sameCurrencies(left, right) && left.basisPoints.eq(right.basisPoints);
};
var sameCurrencies = (left, right) => {
  if ("currency" in left) {
    left = left.currency;
  }
  if ("currency" in right) {
    right = right.currency;
  }
  return left.symbol === right.symbol && left.decimals === right.decimals && left.namespace === right.namespace;
};
function assertCurrency(actual, expected) {
  if ("currency" in actual) {
    actual = actual.currency;
  }
  if (!sameCurrencies(actual, expected)) {
    throw new UnexpectedCurrencyError(actual, expected);
  }
}
function assertSol(actual) {
  assertCurrency(actual, SOL);
}
function assertSameCurrencies(left, right, operation) {
  if ("currency" in left) {
    left = left.currency;
  }
  if ("currency" in right) {
    right = right.currency;
  }
  if (!sameCurrencies(left, right)) {
    throw new CurrencyMismatchError(left, right, operation);
  }
}
var addAmounts = (left, right) => {
  assertSameCurrencies(left, right, "add");
  return amount(left.basisPoints.add(right.basisPoints), left.currency);
};
var subtractAmounts = (left, right) => {
  assertSameCurrencies(left, right, "subtract");
  return amount(left.basisPoints.sub(right.basisPoints), left.currency);
};
var multiplyAmount = (left, multiplier) => {
  return amount(left.basisPoints.muln(multiplier), left.currency);
};
var divideAmount = (left, divisor) => {
  return amount(left.basisPoints.divn(divisor), left.currency);
};
var absoluteAmount = (value) => {
  return amount(value.basisPoints.abs(), value.currency);
};
var compareAmounts = (left, right) => {
  assertSameCurrencies(left, right, "compare");
  return left.basisPoints.cmp(right.basisPoints);
};
var isEqualToAmount = (left, right, tolerance) => {
  tolerance = tolerance ?? amount(0, left.currency);
  assertSameCurrencies(left, right, "isEqualToAmount");
  assertSameCurrencies(left, tolerance, "isEqualToAmount");
  const delta = absoluteAmount(subtractAmounts(left, right));
  return isLessThanOrEqualToAmount(delta, tolerance);
};
var isLessThanAmount = (left, right) => compareAmounts(left, right) < 0;
var isLessThanOrEqualToAmount = (left, right) => compareAmounts(left, right) <= 0;
var isGreaterThanAmount = (left, right) => compareAmounts(left, right) > 0;
var isGreaterThanOrEqualToAmount = (left, right) => compareAmounts(left, right) >= 0;
var isZeroAmount = (value) => compareAmounts(value, amount(0, value.currency)) === 0;
var isPositiveAmount = (value) => compareAmounts(value, amount(0, value.currency)) >= 0;
var isNegativeAmount = (value) => compareAmounts(value, amount(0, value.currency)) < 0;
var formatAmount = (value) => {
  if (value.currency.decimals === 0) {
    return `${value.currency.symbol} ${value.basisPoints.toString()}`;
  }
  const power = new import_bn3.default(10).pow(new import_bn3.default(value.currency.decimals));
  const basisPoints = value.basisPoints;
  const {
    div,
    mod
  } = basisPoints.divmod(power);
  const units = `${div.toString()}.${mod.abs().toString(10, value.currency.decimals)}`;
  return `${value.currency.symbol} ${units}`;
};

// ../../node_modules/@metaplex-foundation/js/dist/esm/types/Pda.mjs
init_index_browser_esm();
var Pda = class _Pda extends PublicKey {
  /** The bump used to generate the PDA. */
  constructor(value, bump) {
    super(value);
    this.bump = bump;
  }
  static find(programId, seeds) {
    const [publicKey3, bump] = PublicKey.findProgramAddressSync(seeds, programId);
    return new _Pda(publicKey3, bump);
  }
};

// ../../node_modules/@metaplex-foundation/js/dist/esm/utils/readApiConnection.mjs
var toNftEditionFromReadApiAsset = (input) => {
  return {
    model: "nftEdition",
    isOriginal: true,
    address: new PublicKey(input.id),
    supply: toBigNumber(input.supply.print_current_supply),
    maxSupply: toBigNumber(input.supply.print_max_supply)
  };
};
var toMintFromReadApiAsset = (input) => {
  const currency = {
    symbol: "Token",
    decimals: 0,
    namespace: "spl-token"
  };
  return {
    model: "mint",
    address: new PublicKey(input.id),
    // TODO(jon): Presumably, this should be the Master Edition address upon decompression
    mintAuthorityAddress: new PublicKey(input.id),
    // TODO(jon): Presumably, this should be the Master Edition address upon decompression
    freezeAuthorityAddress: new PublicKey(input.id),
    decimals: 0,
    supply: amount(1, currency),
    isWrappedSol: false,
    currency
  };
};
var toMetadataFromReadApiAsset = (input) => {
  const updateAuthority = input.authorities?.find((authority) => authority.scopes.includes("full"));
  const collection = input.grouping.find(({
    group_key
  }) => group_key === "collection");
  return {
    model: "metadata",
    // TODO(jon): We technically don't have a metadata address anymore. We can derive one though
    address: Pda.find(import_mpl_bubblegum.PROGRAM_ID, [Buffer.from("asset", "utf-8"), new PublicKey(input.compression.tree).toBuffer(), Uint8Array.from(new import_bn4.default(input.compression.leaf_id).toArray("le", 8))]),
    mintAddress: new PublicKey(input.id),
    updateAuthorityAddress: new PublicKey(updateAuthority.address),
    name: input.content.metadata?.name ?? "",
    symbol: input.content.metadata?.symbol ?? "",
    json: input.content.metadata,
    jsonLoaded: true,
    uri: input.content.json_uri,
    isMutable: input.mutable,
    primarySaleHappened: input.royalty.primary_sale_happened,
    sellerFeeBasisPoints: input.royalty.basis_points,
    creators: input.creators,
    editionNonce: input.supply.edition_nonce,
    tokenStandard: import_mpl_token_metadata.TokenStandard.NonFungible,
    collection: collection ? {
      address: new PublicKey(collection.group_value),
      verified: false
    } : null,
    compression: input.compression,
    // TODO(jon): Read API doesn't return this info
    collectionDetails: null,
    // TODO(jon): Read API doesn't return this info
    uses: null,
    // TODO(jon): Read API doesn't return this info
    programmableConfig: null
  };
};
var ReadApiConnection = class extends Connection {
  constructor(endpoint, commitmentOrConfig) {
    super(endpoint, commitmentOrConfig);
    _defineProperty(this, "callReadApi", (jsonRpcParams) => __async(this, null, function* () {
      const response = yield fetch(this.rpcEndpoint, {
        method: "POST",
        headers: {
          "Content-Type": "application/json"
        },
        body: JSON.stringify({
          jsonrpc: "2.0",
          method: jsonRpcParams.method,
          id: jsonRpcParams.id ?? "rpd-op-123",
          params: jsonRpcParams.params
        })
      });
      return yield response.json();
    }));
  }
  // Asset id can be calculated via Bubblegum#getLeafAssetId
  // It is a PDA with the following seeds: ["asset", tree, leafIndex]
  getAsset(assetId) {
    return __async(this, null, function* () {
      const {
        result: asset
      } = yield this.callReadApi({
        method: "getAsset",
        params: {
          id: assetId.toBase58()
        }
      });
      if (!asset)
        throw new ReadApiError("No asset returned");
      return asset;
    });
  }
  // Asset id can be calculated via Bubblegum#getLeafAssetId
  // It is a PDA with the following seeds: ["asset", tree, leafIndex]
  getAssetProof(assetId) {
    return __async(this, null, function* () {
      const {
        result: proof
      } = yield this.callReadApi({
        method: "getAssetProof",
        params: {
          id: assetId.toBase58()
        }
      });
      if (!proof)
        throw new ReadApiError("No asset proof returned");
      return proof;
    });
  }
  //
  getAssetsByGroup(_0) {
    return __async(this, arguments, function* ({
      groupKey,
      groupValue,
      page,
      limit,
      sortBy,
      before,
      after
    }) {
      if (typeof page == "number" && (before || after))
        throw new ReadApiError("Pagination Error. Only one pagination parameter supported per query.");
      if (typeof page == "number" || before || after)
        throw new ReadApiError("Pagination Error. No Pagination Method Selected.");
      const {
        result
      } = yield this.callReadApi({
        method: "getAssetsByGroup",
        params: {
          groupKey,
          groupValue,
          after: after ?? null,
          before: before ?? null,
          limit: limit ?? null,
          page: page ?? 0,
          sortBy: sortBy ?? null
        }
      });
      if (!result)
        throw new ReadApiError("No results returned");
      return result;
    });
  }
  //
  getAssetsByOwner(_0) {
    return __async(this, arguments, function* ({
      ownerAddress,
      page,
      limit,
      sortBy,
      before,
      after
    }) {
      if (typeof page == "number" && (before || after))
        throw new ReadApiError("Pagination Error. Only one pagination parameter supported per query.");
      if (typeof page == "number" || before || after)
        throw new ReadApiError("Pagination Error. No Pagination Method Selected.");
      const {
        result
      } = yield this.callReadApi({
        method: "getAssetsByOwner",
        params: {
          ownerAddress,
          after: after ?? null,
          before: before ?? null,
          limit: limit ?? null,
          page: page ?? 0,
          sortBy: sortBy ?? null
        }
      });
      if (!result)
        throw new ReadApiError("No results returned");
      return result;
    });
  }
};

// ../../node_modules/@metaplex-foundation/js/dist/esm/errors/RpcError.mjs
var RpcError = class extends MetaplexError {
  constructor(message, cause) {
    super(message, "rpc", void 0, cause);
    _defineProperty(this, "name", "RpcError");
  }
};
var FailedToSendTransactionError = class extends RpcError {
  constructor(cause) {
    const message = "The transaction could not be sent successfully to the network. Please check the underlying error below for more details.";
    super(message, cause);
    _defineProperty(this, "name", "FailedToSendTransactionError");
    if (this.errorLogs.length > 0) {
      this.message = this.message + `
Program Logs:
${this.errorLogs.map((log) => "| " + log).join("\n")}
`;
    }
  }
  asSendTransactionError() {
    return this.cause;
  }
  get error() {
    return this.asSendTransactionError().message;
  }
  get errorLogs() {
    return this.asSendTransactionError().logs ?? [];
  }
};
var FailedToConfirmTransactionError = class extends RpcError {
  constructor(cause) {
    const message = "The transaction could not be confirmed. Please check the underlying error below for more details.";
    super(message, cause);
    _defineProperty(this, "name", "FailedToConfirmTransactionError");
  }
};
var FailedToConfirmTransactionWithResponseError = class extends FailedToConfirmTransactionError {
  constructor(response) {
    const getMessage2 = (error2) => {
      if (!error2)
        return "Unknown error";
      if (typeof error2 === "string")
        return error2;
      try {
        return JSON.stringify(error2);
      } catch (error3) {
        return "Unknown error";
      }
    };
    super(new Error(getMessage2(response.value.err)));
    _defineProperty(this, "name", "FailedToConfirmTransactionWithResponseError");
    this.response = response;
  }
  get error() {
    return this.response.value.err ?? "Unknown error";
  }
};

// ../../node_modules/@metaplex-foundation/js/dist/esm/types/Program.mjs
var isErrorWithLogs = (error2) => error2 instanceof Error && "logs" in error2;

// ../../node_modules/@metaplex-foundation/js/dist/esm/errors/ProgramError.mjs
var ProgramError = class extends MetaplexError {
  constructor(message, program, cause, logs) {
    super(message, "program", `${program.name} [${program.address.toString()}]`, cause);
    _defineProperty(this, "name", "ProgramError");
    this.program = program;
    this.logs = logs;
    if (logs) {
      this.message = this.message + `
Program Logs:
${logs.map((log) => "| " + log).join("\n")}
`;
    }
  }
};
var ParsedProgramError = class extends ProgramError {
  constructor(program, cause, logs) {
    const ofCode = cause.code ? ` of code [${cause.code}]` : "";
    const message = `The program [${program.name}] at address [${program.address.toString()}] raised an error${ofCode} that translates to "${cause.message}".`;
    super(message, program, cause, logs);
    _defineProperty(this, "name", "ParsedProgramError");
  }
};
var UnknownProgramError = class extends ProgramError {
  constructor(program, cause) {
    const ofCode = cause.code ? ` of code [${cause.code}]` : "";
    const message = `The program [${program.name}] at address [${program.address.toString()}] raised an error${ofCode} that is not recognized by the programs registered on the SDK. Please check the underlying program error below for more details.`;
    super(message, program, cause, cause.logs);
    _defineProperty(this, "name", "UnknownProgramError");
  }
};

// ../../node_modules/@metaplex-foundation/js/dist/esm/plugins/rpcModule/RpcClient.mjs
var RpcClient = class {
  constructor(metaplex) {
    this.metaplex = metaplex;
  }
  prepareTransaction(transaction, signers) {
    return __async(this, null, function* () {
      let blockhashWithExpiryBlockHeight;
      if (!("records" in transaction) && transaction.recentBlockhash && transaction.lastValidBlockHeight) {
        blockhashWithExpiryBlockHeight = {
          blockhash: transaction.recentBlockhash,
          lastValidBlockHeight: transaction.lastValidBlockHeight
        };
      } else {
        blockhashWithExpiryBlockHeight = yield this.getLatestBlockhash();
      }
      if ("records" in transaction) {
        signers = [...transaction.getSigners(), ...signers];
        transaction = transaction.toTransaction(blockhashWithExpiryBlockHeight);
      }
      return {
        transaction,
        signers,
        blockhashWithExpiryBlockHeight
      };
    });
  }
  signTransaction(transaction, signers) {
    return __async(this, null, function* () {
      const {
        keypairs,
        identities
      } = getSignerHistogram(signers);
      if (keypairs.length > 0) {
        transaction.partialSign(...keypairs);
      }
      for (let i = 0; i < identities.length; i++) {
        transaction = yield identities[i].signTransaction(transaction);
      }
      return transaction;
    });
  }
  sendTransaction(_0) {
    return __async(this, arguments, function* (transaction, sendOptions = {}, signers = []) {
      const prepared = yield this.prepareTransaction(transaction, signers);
      transaction = prepared.transaction;
      signers = prepared.signers;
      const defaultFeePayer = this.getDefaultFeePayer();
      if (!transaction.feePayer && defaultFeePayer) {
        transaction.feePayer = defaultFeePayer.publicKey;
        signers = [defaultFeePayer, ...signers];
      }
      transaction = yield this.signTransaction(transaction, signers);
      const rawTransaction = transaction.serialize();
      try {
        return yield this.metaplex.connection.sendRawTransaction(rawTransaction, sendOptions);
      } catch (error2) {
        throw this.parseProgramError(error2, transaction);
      }
    });
  }
  confirmTransaction(signature, blockhashWithExpiryBlockHeight, commitment) {
    return __async(this, null, function* () {
      let rpcResponse;
      try {
        rpcResponse = yield this.metaplex.connection.confirmTransaction(__spreadValues({
          signature
        }, blockhashWithExpiryBlockHeight), commitment);
      } catch (error2) {
        throw new FailedToConfirmTransactionError(error2);
      }
      if (rpcResponse.value.err) {
        throw new FailedToConfirmTransactionWithResponseError(rpcResponse);
      }
      return rpcResponse;
    });
  }
  sendAndConfirmTransaction(_0, _1) {
    return __async(this, arguments, function* (transaction, confirmOptions, signers = []) {
      const prepared = yield this.prepareTransaction(transaction, signers);
      const {
        blockhashWithExpiryBlockHeight
      } = prepared;
      transaction = prepared.transaction;
      signers = prepared.signers;
      const signature = yield this.sendTransaction(transaction, confirmOptions, signers);
      const confirmResponse = yield this.confirmTransaction(signature, blockhashWithExpiryBlockHeight, confirmOptions?.commitment);
      return __spreadValues({
        signature,
        confirmResponse
      }, blockhashWithExpiryBlockHeight);
    });
  }
  getAccount(publicKey3, commitment) {
    return __async(this, null, function* () {
      const accountInfo = yield this.metaplex.connection.getAccountInfo(publicKey3, commitment);
      return this.getUnparsedMaybeAccount(publicKey3, accountInfo);
    });
  }
  accountExists(publicKey3, commitment) {
    return __async(this, null, function* () {
      const balance = yield this.metaplex.connection.getBalance(publicKey3, commitment);
      return balance > 0;
    });
  }
  getMultipleAccounts(publicKeys, commitment) {
    return __async(this, null, function* () {
      const accountInfos = yield this.metaplex.connection.getMultipleAccountsInfo(publicKeys, commitment);
      return zipMap(publicKeys, accountInfos, (publicKey3, accountInfo) => {
        return this.getUnparsedMaybeAccount(publicKey3, accountInfo);
      });
    });
  }
  getProgramAccounts(programId, configOrCommitment) {
    return __async(this, null, function* () {
      const accounts = yield this.metaplex.connection.getProgramAccounts(programId, configOrCommitment);
      return accounts.map(({
        pubkey,
        account
      }) => __spreadProps(__spreadValues({}, account), {
        publicKey: pubkey,
        lamports: lamports(account.lamports)
      }));
    });
  }
  airdrop(publicKey3, amount2, commitment) {
    return __async(this, null, function* () {
      assertSol(amount2);
      const signature = yield this.metaplex.connection.requestAirdrop(publicKey3, amount2.basisPoints.toNumber());
      const blockhashWithExpiryBlockHeight = yield this.getLatestBlockhash();
      const confirmResponse = yield this.confirmTransaction(signature, blockhashWithExpiryBlockHeight, commitment);
      return __spreadValues({
        signature,
        confirmResponse
      }, blockhashWithExpiryBlockHeight);
    });
  }
  getBalance(publicKey3, commitment) {
    return __async(this, null, function* () {
      const balance = yield this.metaplex.connection.getBalance(publicKey3, commitment);
      return lamports(balance);
    });
  }
  getRent(bytes, commitment) {
    return __async(this, null, function* () {
      const rent = yield this.metaplex.connection.getMinimumBalanceForRentExemption(bytes, commitment);
      return lamports(rent);
    });
  }
  getLatestBlockhash(commitmentOrConfig = "finalized") {
    return __async(this, null, function* () {
      return this.metaplex.connection.getLatestBlockhash(commitmentOrConfig);
    });
  }
  getSolanaExporerUrl(signature) {
    let clusterParam = "";
    switch (this.metaplex.cluster) {
      case "devnet":
        clusterParam = "?cluster=devnet";
        break;
      case "testnet":
        clusterParam = "?cluster=testnet";
        break;
      case "localnet":
      case "custom":
        const url = encodeURIComponent(this.metaplex.connection.rpcEndpoint);
        clusterParam = `?cluster=custom&customUrl=${url}`;
        break;
    }
    return `https://explorer.solana.com/tx/${signature}${clusterParam}`;
  }
  setDefaultFeePayer(payer) {
    this.defaultFeePayer = payer;
    return this;
  }
  getDefaultFeePayer() {
    return this.defaultFeePayer ? this.defaultFeePayer : this.metaplex.identity();
  }
  getUnparsedMaybeAccount(publicKey3, accountInfo) {
    if (!accountInfo) {
      return {
        publicKey: publicKey3,
        exists: false
      };
    }
    return __spreadProps(__spreadValues({}, accountInfo), {
      publicKey: publicKey3,
      exists: true,
      lamports: lamports(accountInfo.lamports)
    });
  }
  getAsset(assetId) {
    return __async(this, null, function* () {
      if (this.metaplex.connection instanceof ReadApiConnection) {
        return yield this.metaplex.connection.getAsset(assetId);
      }
      return new RpcError("Method not supported! Use a ReadApiConnection instead");
    });
  }
  getAssetProof(assetId) {
    return __async(this, null, function* () {
      if (this.metaplex.connection instanceof ReadApiConnection) {
        return yield this.metaplex.connection.getAssetProof(assetId);
      }
      return new RpcError("Method not supported! Use a ReadApiConnection instead");
    });
  }
  getAssetsByGroup(_0) {
    return __async(this, arguments, function* ({
      groupKey,
      groupValue,
      page,
      limit,
      sortBy,
      before,
      after
    }) {
      if (this.metaplex.connection instanceof ReadApiConnection) {
        return yield this.metaplex.connection.getAssetsByGroup({
          groupKey,
          groupValue,
          page,
          limit,
          sortBy,
          before,
          after
        });
      }
      return new RpcError("Method not supported! Use a ReadApiConnection instead");
    });
  }
  getAssetsByOwner(_0) {
    return __async(this, arguments, function* ({
      ownerAddress,
      page,
      limit,
      sortBy,
      before,
      after
    }) {
      if (this.metaplex.connection instanceof ReadApiConnection) {
        return yield this.metaplex.connection.getAssetsByOwner({
          ownerAddress,
          page,
          limit,
          sortBy,
          before,
          after
        });
      }
      return new RpcError("Method not supported! Use a ReadApiConnection instead");
    });
  }
  parseProgramError(error2, transaction) {
    if (!isErrorWithLogs(error2)) {
      return new FailedToSendTransactionError(error2);
    }
    const regex2 = /Error processing Instruction (\d+):/;
    const instruction = error2.message.match(regex2)?.[1] ?? null;
    if (!instruction) {
      return new FailedToSendTransactionError(error2);
    }
    const instructionNumber = parseInt(instruction, 10);
    const programId = transaction.instructions?.[instructionNumber]?.programId ?? null;
    if (!programId) {
      return new FailedToSendTransactionError(error2);
    }
    let program;
    try {
      program = this.metaplex.programs().get(programId);
    } catch (_programNotFoundError) {
      return new FailedToSendTransactionError(error2);
    }
    if (!program.errorResolver) {
      return new UnknownProgramError(program, error2);
    }
    const resolvedError = program.errorResolver(error2);
    return resolvedError ? new ParsedProgramError(program, resolvedError, error2.logs) : new UnknownProgramError(program, error2);
  }
};

// ../../node_modules/@metaplex-foundation/js/dist/esm/plugins/rpcModule/plugin.mjs
var rpcModule = () => ({
  install(metaplex) {
    const rpcClient = new RpcClient(metaplex);
    metaplex.rpc = () => rpcClient;
  }
});

// ../../node_modules/@metaplex-foundation/js/dist/esm/utils/Disposable.mjs
var import_eventemitter3 = __toESM(require_eventemitter3(), 1);
var Disposable = class {
  constructor(signal) {
    _defineProperty(this, "cancelationError", null);
    this.signal = signal;
    this.eventEmitter = new import_eventemitter3.default.EventEmitter();
    this.abortListener = (error2) => {
      this.cancelationError = error2;
      this.eventEmitter.emit("cancel", error2);
      this.close();
    };
    this.signal.addEventListener("abort", this.abortListener);
  }
  run(callback, thenCloseDisposable = true) {
    return __async(this, null, function* () {
      try {
        return yield Promise.resolve(callback(this.getScope()));
      } finally {
        if (thenCloseDisposable) {
          this.close();
        }
      }
    });
  }
  getScope() {
    return {
      signal: this.signal,
      isCanceled: () => this.isCanceled(),
      getCancelationError: () => this.cancelationError,
      throwIfCanceled: () => {
        if (this.isCanceled()) {
          throw this.getCancelationError();
        }
      }
    };
  }
  isCanceled() {
    return this.signal.aborted;
  }
  getCancelationError() {
    return this.cancelationError;
  }
  onCancel(callback) {
    this.eventEmitter.on("cancel", callback);
    return this;
  }
  close() {
    this.signal.removeEventListener("abort", this.abortListener);
    this.eventEmitter.removeAllListeners();
  }
};

// ../../node_modules/@metaplex-foundation/js/dist/esm/plugins/operationModule/OperationClient.mjs
var OperationClient = class {
  /**
   * Maps the name of an operation with its operation handler.
   * Whilst the types on the Map are relatively loose, we ensure
   * operations match with their handlers when registering them.
   */
  constructor(metaplex) {
    _defineProperty(this, "operationHandlers", /* @__PURE__ */ new Map());
    this.metaplex = metaplex;
  }
  register(operationConstructor, operationHandler) {
    this.operationHandlers.set(operationConstructor.key, operationHandler);
    return this;
  }
  get(operation) {
    const operationHandler = this.operationHandlers.get(operation.key);
    if (!operationHandler) {
      throw new OperationHandlerMissingError(operation.key);
    }
    return operationHandler;
  }
  execute(_0) {
    return __async(this, arguments, function* (operation, options = {}) {
      const operationHandler = this.get(operation);
      const signal = options.signal ?? new AbortController().signal;
      return new Disposable(signal).run((scope) => operationHandler.handle(operation, this.metaplex, this.getOperationScope(options, scope)));
    });
  }
  getOperationScope(options, scope) {
    if (!!options.commitment && !options.confirmOptions) {
      options.confirmOptions = {
        commitment: options.commitment
      };
    }
    const payer = options.payer ?? this.metaplex.rpc().getDefaultFeePayer();
    return __spreadProps(__spreadValues(__spreadValues({}, options), scope), {
      payer
    });
  }
};

// ../../node_modules/@metaplex-foundation/js/dist/esm/plugins/operationModule/plugin.mjs
var operationModule = () => ({
  install(metaplex) {
    const operationClient = new OperationClient(metaplex);
    metaplex.operations = () => operationClient;
  }
});

// ../../node_modules/@metaplex-foundation/js/dist/esm/plugins/programModule/ProgramClient.mjs
var ProgramClient = class {
  constructor(metaplex) {
    _defineProperty(this, "programs", []);
    this.metaplex = metaplex;
  }
  register(program) {
    this.programs.unshift(program);
  }
  all(overrides = []) {
    return [...overrides, ...this.programs];
  }
  allForCluster(cluster, overrides = []) {
    return this.all(overrides).filter((program) => {
      return program.clusterFilter?.(cluster) ?? true;
    });
  }
  allForCurrentCluster(overrides = []) {
    return this.allForCluster(this.metaplex.cluster, overrides);
  }
  get(nameOrAddress, overrides = []) {
    const programs = this.allForCurrentCluster(overrides);
    const program = typeof nameOrAddress === "string" ? programs.find((program2) => program2.name === nameOrAddress) : programs.find((program2) => program2.address.equals(nameOrAddress));
    if (!program) {
      throw new ProgramNotRecognizedError(nameOrAddress, this.metaplex.cluster);
    }
    return program;
  }
};

// ../../node_modules/@metaplex-foundation/js/dist/esm/plugins/programModule/plugin.mjs
var programModule = () => ({
  install(metaplex) {
    const programClient = new ProgramClient(metaplex);
    metaplex.programs = () => programClient;
  }
});

// ../../node_modules/@metaplex-foundation/js/dist/esm/plugins/utilsModule/UtilsClient.mjs
var TRANSACTION_FEE = 5e3;
var UtilsClient = class {
  constructor(metaplex) {
    _defineProperty(this, "cachedRentPerEmptyAccount", null);
    _defineProperty(this, "cachedRentPerByte", null);
    this.metaplex = metaplex;
  }
  estimate(bytes, numberOfAccounts = 1, numberOfTransactions = 1, useCache = true) {
    return __async(this, null, function* () {
      const rent = yield this.estimateRent(bytes, numberOfAccounts, useCache);
      const transactionFees = this.estimateTransactionFee(numberOfTransactions);
      return addAmounts(rent, transactionFees);
    });
  }
  estimateRent(bytes, numberOfAccounts = 1, useCache = true) {
    return __async(this, null, function* () {
      if (!useCache || this.cachedRentPerEmptyAccount === null || this.cachedRentPerByte === null) {
        const rentFor0Bytes = yield this.metaplex.rpc().getRent(0);
        const rentFor1Byte = yield this.metaplex.rpc().getRent(1);
        this.cachedRentPerEmptyAccount = rentFor0Bytes;
        this.cachedRentPerByte = subtractAmounts(rentFor1Byte, rentFor0Bytes);
      }
      const rentForAccounts = multiplyAmount(this.cachedRentPerEmptyAccount, numberOfAccounts);
      const rentForBytes = multiplyAmount(this.cachedRentPerByte, bytes);
      return addAmounts(rentForAccounts, rentForBytes);
    });
  }
  estimateTransactionFee(numberOfTransactions = 1) {
    return lamports(numberOfTransactions * TRANSACTION_FEE);
  }
};

// ../../node_modules/@metaplex-foundation/js/dist/esm/plugins/utilsModule/plugin.mjs
var utilsModule = () => ({
  install(metaplex) {
    const utilsClient = new UtilsClient(metaplex);
    metaplex.utils = () => utilsClient;
  }
});

// ../../node_modules/@metaplex-foundation/js/dist/esm/plugins/guestIdentity/GuestIdentityDriver.mjs
init_index_browser_esm();
var GuestIdentityDriver = class {
  constructor(publicKey3) {
    this.publicKey = publicKey3 ?? PublicKey.default;
  }
  signMessage() {
    return __async(this, null, function* () {
      throw new OperationUnauthorizedForGuestsError("signMessage");
    });
  }
  signTransaction() {
    return __async(this, null, function* () {
      throw new OperationUnauthorizedForGuestsError("signTransaction");
    });
  }
  signAllTransactions() {
    return __async(this, null, function* () {
      throw new OperationUnauthorizedForGuestsError("signAllTransactions");
    });
  }
};

// ../../node_modules/@metaplex-foundation/js/dist/esm/plugins/guestIdentity/plugin.mjs
var guestIdentity = (publicKey3) => ({
  install(metaplex) {
    metaplex.identity().setDriver(new GuestIdentityDriver(publicKey3));
  }
});

// ../../node_modules/@metaplex-foundation/js/dist/esm/plugins/irysStorage/IrysStorageDriver.mjs
init_index_browser_esm();

// ../../node_modules/@metaplex-foundation/js/dist/esm/errors/IrysError.mjs
var IrysError = class extends MetaplexError {
  constructor(message, cause) {
    super(message, "plugin", "Irys", cause);
    _defineProperty(this, "name", "IrysError");
  }
};
var FailedToInitializeIrysError = class extends IrysError {
  constructor(cause) {
    const message = "Irys could not be initialized. Please check the underlying error below for more details.";
    super(message, cause);
    _defineProperty(this, "name", "FailedToInitializeIrysError");
  }
};
var FailedToConnectToIrysAddressError = class extends IrysError {
  constructor(address, cause) {
    const message = `Irys could not connect to the provided address [${address}]. Please ensure the provided address is valid. Some valid addresses include: "https://node1.irys.xyz" for mainnet and "https://devnet.irys.xyz" for devnet`;
    super(message, cause);
    _defineProperty(this, "name", "FailedToConnectToIrysAddressError");
  }
};
var AssetUploadFailedError = class extends IrysError {
  constructor(status) {
    const message = `The asset could not be uploaded to the Irys network and returned the following status code [${status}].`;
    super(message);
    _defineProperty(this, "name", "AssetUploadFailedError");
  }
};
var IrysWithdrawError = class extends IrysError {
  constructor(error2) {
    const message = `The balance could not be withdrawn from the Irys network and returned the following error: ${error2}.`;
    super(message);
    _defineProperty(this, "name", "IrysWithdrawError");
  }
};

// ../../node_modules/@metaplex-foundation/js/dist/esm/plugins/keypairIdentity/KeypairIdentityDriver.mjs
var KeypairIdentityDriver = class {
  constructor(keypair) {
    this.keypair = keypair;
    this.publicKey = keypair.publicKey;
    this.secretKey = keypair.secretKey;
  }
  signMessage(message) {
    return __async(this, null, function* () {
      return sync.sign(message, this.secretKey.slice(0, 32));
    });
  }
  signTransaction(transaction) {
    return __async(this, null, function* () {
      transaction.partialSign(this.keypair);
      return transaction;
    });
  }
  signAllTransactions(transactions) {
    return __async(this, null, function* () {
      return Promise.all(transactions.map((transaction) => this.signTransaction(transaction)));
    });
  }
};

// ../../node_modules/@metaplex-foundation/js/dist/esm/utils/exports.mjs
function _removeDoubleDefault(pkg) {
  if (pkg && typeof pkg === "object" && "default" in pkg && "default" in pkg.default) {
    return pkg.default;
  }
  return pkg;
}

// ../../node_modules/@metaplex-foundation/js/dist/esm/plugins/irysStorage/IrysStorageDriver.mjs
var HEADER_SIZE = 2e3;
var MINIMUM_SIZE = 8e4;
var IrysStorageDriver = class {
  constructor(metaplex, options = {}) {
    _defineProperty(this, "_irys", null);
    this._metaplex = metaplex;
    this._options = __spreadValues({
      providerUrl: metaplex.connection.rpcEndpoint
    }, options);
  }
  getUploadPrice(bytes) {
    return __async(this, null, function* () {
      const irys = yield this.irys();
      const price = yield irys.getPrice(bytes);
      return bigNumberToAmount(price.multipliedBy(this._options.priceMultiplier ?? 1.1));
    });
  }
  getUploadPriceForFiles(files) {
    return __async(this, null, function* () {
      const bytes = files.reduce((sum, file) => {
        return sum + HEADER_SIZE + Math.max(MINIMUM_SIZE, file.buffer.byteLength);
      }, 0);
      return this.getUploadPrice(bytes);
    });
  }
  upload(file) {
    return __async(this, null, function* () {
      const [uri] = yield this.uploadAll([file]);
      return uri;
    });
  }
  uploadAll(files) {
    return __async(this, null, function* () {
      const irys = yield this.irys();
      const amount2 = yield this.getUploadPrice(getBytesFromMetaplexFiles(...files));
      yield this.fund(amount2);
      const promises = files.map((file) => __async(this, null, function* () {
        const irysTx = irys.createTransaction(file.buffer, {
          tags: getMetaplexFileTagsWithContentType(file)
        });
        yield irysTx.sign();
        const {
          status,
          data
        } = yield irys.uploader.uploadTransaction(irysTx);
        if (status >= 300) {
          throw new AssetUploadFailedError(status);
        }
        return `https://arweave.net/${data.id}`;
      }));
      return yield Promise.all(promises);
    });
  }
  getBalance() {
    return __async(this, null, function* () {
      const irys = yield this.irys();
      const balance = yield irys.getLoadedBalance();
      return bigNumberToAmount(balance);
    });
  }
  fund(amount2, skipBalanceCheck = false) {
    return __async(this, null, function* () {
      const irys = yield this.irys();
      let toFund = amountToBigNumber(amount2);
      if (!skipBalanceCheck) {
        const balance = yield irys.getLoadedBalance();
        toFund = toFund.isGreaterThan(balance) ? toFund.minus(balance) : new bignumber_default(0);
      }
      if (toFund.isLessThanOrEqualTo(0)) {
        return;
      }
      yield irys.fund(toFund);
    });
  }
  withdrawAll() {
    return __async(this, null, function* () {
      const irys = yield this.irys();
      const balance = yield irys.getLoadedBalance();
      const minimumBalance = new bignumber_default(5e3);
      if (balance.isLessThan(minimumBalance)) {
        return;
      }
      const balanceToWithdraw = balance.minus(minimumBalance);
      yield this.withdraw(bigNumberToAmount(balanceToWithdraw));
    });
  }
  withdraw(amount2) {
    return __async(this, null, function* () {
      const irys = yield this.irys();
      try {
        yield irys.withdrawBalance(amountToBigNumber(amount2));
      } catch (e2) {
        throw new IrysWithdrawError(e2 instanceof Error ? e2.message : e2.toString());
      }
    });
  }
  irys() {
    return __async(this, null, function* () {
      if (this._irys) {
        return this._irys;
      }
      return this._irys = yield this.initIrys();
    });
  }
  initIrys() {
    return __async(this, null, function* () {
      const currency = "solana";
      const address = this._options?.address ?? "https://node1.irys.xyz";
      const options = {
        timeout: this._options.timeout,
        providerUrl: this._options.providerUrl
      };
      const identity = this._options.identity ?? this._metaplex.identity();
      const isNode = typeof window === "undefined" || window.process?.hasOwnProperty("type");
      let irys;
      if (isNode && isKeypairSigner(identity))
        irys = yield this.initNodeirys(address, currency, identity, options);
      else {
        let identitySigner;
        if (isIdentitySigner(identity))
          identitySigner = identity;
        else
          identitySigner = new KeypairIdentityDriver(Keypair.fromSecretKey(identity.secretKey));
        irys = yield this.initWebirys(address, currency, identitySigner, options);
      }
      try {
        yield irys.utils.getBundlerAddress(currency);
      } catch (error2) {
        throw new FailedToConnectToIrysAddressError(address, error2);
      }
      return irys;
    });
  }
  initNodeirys(address, currency, keypair, options) {
    return __async(this, null, function* () {
      const bPackage = _removeDoubleDefault(yield import("./web-23G4T6RV.js"));
      return new bPackage.default({
        url: address,
        token: currency,
        key: keypair.secretKey,
        config: options
      });
    });
  }
  initWebirys(address, currency, identity, options) {
    return __async(this, null, function* () {
      const wallet = {
        publicKey: identity.publicKey,
        signMessage: (message) => identity.signMessage(message),
        signTransaction: (transaction) => identity.signTransaction(transaction),
        signAllTransactions: (transactions) => identity.signAllTransactions(transactions),
        sendTransaction: (transaction, connection, options2 = {}) => {
          const _a = options2, {
            signers = []
          } = _a, sendOptions = __objRest(_a, [
            "signers"
          ]);
          return this._metaplex.rpc().sendTransaction(transaction, sendOptions, [identity, ...signers]);
        }
      };
      const bPackage = _removeDoubleDefault(yield import("./web-23G4T6RV.js"));
      const irys = new bPackage.WebIrys({
        url: address,
        token: currency,
        wallet: {
          provider: wallet
        },
        config: options
      });
      try {
        yield irys.ready();
      } catch (error2) {
        throw new FailedToInitializeIrysError(error2);
      }
      return irys;
    });
  }
};
var isirysStorageDriver = (storageDriver) => {
  return "irys" in storageDriver && "getBalance" in storageDriver && "fund" in storageDriver && "withdrawAll" in storageDriver;
};
var bigNumberToAmount = (bigNumber) => {
  return lamports(toBigNumber(bigNumber.decimalPlaces(0).toString()));
};
var amountToBigNumber = (amount2) => {
  return new bignumber_default(amount2.basisPoints.toString());
};
var getMetaplexFileTagsWithContentType = (file) => {
  if (!file.contentType) {
    return file.tags;
  }
  return [{
    name: "Content-Type",
    value: file.contentType
  }, ...file.tags];
};

// ../../node_modules/@metaplex-foundation/js/dist/esm/plugins/irysStorage/plugin.mjs
var irysStorage = (options = {}) => ({
  install(metaplex) {
    metaplex.storage().setDriver(new IrysStorageDriver(metaplex, options));
  }
});

// ../../node_modules/@metaplex-foundation/js/dist/esm/plugins/systemModule/plugin.mjs
init_index_browser_esm();

// ../../node_modules/@metaplex-foundation/js/dist/esm/plugins/systemModule/operations/createAccount.mjs
init_index_browser_esm();

// ../../node_modules/@metaplex-foundation/js/dist/esm/types/Operation.mjs
var useOperation = (key) => {
  const constructor = (input) => {
    return {
      key,
      input
    };
  };
  constructor.key = key;
  return constructor;
};
var makeConfirmOptionsFinalizedOnMainnet = (metaplex, options) => {
  return metaplex.cluster === "mainnet-beta" ? __spreadProps(__spreadValues({}, options), {
    commitment: "finalized"
  }) : options;
};

// ../../node_modules/@metaplex-foundation/js/dist/esm/utils/TransactionBuilder.mjs
init_index_browser_esm();
var TransactionBuilder = class _TransactionBuilder {
  /** The list of all instructions and their respective signers. */
  /** The signer to use to pay for transaction fees. */
  /** Any additional context gathered when creating the transaction builder. */
  constructor(transactionOptions = {}) {
    _defineProperty(this, "records", []);
    _defineProperty(this, "feePayer", void 0);
    _defineProperty(this, "context", {});
    this.transactionOptions = transactionOptions;
  }
  static make(transactionOptions) {
    return new _TransactionBuilder(transactionOptions);
  }
  prepend(...txs) {
    const newRecords = txs.flatMap((tx) => tx instanceof _TransactionBuilder ? tx.getInstructionsWithSigners() : [tx]);
    this.records = [...newRecords, ...this.records];
    return this;
  }
  append(...txs) {
    const newRecords = txs.flatMap((tx) => tx instanceof _TransactionBuilder ? tx.getInstructionsWithSigners() : [tx]);
    this.records = [...this.records, ...newRecords];
    return this;
  }
  add(...txs) {
    return this.append(...txs);
  }
  splitUsingKey(key, include = true) {
    const firstBuilder = new _TransactionBuilder(this.transactionOptions);
    const secondBuilder = new _TransactionBuilder(this.transactionOptions);
    let keyPosition = this.records.findIndex((record) => record.key === key);
    if (keyPosition > -1) {
      keyPosition += include ? 1 : 0;
      firstBuilder.add(...this.records.slice(0, keyPosition));
      secondBuilder.add(...this.records.slice(keyPosition));
    } else {
      firstBuilder.add(this);
    }
    return [firstBuilder, secondBuilder];
  }
  splitBeforeKey(key) {
    return this.splitUsingKey(key, false);
  }
  splitAfterKey(key) {
    return this.splitUsingKey(key, true);
  }
  getInstructionsWithSigners() {
    return this.records;
  }
  getInstructions() {
    return this.records.map((record) => record.instruction);
  }
  getInstructionCount() {
    return this.records.length;
  }
  isEmpty() {
    return this.getInstructionCount() === 0;
  }
  getSigners() {
    const feePayer = this.feePayer == null ? [] : [this.feePayer];
    const signers = this.records.flatMap((record) => record.signers);
    return [...feePayer, ...signers];
  }
  setTransactionOptions(transactionOptions) {
    this.transactionOptions = transactionOptions;
    return this;
  }
  getTransactionOptions() {
    return this.transactionOptions;
  }
  setFeePayer(feePayer) {
    this.feePayer = feePayer;
    return this;
  }
  getFeePayer() {
    return this.feePayer;
  }
  setContext(context) {
    this.context = context;
    return this;
  }
  getContext() {
    return this.context;
  }
  when(condition, callback) {
    return condition ? callback(this) : this;
  }
  unless(condition, callback) {
    return this.when(!condition, callback);
  }
  toTransaction(blockhashWithExpiryBlockHeight, options = {}) {
    options = __spreadValues(__spreadValues({}, this.getTransactionOptions()), options);
    const transaction = new Transaction({
      feePayer: this.getFeePayer()?.publicKey,
      signatures: options.signatures,
      blockhash: blockhashWithExpiryBlockHeight.blockhash,
      lastValidBlockHeight: blockhashWithExpiryBlockHeight.lastValidBlockHeight
    });
    transaction.add(...this.getInstructions());
    return transaction;
  }
  sendAndConfirm(metaplex, confirmOptions) {
    return __async(this, null, function* () {
      const response = yield metaplex.rpc().sendAndConfirmTransaction(this, confirmOptions);
      return __spreadValues({
        response
      }, this.getContext());
    });
  }
};

// ../../node_modules/@metaplex-foundation/js/dist/esm/plugins/systemModule/operations/createAccount.mjs
var Key = "CreateAccountOperation";
var createAccountOperation = useOperation(Key);
var createAccountOperationHandler = {
  handle(operation, metaplex, scope) {
    return __async(this, null, function* () {
      const builder = yield createAccountBuilder(metaplex, operation.input, scope);
      scope.throwIfCanceled();
      return builder.sendAndConfirm(metaplex, scope.confirmOptions);
    });
  }
};
var createAccountBuilder = (_0, _1, ..._2) => __async(void 0, [_0, _1, ..._2], function* (metaplex, params, options = {}) {
  const {
    payer = metaplex.rpc().getDefaultFeePayer()
  } = options;
  const {
    space,
    newAccount = Keypair.generate(),
    program = SystemProgram.programId
  } = params;
  const lamports2 = params.lamports ?? (yield metaplex.rpc().getRent(space));
  assertSol(lamports2);
  return TransactionBuilder.make().setFeePayer(payer).setContext({
    newAccount,
    lamports: lamports2
  }).add({
    instruction: SystemProgram.createAccount({
      fromPubkey: payer.publicKey,
      newAccountPubkey: newAccount.publicKey,
      space,
      lamports: lamports2.basisPoints.toNumber(),
      programId: program
    }),
    signers: [payer, newAccount],
    key: params.instructionKey ?? "createAccount"
  });
});

// ../../node_modules/@metaplex-foundation/js/dist/esm/plugins/systemModule/operations/transferSol.mjs
init_index_browser_esm();
var Key2 = "TransferSolOperation";
var transferSolOperation = useOperation(Key2);
var transferSolOperationHandler = {
  handle(operation, metaplex, scope) {
    return __async(this, null, function* () {
      const builder = transferSolBuilder(metaplex, operation.input, scope);
      return builder.sendAndConfirm(metaplex, scope.confirmOptions);
    });
  }
};
var transferSolBuilder = (metaplex, params, options = {}) => {
  const {
    programs,
    payer = metaplex.rpc().getDefaultFeePayer()
  } = options;
  const {
    from = metaplex.identity(),
    to,
    amount: amount2,
    basePubkey,
    seed
  } = params;
  assertSol(amount2);
  return TransactionBuilder.make().setFeePayer(payer).add({
    instruction: SystemProgram.transfer(__spreadProps(__spreadValues({
      fromPubkey: from.publicKey,
      toPubkey: to,
      lamports: amount2.basisPoints.toNumber()
    }, basePubkey ? {
      basePubkey,
      seed
    } : {}), {
      programId: metaplex.programs().getSystem(programs).address
    })),
    signers: [from],
    key: params.instructionKey ?? "transferSol"
  });
};

// ../../node_modules/@metaplex-foundation/js/dist/esm/plugins/systemModule/SystemBuildersClient.mjs
var SystemBuildersClient = class {
  constructor(metaplex) {
    this.metaplex = metaplex;
  }
  /** {@inheritDoc createAccountBuilder} */
  createAccount(input, options) {
    return createAccountBuilder(this.metaplex, input, options);
  }
  /** {@inheritDoc transferSolBuilder} */
  transferSol(input, options) {
    return transferSolBuilder(this.metaplex, input, options);
  }
};

// ../../node_modules/@metaplex-foundation/js/dist/esm/plugins/systemModule/SystemClient.mjs
var SystemClient = class {
  constructor(metaplex) {
    this.metaplex = metaplex;
  }
  /**
   * You may use the `builders()` client to access the
   * underlying Transaction Builders of this module.
   *
   * ```ts
   * const buildersClient = metaplex.system().builders();
   * ```
   */
  builders() {
    return new SystemBuildersClient(this.metaplex);
  }
  /** {@inheritDoc createAccountOperation} */
  createAccount(input, options) {
    return this.metaplex.operations().execute(createAccountOperation(input), options);
  }
  /** {@inheritDoc transferSolOperation} */
  transferSol(input, options) {
    return this.metaplex.operations().execute(transferSolOperation(input), options);
  }
};

// ../../node_modules/@metaplex-foundation/js/dist/esm/plugins/systemModule/plugin.mjs
var systemModule = () => ({
  install(metaplex) {
    const systemProgram = {
      name: "SystemProgram",
      address: SystemProgram.programId
    };
    metaplex.programs().register(systemProgram);
    metaplex.programs().getSystem = function(programs) {
      return this.get(systemProgram.name, programs);
    };
    const op = metaplex.operations();
    op.register(createAccountOperation, createAccountOperationHandler);
    op.register(transferSolOperation, transferSolOperationHandler);
    metaplex.system = function() {
      return new SystemClient(this);
    };
  }
});

// ../../node_modules/@solana/spl-token/lib/esm/actions/amountToUiAmount.js
init_index_browser_esm();

// ../../node_modules/@solana/spl-token/lib/esm/constants.js
init_index_browser_esm();
var TOKEN_PROGRAM_ID2 = new PublicKey("TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA");
var TOKEN_2022_PROGRAM_ID = new PublicKey("TokenzQdBNbLqP5VEhdkAS6EPFLC1PHnBqCXEpPxuEb");
var ASSOCIATED_TOKEN_PROGRAM_ID2 = new PublicKey("ATokenGPvbdGVxr1b2hvZbsiqW5xWH25efTNsLJA8knL");
var NATIVE_MINT2 = new PublicKey("So11111111111111111111111111111111111111112");
var NATIVE_MINT_2022 = new PublicKey("9pan9bMn5HatX4EJdBwg9VgCa7Uz5HL8N1m5D3NdXejP");

// ../../node_modules/@solana/spl-token/lib/esm/instructions/amountToUiAmount.js
var import_buffer_layout4 = __toESM(require_Layout(), 1);

// ../../node_modules/@solana/buffer-layout-utils/lib/esm/base.mjs
var encodeDecode = (layout) => {
  const decode2 = layout.decode.bind(layout);
  const encode2 = layout.encode.bind(layout);
  return { decode: decode2, encode: encode2 };
};

// ../../node_modules/@solana/buffer-layout-utils/lib/esm/bigint.mjs
var import_buffer_layout = __toESM(require_Layout(), 1);
var import_bigint_buffer = __toESM(require_browser(), 1);
var bigInt = (length) => (property) => {
  const layout = (0, import_buffer_layout.blob)(length, property);
  const { encode: encode2, decode: decode2 } = encodeDecode(layout);
  const bigIntLayout = layout;
  bigIntLayout.decode = (buffer2, offset) => {
    const src = decode2(buffer2, offset);
    return (0, import_bigint_buffer.toBigIntLE)(Buffer.from(src));
  };
  bigIntLayout.encode = (bigInt2, buffer2, offset) => {
    const src = (0, import_bigint_buffer.toBufferLE)(bigInt2, length);
    return encode2(src, buffer2, offset);
  };
  return bigIntLayout;
};
var bigIntBE = (length) => (property) => {
  const layout = (0, import_buffer_layout.blob)(length, property);
  const { encode: encode2, decode: decode2 } = encodeDecode(layout);
  const bigIntLayout = layout;
  bigIntLayout.decode = (buffer2, offset) => {
    const src = decode2(buffer2, offset);
    return (0, import_bigint_buffer.toBigIntBE)(Buffer.from(src));
  };
  bigIntLayout.encode = (bigInt2, buffer2, offset) => {
    const src = (0, import_bigint_buffer.toBufferBE)(bigInt2, length);
    return encode2(src, buffer2, offset);
  };
  return bigIntLayout;
};
var u642 = bigInt(8);
var u64be = bigIntBE(8);
var u128 = bigInt(16);
var u128be = bigIntBE(16);
var u192 = bigInt(24);
var u192be = bigIntBE(24);
var u256 = bigInt(32);
var u256be = bigIntBE(32);

// ../../node_modules/@solana/buffer-layout-utils/lib/esm/decimal.mjs
var WAD = new bignumber_default("1e+18");

// ../../node_modules/@solana/buffer-layout-utils/lib/esm/native.mjs
var import_buffer_layout2 = __toESM(require_Layout(), 1);
var bool = (property) => {
  const layout = (0, import_buffer_layout2.u8)(property);
  const { encode: encode2, decode: decode2 } = encodeDecode(layout);
  const boolLayout = layout;
  boolLayout.decode = (buffer2, offset) => {
    const src = decode2(buffer2, offset);
    return !!src;
  };
  boolLayout.encode = (bool2, buffer2, offset) => {
    const src = Number(bool2);
    return encode2(src, buffer2, offset);
  };
  return boolLayout;
};

// ../../node_modules/@solana/buffer-layout-utils/lib/esm/web3.mjs
var import_buffer_layout3 = __toESM(require_Layout(), 1);
init_index_browser_esm();
var publicKey2 = (property) => {
  const layout = (0, import_buffer_layout3.blob)(32, property);
  const { encode: encode2, decode: decode2 } = encodeDecode(layout);
  const publicKeyLayout = layout;
  publicKeyLayout.decode = (buffer2, offset) => {
    const src = decode2(buffer2, offset);
    return new PublicKey(src);
  };
  publicKeyLayout.encode = (publicKey3, buffer2, offset) => {
    const src = publicKey3.toBuffer();
    return encode2(src, buffer2, offset);
  };
  return publicKeyLayout;
};

// ../../node_modules/@solana/spl-token/lib/esm/instructions/amountToUiAmount.js
init_index_browser_esm();

// ../../node_modules/@solana/spl-token/lib/esm/instructions/types.js
var TokenInstruction;
(function(TokenInstruction2) {
  TokenInstruction2[TokenInstruction2["InitializeMint"] = 0] = "InitializeMint";
  TokenInstruction2[TokenInstruction2["InitializeAccount"] = 1] = "InitializeAccount";
  TokenInstruction2[TokenInstruction2["InitializeMultisig"] = 2] = "InitializeMultisig";
  TokenInstruction2[TokenInstruction2["Transfer"] = 3] = "Transfer";
  TokenInstruction2[TokenInstruction2["Approve"] = 4] = "Approve";
  TokenInstruction2[TokenInstruction2["Revoke"] = 5] = "Revoke";
  TokenInstruction2[TokenInstruction2["SetAuthority"] = 6] = "SetAuthority";
  TokenInstruction2[TokenInstruction2["MintTo"] = 7] = "MintTo";
  TokenInstruction2[TokenInstruction2["Burn"] = 8] = "Burn";
  TokenInstruction2[TokenInstruction2["CloseAccount"] = 9] = "CloseAccount";
  TokenInstruction2[TokenInstruction2["FreezeAccount"] = 10] = "FreezeAccount";
  TokenInstruction2[TokenInstruction2["ThawAccount"] = 11] = "ThawAccount";
  TokenInstruction2[TokenInstruction2["TransferChecked"] = 12] = "TransferChecked";
  TokenInstruction2[TokenInstruction2["ApproveChecked"] = 13] = "ApproveChecked";
  TokenInstruction2[TokenInstruction2["MintToChecked"] = 14] = "MintToChecked";
  TokenInstruction2[TokenInstruction2["BurnChecked"] = 15] = "BurnChecked";
  TokenInstruction2[TokenInstruction2["InitializeAccount2"] = 16] = "InitializeAccount2";
  TokenInstruction2[TokenInstruction2["SyncNative"] = 17] = "SyncNative";
  TokenInstruction2[TokenInstruction2["InitializeAccount3"] = 18] = "InitializeAccount3";
  TokenInstruction2[TokenInstruction2["InitializeMultisig2"] = 19] = "InitializeMultisig2";
  TokenInstruction2[TokenInstruction2["InitializeMint2"] = 20] = "InitializeMint2";
  TokenInstruction2[TokenInstruction2["GetAccountDataSize"] = 21] = "GetAccountDataSize";
  TokenInstruction2[TokenInstruction2["InitializeImmutableOwner"] = 22] = "InitializeImmutableOwner";
  TokenInstruction2[TokenInstruction2["AmountToUiAmount"] = 23] = "AmountToUiAmount";
  TokenInstruction2[TokenInstruction2["UiAmountToAmount"] = 24] = "UiAmountToAmount";
  TokenInstruction2[TokenInstruction2["InitializeMintCloseAuthority"] = 25] = "InitializeMintCloseAuthority";
  TokenInstruction2[TokenInstruction2["TransferFeeExtension"] = 26] = "TransferFeeExtension";
  TokenInstruction2[TokenInstruction2["ConfidentialTransferExtension"] = 27] = "ConfidentialTransferExtension";
  TokenInstruction2[TokenInstruction2["DefaultAccountStateExtension"] = 28] = "DefaultAccountStateExtension";
  TokenInstruction2[TokenInstruction2["Reallocate"] = 29] = "Reallocate";
  TokenInstruction2[TokenInstruction2["MemoTransferExtension"] = 30] = "MemoTransferExtension";
  TokenInstruction2[TokenInstruction2["CreateNativeMint"] = 31] = "CreateNativeMint";
  TokenInstruction2[TokenInstruction2["InitializeNonTransferableMint"] = 32] = "InitializeNonTransferableMint";
  TokenInstruction2[TokenInstruction2["InterestBearingMintExtension"] = 33] = "InterestBearingMintExtension";
  TokenInstruction2[TokenInstruction2["CpiGuardExtension"] = 34] = "CpiGuardExtension";
  TokenInstruction2[TokenInstruction2["InitializePermanentDelegate"] = 35] = "InitializePermanentDelegate";
  TokenInstruction2[TokenInstruction2["TransferHookExtension"] = 36] = "TransferHookExtension";
  TokenInstruction2[TokenInstruction2["MetadataPointerExtension"] = 39] = "MetadataPointerExtension";
})(TokenInstruction || (TokenInstruction = {}));

// ../../node_modules/@solana/spl-token/lib/esm/instructions/amountToUiAmount.js
var amountToUiAmountInstructionData = (0, import_buffer_layout4.struct)([
  (0, import_buffer_layout4.u8)("instruction"),
  u642("amount")
]);

// ../../node_modules/@solana/spl-token/lib/esm/actions/approve.js
init_index_browser_esm();

// ../../node_modules/@solana/spl-token/lib/esm/instructions/approve.js
var import_buffer_layout5 = __toESM(require_Layout(), 1);
init_index_browser_esm();

// ../../node_modules/@solana/spl-token/lib/esm/instructions/internal.js
init_index_browser_esm();
function addSigners(keys, ownerOrAuthority, multiSigners) {
  if (multiSigners.length) {
    keys.push({ pubkey: ownerOrAuthority, isSigner: false, isWritable: false });
    for (const signer of multiSigners) {
      keys.push({
        pubkey: signer instanceof PublicKey ? signer : signer.publicKey,
        isSigner: true,
        isWritable: false
      });
    }
  } else {
    keys.push({ pubkey: ownerOrAuthority, isSigner: true, isWritable: false });
  }
  return keys;
}

// ../../node_modules/@solana/spl-token/lib/esm/instructions/approve.js
var approveInstructionData = (0, import_buffer_layout5.struct)([(0, import_buffer_layout5.u8)("instruction"), u642("amount")]);
function createApproveInstruction(account, delegate, owner, amount2, multiSigners = [], programId = TOKEN_PROGRAM_ID2) {
  const keys = addSigners([
    { pubkey: account, isSigner: false, isWritable: true },
    { pubkey: delegate, isSigner: false, isWritable: false }
  ], owner, multiSigners);
  const data = Buffer.alloc(approveInstructionData.span);
  approveInstructionData.encode({
    instruction: TokenInstruction.Approve,
    amount: BigInt(amount2)
  }, data);
  return new TransactionInstruction({ keys, programId, data });
}

// ../../node_modules/@solana/spl-token/lib/esm/actions/internal.js
init_index_browser_esm();

// ../../node_modules/@solana/spl-token/lib/esm/actions/approveChecked.js
init_index_browser_esm();

// ../../node_modules/@solana/spl-token/lib/esm/instructions/approveChecked.js
var import_buffer_layout6 = __toESM(require_Layout(), 1);
init_index_browser_esm();
var approveCheckedInstructionData = (0, import_buffer_layout6.struct)([
  (0, import_buffer_layout6.u8)("instruction"),
  u642("amount"),
  (0, import_buffer_layout6.u8)("decimals")
]);

// ../../node_modules/@solana/spl-token/lib/esm/actions/burn.js
init_index_browser_esm();

// ../../node_modules/@solana/spl-token/lib/esm/instructions/burn.js
var import_buffer_layout7 = __toESM(require_Layout(), 1);
init_index_browser_esm();
var burnInstructionData = (0, import_buffer_layout7.struct)([(0, import_buffer_layout7.u8)("instruction"), u642("amount")]);

// ../../node_modules/@solana/spl-token/lib/esm/actions/burnChecked.js
init_index_browser_esm();

// ../../node_modules/@solana/spl-token/lib/esm/instructions/burnChecked.js
var import_buffer_layout8 = __toESM(require_Layout(), 1);
init_index_browser_esm();
var burnCheckedInstructionData = (0, import_buffer_layout8.struct)([
  (0, import_buffer_layout8.u8)("instruction"),
  u642("amount"),
  (0, import_buffer_layout8.u8)("decimals")
]);

// ../../node_modules/@solana/spl-token/lib/esm/actions/closeAccount.js
init_index_browser_esm();

// ../../node_modules/@solana/spl-token/lib/esm/instructions/closeAccount.js
var import_buffer_layout9 = __toESM(require_Layout(), 1);
init_index_browser_esm();
var closeAccountInstructionData = (0, import_buffer_layout9.struct)([(0, import_buffer_layout9.u8)("instruction")]);

// ../../node_modules/@solana/spl-token/lib/esm/actions/createAccount.js
init_index_browser_esm();

// ../../node_modules/@solana/spl-token/lib/esm/state/account.js
var import_buffer_layout11 = __toESM(require_Layout(), 1);

// ../../node_modules/@solana/spl-token/lib/esm/extensions/accountType.js
var AccountType;
(function(AccountType2) {
  AccountType2[AccountType2["Uninitialized"] = 0] = "Uninitialized";
  AccountType2[AccountType2["Mint"] = 1] = "Mint";
  AccountType2[AccountType2["Account"] = 2] = "Account";
})(AccountType || (AccountType = {}));

// ../../node_modules/@solana/spl-token/lib/esm/state/multisig.js
var import_buffer_layout10 = __toESM(require_Layout(), 1);
var MultisigLayout2 = (0, import_buffer_layout10.struct)([
  (0, import_buffer_layout10.u8)("m"),
  (0, import_buffer_layout10.u8)("n"),
  bool("isInitialized"),
  publicKey2("signer1"),
  publicKey2("signer2"),
  publicKey2("signer3"),
  publicKey2("signer4"),
  publicKey2("signer5"),
  publicKey2("signer6"),
  publicKey2("signer7"),
  publicKey2("signer8"),
  publicKey2("signer9"),
  publicKey2("signer10"),
  publicKey2("signer11")
]);
var MULTISIG_SIZE = MultisigLayout2.span;

// ../../node_modules/@solana/spl-token/lib/esm/state/account.js
var AccountState;
(function(AccountState2) {
  AccountState2[AccountState2["Uninitialized"] = 0] = "Uninitialized";
  AccountState2[AccountState2["Initialized"] = 1] = "Initialized";
  AccountState2[AccountState2["Frozen"] = 2] = "Frozen";
})(AccountState || (AccountState = {}));
var AccountLayout2 = (0, import_buffer_layout11.struct)([
  publicKey2("mint"),
  publicKey2("owner"),
  u642("amount"),
  (0, import_buffer_layout11.u32)("delegateOption"),
  publicKey2("delegate"),
  (0, import_buffer_layout11.u8)("state"),
  (0, import_buffer_layout11.u32)("isNativeOption"),
  u642("isNative"),
  u642("delegatedAmount"),
  (0, import_buffer_layout11.u32)("closeAuthorityOption"),
  publicKey2("closeAuthority")
]);
var ACCOUNT_SIZE = AccountLayout2.span;

// ../../node_modules/@solana/spl-token/lib/esm/state/mint.js
var import_buffer_layout12 = __toESM(require_Layout(), 1);
init_index_browser_esm();
var MintLayout2 = (0, import_buffer_layout12.struct)([
  (0, import_buffer_layout12.u32)("mintAuthorityOption"),
  publicKey2("mintAuthority"),
  u642("supply"),
  (0, import_buffer_layout12.u8)("decimals"),
  bool("isInitialized"),
  (0, import_buffer_layout12.u32)("freezeAuthorityOption"),
  publicKey2("freezeAuthority")
]);
var MINT_SIZE = MintLayout2.span;

// ../../node_modules/@solana/spl-token/lib/esm/extensions/cpiGuard/actions.js
init_index_browser_esm();

// ../../node_modules/@solana/spl-token/lib/esm/extensions/cpiGuard/instructions.js
var import_buffer_layout13 = __toESM(require_Layout(), 1);
init_index_browser_esm();
var CpiGuardInstruction;
(function(CpiGuardInstruction2) {
  CpiGuardInstruction2[CpiGuardInstruction2["Enable"] = 0] = "Enable";
  CpiGuardInstruction2[CpiGuardInstruction2["Disable"] = 1] = "Disable";
})(CpiGuardInstruction || (CpiGuardInstruction = {}));
var cpiGuardInstructionData = (0, import_buffer_layout13.struct)([(0, import_buffer_layout13.u8)("instruction"), (0, import_buffer_layout13.u8)("cpiGuardInstruction")]);

// ../../node_modules/@solana/spl-token/lib/esm/extensions/cpiGuard/state.js
var import_buffer_layout14 = __toESM(require_Layout(), 1);
var CpiGuardLayout = (0, import_buffer_layout14.struct)([bool("lockCpi")]);
var CPI_GUARD_SIZE = CpiGuardLayout.span;

// ../../node_modules/@solana/spl-token/lib/esm/extensions/defaultAccountState/actions.js
init_index_browser_esm();

// ../../node_modules/@solana/spl-token/lib/esm/extensions/defaultAccountState/instructions.js
var import_buffer_layout15 = __toESM(require_Layout(), 1);
init_index_browser_esm();
var DefaultAccountStateInstruction;
(function(DefaultAccountStateInstruction2) {
  DefaultAccountStateInstruction2[DefaultAccountStateInstruction2["Initialize"] = 0] = "Initialize";
  DefaultAccountStateInstruction2[DefaultAccountStateInstruction2["Update"] = 1] = "Update";
})(DefaultAccountStateInstruction || (DefaultAccountStateInstruction = {}));
var defaultAccountStateInstructionData = (0, import_buffer_layout15.struct)([
  (0, import_buffer_layout15.u8)("instruction"),
  (0, import_buffer_layout15.u8)("defaultAccountStateInstruction"),
  (0, import_buffer_layout15.u8)("accountState")
]);

// ../../node_modules/@solana/spl-token/lib/esm/extensions/defaultAccountState/state.js
var import_buffer_layout16 = __toESM(require_Layout(), 1);
var DefaultAccountStateLayout = (0, import_buffer_layout16.struct)([(0, import_buffer_layout16.u8)("state")]);
var DEFAULT_ACCOUNT_STATE_SIZE = DefaultAccountStateLayout.span;

// ../../node_modules/@solana/spl-token/lib/esm/extensions/immutableOwner.js
var import_buffer_layout17 = __toESM(require_Layout(), 1);
var ImmutableOwnerLayout = (0, import_buffer_layout17.struct)([]);
var IMMUTABLE_OWNER_SIZE = ImmutableOwnerLayout.span;

// ../../node_modules/@solana/spl-token/lib/esm/extensions/interestBearingMint/state.js
var import_buffer_layout18 = __toESM(require_Layout(), 1);
var InterestBearingMintConfigStateLayout = (0, import_buffer_layout18.struct)([
  publicKey2("rateAuthority"),
  (0, import_buffer_layout18.ns64)("initializationTimestamp"),
  (0, import_buffer_layout18.s16)("preUpdateAverageRate"),
  (0, import_buffer_layout18.ns64)("lastUpdateTimestamp"),
  (0, import_buffer_layout18.s16)("currentRate")
]);
var INTEREST_BEARING_MINT_CONFIG_STATE_SIZE = InterestBearingMintConfigStateLayout.span;

// ../../node_modules/@solana/spl-token/lib/esm/extensions/memoTransfer/actions.js
init_index_browser_esm();

// ../../node_modules/@solana/spl-token/lib/esm/extensions/memoTransfer/instructions.js
var import_buffer_layout19 = __toESM(require_Layout(), 1);
init_index_browser_esm();
var MemoTransferInstruction;
(function(MemoTransferInstruction2) {
  MemoTransferInstruction2[MemoTransferInstruction2["Enable"] = 0] = "Enable";
  MemoTransferInstruction2[MemoTransferInstruction2["Disable"] = 1] = "Disable";
})(MemoTransferInstruction || (MemoTransferInstruction = {}));
var memoTransferInstructionData = (0, import_buffer_layout19.struct)([
  (0, import_buffer_layout19.u8)("instruction"),
  (0, import_buffer_layout19.u8)("memoTransferInstruction")
]);

// ../../node_modules/@solana/spl-token/lib/esm/extensions/memoTransfer/state.js
var import_buffer_layout20 = __toESM(require_Layout(), 1);
var MemoTransferLayout = (0, import_buffer_layout20.struct)([bool("requireIncomingTransferMemos")]);
var MEMO_TRANSFER_SIZE = MemoTransferLayout.span;

// ../../node_modules/@solana/spl-token/lib/esm/extensions/metadataPointer/state.js
var import_buffer_layout21 = __toESM(require_Layout(), 1);
init_index_browser_esm();
var MetadataPointerLayout = (0, import_buffer_layout21.struct)([
  publicKey2("authority"),
  publicKey2("metadataAddress")
]);
var METADATA_POINTER_SIZE = MetadataPointerLayout.span;

// ../../node_modules/@solana/spl-token/lib/esm/extensions/mintCloseAuthority.js
var import_buffer_layout22 = __toESM(require_Layout(), 1);
var MintCloseAuthorityLayout = (0, import_buffer_layout22.struct)([publicKey2("closeAuthority")]);
var MINT_CLOSE_AUTHORITY_SIZE = MintCloseAuthorityLayout.span;

// ../../node_modules/@solana/spl-token/lib/esm/extensions/nonTransferable.js
var import_buffer_layout23 = __toESM(require_Layout(), 1);
var NonTransferableLayout = (0, import_buffer_layout23.struct)([]);
var NON_TRANSFERABLE_SIZE = NonTransferableLayout.span;
var NON_TRANSFERABLE_ACCOUNT_SIZE = NonTransferableLayout.span;

// ../../node_modules/@solana/spl-token/lib/esm/extensions/permanentDelegate.js
var import_buffer_layout24 = __toESM(require_Layout(), 1);
var PermanentDelegateLayout = (0, import_buffer_layout24.struct)([publicKey2("delegate")]);
var PERMANENT_DELEGATE_SIZE = PermanentDelegateLayout.span;

// ../../node_modules/@solana/spl-token/lib/esm/extensions/transferFee/actions.js
init_index_browser_esm();

// ../../node_modules/@solana/spl-token/lib/esm/extensions/transferFee/instructions.js
var import_buffer_layout25 = __toESM(require_Layout(), 1);
init_index_browser_esm();
var TransferFeeInstruction;
(function(TransferFeeInstruction2) {
  TransferFeeInstruction2[TransferFeeInstruction2["InitializeTransferFeeConfig"] = 0] = "InitializeTransferFeeConfig";
  TransferFeeInstruction2[TransferFeeInstruction2["TransferCheckedWithFee"] = 1] = "TransferCheckedWithFee";
  TransferFeeInstruction2[TransferFeeInstruction2["WithdrawWithheldTokensFromMint"] = 2] = "WithdrawWithheldTokensFromMint";
  TransferFeeInstruction2[TransferFeeInstruction2["WithdrawWithheldTokensFromAccounts"] = 3] = "WithdrawWithheldTokensFromAccounts";
  TransferFeeInstruction2[TransferFeeInstruction2["HarvestWithheldTokensToMint"] = 4] = "HarvestWithheldTokensToMint";
  TransferFeeInstruction2[TransferFeeInstruction2["SetTransferFee"] = 5] = "SetTransferFee";
})(TransferFeeInstruction || (TransferFeeInstruction = {}));
var initializeTransferFeeConfigInstructionData = (0, import_buffer_layout25.struct)([
  (0, import_buffer_layout25.u8)("instruction"),
  (0, import_buffer_layout25.u8)("transferFeeInstruction"),
  (0, import_buffer_layout25.u8)("transferFeeConfigAuthorityOption"),
  publicKey2("transferFeeConfigAuthority"),
  (0, import_buffer_layout25.u8)("withdrawWithheldAuthorityOption"),
  publicKey2("withdrawWithheldAuthority"),
  (0, import_buffer_layout25.u16)("transferFeeBasisPoints"),
  u642("maximumFee")
]);
var transferCheckedWithFeeInstructionData = (0, import_buffer_layout25.struct)([
  (0, import_buffer_layout25.u8)("instruction"),
  (0, import_buffer_layout25.u8)("transferFeeInstruction"),
  u642("amount"),
  (0, import_buffer_layout25.u8)("decimals"),
  u642("fee")
]);
var withdrawWithheldTokensFromMintInstructionData = (0, import_buffer_layout25.struct)([
  (0, import_buffer_layout25.u8)("instruction"),
  (0, import_buffer_layout25.u8)("transferFeeInstruction")
]);
var withdrawWithheldTokensFromAccountsInstructionData = (0, import_buffer_layout25.struct)([
  (0, import_buffer_layout25.u8)("instruction"),
  (0, import_buffer_layout25.u8)("transferFeeInstruction"),
  (0, import_buffer_layout25.u8)("numTokenAccounts")
]);
var harvestWithheldTokensToMintInstructionData = (0, import_buffer_layout25.struct)([
  (0, import_buffer_layout25.u8)("instruction"),
  (0, import_buffer_layout25.u8)("transferFeeInstruction")
]);

// ../../node_modules/@solana/spl-token/lib/esm/extensions/transferFee/state.js
var import_buffer_layout26 = __toESM(require_Layout(), 1);
var MAX_FEE_BASIS_POINTS = 1e4;
var ONE_IN_BASIS_POINTS = BigInt(MAX_FEE_BASIS_POINTS);
function transferFeeLayout(property) {
  return (0, import_buffer_layout26.struct)([u642("epoch"), u642("maximumFee"), (0, import_buffer_layout26.u16)("transferFeeBasisPoints")], property);
}
var TransferFeeConfigLayout = (0, import_buffer_layout26.struct)([
  publicKey2("transferFeeConfigAuthority"),
  publicKey2("withdrawWithheldAuthority"),
  u642("withheldAmount"),
  transferFeeLayout("olderTransferFee"),
  transferFeeLayout("newerTransferFee")
]);
var TRANSFER_FEE_CONFIG_SIZE = TransferFeeConfigLayout.span;
var TransferFeeAmountLayout = (0, import_buffer_layout26.struct)([u642("withheldAmount")]);
var TRANSFER_FEE_AMOUNT_SIZE = TransferFeeAmountLayout.span;

// ../../node_modules/@solana/spl-token/lib/esm/extensions/transferHook/actions.js
init_index_browser_esm();

// ../../node_modules/@solana/spl-token/lib/esm/extensions/transferHook/instructions.js
var import_buffer_layout29 = __toESM(require_Layout(), 1);
init_index_browser_esm();

// ../../node_modules/@solana/spl-token/lib/esm/instructions/transferChecked.js
var import_buffer_layout27 = __toESM(require_Layout(), 1);
init_index_browser_esm();
var transferCheckedInstructionData = (0, import_buffer_layout27.struct)([
  (0, import_buffer_layout27.u8)("instruction"),
  u642("amount"),
  (0, import_buffer_layout27.u8)("decimals")
]);

// ../../node_modules/@solana/spl-token/lib/esm/extensions/transferHook/state.js
var import_buffer_layout28 = __toESM(require_Layout(), 1);
init_index_browser_esm();
var TransferHookLayout = (0, import_buffer_layout28.struct)([publicKey2("authority"), publicKey2("programId")]);
var TRANSFER_HOOK_SIZE = TransferHookLayout.span;
var TransferHookAccountLayout = (0, import_buffer_layout28.struct)([bool("transferring")]);
var TRANSFER_HOOK_ACCOUNT_SIZE = TransferHookAccountLayout.span;
var ExtraAccountMetaLayout = (0, import_buffer_layout28.struct)([
  (0, import_buffer_layout28.u8)("discriminator"),
  (0, import_buffer_layout28.blob)(32, "addressConfig"),
  bool("isSigner"),
  bool("isWritable")
]);
var ExtraAccountMetaListLayout = (0, import_buffer_layout28.struct)([
  (0, import_buffer_layout28.u32)("count"),
  (0, import_buffer_layout28.seq)(ExtraAccountMetaLayout, (0, import_buffer_layout28.greedy)(ExtraAccountMetaLayout.span), "extraAccounts")
]);
var ExtraAccountMetaAccountDataLayout = (0, import_buffer_layout28.struct)([
  u642("instructionDiscriminator"),
  (0, import_buffer_layout28.u32)("length"),
  ExtraAccountMetaListLayout.replicate("extraAccountsList")
]);

// ../../node_modules/@solana/spl-token/lib/esm/extensions/transferHook/instructions.js
var TransferHookInstruction;
(function(TransferHookInstruction2) {
  TransferHookInstruction2[TransferHookInstruction2["Initialize"] = 0] = "Initialize";
  TransferHookInstruction2[TransferHookInstruction2["Update"] = 1] = "Update";
})(TransferHookInstruction || (TransferHookInstruction = {}));
var initializeTransferHookInstructionData = (0, import_buffer_layout29.struct)([
  (0, import_buffer_layout29.u8)("instruction"),
  (0, import_buffer_layout29.u8)("transferHookInstruction"),
  publicKey2("authority"),
  publicKey2("transferHookProgramId")
]);
var updateTransferHookInstructionData = (0, import_buffer_layout29.struct)([
  (0, import_buffer_layout29.u8)("instruction"),
  (0, import_buffer_layout29.u8)("transferHookInstruction"),
  publicKey2("transferHookProgramId")
]);

// ../../node_modules/@solana/spl-token/lib/esm/extensions/extensionType.js
var ExtensionType;
(function(ExtensionType2) {
  ExtensionType2[ExtensionType2["Uninitialized"] = 0] = "Uninitialized";
  ExtensionType2[ExtensionType2["TransferFeeConfig"] = 1] = "TransferFeeConfig";
  ExtensionType2[ExtensionType2["TransferFeeAmount"] = 2] = "TransferFeeAmount";
  ExtensionType2[ExtensionType2["MintCloseAuthority"] = 3] = "MintCloseAuthority";
  ExtensionType2[ExtensionType2["ConfidentialTransferMint"] = 4] = "ConfidentialTransferMint";
  ExtensionType2[ExtensionType2["ConfidentialTransferAccount"] = 5] = "ConfidentialTransferAccount";
  ExtensionType2[ExtensionType2["DefaultAccountState"] = 6] = "DefaultAccountState";
  ExtensionType2[ExtensionType2["ImmutableOwner"] = 7] = "ImmutableOwner";
  ExtensionType2[ExtensionType2["MemoTransfer"] = 8] = "MemoTransfer";
  ExtensionType2[ExtensionType2["NonTransferable"] = 9] = "NonTransferable";
  ExtensionType2[ExtensionType2["InterestBearingConfig"] = 10] = "InterestBearingConfig";
  ExtensionType2[ExtensionType2["CpiGuard"] = 11] = "CpiGuard";
  ExtensionType2[ExtensionType2["PermanentDelegate"] = 12] = "PermanentDelegate";
  ExtensionType2[ExtensionType2["NonTransferableAccount"] = 13] = "NonTransferableAccount";
  ExtensionType2[ExtensionType2["TransferHook"] = 14] = "TransferHook";
  ExtensionType2[ExtensionType2["TransferHookAccount"] = 15] = "TransferHookAccount";
  ExtensionType2[ExtensionType2["MetadataPointer"] = 18] = "MetadataPointer";
  ExtensionType2[ExtensionType2["TokenMetadata"] = 19] = "TokenMetadata";
})(ExtensionType || (ExtensionType = {}));

// ../../node_modules/@solana/spl-token/lib/esm/instructions/initializeAccount.js
var import_buffer_layout30 = __toESM(require_Layout(), 1);
init_index_browser_esm();
var initializeAccountInstructionData = (0, import_buffer_layout30.struct)([(0, import_buffer_layout30.u8)("instruction")]);
function createInitializeAccountInstruction(account, mint, owner, programId = TOKEN_PROGRAM_ID2) {
  const keys = [
    { pubkey: account, isSigner: false, isWritable: true },
    { pubkey: mint, isSigner: false, isWritable: false },
    { pubkey: owner, isSigner: false, isWritable: false },
    { pubkey: SYSVAR_RENT_PUBKEY, isSigner: false, isWritable: false }
  ];
  const data = Buffer.alloc(initializeAccountInstructionData.span);
  initializeAccountInstructionData.encode({ instruction: TokenInstruction.InitializeAccount }, data);
  return new TransactionInstruction({ keys, programId, data });
}

// ../../node_modules/@solana/spl-token/lib/esm/actions/createAssociatedTokenAccount.js
init_index_browser_esm();

// ../../node_modules/@solana/spl-token/lib/esm/instructions/associatedTokenAccount.js
init_index_browser_esm();
function createAssociatedTokenAccountInstruction(payer, associatedToken, owner, mint, programId = TOKEN_PROGRAM_ID2, associatedTokenProgramId = ASSOCIATED_TOKEN_PROGRAM_ID2) {
  return buildAssociatedTokenAccountInstruction(payer, associatedToken, owner, mint, Buffer.alloc(0), programId, associatedTokenProgramId);
}
function buildAssociatedTokenAccountInstruction(payer, associatedToken, owner, mint, instructionData, programId = TOKEN_PROGRAM_ID2, associatedTokenProgramId = ASSOCIATED_TOKEN_PROGRAM_ID2) {
  const keys = [
    { pubkey: payer, isSigner: true, isWritable: true },
    { pubkey: associatedToken, isSigner: false, isWritable: true },
    { pubkey: owner, isSigner: false, isWritable: false },
    { pubkey: mint, isSigner: false, isWritable: false },
    { pubkey: SystemProgram.programId, isSigner: false, isWritable: false },
    { pubkey: programId, isSigner: false, isWritable: false }
  ];
  return new TransactionInstruction({
    keys,
    programId: associatedTokenProgramId,
    data: instructionData
  });
}

// ../../node_modules/@solana/spl-token/lib/esm/actions/createAssociatedTokenAccountIdempotent.js
init_index_browser_esm();

// ../../node_modules/@solana/spl-token/lib/esm/actions/createMint.js
init_index_browser_esm();

// ../../node_modules/@solana/spl-token/lib/esm/instructions/initializeMint2.js
var import_buffer_layout31 = __toESM(require_Layout(), 1);
init_index_browser_esm();
var initializeMint2InstructionData = (0, import_buffer_layout31.struct)([
  (0, import_buffer_layout31.u8)("instruction"),
  (0, import_buffer_layout31.u8)("decimals"),
  publicKey2("mintAuthority"),
  (0, import_buffer_layout31.u8)("freezeAuthorityOption"),
  publicKey2("freezeAuthority")
]);

// ../../node_modules/@solana/spl-token/lib/esm/actions/createMultisig.js
init_index_browser_esm();

// ../../node_modules/@solana/spl-token/lib/esm/instructions/initializeMultisig.js
var import_buffer_layout32 = __toESM(require_Layout(), 1);
init_index_browser_esm();
var initializeMultisigInstructionData = (0, import_buffer_layout32.struct)([
  (0, import_buffer_layout32.u8)("instruction"),
  (0, import_buffer_layout32.u8)("m")
]);

// ../../node_modules/@solana/spl-token/lib/esm/actions/createNativeMint.js
init_index_browser_esm();

// ../../node_modules/@solana/spl-token/lib/esm/instructions/createNativeMint.js
var import_buffer_layout33 = __toESM(require_Layout(), 1);
init_index_browser_esm();
var createNativeMintInstructionData = (0, import_buffer_layout33.struct)([(0, import_buffer_layout33.u8)("instruction")]);

// ../../node_modules/@solana/spl-token/lib/esm/actions/createWrappedNativeAccount.js
init_index_browser_esm();

// ../../node_modules/@solana/spl-token/lib/esm/instructions/syncNative.js
var import_buffer_layout34 = __toESM(require_Layout(), 1);
init_index_browser_esm();
var syncNativeInstructionData = (0, import_buffer_layout34.struct)([(0, import_buffer_layout34.u8)("instruction")]);

// ../../node_modules/@solana/spl-token/lib/esm/actions/freezeAccount.js
init_index_browser_esm();

// ../../node_modules/@solana/spl-token/lib/esm/instructions/freezeAccount.js
var import_buffer_layout35 = __toESM(require_Layout(), 1);
init_index_browser_esm();
var freezeAccountInstructionData = (0, import_buffer_layout35.struct)([(0, import_buffer_layout35.u8)("instruction")]);
function createFreezeAccountInstruction(account, mint, authority, multiSigners = [], programId = TOKEN_PROGRAM_ID2) {
  const keys = addSigners([
    { pubkey: account, isSigner: false, isWritable: true },
    { pubkey: mint, isSigner: false, isWritable: false }
  ], authority, multiSigners);
  const data = Buffer.alloc(freezeAccountInstructionData.span);
  freezeAccountInstructionData.encode({ instruction: TokenInstruction.FreezeAccount }, data);
  return new TransactionInstruction({ keys, programId, data });
}

// ../../node_modules/@solana/spl-token/lib/esm/actions/getOrCreateAssociatedTokenAccount.js
init_index_browser_esm();

// ../../node_modules/@solana/spl-token/lib/esm/actions/mintTo.js
init_index_browser_esm();

// ../../node_modules/@solana/spl-token/lib/esm/instructions/mintTo.js
var import_buffer_layout36 = __toESM(require_Layout(), 1);
init_index_browser_esm();
var mintToInstructionData = (0, import_buffer_layout36.struct)([(0, import_buffer_layout36.u8)("instruction"), u642("amount")]);
function createMintToInstruction(mint, destination, authority, amount2, multiSigners = [], programId = TOKEN_PROGRAM_ID2) {
  const keys = addSigners([
    { pubkey: mint, isSigner: false, isWritable: true },
    { pubkey: destination, isSigner: false, isWritable: true }
  ], authority, multiSigners);
  const data = Buffer.alloc(mintToInstructionData.span);
  mintToInstructionData.encode({
    instruction: TokenInstruction.MintTo,
    amount: BigInt(amount2)
  }, data);
  return new TransactionInstruction({ keys, programId, data });
}

// ../../node_modules/@solana/spl-token/lib/esm/actions/mintToChecked.js
init_index_browser_esm();

// ../../node_modules/@solana/spl-token/lib/esm/instructions/mintToChecked.js
var import_buffer_layout37 = __toESM(require_Layout(), 1);
init_index_browser_esm();
var mintToCheckedInstructionData = (0, import_buffer_layout37.struct)([
  (0, import_buffer_layout37.u8)("instruction"),
  u642("amount"),
  (0, import_buffer_layout37.u8)("decimals")
]);

// ../../node_modules/@solana/spl-token/lib/esm/actions/recoverNested.js
init_index_browser_esm();

// ../../node_modules/@solana/spl-token/lib/esm/actions/revoke.js
init_index_browser_esm();

// ../../node_modules/@solana/spl-token/lib/esm/instructions/revoke.js
var import_buffer_layout38 = __toESM(require_Layout(), 1);
init_index_browser_esm();
var revokeInstructionData = (0, import_buffer_layout38.struct)([(0, import_buffer_layout38.u8)("instruction")]);
function createRevokeInstruction(account, owner, multiSigners = [], programId = TOKEN_PROGRAM_ID2) {
  const keys = addSigners([{ pubkey: account, isSigner: false, isWritable: true }], owner, multiSigners);
  const data = Buffer.alloc(revokeInstructionData.span);
  revokeInstructionData.encode({ instruction: TokenInstruction.Revoke }, data);
  return new TransactionInstruction({ keys, programId, data });
}

// ../../node_modules/@solana/spl-token/lib/esm/actions/setAuthority.js
init_index_browser_esm();

// ../../node_modules/@solana/spl-token/lib/esm/instructions/setAuthority.js
var import_buffer_layout39 = __toESM(require_Layout(), 1);
init_index_browser_esm();
var AuthorityType;
(function(AuthorityType3) {
  AuthorityType3[AuthorityType3["MintTokens"] = 0] = "MintTokens";
  AuthorityType3[AuthorityType3["FreezeAccount"] = 1] = "FreezeAccount";
  AuthorityType3[AuthorityType3["AccountOwner"] = 2] = "AccountOwner";
  AuthorityType3[AuthorityType3["CloseAccount"] = 3] = "CloseAccount";
  AuthorityType3[AuthorityType3["TransferFeeConfig"] = 4] = "TransferFeeConfig";
  AuthorityType3[AuthorityType3["WithheldWithdraw"] = 5] = "WithheldWithdraw";
  AuthorityType3[AuthorityType3["CloseMint"] = 6] = "CloseMint";
  AuthorityType3[AuthorityType3["InterestRate"] = 7] = "InterestRate";
  AuthorityType3[AuthorityType3["PermanentDelegate"] = 8] = "PermanentDelegate";
  AuthorityType3[AuthorityType3["ConfidentialTransferMint"] = 9] = "ConfidentialTransferMint";
  AuthorityType3[AuthorityType3["TransferHookProgramId"] = 10] = "TransferHookProgramId";
  AuthorityType3[AuthorityType3["ConfidentialTransferFeeConfig"] = 11] = "ConfidentialTransferFeeConfig";
  AuthorityType3[AuthorityType3["MetadataPointer"] = 12] = "MetadataPointer";
})(AuthorityType || (AuthorityType = {}));
var setAuthorityInstructionData = (0, import_buffer_layout39.struct)([
  (0, import_buffer_layout39.u8)("instruction"),
  (0, import_buffer_layout39.u8)("authorityType"),
  (0, import_buffer_layout39.u8)("newAuthorityOption"),
  publicKey2("newAuthority")
]);

// ../../node_modules/@solana/spl-token/lib/esm/actions/syncNative.js
init_index_browser_esm();

// ../../node_modules/@solana/spl-token/lib/esm/actions/thawAccount.js
init_index_browser_esm();

// ../../node_modules/@solana/spl-token/lib/esm/instructions/thawAccount.js
var import_buffer_layout40 = __toESM(require_Layout(), 1);
init_index_browser_esm();
var thawAccountInstructionData = (0, import_buffer_layout40.struct)([(0, import_buffer_layout40.u8)("instruction")]);
function createThawAccountInstruction(account, mint, authority, multiSigners = [], programId = TOKEN_PROGRAM_ID2) {
  const keys = addSigners([
    { pubkey: account, isSigner: false, isWritable: true },
    { pubkey: mint, isSigner: false, isWritable: false }
  ], authority, multiSigners);
  const data = Buffer.alloc(thawAccountInstructionData.span);
  thawAccountInstructionData.encode({ instruction: TokenInstruction.ThawAccount }, data);
  return new TransactionInstruction({ keys, programId, data });
}

// ../../node_modules/@solana/spl-token/lib/esm/actions/transfer.js
init_index_browser_esm();

// ../../node_modules/@solana/spl-token/lib/esm/instructions/transfer.js
var import_buffer_layout41 = __toESM(require_Layout(), 1);
init_index_browser_esm();
var transferInstructionData = (0, import_buffer_layout41.struct)([(0, import_buffer_layout41.u8)("instruction"), u642("amount")]);
function createTransferInstruction(source, destination, owner, amount2, multiSigners = [], programId = TOKEN_PROGRAM_ID2) {
  const keys = addSigners([
    { pubkey: source, isSigner: false, isWritable: true },
    { pubkey: destination, isSigner: false, isWritable: true }
  ], owner, multiSigners);
  const data = Buffer.alloc(transferInstructionData.span);
  transferInstructionData.encode({
    instruction: TokenInstruction.Transfer,
    amount: BigInt(amount2)
  }, data);
  return new TransactionInstruction({ keys, programId, data });
}

// ../../node_modules/@solana/spl-token/lib/esm/actions/transferChecked.js
init_index_browser_esm();

// ../../node_modules/@solana/spl-token/lib/esm/actions/uiAmountToAmount.js
init_index_browser_esm();

// ../../node_modules/@solana/spl-token/lib/esm/instructions/uiAmountToAmount.js
var import_buffer_layout42 = __toESM(require_Layout(), 1);
init_index_browser_esm();

// ../../node_modules/@solana/spl-token/lib/esm/extensions/interestBearingMint/actions.js
init_index_browser_esm();

// ../../node_modules/@solana/spl-token/lib/esm/instructions/initializeMint.js
var import_buffer_layout43 = __toESM(require_Layout(), 1);
init_index_browser_esm();
var initializeMintInstructionData = (0, import_buffer_layout43.struct)([
  (0, import_buffer_layout43.u8)("instruction"),
  (0, import_buffer_layout43.u8)("decimals"),
  publicKey2("mintAuthority"),
  (0, import_buffer_layout43.u8)("freezeAuthorityOption"),
  publicKey2("freezeAuthority")
]);
function createInitializeMintInstruction(mint, decimals, mintAuthority, freezeAuthority, programId = TOKEN_PROGRAM_ID2) {
  const keys = [
    { pubkey: mint, isSigner: false, isWritable: true },
    { pubkey: SYSVAR_RENT_PUBKEY, isSigner: false, isWritable: false }
  ];
  const data = Buffer.alloc(initializeMintInstructionData.span);
  initializeMintInstructionData.encode({
    instruction: TokenInstruction.InitializeMint,
    decimals,
    mintAuthority,
    freezeAuthorityOption: freezeAuthority ? 1 : 0,
    freezeAuthority: freezeAuthority || new PublicKey(0)
  }, data);
  return new TransactionInstruction({ keys, programId, data });
}

// ../../node_modules/@solana/spl-token/lib/esm/extensions/interestBearingMint/instructions.js
var import_buffer_layout44 = __toESM(require_Layout(), 1);
init_index_browser_esm();
var InterestBearingMintInstruction;
(function(InterestBearingMintInstruction2) {
  InterestBearingMintInstruction2[InterestBearingMintInstruction2["Initialize"] = 0] = "Initialize";
  InterestBearingMintInstruction2[InterestBearingMintInstruction2["UpdateRate"] = 1] = "UpdateRate";
})(InterestBearingMintInstruction || (InterestBearingMintInstruction = {}));
var interestBearingMintInitializeInstructionData = (0, import_buffer_layout44.struct)([
  (0, import_buffer_layout44.u8)("instruction"),
  (0, import_buffer_layout44.u8)("interestBearingMintInstruction"),
  // TODO: Make this an optional public key
  publicKey2("rateAuthority"),
  (0, import_buffer_layout44.s16)("rate")
]);
var interestBearingMintUpdateRateInstructionData = (0, import_buffer_layout44.struct)([
  (0, import_buffer_layout44.u8)("instruction"),
  (0, import_buffer_layout44.u8)("interestBearingMintInstruction"),
  (0, import_buffer_layout44.s16)("rate")
]);

// ../../node_modules/@solana/spl-token/lib/esm/extensions/metadataPointer/instructions.js
var import_buffer_layout45 = __toESM(require_Layout(), 1);
init_index_browser_esm();
var MetadataPointerInstruction;
(function(MetadataPointerInstruction2) {
  MetadataPointerInstruction2[MetadataPointerInstruction2["Initialize"] = 0] = "Initialize";
  MetadataPointerInstruction2[MetadataPointerInstruction2["Update"] = 1] = "Update";
})(MetadataPointerInstruction || (MetadataPointerInstruction = {}));
var initializeMetadataPointerData = (0, import_buffer_layout45.struct)([
  // prettier-ignore
  (0, import_buffer_layout45.u8)("instruction"),
  (0, import_buffer_layout45.u8)("metadataPointerInstruction"),
  publicKey2("authority"),
  publicKey2("metadataAddress")
]);
var updateMetadataPointerData = (0, import_buffer_layout45.struct)([
  // prettier-ignore
  (0, import_buffer_layout45.u8)("instruction"),
  (0, import_buffer_layout45.u8)("metadataPointerInstruction"),
  publicKey2("metadataAddress")
]);

// ../../node_modules/@solana/spl-token/lib/esm/extensions/tokenMetadata/actions.js
init_index_browser_esm();

// ../../node_modules/@solana/codecs-core/dist/index.browser.js
function assertByteArrayIsNotEmptyForCodec(codecDescription, bytes, offset = 0) {
  if (bytes.length - offset <= 0) {
    throw new Error(`Codec [${codecDescription}] cannot decode empty byte arrays.`);
  }
}
function assertByteArrayHasEnoughBytesForCodec(codecDescription, expected, bytes, offset = 0) {
  const bytesLength = bytes.length - offset;
  if (bytesLength < expected) {
    throw new Error(`Codec [${codecDescription}] expected ${expected} bytes, got ${bytesLength}.`);
  }
}
var padBytes = (bytes, length) => {
  if (bytes.length >= length)
    return bytes;
  const paddedBytes = new Uint8Array(length).fill(0);
  paddedBytes.set(bytes);
  return paddedBytes;
};
var fixBytes = (bytes, length) => padBytes(bytes.length <= length ? bytes : bytes.slice(0, length), length);
function getEncodedSize(value, encoder) {
  return "fixedSize" in encoder ? encoder.fixedSize : encoder.getSizeFromValue(value);
}
function createEncoder(encoder) {
  return Object.freeze(__spreadProps(__spreadValues({}, encoder), {
    encode: (value) => {
      const bytes = new Uint8Array(getEncodedSize(value, encoder));
      encoder.write(value, bytes, 0);
      return bytes;
    }
  }));
}
function createDecoder(decoder) {
  return Object.freeze(__spreadProps(__spreadValues({}, decoder), {
    decode: (bytes, offset = 0) => decoder.read(bytes, offset)[0]
  }));
}
function isFixedSize(codec) {
  return "fixedSize" in codec && typeof codec.fixedSize === "number";
}
function assertIsFixedSize(codec, message) {
  if (!isFixedSize(codec)) {
    throw new Error(message ?? "Expected a fixed-size codec, got a variable-size one.");
  }
}
function combineCodec(encoder, decoder) {
  if (isFixedSize(encoder) !== isFixedSize(decoder)) {
    throw new Error(`Encoder and decoder must either both be fixed-size or variable-size.`);
  }
  if (isFixedSize(encoder) && isFixedSize(decoder) && encoder.fixedSize !== decoder.fixedSize) {
    throw new Error(
      `Encoder and decoder must have the same fixed size, got [${encoder.fixedSize}] and [${decoder.fixedSize}].`
    );
  }
  if (!isFixedSize(encoder) && !isFixedSize(decoder) && encoder.maxSize !== decoder.maxSize) {
    throw new Error(
      `Encoder and decoder must have the same max size, got [${encoder.maxSize}] and [${decoder.maxSize}].`
    );
  }
  return __spreadProps(__spreadValues(__spreadValues({}, decoder), encoder), {
    decode: decoder.decode,
    encode: encoder.encode,
    read: decoder.read,
    write: encoder.write
  });
}
function fixEncoder(encoder, fixedBytes) {
  return createEncoder({
    fixedSize: fixedBytes,
    write: (value, bytes, offset) => {
      const variableByteArray = encoder.encode(value);
      const fixedByteArray = variableByteArray.length > fixedBytes ? variableByteArray.slice(0, fixedBytes) : variableByteArray;
      bytes.set(fixedByteArray, offset);
      return offset + fixedBytes;
    }
  });
}
function fixDecoder(decoder, fixedBytes) {
  return createDecoder({
    fixedSize: fixedBytes,
    read: (bytes, offset) => {
      assertByteArrayHasEnoughBytesForCodec("fixCodec", fixedBytes, bytes, offset);
      if (offset > 0 || bytes.length > fixedBytes) {
        bytes = bytes.slice(offset, offset + fixedBytes);
      }
      if (isFixedSize(decoder)) {
        bytes = fixBytes(bytes, decoder.fixedSize);
      }
      const [value] = decoder.read(bytes, 0);
      return [value, offset + fixedBytes];
    }
  });
}

// ../../node_modules/@solana/codecs-numbers/dist/index.browser.js
function assertNumberIsBetweenForCodec(codecDescription, min, max, value) {
  if (value < min || value > max) {
    throw new Error(
      `Codec [${codecDescription}] expected number to be in the range [${min}, ${max}], got ${value}.`
    );
  }
}
var Endian = ((Endian2) => {
  Endian2[Endian2["LITTLE"] = 0] = "LITTLE";
  Endian2[Endian2["BIG"] = 1] = "BIG";
  return Endian2;
})(Endian || {});
function isLittleEndian(config) {
  return config?.endian === 1 ? false : true;
}
function numberEncoderFactory(input) {
  return createEncoder({
    fixedSize: input.size,
    write(value, bytes, offset) {
      if (input.range) {
        assertNumberIsBetweenForCodec(input.name, input.range[0], input.range[1], value);
      }
      const arrayBuffer = new ArrayBuffer(input.size);
      input.set(new DataView(arrayBuffer), value, isLittleEndian(input.config));
      bytes.set(new Uint8Array(arrayBuffer), offset);
      return offset + input.size;
    }
  });
}
function numberDecoderFactory(input) {
  return createDecoder({
    fixedSize: input.size,
    read(bytes, offset = 0) {
      assertByteArrayIsNotEmptyForCodec(input.name, bytes, offset);
      assertByteArrayHasEnoughBytesForCodec(input.name, input.size, bytes, offset);
      const view = new DataView(toArrayBuffer(bytes, offset, input.size));
      return [input.get(view, isLittleEndian(input.config)), offset + input.size];
    }
  });
}
function toArrayBuffer(bytes, offset, length) {
  const bytesOffset = bytes.byteOffset + (offset ?? 0);
  const bytesLength = length ?? bytes.byteLength;
  return bytes.buffer.slice(bytesOffset, bytesOffset + bytesLength);
}
var getU32Encoder = (config = {}) => numberEncoderFactory({
  config,
  name: "u32",
  range: [0, Number("0xffffffff")],
  set: (view, value, le) => view.setUint32(0, value, le),
  size: 4
});
var getU32Decoder = (config = {}) => numberDecoderFactory({
  config,
  get: (view, le) => view.getUint32(0, le),
  name: "u32",
  size: 4
});

// ../../node_modules/@solana/codecs-data-structures/dist/index.browser.js
function assertValidNumberOfItemsForCodec(codecDescription, expected, actual) {
  if (expected !== actual) {
    throw new Error(`Expected [${codecDescription}] to have ${expected} items, got ${actual}.`);
  }
}
function sumCodecSizes(sizes) {
  return sizes.reduce((all, size) => all === null || size === null ? null : all + size, 0);
}
function getFixedSize(codec) {
  return isFixedSize(codec) ? codec.fixedSize : null;
}
function getMaxSize(codec) {
  return isFixedSize(codec) ? codec.fixedSize : codec.maxSize ?? null;
}
function getArrayEncoder(item, config = {}) {
  const size = config.size ?? getU32Encoder();
  if (size === "remainder") {
    assertIsFixedSize(item, 'Codecs of "remainder" size must have fixed-size items.');
  }
  const fixedSize = computeArrayLikeCodecSize(size, getFixedSize(item));
  const maxSize = computeArrayLikeCodecSize(size, getMaxSize(item)) ?? void 0;
  return createEncoder(__spreadProps(__spreadValues({}, fixedSize !== null ? { fixedSize } : {
    getSizeFromValue: (array) => {
      const prefixSize = typeof size === "object" ? getEncodedSize(array.length, size) : 0;
      return prefixSize + [...array].reduce((all, value) => all + getEncodedSize(value, item), 0);
    },
    maxSize
  }), {
    write: (array, bytes, offset) => {
      if (typeof size === "number") {
        assertValidNumberOfItemsForCodec("array", size, array.length);
      }
      if (typeof size === "object") {
        offset = size.write(array.length, bytes, offset);
      }
      array.forEach((value) => {
        offset = item.write(value, bytes, offset);
      });
      return offset;
    }
  }));
}
function getArrayDecoder(item, config = {}) {
  const size = config.size ?? getU32Decoder();
  if (size === "remainder") {
    assertIsFixedSize(item, 'Codecs of "remainder" size must have fixed-size items.');
  }
  const itemSize = getFixedSize(item);
  const fixedSize = computeArrayLikeCodecSize(size, itemSize);
  const maxSize = computeArrayLikeCodecSize(size, getMaxSize(item)) ?? void 0;
  return createDecoder(__spreadProps(__spreadValues({}, fixedSize !== null ? { fixedSize } : { maxSize }), {
    read: (bytes, offset) => {
      const array = [];
      if (typeof size === "object" && bytes.slice(offset).length === 0) {
        return [array, offset];
      }
      const [resolvedSize, newOffset] = readArrayLikeCodecSize(size, itemSize, bytes, offset);
      offset = newOffset;
      for (let i = 0; i < resolvedSize; i += 1) {
        const [value, newOffset2] = item.read(bytes, offset);
        offset = newOffset2;
        array.push(value);
      }
      return [array, offset];
    }
  }));
}
function getArrayCodec(item, config = {}) {
  return combineCodec(getArrayEncoder(item, config), getArrayDecoder(item, config));
}
function readArrayLikeCodecSize(size, itemSize, bytes, offset) {
  if (typeof size === "number") {
    return [size, offset];
  }
  if (typeof size === "object") {
    return size.read(bytes, offset);
  }
  if (size === "remainder") {
    if (itemSize === null) {
      throw new Error('Codecs of "remainder" size must have fixed-size items.');
    }
    const remainder = Math.max(0, bytes.length - offset);
    if (remainder % itemSize !== 0) {
      throw new Error(
        `The remainder of the byte array (${remainder} bytes) cannot be split into chunks of ${itemSize} bytes. Codecs of "remainder" size must have a remainder that is a multiple of its item size. In other words, ${remainder} modulo ${itemSize} should be equal to zero.`
      );
    }
    return [remainder / itemSize, offset];
  }
  throw new Error(`Unrecognized array-like codec size: ${JSON.stringify(size)}`);
}
function computeArrayLikeCodecSize(size, itemSize) {
  if (typeof size !== "number")
    return null;
  if (size === 0)
    return 0;
  return itemSize === null ? null : itemSize * size;
}
function getBytesEncoder(config = {}) {
  const size = config.size ?? "variable";
  const byteEncoder = createEncoder({
    getSizeFromValue: (value) => value.length,
    write: (value, bytes, offset) => {
      bytes.set(value, offset);
      return offset + value.length;
    }
  });
  if (size === "variable") {
    return byteEncoder;
  }
  if (typeof size === "number") {
    return fixEncoder(byteEncoder, size);
  }
  return createEncoder({
    getSizeFromValue: (value) => getEncodedSize(value.length, size) + value.length,
    write: (value, bytes, offset) => {
      offset = size.write(value.length, bytes, offset);
      return byteEncoder.write(value, bytes, offset);
    }
  });
}
function getBytesDecoder(config = {}) {
  const size = config.size ?? "variable";
  const byteDecoder = createDecoder({
    read: (bytes, offset) => {
      const slice = bytes.slice(offset);
      return [slice, offset + slice.length];
    }
  });
  if (size === "variable") {
    return byteDecoder;
  }
  if (typeof size === "number") {
    return fixDecoder(byteDecoder, size);
  }
  return createDecoder({
    read: (bytes, offset) => {
      assertByteArrayIsNotEmptyForCodec("bytes", bytes, offset);
      const [lengthBigInt, lengthOffset] = size.read(bytes, offset);
      const length = Number(lengthBigInt);
      offset = lengthOffset;
      const contentBytes = bytes.slice(offset, offset + length);
      assertByteArrayHasEnoughBytesForCodec("bytes", length, contentBytes);
      const [value, contentOffset] = byteDecoder.read(contentBytes, 0);
      offset += contentOffset;
      return [value, offset];
    }
  });
}
function getBytesCodec(config = {}) {
  return combineCodec(getBytesEncoder(config), getBytesDecoder(config));
}
function getTupleEncoder(items) {
  const fixedSize = sumCodecSizes(items.map(getFixedSize));
  const maxSize = sumCodecSizes(items.map(getMaxSize)) ?? void 0;
  return createEncoder(__spreadProps(__spreadValues({}, fixedSize === null ? {
    getSizeFromValue: (value) => items.map((item, index) => getEncodedSize(value[index], item)).reduce((all, one) => all + one, 0),
    maxSize
  } : { fixedSize }), {
    write: (value, bytes, offset) => {
      assertValidNumberOfItemsForCodec("tuple", items.length, value.length);
      items.forEach((item, index) => {
        offset = item.write(value[index], bytes, offset);
      });
      return offset;
    }
  }));
}
function getTupleDecoder(items) {
  const fixedSize = sumCodecSizes(items.map(getFixedSize));
  const maxSize = sumCodecSizes(items.map(getMaxSize)) ?? void 0;
  return createDecoder(__spreadProps(__spreadValues({}, fixedSize === null ? { maxSize } : { fixedSize }), {
    read: (bytes, offset) => {
      const values = [];
      items.forEach((item) => {
        const [newValue, newOffset] = item.read(bytes, offset);
        values.push(newValue);
        offset = newOffset;
      });
      return [values, offset];
    }
  }));
}
function getTupleCodec(items) {
  return combineCodec(
    getTupleEncoder(items),
    getTupleDecoder(items)
  );
}
function getStructEncoder(fields) {
  const fieldCodecs = fields.map(([, codec]) => codec);
  const fixedSize = sumCodecSizes(fieldCodecs.map(getFixedSize));
  const maxSize = sumCodecSizes(fieldCodecs.map(getMaxSize)) ?? void 0;
  return createEncoder(__spreadProps(__spreadValues({}, fixedSize === null ? {
    getSizeFromValue: (value) => fields.map(([key, codec]) => getEncodedSize(value[key], codec)).reduce((all, one) => all + one, 0),
    maxSize
  } : { fixedSize }), {
    write: (struct51, bytes, offset) => {
      fields.forEach(([key, codec]) => {
        offset = codec.write(struct51[key], bytes, offset);
      });
      return offset;
    }
  }));
}
function getStructDecoder(fields) {
  const fieldCodecs = fields.map(([, codec]) => codec);
  const fixedSize = sumCodecSizes(fieldCodecs.map(getFixedSize));
  const maxSize = sumCodecSizes(fieldCodecs.map(getMaxSize)) ?? void 0;
  return createDecoder(__spreadProps(__spreadValues({}, fixedSize === null ? { maxSize } : { fixedSize }), {
    read: (bytes, offset) => {
      const struct51 = {};
      fields.forEach(([key, codec]) => {
        const [value, newOffset] = codec.read(bytes, offset);
        offset = newOffset;
        struct51[key] = value;
      });
      return [struct51, offset];
    }
  }));
}
function getStructCodec(fields) {
  return combineCodec(getStructEncoder(fields), getStructDecoder(fields));
}

// ../../node_modules/@solana/codecs-strings/dist/index.browser.js
var removeNullCharacters = (value) => (
  // eslint-disable-next-line no-control-regex
  value.replace(/\u0000/g, "")
);
var e = globalThis.TextDecoder;
var o = globalThis.TextEncoder;
var getUtf8Encoder = () => {
  let textEncoder;
  return createEncoder({
    getSizeFromValue: (value) => (textEncoder ||= new o()).encode(value).length,
    write: (value, bytes, offset) => {
      const bytesToAdd = (textEncoder ||= new o()).encode(value);
      bytes.set(bytesToAdd, offset);
      return offset + bytesToAdd.length;
    }
  });
};
var getUtf8Decoder = () => {
  let textDecoder;
  return createDecoder({
    read(bytes, offset) {
      const value = (textDecoder ||= new e()).decode(bytes.slice(offset));
      return [removeNullCharacters(value), bytes.length];
    }
  });
};
function getStringEncoder(config = {}) {
  const size = config.size ?? getU32Encoder();
  const encoding = config.encoding ?? getUtf8Encoder();
  if (size === "variable") {
    return encoding;
  }
  if (typeof size === "number") {
    return fixEncoder(encoding, size);
  }
  return createEncoder({
    getSizeFromValue: (value) => {
      const contentSize = getEncodedSize(value, encoding);
      return getEncodedSize(contentSize, size) + contentSize;
    },
    write: (value, bytes, offset) => {
      const contentSize = getEncodedSize(value, encoding);
      offset = size.write(contentSize, bytes, offset);
      return encoding.write(value, bytes, offset);
    }
  });
}
function getStringDecoder(config = {}) {
  const size = config.size ?? getU32Decoder();
  const encoding = config.encoding ?? getUtf8Decoder();
  if (size === "variable") {
    return encoding;
  }
  if (typeof size === "number") {
    return fixDecoder(encoding, size);
  }
  return createDecoder({
    read: (bytes, offset = 0) => {
      assertByteArrayIsNotEmptyForCodec("string", bytes, offset);
      const [lengthBigInt, lengthOffset] = size.read(bytes, offset);
      const length = Number(lengthBigInt);
      offset = lengthOffset;
      const contentBytes = bytes.slice(offset, offset + length);
      assertByteArrayHasEnoughBytesForCodec("string", length, contentBytes);
      const [value, contentOffset] = encoding.read(contentBytes, 0);
      offset += contentOffset;
      return [value, offset];
    }
  });
}
function getStringCodec(config = {}) {
  return combineCodec(getStringEncoder(config), getStringDecoder(config));
}

// ../../node_modules/@solana/spl-token-metadata/lib/esm/field.js
var Field;
(function(Field2) {
  Field2[Field2["Name"] = 0] = "Name";
  Field2[Field2["Symbol"] = 1] = "Symbol";
  Field2[Field2["Uri"] = 2] = "Uri";
})(Field || (Field = {}));

// ../../node_modules/@solana/spl-type-length-value/lib/esm/splDiscriminate.js
var import_crypto = __toESM(require_crypto(), 1);

// ../../node_modules/@solana/spl-token-metadata/lib/esm/instruction.js
init_index_browser_esm();

// ../../node_modules/@solana/spl-token-metadata/lib/esm/state.js
init_index_browser_esm();
var TOKEN_METADATA_DISCRIMINATOR = Buffer.from([112, 132, 90, 90, 11, 88, 157, 87]);
var tokenMetadataCodec = getStructCodec([
  ["updateAuthority", getBytesCodec({ size: 32 })],
  ["mint", getBytesCodec({ size: 32 })],
  ["name", getStringCodec()],
  ["symbol", getStringCodec()],
  ["uri", getStringCodec()],
  ["additionalMetadata", getArrayCodec(getTupleCodec([getStringCodec(), getStringCodec()]))]
]);

// ../../node_modules/@solana/spl-token/lib/esm/instructions/decode.js
var import_buffer_layout48 = __toESM(require_Layout(), 1);

// ../../node_modules/@solana/spl-token/lib/esm/instructions/initializeAccount2.js
var import_buffer_layout46 = __toESM(require_Layout(), 1);
init_index_browser_esm();
var initializeAccount2InstructionData = (0, import_buffer_layout46.struct)([
  (0, import_buffer_layout46.u8)("instruction"),
  publicKey2("owner")
]);

// ../../node_modules/@solana/spl-token/lib/esm/instructions/initializeAccount3.js
var import_buffer_layout47 = __toESM(require_Layout(), 1);
init_index_browser_esm();
var initializeAccount3InstructionData = (0, import_buffer_layout47.struct)([
  (0, import_buffer_layout47.u8)("instruction"),
  publicKey2("owner")
]);

// ../../node_modules/@solana/spl-token/lib/esm/instructions/initializeImmutableOwner.js
var import_buffer_layout49 = __toESM(require_Layout(), 1);
init_index_browser_esm();
var initializeImmutableOwnerInstructionData = (0, import_buffer_layout49.struct)([
  (0, import_buffer_layout49.u8)("instruction")
]);

// ../../node_modules/@solana/spl-token/lib/esm/instructions/initializeMintCloseAuthority.js
var import_buffer_layout50 = __toESM(require_Layout(), 1);
init_index_browser_esm();
var initializeMintCloseAuthorityInstructionData = (0, import_buffer_layout50.struct)([
  (0, import_buffer_layout50.u8)("instruction"),
  (0, import_buffer_layout50.u8)("closeAuthorityOption"),
  publicKey2("closeAuthority")
]);

// ../../node_modules/@solana/spl-token/lib/esm/instructions/reallocate.js
var import_buffer_layout51 = __toESM(require_Layout(), 1);
init_index_browser_esm();

// ../../node_modules/@solana/spl-token/lib/esm/instructions/initializeNonTransferableMint.js
var import_buffer_layout52 = __toESM(require_Layout(), 1);
init_index_browser_esm();
var initializeNonTransferableMintInstructionData = (0, import_buffer_layout52.struct)([
  (0, import_buffer_layout52.u8)("instruction")
]);

// ../../node_modules/@solana/spl-token/lib/esm/instructions/initializePermanentDelegate.js
var import_buffer_layout53 = __toESM(require_Layout(), 1);
init_index_browser_esm();
init_index_browser_esm();
var initializePermanentDelegateInstructionData = (0, import_buffer_layout53.struct)([
  (0, import_buffer_layout53.u8)("instruction"),
  publicKey2("delegate")
]);

// ../../node_modules/@metaplex-foundation/js/dist/esm/plugins/tokenModule/program.mjs
var tokenProgram = {
  name: "TokenProgram",
  address: TOKEN_PROGRAM_ID2
};
var associatedTokenProgram = {
  name: "AssociatedTokenProgram",
  address: ASSOCIATED_TOKEN_PROGRAM_ID2
};

// ../../node_modules/@metaplex-foundation/js/dist/esm/plugins/tokenModule/operations/createMint.mjs
init_index_browser_esm();
var Key3 = "CreateMintOperation";
var createMintOperation = useOperation(Key3);
var createMintOperationHandler = {
  handle(operation, metaplex, scope) {
    return __async(this, null, function* () {
      const builder = yield createMintBuilder(metaplex, operation.input, scope);
      scope.throwIfCanceled();
      const confirmOptions = makeConfirmOptionsFinalizedOnMainnet(metaplex, scope.confirmOptions);
      const output = yield builder.sendAndConfirm(metaplex, confirmOptions);
      scope.throwIfCanceled();
      const mint = yield metaplex.tokens().findMintByAddress({
        address: output.mintSigner.publicKey
      }, scope);
      return __spreadProps(__spreadValues({}, output), {
        mint
      });
    });
  }
};
var createMintBuilder = (_0, _1, ..._2) => __async(void 0, [_0, _1, ..._2], function* (metaplex, params, options = {}) {
  const {
    programs,
    payer = metaplex.rpc().getDefaultFeePayer()
  } = options;
  const {
    decimals = 0,
    mint = Keypair.generate(),
    mintAuthority = metaplex.identity().publicKey,
    freezeAuthority = mintAuthority
  } = params;
  const tokenProgram2 = metaplex.programs().getToken(programs);
  return TransactionBuilder.make().setFeePayer(payer).setContext({
    mintSigner: mint
  }).add(yield metaplex.system().builders().createAccount({
    newAccount: mint,
    space: MINT_SIZE,
    program: tokenProgram2.address,
    instructionKey: params.createAccountInstructionKey ?? "createAccount"
  }, {
    payer,
    programs
  })).add({
    instruction: createInitializeMintInstruction(mint.publicKey, decimals, mintAuthority, freezeAuthority, tokenProgram2.address),
    signers: [mint],
    key: params.initializeMintInstructionKey ?? "initializeMint"
  });
});

// ../../node_modules/@metaplex-foundation/js/dist/esm/types/PublicKey.mjs
init_index_browser_esm();
init_index_browser_esm();
var toPublicKey = (value) => {
  if (typeof value === "object" && "publicKey" in value) {
    return value.publicKey;
  }
  if (typeof value === "object" && "address" in value) {
    return value.address;
  }
  return new PublicKey(value);
};

// ../../node_modules/@metaplex-foundation/js/dist/esm/plugins/tokenModule/operations/createToken.mjs
var Key4 = "CreateTokenOperation";
var createTokenOperation = useOperation(Key4);
var createTokenOperationHandler = {
  handle(operation, metaplex, scope) {
    return __async(this, null, function* () {
      const builder = yield createTokenBuilder(metaplex, operation.input, scope);
      scope.throwIfCanceled();
      const confirmOptions = makeConfirmOptionsFinalizedOnMainnet(metaplex, scope.confirmOptions);
      const output = yield builder.sendAndConfirm(metaplex, confirmOptions);
      scope.throwIfCanceled();
      const token2 = yield metaplex.tokens().findTokenByAddress({
        address: output.tokenAddress
      }, scope);
      return __spreadProps(__spreadValues({}, output), {
        token: token2
      });
    });
  }
};
var createTokenBuilder = (_0, _1, ..._2) => __async(void 0, [_0, _1, ..._2], function* (metaplex, params, options = {}) {
  const {
    programs,
    payer = metaplex.rpc().getDefaultFeePayer()
  } = options;
  const {
    mint,
    owner = metaplex.identity().publicKey,
    token: token2
  } = params;
  const tokenProgram2 = metaplex.programs().getToken(programs);
  const associatedTokenProgram2 = metaplex.programs().getAssociatedToken(programs);
  const isAssociatedToken = token2 === void 0;
  const builder = TransactionBuilder.make().setFeePayer(payer);
  if (isAssociatedToken) {
    const associatedTokenAddress = metaplex.tokens().pdas().associatedTokenAccount({
      mint,
      owner,
      programs
    });
    return builder.setContext({
      tokenAddress: associatedTokenAddress
    }).add({
      instruction: createAssociatedTokenAccountInstruction(payer.publicKey, associatedTokenAddress, owner, mint, tokenProgram2.address, associatedTokenProgram2.address),
      signers: [payer],
      key: params.createAssociatedTokenAccountInstructionKey ?? "createAssociatedTokenAccount"
    });
  }
  return builder.setFeePayer(payer).setContext({
    tokenAddress: token2.publicKey
  }).add(yield metaplex.system().builders().createAccount({
    newAccount: token2,
    space: ACCOUNT_SIZE,
    program: tokenProgram2.address,
    instructionKey: params.createAccountInstructionKey ?? "createAccount"
  }, {
    payer,
    programs
  })).add({
    instruction: createInitializeAccountInstruction(token2.publicKey, mint, owner, tokenProgram2.address),
    signers: [token2],
    key: params.initializeTokenInstructionKey ?? "initializeToken"
  });
});
var createTokenIfMissingBuilder = (_0, _1, ..._2) => __async(void 0, [_0, _1, ..._2], function* (metaplex, params, options = {}) {
  const {
    programs,
    payer = metaplex.rpc().getDefaultFeePayer()
  } = options;
  const {
    mint,
    owner = metaplex.identity().publicKey,
    token: token2,
    tokenExists = true,
    tokenVariable = "token"
  } = params;
  const destination = token2 ?? metaplex.tokens().pdas().associatedTokenAccount({
    mint,
    owner,
    programs
  });
  const destinationAddress = toPublicKey(destination);
  const builder = TransactionBuilder.make().setFeePayer(payer).setContext({
    tokenAddress: destinationAddress
  });
  if (tokenExists) {
    return builder;
  }
  if (token2 && !isSigner(token2)) {
    throw new ExpectedSignerError(tokenVariable, "PublicKey", `The provided "${tokenVariable}" account at address [${destinationAddress}] does not exist. Therefore, it needs to be created and passed as a Signer. If you want to create the "${tokenVariable}" account, then please pass it as a Signer. Alternatively, you can pass the owner account as a PublicKey instead to use (or create) an associated token account.`);
  }
  return builder.add(yield metaplex.tokens().builders().createToken(__spreadProps(__spreadValues({}, params), {
    mint,
    owner,
    token: token2
  }), {
    programs,
    payer
  }));
});

// ../../node_modules/@metaplex-foundation/js/dist/esm/plugins/tokenModule/operations/createTokenWithMint.mjs
init_index_browser_esm();

// ../../node_modules/@metaplex-foundation/js/dist/esm/plugins/tokenModule/errors.mjs
var TokenError = class extends MetaplexError {
  constructor(message, cause) {
    super(message, "plugin", "Token", cause);
    _defineProperty(this, "name", "TokenError");
  }
};
var MintAuthorityMustBeSignerToMintInitialSupplyError = class extends TokenError {
  constructor() {
    const message = `You are trying to create a Mint and a Token account and to send an initial supply of token to the newly created Token account. The issue is, you have provided a Mint Authority as a Public Key which means we don't have the rights to send this transaction. Please provide the Mint Authority as a Signer when using the "createTokenWithMint" operation , so we can send the initial supply. Alternative, remove the initial supply from the operation for it to succeed.`;
    super(message);
    _defineProperty(this, "name", "MintAuthorityMustBeSignerToMintInitialSupplyError");
  }
};
var TokenAndMintDoNotMatchError = class extends TokenError {
  constructor(token2, tokenMint, mint) {
    const message = `The provided Token and Mint accounts do not match. That is, the mint address [${tokenMint}] stored in the Token account [${token2}] do not match the address of the Mint account [${mint}]. Please provide a Token account that belongs to the provided Mint account.`;
    super(message);
  }
};

// ../../node_modules/@metaplex-foundation/js/dist/esm/plugins/tokenModule/operations/createTokenWithMint.mjs
var Key5 = "CreateTokenWithMintOperation";
var createTokenWithMintOperation = useOperation(Key5);
var createTokenWithMintOperationHandler = {
  handle(operation, metaplex, scope) {
    return __async(this, null, function* () {
      const builder = yield createTokenWithMintBuilder(metaplex, operation.input, scope);
      scope.throwIfCanceled();
      const confirmOptions = makeConfirmOptionsFinalizedOnMainnet(metaplex, scope.confirmOptions);
      const output = yield builder.sendAndConfirm(metaplex, confirmOptions);
      scope.throwIfCanceled();
      const token2 = yield metaplex.tokens().findTokenWithMintByMint({
        mint: output.mintSigner.publicKey,
        address: output.tokenAddress,
        addressType: "token"
      }, scope);
      return __spreadProps(__spreadValues({}, output), {
        token: token2
      });
    });
  }
};
var createTokenWithMintBuilder = (_0, _1, ..._2) => __async(void 0, [_0, _1, ..._2], function* (metaplex, params, options = {}) {
  const {
    programs,
    payer = metaplex.rpc().getDefaultFeePayer()
  } = options;
  const {
    decimals = 0,
    initialSupply,
    mint = Keypair.generate(),
    mintAuthority = metaplex.identity(),
    freezeAuthority = metaplex.identity().publicKey,
    owner = metaplex.identity().publicKey,
    token: token2
  } = params;
  const createMintBuilder2 = yield metaplex.tokens().builders().createMint({
    decimals,
    mint,
    mintAuthority: toPublicKey(mintAuthority),
    freezeAuthority,
    createAccountInstructionKey: params.createMintAccountInstructionKey ?? "createMintAccount",
    initializeMintInstructionKey: params.initializeMintInstructionKey ?? "initializeMint"
  }, {
    programs,
    payer
  });
  const createTokenBuilder2 = yield metaplex.tokens().builders().createToken({
    mint: mint.publicKey,
    owner,
    token: token2,
    createAssociatedTokenAccountInstructionKey: params.createAssociatedTokenAccountInstructionKey ?? "createAssociatedTokenAccount",
    createAccountInstructionKey: params.createTokenAccountInstructionKey ?? "createTokenAccount",
    initializeTokenInstructionKey: params.initializeTokenInstructionKey ?? "initializeToken"
  }, {
    payer,
    programs
  });
  const {
    tokenAddress
  } = createTokenBuilder2.getContext();
  const builder = TransactionBuilder.make().setFeePayer(payer).setContext({
    mintSigner: mint,
    tokenAddress
  }).add(createMintBuilder2).add(createTokenBuilder2);
  if (!!initialSupply) {
    if (!isSigner(mintAuthority)) {
      throw new MintAuthorityMustBeSignerToMintInitialSupplyError();
    }
    builder.add(yield metaplex.tokens().builders().mint({
      mintAddress: mint.publicKey,
      toToken: tokenAddress,
      amount: initialSupply,
      mintAuthority,
      mintTokensInstructionKey: params.mintTokensInstructionKey ?? "mintTokens"
    }, {
      payer,
      programs
    }));
  }
  return builder;
});

// ../../node_modules/@metaplex-foundation/js/dist/esm/plugins/tokenModule/operations/mintTokens.mjs
var Key6 = "MintTokensOperation";
var mintTokensOperation = useOperation(Key6);
var mintTokensOperationHandler = {
  handle(operation, metaplex, scope) {
    return __async(this, null, function* () {
      const {
        programs,
        confirmOptions
      } = scope;
      const {
        mintAddress,
        toOwner = metaplex.identity().publicKey,
        toToken: toToken2
      } = operation.input;
      const destination = toToken2 ?? metaplex.tokens().pdas().associatedTokenAccount({
        mint: mintAddress,
        owner: toOwner,
        programs
      });
      const destinationAddress = toPublicKey(destination);
      const destinationAccountExists = yield metaplex.rpc().accountExists(destinationAddress);
      scope.throwIfCanceled();
      const builder = yield mintTokensBuilder(metaplex, __spreadProps(__spreadValues({}, operation.input), {
        toTokenExists: destinationAccountExists
      }), scope);
      scope.throwIfCanceled();
      return builder.sendAndConfirm(metaplex, confirmOptions);
    });
  }
};
var mintTokensBuilder = (_0, _1, ..._2) => __async(void 0, [_0, _1, ..._2], function* (metaplex, params, options = {}) {
  const {
    programs,
    payer = metaplex.rpc().getDefaultFeePayer()
  } = options;
  const {
    mintAddress,
    amount: amount2,
    toOwner = metaplex.identity().publicKey,
    toToken: toToken2,
    toTokenExists = true,
    mintAuthority = metaplex.identity(),
    multiSigners = []
  } = params;
  const [mintAuthorityPublicKey, signers] = isSigner(mintAuthority) ? [mintAuthority.publicKey, [mintAuthority]] : [mintAuthority, multiSigners];
  const tokenProgram2 = metaplex.programs().getToken(programs);
  const destination = toToken2 ?? metaplex.tokens().pdas().associatedTokenAccount({
    mint: mintAddress,
    owner: toOwner,
    programs
  });
  return TransactionBuilder.make().add(yield metaplex.tokens().builders().createTokenIfMissing(__spreadProps(__spreadValues({}, params), {
    mint: mintAddress,
    owner: toOwner,
    token: toToken2,
    tokenExists: toTokenExists,
    tokenVariable: "toToken"
  }), {
    payer,
    programs
  })).add({
    instruction: createMintToInstruction(mintAddress, toPublicKey(destination), mintAuthorityPublicKey, amount2.basisPoints.toNumber(), multiSigners, tokenProgram2.address),
    signers,
    key: params.mintTokensInstructionKey ?? "mintTokens"
  });
});

// ../../node_modules/@metaplex-foundation/js/dist/esm/plugins/tokenModule/operations/sendTokens.mjs
var Key7 = "SendTokensOperation";
var sendTokensOperation = useOperation(Key7);
var sendTokensOperationHandler = {
  handle(operation, metaplex, scope) {
    return __async(this, null, function* () {
      const {
        mintAddress,
        toOwner = metaplex.identity().publicKey,
        toToken: toToken2
      } = operation.input;
      const destination = toToken2 ?? metaplex.tokens().pdas().associatedTokenAccount({
        mint: mintAddress,
        owner: toOwner,
        programs: scope.programs
      });
      const destinationAddress = toPublicKey(destination);
      const destinationAccountExists = yield metaplex.rpc().accountExists(destinationAddress);
      scope.throwIfCanceled();
      const builder = yield sendTokensBuilder(metaplex, __spreadProps(__spreadValues({}, operation.input), {
        toTokenExists: destinationAccountExists
      }), scope);
      scope.throwIfCanceled();
      return builder.sendAndConfirm(metaplex, scope.confirmOptions);
    });
  }
};
var sendTokensBuilder = (_0, _1, ..._2) => __async(void 0, [_0, _1, ..._2], function* (metaplex, params, options = {}) {
  const {
    programs,
    payer = metaplex.rpc().getDefaultFeePayer()
  } = options;
  const {
    mintAddress,
    amount: amount2,
    toOwner = metaplex.identity().publicKey,
    toToken: toToken2,
    toTokenExists = true,
    fromOwner = metaplex.identity(),
    fromToken,
    fromMultiSigners = [],
    delegateAuthority
  } = params;
  const [fromOwnerPublicKey, signers] = isSigner(fromOwner) ? [fromOwner.publicKey, [fromOwner]] : [fromOwner, [delegateAuthority, ...fromMultiSigners].filter(isSigner)];
  const tokenProgram2 = metaplex.programs().getToken(programs);
  const source = fromToken ?? metaplex.tokens().pdas().associatedTokenAccount({
    mint: mintAddress,
    owner: fromOwnerPublicKey,
    programs
  });
  const destination = toToken2 ?? metaplex.tokens().pdas().associatedTokenAccount({
    mint: mintAddress,
    owner: toOwner,
    programs
  });
  return TransactionBuilder.make().setFeePayer(payer).add(yield metaplex.tokens().builders().createTokenIfMissing(__spreadProps(__spreadValues({}, params), {
    mint: mintAddress,
    owner: toOwner,
    token: toToken2,
    tokenExists: toTokenExists,
    tokenVariable: "toToken"
  }), {
    programs,
    payer
  })).add({
    instruction: createTransferInstruction(source, toPublicKey(destination), delegateAuthority ? delegateAuthority.publicKey : fromOwnerPublicKey, amount2.basisPoints.toNumber(), fromMultiSigners, tokenProgram2.address),
    signers,
    key: params.transferTokensInstructionKey ?? "transferTokens"
  });
});

// ../../node_modules/@metaplex-foundation/js/dist/esm/plugins/tokenModule/operations/freezeTokens.mjs
var Key8 = "FreezeTokensOperation";
var freezeTokensOperation = useOperation(Key8);
var freezeTokensOperationHandler = {
  handle(operation, metaplex, scope) {
    return __async(this, null, function* () {
      return freezeTokensBuilder(metaplex, operation.input, scope).sendAndConfirm(metaplex, scope.confirmOptions);
    });
  }
};
var freezeTokensBuilder = (metaplex, params, options = {}) => {
  const {
    programs,
    payer = metaplex.rpc().getDefaultFeePayer()
  } = options;
  const {
    mintAddress,
    tokenOwner = metaplex.identity().publicKey,
    tokenAddress,
    multiSigners = [],
    freezeAuthority
  } = params;
  const [authorityPublicKey, signers] = isSigner(freezeAuthority) ? [freezeAuthority.publicKey, [freezeAuthority]] : [freezeAuthority, multiSigners];
  const tokenProgram2 = metaplex.programs().getToken(programs);
  const tokenAddressOrAta = tokenAddress ?? metaplex.tokens().pdas().associatedTokenAccount({
    mint: mintAddress,
    owner: tokenOwner,
    programs
  });
  return TransactionBuilder.make().setFeePayer(payer).add({
    instruction: createFreezeAccountInstruction(tokenAddressOrAta, mintAddress, authorityPublicKey, multiSigners, tokenProgram2.address),
    signers,
    key: params.instructionKey ?? "freezeTokens"
  });
};

// ../../node_modules/@metaplex-foundation/js/dist/esm/plugins/tokenModule/operations/thawTokens.mjs
var Key9 = "ThawTokensOperation";
var thawTokensOperation = useOperation(Key9);
var thawTokensOperationHandler = {
  handle(operation, metaplex, scope) {
    return __async(this, null, function* () {
      return thawTokensBuilder(metaplex, operation.input, scope).sendAndConfirm(metaplex, scope.confirmOptions);
    });
  }
};
var thawTokensBuilder = (metaplex, params, options = {}) => {
  const {
    programs,
    payer = metaplex.rpc().getDefaultFeePayer()
  } = options;
  const {
    mintAddress,
    tokenOwner = metaplex.identity().publicKey,
    tokenAddress,
    multiSigners = [],
    freezeAuthority
  } = params;
  const [authorityPublicKey, signers] = isSigner(freezeAuthority) ? [freezeAuthority.publicKey, [freezeAuthority]] : [freezeAuthority, multiSigners];
  const tokenProgram2 = metaplex.programs().getToken(programs);
  const tokenAddressOrAta = tokenAddress ?? metaplex.tokens().pdas().associatedTokenAccount({
    mint: mintAddress,
    owner: tokenOwner,
    programs
  });
  return TransactionBuilder.make().setFeePayer(payer).add({
    instruction: createThawAccountInstruction(tokenAddressOrAta, mintAddress, authorityPublicKey, multiSigners, tokenProgram2.address),
    signers,
    key: params.instructionKey ?? "thawTokens"
  });
};

// ../../node_modules/@metaplex-foundation/js/dist/esm/plugins/tokenModule/operations/approveTokenDelegateAuthority.mjs
var Key10 = "ApproveTokenDelegateAuthorityOperation";
var approveTokenDelegateAuthorityOperation = useOperation(Key10);
var approveTokenDelegateAuthorityOperationHandler = {
  handle: (operation, metaplex, scope) => __async(void 0, null, function* () {
    return approveTokenDelegateAuthorityBuilder(metaplex, operation.input, scope).sendAndConfirm(metaplex, scope.confirmOptions);
  })
};
var approveTokenDelegateAuthorityBuilder = (metaplex, params, options = {}) => {
  const {
    programs,
    payer = metaplex.rpc().getDefaultFeePayer()
  } = options;
  const {
    mintAddress,
    delegateAuthority,
    amount: amount2 = token(1),
    owner = metaplex.identity(),
    tokenAddress,
    multiSigners = []
  } = params;
  const [ownerPublicKey, signers] = isSigner(owner) ? [owner.publicKey, [owner]] : [owner, multiSigners];
  const tokenProgram2 = metaplex.programs().getToken(programs);
  const tokenAddressOrAta = tokenAddress ?? metaplex.tokens().pdas().associatedTokenAccount({
    mint: mintAddress,
    owner: ownerPublicKey,
    programs
  });
  return TransactionBuilder.make().setFeePayer(payer).add({
    instruction: createApproveInstruction(tokenAddressOrAta, delegateAuthority, ownerPublicKey, amount2.basisPoints.toNumber(), multiSigners, tokenProgram2.address),
    signers,
    key: params.instructionKey ?? "approveDelegateAuthority"
  });
};

// ../../node_modules/@metaplex-foundation/js/dist/esm/plugins/tokenModule/operations/revokeTokenDelegateAuthority.mjs
var Key11 = "RevokeTokenDelegateAuthorityOperation";
var revokeTokenDelegateAuthorityOperation = useOperation(Key11);
var revokeTokenDelegateAuthorityOperationHandler = {
  handle: (operation, metaplex, scope) => __async(void 0, null, function* () {
    return revokeTokenDelegateAuthorityBuilder(metaplex, operation.input, scope).sendAndConfirm(metaplex, scope.confirmOptions);
  })
};
var revokeTokenDelegateAuthorityBuilder = (metaplex, params, options = {}) => {
  const {
    programs,
    payer = metaplex.rpc().getDefaultFeePayer()
  } = options;
  const {
    mintAddress,
    owner = metaplex.identity(),
    tokenAddress,
    multiSigners = []
  } = params;
  const [ownerPublicKey, signers] = isSigner(owner) ? [owner.publicKey, [owner]] : [owner, multiSigners];
  const tokenProgram2 = metaplex.programs().getToken(programs);
  const tokenAccount = tokenAddress ?? metaplex.tokens().pdas().associatedTokenAccount({
    mint: mintAddress,
    owner: ownerPublicKey,
    programs
  });
  return TransactionBuilder.make().setFeePayer(payer).add({
    instruction: createRevokeInstruction(tokenAccount, ownerPublicKey, multiSigners, tokenProgram2.address),
    signers,
    key: params.instructionKey ?? "revokeDelegateAuthority"
  });
};

// ../../node_modules/@metaplex-foundation/js/dist/esm/plugins/tokenModule/TokenBuildersClient.mjs
var TokenBuildersClient = class {
  constructor(metaplex) {
    this.metaplex = metaplex;
  }
  // -----------------
  // Create
  // -----------------
  /** {@inheritDoc createMintBuilder} */
  createMint(input, options) {
    return createMintBuilder(this.metaplex, input, options);
  }
  /** {@inheritDoc createTokenBuilder} */
  createToken(input, options) {
    return createTokenBuilder(this.metaplex, input, options);
  }
  /** {@inheritDoc createTokenIfMissingBuilder} @internal */
  createTokenIfMissing(input, options) {
    return createTokenIfMissingBuilder(this.metaplex, input, options);
  }
  /** {@inheritDoc createTokenWithMintBuilder} */
  createTokenWithMint(input, options) {
    return createTokenWithMintBuilder(this.metaplex, input, options);
  }
  // -----------------
  // Update
  // -----------------
  /** {@inheritDoc mintTokensBuilder} */
  mint(input, options) {
    return mintTokensBuilder(this.metaplex, input, options);
  }
  /** {@inheritDoc sendTokensBuilder} */
  send(input, options) {
    return sendTokensBuilder(this.metaplex, input, options);
  }
  /** {@inheritDoc freezeTokensBuilder} */
  freeze(input, options) {
    return freezeTokensBuilder(this.metaplex, input, options);
  }
  /** {@inheritDoc thawTokensBuilder} */
  thaw(input, options) {
    return thawTokensBuilder(this.metaplex, input, options);
  }
  // -----------------
  // Delegate
  // -----------------
  /** {@inheritDoc approveTokenDelegateAuthorityBuilder} */
  approveDelegateAuthority(input, options) {
    return approveTokenDelegateAuthorityBuilder(this.metaplex, input, options);
  }
  /** {@inheritDoc revokeTokenDelegateAuthorityBuilder} */
  revokeDelegateAuthority(input, options) {
    return revokeTokenDelegateAuthorityBuilder(this.metaplex, input, options);
  }
};

// ../../node_modules/@metaplex-foundation/js/dist/esm/plugins/tokenModule/TokenPdasClient.mjs
var TokenPdasClient = class {
  constructor(metaplex) {
    this.metaplex = metaplex;
  }
  /** Finds the address of the Associated Token Account. */
  associatedTokenAccount({
    mint,
    owner,
    programs
  }) {
    const tokenProgram2 = this.metaplex.programs().getToken(programs);
    const associatedTokenProgram2 = this.metaplex.programs().getAssociatedToken(programs);
    return Pda.find(associatedTokenProgram2.address, [owner.toBuffer(), tokenProgram2.address.toBuffer(), mint.toBuffer()]);
  }
};

// ../../node_modules/@metaplex-foundation/js/dist/esm/types/Serializer.mjs
var beet = __toESM(require_beet(), 1);
var mapSerializer = (serializer, map2, unmap) => ({
  description: serializer.description,
  serialize: (value) => serializer.serialize(unmap(value)),
  deserialize: (buffer2, offset) => {
    const [value, newOffset] = serializer.deserialize(buffer2, offset);
    return [map2(value), newOffset];
  }
});
var createSerializerFromBeet = (beetArg) => ({
  description: beetArg.description,
  serialize: (value) => {
    const fixedBeet = beet.isFixableBeet(beetArg) ? beetArg.toFixedFromValue(value) : beetArg;
    const writer = new beet.BeetWriter(fixedBeet.byteSize);
    writer.write(fixedBeet, value);
    return writer.buffer;
  },
  deserialize: (buffer2, offset) => {
    const fixedBeet = beet.isFixableBeet(beetArg) ? beetArg.toFixedFromData(buffer2, offset ?? 0) : beetArg;
    const reader = new beet.BeetReader(buffer2, offset ?? 0);
    const value = reader.read(fixedBeet);
    return [value, reader.offset];
  }
});
var createSerializerFromSolitaType = (solitaType, description) => ({
  description: description ?? solitaType.name,
  serialize: (value) => {
    return solitaType.fromArgs(value).serialize()[0];
  },
  deserialize: (buffer2, offset) => {
    return solitaType.deserialize(buffer2, offset);
  }
});
var serialize = (value, serializer) => {
  try {
    return serializer.serialize(value);
  } catch (error2) {
    throw new FailedToSerializeDataError(serializer.description, error2);
  }
};
var deserialize = (value, serializer) => {
  try {
    return serializer.deserialize(value);
  } catch (error2) {
    throw new FailedToDeserializeDataError(serializer.description, error2);
  }
};
function deserializeAccount(account, serializer) {
  if ("exists" in account && !account.exists) {
    return account;
  }
  try {
    const data = serializer.deserialize(account.data)[0];
    return __spreadProps(__spreadValues({}, account), {
      data
    });
  } catch (error2) {
    throw new UnexpectedAccountError(account.publicKey, serializer.description, error2);
  }
}
var serializeDiscriminator = (discriminator) => {
  const serializer = createSerializerFromBeet(beet.uniformFixedSizeArray(beet.u8, 8));
  return serialize(discriminator, serializer);
};

// ../../node_modules/@metaplex-foundation/js/dist/esm/types/Account.mjs
function getAccountParsingFunction(parser) {
  function parse(account) {
    if ("exists" in account && !account.exists) {
      return account;
    }
    const serializer = createSerializerFromSolitaType(parser);
    return deserializeAccount(account, serializer);
  }
  return parse;
}
function getAccountParsingAndAssertingFunction(parser) {
  const parse = getAccountParsingFunction(parser);
  return (unparsedAccount, solution) => {
    if ("exists" in unparsedAccount) {
      assertAccountExists(unparsedAccount, parser.name, solution);
    }
    return parse(unparsedAccount);
  };
}
function assertAccountExists(account, name, solution) {
  if (!account.exists) {
    throw new AccountNotFoundError(account.publicKey, name, solution);
  }
}
var toAccountInfo = (account) => {
  const {
    executable,
    owner,
    lamports: lamports2,
    rentEpoch
  } = account;
  return {
    executable,
    owner,
    lamports: lamports2,
    rentEpoch
  };
};

// ../../node_modules/@metaplex-foundation/js/dist/esm/plugins/tokenModule/accounts.mjs
var mintAccountParser = {
  name: "MintAccount",
  deserialize: (data, offset) => {
    const span = MintLayout2.getSpan(data, offset);
    const decoded = MintLayout2.decode(data, offset);
    return [decoded, span];
  },
  fromArgs() {
    throw new NotYetImplementedError();
  }
};
var parseMintAccount = getAccountParsingFunction(mintAccountParser);
var toMintAccount = getAccountParsingAndAssertingFunction(mintAccountParser);
var tokenAccountParser = {
  name: "TokenAccount",
  deserialize: (data, offset) => {
    const span = AccountLayout2.getSpan(data, offset);
    const decoded = AccountLayout2.decode(data, offset);
    return [decoded, span];
  },
  fromArgs() {
    throw new NotYetImplementedError();
  }
};
var parseTokenAccount = getAccountParsingFunction(tokenAccountParser);
var toTokenAccount = getAccountParsingAndAssertingFunction(tokenAccountParser);

// ../../node_modules/@metaplex-foundation/js/dist/esm/plugins/tokenModule/constants.mjs
init_index_browser_esm();
var WRAPPED_SOL_MINT = new PublicKey("So11111111111111111111111111111111111111112");

// ../../node_modules/@metaplex-foundation/js/dist/esm/plugins/tokenModule/models/Mint.mjs
var isMint = (value) => typeof value === "object" && value.model === "mint";
function assertMint(value) {
  assert2(isMint(value), `Expected Mint model`);
}
var toMint = (account) => {
  const isWrappedSol = account.publicKey.equals(WRAPPED_SOL_MINT);
  const currency = {
    symbol: isWrappedSol ? "SOL" : "Token",
    decimals: account.data.decimals,
    namespace: "spl-token"
  };
  return {
    model: "mint",
    address: account.publicKey,
    mintAuthorityAddress: account.data.mintAuthorityOption ? account.data.mintAuthority : null,
    freezeAuthorityAddress: account.data.freezeAuthorityOption ? account.data.freezeAuthority : null,
    decimals: account.data.decimals,
    supply: amount(account.data.supply.toString(), currency),
    isWrappedSol,
    currency
  };
};

// ../../node_modules/@metaplex-foundation/js/dist/esm/plugins/tokenModule/operations/findMintByAddress.mjs
var Key12 = "FindMintByAddressOperation";
var findMintByAddressOperation = useOperation(Key12);
var findMintByAddressOperationHandler = {
  handle: (operation, metaplex, scope) => __async(void 0, null, function* () {
    const {
      commitment
    } = scope;
    const {
      address
    } = operation.input;
    const account = toMintAccount(yield metaplex.rpc().getAccount(address, commitment));
    return toMint(account);
  })
};

// ../../node_modules/@metaplex-foundation/js/dist/esm/plugins/tokenModule/models/Token.mjs
var isToken = (value) => typeof value === "object" && value.model === "token";
function assertToken(value) {
  assert2(isToken(value), `Expected Token model`);
}
var toToken = (account) => {
  const associatedTokenAddress = Pda.find(associatedTokenProgram.address, [account.data.owner.toBuffer(), account.owner.toBuffer(), account.data.mint.toBuffer()]);
  const isAssociatedToken = associatedTokenAddress.equals(account.publicKey);
  return {
    model: "token",
    address: isAssociatedToken ? associatedTokenAddress : account.publicKey,
    isAssociatedToken,
    mintAddress: account.data.mint,
    ownerAddress: account.data.owner,
    amount: token(account.data.amount.toString()),
    closeAuthorityAddress: account.data.closeAuthorityOption ? account.data.closeAuthority : null,
    delegateAddress: account.data.delegateOption ? account.data.delegate : null,
    delegateAmount: token(account.data.delegatedAmount.toString()),
    state: account.data.state
  };
};
var isTokenWithMint = (value) => typeof value === "object" && value.model === "tokenWithMint";
function assertTokenWithMint(value) {
  assert2(isTokenWithMint(value), `Expected TokenWithMint model`);
}
var toTokenWithMint = (tokenAccount, mintModel) => {
  const token2 = toToken(tokenAccount);
  return __spreadProps(__spreadValues({}, token2), {
    model: "tokenWithMint",
    mint: mintModel,
    amount: amount(token2.amount.basisPoints, mintModel.currency),
    delegateAmount: amount(token2.delegateAmount.basisPoints, mintModel.currency)
  });
};

// ../../node_modules/@metaplex-foundation/js/dist/esm/plugins/tokenModule/operations/findTokenByAddress.mjs
var Key13 = "FindTokenByAddressOperation";
var findTokenByAddressOperation = useOperation(Key13);
var findTokenByAddressOperationHandler = {
  handle: (operation, metaplex, scope) => __async(void 0, null, function* () {
    const {
      commitment
    } = scope;
    const {
      address
    } = operation.input;
    const account = toTokenAccount(yield metaplex.rpc().getAccount(address, commitment));
    return toToken(account);
  })
};

// ../../node_modules/@metaplex-foundation/js/dist/esm/plugins/tokenModule/operations/findTokenWithMintByAddress.mjs
var Key14 = "FindTokenWithMintByAddressOperation";
var findTokenWithMintByAddressOperation = useOperation(Key14);
var findTokenWithMintByAddressOperationHandler = {
  handle: (operation, metaplex, scope) => __async(void 0, null, function* () {
    const {
      commitment
    } = scope;
    const {
      address
    } = operation.input;
    const tokenAccount = toTokenAccount(yield metaplex.rpc().getAccount(address, commitment));
    const mintAccount = toMintAccount(yield metaplex.rpc().getAccount(tokenAccount.data.mint, commitment));
    return toTokenWithMint(tokenAccount, toMint(mintAccount));
  })
};

// ../../node_modules/@metaplex-foundation/js/dist/esm/plugins/tokenModule/operations/findTokenWithMintByMint.mjs
var Key15 = "FindTokenWithMintByMintOperation";
var findTokenWithMintByMintOperation = useOperation(Key15);
var findTokenWithMintByMintOperationHandler = {
  handle: (operation, metaplex, scope) => __async(void 0, null, function* () {
    const {
      commitment,
      programs
    } = scope;
    const {
      mint,
      address,
      addressType
    } = operation.input;
    const tokenAddress = addressType === "owner" ? metaplex.tokens().pdas().associatedTokenAccount({
      mint,
      owner: address,
      programs
    }) : address;
    const accounts = yield metaplex.rpc().getMultipleAccounts([mint, tokenAddress], commitment);
    const mintAccount = toMintAccount(accounts[0]);
    const tokenAccount = toTokenAccount(accounts[1]);
    if (!tokenAccount.data.mint.equals(mint)) {
      throw new TokenAndMintDoNotMatchError(tokenAddress, tokenAccount.data.mint, mint);
    }
    return toTokenWithMint(tokenAccount, toMint(mintAccount));
  })
};

// ../../node_modules/@metaplex-foundation/js/dist/esm/plugins/tokenModule/TokenClient.mjs
var TokenClient = class {
  constructor(metaplex) {
    this.metaplex = metaplex;
  }
  /**
   * You may use the `builders()` client to access the
   * underlying Transaction Builders of this module.
   *
   * ```ts
   * const buildersClient = metaplex.tokens().builders();
   * ```
   */
  builders() {
    return new TokenBuildersClient(this.metaplex);
  }
  /**
   * You may use the `pdas()` client to build PDAs related to this module.
   *
   * ```ts
   * const pdasClient = metaplex.tokens().pdas();
   * ```
   */
  pdas() {
    return new TokenPdasClient(this.metaplex);
  }
  // -----------------
  // Queries
  // -----------------
  /** {@inheritDoc findMintByAddressOperation} */
  findMintByAddress(input, options) {
    return this.metaplex.operations().execute(findMintByAddressOperation(input), options);
  }
  /** {@inheritDoc findTokenByAddressOperation} */
  findTokenByAddress(input, options) {
    return this.metaplex.operations().execute(findTokenByAddressOperation(input), options);
  }
  /** {@inheritDoc findTokenWithMintByAddressOperation} */
  findTokenWithMintByAddress(input, options) {
    return this.metaplex.operations().execute(findTokenWithMintByAddressOperation(input), options);
  }
  /** {@inheritDoc findTokenWithMintByMintOperation} */
  findTokenWithMintByMint(input, options) {
    return this.metaplex.operations().execute(findTokenWithMintByMintOperation(input), options);
  }
  // -----------------
  // Create
  // -----------------
  /** {@inheritDoc createMintOperation} */
  createMint(input = {}, options) {
    return this.metaplex.operations().execute(createMintOperation(input), options);
  }
  /**
   * Create a new Token account from the provided input
   * and returns the newly created `Token` model.
   */
  /** {@inheritDoc createTokenOperation} */
  createToken(input, options) {
    return this.metaplex.operations().execute(createTokenOperation(input), options);
  }
  /** {@inheritDoc createTokenWithMintOperation} */
  createTokenWithMint(input = {}, options) {
    return this.metaplex.operations().execute(createTokenWithMintOperation(input), options);
  }
  // -----------------
  // Update
  // -----------------
  /** {@inheritDoc mintTokensOperation} */
  mint(input, options) {
    return this.metaplex.operations().execute(mintTokensOperation(input), options);
  }
  /** {@inheritDoc sendTokensOperation} */
  send(input, options) {
    return this.metaplex.operations().execute(sendTokensOperation(input), options);
  }
  /** {@inheritDoc freezeTokensOperation} */
  freeze(input, options) {
    return this.metaplex.operations().execute(freezeTokensOperation(input), options);
  }
  /** {@inheritDoc thawTokensOperation} */
  thaw(input, options) {
    return this.metaplex.operations().execute(thawTokensOperation(input), options);
  }
  // -----------------
  // Delegate
  // -----------------
  /** {@inheritDoc approveTokenDelegateAuthorityOperation} */
  approveDelegateAuthority(input, options) {
    return this.metaplex.operations().execute(approveTokenDelegateAuthorityOperation(input), options);
  }
  /** {@inheritDoc revokeTokenDelegateAuthorityOperation} */
  revokeDelegateAuthority(input, options) {
    return this.metaplex.operations().execute(revokeTokenDelegateAuthorityOperation(input), options);
  }
};

// ../../node_modules/@metaplex-foundation/js/dist/esm/plugins/tokenModule/plugin.mjs
var tokenModule = () => ({
  install(metaplex) {
    metaplex.programs().register(tokenProgram);
    metaplex.programs().getToken = function(programs) {
      return this.get(tokenProgram.name, programs);
    };
    metaplex.programs().register(associatedTokenProgram);
    metaplex.programs().getAssociatedToken = function(programs) {
      return this.get(associatedTokenProgram.name, programs);
    };
    const op = metaplex.operations();
    op.register(approveTokenDelegateAuthorityOperation, approveTokenDelegateAuthorityOperationHandler);
    op.register(createMintOperation, createMintOperationHandler);
    op.register(createTokenOperation, createTokenOperationHandler);
    op.register(createTokenWithMintOperation, createTokenWithMintOperationHandler);
    op.register(findMintByAddressOperation, findMintByAddressOperationHandler);
    op.register(findTokenByAddressOperation, findTokenByAddressOperationHandler);
    op.register(findTokenWithMintByAddressOperation, findTokenWithMintByAddressOperationHandler);
    op.register(findTokenWithMintByMintOperation, findTokenWithMintByMintOperationHandler);
    op.register(freezeTokensOperation, freezeTokensOperationHandler);
    op.register(mintTokensOperation, mintTokensOperationHandler);
    op.register(revokeTokenDelegateAuthorityOperation, revokeTokenDelegateAuthorityOperationHandler);
    op.register(sendTokensOperation, sendTokensOperationHandler);
    op.register(thawTokensOperation, thawTokensOperationHandler);
    metaplex.tokens = function() {
      return new TokenClient(this);
    };
  }
});

// ../../node_modules/@metaplex-foundation/js/dist/esm/plugins/nftModule/plugin.mjs
var import_mpl_token_metadata31 = __toESM(require_mpl_token_metadata(), 1);

// ../../node_modules/@metaplex-foundation/js/dist/esm/plugins/nftModule/helpers.mjs
var toMintAddress = (value) => {
  return typeof value === "object" && "mintAddress" in value ? value.mintAddress : toPublicKey(value);
};

// ../../node_modules/@metaplex-foundation/js/dist/esm/plugins/nftModule/operations/createNft.mjs
var import_mpl_token_metadata3 = __toESM(require_mpl_token_metadata(), 1);
init_index_browser_esm();

// ../../node_modules/@metaplex-foundation/js/dist/esm/plugins/nftModule/operations/createCompressedNft.mjs
var import_mpl_token_metadata2 = __toESM(require_mpl_token_metadata(), 1);
var import_mpl_bubblegum2 = __toESM(require_src(), 1);
var import_spl_account_compression = __toESM(require_cjs5(), 1);
init_index_browser_esm();
var import_bn5 = __toESM(require_bn(), 1);
var import_bs58 = __toESM(require_bs58(), 1);

// ../../node_modules/@metaplex-foundation/js/dist/esm/plugins/nftModule/models/Sft.mjs
var isSft = (value) => typeof value === "object" && value.model === "sft";
function assertSft(value) {
  assert2(isSft(value), `Expected Sft model`);
}
var toSft = (metadata, mint) => {
  const _a = metadata, {
    address,
    mintAddress
  } = _a, shared = __objRest(_a, [
    "address",
    "mintAddress"
  ]);
  assert2(mintAddress.equals(mint.address), "The provided mint does not match the mint address in the metadata");
  const currency = __spreadProps(__spreadValues({}, mint.currency), {
    symbol: metadata.symbol || "Token"
  });
  return __spreadProps(__spreadValues({}, shared), {
    model: "sft",
    address: mintAddress,
    metadataAddress: address,
    mint: __spreadProps(__spreadValues({}, mint), {
      currency,
      supply: amount(mint.supply.basisPoints, currency)
    })
  });
};
var isSftWithToken = (value) => isSft(value) && "token" in value;
function assertSftWithToken(value) {
  assert2(isSftWithToken(value), `Expected Sft model with token`);
}
var toSftWithToken = (metadata, mint, token2) => {
  const sft = toSft(metadata, mint);
  const {
    currency
  } = sft.mint;
  return __spreadProps(__spreadValues({}, sft), {
    token: __spreadProps(__spreadValues({}, token2), {
      amount: amount(token2.amount.basisPoints, currency),
      delegateAmount: amount(token2.delegateAmount.basisPoints, currency)
    })
  });
};

// ../../node_modules/@metaplex-foundation/js/dist/esm/plugins/nftModule/models/Nft.mjs
var isNft = (value) => typeof value === "object" && value.model === "nft";
function assertNft(value) {
  assert2(isNft(value), `Expected Nft model`);
}
var toNft = (metadata, mint, edition) => __spreadProps(__spreadValues({}, toSft(metadata, mint)), {
  model: "nft",
  edition
});
var isNftWithToken = (value) => isNft(value) && "token" in value;
function assertNftWithToken(value) {
  assert2(isNftWithToken(value), `Expected Nft model with token`);
}
function assertNftOrSftWithToken(value) {
  assert2(isNftWithToken(value) || isSftWithToken(value), `Expected Nft or Sft model with token`);
}
var toNftWithToken = (metadata, mint, edition, token2) => __spreadProps(__spreadValues({}, toSftWithToken(metadata, mint, token2)), {
  model: "nft",
  edition
});

// ../../node_modules/@metaplex-foundation/js/dist/esm/plugins/nftModule/operations/createCompressedNft.mjs
var Key16 = "CreateCompressedNftOperation";
var createCompressedNftOperation = useOperation(Key16);
var createCompressedNftOperationHandler = {
  handle: (operation, metaplex, scope) => __async(void 0, null, function* () {
    const builder = yield createCompressedNftBuilder(metaplex, operation.input, scope);
    scope.throwIfCanceled();
    const confirmOptions = makeConfirmOptionsFinalizedOnMainnet(metaplex, scope.confirmOptions);
    const output = yield builder.sendAndConfirm(metaplex, confirmOptions);
    scope.throwIfCanceled();
    const txInfo = yield metaplex.connection.getTransaction(output.response.signature, {
      maxSupportedTransactionVersion: 0
    });
    scope.throwIfCanceled();
    const relevantIndex = txInfo.transaction.message.compiledInstructions.findIndex((instruction) => {
      return txInfo?.transaction.message.staticAccountKeys[instruction.programIdIndex].toBase58() === "BGUMAp9Gq7iTEuizy4pqaxsTyUCBK68MDfK752saRPUY";
    });
    const relevantInnerIxs = txInfo.meta?.innerInstructions?.[relevantIndex].instructions.filter((instruction) => {
      return txInfo?.transaction.message.staticAccountKeys[instruction.programIdIndex].toBase58() === "noopb9bkMVfRPU8AsbpTUg8AQkHtKwMYZiFUjNRtMmV";
    });
    if (!relevantInnerIxs || relevantInnerIxs.length == 0)
      throw Error("Unable to locate valid noop instructions");
    let assetIndex = void 0;
    for (let i = relevantInnerIxs.length - 1; i > 0; i--) {
      try {
        const changeLogEvent = (0, import_spl_account_compression.deserializeChangeLogEventV1)(Buffer.from(import_bs58.default.decode(relevantInnerIxs[i]?.data)));
        assetIndex = changeLogEvent?.index;
      } catch (__) {
      }
    }
    if (typeof assetIndex == "undefined")
      throw Error("Unable to locate the newly minted assetId ");
    const assetId = yield (0, import_mpl_bubblegum2.getLeafAssetId)(operation.input.tree, new import_bn5.BN(assetIndex));
    const nft = yield metaplex.nfts().findByAssetId({
      assetId
    }, scope);
    scope.throwIfCanceled();
    assertNft(nft);
    return __spreadProps(__spreadValues({}, output), {
      nft,
      /**
       * the assetId is impossible to know before the compressed nft is minted
       * all these addresses are derived from, or are, the `assetId`
       */
      mintAddress: assetId,
      tokenAddress: assetId,
      metadataAddress: nft.metadataAddress,
      masterEditionAddress: nft.edition.address
    });
  })
};
var createCompressedNftBuilder = (_0, _1, ..._2) => __async(void 0, [_0, _1, ..._2], function* (metaplex, params, options = {}) {
  const {
    payer = metaplex.rpc().getDefaultFeePayer()
  } = options;
  const {
    updateAuthority = metaplex.identity(),
    tree
  } = params;
  const creatorsInput = params.creators ?? [{
    address: updateAuthority.publicKey,
    authority: updateAuthority,
    share: 100
  }];
  const creators = creatorsInput.length > 0 ? creatorsInput.map((creator) => __spreadProps(__spreadValues({}, creator), {
    verified: creator.address.equals(updateAuthority.publicKey)
  })) : null;
  return TransactionBuilder.make().setFeePayer(payer).when(!!params.collection && !!params.collectionAuthority, (builder) => {
    const {
      collection,
      collectionAuthority
    } = params;
    const [collectionMetadataAddress] = PublicKey.findProgramAddressSync([Buffer.from("metadata", "utf8"), import_mpl_token_metadata2.PROGRAM_ID.toBuffer(), collection.toBuffer()], import_mpl_token_metadata2.PROGRAM_ID);
    const [collectionMasterEditionAccount] = PublicKey.findProgramAddressSync([Buffer.from("metadata", "utf8"), import_mpl_token_metadata2.PROGRAM_ID.toBuffer(), collection.toBuffer(), Buffer.from("edition", "utf8")], import_mpl_token_metadata2.PROGRAM_ID);
    const [treeAuthority] = PublicKey.findProgramAddressSync([tree.toBuffer()], import_mpl_bubblegum2.PROGRAM_ID);
    const [bubblegumPDA] = PublicKey.findProgramAddressSync([Buffer.from("collection_cpi", "utf8")], import_mpl_bubblegum2.PROGRAM_ID);
    return builder.add({
      instruction: (
        // TODO(jon): We should be able to infer some of these in an intermediary SDK
        (0, import_mpl_bubblegum2.createMintToCollectionV1Instruction)({
          payer: payer.publicKey,
          merkleTree: tree,
          treeAuthority,
          // TODO(jon): Replace this delegate
          treeDelegate: payer.publicKey,
          // TODO(jon): This should respect the configured owner
          leafOwner: payer.publicKey,
          leafDelegate: payer.publicKey,
          collectionMetadata: collectionMetadataAddress,
          collectionMint: collection,
          collectionAuthority: collectionAuthority.publicKey,
          // TODO(jon): This should be `collectionMasterEditionAccount`
          editionAccount: collectionMasterEditionAccount,
          // TODO(jon): Pass along another parameter for this field and default to the BUBBLEGUM_PROGRAM_ID
          collectionAuthorityRecordPda: import_mpl_bubblegum2.PROGRAM_ID,
          bubblegumSigner: bubblegumPDA,
          // Programs
          /* Account Compression */
          compressionProgram: import_spl_account_compression.SPL_ACCOUNT_COMPRESSION_PROGRAM_ID,
          // TODO(jon): This argument should be `logWrapperProgram`
          logWrapper: import_spl_account_compression.SPL_NOOP_PROGRAM_ID,
          /* Bubblegum */
          tokenMetadataProgram: import_mpl_token_metadata2.PROGRAM_ID
        }, {
          metadataArgs: __spreadProps(__spreadValues({}, params), {
            symbol: params.symbol ?? "",
            creators: creators ?? [],
            isMutable: !!params.isMutable,
            uses: params.uses ?? null,
            // Only NonFungible tokens are supported.
            tokenStandard: import_mpl_bubblegum2.TokenStandard.NonFungible,
            collection: {
              key: collection,
              // TODO(jon): Can we verify this here or do we need to send a separate instruction?
              verified: false
            },
            primarySaleHappened: false,
            editionNonce: null,
            tokenProgramVersion: import_mpl_bubblegum2.TokenProgramVersion.Original
          })
        })
      ),
      signers: [payer, params.collectionAuthority]
    });
  });
});

// ../../node_modules/@metaplex-foundation/js/dist/esm/plugins/nftModule/operations/createNft.mjs
var Key17 = "CreateNftOperation";
var createNftOperation = useOperation(Key17);
var createNftOperationHandler = {
  handle: (operation, metaplex, scope) => __async(void 0, null, function* () {
    const {
      useNewMint = Keypair.generate(),
      useExistingMint,
      tokenOwner = metaplex.identity().publicKey,
      tokenAddress: tokenSigner
    } = operation.input;
    const mintAddress = useExistingMint ?? useNewMint.publicKey;
    const tokenAddress = tokenSigner ? toPublicKey(tokenSigner) : metaplex.tokens().pdas().associatedTokenAccount({
      mint: mintAddress,
      owner: tokenOwner,
      programs: scope.programs
    });
    const tokenAccount = yield metaplex.rpc().getAccount(tokenAddress);
    const tokenExists = tokenAccount.exists;
    const builder = yield createNftBuilder(metaplex, __spreadProps(__spreadValues({}, operation.input), {
      useNewMint,
      tokenOwner,
      tokenExists
    }), scope);
    scope.throwIfCanceled();
    const confirmOptions = makeConfirmOptionsFinalizedOnMainnet(metaplex, scope.confirmOptions);
    const output = yield builder.sendAndConfirm(metaplex, confirmOptions);
    scope.throwIfCanceled();
    const nft = yield metaplex.nfts().findByMint({
      mintAddress: output.mintAddress,
      tokenAddress: output.tokenAddress
    }, scope);
    scope.throwIfCanceled();
    assertNftWithToken(nft);
    return __spreadProps(__spreadValues({}, output), {
      nft
    });
  })
};
var createNftBuilder = (_0, _1, ..._2) => __async(void 0, [_0, _1, ..._2], function* (metaplex, params, options = {}) {
  const {
    programs,
    payer = metaplex.rpc().getDefaultFeePayer()
  } = options;
  const {
    useNewMint = Keypair.generate(),
    updateAuthority = metaplex.identity(),
    mintAuthority = metaplex.identity(),
    tokenOwner = metaplex.identity().publicKey,
    mintTokens = true,
    tree
  } = params;
  if (tree) {
    return createCompressedNftBuilder(metaplex, params, options);
  }
  const sftBuilder = yield metaplex.nfts().builders().createSft(__spreadProps(__spreadValues({}, params), {
    tokenStandard: params.tokenStandard ?? import_mpl_token_metadata3.TokenStandard.NonFungible,
    updateAuthority,
    mintAuthority,
    useNewMint,
    tokenOwner,
    tokenAmount: mintTokens ? token(1) : void 0,
    decimals: 0
  }), {
    programs,
    payer
  });
  const {
    mintAddress,
    metadataAddress,
    tokenAddress
  } = sftBuilder.getContext();
  const masterEditionAddress = metaplex.nfts().pdas().masterEdition({
    mint: mintAddress,
    programs
  });
  return TransactionBuilder.make().setFeePayer(payer).setContext({
    mintAddress,
    metadataAddress,
    masterEditionAddress,
    tokenAddress
  }).add(sftBuilder);
});

// ../../node_modules/@metaplex-foundation/js/dist/esm/plugins/nftModule/operations/createSft.mjs
var import_mpl_token_metadata5 = __toESM(require_mpl_token_metadata(), 1);
init_index_browser_esm();

// ../../node_modules/@metaplex-foundation/js/dist/esm/plugins/nftModule/models/Metadata.mjs
var import_mpl_token_metadata4 = __toESM(require_mpl_token_metadata(), 1);
var isMetadata = (value) => typeof value === "object" && value.model === "metadata";
function assertMetadata(value) {
  assert2(isMetadata(value), `Expected Metadata model`);
}
var toMetadata = (account, json) => ({
  model: "metadata",
  address: Pda.find(account.owner, [Buffer.from("metadata", "utf8"), account.owner.toBuffer(), account.data.mint.toBuffer()]),
  mintAddress: account.data.mint,
  updateAuthorityAddress: account.data.updateAuthority,
  json: json ?? null,
  jsonLoaded: json !== void 0,
  name: removeEmptyChars(account.data.data.name),
  symbol: removeEmptyChars(account.data.data.symbol),
  uri: removeEmptyChars(account.data.data.uri),
  isMutable: account.data.isMutable,
  primarySaleHappened: account.data.primarySaleHappened,
  sellerFeeBasisPoints: account.data.data.sellerFeeBasisPoints,
  editionNonce: account.data.editionNonce,
  creators: account.data.data.creators ?? [],
  tokenStandard: account.data.tokenStandard,
  collection: account.data.collection ? __spreadProps(__spreadValues({}, account.data.collection), {
    address: account.data.collection.key
  }) : null,
  collectionDetails: account.data.collectionDetails ? {
    version: account.data.collectionDetails.__kind,
    size: toBigNumber(account.data.collectionDetails.size)
  } : null,
  uses: account.data.uses ? __spreadProps(__spreadValues({}, account.data.uses), {
    remaining: toBigNumber(account.data.uses.remaining),
    total: toBigNumber(account.data.uses.total)
  }) : null,
  programmableConfig: account.data.programmableConfig
});
var isNonFungible = (nftOrSft) => nftOrSft.tokenStandard === null || nftOrSft.tokenStandard === import_mpl_token_metadata4.TokenStandard.NonFungible || nftOrSft.tokenStandard === import_mpl_token_metadata4.TokenStandard.NonFungibleEdition || nftOrSft.tokenStandard === import_mpl_token_metadata4.TokenStandard.ProgrammableNonFungible;
var isProgrammable = (nftOrSft) => nftOrSft.tokenStandard === import_mpl_token_metadata4.TokenStandard.ProgrammableNonFungible;

// ../../node_modules/@metaplex-foundation/js/dist/esm/plugins/nftModule/operations/createSft.mjs
var Key18 = "CreateSftOperation";
var createSftOperation = useOperation(Key18);
var createSftOperationHandler = {
  handle: (operation, metaplex, scope) => __async(void 0, null, function* () {
    const {
      useNewMint = Keypair.generate(),
      useExistingMint,
      tokenOwner,
      tokenAddress: tokenSigner
    } = operation.input;
    const mintAddress = useExistingMint ?? useNewMint.publicKey;
    const associatedTokenAddress = tokenOwner ? metaplex.tokens().pdas().associatedTokenAccount({
      mint: mintAddress,
      owner: tokenOwner,
      programs: scope.programs
    }) : null;
    const tokenAddress = tokenSigner ? toPublicKey(tokenSigner) : associatedTokenAddress;
    let tokenExists;
    if (!!useExistingMint && !!tokenAddress) {
      const tokenAccount = yield metaplex.rpc().getAccount(tokenAddress);
      tokenExists = tokenAccount.exists;
    } else {
      tokenExists = false;
    }
    const builder = yield createSftBuilder(metaplex, __spreadProps(__spreadValues({}, operation.input), {
      useNewMint,
      tokenExists
    }), scope);
    scope.throwIfCanceled();
    const confirmOptions = makeConfirmOptionsFinalizedOnMainnet(metaplex, scope.confirmOptions);
    const output = yield builder.sendAndConfirm(metaplex, confirmOptions);
    scope.throwIfCanceled();
    const sft = yield metaplex.nfts().findByMint({
      mintAddress: output.mintAddress,
      tokenAddress: output.tokenAddress ?? void 0
    }, scope);
    scope.throwIfCanceled();
    assertSft(sft);
    return __spreadProps(__spreadValues({}, output), {
      sft
    });
  })
};
var createSftBuilder = (_0, _1, ..._2) => __async(void 0, [_0, _1, ..._2], function* (metaplex, params, options = {}) {
  const {
    programs,
    payer = metaplex.rpc().getDefaultFeePayer()
  } = options;
  const {
    useNewMint = Keypair.generate(),
    updateAuthority = metaplex.identity(),
    mintAuthority = metaplex.identity(),
    tokenStandard = params.tokenStandard ?? import_mpl_token_metadata5.TokenStandard.FungibleAsset
  } = params;
  const mintAddress = params.useExistingMint ?? useNewMint.publicKey;
  const associatedTokenAddress = params.tokenOwner ? metaplex.tokens().pdas().associatedTokenAccount({
    mint: mintAddress,
    owner: params.tokenOwner,
    programs
  }) : null;
  const tokenAddress = params.tokenAddress ? toPublicKey(params.tokenAddress) : associatedTokenAddress;
  const systemProgram = metaplex.programs().getSystem(programs);
  const tokenProgram2 = metaplex.programs().getToken(programs);
  const tokenMetadataProgram = metaplex.programs().getTokenMetadata(programs);
  const metadataPda = metaplex.nfts().pdas().metadata({
    mint: mintAddress,
    programs
  });
  const masterEditionPda = metaplex.nfts().pdas().masterEdition({
    mint: mintAddress,
    programs
  });
  const creatorsInput = params.creators ?? [{
    address: updateAuthority.publicKey,
    authority: updateAuthority,
    share: 100
  }];
  const creators = creatorsInput.length > 0 ? creatorsInput.map((creator) => __spreadProps(__spreadValues({}, creator), {
    verified: creator.address.equals(updateAuthority.publicKey)
  })) : null;
  let printSupply = null;
  if (isNonFungible({
    tokenStandard
  })) {
    if (params.maxSupply === void 0) {
      printSupply = {
        __kind: "Zero"
      };
    } else if (params.maxSupply === null) {
      printSupply = {
        __kind: "Unlimited"
      };
    } else {
      printSupply = {
        __kind: "Limited",
        fields: [params.maxSupply]
      };
    }
  }
  const createInstruction = (0, import_mpl_token_metadata5.createCreateInstruction)({
    metadata: metadataPda,
    masterEdition: isNonFungible({
      tokenStandard
    }) ? masterEditionPda : void 0,
    mint: mintAddress,
    authority: mintAuthority.publicKey,
    payer: payer.publicKey,
    updateAuthority: updateAuthority.publicKey,
    systemProgram: systemProgram.address,
    sysvarInstructions: SYSVAR_INSTRUCTIONS_PUBKEY,
    splTokenProgram: tokenProgram2.address
  }, {
    createArgs: {
      __kind: "V1",
      assetData: {
        name: params.name,
        symbol: params.symbol ?? "",
        uri: params.uri,
        sellerFeeBasisPoints: params.sellerFeeBasisPoints,
        creators,
        primarySaleHappened: params.primarySaleHappened ?? false,
        isMutable: params.isMutable ?? true,
        tokenStandard,
        collection: params.collection ? {
          key: params.collection,
          verified: false
        } : null,
        uses: params.uses ?? null,
        collectionDetails: params.isCollection ? {
          __kind: "V1",
          size: 0
        } : null,
        ruleSet: params.ruleSet ?? null
      },
      decimals: params.decimals ?? 0,
      printSupply
    }
  }, tokenMetadataProgram.address);
  const createSigners = [payer, mintAuthority, updateAuthority];
  if (!params.useExistingMint) {
    createSigners.push(useNewMint);
    createInstruction.keys[2].isSigner = true;
  }
  createInstruction.keys[5].isSigner = true;
  let createNonAtaInstruction = null;
  if (!params.tokenExists && !!params.tokenAddress && isSigner(params.tokenAddress)) {
    createNonAtaInstruction = yield metaplex.tokens().builders().createToken({
      mint: mintAddress,
      owner: params.tokenOwner,
      token: params.tokenAddress,
      createAccountInstructionKey: params.createTokenAccountInstructionKey,
      initializeTokenInstructionKey: params.initializeTokenInstructionKey
    }, {
      programs,
      payer
    });
  }
  let mintInstruction = null;
  if (tokenAddress && params.tokenAmount) {
    mintInstruction = metaplex.nfts().builders().mint({
      nftOrSft: {
        address: mintAddress,
        tokenStandard
      },
      authority: isNonFungible({
        tokenStandard
      }) ? updateAuthority : mintAuthority,
      toOwner: params.tokenOwner,
      toToken: tokenAddress,
      amount: params.tokenAmount
    }, {
      programs,
      payer
    });
  }
  const verifyAdditionalCreatorInstructions = creatorsInput.filter((creator) => {
    return !!creator.authority && !creator.address.equals(updateAuthority.publicKey);
  }).map((creator) => {
    return metaplex.nfts().builders().verifyCreator({
      mintAddress,
      creator: creator.authority
    }, {
      programs,
      payer
    });
  });
  return TransactionBuilder.make().setFeePayer(payer).setContext({
    mintAddress,
    metadataAddress: metadataPda,
    tokenAddress
  }).add({
    instruction: createInstruction,
    signers: createSigners,
    key: params.createInstructionKey ?? "createMetadata"
  }).add(...createNonAtaInstruction ? [createNonAtaInstruction] : []).add(...mintInstruction ? [mintInstruction] : []).add(...verifyAdditionalCreatorInstructions).when(!!params.collection && !!params.collectionAuthority, (builder) => builder.add(metaplex.nfts().builders().verifyCollection({
    mintAddress,
    collectionMintAddress: params.collection,
    collectionAuthority: params.collectionAuthority,
    isDelegated: params.collectionAuthorityIsDelegated ?? false,
    isSizedCollection: params.collectionIsSized ?? true
  }, {
    payer,
    programs
  })));
});

// ../../node_modules/@metaplex-foundation/js/dist/esm/plugins/nftModule/operations/printNewEdition.mjs
var import_mpl_token_metadata7 = __toESM(require_mpl_token_metadata(), 1);
init_index_browser_esm();

// ../../node_modules/@metaplex-foundation/js/dist/esm/plugins/nftModule/accounts.mjs
var import_mpl_token_metadata6 = __toESM(require_mpl_token_metadata(), 1);
var parseMetadataAccount = getAccountParsingFunction(import_mpl_token_metadata6.Metadata);
var toMetadataAccount = getAccountParsingAndAssertingFunction(import_mpl_token_metadata6.Metadata);
var originalOrPrintEditionAccountParser = {
  name: "MasterEditionV1 | MasterEditionV2 | Edition",
  deserialize: (data, offset = 0) => {
    if (data?.[0] === import_mpl_token_metadata6.Key.MasterEditionV1) {
      return import_mpl_token_metadata6.MasterEditionV1.deserialize(data, offset);
    } else if (data?.[0] === import_mpl_token_metadata6.Key.MasterEditionV2) {
      return import_mpl_token_metadata6.MasterEditionV2.deserialize(data, offset);
    }
    return import_mpl_token_metadata6.Edition.deserialize(data, offset);
  },
  fromArgs() {
    throw new NotYetImplementedError();
  }
};
var parseOriginalOrPrintEditionAccount = getAccountParsingFunction(originalOrPrintEditionAccountParser);
var toOriginalOrPrintEditionAccount = getAccountParsingAndAssertingFunction(originalOrPrintEditionAccountParser);
var isOriginalEditionAccount = (account) => {
  return "maxSupply" in account.data;
};
var isPrintEditionAccount = (account) => {
  return !isOriginalEditionAccount(account);
};
var originalEditionAccountParser = {
  name: "MasterEditionV1 | MasterEditionV2",
  deserialize: (data, offset = 0) => {
    if (data?.[0] === import_mpl_token_metadata6.Key.MasterEditionV1) {
      return import_mpl_token_metadata6.MasterEditionV1.deserialize(data, offset);
    }
    return import_mpl_token_metadata6.MasterEditionV2.deserialize(data, offset);
  },
  fromArgs() {
    throw new NotYetImplementedError();
  }
};
var parseOriginalEditionAccount = getAccountParsingFunction(originalEditionAccountParser);
var toOriginalEditionAccount = getAccountParsingAndAssertingFunction(originalEditionAccountParser);
var parsePrintEditionAccount = getAccountParsingFunction(import_mpl_token_metadata6.Edition);
var toPrintEditionAccount = getAccountParsingAndAssertingFunction(import_mpl_token_metadata6.Edition);

// ../../node_modules/@metaplex-foundation/js/dist/esm/plugins/nftModule/models/NftEdition.mjs
var isNftEdition = (value) => typeof value === "object" && value.model === "nftEdition";
function assertNftEdition(value) {
  assert2(isNftEdition(value), `Expected NftEdition model`);
}
var toNftEdition = (account) => isOriginalEditionAccount(account) ? toNftOriginalEdition(account) : toNftPrintEdition(account);
var isNftOriginalEdition = (value) => isNftEdition(value) && value.isOriginal;
function assertNftOriginalEdition(value) {
  assert2(isNftOriginalEdition(value), `Expected NftOriginalEdition model`);
}
var toNftOriginalEdition = (account) => ({
  model: "nftEdition",
  isOriginal: true,
  address: account.publicKey,
  supply: toBigNumber(account.data.supply),
  maxSupply: toOptionBigNumber(account.data.maxSupply)
});
var isNftPrintEdition = (value) => isNftEdition(value) && !value.isOriginal;
function assertNftPrintEdition(value) {
  assert2(isNftPrintEdition(value), `Expected NftPrintEdition model`);
}
var toNftPrintEdition = (account) => ({
  model: "nftEdition",
  isOriginal: false,
  address: account.publicKey,
  parent: account.data.parent,
  number: toBigNumber(account.data.edition)
});

// ../../node_modules/@metaplex-foundation/js/dist/esm/plugins/nftModule/operations/printNewEdition.mjs
var Key20 = "PrintNewEditionOperation";
var printNewEditionOperation = useOperation(Key20);
var printNewEditionOperationHandler = {
  handle: (operation, metaplex, scope) => __async(void 0, null, function* () {
    const originalEditionAccount = yield metaplex.rpc().getAccount(metaplex.nfts().pdas().masterEdition({
      mint: operation.input.originalMint,
      programs: scope.programs
    }));
    scope.throwIfCanceled();
    const originalEdition = toNftOriginalEdition(toOriginalEditionAccount(originalEditionAccount));
    const builder = yield printNewEditionBuilder(metaplex, __spreadProps(__spreadValues({}, operation.input), {
      originalSupply: originalEdition.supply
    }), scope);
    scope.throwIfCanceled();
    const confirmOptions = makeConfirmOptionsFinalizedOnMainnet(metaplex, scope.confirmOptions);
    const output = yield builder.sendAndConfirm(metaplex, confirmOptions);
    scope.throwIfCanceled();
    const nft = yield metaplex.nfts().findByMint({
      mintAddress: output.mintSigner.publicKey,
      tokenAddress: output.tokenAddress
    }, scope);
    scope.throwIfCanceled();
    assertNftWithToken(nft);
    return __spreadProps(__spreadValues({}, output), {
      nft
    });
  })
};
var printNewEditionBuilder = (_0, _1, ..._2) => __async(void 0, [_0, _1, ..._2], function* (metaplex, params, options = {}) {
  const {
    programs,
    payer = metaplex.rpc().getDefaultFeePayer()
  } = options;
  const {
    originalMint,
    newMint = Keypair.generate(),
    newUpdateAuthority = metaplex.identity().publicKey,
    newOwner = metaplex.identity().publicKey,
    newTokenAccount,
    printNewEditionInstructionKey = "printNewEdition"
  } = params;
  const tokenMetadataProgram = metaplex.programs().getTokenMetadata(programs);
  const originalMetadataAddress = metaplex.nfts().pdas().metadata({
    mint: originalMint,
    programs
  });
  const originalEditionAddress = metaplex.nfts().pdas().masterEdition({
    mint: originalMint,
    programs
  });
  const edition = toBigNumber(params.originalSupply.addn(1));
  const originalEditionMarkPda = metaplex.nfts().pdas().editionMarker({
    mint: originalMint,
    edition,
    programs
  });
  const newMintAuthority = Keypair.generate();
  const newMetadataAddress = metaplex.nfts().pdas().metadata({
    mint: newMint.publicKey,
    programs
  });
  const newEditionAddress = metaplex.nfts().pdas().edition({
    mint: newMint.publicKey,
    programs
  });
  const sharedAccounts = {
    newMetadata: newMetadataAddress,
    newEdition: newEditionAddress,
    masterEdition: originalEditionAddress,
    newMint: newMint.publicKey,
    editionMarkPda: originalEditionMarkPda,
    newMintAuthority: newMintAuthority.publicKey,
    payer: payer.publicKey,
    newMetadataUpdateAuthority: newUpdateAuthority,
    metadata: originalMetadataAddress
  };
  const tokenWithMintBuilder = yield metaplex.tokens().builders().createTokenWithMint({
    decimals: 0,
    initialSupply: token(1),
    mint: newMint,
    mintAuthority: newMintAuthority,
    freezeAuthority: newMintAuthority.publicKey,
    owner: newOwner,
    token: newTokenAccount,
    createMintAccountInstructionKey: params.createMintAccountInstructionKey,
    initializeMintInstructionKey: params.initializeMintInstructionKey,
    createAssociatedTokenAccountInstructionKey: params.createAssociatedTokenAccountInstructionKey,
    createTokenAccountInstructionKey: params.createTokenAccountInstructionKey,
    initializeTokenInstructionKey: params.initializeTokenInstructionKey,
    mintTokensInstructionKey: params.mintTokensInstructionKey
  }, {
    payer,
    programs
  });
  const {
    tokenAddress
  } = tokenWithMintBuilder.getContext();
  const originalTokenAccountOwner = params.originalTokenAccountOwner ?? metaplex.identity();
  const originalTokenAccount = params.originalTokenAccount ?? metaplex.tokens().pdas().associatedTokenAccount({
    mint: originalMint,
    owner: originalTokenAccountOwner.publicKey,
    programs
  });
  return TransactionBuilder.make().setFeePayer(payer).setContext({
    mintSigner: newMint,
    metadataAddress: newMetadataAddress,
    editionAddress: newEditionAddress,
    tokenAddress,
    updatedSupply: edition
  }).add(tokenWithMintBuilder).add({
    instruction: (0, import_mpl_token_metadata7.createMintNewEditionFromMasterEditionViaTokenInstruction)(__spreadProps(__spreadValues({}, sharedAccounts), {
      tokenAccountOwner: originalTokenAccountOwner.publicKey,
      tokenAccount: originalTokenAccount
    }), {
      mintNewEditionFromMasterEditionViaTokenArgs: {
        edition
      }
    }, tokenMetadataProgram.address),
    signers: [newMint, newMintAuthority, payer, originalTokenAccountOwner],
    key: printNewEditionInstructionKey
  });
});

// ../../node_modules/@metaplex-foundation/js/dist/esm/plugins/nftModule/operations/updateNft.mjs
var import_mpl_token_metadata9 = __toESM(require_mpl_token_metadata(), 1);
init_index_browser_esm();
var import_lodash = __toESM(require_lodash(), 1);

// ../../node_modules/@metaplex-foundation/js/dist/esm/plugins/nftModule/Authorization.mjs
var import_mpl_token_metadata8 = __toESM(require_mpl_token_metadata(), 1);

// ../../node_modules/@metaplex-foundation/js/dist/esm/plugins/nftModule/DelegateInput.mjs
var parseTokenMetadataDelegateInput = (metaplex, mint, input, programs) => {
  if ("updateAuthority" in input) {
    return {
      isTokenDelegate: false,
      delegate: input.delegate,
      approver: input.updateAuthority,
      delegateRecord: metaplex.nfts().pdas().metadataDelegateRecord({
        mint,
        type: input.type,
        updateAuthority: input.updateAuthority,
        delegate: isSigner(input.delegate) ? input.delegate.publicKey : input.delegate,
        programs
      })
    };
  }
  const tokenAccount = input.token ?? metaplex.tokens().pdas().associatedTokenAccount({
    mint,
    owner: input.owner,
    programs
  });
  return {
    isTokenDelegate: true,
    delegate: input.delegate,
    approver: input.owner,
    delegateRecord: metaplex.nfts().pdas().tokenRecord({
      mint,
      token: tokenAccount,
      programs
    }),
    tokenAccount
  };
};

// ../../node_modules/@metaplex-foundation/js/dist/esm/plugins/nftModule/Authorization.mjs
var parseTokenMetadataAuthorization = (metaplex, input) => {
  const auth = {
    accounts: {
      authorizationRules: input.authorizationDetails?.rules ?? null
    },
    signers: [],
    data: {
      authorizationData: input.authorizationDetails?.data ?? null
    }
  };
  if (input.authority.__kind === "metadata") {
    auth.accounts.authority = input.authority.updateAuthority.publicKey;
    auth.accounts.token = input.authority.token;
    auth.signers.push(input.authority.updateAuthority);
    auth.data.authorityType = import_mpl_token_metadata8.AuthorityType.Metadata;
  } else if (input.authority.__kind === "metadataDelegate") {
    const {
      delegateRecord,
      approver
    } = parseTokenMetadataDelegateInput(metaplex, input.mint, input.authority, input.programs);
    auth.accounts.authority = input.authority.delegate.publicKey;
    auth.accounts.delegateRecord = delegateRecord;
    auth.accounts.approver = approver;
    auth.signers.push(input.authority.delegate);
    auth.data.authorityType = import_mpl_token_metadata8.AuthorityType.MetadataDelegate;
  } else if (input.authority.__kind === "tokenDelegate") {
    const {
      delegateRecord,
      approver,
      tokenAccount
    } = parseTokenMetadataDelegateInput(metaplex, input.mint, input.authority, input.programs);
    auth.accounts.authority = input.authority.delegate.publicKey;
    auth.accounts.token = tokenAccount;
    auth.accounts.delegateRecord = delegateRecord;
    auth.accounts.approver = approver;
    auth.signers.push(input.authority.delegate);
    auth.data.authorityType = import_mpl_token_metadata8.AuthorityType.TokenDelegate;
  } else if (input.authority.__kind === "holder") {
    auth.accounts.authority = input.authority.owner.publicKey;
    auth.accounts.token = input.authority.token;
    auth.signers.push(input.authority.owner);
    auth.data.authorityType = import_mpl_token_metadata8.AuthorityType.Holder;
  } else {
    throw new UnreachableCaseError(input.authority.__kind);
  }
  return auth;
};
var getSignerFromTokenMetadataAuthority = (authority) => {
  if (!("__kind" in authority)) {
    return authority;
  }
  switch (authority.__kind) {
    case "metadata":
      return authority.updateAuthority;
    case "metadataDelegate":
    case "tokenDelegate":
      return authority.delegate;
    case "holder":
      return authority.owner;
    default:
      throw new UnreachableCaseError(authority.__kind);
  }
};

// ../../node_modules/@metaplex-foundation/js/dist/esm/plugins/nftModule/operations/updateNft.mjs
var TOKEN_AUTH_RULES_ID = new PublicKey("auth9SigNpDKz4sJJ1DfCTuZrZNSAgh9sFD3rboVmgg");
var Key21 = "UpdateNftOperation";
var updateNftOperation = useOperation(Key21);
var updateNftOperationHandler = {
  handle: (operation, metaplex, scope) => __async(void 0, null, function* () {
    const builder = updateNftBuilder(metaplex, operation.input, scope);
    if (builder.isEmpty()) {
      throw new NoInstructionsToSendError(Key21);
    }
    return builder.sendAndConfirm(metaplex, scope.confirmOptions);
  })
};
var updateNftBuilder = (metaplex, params, options = {}) => {
  const {
    programs,
    payer = metaplex.rpc().getDefaultFeePayer()
  } = options;
  const {
    nftOrSft,
    updateAuthority = metaplex.identity(),
    authority = updateAuthority,
    authorizationDetails
  } = params;
  const tokenMetadataProgram = metaplex.programs().getTokenMetadata(programs);
  const systemProgram = metaplex.programs().getSystem(programs);
  const updateInstructionDataWithoutChanges = toInstructionData(nftOrSft);
  const updateInstructionData = toInstructionData(nftOrSft, params);
  const shouldSendUpdateInstruction = !(0, import_lodash.default)(updateInstructionData, updateInstructionDataWithoutChanges);
  const isRemovingVerifiedCollection = !!nftOrSft.collection && !!nftOrSft.collection.verified && params.collection === null;
  const isOverridingVerifiedCollection = !!nftOrSft.collection && !!nftOrSft.collection.verified && !!params.collection && !params.collection.equals(nftOrSft.collection.address);
  const shouldUnverifyCurrentCollection = isRemovingVerifiedCollection || isOverridingVerifiedCollection;
  const auth = parseTokenMetadataAuthorization(metaplex, {
    mint: nftOrSft.address,
    authority: "__kind" in authority ? authority : {
      __kind: "metadata",
      updateAuthority: authority
    },
    authorizationDetails,
    programs
  });
  const creatorsInput = params.creators ?? nftOrSft.creators;
  const verifyAdditionalCreatorInstructions = creatorsInput.filter((creator) => {
    const currentCreator = nftOrSft.creators.find(({
      address
    }) => address.equals(creator.address));
    const currentlyVerified = currentCreator?.verified ?? false;
    return !!creator.authority && !currentlyVerified;
  }).map((creator) => {
    return metaplex.nfts().builders().verifyCreator({
      mintAddress: nftOrSft.address,
      creator: creator.authority
    }, {
      payer,
      programs
    });
  });
  return TransactionBuilder.make().setFeePayer(payer).when(shouldUnverifyCurrentCollection, (builder) => builder.add(metaplex.nfts().builders().unverifyCollection({
    mintAddress: nftOrSft.address,
    collectionMintAddress: nftOrSft.collection?.address,
    collectionAuthority: params.oldCollectionAuthority ?? payer,
    isSizedCollection: params.oldCollectionIsSized ?? true
  }, {
    programs,
    payer
  }))).when(shouldSendUpdateInstruction, (builder) => builder.add({
    instruction: (0, import_mpl_token_metadata9.createUpdateInstruction)({
      authority: auth.accounts.authority,
      delegateRecord: auth.accounts.delegateRecord,
      token: auth.accounts.token,
      mint: nftOrSft.address,
      metadata: metaplex.nfts().pdas().metadata({
        mint: nftOrSft.address,
        programs
      }),
      edition: isNonFungible(nftOrSft) ? metaplex.nfts().pdas().masterEdition({
        mint: nftOrSft.address,
        programs
      }) : void 0,
      // tokenRecord, // TODO
      payer: payer.publicKey,
      systemProgram: systemProgram.address,
      sysvarInstructions: SYSVAR_INSTRUCTIONS_PUBKEY,
      authorizationRules: auth.accounts.authorizationRules,
      authorizationRulesProgram: TOKEN_AUTH_RULES_ID
    }, {
      updateArgs: __spreadValues(__spreadValues({}, updateInstructionData), auth.data)
    }, tokenMetadataProgram.address),
    signers: [payer, ...auth.signers],
    key: params.updateMetadataInstructionKey ?? "updateMetadata"
  })).add(...verifyAdditionalCreatorInstructions).when(!!params.collection && !!params.collectionAuthority, (builder) => builder.add(metaplex.nfts().builders().verifyCollection({
    mintAddress: nftOrSft.address,
    collectionMintAddress: params.collection,
    collectionAuthority: params.collectionAuthority,
    isDelegated: params.collectionAuthorityIsDelegated ?? false,
    isSizedCollection: params.collectionIsSized ?? true
  }, {
    programs,
    payer
  })));
};
var toInstructionData = (nftOrSft, input = {}) => {
  const creators = input.creators === void 0 ? nftOrSft.creators : input.creators.map((creator) => {
    const currentCreator = nftOrSft.creators.find(({
      address
    }) => address.equals(creator.address));
    return __spreadProps(__spreadValues({}, creator), {
      verified: currentCreator?.verified ?? false
    });
  });
  return {
    __kind: "V1",
    newUpdateAuthority: input.newUpdateAuthority ?? null,
    data: {
      name: input.name ?? nftOrSft.name,
      symbol: input.symbol ?? nftOrSft.symbol,
      uri: input.uri ?? nftOrSft.uri,
      sellerFeeBasisPoints: input.sellerFeeBasisPoints ?? nftOrSft.sellerFeeBasisPoints,
      creators: creators.length > 0 ? creators : null
    },
    primarySaleHappened: input.primarySaleHappened ?? null,
    isMutable: input.isMutable ?? null,
    collection: input.collection ? {
      __kind: "Set",
      fields: [{
        key: input.collection,
        verified: false
      }]
    } : {
      __kind: input.collection === void 0 ? "None" : "Clear"
    },
    collectionDetails: input.collectionDetails ? {
      __kind: "Set",
      fields: [input.collectionDetails]
    } : {
      __kind: "None"
    },
    uses: input.uses ? {
      __kind: "Set",
      fields: [input.uses]
    } : {
      __kind: input.uses === void 0 ? "None" : "Clear"
    },
    ruleSet: input.ruleSet ? {
      __kind: "Set",
      fields: [input.ruleSet]
    } : {
      __kind: input.ruleSet === void 0 ? "None" : "Clear"
    }
  };
};

// ../../node_modules/@metaplex-foundation/js/dist/esm/plugins/nftModule/operations/deleteNft.mjs
var import_mpl_token_metadata10 = __toESM(require_mpl_token_metadata(), 1);
init_index_browser_esm();
var Key22 = "DeleteNftOperation";
var deleteNftOperation = useOperation(Key22);
var deleteNftOperationHandler = {
  handle: (operation, metaplex, scope) => __async(void 0, null, function* () {
    return deleteNftBuilder(metaplex, operation.input, scope).sendAndConfirm(metaplex, scope.confirmOptions);
  })
};
var deleteNftBuilder = (metaplex, params, options = {}) => {
  const {
    programs,
    payer = metaplex.rpc().getDefaultFeePayer()
  } = options;
  const {
    mintAddress,
    ownerTokenAccount,
    collection,
    parentEditionMint,
    parentEditionToken,
    editionMarker,
    amount: amount2 = token(1)
  } = params;
  const authority = params.authority ?? params.owner ?? metaplex.identity();
  const systemProgram = metaplex.programs().getSystem(programs);
  const tokenProgram2 = metaplex.programs().getToken(programs);
  const tokenMetadataProgram = metaplex.programs().getTokenMetadata(programs);
  const owner = getSignerFromTokenMetadataAuthority(authority).publicKey;
  const metadata = metaplex.nfts().pdas().metadata({
    mint: mintAddress,
    programs
  });
  const edition = metaplex.nfts().pdas().masterEdition({
    mint: mintAddress,
    programs
  });
  const tokenAddress = ownerTokenAccount ?? metaplex.tokens().pdas().associatedTokenAccount({
    mint: mintAddress,
    owner,
    programs
  });
  const auth = parseTokenMetadataAuthorization(metaplex, {
    mint: mintAddress,
    authority: "__kind" in authority ? authority : {
      __kind: "holder",
      owner: authority,
      token: tokenAddress
    },
    programs
  });
  return TransactionBuilder.make().setFeePayer(payer).add({
    instruction: (0, import_mpl_token_metadata10.createBurnInstruction)({
      authority: auth.accounts.authority,
      collectionMetadata: collection ? metaplex.nfts().pdas().metadata({
        mint: collection,
        programs
      }) : void 0,
      metadata,
      edition,
      mint: mintAddress,
      token: auth.accounts.token,
      masterEdition: parentEditionMint ? metaplex.nfts().pdas().metadata({
        mint: parentEditionMint,
        programs
      }) : void 0,
      masterEditionMint: parentEditionMint,
      masterEditionToken: parentEditionToken,
      editionMarker,
      tokenRecord: auth.accounts.delegateRecord,
      systemProgram: systemProgram.address,
      sysvarInstructions: SYSVAR_INSTRUCTIONS_PUBKEY,
      splTokenProgram: tokenProgram2.address
    }, {
      burnArgs: {
        __kind: "V1",
        amount: amount2.basisPoints
      }
    }, tokenMetadataProgram.address),
    signers: auth.signers,
    key: params.instructionKey ?? "deleteNft"
  });
};

// ../../node_modules/@metaplex-foundation/js/dist/esm/plugins/nftModule/operations/approveNftDelegate.mjs
var import_mpl_token_metadata12 = __toESM(require_mpl_token_metadata(), 1);
init_index_browser_esm();

// ../../node_modules/@metaplex-foundation/js/dist/esm/plugins/nftModule/DelegateType.mjs
var import_mpl_token_metadata11 = __toESM(require_mpl_token_metadata(), 1);

// ../../node_modules/@metaplex-foundation/js/dist/esm/plugins/nftModule/errors.mjs
var NftError = class extends MetaplexError {
  constructor(message, cause) {
    super(message, "plugin", "NFT", cause);
    _defineProperty(this, "name", "NftError");
  }
};
var ParentCollectionMissingError = class extends NftError {
  constructor(mint, operation) {
    const message = `You are trying to send the operation [${operation}] which requires the NFT to have a parent collection but that is not the case for the NFT at address [${mint}]. Ensure the NFT you are interacting with has a parent collection.`;
    super(message);
    _defineProperty(this, "name", "ParentCollectionMissingError");
  }
};
var DelegateRoleRequiredDataError = class extends NftError {
  constructor(type) {
    const message = `You are trying to approve a delegate of type "${type}" but did not provide any data for that role. Please provide the "data" attribute as the SDK cannot provide a default value for that role.`;
    super(message);
    _defineProperty(this, "name", "DelegateRoleRequiredDataError");
  }
};

// ../../node_modules/@metaplex-foundation/js/dist/esm/plugins/nftModule/DelegateType.mjs
var tokenDelegateRoleMap = {
  StandardV1: import_mpl_token_metadata11.TokenDelegateRole.Standard,
  TransferV1: import_mpl_token_metadata11.TokenDelegateRole.Transfer,
  LockedTransferV1: import_mpl_token_metadata11.TokenDelegateRole.LockedTransfer,
  SaleV1: import_mpl_token_metadata11.TokenDelegateRole.Sale,
  UtilityV1: import_mpl_token_metadata11.TokenDelegateRole.Utility,
  StakingV1: import_mpl_token_metadata11.TokenDelegateRole.Staking
};
var metadataDelegateRoleMap = {
  // AuthorityItemV1: MetadataDelegateRole.AuthorityItem,
  CollectionV1: import_mpl_token_metadata11.MetadataDelegateRole.Collection,
  // UseV1: MetadataDelegateRole.Use,
  DataV1: import_mpl_token_metadata11.MetadataDelegateRole.Data,
  ProgrammableConfigV1: import_mpl_token_metadata11.MetadataDelegateRole.ProgrammableConfig
};
var metadataDelegateSeedMap = {
  [import_mpl_token_metadata11.MetadataDelegateRole.AuthorityItem]: "authority_item_delegate",
  [import_mpl_token_metadata11.MetadataDelegateRole.Collection]: "collection_delegate",
  [import_mpl_token_metadata11.MetadataDelegateRole.Use]: "use_delegate",
  [import_mpl_token_metadata11.MetadataDelegateRole.Data]: "data_delegate",
  [import_mpl_token_metadata11.MetadataDelegateRole.ProgrammableConfig]: "programmable_config_delegate",
  [import_mpl_token_metadata11.MetadataDelegateRole.DataItem]: "data_item_delegate",
  [import_mpl_token_metadata11.MetadataDelegateRole.CollectionItem]: "collection_item_delegate",
  [import_mpl_token_metadata11.MetadataDelegateRole.ProgrammableConfigItem]: "prog_config_item_delegate"
};
var delegateCustomDataMap = {
  // Metadata.
  // AuthorityItemV1: false,
  CollectionV1: false,
  // UseV1: false,
  DataV1: false,
  ProgrammableConfigV1: false,
  // Token
  StandardV1: true,
  TransferV1: true,
  SaleV1: true,
  UtilityV1: true,
  StakingV1: true,
  LockedTransferV1: true
};
var getTokenDelegateRole = (type) => {
  const role = tokenDelegateRoleMap[type];
  if (!role)
    throw new UnreachableCaseError(type);
  return role;
};
var getMetadataDelegateRole = (type) => {
  const role = metadataDelegateRoleMap[type];
  if (!role)
    throw new UnreachableCaseError(type);
  return role;
};
var getMetadataDelegateRoleSeed = (type) => {
  return metadataDelegateSeedMap[getMetadataDelegateRole(type)];
};
var getDefaultDelegateArgs = (type) => {
  const hasCustomData = delegateCustomDataMap[type];
  if (hasCustomData === void 0)
    throw new UnreachableCaseError(type);
  if (hasCustomData)
    throw new DelegateRoleRequiredDataError(type);
  return {
    __kind: type
  };
};

// ../../node_modules/@metaplex-foundation/js/dist/esm/plugins/nftModule/operations/approveNftDelegate.mjs
var TOKEN_AUTH_RULES_ID2 = new PublicKey("auth9SigNpDKz4sJJ1DfCTuZrZNSAgh9sFD3rboVmgg");
var Key23 = "ApproveNftDelegateOperation";
var approveNftDelegateOperation = useOperation(Key23);
var approveNftDelegateOperationHandler = {
  handle: (operation, metaplex, scope) => __async(void 0, null, function* () {
    return approveNftDelegateBuilder(metaplex, operation.input, scope).sendAndConfirm(metaplex, scope.confirmOptions);
  })
};
var approveNftDelegateBuilder = (metaplex, params, options = {}) => {
  const {
    programs,
    payer = metaplex.rpc().getDefaultFeePayer()
  } = options;
  const {
    nftOrSft,
    authority = metaplex.identity(),
    authorizationDetails
  } = params;
  const tokenMetadataProgram = metaplex.programs().getTokenMetadata(programs);
  const tokenProgram2 = metaplex.programs().getToken(programs);
  const systemProgram = metaplex.programs().getSystem(programs);
  const metadata = metaplex.nfts().pdas().metadata({
    mint: nftOrSft.address,
    programs
  });
  const masterEdition = metaplex.nfts().pdas().masterEdition({
    mint: nftOrSft.address,
    programs
  });
  const {
    delegateRecord,
    delegate,
    isTokenDelegate
  } = parseTokenMetadataDelegateInput(metaplex, nftOrSft.address, params.delegate, programs);
  let tokenMetadataAuthority;
  if ("__kind" in authority) {
    tokenMetadataAuthority = authority;
  } else if ("owner" in params.delegate) {
    tokenMetadataAuthority = {
      __kind: "holder",
      owner: authority,
      token: metaplex.tokens().pdas().associatedTokenAccount({
        mint: nftOrSft.address,
        owner: authority.publicKey,
        programs
      })
    };
  } else {
    tokenMetadataAuthority = {
      __kind: "metadata",
      updateAuthority: authority
    };
  }
  const auth = parseTokenMetadataAuthorization(metaplex, {
    mint: nftOrSft.address,
    authority: tokenMetadataAuthority,
    authorizationDetails,
    programs
  });
  const delegateArgsWithoutAuthData = params.delegate.data === void 0 ? getDefaultDelegateArgs(params.delegate.type) : __spreadValues({
    __kind: params.delegate.type
  }, params.delegate.data);
  return TransactionBuilder.make().setFeePayer(payer).add({
    instruction: (0, import_mpl_token_metadata12.createDelegateInstruction)({
      delegateRecord,
      delegate,
      metadata,
      masterEdition: isNonFungible(nftOrSft) ? masterEdition : void 0,
      tokenRecord: isTokenDelegate ? delegateRecord : void 0,
      mint: nftOrSft.address,
      token: auth.accounts.token,
      authority: auth.accounts.authority,
      payer: payer.publicKey,
      systemProgram: systemProgram.address,
      sysvarInstructions: SYSVAR_INSTRUCTIONS_PUBKEY,
      splTokenProgram: tokenProgram2.address,
      authorizationRules: auth.accounts.authorizationRules,
      authorizationRulesProgram: TOKEN_AUTH_RULES_ID2
    }, {
      delegateArgs: __spreadValues(__spreadValues({}, delegateArgsWithoutAuthData), auth.data)
    }, tokenMetadataProgram.address),
    signers: [payer, ...auth.signers],
    key: params.instructionKey ?? "approveNftDelegate"
  });
};

// ../../node_modules/@metaplex-foundation/js/dist/esm/plugins/nftModule/operations/revokeNftDelegate.mjs
var import_mpl_token_metadata13 = __toESM(require_mpl_token_metadata(), 1);
init_index_browser_esm();
var TOKEN_AUTH_RULES_ID3 = new PublicKey("auth9SigNpDKz4sJJ1DfCTuZrZNSAgh9sFD3rboVmgg");
var Key24 = "RevokeNftDelegateOperation";
var revokeNftDelegateOperation = useOperation(Key24);
var revokeNftDelegateOperationHandler = {
  handle: (operation, metaplex, scope) => __async(void 0, null, function* () {
    return revokeNftDelegateBuilder(metaplex, operation.input, scope).sendAndConfirm(metaplex, scope.confirmOptions);
  })
};
var revokeNftDelegateBuilder = (metaplex, params, options = {}) => {
  const {
    programs,
    payer = metaplex.rpc().getDefaultFeePayer()
  } = options;
  const {
    nftOrSft,
    authority = metaplex.identity(),
    authorizationDetails
  } = params;
  const tokenMetadataProgram = metaplex.programs().getTokenMetadata(programs);
  const tokenProgram2 = metaplex.programs().getToken(programs);
  const systemProgram = metaplex.programs().getSystem(programs);
  const metadata = metaplex.nfts().pdas().metadata({
    mint: nftOrSft.address,
    programs
  });
  const masterEdition = metaplex.nfts().pdas().masterEdition({
    mint: nftOrSft.address,
    programs
  });
  const {
    delegateRecord,
    delegate,
    tokenAccount,
    isTokenDelegate
  } = parseTokenMetadataDelegateInput(metaplex, nftOrSft.address, params.delegate, programs);
  let tokenMetadataAuthority;
  if (!("__kind" in authority)) {
    tokenMetadataAuthority = "owner" in params.delegate ? {
      __kind: "holder",
      owner: authority,
      token: metaplex.tokens().pdas().associatedTokenAccount({
        mint: nftOrSft.address,
        owner: authority.publicKey,
        programs
      })
    } : {
      __kind: "metadata",
      updateAuthority: authority
    };
  } else if (authority.__kind === "self") {
    tokenMetadataAuthority = __spreadProps(__spreadValues({}, params.delegate), {
      __kind: "owner" in params.delegate ? "tokenDelegate" : "metadataDelegate",
      delegate: authority.delegate
    });
  } else {
    tokenMetadataAuthority = authority;
  }
  const auth = parseTokenMetadataAuthorization(metaplex, {
    mint: nftOrSft.address,
    authority: tokenMetadataAuthority,
    authorizationDetails,
    programs
  });
  return TransactionBuilder.make().setFeePayer(payer).add({
    instruction: (0, import_mpl_token_metadata13.createRevokeInstruction)({
      delegateRecord,
      delegate,
      metadata,
      masterEdition: isNonFungible(nftOrSft) ? masterEdition : void 0,
      tokenRecord: isTokenDelegate ? delegateRecord : void 0,
      mint: nftOrSft.address,
      token: tokenAccount,
      authority: auth.accounts.authority,
      payer: payer.publicKey,
      systemProgram: systemProgram.address,
      sysvarInstructions: SYSVAR_INSTRUCTIONS_PUBKEY,
      splTokenProgram: tokenProgram2.address,
      authorizationRules: auth.accounts.authorizationRules,
      authorizationRulesProgram: TOKEN_AUTH_RULES_ID3
    }, {
      revokeArgs: import_mpl_token_metadata13.RevokeArgs[params.delegate.type]
    }, tokenMetadataProgram.address),
    signers: [payer, ...auth.signers],
    key: params.instructionKey ?? "revokeNftDelegate"
  });
};

// ../../node_modules/@metaplex-foundation/js/dist/esm/plugins/nftModule/operations/useNft.mjs
var import_mpl_token_metadata14 = __toESM(require_mpl_token_metadata(), 1);
var Key25 = "UseNftOperation";
var useNftOperation = useOperation(Key25);
var useNftOperationHandler = {
  handle: (operation, metaplex, scope) => __async(void 0, null, function* () {
    return useNftBuilder(metaplex, operation.input, scope).sendAndConfirm(metaplex, scope.confirmOptions);
  })
};
var useNftBuilder = (metaplex, params, options = {}) => {
  const {
    programs,
    payer = metaplex.rpc().getDefaultFeePayer()
  } = options;
  const {
    mintAddress,
    numberOfUses = 1,
    owner = metaplex.identity(),
    useAuthority
  } = params;
  const tokenMetadataProgram = metaplex.programs().getTokenMetadata(programs);
  if (!isSigner(owner) && !useAuthority) {
    throw new ExpectedSignerError("owner", "PublicKey", "In order to use an NFT you must either provide the owner as a Signer or a delegated use authority as a Signer.");
  }
  const metadata = metaplex.nfts().pdas().metadata({
    mint: mintAddress,
    programs
  });
  const tokenAccount = params.ownerTokenAccount ?? metaplex.tokens().pdas().associatedTokenAccount({
    mint: mintAddress,
    owner: toPublicKey(owner),
    programs
  });
  const useAuthorityRecord = useAuthority ? metaplex.nfts().pdas().useAuthorityRecord({
    mint: mintAddress,
    useAuthority: useAuthority.publicKey,
    programs
  }) : void 0;
  const programAsBurner = metaplex.nfts().pdas().burner({
    programs
  });
  return TransactionBuilder.make().setFeePayer(payer).add({
    instruction: (0, import_mpl_token_metadata14.createUtilizeInstruction)({
      metadata,
      tokenAccount,
      useAuthority: useAuthority ? useAuthority.publicKey : toPublicKey(owner),
      mint: mintAddress,
      owner: toPublicKey(owner),
      useAuthorityRecord,
      burner: useAuthorityRecord ? programAsBurner : void 0
    }, {
      utilizeArgs: {
        numberOfUses
      }
    }, tokenMetadataProgram.address),
    signers: [owner, useAuthority].filter(isSigner),
    key: params.instructionKey ?? "utilizeNft"
  });
};

// ../../node_modules/@metaplex-foundation/js/dist/esm/plugins/nftModule/operations/approveNftUseAuthority.mjs
var import_mpl_token_metadata15 = __toESM(require_mpl_token_metadata(), 1);
var Key26 = "ApproveNftUseAuthorityOperation";
var approveNftUseAuthorityOperation = useOperation(Key26);
var approveNftUseAuthorityOperationHandler = {
  handle: (operation, metaplex, scope) => __async(void 0, null, function* () {
    return approveNftUseAuthorityBuilder(metaplex, operation.input, scope).sendAndConfirm(metaplex, scope.confirmOptions);
  })
};
var approveNftUseAuthorityBuilder = (metaplex, params, options = {}) => {
  const {
    programs,
    payer = metaplex.rpc().getDefaultFeePayer()
  } = options;
  const {
    mintAddress,
    user,
    owner = metaplex.identity()
  } = params;
  const systemProgram = metaplex.programs().getSystem(programs);
  const tokenProgram2 = metaplex.programs().getToken(programs);
  const tokenMetadataProgram = metaplex.programs().getTokenMetadata(programs);
  const metadata = metaplex.nfts().pdas().metadata({
    mint: mintAddress,
    programs
  });
  const useAuthorityRecord = metaplex.nfts().pdas().useAuthorityRecord({
    mint: mintAddress,
    useAuthority: user,
    programs
  });
  const programAsBurner = metaplex.nfts().pdas().burner({
    programs
  });
  const ownerTokenAddress = params.ownerTokenAddress ?? metaplex.tokens().pdas().associatedTokenAccount({
    mint: mintAddress,
    owner: owner.publicKey,
    programs
  });
  return TransactionBuilder.make().setFeePayer(payer).add({
    instruction: (0, import_mpl_token_metadata15.createApproveUseAuthorityInstruction)({
      useAuthorityRecord,
      owner: owner.publicKey,
      payer: payer.publicKey,
      user,
      ownerTokenAccount: ownerTokenAddress,
      metadata,
      mint: mintAddress,
      burner: programAsBurner,
      tokenProgram: tokenProgram2.address,
      systemProgram: systemProgram.address
    }, {
      approveUseAuthorityArgs: {
        numberOfUses: params.numberOfUses ?? 1
      }
    }, tokenMetadataProgram.address),
    signers: [owner, payer],
    key: params.instructionKey ?? "approveUseAuthority"
  });
};

// ../../node_modules/@metaplex-foundation/js/dist/esm/plugins/nftModule/operations/revokeNftUseAuthority.mjs
var import_mpl_token_metadata16 = __toESM(require_mpl_token_metadata(), 1);
var Key27 = "RevokeNftUseAuthorityOperation";
var revokeNftUseAuthorityOperation = useOperation(Key27);
var revokeNftUseAuthorityOperationHandler = {
  handle: (operation, metaplex, scope) => __async(void 0, null, function* () {
    return revokeNftUseAuthorityBuilder(metaplex, operation.input, scope).sendAndConfirm(metaplex, scope.confirmOptions);
  })
};
var revokeNftUseAuthorityBuilder = (metaplex, params, options = {}) => {
  const {
    programs,
    payer = metaplex.rpc().getDefaultFeePayer()
  } = options;
  const {
    mintAddress,
    user,
    owner = metaplex.identity()
  } = params;
  const systemProgram = metaplex.programs().getSystem(programs);
  const tokenProgram2 = metaplex.programs().getToken(programs);
  const tokenMetadataProgram = metaplex.programs().getTokenMetadata(programs);
  const metadata = metaplex.nfts().pdas().metadata({
    mint: mintAddress,
    programs
  });
  const useAuthorityRecord = metaplex.nfts().pdas().useAuthorityRecord({
    mint: mintAddress,
    useAuthority: user,
    programs
  });
  const ownerTokenAddress = params.ownerTokenAddress ?? metaplex.tokens().pdas().associatedTokenAccount({
    mint: mintAddress,
    owner: owner.publicKey,
    programs
  });
  return TransactionBuilder.make().setFeePayer(payer).add({
    instruction: (0, import_mpl_token_metadata16.createRevokeUseAuthorityInstruction)({
      useAuthorityRecord,
      owner: owner.publicKey,
      user,
      ownerTokenAccount: ownerTokenAddress,
      mint: mintAddress,
      metadata,
      tokenProgram: tokenProgram2.address,
      systemProgram: systemProgram.address
    }, tokenMetadataProgram.address),
    signers: [owner],
    key: params.instructionKey ?? "revokeUseAuthority"
  });
};

// ../../node_modules/@metaplex-foundation/js/dist/esm/plugins/nftModule/operations/verifyNftCreator.mjs
var import_mpl_token_metadata17 = __toESM(require_mpl_token_metadata(), 1);
init_index_browser_esm();
var Key28 = "VerifyNftCreatorOperation";
var verifyNftCreatorOperation = useOperation(Key28);
var verifyNftCreatorOperationHandler = {
  handle: (operation, metaplex, scope) => __async(void 0, null, function* () {
    return verifyNftCreatorBuilder(metaplex, operation.input, scope).sendAndConfirm(metaplex, scope.confirmOptions);
  })
};
var verifyNftCreatorBuilder = (metaplex, params, options = {}) => {
  const {
    programs,
    payer = metaplex.rpc().getDefaultFeePayer()
  } = options;
  const {
    mintAddress,
    creator = metaplex.identity()
  } = params;
  const systemProgram = metaplex.programs().getSystem(programs);
  const tokenMetadataProgram = metaplex.programs().getTokenMetadata(programs);
  return TransactionBuilder.make().setFeePayer(payer).add({
    instruction: (0, import_mpl_token_metadata17.createVerifyInstruction)({
      authority: creator.publicKey,
      metadata: metaplex.nfts().pdas().metadata({
        mint: mintAddress,
        programs
      }),
      systemProgram: systemProgram.address,
      sysvarInstructions: SYSVAR_INSTRUCTIONS_PUBKEY
    }, {
      verificationArgs: import_mpl_token_metadata17.VerificationArgs.CreatorV1
    }, tokenMetadataProgram.address),
    signers: [creator],
    key: params.instructionKey ?? "verifyCreator"
  });
};

// ../../node_modules/@metaplex-foundation/js/dist/esm/plugins/nftModule/operations/unverifyNftCreator.mjs
var import_mpl_token_metadata18 = __toESM(require_mpl_token_metadata(), 1);
init_index_browser_esm();
var Key29 = "UnverifyNftCreatorOperation";
var unverifyNftCreatorOperation = useOperation(Key29);
var unverifyNftCreatorOperationHandler = {
  handle: (operation, metaplex, scope) => __async(void 0, null, function* () {
    return unverifyNftCreatorBuilder(metaplex, operation.input, scope).sendAndConfirm(metaplex, scope.confirmOptions);
  })
};
var unverifyNftCreatorBuilder = (metaplex, params, options = {}) => {
  const {
    programs,
    payer = metaplex.rpc().getDefaultFeePayer()
  } = options;
  const {
    mintAddress,
    creator = metaplex.identity()
  } = params;
  const systemProgram = metaplex.programs().getSystem(programs);
  const tokenMetadataProgram = metaplex.programs().getTokenMetadata(programs);
  return TransactionBuilder.make().setFeePayer(payer).add({
    instruction: (0, import_mpl_token_metadata18.createUnverifyInstruction)({
      authority: creator.publicKey,
      metadata: metaplex.nfts().pdas().metadata({
        mint: mintAddress,
        programs
      }),
      systemProgram: systemProgram.address,
      sysvarInstructions: SYSVAR_INSTRUCTIONS_PUBKEY
    }, {
      verificationArgs: import_mpl_token_metadata18.VerificationArgs.CreatorV1
    }, tokenMetadataProgram.address),
    signers: [creator],
    key: params.instructionKey ?? "unverifyCreator"
  });
};

// ../../node_modules/@metaplex-foundation/js/dist/esm/plugins/nftModule/operations/verifyNftCollection.mjs
var import_mpl_token_metadata19 = __toESM(require_mpl_token_metadata(), 1);
init_index_browser_esm();
var Key30 = "VerifyNftCollectionOperation";
var verifyNftCollectionOperation = useOperation(Key30);
var verifyNftCollectionOperationHandler = {
  handle: (operation, metaplex, scope) => __async(void 0, null, function* () {
    return verifyNftCollectionBuilder(metaplex, operation.input, scope).sendAndConfirm(metaplex, scope.confirmOptions);
  })
};
var verifyNftCollectionBuilder = (metaplex, params, options = {}) => {
  const {
    programs,
    payer = metaplex.rpc().getDefaultFeePayer()
  } = options;
  const {
    mintAddress,
    collectionMintAddress,
    isSizedCollection = true,
    isDelegated = false,
    collectionAuthority = metaplex.identity(),
    collectionUpdateAuthority = metaplex.identity().publicKey
  } = params;
  const systemProgram = metaplex.programs().getSystem(programs);
  const tokenMetadataProgram = metaplex.programs().getTokenMetadata(programs);
  const metadata = metaplex.nfts().pdas().metadata({
    mint: mintAddress,
    programs
  });
  const collectionMetadata = metaplex.nfts().pdas().metadata({
    mint: collectionMintAddress,
    programs
  });
  const collectionEdition = metaplex.nfts().pdas().masterEdition({
    mint: collectionMintAddress,
    programs
  });
  if (isDelegated === "legacyDelegate" || isDelegated === true) {
    const accounts = {
      metadata,
      collectionAuthority: collectionAuthority.publicKey,
      payer: payer.publicKey,
      collectionMint: collectionMintAddress,
      collection: collectionMetadata,
      collectionMasterEditionAccount: collectionEdition
    };
    const instruction = isSizedCollection ? (0, import_mpl_token_metadata19.createVerifySizedCollectionItemInstruction)(accounts, tokenMetadataProgram.address) : (0, import_mpl_token_metadata19.createVerifyCollectionInstruction)(accounts, tokenMetadataProgram.address);
    instruction.keys.push({
      pubkey: metaplex.nfts().pdas().collectionAuthorityRecord({
        mint: collectionMintAddress,
        collectionAuthority: collectionAuthority.publicKey,
        programs
      }),
      isWritable: false,
      isSigner: false
    });
    return TransactionBuilder.make().setFeePayer(payer).add({
      instruction,
      signers: [payer, collectionAuthority],
      key: params.instructionKey ?? "verifyCollection"
    });
  }
  const delegateRecord = isDelegated === "metadataDelegate" ? metaplex.nfts().pdas().metadataDelegateRecord({
    mint: collectionMintAddress,
    type: "CollectionV1",
    updateAuthority: collectionUpdateAuthority,
    delegate: collectionAuthority.publicKey,
    programs
  }) : void 0;
  return TransactionBuilder.make().setFeePayer(payer).add({
    instruction: (0, import_mpl_token_metadata19.createVerifyInstruction)({
      authority: collectionAuthority.publicKey,
      delegateRecord,
      metadata,
      collectionMint: collectionMintAddress,
      collectionMetadata,
      collectionMasterEdition: collectionEdition,
      systemProgram: systemProgram.address,
      sysvarInstructions: SYSVAR_INSTRUCTIONS_PUBKEY
    }, {
      verificationArgs: import_mpl_token_metadata19.VerificationArgs.CollectionV1
    }, tokenMetadataProgram.address),
    signers: [collectionAuthority],
    key: params.instructionKey ?? "verifyCollection"
  });
};

// ../../node_modules/@metaplex-foundation/js/dist/esm/plugins/nftModule/operations/unverifyNftCollection.mjs
var import_mpl_token_metadata20 = __toESM(require_mpl_token_metadata(), 1);
init_index_browser_esm();
var Key31 = "UnverifyNftCollectionOperation";
var unverifyNftCollectionOperation = useOperation(Key31);
var unverifyNftCollectionOperationHandler = {
  handle: (operation, metaplex, scope) => __async(void 0, null, function* () {
    return unverifyNftCollectionBuilder(metaplex, operation.input, scope).sendAndConfirm(metaplex, scope.confirmOptions);
  })
};
var unverifyNftCollectionBuilder = (metaplex, params, options = {}) => {
  const {
    programs,
    payer = metaplex.rpc().getDefaultFeePayer()
  } = options;
  const {
    mintAddress,
    collectionMintAddress,
    isSizedCollection = true,
    isDelegated = false,
    collectionAuthority = metaplex.identity(),
    collectionUpdateAuthority = metaplex.identity().publicKey
  } = params;
  const systemProgram = metaplex.programs().getSystem(programs);
  const tokenMetadataProgram = metaplex.programs().getTokenMetadata(programs);
  const metadata = metaplex.nfts().pdas().metadata({
    mint: mintAddress,
    programs
  });
  const collectionMetadata = metaplex.nfts().pdas().metadata({
    mint: collectionMintAddress,
    programs
  });
  const collectionEdition = metaplex.nfts().pdas().masterEdition({
    mint: collectionMintAddress,
    programs
  });
  if (isDelegated === "legacyDelegate" || isDelegated === true) {
    const accounts = {
      metadata,
      collectionAuthority: collectionAuthority.publicKey,
      payer: payer.publicKey,
      collectionMint: collectionMintAddress,
      collection: collectionMetadata,
      collectionMasterEditionAccount: collectionEdition,
      collectionAuthorityRecord: metaplex.nfts().pdas().collectionAuthorityRecord({
        mint: collectionMintAddress,
        collectionAuthority: collectionAuthority.publicKey,
        programs
      })
    };
    const instruction = isSizedCollection ? (0, import_mpl_token_metadata20.createUnverifySizedCollectionItemInstruction)(accounts, tokenMetadataProgram.address) : (0, import_mpl_token_metadata20.createUnverifyCollectionInstruction)(accounts, tokenMetadataProgram.address);
    return TransactionBuilder.make().setFeePayer(payer).add({
      instruction,
      signers: [payer, collectionAuthority],
      key: params.instructionKey ?? "unverifyCollection"
    });
  }
  const delegateRecord = isDelegated === "metadataDelegate" ? metaplex.nfts().pdas().metadataDelegateRecord({
    mint: collectionMintAddress,
    type: "CollectionV1",
    updateAuthority: collectionUpdateAuthority,
    delegate: collectionAuthority.publicKey,
    programs
  }) : void 0;
  return TransactionBuilder.make().setFeePayer(payer).add({
    instruction: (0, import_mpl_token_metadata20.createUnverifyInstruction)({
      authority: collectionAuthority.publicKey,
      delegateRecord,
      metadata,
      collectionMint: collectionMintAddress,
      collectionMetadata,
      systemProgram: systemProgram.address,
      sysvarInstructions: SYSVAR_INSTRUCTIONS_PUBKEY
    }, {
      verificationArgs: import_mpl_token_metadata20.VerificationArgs.CollectionV1
    }, tokenMetadataProgram.address),
    signers: [collectionAuthority],
    key: params.instructionKey ?? "unverifyCollection"
  });
};

// ../../node_modules/@metaplex-foundation/js/dist/esm/plugins/nftModule/operations/approveNftCollectionAuthority.mjs
var import_mpl_token_metadata21 = __toESM(require_mpl_token_metadata(), 1);
var Key32 = "ApproveNftCollectionAuthorityOperation";
var approveNftCollectionAuthorityOperation = useOperation(Key32);
var approveNftCollectionAuthorityOperationHandler = {
  handle: (operation, metaplex, scope) => __async(void 0, null, function* () {
    return approveNftCollectionAuthorityBuilder(metaplex, operation.input, scope).sendAndConfirm(metaplex, scope.confirmOptions);
  })
};
var approveNftCollectionAuthorityBuilder = (metaplex, params, options = {}) => {
  const {
    programs,
    payer = metaplex.rpc().getDefaultFeePayer()
  } = options;
  const {
    mintAddress,
    collectionAuthority,
    updateAuthority = metaplex.identity()
  } = params;
  const systemProgram = metaplex.programs().getSystem(programs);
  const tokenMetadataProgram = metaplex.programs().getTokenMetadata(programs);
  const metadata = metaplex.nfts().pdas().metadata({
    mint: mintAddress,
    programs
  });
  const collectionAuthorityRecord = metaplex.nfts().pdas().collectionAuthorityRecord({
    mint: mintAddress,
    collectionAuthority,
    programs
  });
  return TransactionBuilder.make().setFeePayer(payer).add({
    instruction: (0, import_mpl_token_metadata21.createApproveCollectionAuthorityInstruction)({
      collectionAuthorityRecord,
      newCollectionAuthority: collectionAuthority,
      updateAuthority: updateAuthority.publicKey,
      payer: payer.publicKey,
      metadata,
      mint: mintAddress,
      systemProgram: systemProgram.address
    }, tokenMetadataProgram.address),
    signers: [payer, updateAuthority],
    key: params.instructionKey ?? "approveCollectionAuthority"
  });
};

// ../../node_modules/@metaplex-foundation/js/dist/esm/plugins/nftModule/operations/revokeNftCollectionAuthority.mjs
var import_mpl_token_metadata22 = __toESM(require_mpl_token_metadata(), 1);
var Key33 = "RevokeNftCollectionAuthorityOperation";
var revokeNftCollectionAuthorityOperation = useOperation(Key33);
var revokeNftCollectionAuthorityOperationHandler = {
  handle: (operation, metaplex, scope) => __async(void 0, null, function* () {
    return revokeNftCollectionAuthorityBuilder(metaplex, operation.input, scope).sendAndConfirm(metaplex, scope.confirmOptions);
  })
};
var revokeNftCollectionAuthorityBuilder = (metaplex, params, options = {}) => {
  const {
    programs,
    payer = metaplex.rpc().getDefaultFeePayer()
  } = options;
  const {
    mintAddress,
    collectionAuthority,
    revokeAuthority = metaplex.identity()
  } = params;
  const tokenMetadataProgram = metaplex.programs().getTokenMetadata(programs);
  const metadata = metaplex.nfts().pdas().metadata({
    mint: mintAddress,
    programs
  });
  const collectionAuthorityRecord = metaplex.nfts().pdas().collectionAuthorityRecord({
    mint: mintAddress,
    collectionAuthority,
    programs
  });
  const instruction = (0, import_mpl_token_metadata22.createRevokeCollectionAuthorityInstruction)({
    collectionAuthorityRecord,
    delegateAuthority: collectionAuthority,
    revokeAuthority: revokeAuthority.publicKey,
    metadata,
    mint: mintAddress
  }, tokenMetadataProgram.address);
  instruction.keys[1].isSigner = false;
  return TransactionBuilder.make().setFeePayer(payer).add({
    instruction,
    signers: [revokeAuthority],
    key: params.instructionKey ?? "revokeCollectionAuthority"
  });
};

// ../../node_modules/@metaplex-foundation/js/dist/esm/plugins/nftModule/operations/migrateToSizedCollectionNft.mjs
var import_mpl_token_metadata23 = __toESM(require_mpl_token_metadata(), 1);
var Key34 = "MigrateToSizedCollectionNftOperation";
var migrateToSizedCollectionNftOperation = useOperation(Key34);
var migrateToSizedCollectionNftOperationHandler = {
  handle: (operation, metaplex, scope) => __async(void 0, null, function* () {
    return migrateToSizedCollectionNftBuilder(metaplex, operation.input, scope).sendAndConfirm(metaplex, scope.confirmOptions);
  })
};
var migrateToSizedCollectionNftBuilder = (metaplex, params, options = {}) => {
  const {
    programs,
    payer = metaplex.rpc().getDefaultFeePayer()
  } = options;
  const {
    mintAddress,
    collectionAuthority = metaplex.identity(),
    size,
    isDelegated = false
  } = params;
  const tokenMetadataProgram = metaplex.programs().getTokenMetadata(programs);
  const nftPdas = metaplex.nfts().pdas();
  return TransactionBuilder.make().setFeePayer(payer).add({
    instruction: (0, import_mpl_token_metadata23.createSetCollectionSizeInstruction)({
      collectionMetadata: nftPdas.metadata({
        mint: mintAddress,
        programs
      }),
      collectionAuthority: collectionAuthority.publicKey,
      collectionMint: mintAddress,
      collectionAuthorityRecord: isDelegated ? nftPdas.collectionAuthorityRecord({
        mint: mintAddress,
        collectionAuthority: collectionAuthority.publicKey,
        programs
      }) : void 0
    }, {
      setCollectionSizeArgs: {
        size
      }
    }, tokenMetadataProgram.address),
    signers: [collectionAuthority],
    key: params.instructionKey ?? "setCollectionSize"
  });
};

// ../../node_modules/@metaplex-foundation/js/dist/esm/plugins/nftModule/operations/lockNft.mjs
var import_mpl_token_metadata24 = __toESM(require_mpl_token_metadata(), 1);
init_index_browser_esm();
var TOKEN_AUTH_RULES_ID4 = new PublicKey("auth9SigNpDKz4sJJ1DfCTuZrZNSAgh9sFD3rboVmgg");
var Key35 = "LockNftOperation";
var lockNftOperation = useOperation(Key35);
var lockNftOperationHandler = {
  handle: (operation, metaplex, scope) => __async(void 0, null, function* () {
    return lockNftBuilder(metaplex, operation.input, scope).sendAndConfirm(metaplex, scope.confirmOptions);
  })
};
var lockNftBuilder = (metaplex, params, options = {}) => {
  const {
    programs,
    payer = metaplex.rpc().getDefaultFeePayer()
  } = options;
  const {
    nftOrSft
  } = params;
  const tokenMetadataProgram = metaplex.programs().getTokenMetadata(programs);
  const tokenProgram2 = metaplex.programs().getToken(programs);
  const systemProgram = metaplex.programs().getSystem(programs);
  const auth = parseTokenMetadataAuthorization(metaplex, {
    mint: nftOrSft.address,
    authority: params.authority,
    authorizationDetails: params.authorizationDetails,
    programs
  });
  const metadata = metaplex.nfts().pdas().metadata({
    mint: nftOrSft.address,
    programs
  });
  const edition = metaplex.nfts().pdas().masterEdition({
    mint: nftOrSft.address,
    programs
  });
  return TransactionBuilder.make().setFeePayer(payer).add({
    instruction: (0, import_mpl_token_metadata24.createLockInstruction)({
      authority: auth.accounts.authority,
      tokenOwner: auth.accounts.approver,
      token: auth.accounts.token,
      mint: nftOrSft.address,
      metadata,
      edition: isNonFungible(nftOrSft) ? edition : void 0,
      tokenRecord: auth.accounts.delegateRecord,
      payer: payer.publicKey,
      systemProgram: systemProgram.address,
      sysvarInstructions: SYSVAR_INSTRUCTIONS_PUBKEY,
      splTokenProgram: tokenProgram2.address,
      authorizationRules: auth.accounts.authorizationRules,
      authorizationRulesProgram: TOKEN_AUTH_RULES_ID4
    }, {
      lockArgs: __spreadValues({
        __kind: "V1"
      }, auth.data)
    }, tokenMetadataProgram.address),
    signers: [payer, ...auth.signers],
    key: params.instructionKey ?? "lockNft"
  });
};

// ../../node_modules/@metaplex-foundation/js/dist/esm/plugins/nftModule/operations/unlockNft.mjs
var import_mpl_token_metadata25 = __toESM(require_mpl_token_metadata(), 1);
init_index_browser_esm();
var TOKEN_AUTH_RULES_ID5 = new PublicKey("auth9SigNpDKz4sJJ1DfCTuZrZNSAgh9sFD3rboVmgg");
var Key36 = "UnlockNftOperation";
var unlockNftOperation = useOperation(Key36);
var unlockNftOperationHandler = {
  handle: (operation, metaplex, scope) => __async(void 0, null, function* () {
    return unlockNftBuilder(metaplex, operation.input, scope).sendAndConfirm(metaplex, scope.confirmOptions);
  })
};
var unlockNftBuilder = (metaplex, params, options = {}) => {
  const {
    programs,
    payer = metaplex.rpc().getDefaultFeePayer()
  } = options;
  const {
    nftOrSft
  } = params;
  const tokenMetadataProgram = metaplex.programs().getTokenMetadata(programs);
  const tokenProgram2 = metaplex.programs().getToken(programs);
  const systemProgram = metaplex.programs().getSystem(programs);
  const auth = parseTokenMetadataAuthorization(metaplex, {
    mint: nftOrSft.address,
    authority: params.authority,
    authorizationDetails: params.authorizationDetails,
    programs
  });
  const metadata = metaplex.nfts().pdas().metadata({
    mint: nftOrSft.address,
    programs
  });
  const edition = metaplex.nfts().pdas().masterEdition({
    mint: nftOrSft.address,
    programs
  });
  return TransactionBuilder.make().setFeePayer(payer).add({
    instruction: (0, import_mpl_token_metadata25.createUnlockInstruction)({
      authority: auth.accounts.authority,
      tokenOwner: auth.accounts.approver,
      token: auth.accounts.token,
      mint: nftOrSft.address,
      metadata,
      edition: isNonFungible(nftOrSft) ? edition : void 0,
      tokenRecord: auth.accounts.delegateRecord,
      payer: payer.publicKey,
      systemProgram: systemProgram.address,
      sysvarInstructions: SYSVAR_INSTRUCTIONS_PUBKEY,
      splTokenProgram: tokenProgram2.address,
      authorizationRules: auth.accounts.authorizationRules,
      authorizationRulesProgram: TOKEN_AUTH_RULES_ID5
    }, {
      unlockArgs: __spreadValues({
        __kind: "V1"
      }, auth.data)
    }, tokenMetadataProgram.address),
    signers: [payer, ...auth.signers],
    key: params.instructionKey ?? "UnlockNft"
  });
};

// ../../node_modules/@metaplex-foundation/js/dist/esm/plugins/nftModule/operations/mintNft.mjs
var import_mpl_token_metadata26 = __toESM(require_mpl_token_metadata(), 1);
init_index_browser_esm();
var TOKEN_AUTH_RULES_ID6 = new PublicKey("auth9SigNpDKz4sJJ1DfCTuZrZNSAgh9sFD3rboVmgg");
var Key37 = "MintNftOperation";
var mintNftOperation = useOperation(Key37);
var mintNftOperationHandler = {
  handle: (operation, metaplex, scope) => __async(void 0, null, function* () {
    return mintNftBuilder(metaplex, operation.input, scope).sendAndConfirm(metaplex, scope.confirmOptions);
  })
};
var mintNftBuilder = (metaplex, params, options = {}) => {
  const {
    programs,
    payer = metaplex.rpc().getDefaultFeePayer()
  } = options;
  const {
    nftOrSft,
    authority = metaplex.identity(),
    authorizationDetails,
    toOwner = metaplex.identity().publicKey,
    amount: amount2 = token(1)
  } = params;
  const auth = parseTokenMetadataAuthorization(metaplex, {
    mint: nftOrSft.address,
    authority: "__kind" in authority ? authority : {
      __kind: "metadata",
      updateAuthority: authority
    },
    authorizationDetails,
    programs
  });
  const tokenMetadataProgram = metaplex.programs().getTokenMetadata(programs);
  const ataProgram = metaplex.programs().getAssociatedToken(programs);
  const tokenProgram2 = metaplex.programs().getToken(programs);
  const systemProgram = metaplex.programs().getSystem(programs);
  const metadata = metaplex.nfts().pdas().metadata({
    mint: nftOrSft.address,
    programs
  });
  const masterEdition = metaplex.nfts().pdas().masterEdition({
    mint: nftOrSft.address,
    programs
  });
  const toToken2 = params.toToken ?? metaplex.tokens().pdas().associatedTokenAccount({
    mint: nftOrSft.address,
    owner: toOwner,
    programs
  });
  return TransactionBuilder.make().setFeePayer(payer).add({
    instruction: (0, import_mpl_token_metadata26.createMintInstruction)({
      token: toToken2,
      tokenOwner: toOwner,
      metadata,
      masterEdition: isNonFungible(nftOrSft) ? masterEdition : void 0,
      tokenRecord: metaplex.nfts().pdas().tokenRecord({
        mint: nftOrSft.address,
        token: toToken2,
        programs
      }),
      mint: nftOrSft.address,
      authority: auth.accounts.authority,
      // delegateRecord, // TODO: add when program supports Authority delegate.
      payer: payer.publicKey,
      systemProgram: systemProgram.address,
      sysvarInstructions: SYSVAR_INSTRUCTIONS_PUBKEY,
      splTokenProgram: tokenProgram2.address,
      splAtaProgram: ataProgram.address,
      authorizationRules: auth.accounts.authorizationRules,
      authorizationRulesProgram: TOKEN_AUTH_RULES_ID6
    }, {
      mintArgs: __spreadValues({
        __kind: "V1",
        amount: amount2.basisPoints
      }, auth.data)
    }, tokenMetadataProgram.address),
    signers: [payer, ...auth.signers],
    key: params.instructionKey ?? "mintNft"
  });
};

// ../../node_modules/@metaplex-foundation/js/dist/esm/plugins/nftModule/operations/transferNft.mjs
var import_mpl_token_metadata27 = __toESM(require_mpl_token_metadata(), 1);
init_index_browser_esm();

// ../../node_modules/@metaplex-foundation/js/dist/esm/plugins/nftModule/operations/transferCompressedNft.mjs
init_index_browser_esm();
var import_mpl_bubblegum3 = __toESM(require_src(), 1);
var import_spl_account_compression2 = __toESM(require_cjs5(), 1);
var Key38 = "TransferCompressedNftOperation";
var transferCompressedNftOperation = useOperation(Key38);
var transferCompressedNftOperationHandler = {
  handle: (operation, metaplex, scope) => __async(void 0, null, function* () {
    return transferCompressedNftBuilder(metaplex, operation.input, scope).sendAndConfirm(metaplex, scope.confirmOptions);
  })
};
var transferCompressedNftBuilder = (metaplex, params, options = {}) => {
  const {
    payer = metaplex.rpc().getDefaultFeePayer()
  } = options;
  const {
    toOwner,
    compression
  } = params;
  if (!compression.merkleTree || !compression.assetProof || !compression.data || !compression.ownership)
    throw Error("Invalid compression data supplied");
  const merkleTree = new PublicKey(compression.assetProof.tree_id);
  const treeAuthority = compression.merkleTree?.getAuthority();
  const canopyDepth = compression.merkleTree?.getCanopyDepth();
  const leafOwner = new PublicKey(compression.ownership.owner);
  const leafDelegate = !!compression.ownership?.delegate ? new PublicKey(compression.ownership.delegate) : leafOwner;
  if (!import_spl_account_compression2.MerkleTree.verify(new PublicKey(compression.assetProof.root).toBuffer(), {
    leafIndex: compression.data.leaf_id,
    leaf: new PublicKey(compression.assetProof.leaf).toBuffer(),
    root: new PublicKey(compression.assetProof.root).toBuffer(),
    proof: compression.assetProof.proof.map((node) => new PublicKey(node).toBuffer())
  }))
    throw Error("Provided proof path did not pass verification");
  const proofPath = compression.assetProof.proof.map((node) => ({
    pubkey: new PublicKey(node),
    isSigner: false,
    isWritable: false
  })).slice(0, compression.assetProof.proof.length - (!!canopyDepth ? canopyDepth : 0));
  return TransactionBuilder.make().setFeePayer(payer).add({
    instruction: (0, import_mpl_bubblegum3.createTransferInstruction)({
      merkleTree,
      treeAuthority,
      leafOwner,
      leafDelegate,
      newLeafOwner: toOwner,
      logWrapper: import_spl_account_compression2.SPL_NOOP_PROGRAM_ID,
      compressionProgram: import_spl_account_compression2.SPL_ACCOUNT_COMPRESSION_PROGRAM_ID,
      anchorRemainingAccounts: proofPath
    }, {
      root: [...new PublicKey(compression.assetProof.root.trim()).toBytes()],
      dataHash: [...new PublicKey(compression.data.data_hash.trim()).toBytes()],
      creatorHash: [...new PublicKey(compression.data.creator_hash.trim()).toBytes()],
      nonce: compression.data.leaf_id,
      index: compression.data.leaf_id
    }),
    signers: [payer],
    key: params.instructionKey ?? "transferCompressedNft"
  });
};
function prepareTransferCompressedNftBuilder(metaplex, params) {
  return __async(this, null, function* () {
    if (!params?.compression)
      params.compression = {};
    if (!params?.compression?.assetProof) {
      params.compression.assetProof = yield metaplex.rpc().getAssetProof(params.nftOrSft.address);
    }
    const [asset, merkleTree] = yield Promise.all([
      // get the asset from the ReadApi
      metaplex.rpc().getAsset(params.nftOrSft.address),
      // get the on-chain merkle tree AccountInfo (mainly needed for the `canopyHeight`)
      import_spl_account_compression2.ConcurrentMerkleTreeAccount.fromAccountAddress(metaplex.connection, new PublicKey(params.compression.assetProof.tree_id))
    ]);
    params.compression.merkleTree = merkleTree;
    params.compression.data = asset.compression;
    params.compression.ownership = asset.ownership;
    return params;
  });
}

// ../../node_modules/@metaplex-foundation/js/dist/esm/plugins/nftModule/operations/transferNft.mjs
var TOKEN_AUTH_RULES_ID7 = new PublicKey("auth9SigNpDKz4sJJ1DfCTuZrZNSAgh9sFD3rboVmgg");
var Key39 = "TransferNftOperation";
var transferNftOperation = useOperation(Key39);
var transferNftOperationHandler = {
  handle: (operation, metaplex, scope) => __async(void 0, null, function* () {
    if (!!operation.input.compression || // @ts-ignore
    !!operation.input.nftOrSft?.compression?.compressed) {
      operation.input = yield prepareTransferCompressedNftBuilder(metaplex, operation.input);
      return transferCompressedNftBuilder(metaplex, operation.input, scope).sendAndConfirm(metaplex, scope.confirmOptions);
    }
    return transferNftBuilder(metaplex, operation.input, scope).sendAndConfirm(metaplex, scope.confirmOptions);
  })
};
var transferNftBuilder = (metaplex, params, options = {}) => {
  const {
    programs,
    payer = metaplex.rpc().getDefaultFeePayer()
  } = options;
  const {
    nftOrSft,
    authority = metaplex.identity(),
    toOwner,
    amount: amount2 = token(1),
    authorizationDetails
  } = params;
  const fromOwner = params.fromOwner ?? getSignerFromTokenMetadataAuthority(authority).publicKey;
  const tokenMetadataProgram = metaplex.programs().getTokenMetadata(programs);
  const ataProgram = metaplex.programs().getAssociatedToken(programs);
  const tokenProgram2 = metaplex.programs().getToken(programs);
  const systemProgram = metaplex.programs().getSystem(programs);
  const metadata = metaplex.nfts().pdas().metadata({
    mint: nftOrSft.address,
    programs
  });
  const edition = metaplex.nfts().pdas().masterEdition({
    mint: nftOrSft.address,
    programs
  });
  const fromToken = params.fromToken ?? metaplex.tokens().pdas().associatedTokenAccount({
    mint: nftOrSft.address,
    owner: fromOwner,
    programs
  });
  const toToken2 = params.toToken ?? metaplex.tokens().pdas().associatedTokenAccount({
    mint: nftOrSft.address,
    owner: toOwner,
    programs
  });
  const ownerTokenRecord = metaplex.nfts().pdas().tokenRecord({
    mint: nftOrSft.address,
    token: fromToken,
    programs
  });
  const destinationTokenRecord = metaplex.nfts().pdas().tokenRecord({
    mint: nftOrSft.address,
    token: toToken2,
    programs
  });
  const auth = parseTokenMetadataAuthorization(metaplex, {
    mint: nftOrSft.address,
    authority: "__kind" in authority ? authority : {
      __kind: "holder",
      owner: authority,
      token: fromToken
    },
    authorizationDetails,
    programs
  });
  return TransactionBuilder.make().setFeePayer(payer).add({
    instruction: (0, import_mpl_token_metadata27.createTransferInstruction)({
      token: fromToken,
      tokenOwner: fromOwner,
      destination: toToken2,
      destinationOwner: toOwner,
      mint: nftOrSft.address,
      metadata,
      edition: isNonFungible(nftOrSft) ? edition : void 0,
      ownerTokenRecord: isProgrammable(nftOrSft) ? ownerTokenRecord : void 0,
      destinationTokenRecord: isProgrammable(nftOrSft) ? destinationTokenRecord : void 0,
      authority: auth.accounts.authority,
      payer: payer.publicKey,
      systemProgram: systemProgram.address,
      sysvarInstructions: SYSVAR_INSTRUCTIONS_PUBKEY,
      splTokenProgram: tokenProgram2.address,
      splAtaProgram: ataProgram.address,
      authorizationRules: auth.accounts.authorizationRules,
      authorizationRulesProgram: TOKEN_AUTH_RULES_ID7
    }, {
      transferArgs: __spreadValues({
        __kind: "V1",
        amount: amount2.basisPoints
      }, auth.data)
    }, tokenMetadataProgram.address),
    signers: [payer, ...auth.signers],
    key: params.instructionKey ?? "transferNft"
  });
};

// ../../node_modules/@metaplex-foundation/js/dist/esm/plugins/nftModule/operations/freezeDelegatedNft.mjs
var import_mpl_token_metadata28 = __toESM(require_mpl_token_metadata(), 1);
var Key40 = "FreezeDelegatedNftOperation";
var freezeDelegatedNftOperation = useOperation(Key40);
var freezeDelegatedNftOperationHandler = {
  handle(operation, metaplex, scope) {
    return __async(this, null, function* () {
      return freezeDelegatedNftBuilder(metaplex, operation.input, scope).sendAndConfirm(metaplex, scope.confirmOptions);
    });
  }
};
var freezeDelegatedNftBuilder = (metaplex, params, options = {}) => {
  const {
    programs,
    payer = metaplex.rpc().getDefaultFeePayer()
  } = options;
  const {
    mintAddress,
    delegateAuthority,
    tokenOwner = metaplex.identity().publicKey,
    tokenAddress
  } = params;
  const tokenProgram2 = metaplex.programs().getToken(programs);
  const tokenMetadataProgram = metaplex.programs().getTokenMetadata(programs);
  const editionAddress = metaplex.nfts().pdas().masterEdition({
    mint: mintAddress,
    programs
  });
  const tokenAddressOrAta = tokenAddress ?? metaplex.tokens().pdas().associatedTokenAccount({
    mint: mintAddress,
    owner: tokenOwner,
    programs
  });
  return TransactionBuilder.make().setFeePayer(payer).add({
    instruction: (0, import_mpl_token_metadata28.createFreezeDelegatedAccountInstruction)({
      delegate: delegateAuthority.publicKey,
      tokenAccount: tokenAddressOrAta,
      edition: editionAddress,
      mint: mintAddress,
      tokenProgram: tokenProgram2.address
    }, tokenMetadataProgram.address),
    signers: [delegateAuthority],
    key: params.instructionKey ?? "freezeDelegatedNft"
  });
};

// ../../node_modules/@metaplex-foundation/js/dist/esm/plugins/nftModule/operations/thawDelegatedNft.mjs
var import_mpl_token_metadata29 = __toESM(require_mpl_token_metadata(), 1);
var Key41 = "ThawDelegatedNftOperation";
var thawDelegatedNftOperation = useOperation(Key41);
var thawDelegatedNftOperationHandler = {
  handle(operation, metaplex, scope) {
    return __async(this, null, function* () {
      return thawDelegatedNftBuilder(metaplex, operation.input).sendAndConfirm(metaplex, scope.confirmOptions);
    });
  }
};
var thawDelegatedNftBuilder = (metaplex, params, options = {}) => {
  const {
    programs,
    payer = metaplex.rpc().getDefaultFeePayer()
  } = options;
  const {
    mintAddress,
    delegateAuthority,
    tokenOwner = metaplex.identity().publicKey,
    tokenAddress
  } = params;
  const tokenProgram2 = metaplex.programs().getToken(programs);
  const tokenMetadataProgram = metaplex.programs().getTokenMetadata(programs);
  const editionAddress = metaplex.nfts().pdas().masterEdition({
    mint: mintAddress,
    programs
  });
  const tokenAddressOrAta = tokenAddress ?? metaplex.tokens().pdas().associatedTokenAccount({
    mint: mintAddress,
    owner: tokenOwner,
    programs
  });
  return TransactionBuilder.make().setFeePayer(payer).add({
    instruction: (0, import_mpl_token_metadata29.createThawDelegatedAccountInstruction)({
      delegate: delegateAuthority.publicKey,
      tokenAccount: tokenAddressOrAta,
      edition: editionAddress,
      mint: mintAddress,
      tokenProgram: tokenProgram2.address
    }, tokenMetadataProgram.address),
    signers: [delegateAuthority],
    key: params.instructionKey ?? "thawDelegatedNft"
  });
};

// ../../node_modules/@metaplex-foundation/js/dist/esm/plugins/nftModule/NftBuildersClient.mjs
var NftBuildersClient = class {
  constructor(metaplex) {
    this.metaplex = metaplex;
  }
  // -----------------
  // Create, Update and Delete
  // -----------------
  /** {@inheritDoc createNftBuilder} */
  create(input, options) {
    return createNftBuilder(this.metaplex, input, options);
  }
  /** {@inheritDoc createSftBuilder} */
  createSft(input, options) {
    return createSftBuilder(this.metaplex, input, options);
  }
  /** {@inheritDoc printNewEditionBuilder} */
  printNewEdition(input, options) {
    return printNewEditionBuilder(this.metaplex, input, options);
  }
  /** {@inheritDoc updateNftBuilder} */
  update(input, options) {
    return updateNftBuilder(this.metaplex, input, options);
  }
  /** {@inheritDoc deleteNftBuilder} */
  delete(input, options) {
    return deleteNftBuilder(this.metaplex, input, options);
  }
  // -----------------
  // Delegates
  // -----------------
  /** {@inheritDoc approveNftDelegateBuilder} */
  delegate(input, options) {
    return approveNftDelegateBuilder(this.metaplex, input, options);
  }
  /** {@inheritDoc revokeNftDelegateBuilder} */
  revoke(input, options) {
    return revokeNftDelegateBuilder(this.metaplex, input, options);
  }
  // -----------------
  // Use
  // -----------------
  /** {@inheritDoc useNftBuilder} */
  use(input, options) {
    return useNftBuilder(this.metaplex, input, options);
  }
  /** {@inheritDoc approveNftUseAuthorityBuilder} */
  approveUseAuthority(input, options) {
    return approveNftUseAuthorityBuilder(this.metaplex, input, options);
  }
  /** {@inheritDoc revokeNftUseAuthorityBuilder} */
  revokeUseAuthority(input, options) {
    return revokeNftUseAuthorityBuilder(this.metaplex, input, options);
  }
  // -----------------
  // Creators
  // -----------------
  /** {@inheritDoc verifyNftCreatorBuilder} */
  verifyCreator(input, options) {
    return verifyNftCreatorBuilder(this.metaplex, input, options);
  }
  /** {@inheritDoc unverifyNftCreatorBuilder} */
  unverifyCreator(input, options) {
    return unverifyNftCreatorBuilder(this.metaplex, input, options);
  }
  // -----------------
  // Collections
  // -----------------
  /** {@inheritDoc verifyNftCollectionBuilder} */
  verifyCollection(input, options) {
    return verifyNftCollectionBuilder(this.metaplex, input, options);
  }
  /** {@inheritDoc unverifyNftCollectionBuilder} */
  unverifyCollection(input, options) {
    return unverifyNftCollectionBuilder(this.metaplex, input, options);
  }
  /** {@inheritDoc approveNftCollectionAuthorityBuilder} */
  approveCollectionAuthority(input, options) {
    return approveNftCollectionAuthorityBuilder(this.metaplex, input, options);
  }
  /** {@inheritDoc revokeNftCollectionAuthorityBuilder} */
  revokeCollectionAuthority(input, options) {
    return revokeNftCollectionAuthorityBuilder(this.metaplex, input, options);
  }
  /** {@inheritDoc migrateToSizedCollectionNftBuilder} */
  migrateToSizedCollection(input, options) {
    return migrateToSizedCollectionNftBuilder(this.metaplex, input, options);
  }
  // -----------------
  // Programmables
  // -----------------
  /** {@inheritDoc lockNftBuilder} */
  lock(input, options) {
    return lockNftBuilder(this.metaplex, input, options);
  }
  /** {@inheritDoc unlockNftBuilder} */
  unlock(input, options) {
    return unlockNftBuilder(this.metaplex, input, options);
  }
  // -----------------
  // Token
  // -----------------
  /** {@inheritDoc mintNftBuilder} */
  mint(input, options) {
    return mintNftBuilder(this.metaplex, input, options);
  }
  /** {@inheritDoc transferNftBuilder} */
  transfer(input, options) {
    return transferNftBuilder(this.metaplex, input, options);
  }
  /** {@inheritDoc freezeDelegatedNftBuilder} */
  freezeDelegatedNft(input, options) {
    return freezeDelegatedNftBuilder(this.metaplex, input, options);
  }
  /** {@inheritDoc thawDelegatedNftBuilder} */
  thawDelegatedNft(input, options) {
    return thawDelegatedNftBuilder(this.metaplex, input, options);
  }
};

// ../../node_modules/@metaplex-foundation/js/dist/esm/plugins/nftModule/NftPdasClient.mjs
var import_buffer2 = __toESM(require_buffer2(), 1);
var NftPdasClient = class {
  constructor(metaplex) {
    this.metaplex = metaplex;
  }
  /** Finds the Metadata PDA of a given mint address. */
  metadata({
    mint,
    programs
  }) {
    const programId = this.programId(programs);
    return Pda.find(programId, [import_buffer2.Buffer.from("metadata", "utf8"), programId.toBuffer(), mint.toBuffer()]);
  }
  /** Finds the Master Edition PDA of a given mint address. */
  masterEdition({
    mint,
    programs
  }) {
    const programId = this.programId(programs);
    return Pda.find(programId, [import_buffer2.Buffer.from("metadata", "utf8"), programId.toBuffer(), mint.toBuffer(), import_buffer2.Buffer.from("edition", "utf8")]);
  }
  /** Finds the Edition PDA of a given mint address. */
  edition(input) {
    return this.masterEdition(input);
  }
  /** Finds the Edition Marker PDA of a given edition number. */
  editionMarker({
    mint,
    edition,
    programs
  }) {
    const programId = this.programId(programs);
    return Pda.find(programId, [import_buffer2.Buffer.from("metadata", "utf8"), programId.toBuffer(), mint.toBuffer(), import_buffer2.Buffer.from("edition", "utf8"), import_buffer2.Buffer.from(edition.div(toBigNumber(248)).toString())]);
  }
  /** Finds the collection authority PDA for a given NFT and authority. */
  collectionAuthorityRecord({
    mint,
    collectionAuthority,
    programs
  }) {
    const programId = this.programId(programs);
    return Pda.find(programId, [import_buffer2.Buffer.from("metadata", "utf8"), programId.toBuffer(), mint.toBuffer(), import_buffer2.Buffer.from("collection_authority", "utf8"), collectionAuthority.toBuffer()]);
  }
  /** Finds the use authority PDA for a given NFT and user. */
  useAuthorityRecord({
    mint,
    useAuthority,
    programs
  }) {
    const programId = this.programId(programs);
    return Pda.find(programId, [import_buffer2.Buffer.from("metadata", "utf8"), programId.toBuffer(), mint.toBuffer(), import_buffer2.Buffer.from("user", "utf8"), useAuthority.toBuffer()]);
  }
  /** Finds the burner PDA of the Token Metadata program. */
  burner({
    programs
  }) {
    const programId = this.programId(programs);
    return Pda.find(programId, [import_buffer2.Buffer.from("metadata", "utf8"), programId.toBuffer(), import_buffer2.Buffer.from("burn", "utf8")]);
  }
  /** Finds the record PDA for a given NFT and delegate authority. */
  tokenRecord(input) {
    const programId = this.programId(input.programs);
    return Pda.find(programId, [import_buffer2.Buffer.from("metadata", "utf8"), programId.toBuffer(), input.mint.toBuffer(), import_buffer2.Buffer.from("token_record", "utf8"), input.token.toBuffer()]);
  }
  /** Finds the record PDA for a given NFT and delegate authority. */
  metadataDelegateRecord(input) {
    const programId = this.programId(input.programs);
    return Pda.find(programId, [import_buffer2.Buffer.from("metadata", "utf8"), programId.toBuffer(), input.mint.toBuffer(), import_buffer2.Buffer.from(getMetadataDelegateRoleSeed(input.type), "utf8"), input.updateAuthority.toBuffer(), input.delegate.toBuffer()]);
  }
  programId(programs) {
    return this.metaplex.programs().getTokenMetadata(programs).address;
  }
};

// ../../node_modules/@metaplex-foundation/js/dist/esm/plugins/nftModule/operations/findNftByAssetId.mjs
var Key42 = "FindNftByAssetIdOperation";
var findNftByAssetIdOperation = useOperation(Key42);
var findNftByAssetIdOperationHandler = {
  handle: (operation, metaplex, scope) => __async(void 0, null, function* () {
    const {
      assetId
    } = operation.input;
    const asset = yield metaplex.rpc().getAsset(assetId);
    scope.throwIfCanceled();
    const metadata = toMetadataFromReadApiAsset(asset);
    const mint = toMintFromReadApiAsset(asset);
    const nftEdition = toNftEditionFromReadApiAsset(asset);
    return toNft(metadata, mint, nftEdition);
  })
};

// ../../node_modules/@metaplex-foundation/js/dist/esm/plugins/nftModule/operations/findNftByMint.mjs
var Key43 = "FindNftByMintOperation";
var findNftByMintOperation = useOperation(Key43);
var findNftByMintOperationHandler = {
  handle: (operation, metaplex, scope) => __async(void 0, null, function* () {
    const {
      programs,
      commitment
    } = scope;
    const {
      mintAddress,
      tokenAddress,
      tokenOwner,
      loadJsonMetadata = true
    } = operation.input;
    const associatedTokenAddress = tokenOwner ? metaplex.tokens().pdas().associatedTokenAccount({
      mint: mintAddress,
      owner: tokenOwner,
      programs
    }) : void 0;
    const nftPdas = metaplex.nfts().pdas();
    const accountAddresses = [mintAddress, nftPdas.metadata({
      mint: mintAddress,
      programs
    }), nftPdas.masterEdition({
      mint: mintAddress,
      programs
    }), tokenAddress ?? associatedTokenAddress].filter((address) => !!address);
    const accounts = yield metaplex.rpc().getMultipleAccounts(accountAddresses, commitment);
    scope.throwIfCanceled();
    const mint = toMint(toMintAccount(accounts[0]));
    let metadata = toMetadata(toMetadataAccount(accounts[1]));
    const editionAccount = parseOriginalOrPrintEditionAccount(accounts[2]);
    const token2 = accounts[3] ? toToken(toTokenAccount(accounts[3])) : null;
    if (loadJsonMetadata) {
      try {
        const json = yield metaplex.storage().downloadJson(metadata.uri, scope);
        metadata = __spreadProps(__spreadValues({}, metadata), {
          jsonLoaded: true,
          json
        });
      } catch (error2) {
        metadata = __spreadProps(__spreadValues({}, metadata), {
          jsonLoaded: true,
          json: null
        });
      }
    }
    const isNft2 = editionAccount.exists && mint.mintAuthorityAddress && mint.mintAuthorityAddress.equals(editionAccount.publicKey);
    if (isNft2) {
      const edition = toNftEdition(editionAccount);
      return token2 ? toNftWithToken(metadata, mint, edition, token2) : toNft(metadata, mint, edition);
    }
    return token2 ? toSftWithToken(metadata, mint, token2) : toSft(metadata, mint);
  })
};

// ../../node_modules/@metaplex-foundation/js/dist/esm/plugins/nftModule/operations/findNftByMetadata.mjs
var Key44 = "FindNftByMetadataOperation";
var findNftByMetadataOperation = useOperation(Key44);
var findNftByMetadataOperationHandler = {
  handle: (operation, metaplex, scope) => __async(void 0, null, function* () {
    const metadata = toMetadataAccount(yield metaplex.rpc().getAccount(operation.input.metadata));
    scope.throwIfCanceled();
    return metaplex.nfts().findByMint(__spreadProps(__spreadValues({}, operation.input), {
      mintAddress: metadata.data.mint
    }), scope);
  })
};

// ../../node_modules/@metaplex-foundation/js/dist/esm/plugins/nftModule/operations/findNftByToken.mjs
var Key45 = "FindNftByTokenOperation";
var findNftByTokenOperation = useOperation(Key45);
var findNftByTokenOperationHandler = {
  handle: (operation, metaplex, scope) => __async(void 0, null, function* () {
    const token2 = toTokenAccount(yield metaplex.rpc().getAccount(operation.input.token));
    scope.throwIfCanceled();
    const asset = yield metaplex.nfts().findByMint(__spreadProps(__spreadValues({}, operation.input), {
      mintAddress: token2.data.mint,
      tokenAddress: operation.input.token
    }), scope);
    return asset;
  })
};

// ../../node_modules/@metaplex-foundation/js/dist/esm/plugins/nftModule/gpaBuilders.mjs
var import_buffer4 = __toESM(require_buffer2(), 1);
var import_mpl_token_metadata30 = __toESM(require_mpl_token_metadata(), 1);

// ../../node_modules/@metaplex-foundation/js/dist/esm/utils/GpaBuilder.mjs
var import_buffer3 = __toESM(require_buffer2(), 1);
init_index_browser_esm();
var import_bs582 = __toESM(require_bs58(), 1);
var import_bn6 = __toESM(require_bn(), 1);

// ../../node_modules/@metaplex-foundation/js/dist/esm/utils/GmaBuilder.mjs
var GmaBuilder = class _GmaBuilder {
  constructor(metaplex, publicKeys, options = {}) {
    this.metaplex = metaplex;
    this.chunkSize = options.chunkSize ?? 100;
    this.commitment = options.commitment;
    this.publicKeys = publicKeys;
  }
  static make(metaplex, publicKeys, options = {}) {
    return new _GmaBuilder(metaplex, publicKeys, options);
  }
  chunkBy(n) {
    this.chunkSize = n;
    return this;
  }
  addPublicKeys(publicKeys) {
    this.publicKeys.push(...publicKeys);
    return this;
  }
  getPublicKeys() {
    return this.publicKeys;
  }
  getUniquePublicKeys() {
    return this.getPublicKeys();
  }
  getFirst(n) {
    return __async(this, null, function* () {
      const end = this.boundNumber(n ?? 1);
      return this.getChunks(this.getPublicKeys().slice(0, end));
    });
  }
  getLast(n) {
    return __async(this, null, function* () {
      const start = this.boundNumber(n ?? 1);
      return this.getChunks(this.getPublicKeys().slice(-start));
    });
  }
  getBetween(start, end) {
    return __async(this, null, function* () {
      start = this.boundNumber(start);
      end = this.boundNumber(end);
      [start, end] = start > end ? [end, start] : [start, end];
      return this.getChunks(this.getPublicKeys().slice(start, end));
    });
  }
  getPage(page, perPage) {
    return __async(this, null, function* () {
      return this.getBetween((page - 1) * perPage, page * perPage);
    });
  }
  get() {
    return __async(this, null, function* () {
      return this.getChunks(this.getPublicKeys());
    });
  }
  getAndMap(callback) {
    return __async(this, null, function* () {
      return (yield this.get()).map(callback);
    });
  }
  getChunks(publicKeys) {
    return __async(this, null, function* () {
      const chunks = chunk(publicKeys, this.chunkSize);
      const chunkPromises = chunks.map((chunk2) => this.getChunk(chunk2));
      const resolvedChunks = yield Promise.all(chunkPromises);
      return resolvedChunks.flat();
    });
  }
  getChunk(publicKeys) {
    return __async(this, null, function* () {
      try {
        return yield this.metaplex.rpc().getMultipleAccounts(publicKeys, this.commitment);
      } catch (error2) {
        throw error2;
      }
    });
  }
  boundNumber(n) {
    return this.boundIndex(n - 1) + 1;
  }
  boundIndex(index) {
    index = index < 0 ? 0 : index;
    index = index >= this.publicKeys.length ? this.publicKeys.length - 1 : index;
    return index;
  }
};

// ../../node_modules/@metaplex-foundation/js/dist/esm/utils/GpaBuilder.mjs
var GpaBuilder = class {
  /** The connection instance to use when fetching accounts. */
  /** The public key of the program we want to retrieve accounts from. */
  /** The configs to use when fetching program accounts. */
  constructor(metaplex, programId) {
    _defineProperty(this, "config", {});
    this.metaplex = metaplex;
    this.programId = programId;
  }
  mergeConfig(config) {
    this.config = __spreadValues(__spreadValues({}, this.config), config);
    return this;
  }
  slice(offset, length) {
    this.config.dataSlice = {
      offset,
      length
    };
    return this;
  }
  withoutData() {
    return this.slice(0, 0);
  }
  addFilter(...filters) {
    if (!this.config.filters) {
      this.config.filters = [];
    }
    this.config.filters.push(...filters);
    return this;
  }
  where(offset, bytes) {
    if (import_buffer3.Buffer.isBuffer(bytes)) {
      bytes = import_bs582.default.encode(bytes);
    } else if (typeof bytes === "object" && "toBase58" in bytes) {
      bytes = bytes.toBase58();
    } else if (import_bn6.default.isBN(bytes)) {
      bytes = import_bs582.default.encode(bytes.toArray());
    } else if (typeof bytes !== "string") {
      bytes = import_bs582.default.encode(new import_bn6.default(bytes, "le").toArray());
    }
    return this.addFilter({
      memcmp: {
        offset,
        bytes
      }
    });
  }
  whereSize(dataSize) {
    return this.addFilter({
      dataSize
    });
  }
  sortUsing(callback) {
    this.sortCallback = callback;
    return this;
  }
  get() {
    return __async(this, null, function* () {
      const accounts = yield this.metaplex.rpc().getProgramAccounts(this.programId, this.config);
      if (this.sortCallback) {
        accounts.sort(this.sortCallback);
      }
      return accounts;
    });
  }
  getAndMap(callback) {
    return __async(this, null, function* () {
      return (yield this.get()).map(callback);
    });
  }
  getPublicKeys() {
    return __async(this, null, function* () {
      return this.getAndMap((account) => account.publicKey);
    });
  }
  getDataAsPublicKeys() {
    return __async(this, null, function* () {
      return this.getAndMap((account) => new PublicKey(account.data));
    });
  }
  getMultipleAccounts(callback, options) {
    return __async(this, null, function* () {
      const cb = callback ?? ((account) => new PublicKey(account.data));
      return new GmaBuilder(this.metaplex, yield this.getAndMap(cb), options);
    });
  }
};

// ../../node_modules/@metaplex-foundation/js/dist/esm/plugins/nftModule/gpaBuilders.mjs
var MAX_NAME_LENGTH = 32;
var MAX_SYMBOL_LENGTH = 10;
var MAX_URI_LENGTH = 200;
var MAX_CREATOR_LEN = 32 + 1 + 1;
var DATA_START = 1 + 32 + 32;
var NAME_START = DATA_START + 4;
var SYMBOL_START = NAME_START + MAX_NAME_LENGTH + 4;
var URI_START = SYMBOL_START + MAX_SYMBOL_LENGTH + 4;
var CREATORS_START = URI_START + MAX_URI_LENGTH + 2 + 1 + 4;
var TokenMetadataGpaBuilder = class extends GpaBuilder {
  constructor(metaplex, programId) {
    super(metaplex, programId ?? import_mpl_token_metadata30.PROGRAM_ID);
  }
  whereKey(key) {
    return this.where(0, toBigNumber(key, "le"));
  }
};
var MetadataV1GpaBuilder = class extends TokenMetadataGpaBuilder {
  constructor(metaplex, programId) {
    super(metaplex, programId);
    this.whereKey(import_mpl_token_metadata30.Key.MetadataV1);
  }
  selectUpdatedAuthority() {
    return this.slice(1, 32);
  }
  whereUpdateAuthority(updateAuthority) {
    return this.where(1, updateAuthority);
  }
  selectMint() {
    return this.slice(33, 32);
  }
  whereMint(mint) {
    return this.where(33, mint);
  }
  selectName() {
    return this.slice(NAME_START, MAX_NAME_LENGTH);
  }
  whereName(name) {
    return this.where(NAME_START, import_buffer4.Buffer.from(padEmptyChars(name, MAX_NAME_LENGTH)));
  }
  selectSymbol() {
    return this.slice(SYMBOL_START, MAX_SYMBOL_LENGTH);
  }
  whereSymbol(symbol) {
    return this.where(SYMBOL_START, import_buffer4.Buffer.from(padEmptyChars(symbol, MAX_SYMBOL_LENGTH)));
  }
  selectUri() {
    return this.slice(URI_START, MAX_URI_LENGTH);
  }
  whereUri(uri) {
    return this.where(URI_START, import_buffer4.Buffer.from(padEmptyChars(uri, MAX_URI_LENGTH)));
  }
  selectCreator(position) {
    return this.slice(CREATORS_START + (position - 1) * MAX_CREATOR_LEN, CREATORS_START + position * MAX_CREATOR_LEN);
  }
  whereCreator(position, creator) {
    return this.where(CREATORS_START + (position - 1) * MAX_CREATOR_LEN, creator);
  }
  selectFirstCreator() {
    return this.selectCreator(1);
  }
  whereFirstCreator(firstCreator) {
    return this.whereCreator(1, firstCreator);
  }
};

// ../../node_modules/@metaplex-foundation/js/dist/esm/plugins/nftModule/operations/findNftsByCreator.mjs
var Key47 = "FindNftsByCreatorOperation";
var findNftsByCreatorOperation = useOperation(Key47);
var findNftsByCreatorOperationHandler = {
  handle: (operation, metaplex, scope) => __async(void 0, null, function* () {
    const {
      programs
    } = scope;
    const {
      creator,
      position = 1
    } = operation.input;
    const gpaBuilder = new MetadataV1GpaBuilder(metaplex, metaplex.programs().getTokenMetadata(programs).address);
    const nfts = yield gpaBuilder.whereCreator(position, creator).get();
    scope.throwIfCanceled();
    return nfts.map((account) => {
      if (account == null) {
        return null;
      }
      try {
        return toMetadata(toMetadataAccount(account));
      } catch (error2) {
        return null;
      }
    }).filter((nft) => nft !== null);
  })
};

// ../../node_modules/@metaplex-foundation/js/dist/esm/plugins/nftModule/operations/findNftsByMintList.mjs
var Key48 = "FindNftsByMintListOperation";
var findNftsByMintListOperation = useOperation(Key48);
var findNftsByMintListOperationHandler = {
  handle: (operation, metaplex, scope) => __async(void 0, null, function* () {
    const {
      commitment,
      programs
    } = scope;
    const {
      mints
    } = operation.input;
    const nftPdas = metaplex.nfts().pdas();
    const metadataPdas = mints.map((mint) => nftPdas.metadata({
      mint,
      programs
    }));
    const metadataInfos = yield GmaBuilder.make(metaplex, metadataPdas, {
      commitment
    }).get();
    scope.throwIfCanceled();
    return metadataInfos.map((account) => {
      if (!account.exists) {
        return null;
      }
      try {
        return toMetadata(toMetadataAccount(account));
      } catch (error2) {
        return null;
      }
    });
  })
};

// ../../node_modules/@metaplex-foundation/js/dist/esm/plugins/tokenModule/gpaBuilders.mjs
var MintGpaBuilder = class extends GpaBuilder {
  constructor(metaplex, programId) {
    super(metaplex, programId ?? TOKEN_PROGRAM_ID2);
    this.whereSize(MINT_SIZE);
  }
  whereDoesntHaveMintAuthority() {
    return this.where(0, 0);
  }
  whereHasMintAuthority() {
    return this.where(0, 1);
  }
  whereMintAuthority(mintAuthority) {
    return this.whereHasMintAuthority().where(4, mintAuthority);
  }
  whereSupply(supply) {
    return this.where(36, supply);
  }
  // TODO(loris): Map the rest of the layout.
  // https://github.com/solana-labs/solana-program-library/blob/master/token/js/src/state/mint.ts#L43
};
var TokenGpaBuilder = class extends GpaBuilder {
  constructor(metaplex, programId) {
    super(metaplex, programId ?? TOKEN_PROGRAM_ID2);
    this.whereSize(ACCOUNT_SIZE);
  }
  selectMint() {
    return this.slice(0, 32);
  }
  whereMint(mint) {
    return this.where(0, mint);
  }
  selectOwner() {
    return this.slice(32, 32);
  }
  whereOwner(owner) {
    return this.where(32, owner);
  }
  selectAmount() {
    return this.slice(64, 8);
  }
  whereAmount(amount2) {
    return this.where(64, amount2);
  }
  whereDoesntHaveDelegate() {
    return this.where(72, 0);
  }
  whereHasDelegate() {
    return this.where(72, 1);
  }
  whereDelegate(delegate) {
    return this.whereHasDelegate().where(76, delegate);
  }
  // TODO(loris): Map the rest of the layout.
  // https://github.com/solana-labs/solana-program-library/blob/master/token/js/src/state/account.ts#L59
};

// ../../node_modules/@metaplex-foundation/js/dist/esm/plugins/nftModule/operations/findNftsByOwner.mjs
var Key49 = "FindNftsByOwnerOperation";
var findNftsByOwnerOperation = useOperation(Key49);
var findNftsByOwnerOperationHandler = {
  handle: (operation, metaplex, scope) => __async(void 0, null, function* () {
    const {
      programs
    } = scope;
    const {
      owner
    } = operation.input;
    const tokenProgram2 = metaplex.programs().getToken(programs);
    const mints = yield new TokenGpaBuilder(metaplex, tokenProgram2.address).selectMint().whereOwner(owner).whereAmount(1).getDataAsPublicKeys();
    scope.throwIfCanceled();
    const nfts = yield metaplex.nfts().findAllByMintList({
      mints
    }, scope);
    scope.throwIfCanceled();
    return nfts.filter((nft) => nft !== null);
  })
};

// ../../node_modules/@metaplex-foundation/js/dist/esm/plugins/nftModule/operations/findNftsByUpdateAuthority.mjs
var Key50 = "FindNftsByUpdateAuthorityOperation";
var findNftsByUpdateAuthorityOperation = useOperation(Key50);
var findNftsByUpdateAuthorityOperationHandler = {
  handle: (operation, metaplex, scope) => __async(void 0, null, function* () {
    const {
      updateAuthority
    } = operation.input;
    const gpaBuilder = new MetadataV1GpaBuilder(metaplex, metaplex.programs().getTokenMetadata(scope.programs).address);
    const nfts = yield gpaBuilder.whereUpdateAuthority(updateAuthority).get();
    scope.throwIfCanceled();
    return nfts.map((account) => {
      if (account == null) {
        return null;
      }
      try {
        return toMetadata(toMetadataAccount(account));
      } catch (error2) {
        return null;
      }
    }).filter((nft) => nft !== null);
  })
};

// ../../node_modules/@metaplex-foundation/js/dist/esm/plugins/nftModule/operations/loadMetadata.mjs
var Key51 = "LoadMetadataOperation";
var loadMetadataOperation = useOperation(Key51);
var loadMetadataOperationHandler = {
  handle: (operation, metaplex, scope) => __async(void 0, null, function* () {
    const {
      metadata,
      loadJsonMetadata = true
    } = operation.input;
    let nftOrSft = yield metaplex.nfts().findByMint(__spreadProps(__spreadValues({}, operation.input), {
      mintAddress: metadata.mintAddress,
      loadJsonMetadata: !metadata.jsonLoaded && loadJsonMetadata
    }), scope);
    if (!nftOrSft.jsonLoaded && metadata.jsonLoaded) {
      nftOrSft = __spreadProps(__spreadValues({}, nftOrSft), {
        json: metadata.json,
        jsonLoaded: true
      });
    }
    return nftOrSft;
  })
};

// ../../node_modules/@metaplex-foundation/js/dist/esm/plugins/nftModule/operations/uploadMetadata.mjs
var import_lodash2 = __toESM(require_lodash2(), 1);
var Key52 = "UploadMetadataOperation";
var uploadMetadataOperation = useOperation(Key52);
var uploadMetadataOperationHandler = {
  handle: (operation, metaplex, scope) => __async(void 0, null, function* () {
    const rawMetadata = operation.input;
    const files = getAssetsFromJsonMetadata(rawMetadata);
    const assetUris = yield metaplex.storage().uploadAll(files);
    scope.throwIfCanceled();
    const metadata = replaceAssetsWithUris(rawMetadata, assetUris);
    const uri = yield metaplex.storage().uploadJson(metadata);
    return {
      uri,
      metadata,
      assetUris
    };
  })
};
var getAssetsFromJsonMetadata = (input) => {
  const files = [];
  walk(input, (next, value) => {
    if (isMetaplexFile(value)) {
      files.push(value);
    } else {
      next(value);
    }
  });
  return files;
};
var replaceAssetsWithUris = (input, replacements) => {
  const clone2 = (0, import_lodash2.default)(input);
  let index = 0;
  walk(clone2, (next, value, key, parent) => {
    if (isMetaplexFile(value)) {
      if (index < replacements.length) {
        parent[key] = replacements[index++];
      }
    } else {
      next(value);
    }
  });
  return clone2;
};

// ../../node_modules/@metaplex-foundation/js/dist/esm/plugins/nftModule/NftClient.mjs
var NftClient = class {
  constructor(metaplex) {
    this.metaplex = metaplex;
  }
  /**
   * You may use the `builders()` client to access the
   * underlying Transaction Builders of this module.
   *
   * ```ts
   * const buildersClient = metaplex.nfts().builders();
   * ```
   */
  builders() {
    return new NftBuildersClient(this.metaplex);
  }
  /**
   * You may use the `pdas()` client to build PDAs related to this module.
   *
   * ```ts
   * const pdasClient = metaplex.nfts().pdas();
   * ```
   */
  pdas() {
    return new NftPdasClient(this.metaplex);
  }
  // -----------------
  // Queries
  // -----------------
  /** {@inheritDoc findNftByMintOperation} */
  findByMint(input, options) {
    return this.metaplex.operations().execute(findNftByMintOperation(input), options);
  }
  /** {@inheritDoc findNftByMetadataOperation} */
  findByMetadata(input, options) {
    return this.metaplex.operations().execute(findNftByMetadataOperation(input), options);
  }
  /** {@inheritDoc findNftByTokenOperation} */
  findByToken(input, options) {
    return this.metaplex.operations().execute(findNftByTokenOperation(input), options);
  }
  /** {@inheritDoc findNftsByCreatorOperation} */
  findAllByCreator(input, options) {
    return this.metaplex.operations().execute(findNftsByCreatorOperation(input), options);
  }
  /** {@inheritDoc findNftsByMintListOperation} */
  findAllByMintList(input, options) {
    return this.metaplex.operations().execute(findNftsByMintListOperation(input), options);
  }
  /** {@inheritDoc findNftsByOwnerOperation} */
  findAllByOwner(input, options) {
    return this.metaplex.operations().execute(findNftsByOwnerOperation(input), options);
  }
  /** {@inheritDoc findNftsByUpdateAuthorityOperation} */
  findAllByUpdateAuthority(input, options) {
    return this.metaplex.operations().execute(findNftsByUpdateAuthorityOperation(input), options);
  }
  /** {@inheritDoc findNftByAssetIdOperation} */
  findByAssetId(input, options) {
    return this.metaplex.operations().execute(findNftByAssetIdOperation(input), options);
  }
  /** {@inheritDoc loadMetadataOperation} */
  load(input, options) {
    return this.metaplex.operations().execute(loadMetadataOperation(input), options);
  }
  /**
   * Helper method that refetches a given model
   * and returns an instance of the same type.
   *
   * ```ts
   * nft = await metaplex.nfts().refresh(nft);
   * sft = await metaplex.nfts().refresh(sft);
   * nftWithToken = await metaplex.nfts().refresh(nftWithToken);
   * ```
   */
  refresh(model, input, options) {
    return this.findByMint(__spreadValues({
      mintAddress: toMintAddress(model),
      tokenAddress: "token" in model ? model.token.address : void 0
    }, input), options);
  }
  // -----------------
  // Create, Update and Delete
  // -----------------
  /** {@inheritDoc createNftOperation} */
  create(input, options) {
    if (input?.tree)
      return this.metaplex.operations().execute(createCompressedNftOperation(input), options);
    return this.metaplex.operations().execute(createNftOperation(input), options);
  }
  /** {@inheritDoc createSftOperation} */
  createSft(input, options) {
    return this.metaplex.operations().execute(createSftOperation(input), options);
  }
  /** {@inheritDoc printNewEditionOperation} */
  printNewEdition(input, options) {
    return this.metaplex.operations().execute(printNewEditionOperation(input), options);
  }
  /** {@inheritDoc uploadMetadataOperation} */
  uploadMetadata(input, options) {
    return this.metaplex.operations().execute(uploadMetadataOperation(input), options);
  }
  /** {@inheritDoc updateNftOperation} */
  update(input, options) {
    return this.metaplex.operations().execute(updateNftOperation(input), options);
  }
  /** {@inheritDoc deleteNftOperation} */
  delete(input, options) {
    return this.metaplex.operations().execute(deleteNftOperation(input), options);
  }
  // -----------------
  // Delegates
  // -----------------
  /** {@inheritDoc approveNftDelegateOperation} */
  delegate(input, options) {
    return this.metaplex.operations().execute(approveNftDelegateOperation(input), options);
  }
  /** {@inheritDoc revokeNftDelegateOperation} */
  revoke(input, options) {
    return this.metaplex.operations().execute(revokeNftDelegateOperation(input), options);
  }
  // -----------------
  // Use
  // -----------------
  /** {@inheritDoc useNftOperation} */
  use(input, options) {
    return this.metaplex.operations().execute(useNftOperation(input), options);
  }
  /** {@inheritDoc approveNftUseAuthorityOperation} */
  approveUseAuthority(input, options) {
    return this.metaplex.operations().execute(approveNftUseAuthorityOperation(input), options);
  }
  /** {@inheritDoc revokeNftUseAuthorityOperation} */
  revokeUseAuthority(input, options) {
    return this.metaplex.operations().execute(revokeNftUseAuthorityOperation(input), options);
  }
  // -----------------
  // Creators
  // -----------------
  /** {@inheritDoc verifyNftCreatorOperation} */
  verifyCreator(input, options) {
    return this.metaplex.operations().execute(verifyNftCreatorOperation(input), options);
  }
  /** {@inheritDoc unverifyNftCreatorOperation} */
  unverifyCreator(input, options) {
    return this.metaplex.operations().execute(unverifyNftCreatorOperation(input), options);
  }
  // -----------------
  // Collections
  // -----------------
  /** {@inheritDoc verifyNftCollectionOperation} */
  verifyCollection(input, options) {
    return this.metaplex.operations().execute(verifyNftCollectionOperation(input), options);
  }
  /** {@inheritDoc unverifyNftCollectionOperation} */
  unverifyCollection(input, options) {
    return this.metaplex.operations().execute(unverifyNftCollectionOperation(input), options);
  }
  /** {@inheritDoc approveNftCollectionAuthorityOperation} */
  approveCollectionAuthority(input, options) {
    return this.metaplex.operations().execute(approveNftCollectionAuthorityOperation(input), options);
  }
  /** {@inheritDoc revokeNftCollectionAuthorityOperation} */
  revokeCollectionAuthority(input, options) {
    return this.metaplex.operations().execute(revokeNftCollectionAuthorityOperation(input), options);
  }
  /** {@inheritDoc migrateToSizedCollectionNftOperation} */
  migrateToSizedCollection(input, options) {
    return this.metaplex.operations().execute(migrateToSizedCollectionNftOperation(input), options);
  }
  // -----------------
  // Programmables
  // -----------------
  /** {@inheritDoc lockNftOperation} */
  lock(input, options) {
    return this.metaplex.operations().execute(lockNftOperation(input), options);
  }
  /** {@inheritDoc unlockNftOperation} */
  unlock(input, options) {
    return this.metaplex.operations().execute(unlockNftOperation(input), options);
  }
  // -----------------
  // Tokens
  // -----------------
  /** {@inheritDoc mintNftOperation} */
  mint(input, options) {
    return this.metaplex.operations().execute(mintNftOperation(input), options);
  }
  /** {@inheritDoc transferNftOperation} */
  transfer(input, options) {
    return this.metaplex.operations().execute(transferNftOperation(input), options);
  }
  /** {@inheritDoc freezeDelegatedNftOperation} */
  freezeDelegatedNft(input, options) {
    return this.metaplex.operations().execute(freezeDelegatedNftOperation(input), options);
  }
  /** {@inheritDoc thawDelegatedNftOperation} */
  thawDelegatedNft(input, options) {
    return this.metaplex.operations().execute(thawDelegatedNftOperation(input), options);
  }
};

// ../../node_modules/@metaplex-foundation/js/dist/esm/plugins/nftModule/plugin.mjs
var nftModule = () => ({
  install(metaplex) {
    const tokenMetadataProgram = {
      name: "TokenMetadataProgram",
      address: import_mpl_token_metadata31.PROGRAM_ID,
      errorResolver: (error2) => import_mpl_token_metadata31.cusper.errorFromProgramLogs(error2.logs, false)
    };
    metaplex.programs().register(tokenMetadataProgram);
    metaplex.programs().getTokenMetadata = function(programs) {
      return this.get(tokenMetadataProgram.name, programs);
    };
    const op = metaplex.operations();
    op.register(approveNftCollectionAuthorityOperation, approveNftCollectionAuthorityOperationHandler);
    op.register(approveNftDelegateOperation, approveNftDelegateOperationHandler);
    op.register(approveNftUseAuthorityOperation, approveNftUseAuthorityOperationHandler);
    op.register(createNftOperation, createNftOperationHandler);
    op.register(createSftOperation, createSftOperationHandler);
    op.register(deleteNftOperation, deleteNftOperationHandler);
    op.register(findNftByAssetIdOperation, findNftByAssetIdOperationHandler);
    op.register(createCompressedNftOperation, createCompressedNftOperationHandler);
    op.register(transferCompressedNftOperation, transferCompressedNftOperationHandler);
    op.register(findNftByMetadataOperation, findNftByMetadataOperationHandler);
    op.register(findNftByMintOperation, findNftByMintOperationHandler);
    op.register(findNftByTokenOperation, findNftByTokenOperationHandler);
    op.register(findNftsByCreatorOperation, findNftsByCreatorOperationHandler);
    op.register(findNftsByMintListOperation, findNftsByMintListOperationHandler);
    op.register(findNftsByOwnerOperation, findNftsByOwnerOperationHandler);
    op.register(findNftsByUpdateAuthorityOperation, findNftsByUpdateAuthorityOperationHandler);
    op.register(freezeDelegatedNftOperation, freezeDelegatedNftOperationHandler);
    op.register(loadMetadataOperation, loadMetadataOperationHandler);
    op.register(lockNftOperation, lockNftOperationHandler);
    op.register(migrateToSizedCollectionNftOperation, migrateToSizedCollectionNftOperationHandler);
    op.register(mintNftOperation, mintNftOperationHandler);
    op.register(printNewEditionOperation, printNewEditionOperationHandler);
    op.register(revokeNftCollectionAuthorityOperation, revokeNftCollectionAuthorityOperationHandler);
    op.register(revokeNftDelegateOperation, revokeNftDelegateOperationHandler);
    op.register(revokeNftUseAuthorityOperation, revokeNftUseAuthorityOperationHandler);
    op.register(thawDelegatedNftOperation, thawDelegatedNftOperationHandler);
    op.register(transferNftOperation, transferNftOperationHandler);
    op.register(unlockNftOperation, unlockNftOperationHandler);
    op.register(unverifyNftCollectionOperation, unverifyNftCollectionOperationHandler);
    op.register(unverifyNftCreatorOperation, unverifyNftCreatorOperationHandler);
    op.register(updateNftOperation, updateNftOperationHandler);
    op.register(uploadMetadataOperation, uploadMetadataOperationHandler);
    op.register(useNftOperation, useNftOperationHandler);
    op.register(verifyNftCollectionOperation, verifyNftCollectionOperationHandler);
    op.register(verifyNftCreatorOperation, verifyNftCreatorOperationHandler);
    metaplex.nfts = function() {
      return new NftClient(this);
    };
  }
});

// ../../node_modules/@metaplex-foundation/js/dist/esm/plugins/candyMachineV2Module/operations/createCandyMachineV2.mjs
var import_mpl_candy_machine4 = __toESM(require_mpl_candy_machine(), 1);
init_index_browser_esm();

// ../../node_modules/@metaplex-foundation/js/dist/esm/plugins/candyMachineV2Module/helpers.mjs
var import_mpl_candy_machine = __toESM(require_mpl_candy_machine(), 1);

// ../../node_modules/@metaplex-foundation/js/dist/esm/plugins/candyMachineV2Module/constants.mjs
var MAX_NAME_LENGTH2 = 32;
var MAX_SYMBOL_LENGTH2 = 10;
var MAX_URI_LENGTH2 = 200;
var MAX_CREATOR_LIMIT = 5;
var MAX_CREATOR_LEN2 = 32 + 1 + 1;
var CONFIG_LINE_SIZE = 4 + MAX_NAME_LENGTH2 + 4 + MAX_URI_LENGTH2;
var CONFIG_ARRAY_START = 8 + // key
32 + // authority
32 + // wallet
33 + // token mint
4 + 6 + // uuid
8 + // price
8 + // items available
9 + // go live
10 + // end settings
4 + MAX_SYMBOL_LENGTH2 + // u32 len + symbol
2 + // seller fee basis points
4 + MAX_CREATOR_LIMIT * MAX_CREATOR_LEN2 + // optional + u32 len + actual vec
8 + // max supply
1 + // is mutable
1 + // retain authority
1 + // option for hidden setting
4 + MAX_NAME_LENGTH2 + // name length,
4 + MAX_URI_LENGTH2 + // uri length,
32 + // hash
4 + // max number of lines;
8 + // items redeemed
1 + // whitelist option
1 + // whitelist mint mode
1 + // allow presale
9 + // discount price
32 + // mint key for whitelist
1 + 32 + 1;

// ../../node_modules/@metaplex-foundation/js/dist/esm/plugins/candyMachineV2Module/helpers.mjs
function countCandyMachineV2Items(rawData) {
  const number = rawData.slice(CONFIG_ARRAY_START, CONFIG_ARRAY_START + 4);
  return toBigNumber(number, "le");
}
function parseCandyMachineV2Items(rawData) {
  const configLinesStart = CONFIG_ARRAY_START + 4;
  const lines = [];
  const count = countCandyMachineV2Items(rawData).toNumber();
  for (let i = 0; i < count; i++) {
    const [line] = import_mpl_candy_machine.configLineBeet.deserialize(rawData, configLinesStart + i * CONFIG_LINE_SIZE);
    lines.push({
      name: removeEmptyChars(line.name),
      uri: removeEmptyChars(line.uri)
    });
  }
  return lines;
}
function getCandyMachineV2AccountSizeFromData(data) {
  if (data.hiddenSettings != null) {
    return CONFIG_ARRAY_START;
  }
  const itemsAvailable = toBigNumber(data.itemsAvailable).toNumber();
  return Math.ceil(CONFIG_ARRAY_START + 4 + itemsAvailable * CONFIG_LINE_SIZE + 8 + 2 * (itemsAvailable / 8 + 1));
}
var getCandyMachineV2UuidFromAddress = (candyMachineAddress) => {
  return candyMachineAddress.toBase58().slice(0, 6);
};

// ../../node_modules/@metaplex-foundation/js/dist/esm/plugins/candyMachineV2Module/pdas.mjs
var import_buffer5 = __toESM(require_buffer2(), 1);

// ../../node_modules/@metaplex-foundation/js/dist/esm/plugins/candyMachineV2Module/program.mjs
var import_mpl_candy_machine2 = __toESM(require_mpl_candy_machine(), 1);

// ../../node_modules/@metaplex-foundation/js/dist/esm/plugins/candyMachineV2Module/gpaBuilders.mjs
init_index_browser_esm();
var candyMachineV2Discriminator = [51, 173, 177, 113, 25, 241, 109, 189];
var AUTHORITY = candyMachineV2Discriminator.length;
var WALLET = AUTHORITY + PublicKey.default.toBytes().byteLength;
var CandyMachineV2GpaBuilder = class extends GpaBuilder {
  whereDiscriminator(discrimator) {
    return this.where(0, Buffer.from(discrimator));
  }
  candyMachineAccounts() {
    return this.whereDiscriminator(candyMachineV2Discriminator);
  }
  // wallet same as solTreasury
  candyMachineAccountsForWallet(wallet) {
    return this.candyMachineAccounts().where(WALLET, wallet.toBase58());
  }
  candyMachineAccountsForAuthority(authority) {
    return this.candyMachineAccounts().where(AUTHORITY, authority.toBase58());
  }
};

// ../../node_modules/@metaplex-foundation/js/dist/esm/plugins/candyMachineV2Module/program.mjs
var CandyMachineV2Program = {
  publicKey: import_mpl_candy_machine2.PROGRAM_ID,
  accounts(metaplex) {
    return new CandyMachineV2GpaBuilder(metaplex, this.publicKey);
  }
};

// ../../node_modules/@metaplex-foundation/js/dist/esm/plugins/candyMachineV2Module/pdas.mjs
var findCandyMachineV2CreatorPda = (candyMachine, programId = CandyMachineV2Program.publicKey) => {
  return Pda.find(programId, [import_buffer5.Buffer.from("candy_machine", "utf8"), candyMachine.toBuffer()]);
};
var findCandyMachineV2CollectionPda = (candyMachine, programId = CandyMachineV2Program.publicKey) => {
  return Pda.find(programId, [import_buffer5.Buffer.from("collection", "utf8"), candyMachine.toBuffer()]);
};

// ../../node_modules/@metaplex-foundation/js/dist/esm/plugins/candyMachineV2Module/models/CandyMachineV2.mjs
var import_mpl_candy_machine3 = __toESM(require_mpl_candy_machine(), 1);

// ../../node_modules/@metaplex-foundation/js/dist/esm/types/DateTime.mjs
var import_bn7 = __toESM(require_bn(), 1);
var toDateTime = (value) => {
  if (typeof value === "string" || isDateObject(value)) {
    const date = new Date(value);
    const timestamp = Math.floor(date.getTime() / 1e3);
    return new import_bn7.default(timestamp);
  }
  return new import_bn7.default(value);
};
var now = () => toDateTime(new Date(Date.now()));
var toOptionDateTime = (value) => {
  return value === null ? null : toDateTime(value);
};
var isDateTime = (value) => {
  return value?.__opaque__ === "DateTime";
};
function assertDateTime(value) {
  assert2(isDateTime(value), "Expected DateTime type");
}
var isDateObject = (value) => {
  return Object.prototype.toString.call(value) === "[object Date]";
};
var formatDateTime = (value, locales = "en-US", options = {
  month: "short",
  day: "numeric",
  year: "numeric",
  hour: "numeric",
  minute: "numeric"
}) => {
  const date = new Date(value.toNumber() * 1e3);
  return date.toLocaleDateString(locales, options);
};

// ../../node_modules/@metaplex-foundation/js/dist/esm/plugins/candyMachineV2Module/models/CandyMachineV2.mjs
var isCandyMachineV2 = (value) => typeof value === "object" && value.model === "candyMachineV2";
function assertCandyMachineV2(value) {
  assert2(isCandyMachineV2(value), "Expected CandyMachineV2 type");
}
var toCandyMachineV2 = (account, unparsedAccount, collectionAccount, mint) => {
  assert2(mint === null || account.data.tokenMint !== null && mint.address.equals(account.data.tokenMint));
  const itemsAvailable = toBigNumber(account.data.data.itemsAvailable);
  const itemsMinted = toBigNumber(account.data.itemsRedeemed);
  const {
    endSettings
  } = account.data.data;
  const {
    hiddenSettings
  } = account.data.data;
  const {
    whitelistMintSettings
  } = account.data.data;
  const {
    gatekeeper
  } = account.data.data;
  const rawData = unparsedAccount.data;
  const itemsLoaded = hiddenSettings ? toBigNumber(0) : countCandyMachineV2Items(rawData);
  const items = hiddenSettings ? [] : parseCandyMachineV2Items(rawData);
  return {
    model: "candyMachineV2",
    address: account.publicKey,
    programAddress: account.owner,
    version: account.owner.equals(CandyMachineV2Program.publicKey) ? 2 : 1,
    authorityAddress: account.data.authority,
    walletAddress: account.data.wallet,
    tokenMintAddress: account.data.tokenMint,
    collectionMintAddress: collectionAccount && collectionAccount.exists ? collectionAccount.data.mint : null,
    uuid: account.data.data.uuid,
    price: amount(account.data.data.price, mint ? mint.currency : SOL),
    symbol: removeEmptyChars(account.data.data.symbol),
    sellerFeeBasisPoints: account.data.data.sellerFeeBasisPoints,
    isMutable: account.data.data.isMutable,
    retainAuthority: account.data.data.retainAuthority,
    goLiveDate: toOptionDateTime(account.data.data.goLiveDate),
    maxEditionSupply: toBigNumber(account.data.data.maxSupply),
    items,
    itemsAvailable,
    itemsMinted,
    itemsRemaining: toBigNumber(itemsAvailable.sub(itemsMinted)),
    itemsLoaded,
    isFullyLoaded: itemsAvailable.lte(itemsLoaded),
    // eslint-disable-next-line no-nested-ternary
    endSettings: endSettings ? endSettings.endSettingType === import_mpl_candy_machine3.EndSettingType.Date ? {
      endSettingType: import_mpl_candy_machine3.EndSettingType.Date,
      date: toDateTime(endSettings.number)
    } : {
      endSettingType: import_mpl_candy_machine3.EndSettingType.Amount,
      number: toBigNumber(endSettings.number)
    } : null,
    hiddenSettings,
    whitelistMintSettings: whitelistMintSettings ? __spreadProps(__spreadValues({}, whitelistMintSettings), {
      discountPrice: whitelistMintSettings.discountPrice ? lamports(whitelistMintSettings.discountPrice) : null
    }) : null,
    gatekeeper: gatekeeper ? __spreadProps(__spreadValues({}, gatekeeper), {
      network: gatekeeper.gatekeeperNetwork
    }) : null,
    creators: account.data.data.creators
  };
};
var toCandyMachineV2Configs = (candyMachine) => {
  return __spreadValues({
    wallet: candyMachine.walletAddress,
    tokenMint: candyMachine.tokenMintAddress
  }, candyMachine);
};
var toCandyMachineV2InstructionData = (address, configs) => {
  const {
    endSettings
  } = configs;
  const {
    whitelistMintSettings
  } = configs;
  const {
    gatekeeper
  } = configs;
  return {
    wallet: configs.wallet,
    tokenMint: configs.tokenMint,
    data: __spreadProps(__spreadValues({}, configs), {
      uuid: getCandyMachineV2UuidFromAddress(address),
      price: configs.price.basisPoints,
      maxSupply: configs.maxEditionSupply,
      endSettings: endSettings ? __spreadProps(__spreadValues({}, endSettings), {
        number: endSettings.endSettingType === import_mpl_candy_machine3.EndSettingType.Date ? endSettings.date : endSettings.number
      }) : null,
      whitelistMintSettings: whitelistMintSettings ? __spreadProps(__spreadValues({}, whitelistMintSettings), {
        discountPrice: whitelistMintSettings.discountPrice?.basisPoints ?? null
      }) : null,
      gatekeeper: gatekeeper ? __spreadProps(__spreadValues({}, gatekeeper), {
        gatekeeperNetwork: gatekeeper.network
      }) : null
    })
  };
};

// ../../node_modules/@metaplex-foundation/js/dist/esm/plugins/candyMachineV2Module/operations/createCandyMachineV2.mjs
var Key53 = "CreateCandyMachineV2Operation";
var createCandyMachineV2Operation = useOperation(Key53);
var createCandyMachineV2OperationHandler = {
  handle(operation, metaplex, scope) {
    return __async(this, null, function* () {
      const builder = yield createCandyMachineV2Builder(metaplex, operation.input, scope);
      scope.throwIfCanceled();
      const confirmOptions = makeConfirmOptionsFinalizedOnMainnet(metaplex, scope.confirmOptions);
      const output = yield builder.sendAndConfirm(metaplex, confirmOptions);
      scope.throwIfCanceled();
      const candyMachine = yield metaplex.candyMachinesV2().findByAddress({
        address: output.candyMachineSigner.publicKey
      }, scope);
      return __spreadProps(__spreadValues({}, output), {
        candyMachine
      });
    });
  }
};
var createCandyMachineV2Builder = (_0, _1, ..._2) => __async(void 0, [_0, _1, ..._2], function* (metaplex, params, options = {}) {
  const {
    programs,
    payer = metaplex.rpc().getDefaultFeePayer()
  } = options;
  const candyMachine = params.candyMachine ?? Keypair.generate();
  const authority = params.authority ?? metaplex.identity();
  const collection = params.collection ?? null;
  const {
    data,
    wallet,
    tokenMint
  } = toCandyMachineV2InstructionData(candyMachine.publicKey, __spreadProps(__spreadValues({}, params), {
    wallet: params.wallet ?? metaplex.identity().publicKey,
    tokenMint: params.tokenMint ?? null,
    symbol: params.symbol ?? "",
    maxEditionSupply: params.maxEditionSupply ?? toBigNumber(0),
    isMutable: params.isMutable ?? true,
    retainAuthority: params.retainAuthority ?? true,
    goLiveDate: params.goLiveDate ?? null,
    endSettings: params.endSettings ?? null,
    creators: params.creators ?? [{
      address: metaplex.identity().publicKey,
      share: 100,
      verified: false
    }],
    hiddenSettings: params.hiddenSettings ?? null,
    whitelistMintSettings: params.whitelistMintSettings ?? null,
    gatekeeper: params.gatekeeper ?? null
  }));
  const initializeInstruction = (0, import_mpl_candy_machine4.createInitializeCandyMachineInstruction)({
    candyMachine: candyMachine.publicKey,
    wallet,
    authority: toPublicKey(authority),
    payer: payer.publicKey
  }, {
    data
  });
  if (tokenMint) {
    initializeInstruction.keys.push({
      pubkey: tokenMint,
      isWritable: false,
      isSigner: false
    });
  } else {
    assertSameCurrencies(params.price, SOL);
  }
  return TransactionBuilder.make().setFeePayer(payer).setContext({
    candyMachineSigner: candyMachine,
    wallet,
    authority: toPublicKey(authority),
    creators: data.creators
  }).add(yield metaplex.system().builders().createAccount({
    newAccount: candyMachine,
    space: getCandyMachineV2AccountSizeFromData(data),
    program: CandyMachineV2Program.publicKey,
    instructionKey: params.createAccountInstructionKey ?? "createAccount"
  }, {
    payer,
    programs
  })).add({
    instruction: initializeInstruction,
    signers: [candyMachine, payer],
    key: params.initializeCandyMachineInstructionKey ?? "initializeCandyMachine"
  }).when(!!collection, (builder) => {
    if (!isSigner(authority)) {
      throw new ExpectedSignerError("authority", "PublicKey", 'You are trying to create a Candy Machine with a Collection NFT. In order for the Collection NFT to be set successfully, you must provide the authority as a Signer. Please provide the "authority" parameter as a Signer if you want to set the Collection NFT upon creation. Alternatively, you may remove the "collection" parameter to create a Candy Machine without an associated Collection NFT.');
    }
    const collectionMint = collection;
    const metadata = metaplex.nfts().pdas().metadata({
      mint: collectionMint,
      programs
    });
    const edition = metaplex.nfts().pdas().masterEdition({
      mint: collectionMint,
      programs
    });
    const collectionPda = findCandyMachineV2CollectionPda(candyMachine.publicKey);
    const collectionAuthorityRecord = metaplex.nfts().pdas().collectionAuthorityRecord({
      mint: collectionMint,
      collectionAuthority: collectionPda,
      programs
    });
    return builder.add({
      instruction: (0, import_mpl_candy_machine4.createSetCollectionInstruction)({
        candyMachine: candyMachine.publicKey,
        authority: toPublicKey(authority),
        collectionPda,
        payer: payer.publicKey,
        metadata,
        mint: collectionMint,
        edition,
        collectionAuthorityRecord,
        tokenMetadataProgram: metaplex.programs().getTokenMetadata().address
      }),
      signers: [authority],
      key: params.setCollectionInstructionKey ?? "setCollection"
    });
  });
});

// ../../node_modules/@metaplex-foundation/js/dist/esm/plugins/candyMachineV2Module/operations/deleteCandyMachineV2.mjs
var import_mpl_candy_machine5 = __toESM(require_mpl_candy_machine(), 1);
var Key54 = "DeleteCandyMachineV2Operation";
var deleteCandyMachineV2Operation = useOperation(Key54);
var deleteCandyMachineV2OperationHandler = {
  handle(operation, metaplex, scope) {
    return __async(this, null, function* () {
      return deleteCandyMachineV2Builder(metaplex, operation.input, scope).sendAndConfirm(metaplex, scope.confirmOptions);
    });
  }
};
var deleteCandyMachineV2Builder = (metaplex, params, options = {}) => {
  const {
    payer = metaplex.rpc().getDefaultFeePayer()
  } = options;
  const authority = params.authority ?? metaplex.identity();
  const {
    candyMachine
  } = params;
  const deleteInstruction = (0, import_mpl_candy_machine5.createWithdrawFundsInstruction)({
    candyMachine: candyMachine.address,
    authority: authority.publicKey
  });
  if (candyMachine.collectionMintAddress) {
    const collectionPda = findCandyMachineV2CollectionPda(candyMachine.address);
    deleteInstruction.keys.push({
      pubkey: collectionPda,
      isWritable: true,
      isSigner: false
    });
  }
  return TransactionBuilder.make().setFeePayer(payer).add({
    instruction: deleteInstruction,
    signers: [authority],
    key: params.instructionKey ?? "withdrawFunds"
  });
};

// ../../node_modules/@metaplex-foundation/js/dist/esm/plugins/candyMachineV2Module/operations/insertItemsToCandyMachineV2.mjs
var import_mpl_candy_machine8 = __toESM(require_mpl_candy_machine(), 1);

// ../../node_modules/@metaplex-foundation/js/dist/esm/plugins/candyMachineV2Module/asserts.mjs
var import_mpl_candy_machine7 = __toESM(require_mpl_candy_machine(), 1);

// ../../node_modules/@metaplex-foundation/js/dist/esm/plugins/candyMachineV2Module/errors.mjs
var import_mpl_candy_machine6 = __toESM(require_mpl_candy_machine(), 1);
var CandyMachineV2Error = class extends MetaplexError {
  constructor(message, cause) {
    super(message, "plugin", "Candy Machine V2", cause);
    _defineProperty(this, "name", "CandyMachineV2Error");
  }
};
var CandyMachineV2IsFullError = class extends CandyMachineV2Error {
  constructor(assetIndex, itemsAvailable) {
    const message = `Trying to add asset number ${assetIndex.addn(1)}, but candy machine only can hold ${itemsAvailable} assets. Limit number of assets you are adding or create a new Candy Machine that can hold more.`;
    super(message);
    _defineProperty(this, "name", "CandyMachineV2IsFullError");
  }
};
var CandyMachineV2IsEmptyError = class extends CandyMachineV2Error {
  constructor(itemsAvailable) {
    const message = `You're trying to mint from an empty candy machine. All ${itemsAvailable} items have been minted. You can no longer mint from this Candy Machine.`;
    super(message);
    _defineProperty(this, "name", "CandyMachineV2IsEmptyError");
  }
};
var CandyMachineV2CannotAddAmountError = class extends CandyMachineV2Error {
  constructor(index, amount2, itemsAvailable) {
    const message = `Trying to add ${amount2} assets to candy machine that already has ${index} assets and can only hold ${itemsAvailable} assets.Limit number of assets you are adding or create a new Candy Machine that can hold more.`;
    super(message);
    _defineProperty(this, "name", "CandyMachineV2CannotAddAmountError");
  }
};
var CandyMachineV2AddItemConstraintsViolatedError = class extends CandyMachineV2Error {
  constructor(index, item, cause) {
    const message = `Trying to add an asset with name "${item.name}" and uri: "${item.uri}" to candy machine at index ${index} that violates constraints. Fix the name or URI of this asset and try again.`;
    super(message, cause);
    _defineProperty(this, "name", "CandyMachineV2AddItemConstraintsViolatedError");
  }
};
var CandyMachineV2NotLiveError = class extends CandyMachineV2Error {
  constructor(goLiveDate) {
    const message = `You're trying to mint from a Candy Machine which is not live yet. ` + (goLiveDate ? `It will go live on ${formatDateTime(goLiveDate)}.` : `Its live date has not been set yet.`) + 'You need to wait until the Candy Machine is live to mint from it. If this is your Candy Machine, use "metaplex.candyMachinesV2().update(...)" to set the live date. Note that the authority of the Candy Machine can mint regardless of the live date.';
    super(message);
    _defineProperty(this, "name", "CandyMachineV2NotLiveError");
  }
};
var CandyMachineV2EndedError = class extends CandyMachineV2Error {
  constructor(endSetting) {
    const endSettingType = endSetting.endSettingType === import_mpl_candy_machine6.EndSettingType.Amount ? "Amount" : "Date";
    const endSettingExplanation = endSetting.endSettingType === import_mpl_candy_machine6.EndSettingType.Amount ? `All ${endSetting.number} items have been minted.` : `It ended on ${formatDateTime(endSetting.date)}.`;
    const message = `The end condition [${endSettingType}] of this Candy Machine has been reached. ` + endSettingExplanation;
    super(message);
    _defineProperty(this, "name", "CandyMachineV2EndedError");
  }
};
var CandyMachineV2BotTaxError = class extends CandyMachineV2Error {
  constructor(explorerLink, cause) {
    const message = `The NFT couldn't be fetched after being minted. This is most likely due to a bot tax that occured during minting. When someone tries to mint an NFT from a Candy Machine which cannot be minted from, the program will succeed and charge a small tax to fight against bots. Ensure you can mint from the Candy Machine. You may want to check the transaction logs for more details: [${explorerLink}].`;
    super(message, cause);
    _defineProperty(this, "name", "CandyMachineV2BotTaxError");
  }
};

// ../../node_modules/@metaplex-foundation/js/dist/esm/plugins/candyMachineV2Module/asserts.mjs
var assertName = (name) => {
  assert2(name.length <= MAX_NAME_LENGTH2, `Candy Machine name too long: ${name} (max ${MAX_NAME_LENGTH2})`);
};
var assertUri = (uri) => {
  assert2(uri.length <= MAX_URI_LENGTH2, `Candy Machine URI too long: ${uri} (max ${MAX_URI_LENGTH2})`);
};
var assertNotFull = (candyMachine, index) => {
  if (candyMachine.itemsAvailable.lte(candyMachine.itemsLoaded)) {
    throw new CandyMachineV2IsFullError(index, candyMachine.itemsAvailable);
  }
};
var assertNotEmpty = (candyMachine) => {
  if (candyMachine.itemsRemaining.isZero()) {
    throw new CandyMachineV2IsEmptyError(candyMachine.itemsAvailable);
  }
};
var assertCanAdd = (candyMachine, index, amount2) => {
  if (index.addn(amount2).gt(candyMachine.itemsAvailable)) {
    throw new CandyMachineV2CannotAddAmountError(index, amount2, candyMachine.itemsAvailable);
  }
};
var assertAllConfigLineConstraints = (configLines) => {
  for (let i = 0; i < configLines.length; i++) {
    try {
      assertName(configLines[i].name);
      assertUri(configLines[i].uri);
    } catch (error2) {
      throw new CandyMachineV2AddItemConstraintsViolatedError(toBigNumber(i), configLines[i], error2);
    }
  }
};
var assertCandyMachineV2IsLive = (candyMachine) => {
  const hasWhitelistPresale = candyMachine.whitelistMintSettings?.presale ?? false;
  if (hasWhitelistPresale) {
    return;
  }
  const liveDate = candyMachine.goLiveDate;
  if (!liveDate || liveDate.gte(now())) {
    throw new CandyMachineV2NotLiveError(liveDate);
  }
};
var assertCandyMachineV2HasNotEnded = (candyMachine) => {
  const {
    endSettings
  } = candyMachine;
  if (!endSettings) {
    return;
  }
  const hasEndedByAmount = endSettings.endSettingType === import_mpl_candy_machine7.EndSettingType.Amount && candyMachine.itemsMinted.gte(endSettings.number);
  const hasEndedByDate = endSettings.endSettingType === import_mpl_candy_machine7.EndSettingType.Date && endSettings.date.lt(now());
  if (hasEndedByAmount || hasEndedByDate) {
    throw new CandyMachineV2EndedError(endSettings);
  }
};
var assertCanMintCandyMachineV2 = (candyMachine, payer) => {
  assertNotEmpty(candyMachine);
  if (candyMachine.authorityAddress.equals(payer.publicKey)) {
    return;
  }
  assertCandyMachineV2IsLive(candyMachine);
  assertCandyMachineV2HasNotEnded(candyMachine);
};

// ../../node_modules/@metaplex-foundation/js/dist/esm/plugins/candyMachineV2Module/operations/insertItemsToCandyMachineV2.mjs
var Key55 = "InsertItemsToCandyMachineV2Operation";
var insertItemsToCandyMachineV2Operation = useOperation(Key55);
var InsertItemsToCandyMachineV2OperationHandler = {
  handle(operation, metaplex, scope) {
    return __async(this, null, function* () {
      return insertItemsToCandyMachineV2Builder(metaplex, operation.input, scope).sendAndConfirm(metaplex, scope.confirmOptions);
    });
  }
};
var insertItemsToCandyMachineV2Builder = (metaplex, params, options = {}) => {
  const {
    payer = metaplex.rpc().getDefaultFeePayer()
  } = options;
  const authority = params.authority ?? metaplex.identity();
  const index = params.index ?? params.candyMachine.itemsLoaded;
  const {
    items
  } = params;
  assertNotFull(params.candyMachine, index);
  assertCanAdd(params.candyMachine, index, items.length);
  assertAllConfigLineConstraints(items);
  return TransactionBuilder.make().setFeePayer(payer).add({
    instruction: (0, import_mpl_candy_machine8.createAddConfigLinesInstruction)({
      candyMachine: params.candyMachine.address,
      authority: authority.publicKey
    }, {
      index: index.toNumber(),
      configLines: items
    }),
    signers: [authority],
    key: params.instructionKey ?? "insertItems"
  });
};

// ../../node_modules/@metaplex-foundation/js/dist/esm/plugins/candyMachineV2Module/operations/mintCandyMachineV2.mjs
var import_mpl_candy_machine10 = __toESM(require_mpl_candy_machine(), 1);
init_index_browser_esm();

// ../../node_modules/@metaplex-foundation/js/dist/esm/plugins/candyMachineV2Module/accounts.mjs
var import_mpl_candy_machine9 = __toESM(require_mpl_candy_machine(), 1);
var parseCandyMachineV2Account = getAccountParsingFunction(import_mpl_candy_machine9.CandyMachine);
var toCandyMachineV2Account = getAccountParsingAndAssertingFunction(import_mpl_candy_machine9.CandyMachine);
var parseCandyMachineV2CollectionAccount = getAccountParsingFunction(import_mpl_candy_machine9.CollectionPDA);
var toCandyMachineV2CollectionAccount = getAccountParsingAndAssertingFunction(import_mpl_candy_machine9.CollectionPDA);

// ../../node_modules/@metaplex-foundation/js/dist/esm/plugins/candyMachineV2Module/operations/mintCandyMachineV2.mjs
var Key56 = "MintCandyMachineV2Operation";
var mintCandyMachineV2Operation = useOperation(Key56);
var mintCandyMachineV2OperationHandler = {
  handle(operation, metaplex, scope) {
    return __async(this, null, function* () {
      assertCanMintCandyMachineV2(operation.input.candyMachine, scope.payer);
      const builder = yield mintCandyMachineV2Builder(metaplex, operation.input, scope);
      scope.throwIfCanceled();
      const confirmOptions = makeConfirmOptionsFinalizedOnMainnet(metaplex, scope.confirmOptions);
      const output = yield builder.sendAndConfirm(metaplex, confirmOptions);
      scope.throwIfCanceled();
      let nft;
      try {
        nft = yield metaplex.nfts().findByMint({
          mintAddress: output.mintSigner.publicKey,
          tokenAddress: output.tokenAddress
        }, scope);
      } catch (error2) {
        throw new CandyMachineV2BotTaxError(metaplex.rpc().getSolanaExporerUrl(output.response.signature), error2);
      }
      return __spreadValues({
        nft
      }, output);
    });
  }
};
var mintCandyMachineV2Builder = (_0, _1, ..._2) => __async(void 0, [_0, _1, ..._2], function* (metaplex, params, options = {}) {
  const {
    programs,
    payer = metaplex.rpc().getDefaultFeePayer()
  } = options;
  const {
    candyMachine,
    newMint = Keypair.generate(),
    newOwner = metaplex.identity().publicKey,
    newToken
  } = params;
  const tokenMetadataProgram = metaplex.programs().getTokenMetadata(programs).address;
  const newMetadata = metaplex.nfts().pdas().metadata({
    mint: newMint.publicKey,
    programs
  });
  const newEdition = metaplex.nfts().pdas().masterEdition({
    mint: newMint.publicKey,
    programs
  });
  const candyMachineCreator = findCandyMachineV2CreatorPda(candyMachine.address);
  const candyMachineCollectionAddress = findCandyMachineV2CollectionPda(candyMachine.address);
  const candyMachineCollectionAccount = parseCandyMachineV2CollectionAccount(yield metaplex.rpc().getAccount(candyMachineCollectionAddress));
  const tokenWithMintBuilder = yield metaplex.tokens().builders().createTokenWithMint({
    decimals: 0,
    initialSupply: token(1),
    mint: newMint,
    mintAuthority: payer,
    freezeAuthority: payer.publicKey,
    owner: newOwner,
    token: newToken,
    createMintAccountInstructionKey: params.createMintAccountInstructionKey,
    initializeMintInstructionKey: params.initializeMintInstructionKey,
    createAssociatedTokenAccountInstructionKey: params.createAssociatedTokenAccountInstructionKey,
    createTokenAccountInstructionKey: params.createTokenAccountInstructionKey,
    initializeTokenInstructionKey: params.initializeTokenInstructionKey,
    mintTokensInstructionKey: params.mintTokensInstructionKey
  }, {
    payer,
    programs
  });
  const {
    tokenAddress
  } = tokenWithMintBuilder.getContext();
  const mintNftInstruction = (0, import_mpl_candy_machine10.createMintNftInstruction)({
    candyMachine: candyMachine.address,
    candyMachineCreator,
    payer: payer.publicKey,
    wallet: candyMachine.walletAddress,
    metadata: newMetadata,
    mint: newMint.publicKey,
    mintAuthority: payer.publicKey,
    updateAuthority: payer.publicKey,
    masterEdition: newEdition,
    tokenMetadataProgram,
    clock: SYSVAR_CLOCK_PUBKEY,
    recentBlockhashes: SYSVAR_SLOT_HASHES_PUBKEY,
    instructionSysvarAccount: SYSVAR_INSTRUCTIONS_PUBKEY
  }, {
    creatorBump: candyMachineCreator.bump
  });
  if (candyMachine.whitelistMintSettings) {
    const whitelistToken = params.whitelistToken ?? metaplex.tokens().pdas().associatedTokenAccount({
      mint: candyMachine.whitelistMintSettings.mint,
      owner: payer.publicKey
    });
    mintNftInstruction.keys.push({
      pubkey: whitelistToken,
      isWritable: true,
      isSigner: false
    }, {
      pubkey: candyMachine.whitelistMintSettings.mint,
      isWritable: true,
      isSigner: false
    }, {
      pubkey: payer.publicKey,
      isWritable: false,
      isSigner: true
    });
  }
  if (candyMachine.tokenMintAddress) {
    const payerToken = params.payerToken ?? metaplex.tokens().pdas().associatedTokenAccount({
      mint: candyMachine.tokenMintAddress,
      owner: payer.publicKey
    });
    mintNftInstruction.keys.push({
      pubkey: payerToken,
      isWritable: true,
      isSigner: false
    }, {
      pubkey: payer.publicKey,
      isWritable: false,
      isSigner: true
    });
  }
  return TransactionBuilder.make().setFeePayer(payer).setContext({
    mintSigner: newMint,
    tokenAddress
  }).add(tokenWithMintBuilder).add({
    instruction: mintNftInstruction,
    signers: [payer, newMint],
    key: params.mintNftInstructionKey ?? "mintNft"
  }).when(candyMachineCollectionAccount.exists, (builder) => {
    assertAccountExists(candyMachineCollectionAccount);
    const collectionMint = candyMachineCollectionAccount.data.mint;
    const collectionMetadata = metaplex.nfts().pdas().metadata({
      mint: collectionMint,
      programs
    });
    const collectionMasterEdition = metaplex.nfts().pdas().masterEdition({
      mint: collectionMint,
      programs
    });
    const collectionAuthorityRecord = metaplex.nfts().pdas().collectionAuthorityRecord({
      mint: collectionMint,
      collectionAuthority: candyMachineCollectionAccount.publicKey,
      programs
    });
    return builder.add({
      instruction: (0, import_mpl_candy_machine10.createSetCollectionDuringMintInstruction)({
        candyMachine: candyMachine.address,
        metadata: newMetadata,
        payer: payer.publicKey,
        collectionPda: candyMachineCollectionAccount.publicKey,
        tokenMetadataProgram,
        instructions: SYSVAR_INSTRUCTIONS_PUBKEY,
        collectionMint: candyMachineCollectionAccount.data.mint,
        collectionMetadata,
        collectionMasterEdition,
        authority: candyMachine.authorityAddress,
        collectionAuthorityRecord
      }),
      signers: [payer],
      key: params.setCollectionInstructionKey ?? "setCollection"
    });
  });
});

// ../../node_modules/@metaplex-foundation/js/dist/esm/plugins/candyMachineV2Module/operations/updateCandyMachineV2.mjs
var import_mpl_candy_machine11 = __toESM(require_mpl_candy_machine(), 1);
var import_lodash3 = __toESM(require_lodash(), 1);
var Key57 = "UpdateCandyMachineV2Operation";
var updateCandyMachineV2Operation = useOperation(Key57);
var updateCandyMachineV2OperationHandler = {
  handle(operation, metaplex, scope) {
    return __async(this, null, function* () {
      const _a = operation.input, {
        candyMachine,
        authority = metaplex.identity(),
        newAuthority,
        newCollection
      } = _a, updatableFields = __objRest(_a, [
        "candyMachine",
        "authority",
        "newAuthority",
        "newCollection"
      ]);
      const currentConfigs = toCandyMachineV2Configs(candyMachine);
      const instructionDataWithoutChanges = toCandyMachineV2InstructionData(candyMachine.address, currentConfigs);
      const instructionData = toCandyMachineV2InstructionData(candyMachine.address, __spreadValues(__spreadValues({}, currentConfigs), updatableFields));
      const {
        data,
        wallet,
        tokenMint
      } = instructionData;
      const shouldUpdateData = !(0, import_lodash3.default)(instructionData, instructionDataWithoutChanges);
      const builder = updateCandyMachineV2Builder(metaplex, {
        candyMachine,
        authority,
        newData: shouldUpdateData ? __spreadProps(__spreadValues({}, data), {
          wallet,
          tokenMint
        }) : void 0,
        newCollection,
        newAuthority
      }, scope);
      if (builder.isEmpty()) {
        throw new NoInstructionsToSendError(Key57);
      }
      return builder.sendAndConfirm(metaplex, scope.confirmOptions);
    });
  }
};
var updateCandyMachineV2Builder = (metaplex, params, options = {}) => {
  const {
    programs,
    payer = metaplex.rpc().getDefaultFeePayer()
  } = options;
  const {
    candyMachine,
    authority = metaplex.identity(),
    newData,
    newAuthority,
    newCollection
  } = params;
  const tokenMetadataProgram = metaplex.programs().getTokenMetadata(programs).address;
  const shouldUpdateAuthority = !!newAuthority && !newAuthority.equals(authority.publicKey);
  const sameCollection = newCollection && candyMachine.collectionMintAddress && candyMachine.collectionMintAddress.equals(newCollection);
  const shouldUpdateCollection = !!newCollection && !sameCollection;
  const shouldRemoveCollection = !shouldUpdateCollection && newCollection === null && candyMachine.collectionMintAddress !== null;
  return TransactionBuilder.make().setFeePayer(payer).when(!!newData, (builder) => {
    const data = newData;
    const wallet = newData?.wallet;
    const tokenMint = newData?.tokenMint;
    const updateInstruction = (0, import_mpl_candy_machine11.createUpdateCandyMachineInstruction)({
      candyMachine: candyMachine.address,
      authority: authority.publicKey,
      wallet
    }, {
      data
    });
    if (tokenMint) {
      updateInstruction.keys.push({
        pubkey: tokenMint,
        isWritable: false,
        isSigner: false
      });
    }
    return builder.add({
      instruction: updateInstruction,
      signers: [authority],
      key: params.updateInstructionKey ?? "update"
    });
  }).when(shouldUpdateCollection, (builder) => {
    const collectionMint = newCollection;
    const metadata = metaplex.nfts().pdas().metadata({
      mint: collectionMint,
      programs
    });
    const edition = metaplex.nfts().pdas().masterEdition({
      mint: collectionMint,
      programs
    });
    const collectionPda = findCandyMachineV2CollectionPda(candyMachine.address);
    const collectionAuthorityRecord = metaplex.nfts().pdas().collectionAuthorityRecord({
      mint: collectionMint,
      collectionAuthority: collectionPda,
      programs
    });
    return builder.add({
      instruction: (0, import_mpl_candy_machine11.createSetCollectionInstruction)({
        candyMachine: candyMachine.address,
        authority: authority.publicKey,
        collectionPda,
        payer: payer.publicKey,
        metadata,
        mint: collectionMint,
        edition,
        collectionAuthorityRecord,
        tokenMetadataProgram
      }),
      signers: [payer, authority],
      key: params.setCollectionInstructionKey ?? "setCollection"
    });
  }).when(shouldRemoveCollection, (builder) => {
    const collectionMint = candyMachine.collectionMintAddress;
    const metadata = metaplex.nfts().pdas().metadata({
      mint: collectionMint,
      programs
    });
    const collectionPda = findCandyMachineV2CollectionPda(candyMachine.address);
    const collectionAuthorityRecord = metaplex.nfts().pdas().collectionAuthorityRecord({
      mint: collectionMint,
      collectionAuthority: collectionPda,
      programs
    });
    return builder.add({
      instruction: (0, import_mpl_candy_machine11.createRemoveCollectionInstruction)({
        candyMachine: candyMachine.address,
        authority: authority.publicKey,
        collectionPda,
        metadata,
        mint: collectionMint,
        collectionAuthorityRecord,
        tokenMetadataProgram
      }),
      signers: [authority],
      key: params.removeCollectionInstructionKey ?? "removeCollection"
    });
  }).when(shouldUpdateAuthority, (builder) => builder.add({
    instruction: (0, import_mpl_candy_machine11.createUpdateAuthorityInstruction)({
      candyMachine: candyMachine.address,
      authority: authority.publicKey,
      wallet: newData?.wallet ?? candyMachine.walletAddress
    }, {
      newAuthority
    }),
    signers: [authority],
    key: params.updateAuthorityInstructionKey ?? "updateAuthority"
  }));
};

// ../../node_modules/@metaplex-foundation/js/dist/esm/plugins/candyMachineV2Module/CandyMachinesV2BuildersClient.mjs
var CandyMachinesV2BuildersClient = class {
  constructor(metaplex) {
    this.metaplex = metaplex;
  }
  /** {@inheritDoc createCandyMachineV2Builder} */
  create(input, options) {
    return createCandyMachineV2Builder(this.metaplex, input, options);
  }
  /** {@inheritDoc deleteCandyMachineV2Builder} */
  delete(input, options) {
    return deleteCandyMachineV2Builder(this.metaplex, input, options);
  }
  /** {@inheritDoc insertItemsToCandyMachineV2Builder} */
  insertItems(input, options) {
    return insertItemsToCandyMachineV2Builder(this.metaplex, input, options);
  }
  /** {@inheritDoc mintCandyMachineV2Builder} */
  mint(input, options) {
    return mintCandyMachineV2Builder(this.metaplex, input, options);
  }
  /** {@inheritDoc updateCandyMachineV2Builder} */
  update(input, options) {
    return updateCandyMachineV2Builder(this.metaplex, input, options);
  }
};

// ../../node_modules/@metaplex-foundation/js/dist/esm/plugins/candyMachineV2Module/operations/findCandyMachinesV2ByPublicKeyField.mjs
init_index_browser_esm();
var Key58 = "FindCandyMachinesV2ByPublicKeyOperation";
var findCandyMachinesV2ByPublicKeyFieldOperation = useOperation(Key58);
var findCandyMachinesV2ByPublicKeyFieldOperationHandler = {
  handle: (operation, metaplex, scope) => __async(void 0, null, function* () {
    const {
      commitment
    } = scope;
    const {
      type,
      publicKey: publicKey3
    } = operation.input;
    const accounts = CandyMachineV2Program.accounts(metaplex).mergeConfig({
      commitment
    });
    let candyMachineQuery;
    switch (type) {
      case "authority":
        candyMachineQuery = accounts.candyMachineAccountsForAuthority(publicKey3);
        break;
      case "wallet":
        candyMachineQuery = accounts.candyMachineAccountsForWallet(publicKey3);
        break;
      default:
        throw new UnreachableCaseError(type);
    }
    const unparsedAccounts = yield candyMachineQuery.get();
    scope.throwIfCanceled();
    const collectionPdas = unparsedAccounts.map((unparsedAccount) => findCandyMachineV2CollectionPda(unparsedAccount.publicKey));
    const parsedAccounts = Object.fromEntries(unparsedAccounts.map((unparsedAccount) => [unparsedAccount.publicKey.toString(), parseCandyMachineV2Account(unparsedAccount)]));
    const tokenMints = [...new Set(Object.values(parsedAccounts).map((account) => account.data.tokenMint?.toString()).filter((tokenMint) => tokenMint !== void 0))].map((address) => new PublicKey(address));
    const result = yield metaplex.rpc().getMultipleAccounts(tokenMints.concat(collectionPdas), commitment);
    scope.throwIfCanceled();
    const unparsedMintAccounts = result.slice(0, tokenMints.length);
    const unparsedCollectionAccounts = result.slice(-collectionPdas.length);
    const mints = Object.fromEntries(unparsedMintAccounts.map((account) => [account.publicKey.toString(), toMint(toMintAccount(account))]));
    return zipMap(unparsedAccounts, unparsedCollectionAccounts, (unparsedAccount, unparsedCollectionAccount) => {
      const parsedAccount = parsedAccounts[unparsedAccount.publicKey.toString()];
      const collectionAccount = unparsedCollectionAccount ? parseCandyMachineV2CollectionAccount(unparsedCollectionAccount) : null;
      const tokenMintAddress = parsedAccount.data.tokenMint?.toString();
      return toCandyMachineV2(parsedAccount, unparsedAccount, collectionAccount, tokenMintAddress ? mints[tokenMintAddress] : null);
    });
  })
};

// ../../node_modules/@metaplex-foundation/js/dist/esm/plugins/candyMachineV2Module/operations/findCandyMachineV2ByAddress.mjs
var Key59 = "FindCandyMachineV2ByAddressOperation";
var findCandyMachineV2ByAddressOperation = useOperation(Key59);
var findCandyMachineV2ByAddressOperationHandler = {
  handle: (operation, metaplex, scope) => __async(void 0, null, function* () {
    const {
      commitment
    } = scope;
    const {
      address
    } = operation.input;
    const collectionPda = findCandyMachineV2CollectionPda(address);
    const accounts = yield metaplex.rpc().getMultipleAccounts([address, collectionPda], commitment);
    const unparsedAccount = accounts[0];
    assertAccountExists(unparsedAccount);
    const account = toCandyMachineV2Account(unparsedAccount);
    const collectionAccount = parseCandyMachineV2CollectionAccount(accounts[1]);
    const mint = account.data.tokenMint ? yield metaplex.tokens().findMintByAddress({
      address: account.data.tokenMint
    }, scope) : null;
    return toCandyMachineV2(account, unparsedAccount, collectionAccount, mint);
  })
};

// ../../node_modules/@metaplex-foundation/js/dist/esm/plugins/candyMachineV2Module/operations/findMintedNftsByCandyMachineV2.mjs
var Key60 = "FindMintedNftsByCandyMachineV2Operation";
var findMintedNftsByCandyMachineV2Operation = useOperation(Key60);
var findMintedNftsByCandyMachineV2OperationHandler = {
  handle: (operation, metaplex, scope) => __async(void 0, null, function* () {
    const {
      candyMachine,
      version = 2
    } = operation.input;
    const firstCreator = version === 2 ? findCandyMachineV2CreatorPda(candyMachine) : candyMachine;
    const mintedNfts = yield metaplex.nfts().findAllByCreator({
      creator: firstCreator,
      position: 1
    }, scope);
    return mintedNfts;
  })
};

// ../../node_modules/@metaplex-foundation/js/dist/esm/plugins/candyMachineV2Module/CandyMachinesV2Client.mjs
var CandyMachinesV2Client = class {
  constructor(metaplex) {
    this.metaplex = metaplex;
  }
  /**
   * You may use the `builders()` client to access the
   * underlying Transaction Builders of this module.
   *
   * ```ts
   * const buildersClient = metaplex.candyMachinesV2().builders();
   * ```
   */
  builders() {
    return new CandyMachinesV2BuildersClient(this.metaplex);
  }
  /** {@inheritDoc createCandyMachineV2Operation} */
  create(input, options) {
    return this.metaplex.operations().execute(createCandyMachineV2Operation(input), options);
  }
  /** {@inheritDoc deleteCandyMachineV2Operation} */
  delete(input, options) {
    return this.metaplex.operations().execute(deleteCandyMachineV2Operation(input), options);
  }
  /** {@inheritDoc findCandyMachinesV2ByPublicKeyFieldOperation} */
  findAllBy(input, options) {
    return this.metaplex.operations().execute(findCandyMachinesV2ByPublicKeyFieldOperation(input), options);
  }
  /** {@inheritDoc findCandyMachineV2ByAddressOperation} */
  findByAddress(input, options) {
    return this.metaplex.operations().execute(findCandyMachineV2ByAddressOperation(input), options);
  }
  /** {@inheritDoc findMintedNftsByCandyMachineV2Operation} */
  findMintedNfts(input, options) {
    return this.metaplex.operations().execute(findMintedNftsByCandyMachineV2Operation(input), options);
  }
  /** {@inheritDoc insertItemsToCandyMachineV2Operation} */
  insertItems(input, options) {
    return this.metaplex.operations().execute(insertItemsToCandyMachineV2Operation(input), options);
  }
  /** {@inheritDoc mintCandyMachineV2Operation} */
  mint(input, options) {
    return this.metaplex.operations().execute(mintCandyMachineV2Operation(input), options);
  }
  /**
   * Helper method that refetches a given Candy Machine.
   *
   * ```ts
   * const candyMachine = await metaplex.candyMachinesV2().refresh(candyMachine);
   * ```
   */
  refresh(candyMachine, options) {
    return this.findByAddress({
      address: toPublicKey(candyMachine)
    }, options);
  }
  /** {@inheritDoc updateCandyMachineV2Operation} */
  update(input, options) {
    return this.metaplex.operations().execute(updateCandyMachineV2Operation(input), options);
  }
};

// ../../node_modules/@metaplex-foundation/js/dist/esm/plugins/candyMachineV2Module/plugin.mjs
var candyMachineV2Module = () => ({
  install(metaplex) {
    const op = metaplex.operations();
    op.register(createCandyMachineV2Operation, createCandyMachineV2OperationHandler);
    op.register(deleteCandyMachineV2Operation, deleteCandyMachineV2OperationHandler);
    op.register(findCandyMachineV2ByAddressOperation, findCandyMachineV2ByAddressOperationHandler);
    op.register(findCandyMachinesV2ByPublicKeyFieldOperation, findCandyMachinesV2ByPublicKeyFieldOperationHandler);
    op.register(findMintedNftsByCandyMachineV2Operation, findMintedNftsByCandyMachineV2OperationHandler);
    op.register(insertItemsToCandyMachineV2Operation, InsertItemsToCandyMachineV2OperationHandler);
    op.register(mintCandyMachineV2Operation, mintCandyMachineV2OperationHandler);
    op.register(updateCandyMachineV2Operation, updateCandyMachineV2OperationHandler);
    metaplex.candyMachinesV2 = function() {
      return new CandyMachinesV2Client(this);
    };
  }
});

// ../../node_modules/@metaplex-foundation/js/dist/esm/plugins/candyMachineModule/operations/updateCandyGuardAuthority.mjs
var import_mpl_candy_guard = __toESM(require_src2(), 1);
var Key61 = "UpdateCandyGuardAuthorityOperation";
var updateCandyGuardAuthorityOperation = useOperation(Key61);
var updateCandyGuardAuthorityOperationHandler = {
  handle(operation, metaplex, scope) {
    return __async(this, null, function* () {
      return updateCandyGuardAuthorityBuilder(metaplex, operation.input, scope).sendAndConfirm(metaplex, scope.confirmOptions);
    });
  }
};
var updateCandyGuardAuthorityBuilder = (metaplex, params, options = {}) => {
  const {
    programs,
    payer = metaplex.rpc().getDefaultFeePayer()
  } = options;
  const {
    candyGuard,
    newAuthority,
    authority = metaplex.identity()
  } = params;
  const candyGuardProgram = metaplex.programs().getCandyGuard(programs);
  return TransactionBuilder.make().setFeePayer(payer).add({
    instruction: (0, import_mpl_candy_guard.createSetAuthorityInstruction)({
      candyGuard,
      authority: authority.publicKey
    }, {
      newAuthority
    }, candyGuardProgram.address),
    signers: [authority, payer],
    key: params.instructionKey ?? "updateCandyGuardAuthority"
  });
};

// ../../node_modules/@metaplex-foundation/js/dist/esm/plugins/candyMachineModule/operations/callCandyGuardRoute.mjs
var import_mpl_candy_guard2 = __toESM(require_src2(), 1);
var beet2 = __toESM(require_beet(), 1);

// ../../node_modules/@metaplex-foundation/js/dist/esm/plugins/candyMachineModule/errors.mjs
var CandyMachineV3Error = class extends MetaplexError {
  constructor(message, cause) {
    super(message, "plugin", "Candy Machine V3", cause);
    _defineProperty(this, "name", "CandyMachineV3Error");
  }
};
var UnregisteredCandyGuardError = class extends CandyMachineV3Error {
  constructor(name) {
    const message = `The SDK is trying to access a custom Candy Guard named [${name}] but that guard was not registered in the SDK Register your custom guard by calling the \`metaplex.candyMachines().guards().register()\` method.`;
    super(message);
    _defineProperty(this, "name", "UnregisteredCandyGuardError");
  }
};
var CandyMachineIsFullError = class extends CandyMachineV3Error {
  constructor(index, itemsAvailable) {
    const message = `You are trying to add an item at index ${index} to a Candy Machine that can only hold a maximum of ${itemsAvailable} items. Limit number of items you are adding or create a Candy Machine that can hold more of them.`;
    super(message);
    _defineProperty(this, "name", "CandyMachineIsFullError");
  }
};
var CandyMachineCannotAddAmountError = class extends CandyMachineV3Error {
  constructor(index, amount2, itemsAvailable) {
    const message = `You are trying to add ${amount2} items to candy machine starting at index ${index}  but it can only hold a maximum of ${itemsAvailable} items. Limit number of assets you are adding or create a Candy Machine that can hold more of them.`;
    super(message);
    _defineProperty(this, "name", "CandyMachineCannotAddAmountError");
  }
};
var CandyMachineItemTextTooLongError = class extends CandyMachineV3Error {
  constructor(index, type, text, limit) {
    const message = `You are trying to add an item to a Candy Machine but its ${type} is too long. The item settings define the ${type} limit as ${limit} characters but the following content was provided [${text}] for the item at index ${index} Reduce the size of the ${type} for the item at index ${index}.`;
    super(message);
    _defineProperty(this, "name", "CandyMachineItemTextTooLongError");
  }
};
var CandyMachineBotTaxError = class extends CandyMachineV3Error {
  constructor(explorerLink, cause) {
    const message = `The NFT couldn't be fetched after being minted. This is most likely due to a bot tax that occured during minting. When someone tries to mint an NFT from a Candy Machine which cannot be minted from, the program will succeed and charge a small tax to fight against bots. Ensure you can mint from the Candy Machine. You may want to check the transaction logs for more details: [${explorerLink}].`;
    super(message, cause);
    _defineProperty(this, "name", "CandyMachineBotTaxError");
  }
};
var GuardGroupRequiredError = class extends CandyMachineV3Error {
  constructor(availableGroups) {
    const message = `The provided Candy Machine defines groups of guards but nogroup label was provided to identity which group we should select. Please provide the label of the group you wish to select from via the \`group\` parameter. The available groups are [${availableGroups.join(", ")}]`;
    super(message);
    _defineProperty(this, "name", "GuardGroupRequiredError");
  }
};
var SelectedGuardGroupDoesNotExistError = class extends CandyMachineV3Error {
  constructor(selectedGroup, availableGroups) {
    const message = `You're trying to select the guard group [${selectedGroup}] from a Candy Machine but this group does not exists on this Candy Machine. ` + (availableGroups.length > 0 ? `Please provide the label of a group that exists on the Candy Machine. The available groups are [${availableGroups.join(", ")}]` : "There are no guard groups defined on the Candy Machine. Please set the `group` parameter to `null` or remove it altogether.");
    super(message);
    _defineProperty(this, "name", "SelectedGuardGroupDoesNotExistError");
  }
};
var GuardMintSettingsMissingError = class extends CandyMachineV3Error {
  constructor(guardName) {
    const message = `The Candy Machine you are trying to mint from has the [${guardName}] guard enabled. This guard requires you to provide some additional settings when minting which you did not provide. Please provide some minting settings for the [${guardName}] guard via the \`guards\` parameter like so: \`guards.${guardName} = {...}\`.`;
    super(message);
    _defineProperty(this, "name", "GuardMintSettingsMissingError");
  }
};
var GuardRouteNotSupportedError = class extends CandyMachineV3Error {
  constructor(guardName) {
    const message = `You are trying to call the route instruction of the [${guardName}] guard but this guard does not support this feature or did not register it on the SDK. Please select a guard that support the route instruction feature. If you are using a custom guard, make sure you registered the route instruction feature by implementing the \`routeSettingsParser\` method on the guard manifest.`;
    super(message);
    _defineProperty(this, "name", "GuardRouteNotSupportedError");
  }
};
var CandyGuardRequiredOnCandyMachineError = class extends CandyMachineV3Error {
  constructor() {
    const message = `The provided Candy Machine does not have a Candy Guard associated with it yet, it is required for the operation you are trying to execute. Please provide a Candy Machine with an associated Candy Guard account.`;
    super(message);
    _defineProperty(this, "name", "CandyGuardRequiredOnCandyMachineError");
  }
};
var GuardNotEnabledError = class extends CandyMachineV3Error {
  constructor(guard, group) {
    const message = (group ? `The guard [${guard}] is not enabled on the group [${group}] of the Candy Machine.` : `The guard [${guard}] is not enabled on the Candy Machine. `) + "Please provide a different guard or select a different group such that the provided guard is enabled on the selected group.";
    super(message);
    _defineProperty(this, "name", "GuardNotEnabledError");
  }
};
var GuardGroupLabelTooLongError = class extends CandyMachineV3Error {
  constructor(label, maxLength) {
    const message = `The provided group label [${label}] is too long. Group labels cannot be longer than ${maxLength} characters. Please provide a shorter group label.`;
    super(message);
    _defineProperty(this, "name", "GuardGroupLabelTooLongError");
  }
};
var UnrecognizePathForRouteInstructionError = class extends CandyMachineV3Error {
  constructor(guard, path) {
    const message = `The provided path [${path}] does not exist on the route instruction of the [${guard}] guard. Please provide a recognized path.`;
    super(message);
    _defineProperty(this, "name", "UnrecognizePathForRouteInstructionError");
  }
};
var MintOwnerMustBeMintPayerError = class extends CandyMachineV3Error {
  constructor(guard) {
    const message = `The payer must be the owner when using the [${guard}] guard. Please remove the \`owner\` attribute from the mint input so they can be the same.`;
    super(message);
    _defineProperty(this, "name", "MintOwnerMustBeMintPayerError");
  }
};
var MaximumOfFiveAdditionalProgramsError = class extends CandyMachineV3Error {
  constructor() {
    const message = `There is a maximum of five additional programs when using the [programGate] guard. Please reduce the number of additional programs to <= 5.`;
    super(message);
    _defineProperty(this, "name", "MaximumOfFiveAdditionalProgramsError");
  }
};

// ../../node_modules/@metaplex-foundation/js/dist/esm/plugins/candyMachineModule/operations/callCandyGuardRoute.mjs
var Key62 = "CallCandyGuardRouteOperation";
var callCandyGuardRouteOperation = _callCandyGuardRouteOperation;
function _callCandyGuardRouteOperation(input) {
  return {
    key: Key62,
    input
  };
}
_callCandyGuardRouteOperation.key = Key62;
var callCandyGuardRouteOperationHandler = {
  handle(operation, metaplex, scope) {
    return __async(this, null, function* () {
      const builder = callCandyGuardRouteBuilder(metaplex, operation.input, scope);
      return builder.sendAndConfirm(metaplex, scope.confirmOptions);
    });
  }
};
var callCandyGuardRouteBuilder = (metaplex, params, options = {}) => {
  const {
    programs,
    payer = metaplex.rpc().getDefaultFeePayer()
  } = options;
  const {
    candyMachine,
    guard,
    settings,
    group = null
  } = params;
  if (!candyMachine.candyGuard) {
    throw new CandyGuardRequiredOnCandyMachineError();
  }
  const parsedRouteSettings = metaplex.candyMachines().guards().parseRouteSettings(candyMachine.address, candyMachine.candyGuard, payer, guard, settings, group, programs);
  const routeSigners = [payer, ...parsedRouteSettings.signers];
  const routeInstruction = (0, import_mpl_candy_guard2.createRouteInstruction)({
    candyGuard: candyMachine.candyGuard.address,
    candyMachine: candyMachine.address,
    payer: payer.publicKey
  }, {
    args: {
      // "GuardType" is an enum for default guards only and will assert this
      // whereas we want to allow custom guards, so we need to pass anything
      // here to create the instruction and override this data afterwards.
      guard: 0,
      data: parsedRouteSettings.arguments
    },
    label: group
  }, metaplex.programs().getCandyGuard(programs).address);
  routeInstruction.keys.push(...parsedRouteSettings.accountMetas);
  const availableGuards = metaplex.candyMachines().guards().forCandyGuardProgram(programs);
  const guardIndex = availableGuards.findIndex((g) => g.name === guard);
  beet2.u8.write(routeInstruction.data, 8, guardIndex);
  return TransactionBuilder.make().setFeePayer(payer).add({
    instruction: routeInstruction,
    signers: routeSigners,
    key: params.instructionKey ?? "callGuardRoute"
  });
};

// ../../node_modules/@metaplex-foundation/js/dist/esm/plugins/candyMachineModule/operations/createCandyMachine.mjs
var import_mpl_candy_machine_core2 = __toESM(require_src3(), 1);
init_index_browser_esm();

// ../../node_modules/@metaplex-foundation/js/dist/esm/plugins/candyMachineModule/models/CandyMachine.mjs
var import_buffer7 = __toESM(require_buffer2(), 1);
var import_mpl_candy_machine_core = __toESM(require_src3(), 1);

// ../../node_modules/@metaplex-foundation/js/dist/esm/plugins/candyMachineModule/constants.mjs
var MAX_NAME_LENGTH3 = 32;
var MAX_SYMBOL_LENGTH3 = 10;
var MAX_URI_LENGTH3 = 200;
var MAX_CREATOR_LIMIT2 = 5;
var MAX_CREATOR_LEN3 = 32 + 1 + 1;
var CANDY_MACHINE_HIDDEN_SECTION = 8 + // discriminator
8 + // features
32 + // authority
32 + // mint authority
32 + // collection mint
8 + // items redeemed
8 + // items available (config data)
4 + MAX_SYMBOL_LENGTH3 + // u32 + max symbol length
2 + // seller fee basis points
8 + // max supply
1 + // is mutable
4 + MAX_CREATOR_LIMIT2 * MAX_CREATOR_LEN3 + // u32 + creators vec
1 + // option (config lines settings)
4 + MAX_NAME_LENGTH3 + // u32 + max name length
4 + // name length
4 + MAX_URI_LENGTH3 + // u32 + max uri length
4 + // uri length
1 + // is sequential
1 + // option (hidden setting)
4 + MAX_NAME_LENGTH3 + // u32 + max name length
4 + MAX_URI_LENGTH3 + // u32 + max uri length
32;
var CANDY_GUARD_LABEL_SIZE = 6;
var CANDY_GUARD_DATA = 8 + // discriminator
32 + // base
1 + // bump
32;

// ../../node_modules/@metaplex-foundation/js/dist/esm/plugins/candyMachineModule/models/CandyMachineHiddenSection.mjs
var beet3 = __toESM(require_beet(), 1);

// ../../node_modules/@metaplex-foundation/js/dist/esm/types/FeatureFlags.mjs
var import_buffer6 = __toESM(require_buffer2(), 1);
var serializeFeatureFlags = (features, byteSize, backward = false) => {
  byteSize = byteSize ?? Math.ceil(features.length / 8);
  const bytes = [];
  for (let i = 0; i < byteSize; i++) {
    let byte = 0;
    for (let j = 0; j < 8; j++) {
      const feature = Number(features[i * 8 + j] ?? 0);
      byte |= feature << (backward ? j : 7 - j);
    }
    if (backward) {
      bytes.unshift(byte);
    } else {
      bytes.push(byte);
    }
  }
  return import_buffer6.Buffer.from(bytes);
};
var deserializeFeatureFlags = (buffer2, numberOfFlags, backward = false) => {
  const booleans = [];
  buffer2 = backward ? buffer2.reverse() : buffer2;
  for (let byte of buffer2) {
    for (let i = 0; i < 8; i++) {
      if (backward) {
        booleans.push(Boolean(byte & 1));
        byte >>= 1;
      } else {
        booleans.push(Boolean(byte & 128));
        byte <<= 1;
      }
    }
  }
  return booleans.slice(0, numberOfFlags);
};

// ../../node_modules/@metaplex-foundation/js/dist/esm/plugins/candyMachineModule/models/CandyMachineHiddenSection.mjs
var deserializeCandyMachineHiddenSection = (buffer2, itemsAvailable, itemsRemaining, configLineSettings, offset = 0) => {
  const itemsLoaded = beet3.u32.read(buffer2, offset);
  offset += 4;
  const {
    nameLength
  } = configLineSettings;
  const {
    uriLength
  } = configLineSettings;
  const configLineSize = nameLength + uriLength;
  const configLinesSize = configLineSize * itemsAvailable;
  const rawConfigLines = buffer2.slice(offset, offset + configLinesSize);
  offset += configLinesSize;
  const itemsLoadedBuffer = buffer2.slice(offset, offset + itemsAvailable);
  const itemsLoadedMap = deserializeFeatureFlags(itemsLoadedBuffer, itemsAvailable);
  const itemsLoadedMapSize = Math.floor(itemsAvailable / 8) + 1;
  offset += itemsLoadedMapSize;
  const itemsLeftToMint = beet3.uniformFixedSizeArray(beet3.u32, itemsAvailable).read(buffer2, offset).slice(0, itemsRemaining);
  const itemsMinted = itemsAvailable - itemsRemaining;
  const isMinted = (index) => configLineSettings.isSequential ? index < itemsMinted : !itemsLeftToMint.includes(index);
  const items = [];
  itemsLoadedMap.forEach((loaded, index) => {
    if (!loaded)
      return;
    const namePosition = index * configLineSize;
    const uriPosition = namePosition + nameLength;
    const name = rawConfigLines.slice(namePosition, namePosition + nameLength).toString("utf8");
    const uri = rawConfigLines.slice(uriPosition, uriPosition + uriLength).toString("utf8");
    const prefixName = replaceCandyMachineItemPattern(configLineSettings.prefixName, index);
    const prefixUri = replaceCandyMachineItemPattern(configLineSettings.prefixUri, index);
    items.push({
      index,
      minted: isMinted(index),
      name: prefixName + removeEmptyChars(name),
      uri: prefixUri + removeEmptyChars(uri)
    });
  });
  return {
    itemsLoaded,
    items,
    itemsLoadedMap,
    itemsLeftToMint
  };
};
var replaceCandyMachineItemPattern = (value, index) => {
  return value.replace("$ID+1$", `${index + 1}`).replace("$ID$", `${index}`);
};

// ../../node_modules/@metaplex-foundation/js/dist/esm/types/Model.mjs
var isModel = (model, value) => typeof value === "object" && value.model === model;
function assertModel(condition, message) {
  assert2(condition, message);
}

// ../../node_modules/@metaplex-foundation/js/dist/esm/plugins/candyMachineModule/models/CandyMachine.mjs
var isCandyMachine = (value) => isModel("candyMachine", value);
function assertCandyMachine(value) {
  assertModel(isCandyMachine(value), `Expected CandyMachine model`);
}
var toCandyMachine = (account, candyGuard = null) => {
  const serializer = createSerializerFromSolitaType(import_mpl_candy_machine_core.CandyMachine, import_mpl_candy_machine_core.candyMachineBeet.description);
  const parsedAccount = deserializeAccount(account, serializer);
  const itemsAvailable = toBigNumber(parsedAccount.data.data.itemsAvailable);
  const itemsMinted = toBigNumber(parsedAccount.data.itemsRedeemed);
  const itemsRemaining = toBigNumber(itemsAvailable.sub(itemsMinted));
  let items = [];
  let itemsLoaded = 0;
  let isFullyLoaded = true;
  const {
    hiddenSettings
  } = parsedAccount.data.data;
  const {
    configLineSettings
  } = parsedAccount.data.data;
  let itemSettings;
  if (hiddenSettings) {
    itemSettings = __spreadProps(__spreadValues({}, hiddenSettings), {
      type: "hidden"
    });
  } else {
    assert2(!!configLineSettings, "Expected either hidden or config line settings");
    itemSettings = __spreadProps(__spreadValues({}, configLineSettings), {
      type: "configLines"
    });
    const hiddenSection = deserializeCandyMachineHiddenSection(account.data, itemsAvailable.toNumber(), itemsRemaining.toNumber(), itemSettings, CANDY_MACHINE_HIDDEN_SECTION);
    items = hiddenSection.items;
    itemsLoaded = hiddenSection.itemsLoaded;
    isFullyLoaded = hiddenSection.itemsLoaded >= itemsAvailable.toNumber();
  }
  return {
    model: "candyMachine",
    address: account.publicKey,
    accountInfo: toAccountInfo(account),
    authorityAddress: parsedAccount.data.authority,
    mintAuthorityAddress: parsedAccount.data.mintAuthority,
    collectionMintAddress: parsedAccount.data.collectionMint,
    symbol: removeEmptyChars(parsedAccount.data.data.symbol),
    sellerFeeBasisPoints: parsedAccount.data.data.sellerFeeBasisPoints,
    isMutable: parsedAccount.data.data.isMutable,
    maxEditionSupply: toBigNumber(parsedAccount.data.data.maxSupply),
    creators: parsedAccount.data.data.creators.map((creator) => __spreadProps(__spreadValues({}, creator), {
      share: creator.percentageShare
    })),
    items,
    itemsAvailable,
    itemsMinted,
    itemsRemaining,
    itemsLoaded,
    isFullyLoaded,
    itemSettings,
    featureFlags: deserializeFeatureFlags(toBigNumber(parsedAccount.data.features).toArrayLike(import_buffer7.Buffer, "le", 8).reverse(), 64),
    candyGuard
  };
};
var toCandyMachineData = (candyMachine) => {
  return {
    itemsAvailable: candyMachine.itemsAvailable,
    symbol: candyMachine.symbol,
    sellerFeeBasisPoints: candyMachine.sellerFeeBasisPoints,
    maxSupply: candyMachine.maxEditionSupply,
    isMutable: candyMachine.isMutable,
    creators: candyMachine.creators.map((creator) => __spreadProps(__spreadValues({}, creator), {
      verified: false,
      percentageShare: creator.share
    })),
    configLineSettings: candyMachine.itemSettings.type === "configLines" ? candyMachine.itemSettings : null,
    hiddenSettings: candyMachine.itemSettings.type === "hidden" ? candyMachine.itemSettings : null
  };
};
var getCandyMachineSize = (data) => {
  if (data.hiddenSettings) {
    return CANDY_MACHINE_HIDDEN_SECTION;
  }
  assert2(!!data.configLineSettings, "No config line settings nor hidden settings were provided. Please provide one of them.");
  const itemsAvailable = toBigNumber(data.itemsAvailable).toNumber();
  const configLineSize = data.configLineSettings.nameLength + data.configLineSettings.uriLength;
  return Math.ceil(CANDY_MACHINE_HIDDEN_SECTION + // Number of currently items inserted.
  4 + // Config line data.
  itemsAvailable * configLineSize + // Bit mask to keep track of which ConfigLines have been added.
  (4 + Math.floor(itemsAvailable / 8) + 1) + // Mint indices.
  (4 + itemsAvailable * 4));
};

// ../../node_modules/@metaplex-foundation/js/dist/esm/plugins/candyMachineModule/operations/createCandyMachine.mjs
var Key63 = "CreateCandyMachineOperation";
var createCandyMachineOperation = _createCandyMachineOperation;
function _createCandyMachineOperation(input) {
  return {
    key: Key63,
    input
  };
}
_createCandyMachineOperation.key = Key63;
var createCandyMachineOperationHandler = {
  handle(operation, metaplex, scope) {
    return __async(this, null, function* () {
      const builder = yield createCandyMachineBuilder(metaplex, operation.input, scope);
      scope.throwIfCanceled();
      const confirmOptions = makeConfirmOptionsFinalizedOnMainnet(metaplex, scope.confirmOptions);
      const output = yield builder.sendAndConfirm(metaplex, confirmOptions);
      scope.throwIfCanceled();
      const candyMachine = yield metaplex.candyMachines().findByAddress({
        address: output.candyMachineSigner.publicKey
      }, scope);
      scope.throwIfCanceled();
      return __spreadProps(__spreadValues({}, output), {
        candyMachine
      });
    });
  }
};
var createCandyMachineBuilder = (_0, _1, ..._2) => __async(void 0, [_0, _1, ..._2], function* (metaplex, params, options = {}) {
  const {
    programs,
    payer = metaplex.rpc().getDefaultFeePayer()
  } = options;
  const {
    candyMachine = Keypair.generate(),
    authority = metaplex.identity(),
    collection,
    sellerFeeBasisPoints,
    itemsAvailable,
    symbol = "",
    maxEditionSupply = toBigNumber(0),
    isMutable = true,
    withoutCandyGuard = false
  } = params;
  const creators = params.creators ?? [{
    address: toPublicKey(authority),
    share: 100
  }];
  const itemSettings = params.itemSettings ?? {
    type: "configLines",
    prefixName: "",
    nameLength: 32,
    prefixUri: "",
    uriLength: 200,
    isSequential: false
  };
  const authorityPda = metaplex.candyMachines().pdas().authority({
    candyMachine: candyMachine.publicKey,
    programs
  });
  const collectionMetadata = metaplex.nfts().pdas().metadata({
    mint: collection.address,
    programs
  });
  const collectionMasterEdition = metaplex.nfts().pdas().masterEdition({
    mint: collection.address,
    programs
  });
  const collectionAuthorityRecord = metaplex.nfts().pdas().collectionAuthorityRecord({
    mint: collection.address,
    collectionAuthority: authorityPda,
    programs
  });
  const candyMachineProgram2 = metaplex.programs().getCandyMachine(programs);
  const tokenMetadataProgram = metaplex.programs().getTokenMetadata(programs);
  const candyMachineData = toCandyMachineData({
    itemsAvailable,
    symbol,
    sellerFeeBasisPoints,
    maxEditionSupply,
    isMutable,
    creators,
    itemSettings
  });
  const builder = TransactionBuilder.make().setFeePayer(payer).setContext({
    candyMachineSigner: candyMachine
  });
  let mintAuthority = toPublicKey(authority);
  if (!withoutCandyGuard) {
    const createCandyGuard = metaplex.candyMachines().builders().createCandyGuard({
      base: candyMachine,
      authority: toPublicKey(authority),
      guards: params.guards ?? {},
      groups: params.groups
    }, {
      programs,
      payer
    });
    const {
      candyGuardAddress
    } = createCandyGuard.getContext();
    mintAuthority = candyGuardAddress;
    builder.add(createCandyGuard);
  }
  return builder.add(yield metaplex.system().builders().createAccount({
    space: getCandyMachineSize(candyMachineData),
    newAccount: candyMachine,
    program: candyMachineProgram2.address
  }, {
    payer,
    programs
  })).add({
    instruction: (0, import_mpl_candy_machine_core2.createInitializeInstruction)({
      candyMachine: candyMachine.publicKey,
      authorityPda,
      authority: toPublicKey(authority),
      payer: payer.publicKey,
      collectionMetadata,
      collectionMint: collection.address,
      collectionMasterEdition,
      collectionUpdateAuthority: collection.updateAuthority.publicKey,
      collectionAuthorityRecord,
      tokenMetadataProgram: tokenMetadataProgram.address
    }, {
      data: candyMachineData
    }, candyMachineProgram2.address),
    signers: [payer, candyMachine, collection.updateAuthority],
    key: params.initializeCandyMachineInstructionKey ?? "initializeCandyMachine"
  }).when(!withoutCandyGuard, (builder2) => {
    if (!isSigner(authority)) {
      throw new ExpectedSignerError("authority", "PublicKey", "In order to create a Candy Machine with an associated Candy Guard you must provide the authority as a Signer.");
    }
    return builder2.add(metaplex.candyMachines().builders().wrapCandyGuard({
      candyMachine: candyMachine.publicKey,
      candyMachineAuthority: authority,
      candyGuard: mintAuthority,
      candyGuardAuthority: authority,
      wrapCandyGuardInstructionKey: params.wrapCandyGuardInstructionKey
    }, {
      payer,
      programs
    }));
  });
});

// ../../node_modules/@metaplex-foundation/js/dist/esm/plugins/candyMachineModule/operations/createCandyGuard.mjs
var import_mpl_candy_guard3 = __toESM(require_src2(), 1);
init_index_browser_esm();
var Key64 = "CreateCandyGuardOperation";
var createCandyGuardOperation = _createCandyGuardOperation;
function _createCandyGuardOperation(input) {
  return {
    key: Key64,
    input
  };
}
_createCandyGuardOperation.key = Key64;
var createCandyGuardOperationHandler = {
  handle(operation, metaplex, scope) {
    return __async(this, null, function* () {
      const builder = createCandyGuardBuilder(metaplex, operation.input, scope);
      const confirmOptions = makeConfirmOptionsFinalizedOnMainnet(metaplex, scope.confirmOptions);
      const output = yield builder.sendAndConfirm(metaplex, confirmOptions);
      scope.throwIfCanceled();
      const candyGuard = yield metaplex.candyMachines().findCandyGuardByBaseAddress({
        address: output.base.publicKey
      }, scope);
      return __spreadProps(__spreadValues({}, output), {
        candyGuard
      });
    });
  }
};
var createCandyGuardBuilder = (metaplex, params, options = {}) => {
  const {
    programs,
    payer = metaplex.rpc().getDefaultFeePayer()
  } = options;
  const base2 = params.base ?? Keypair.generate();
  const authority = params.authority ?? metaplex.identity().publicKey;
  const candyGuardProgram = metaplex.programs().getCandyGuard(programs);
  const candyGuard = metaplex.candyMachines().pdas().candyGuard({
    base: base2.publicKey,
    programs
  });
  const serializedSettings = metaplex.candyMachines().guards().serializeSettings(params.guards, params.groups ?? [], programs);
  return TransactionBuilder.make().setFeePayer(payer).setContext({
    base: base2,
    candyGuardAddress: candyGuard
  }).add({
    instruction: (0, import_mpl_candy_guard3.createInitializeInstruction)({
      candyGuard,
      base: base2.publicKey,
      authority,
      payer: payer.publicKey
    }, {
      data: serializedSettings
    }, candyGuardProgram.address),
    signers: [base2, payer],
    key: params.createCandyGuardInstructionKey ?? "createCandyGuard"
  });
};

// ../../node_modules/@metaplex-foundation/js/dist/esm/plugins/candyMachineModule/operations/deleteCandyMachine.mjs
var import_mpl_candy_machine_core3 = __toESM(require_src3(), 1);
var Key65 = "DeleteCandyMachineOperation";
var deleteCandyMachineOperation = useOperation(Key65);
var deleteCandyMachineOperationHandler = {
  handle(operation, metaplex, scope) {
    return __async(this, null, function* () {
      return deleteCandyMachineBuilder(metaplex, operation.input, scope).sendAndConfirm(metaplex, scope.confirmOptions);
    });
  }
};
var deleteCandyMachineBuilder = (metaplex, params, options = {}) => {
  const {
    programs,
    payer = metaplex.rpc().getDefaultFeePayer()
  } = options;
  const {
    candyMachine,
    candyGuard,
    authority = metaplex.identity(),
    candyGuardAuthority = authority
  } = params;
  const candyMachineProgram2 = metaplex.programs().getCandyMachine(programs);
  const builder = TransactionBuilder.make().setFeePayer(payer).add({
    instruction: (0, import_mpl_candy_machine_core3.createWithdrawInstruction)({
      candyMachine,
      authority: authority.publicKey
    }, candyMachineProgram2.address),
    signers: [authority],
    key: params.deleteCandyMachineInstructionKey ?? "deleteCandyMachine"
  });
  if (candyGuard) {
    builder.add(metaplex.candyMachines().builders().deleteCandyGuard({
      candyGuard,
      authority: candyGuardAuthority
    }, {
      payer,
      programs
    }));
  }
  return builder;
};

// ../../node_modules/@metaplex-foundation/js/dist/esm/plugins/candyMachineModule/operations/deleteCandyGuard.mjs
var import_mpl_candy_guard4 = __toESM(require_src2(), 1);
var Key66 = "DeleteCandyGuardOperation";
var deleteCandyGuardOperation = useOperation(Key66);
var deleteCandyGuardOperationHandler = {
  handle(operation, metaplex, scope) {
    return __async(this, null, function* () {
      return deleteCandyGuardBuilder(metaplex, operation.input, scope).sendAndConfirm(metaplex, scope.confirmOptions);
    });
  }
};
var deleteCandyGuardBuilder = (metaplex, params, options = {}) => {
  const {
    programs,
    payer = metaplex.rpc().getDefaultFeePayer()
  } = options;
  const {
    candyGuard,
    authority = metaplex.identity()
  } = params;
  const candyGuardProgram = metaplex.programs().getCandyGuard(programs);
  return TransactionBuilder.make().setFeePayer(payer).add({
    instruction: (0, import_mpl_candy_guard4.createWithdrawInstruction)({
      candyGuard,
      authority: authority.publicKey
    }, candyGuardProgram.address),
    signers: [authority],
    key: params.deleteCandyGuardInstructionKey ?? "deleteCandyGuard"
  });
};

// ../../node_modules/@metaplex-foundation/js/dist/esm/plugins/candyMachineModule/operations/insertCandyMachineItems.mjs
var import_mpl_candy_machine_core4 = __toESM(require_src3(), 1);

// ../../node_modules/@metaplex-foundation/js/dist/esm/plugins/candyMachineModule/asserts.mjs
var assertCanAdd2 = (candyMachine, index, amount2) => {
  if (index + amount2 > candyMachine.itemsAvailable.toNumber()) {
    throw new CandyMachineCannotAddAmountError(index, amount2, candyMachine.itemsAvailable.toNumber());
  }
};
var assertAllItemConstraints = (candyMachine, items) => {
  if (candyMachine.itemSettings.type !== "configLines") {
    return;
  }
  const {
    nameLength
  } = candyMachine.itemSettings;
  const {
    uriLength
  } = candyMachine.itemSettings;
  for (let i = 0; i < items.length; i++) {
    if (items[i].name.length > nameLength) {
      throw new CandyMachineItemTextTooLongError(i, "name", items[i].name, nameLength);
    }
    if (items[i].uri.length > uriLength) {
      throw new CandyMachineItemTextTooLongError(i, "uri", items[i].uri, uriLength);
    }
  }
};

// ../../node_modules/@metaplex-foundation/js/dist/esm/plugins/candyMachineModule/operations/insertCandyMachineItems.mjs
var Key67 = "InsertCandyMachineItemsOperation";
var insertCandyMachineItemsOperation = useOperation(Key67);
var insertCandyMachineItemsOperationHandler = {
  handle(operation, metaplex, scope) {
    return __async(this, null, function* () {
      return insertCandyMachineItemsBuilder(metaplex, operation.input, scope).sendAndConfirm(metaplex, scope.confirmOptions);
    });
  }
};
var insertCandyMachineItemsBuilder = (metaplex, params, options = {}) => {
  const {
    programs,
    payer = metaplex.rpc().getDefaultFeePayer()
  } = options;
  const authority = params.authority ?? metaplex.identity();
  const index = params.index ?? params.candyMachine.itemsLoaded;
  const {
    items
  } = params;
  assertCanAdd2(params.candyMachine, index, items.length);
  assertAllItemConstraints(params.candyMachine, items);
  const candyMachineProgram2 = metaplex.programs().getCandyMachine(programs);
  return TransactionBuilder.make().setFeePayer(payer).add({
    instruction: (0, import_mpl_candy_machine_core4.createAddConfigLinesInstruction)({
      candyMachine: params.candyMachine.address,
      authority: authority.publicKey
    }, {
      index,
      configLines: items
    }, candyMachineProgram2.address),
    signers: [authority],
    key: params.instructionKey ?? "insertItems"
  });
};

// ../../node_modules/@metaplex-foundation/js/dist/esm/plugins/candyMachineModule/operations/mintFromCandyMachine.mjs
var import_mpl_candy_guard5 = __toESM(require_src2(), 1);
var import_mpl_candy_machine_core5 = __toESM(require_src3(), 1);
init_index_browser_esm();
var Key68 = "MintFromCandyMachineOperation";
var mintFromCandyMachineOperation = _mintFromCandyMachineOperation;
function _mintFromCandyMachineOperation(input) {
  return {
    key: Key68,
    input
  };
}
_mintFromCandyMachineOperation.key = Key68;
var mintFromCandyMachineOperationHandler = {
  handle(operation, metaplex, scope) {
    return __async(this, null, function* () {
      const builder = yield mintFromCandyMachineBuilder(metaplex, operation.input, scope);
      scope.throwIfCanceled();
      const confirmOptions = makeConfirmOptionsFinalizedOnMainnet(metaplex, scope.confirmOptions);
      const output = yield builder.sendAndConfirm(metaplex, confirmOptions);
      scope.throwIfCanceled();
      let nft;
      try {
        nft = yield metaplex.nfts().findByMint({
          mintAddress: output.mintSigner.publicKey,
          tokenAddress: output.tokenAddress
        }, scope);
      } catch (error2) {
        const {
          candyGuard
        } = operation.input.candyMachine;
        if (!candyGuard) {
          throw error2;
        }
        const activeGuards = metaplex.candyMachines().guards().resolveGroupSettings(candyGuard.guards, candyGuard.groups, operation.input.group ?? null);
        if (!("botTax" in activeGuards)) {
          throw error2;
        }
        throw new CandyMachineBotTaxError(metaplex.rpc().getSolanaExporerUrl(output.response.signature), error2);
      }
      return __spreadValues({
        nft
      }, output);
    });
  }
};
var mintFromCandyMachineBuilder = (_0, _1, ..._2) => __async(void 0, [_0, _1, ..._2], function* (metaplex, params, options = {}) {
  const {
    programs,
    payer = metaplex.rpc().getDefaultFeePayer()
  } = options;
  const {
    candyMachine,
    collectionUpdateAuthority,
    mintAuthority = metaplex.identity(),
    mint = Keypair.generate(),
    owner = payer.publicKey,
    group = null,
    guards = {},
    token: token$1
  } = params;
  const candyMachineProgram2 = metaplex.programs().getCandyMachine(programs);
  const candyGuardProgram = metaplex.programs().getCandyGuard(programs);
  const tokenMetadataProgram = metaplex.programs().getTokenMetadata(programs);
  const tokenProgram2 = metaplex.programs().getToken(programs);
  const systemProgram = metaplex.programs().getSystem(programs);
  const authorityPda = metaplex.candyMachines().pdas().authority({
    candyMachine: candyMachine.address,
    programs
  });
  const nftMetadata = metaplex.nfts().pdas().metadata({
    mint: mint.publicKey,
    programs
  });
  const nftMasterEdition = metaplex.nfts().pdas().masterEdition({
    mint: mint.publicKey,
    programs
  });
  const collectionMetadata = metaplex.nfts().pdas().metadata({
    mint: candyMachine.collectionMintAddress,
    programs
  });
  const collectionMasterEdition = metaplex.nfts().pdas().masterEdition({
    mint: candyMachine.collectionMintAddress,
    programs
  });
  const collectionAuthorityRecord = metaplex.nfts().pdas().collectionAuthorityRecord({
    mint: candyMachine.collectionMintAddress,
    collectionAuthority: authorityPda,
    programs
  });
  const tokenWithMintBuilder = yield metaplex.tokens().builders().createTokenWithMint({
    decimals: 0,
    initialSupply: token(1),
    mint,
    mintAuthority: payer,
    freezeAuthority: payer.publicKey,
    owner,
    token: token$1,
    createMintAccountInstructionKey: params.createMintAccountInstructionKey,
    initializeMintInstructionKey: params.initializeMintInstructionKey,
    createAssociatedTokenAccountInstructionKey: params.createAssociatedTokenAccountInstructionKey,
    createTokenAccountInstructionKey: params.createTokenAccountInstructionKey,
    initializeTokenInstructionKey: params.initializeTokenInstructionKey,
    mintTokensInstructionKey: params.mintTokensInstructionKey
  }, {
    payer,
    programs
  });
  const {
    tokenAddress
  } = tokenWithMintBuilder.getContext();
  const sharedMintAccounts = {
    candyMachine: candyMachine.address,
    payer: payer.publicKey,
    nftMetadata,
    nftMint: mint.publicKey,
    nftMintAuthority: payer.publicKey,
    nftMasterEdition,
    collectionAuthorityRecord,
    collectionMint: candyMachine.collectionMintAddress,
    collectionMetadata,
    collectionMasterEdition,
    collectionUpdateAuthority,
    candyMachineProgram: candyMachineProgram2.address,
    tokenMetadataProgram: tokenMetadataProgram.address,
    tokenProgram: tokenProgram2.address,
    systemProgram: systemProgram.address,
    recentSlothashes: SYSVAR_SLOT_HASHES_PUBKEY,
    instructionSysvarAccount: SYSVAR_INSTRUCTIONS_PUBKEY
  };
  let mintNftInstruction;
  let mintNftSigners;
  if (!!candyMachine.candyGuard) {
    const {
      candyGuard
    } = candyMachine;
    const guardClient = metaplex.candyMachines().guards();
    const parsedMintSettings = guardClient.parseMintSettings(candyMachine.address, candyGuard, owner, payer, mint, guards, group, programs);
    mintNftSigners = [payer, mint, ...parsedMintSettings.signers];
    mintNftInstruction = (0, import_mpl_candy_guard5.createMintInstruction)(__spreadProps(__spreadValues({}, sharedMintAccounts), {
      candyGuard: candyMachine.candyGuard.address,
      candyMachineAuthorityPda: authorityPda
    }), {
      mintArgs: parsedMintSettings.arguments,
      label: group
    }, candyGuardProgram.address);
    mintNftInstruction.keys.push(...parsedMintSettings.accountMetas);
  } else {
    mintNftSigners = [payer, mint, mintAuthority];
    mintNftInstruction = (0, import_mpl_candy_machine_core5.createMintInstruction)(__spreadProps(__spreadValues({}, sharedMintAccounts), {
      authorityPda,
      mintAuthority: mintAuthority.publicKey
    }), candyMachineProgram2.address);
  }
  return TransactionBuilder.make().setFeePayer(payer).setContext({
    tokenAddress,
    mintSigner: mint
  }).add(tokenWithMintBuilder).add({
    instruction: mintNftInstruction,
    signers: mintNftSigners,
    key: params.mintFromCandyMachineInstructionKey ?? "mintNft"
  });
});

// ../../node_modules/@metaplex-foundation/js/dist/esm/plugins/candyMachineModule/operations/unwrapCandyGuard.mjs
var import_mpl_candy_guard6 = __toESM(require_src2(), 1);
var Key69 = "UnwrapCandyGuardOperation";
var unwrapCandyGuardOperation = useOperation(Key69);
var unwrapCandyGuardOperationHandler = {
  handle(operation, metaplex, scope) {
    return __async(this, null, function* () {
      return unwrapCandyGuardBuilder(metaplex, operation.input, scope).sendAndConfirm(metaplex, scope.confirmOptions);
    });
  }
};
var unwrapCandyGuardBuilder = (metaplex, params, options = {}) => {
  const {
    programs,
    payer = metaplex.rpc().getDefaultFeePayer()
  } = options;
  const {
    candyGuard,
    candyGuardAuthority = metaplex.identity(),
    candyMachine,
    candyMachineAuthority = metaplex.identity()
  } = params;
  const candyMachineProgram2 = metaplex.programs().getCandyMachine(programs);
  const candyGuardProgram = metaplex.programs().getCandyGuard(programs);
  return TransactionBuilder.make().setFeePayer(payer).add({
    instruction: (0, import_mpl_candy_guard6.createUnwrapInstruction)({
      candyGuard,
      authority: candyGuardAuthority.publicKey,
      candyMachine,
      candyMachineProgram: candyMachineProgram2.address,
      candyMachineAuthority: candyMachineAuthority.publicKey
    }, candyGuardProgram.address),
    signers: [candyGuardAuthority, candyMachineAuthority],
    key: params.unwrapCandyGuardInstructionKey ?? "unwrapCandyGuard"
  });
};

// ../../node_modules/@metaplex-foundation/js/dist/esm/plugins/candyMachineModule/operations/updateCandyMachine.mjs
var import_mpl_candy_machine_core6 = __toESM(require_src3(), 1);
var Key70 = "UpdateCandyMachineOperation";
var updateCandyMachineOperation = _updateCandyMachineOperation;
function _updateCandyMachineOperation(input) {
  return {
    key: Key70,
    input
  };
}
_updateCandyMachineOperation.key = Key70;
var updateCandyMachineOperationHandler = {
  handle(operation, metaplex, scope) {
    return __async(this, null, function* () {
      const builder = updateCandyMachineBuilder(metaplex, operation.input, scope);
      if (builder.isEmpty()) {
        throw new NoInstructionsToSendError(Key70);
      }
      return builder.sendAndConfirm(metaplex, scope.confirmOptions);
    });
  }
};
var updateCandyMachineBuilder = (metaplex, params, options = {}) => {
  const {
    programs,
    payer = metaplex.rpc().getDefaultFeePayer()
  } = options;
  const {
    authority = metaplex.identity(),
    candyGuardAuthority = authority
  } = params;
  return TransactionBuilder.make().setFeePayer(payer).add(updateCandyMachineDataBuilder(metaplex, params, authority, programs)).add(updateCandyMachineCollectionBuilder(metaplex, params, authority, payer, programs)).add(updateCandyGuardsBuilder(metaplex, params, candyGuardAuthority, payer, programs)).add(updateCandyMachineMintAuthorityBuilder(metaplex, params, authority, programs)).add(updateCandyMachineAuthorityBuilder(metaplex, params, authority, programs)).add(updateCandyGuardAuthorityBuilder2(metaplex, params, candyGuardAuthority, payer, programs));
};
var updateCandyMachineDataBuilder = (metaplex, params, authority, programs) => {
  const dataToUpdate = removeUndefinedAttributes({
    itemsAvailable: params.itemsAvailable,
    symbol: params.symbol,
    sellerFeeBasisPoints: params.sellerFeeBasisPoints,
    maxEditionSupply: params.maxEditionSupply,
    isMutable: params.isMutable,
    creators: params.creators,
    itemSettings: params.itemSettings
  });
  const candyMachineProgram2 = metaplex.programs().getCandyMachine(programs);
  let data;
  if (Object.keys(dataToUpdate).length === 0) {
    return TransactionBuilder.make();
  } else if (isCandyMachine(params.candyMachine)) {
    data = toCandyMachineData(__spreadValues(__spreadValues({}, params.candyMachine), dataToUpdate));
  } else {
    assertObjectHasDefinedKeys(dataToUpdate, ["itemsAvailable", "symbol", "sellerFeeBasisPoints", "maxEditionSupply", "isMutable", "creators", "itemSettings"], onMissingInputError);
    data = toCandyMachineData(dataToUpdate);
  }
  return TransactionBuilder.make().add({
    instruction: (0, import_mpl_candy_machine_core6.createUpdateInstruction)({
      candyMachine: toPublicKey(params.candyMachine),
      authority: authority.publicKey
    }, {
      data
    }, candyMachineProgram2.address),
    signers: [authority],
    key: params.updateDataInstructionKey ?? "updateCandyMachineData"
  });
};
var updateCandyMachineCollectionBuilder = (metaplex, params, authority, payer, programs) => {
  if (!params.collection) {
    return TransactionBuilder.make();
  }
  const currentCollectionAddress = params.collection.currentCollectionAddress ?? (isCandyMachine(params.candyMachine) ? params.candyMachine.collectionMintAddress : null);
  if (!currentCollectionAddress) {
    throw onMissingInputError(["collection.currentCollectionAddress"]);
  }
  const tokenMetadataProgram = metaplex.programs().getTokenMetadata(programs);
  const candyMachineProgram2 = metaplex.programs().getCandyMachine(programs);
  const candyMachineAddress = toPublicKey(params.candyMachine);
  const collectionAddress = params.collection.address;
  const collectionUpdateAuthority = params.collection.updateAuthority;
  const authorityPda = metaplex.candyMachines().pdas().authority({
    candyMachine: candyMachineAddress,
    programs
  });
  const currentCollectionMetadata = metaplex.nfts().pdas().metadata({
    mint: currentCollectionAddress
  });
  const currentCollectionAuthorityRecord = metaplex.nfts().pdas().collectionAuthorityRecord({
    mint: currentCollectionAddress,
    collectionAuthority: authorityPda
  });
  const collectionMetadata = metaplex.nfts().pdas().metadata({
    mint: collectionAddress
  });
  const collectionMasterEdition = metaplex.nfts().pdas().masterEdition({
    mint: collectionAddress
  });
  const collectionAuthorityRecord = metaplex.nfts().pdas().collectionAuthorityRecord({
    mint: collectionAddress,
    collectionAuthority: authorityPda
  });
  return TransactionBuilder.make().add({
    instruction: (0, import_mpl_candy_machine_core6.createSetCollectionInstruction)({
      candyMachine: candyMachineAddress,
      authority: authority.publicKey,
      authorityPda,
      payer: payer.publicKey,
      collectionMint: currentCollectionAddress,
      collectionMetadata: currentCollectionMetadata,
      collectionAuthorityRecord: currentCollectionAuthorityRecord,
      newCollectionUpdateAuthority: collectionUpdateAuthority.publicKey,
      newCollectionMetadata: collectionMetadata,
      newCollectionMint: collectionAddress,
      newCollectionMasterEdition: collectionMasterEdition,
      newCollectionAuthorityRecord: collectionAuthorityRecord,
      tokenMetadataProgram: tokenMetadataProgram.address
    }, candyMachineProgram2.address),
    signers: [authority, payer, collectionUpdateAuthority],
    key: params.setCollectionInstructionKey ?? "setCandyMachineCollection"
  });
};
var updateCandyGuardsBuilder = (metaplex, params, candyGuardAuthority, payer, programs) => {
  const guardsToUpdate = removeUndefinedAttributes({
    candyGuard: params.candyGuard,
    guards: params.guards,
    groups: params.groups
  });
  let args;
  if (Object.keys(guardsToUpdate).length === 0) {
    return TransactionBuilder.make();
  }
  if (isCandyMachine(params.candyMachine) && params.candyMachine.candyGuard) {
    args = __spreadValues({
      candyGuard: params.candyMachine.candyGuard.address,
      guards: params.candyMachine.candyGuard.guards,
      groups: params.candyMachine.candyGuard.groups
    }, guardsToUpdate);
  } else {
    assertObjectHasDefinedKeys(guardsToUpdate, ["candyGuard", "guards", "groups"], onMissingInputError);
    args = guardsToUpdate;
  }
  return metaplex.candyMachines().builders().updateCandyGuard({
    candyGuard: args.candyGuard,
    guards: args.guards,
    groups: args.groups,
    authority: candyGuardAuthority,
    updateInstructionKey: params.updateCandyGuardInstructionKey ?? "updateCandyGuard"
  }, {
    payer,
    programs
  });
};
var updateCandyMachineMintAuthorityBuilder = (metaplex, params, authority, programs) => {
  if (!params.newMintAuthority) {
    return TransactionBuilder.make();
  }
  const candyMachineProgram2 = metaplex.programs().getCandyMachine(programs);
  return TransactionBuilder.make().add({
    instruction: (0, import_mpl_candy_machine_core6.createSetMintAuthorityInstruction)({
      candyMachine: toPublicKey(params.candyMachine),
      authority: authority.publicKey,
      mintAuthority: params.newMintAuthority.publicKey
    }, candyMachineProgram2.address),
    signers: [authority, params.newMintAuthority],
    key: params.setAuthorityInstructionKey ?? "setCandyMachineAuthority"
  });
};
var updateCandyMachineAuthorityBuilder = (metaplex, params, authority, programs) => {
  if (!params.newAuthority) {
    return TransactionBuilder.make();
  }
  const candyMachineProgram2 = metaplex.programs().getCandyMachine(programs);
  return TransactionBuilder.make().add({
    instruction: (0, import_mpl_candy_machine_core6.createSetAuthorityInstruction)({
      candyMachine: toPublicKey(params.candyMachine),
      authority: authority.publicKey
    }, {
      newAuthority: params.newAuthority
    }, candyMachineProgram2.address),
    signers: [authority],
    key: params.setAuthorityInstructionKey ?? "setCandyMachineAuthority"
  });
};
var updateCandyGuardAuthorityBuilder2 = (metaplex, params, candyGuardAuthority, payer, programs) => {
  if (!params.newCandyGuardAuthority) {
    return TransactionBuilder.make();
  }
  const candyGuardAddress = params.candyGuard ?? (isCandyMachine(params.candyMachine) && params.candyMachine.candyGuard ? params.candyMachine.candyGuard.address : null);
  if (!candyGuardAddress) {
    throw onMissingInputError(["candyGuard"]);
  }
  return TransactionBuilder.make().add(metaplex.candyMachines().builders().updateCandyGuardAuthority({
    candyGuard: candyGuardAddress,
    authority: candyGuardAuthority,
    newAuthority: params.newCandyGuardAuthority,
    instructionKey: params.setCandyGuardAuthorityInstructionKey
  }, {
    payer,
    programs
  }));
};
var onMissingInputError = (missingKeys) => new MissingInputDataError(missingKeys, "When passing the Candy Machine as a `PublicKey` instead of a Candy Machine model the SDK cannot rely on current data to fill the gaps within the provided input. Alternatively, you can pass the Candy Machine model instead.");

// ../../node_modules/@metaplex-foundation/js/dist/esm/plugins/candyMachineModule/operations/updateCandyGuard.mjs
var import_mpl_candy_guard7 = __toESM(require_src2(), 1);
var Key71 = "UpdateCandyGuardOperation";
var updateCandyGuardOperation = _updateCandyGuardOperation;
function _updateCandyGuardOperation(input) {
  return {
    key: Key71,
    input
  };
}
_updateCandyGuardOperation.key = Key71;
var updateCandyGuardOperationHandler = {
  handle(operation, metaplex, scope) {
    return __async(this, null, function* () {
      return updateCandyGuardBuilder(metaplex, operation.input, scope).sendAndConfirm(metaplex, scope.confirmOptions);
    });
  }
};
var updateCandyGuardBuilder = (metaplex, params, options = {}) => {
  const {
    programs,
    payer = metaplex.rpc().getDefaultFeePayer()
  } = options;
  const {
    candyGuard,
    guards,
    groups,
    authority = metaplex.identity()
  } = params;
  const candyGuardProgram = metaplex.programs().getCandyGuard(programs);
  const serializedSettings = metaplex.candyMachines().guards().serializeSettings(guards, groups, programs);
  return TransactionBuilder.make().setFeePayer(payer).add({
    instruction: (0, import_mpl_candy_guard7.createUpdateInstruction)({
      candyGuard,
      authority: authority.publicKey,
      payer: payer.publicKey
    }, {
      data: serializedSettings
    }, candyGuardProgram.address),
    signers: [authority, payer],
    key: params.updateInstructionKey ?? "updateCandyGuard"
  });
};

// ../../node_modules/@metaplex-foundation/js/dist/esm/plugins/candyMachineModule/operations/wrapCandyGuard.mjs
var import_mpl_candy_guard8 = __toESM(require_src2(), 1);
var Key72 = "WrapCandyGuardOperation";
var wrapCandyGuardOperation = useOperation(Key72);
var wrapCandyGuardOperationHandler = {
  handle(operation, metaplex, scope) {
    return __async(this, null, function* () {
      return wrapCandyGuardBuilder(metaplex, operation.input, scope).sendAndConfirm(metaplex, scope.confirmOptions);
    });
  }
};
var wrapCandyGuardBuilder = (metaplex, params, options = {}) => {
  const {
    programs,
    payer = metaplex.rpc().getDefaultFeePayer()
  } = options;
  const {
    candyGuard,
    candyGuardAuthority = metaplex.identity(),
    candyMachine,
    candyMachineAuthority = metaplex.identity()
  } = params;
  const candyMachineProgram2 = metaplex.programs().getCandyMachine(programs);
  const candyGuardProgram = metaplex.programs().getCandyGuard(programs);
  return TransactionBuilder.make().setFeePayer(payer).add({
    instruction: (0, import_mpl_candy_guard8.createWrapInstruction)({
      candyGuard,
      authority: candyGuardAuthority.publicKey,
      candyMachine,
      candyMachineProgram: candyMachineProgram2.address,
      candyMachineAuthority: candyMachineAuthority.publicKey
    }, candyGuardProgram.address),
    signers: [candyGuardAuthority, candyMachineAuthority],
    key: params.wrapCandyGuardInstructionKey ?? "wrapCandyGuard"
  });
};

// ../../node_modules/@metaplex-foundation/js/dist/esm/plugins/candyMachineModule/CandyMachineBuildersClient.mjs
var CandyMachineBuildersClient = class {
  constructor(metaplex) {
    this.metaplex = metaplex;
  }
  /** {@inheritDoc callCandyGuardRouteBuilder} */
  callGuardRoute(input, options) {
    return callCandyGuardRouteBuilder(this.metaplex, input, options);
  }
  /** {@inheritDoc createCandyMachineBuilder} */
  create(input, options) {
    return createCandyMachineBuilder(this.metaplex, input, options);
  }
  /** {@inheritDoc createCandyGuardBuilder} */
  createCandyGuard(input, options) {
    return createCandyGuardBuilder(this.metaplex, input, options);
  }
  /** {@inheritDoc deleteCandyMachineBuilder} */
  delete(input, options) {
    return deleteCandyMachineBuilder(this.metaplex, input, options);
  }
  /** {@inheritDoc deleteCandyGuardBuilder} */
  deleteCandyGuard(input, options) {
    return deleteCandyGuardBuilder(this.metaplex, input, options);
  }
  /** {@inheritDoc insertCandyMachineItemsBuilder} */
  insertItems(input, options) {
    return insertCandyMachineItemsBuilder(this.metaplex, input, options);
  }
  /** {@inheritDoc mintFromCandyMachineBuilder} */
  mint(input, options) {
    return mintFromCandyMachineBuilder(this.metaplex, input, options);
  }
  /** {@inheritDoc unwrapCandyGuardBuilder} */
  unwrapCandyGuard(input, options) {
    return unwrapCandyGuardBuilder(this.metaplex, input, options);
  }
  /** {@inheritDoc updateCandyMachineBuilder} */
  update(input, options) {
    return updateCandyMachineBuilder(this.metaplex, input, options);
  }
  /** {@inheritDoc updateCandyGuardBuilder} */
  updateCandyGuard(input, options) {
    return updateCandyGuardBuilder(this.metaplex, input, options);
  }
  /** {@inheritDoc updateCandyGuardAuthorityBuilder} */
  updateCandyGuardAuthority(input, options) {
    return updateCandyGuardAuthorityBuilder(this.metaplex, input, options);
  }
  /** {@inheritDoc wrapCandyGuardBuilder} */
  wrapCandyGuard(input, options) {
    return wrapCandyGuardBuilder(this.metaplex, input, options);
  }
};

// ../../node_modules/@metaplex-foundation/js/dist/esm/plugins/candyMachineModule/CandyMachineGuardsClient.mjs
var import_buffer8 = __toESM(require_buffer2(), 1);
var beet4 = __toESM(require_beet(), 1);
var CandyMachineGuardsClient = class {
  constructor(metaplex) {
    _defineProperty(this, "guards", []);
    this.metaplex = metaplex;
  }
  /** Registers one or many guards by providing their manifest. */
  register(...guard) {
    this.guards.push(...guard);
  }
  /** Gets the manifest of a guard using its name. */
  get(name) {
    const guard = this.guards.find((guard2) => guard2.name === name);
    if (!guard) {
      throw new UnregisteredCandyGuardError(name);
    }
    return guard;
  }
  /** Gets all registered guard manifests. */
  all() {
    return this.guards;
  }
  /**
   * Gets all guard manifests for a registered Candy Guard program.
   *
   * It fails if the manifest of any guard expected by the program
   * is not registered. Manifests are returned in the order in which
   * they are defined on the `availableGuards` property of the program.
   */
  forProgram(program = "CandyGuardProgram") {
    const candyGuardProgram = typeof program === "object" && "availableGuards" in program ? program : this.metaplex.programs().get(program);
    return candyGuardProgram.availableGuards.map((name) => this.get(name));
  }
  /**
   * Gets all guard manifests for the registered Candy Guard program.
   *
   * @see {@link CandyMachineGuardsClient.forProgram}
   */
  forCandyGuardProgram(programs = []) {
    const candyGuardProgram = this.metaplex.programs().getCandyGuard(programs);
    return this.forProgram(candyGuardProgram);
  }
  /** Serializes the settings of all guards and groups. */
  serializeSettings(guards, groups = [], programs = []) {
    const availableGuards = this.forCandyGuardProgram(programs);
    this.assertGuardsAreRegistered(guards, groups, availableGuards.map(({
      name
    }) => name));
    const serializeSet = (set) => {
      const {
        features,
        buffer: buffer3
      } = availableGuards.reduce((acc, guard, index) => {
        const value = set[guard.name] ?? null;
        acc.features[index] = Boolean(value);
        if (value) {
          acc.buffer = import_buffer8.Buffer.concat([acc.buffer, serialize(value, guard.settingsSerializer)]);
        }
        return acc;
      }, {
        features: [],
        buffer: import_buffer8.Buffer.from([])
      });
      const serializedfeatures = serializeFeatureFlags(features, 8, true);
      serializedfeatures.reverse();
      return import_buffer8.Buffer.concat([serializedfeatures, buffer3]);
    };
    let buffer2 = serializeSet(guards);
    const groupCountBuffer = import_buffer8.Buffer.alloc(4);
    beet4.u32.write(groupCountBuffer, 0, groups.length);
    buffer2 = import_buffer8.Buffer.concat([buffer2, groupCountBuffer]);
    groups.forEach((group) => {
      if (group.label.length > CANDY_GUARD_LABEL_SIZE) {
        throw new GuardGroupLabelTooLongError(group.label, CANDY_GUARD_LABEL_SIZE);
      }
      const labelBuffer = import_buffer8.Buffer.alloc(CANDY_GUARD_LABEL_SIZE);
      labelBuffer.write(padEmptyChars(group.label, CANDY_GUARD_LABEL_SIZE), 0, CANDY_GUARD_LABEL_SIZE, "utf8");
      buffer2 = import_buffer8.Buffer.concat([buffer2, labelBuffer, serializeSet(group.guards)]);
    });
    return buffer2;
  }
  /** Deserializes the settings of all guards and groups. */
  deserializeSettings(buffer2, program = "CandyGuardProgram") {
    const availableGuards = this.forProgram(program);
    const deserializeSet = () => {
      const serializedFeatures = buffer2.slice(0, 8);
      serializedFeatures.reverse();
      const features = deserializeFeatureFlags(serializedFeatures, 64, true);
      buffer2 = buffer2.slice(8);
      return availableGuards.reduce((acc, guard, index) => {
        const isEnabled = features[index] ?? false;
        acc[guard.name] = null;
        if (!isEnabled)
          return acc;
        const [settings] = deserialize(buffer2, guard.settingsSerializer);
        buffer2 = buffer2.slice(guard.settingsBytes);
        acc[guard.name] = settings;
        return acc;
      }, {});
    };
    const guards = deserializeSet();
    const groups = [];
    const groupsCount = beet4.u32.read(buffer2, 0);
    buffer2 = buffer2.slice(4);
    for (let i = 0; i < groupsCount; i++) {
      const label = removeEmptyChars(buffer2.slice(0, CANDY_GUARD_LABEL_SIZE).toString("utf8"));
      buffer2 = buffer2.slice(CANDY_GUARD_LABEL_SIZE);
      groups.push({
        label,
        guards: deserializeSet()
      });
    }
    return {
      guards,
      groups
    };
  }
  /**
   * Resolves the set of settings that should be used when minting.
   *
   * If no group exists, the `guards` settings will be used.
   * Otherwise, the `guards` settings will act as default settings and
   * the settings of the selected group will override them.
   */
  resolveGroupSettings(guards, groups = [], groupLabel) {
    const availableGroups = groups.map((group) => group.label);
    const activeGroup = groups.find((group) => group.label === groupLabel);
    if (groupLabel && !activeGroup) {
      throw new SelectedGuardGroupDoesNotExistError(groupLabel, availableGroups);
    }
    if (groups.length === 0) {
      return guards;
    }
    if (!activeGroup) {
      throw new GuardGroupRequiredError(availableGroups);
    }
    const activeGroupGuardsWithoutNullGuards = Object.fromEntries(Object.entries(activeGroup.guards).filter(([, v]) => v != null));
    return __spreadValues(__spreadValues({}, guards), activeGroupGuardsWithoutNullGuards);
  }
  /**
   * Parses the arguments and remaining accounts of
   * all relevant guards for the mint instruction.
   */
  parseMintSettings(candyMachine, candyGuard, owner, payer, mint, guardMintSettings, groupLabel, programs = []) {
    const availableGuards = this.forCandyGuardProgram(programs);
    const guardSettings = this.resolveGroupSettings(candyGuard.guards, candyGuard.groups, groupLabel);
    const initialAccumulator = {
      arguments: import_buffer8.Buffer.from([]),
      accountMetas: [],
      signers: []
    };
    return availableGuards.reduce((acc, guard) => {
      const settings = guardSettings[guard.name] ?? null;
      const mintSettings = guardMintSettings[guard.name] ?? null;
      if (!guard.mintSettingsParser || !settings)
        return acc;
      const parsedSettings = guard.mintSettingsParser({
        metaplex: this.metaplex,
        settings,
        mintSettings,
        owner,
        payer,
        mint,
        candyMachine,
        candyGuard: candyGuard.address,
        candyGuardAuthority: candyGuard.authorityAddress,
        programs
      });
      const accounts = this.getAccountMetas(parsedSettings.remainingAccounts);
      const signers = this.getSigners(parsedSettings.remainingAccounts);
      acc.arguments = import_buffer8.Buffer.concat([acc.arguments, parsedSettings.arguments]);
      acc.accountMetas.push(...accounts);
      acc.signers.push(...signers);
      return acc;
    }, initialAccumulator);
  }
  /**
   * Parses the arguments and remaining accounts of
   * the requested guard for the route instruction.
   */
  parseRouteSettings(candyMachine, candyGuard, payer, guard, routeSettings, groupLabel, programs = []) {
    const guardManifest = this.get(guard);
    if (!guardManifest.routeSettingsParser) {
      throw new GuardRouteNotSupportedError(guard);
    }
    const guardSettings = this.resolveGroupSettings(candyGuard.guards, candyGuard.groups, groupLabel);
    const settings = guardSettings[guard] ?? null;
    if (!settings) {
      throw new GuardNotEnabledError(guard, groupLabel);
    }
    const parsedSettings = guardManifest.routeSettingsParser({
      metaplex: this.metaplex,
      settings,
      routeSettings,
      payer,
      candyMachine,
      candyGuard: candyGuard.address,
      candyGuardAuthority: candyGuard.authorityAddress,
      programs
    });
    return {
      arguments: parsedSettings.arguments,
      accountMetas: this.getAccountMetas(parsedSettings.remainingAccounts),
      signers: this.getSigners(parsedSettings.remainingAccounts)
    };
  }
  /** @internal */
  getAccountMetas(remainingAccounts) {
    return remainingAccounts.map((account) => ({
      pubkey: account.isSigner ? account.address.publicKey : account.address,
      isSigner: account.isSigner,
      isWritable: account.isWritable
    }));
  }
  /** @internal */
  getSigners(remainingAccounts) {
    return remainingAccounts.filter((account) => account.isSigner).map((account) => account.address);
  }
  /** @internal */
  assertGuardsAreRegistered(guards, groups, availableGuardNames) {
    const guardNames = /* @__PURE__ */ new Set();
    const addGuardSet = (guardSet) => {
      Object.keys(guardSet).forEach((name) => {
        if (!!guardSet[name]) {
          guardNames.add(name);
        }
      });
    };
    addGuardSet(guards);
    groups.forEach((group) => addGuardSet(group.guards));
    guardNames.forEach((name) => {
      if (!availableGuardNames.includes(name)) {
        throw new UnregisteredCandyGuardError(name);
      }
    });
  }
};

// ../../node_modules/@metaplex-foundation/js/dist/esm/plugins/candyMachineModule/CandyMachinePdasClient.mjs
var import_buffer9 = __toESM(require_buffer2(), 1);
var CandyMachinePdasClient = class {
  constructor(metaplex) {
    this.metaplex = metaplex;
  }
  /** Finds the Authority PDA for the given Candy Machine. */
  authority({
    candyMachine,
    programs
  }) {
    const program = this.metaplex.programs().getCandyMachine(programs);
    return Pda.find(program.address, [import_buffer9.Buffer.from("candy_machine", "utf8"), candyMachine.toBuffer()]);
  }
  /** Finds the Candy Guard PDA for the given base address it derives from. */
  candyGuard({
    base: base2,
    programs
  }) {
    const program = this.metaplex.programs().getCandyGuard(programs);
    return Pda.find(program.address, [import_buffer9.Buffer.from("candy_guard", "utf8"), base2.toBuffer()]);
  }
  /**
   * Finds the Mint Limit Counter PDA that keeps track of how many
   * NFTs where minted by a given user on a given Candy Machine.
   */
  mintLimitCounter({
    id,
    user,
    candyMachine,
    candyGuard,
    programs
  }) {
    const program = this.metaplex.programs().getCandyGuard(programs);
    return Pda.find(program.address, [import_buffer9.Buffer.from("mint_limit", "utf8"), import_buffer9.Buffer.from([id]), user.toBuffer(), candyGuard.toBuffer(), candyMachine.toBuffer()]);
  }
  /**
   * Finds the Allow List Proof PDA that keeps track of whether a user
   * has provided the correct Merkle Proof for the given Merkle Root.
   */
  merkleProof({
    merkleRoot,
    user,
    candyMachine,
    candyGuard,
    programs
  }) {
    const program = this.metaplex.programs().getCandyGuard(programs);
    return Pda.find(program.address, [import_buffer9.Buffer.from("allow_list", "utf8"), merkleRoot, user.toBuffer(), candyGuard.toBuffer(), candyMachine.toBuffer()]);
  }
  /**
   * Finds the Freeze PDA used as an escrow account by
   * the freezeSolPayment and freezeTokenPayment guards.
   */
  freezeEscrow({
    destination,
    candyMachine,
    candyGuard,
    programs
  }) {
    const program = this.metaplex.programs().getCandyGuard(programs);
    return Pda.find(program.address, [import_buffer9.Buffer.from("freeze_escrow", "utf8"), destination.toBuffer(), candyGuard.toBuffer(), candyMachine.toBuffer()]);
  }
};

// ../../node_modules/@metaplex-foundation/js/dist/esm/plugins/candyMachineModule/operations/findCandyGuardsByAuthority.mjs
var import_mpl_candy_guard10 = __toESM(require_src2(), 1);

// ../../node_modules/@metaplex-foundation/js/dist/esm/plugins/candyMachineModule/models/CandyGuard.mjs
var import_mpl_candy_guard9 = __toESM(require_src2(), 1);
var isCandyGuard = (value) => isModel("candyGuard", value);
function assertCandyGuard(value) {
  assertModel(isCandyGuard(value), `Expected CandyGuard model`);
}
var toCandyGuard = (account, metaplex) => {
  const candyGuardSerializer = createSerializerFromSolitaType(import_mpl_candy_guard9.CandyGuard, import_mpl_candy_guard9.candyGuardBeet.description);
  const parsedCandyGuard = deserializeAccount(account, candyGuardSerializer);
  const {
    guards,
    groups
  } = metaplex.candyMachines().guards().deserializeSettings(account.data.slice(CANDY_GUARD_DATA), account.owner);
  return {
    model: "candyGuard",
    address: new Pda(parsedCandyGuard.publicKey, parsedCandyGuard.data.bump),
    accountInfo: toAccountInfo(account),
    baseAddress: parsedCandyGuard.data.base,
    authorityAddress: parsedCandyGuard.data.authority,
    guards,
    groups
  };
};

// ../../node_modules/@metaplex-foundation/js/dist/esm/plugins/candyMachineModule/operations/findCandyGuardsByAuthority.mjs
var Key73 = "FindCandyGuardsByAuthorityOperation";
var findCandyGuardsByAuthorityOperation = _findCandyGuardsByAuthorityOperation;
function _findCandyGuardsByAuthorityOperation(input) {
  return {
    key: Key73,
    input
  };
}
_findCandyGuardsByAuthorityOperation.key = Key73;
var findCandyGuardsByAuthorityOperationHandler = {
  handle: (operation, metaplex, scope) => __async(void 0, null, function* () {
    const {
      authority
    } = operation.input;
    const {
      programs,
      commitment
    } = scope;
    const candyGuardProgram = metaplex.programs().getCandyGuard(programs);
    const query = import_mpl_candy_guard10.CandyGuard.gpaBuilder(candyGuardProgram.address).addFilter("authority", authority);
    const gpaBuilder = new GpaBuilder(metaplex, candyGuardProgram.address);
    gpaBuilder.mergeConfig(__spreadProps(__spreadValues({}, query.config), {
      commitment
    }));
    return gpaBuilder.getAndMap((account) => toCandyGuard(account, metaplex));
  })
};

// ../../node_modules/@metaplex-foundation/js/dist/esm/plugins/candyMachineModule/programs.mjs
var import_mpl_candy_guard11 = __toESM(require_src2(), 1);
var import_mpl_candy_machine_core7 = __toESM(require_src3(), 1);

// ../../node_modules/@metaplex-foundation/js/dist/esm/plugins/candyMachineModule/guards/default.mjs
var defaultCandyGuardNames = ["botTax", "solPayment", "tokenPayment", "startDate", "thirdPartySigner", "tokenGate", "gatekeeper", "endDate", "allowList", "mintLimit", "nftPayment", "redeemedAmount", "addressGate", "nftGate", "nftBurn", "tokenBurn", "freezeSolPayment", "freezeTokenPayment", "programGate"];
var emptyDefaultCandyGuardSettings = defaultCandyGuardNames.reduce((acc, name) => {
  acc[name] = null;
  return acc;
}, {});

// ../../node_modules/@metaplex-foundation/js/dist/esm/plugins/candyMachineModule/programs.mjs
init_index_browser_esm();
var candyMachineProgram = {
  name: "CandyMachineProgram",
  address: import_mpl_candy_machine_core7.PROGRAM_ID,
  errorResolver: (error2) => import_mpl_candy_machine_core7.cusper.errorFromProgramLogs(error2.logs, false)
};
var isCandyGuardProgram = (value) => typeof value === "object" && "availableGuards" in value;
function assertCandyGuardProgram(value) {
  assert2(isCandyGuardProgram(value), `Expected CandyGuardProgram model`);
}
var defaultCandyGuardProgram = {
  name: "CandyGuardProgram",
  address: import_mpl_candy_guard11.PROGRAM_ID,
  errorResolver: (error2) => import_mpl_candy_guard11.cusper.errorFromProgramLogs(error2.logs, false),
  availableGuards: defaultCandyGuardNames
};
var gatewayProgram = {
  name: "GatewayProgram",
  address: new PublicKey("gatem74V238djXdzWnJf94Wo1DcnuGkfijbf3AuBhfs")
};

// ../../node_modules/@metaplex-foundation/js/dist/esm/plugins/candyMachineModule/operations/findCandyMachineByAddress.mjs
init_index_browser_esm();
var Key74 = "FindCandyMachineByAddressOperation";
var findCandyMachineByAddressOperation = _findCandyMachineByAddressOperation;
function _findCandyMachineByAddressOperation(input) {
  return {
    key: Key74,
    input
  };
}
_findCandyMachineByAddressOperation.key = Key74;
var findCandyMachineByAddressOperationHandler = {
  handle(operation, metaplex, scope) {
    return __async(this, null, function* () {
      const {
        address
      } = operation.input;
      const {
        commitment,
        programs
      } = scope;
      const potentialCandyGuardAddress = metaplex.candyMachines().pdas().candyGuard({
        base: address,
        programs
      });
      const [candyMachineAccount, potentialCandyGuardAccount] = yield metaplex.rpc().getMultipleAccounts([address, potentialCandyGuardAddress], commitment);
      scope.throwIfCanceled();
      assertAccountExists(candyMachineAccount, "CandyMachine");
      const candyMachine = toCandyMachine(candyMachineAccount);
      const mintAuthority = candyMachine.mintAuthorityAddress;
      if (potentialCandyGuardAccount.exists && potentialCandyGuardAccount.publicKey.equals(mintAuthority)) {
        return __spreadProps(__spreadValues({}, candyMachine), {
          candyGuard: toCandyGuard(potentialCandyGuardAccount, metaplex)
        });
      }
      if (PublicKey.isOnCurve(mintAuthority)) {
        return candyMachine;
      }
      const mintAuthorityAccount = yield metaplex.rpc().getAccount(mintAuthority, commitment);
      scope.throwIfCanceled();
      try {
        assertAccountExists(mintAuthorityAccount);
        const program = metaplex.programs().get(mintAuthorityAccount.owner);
        assertCandyGuardProgram(program);
        return __spreadProps(__spreadValues({}, candyMachine), {
          candyGuard: toCandyGuard(mintAuthorityAccount, metaplex)
        });
      } catch (error2) {
        return candyMachine;
      }
    });
  }
};

// ../../node_modules/@metaplex-foundation/js/dist/esm/plugins/candyMachineModule/operations/findCandyGuardByAddress.mjs
var Key75 = "FindCandyGuardByAddressOperation";
var findCandyGuardByAddressOperation = _findCandyGuardByAddressOperation;
function _findCandyGuardByAddressOperation(input) {
  return {
    key: Key75,
    input
  };
}
_findCandyGuardByAddressOperation.key = Key75;
var findCandyGuardByAddressOperationHandler = {
  handle: (operation, metaplex, scope) => __async(void 0, null, function* () {
    const {
      address
    } = operation.input;
    const account = yield metaplex.rpc().getAccount(address, scope.commitment);
    assertAccountExists(account);
    return toCandyGuard(account, metaplex);
  })
};

// ../../node_modules/@metaplex-foundation/js/dist/esm/plugins/candyMachineModule/CandyMachineClient.mjs
var CandyMachineClient = class {
  constructor(metaplex) {
    this.metaplex = metaplex;
    this.guardsClient = new CandyMachineGuardsClient(metaplex);
  }
  /**
   * You may use the `guards()` client to access the default guards
   * available as well as register your own guards.
   *
   * ```ts
   * const guardsClient = metaplex.candyMachines().guards();
   * ```
   */
  guards() {
    return this.guardsClient;
  }
  /**
   * You may use the `builders()` client to access the
   * underlying Transaction Builders of this module.
   *
   * ```ts
   * const buildersClient = metaplex.candyMachines().builders();
   * ```
   */
  builders() {
    return new CandyMachineBuildersClient(this.metaplex);
  }
  /**
   * You may use the `pdas()` client to build PDAs related to this module.
   *
   * ```ts
   * const pdasClient = metaplex.candyMachines().pdas();
   * ```
   */
  pdas() {
    return new CandyMachinePdasClient(this.metaplex);
  }
  /** {@inheritDoc callCandyGuardRouteOperation} */
  callGuardRoute(input, options) {
    return this.metaplex.operations().execute(callCandyGuardRouteOperation(input), options);
  }
  /** {@inheritDoc createCandyMachineOperation} */
  create(input, options) {
    return this.metaplex.operations().execute(createCandyMachineOperation(input), options);
  }
  /** {@inheritDoc createCandyGuardOperation} */
  createCandyGuard(input, options) {
    return this.metaplex.operations().execute(createCandyGuardOperation(input), options);
  }
  /** {@inheritDoc deleteCandyMachineOperation} */
  delete(input, options) {
    return this.metaplex.operations().execute(deleteCandyMachineOperation(input), options);
  }
  /** {@inheritDoc deleteCandyGuardOperation} */
  deleteCandyGuard(input, options) {
    return this.metaplex.operations().execute(deleteCandyGuardOperation(input), options);
  }
  /** {@inheritDoc findCandyGuardsByAuthorityOperation} */
  findAllCandyGuardsByAuthority(input, options) {
    return this.metaplex.operations().execute(findCandyGuardsByAuthorityOperation(input), options);
  }
  /** {@inheritDoc findCandyMachineByAddressOperation} */
  findByAddress(input, options) {
    return this.metaplex.operations().execute(findCandyMachineByAddressOperation(input), options);
  }
  /** {@inheritDoc findCandyGuardByAddressOperation} */
  findCandyGuardByAddress(input, options) {
    return this.metaplex.operations().execute(findCandyGuardByAddressOperation(input), options);
  }
  /**
   * Helper method that fetches a Candy Guard via the base
   * address used to derived its PDA.
   *
   * ```ts
   * const candyGuard = await metaplex
   *   .candyMachines()
   *   .findCandyGuardByBaseAddress({ address: base });
   * ```
   */
  findCandyGuardByBaseAddress(input, options) {
    const address = this.pdas().candyGuard({
      base: input.address
    });
    return this.findCandyGuardByAddress(__spreadProps(__spreadValues({}, input), {
      address
    }), options);
  }
  /** {@inheritDoc insertCandyMachineItemsOperation} */
  insertItems(input, options) {
    return this.metaplex.operations().execute(insertCandyMachineItemsOperation(input), options);
  }
  /** {@inheritDoc mintFromCandyMachineOperation} */
  mint(input, options) {
    return this.metaplex.operations().execute(mintFromCandyMachineOperation(input), options);
  }
  /**
   * Helper method that refetches a given Candy Machine or Candy Guard.
   *
   * ```ts
   * const candyMachine = await metaplex.candyMachines().refresh(candyMachine);
   * const candyGuard = await metaplex.candyMachines().refresh(candyGuard);
   * ```
   */
  refresh(model, options) {
    return __async(this, null, function* () {
      const input = {
        address: toPublicKey(model)
      };
      const refreshedModel = isCandyMachine(model) ? yield this.findByAddress(input, options) : yield this.findCandyGuardByAddress(input, options);
      return refreshedModel;
    });
  }
  /** {@inheritDoc unwrapCandyGuardOperation} */
  unwrapCandyGuard(input, options) {
    return this.metaplex.operations().execute(unwrapCandyGuardOperation(input), options);
  }
  /** {@inheritDoc updateCandyMachineOperation} */
  update(input, options) {
    return this.metaplex.operations().execute(updateCandyMachineOperation(input), options);
  }
  /** {@inheritDoc updateCandyGuardOperation} */
  updateCandyGuard(input, options) {
    return this.metaplex.operations().execute(updateCandyGuardOperation(input), options);
  }
  /** {@inheritDoc updateCandyGuardAuthorityOperation} */
  updateCandyGuardAuthority(input, options) {
    return this.metaplex.operations().execute(updateCandyGuardAuthorityOperation(input), options);
  }
  /** {@inheritDoc wrapCandyGuardOperation} */
  wrapCandyGuard(input, options) {
    return this.metaplex.operations().execute(wrapCandyGuardOperation(input), options);
  }
};

// ../../node_modules/@metaplex-foundation/js/dist/esm/plugins/candyMachineModule/guards/freezeSolPayment.mjs
var import_buffer10 = __toESM(require_buffer2(), 1);
var beet5 = __toESM(require_beet(), 1);
var import_mpl_candy_guard12 = __toESM(require_src2(), 1);
var freezeSolPaymentGuardManifest = {
  name: "freezeSolPayment",
  settingsBytes: 40,
  settingsSerializer: mapSerializer(createSerializerFromBeet(import_mpl_candy_guard12.freezeSolPaymentBeet), (settings) => ({
    amount: lamports(settings.lamports),
    destination: settings.destination
  }), (settings) => ({
    lamports: settings.amount.basisPoints,
    destination: settings.destination
  })),
  mintSettingsParser: ({
    metaplex,
    settings,
    owner,
    payer,
    mint,
    candyMachine,
    candyGuard,
    programs
  }) => {
    if (!owner.equals(payer.publicKey)) {
      throw new MintOwnerMustBeMintPayerError("freezeSolPayment");
    }
    const freezeEscrow = metaplex.candyMachines().pdas().freezeEscrow({
      destination: settings.destination,
      candyMachine,
      candyGuard,
      programs
    });
    const nftAta = metaplex.tokens().pdas().associatedTokenAccount({
      mint: mint.publicKey,
      owner: payer.publicKey,
      programs
    });
    return {
      arguments: import_buffer10.Buffer.from([]),
      remainingAccounts: [{
        isSigner: false,
        address: freezeEscrow,
        isWritable: true
      }, {
        isSigner: false,
        address: nftAta,
        isWritable: false
      }]
    };
  },
  routeSettingsParser: (input) => {
    switch (input.routeSettings.path) {
      case "initialize":
        return initializeRouteInstruction(input);
      case "thaw":
        return thawRouteInstruction(input);
      case "unlockFunds":
        return unlockFundsRouteInstruction(input);
      default:
        throw new UnrecognizePathForRouteInstructionError(
          "freezeSolPayment",
          // @ts-ignore
          input.routeSettings.path
        );
    }
  }
};
function initializeRouteInstruction({
  metaplex,
  settings,
  routeSettings,
  candyMachine,
  candyGuard,
  programs
}) {
  assert2(routeSettings.path === "initialize");
  const freezeEscrow = metaplex.candyMachines().pdas().freezeEscrow({
    destination: settings.destination,
    candyMachine,
    candyGuard,
    programs
  });
  const systemProgram = metaplex.programs().getSystem(programs);
  const args = import_buffer10.Buffer.alloc(9);
  beet5.u8.write(args, 0, import_mpl_candy_guard12.FreezeInstruction.Initialize);
  beet5.u64.write(args, 1, routeSettings.period);
  return {
    arguments: args,
    remainingAccounts: [{
      isSigner: false,
      address: freezeEscrow,
      isWritable: true
    }, {
      isSigner: true,
      address: routeSettings.candyGuardAuthority,
      isWritable: false
    }, {
      isSigner: false,
      address: systemProgram.address,
      isWritable: false
    }]
  };
}
function thawRouteInstruction({
  metaplex,
  settings,
  routeSettings,
  candyMachine,
  candyGuard,
  programs
}) {
  assert2(routeSettings.path === "thaw");
  const freezeEscrow = metaplex.candyMachines().pdas().freezeEscrow({
    destination: settings.destination,
    candyMachine,
    candyGuard,
    programs
  });
  const nftAta = metaplex.tokens().pdas().associatedTokenAccount({
    mint: routeSettings.nftMint,
    owner: routeSettings.nftOwner,
    programs
  });
  const nftEdition = metaplex.nfts().pdas().masterEdition({
    mint: routeSettings.nftMint,
    programs
  });
  const tokenProgram2 = metaplex.programs().getToken(programs);
  const tokenMetadataProgram = metaplex.programs().getTokenMetadata(programs);
  const args = import_buffer10.Buffer.alloc(1);
  beet5.u8.write(args, 0, import_mpl_candy_guard12.FreezeInstruction.Thaw);
  return {
    arguments: args,
    remainingAccounts: [{
      isSigner: false,
      address: freezeEscrow,
      isWritable: true
    }, {
      isSigner: false,
      address: routeSettings.nftMint,
      isWritable: false
    }, {
      isSigner: false,
      address: routeSettings.nftOwner,
      isWritable: false
    }, {
      isSigner: false,
      address: nftAta,
      isWritable: true
    }, {
      isSigner: false,
      address: nftEdition,
      isWritable: false
    }, {
      isSigner: false,
      address: tokenProgram2.address,
      isWritable: false
    }, {
      isSigner: false,
      address: tokenMetadataProgram.address,
      isWritable: false
    }]
  };
}
function unlockFundsRouteInstruction({
  metaplex,
  settings,
  routeSettings,
  candyMachine,
  candyGuard,
  programs
}) {
  assert2(routeSettings.path === "unlockFunds");
  const freezeEscrow = metaplex.candyMachines().pdas().freezeEscrow({
    destination: settings.destination,
    candyMachine,
    candyGuard,
    programs
  });
  const systemProgram = metaplex.programs().getSystem(programs);
  const args = import_buffer10.Buffer.alloc(1);
  beet5.u8.write(args, 0, import_mpl_candy_guard12.FreezeInstruction.UnlockFunds);
  return {
    arguments: args,
    remainingAccounts: [{
      isSigner: false,
      address: freezeEscrow,
      isWritable: true
    }, {
      isSigner: true,
      address: routeSettings.candyGuardAuthority,
      isWritable: false
    }, {
      isSigner: false,
      address: settings.destination,
      isWritable: true
    }, {
      isSigner: false,
      address: systemProgram.address,
      isWritable: false
    }]
  };
}

// ../../node_modules/@metaplex-foundation/js/dist/esm/plugins/candyMachineModule/guards/freezeTokenPayment.mjs
var import_buffer11 = __toESM(require_buffer2(), 1);
var beet6 = __toESM(require_beet(), 1);
var import_mpl_candy_guard13 = __toESM(require_src2(), 1);
var freezeTokenPaymentGuardManifest = {
  name: "freezeTokenPayment",
  settingsBytes: 72,
  settingsSerializer: mapSerializer(createSerializerFromBeet(import_mpl_candy_guard13.freezeTokenPaymentBeet), (settings) => ({
    mint: settings.mint,
    amount: token(settings.amount),
    destinationAta: settings.destinationAta
  }), (settings) => ({
    mint: settings.mint,
    amount: settings.amount.basisPoints,
    destinationAta: settings.destinationAta
  })),
  mintSettingsParser: ({
    metaplex,
    settings,
    owner,
    payer,
    mint: nftMint,
    candyMachine,
    candyGuard,
    programs
  }) => {
    if (!owner.equals(payer.publicKey)) {
      throw new MintOwnerMustBeMintPayerError("freezeTokenPayment");
    }
    const freezeEscrow = metaplex.candyMachines().pdas().freezeEscrow({
      destination: settings.destinationAta,
      candyMachine,
      candyGuard,
      programs
    });
    const nftAta = metaplex.tokens().pdas().associatedTokenAccount({
      mint: nftMint.publicKey,
      owner: payer.publicKey
    });
    const tokenAddress = metaplex.tokens().pdas().associatedTokenAccount({
      mint: settings.mint,
      owner: payer.publicKey,
      programs
    });
    const freezeAta = metaplex.tokens().pdas().associatedTokenAccount({
      mint: settings.mint,
      owner: freezeEscrow,
      programs
    });
    return {
      arguments: import_buffer11.Buffer.from([]),
      remainingAccounts: [{
        isSigner: false,
        address: freezeEscrow,
        isWritable: true
      }, {
        isSigner: false,
        address: nftAta,
        isWritable: false
      }, {
        isSigner: false,
        address: tokenAddress,
        isWritable: true
      }, {
        isSigner: false,
        address: freezeAta,
        isWritable: true
      }]
    };
  },
  routeSettingsParser: (input) => {
    switch (input.routeSettings.path) {
      case "initialize":
        return initializeRouteInstruction2(input);
      case "thaw":
        return thawRouteInstruction2(input);
      case "unlockFunds":
        return unlockFundsRouteInstruction2(input);
      default:
        throw new UnrecognizePathForRouteInstructionError(
          "freezeTokenPayment",
          // @ts-ignore
          input.routeSettings.path
        );
    }
  }
};
function initializeRouteInstruction2({
  metaplex,
  settings,
  routeSettings,
  candyMachine,
  candyGuard,
  programs
}) {
  assert2(routeSettings.path === "initialize");
  const freezeEscrow = metaplex.candyMachines().pdas().freezeEscrow({
    destination: settings.destinationAta,
    candyMachine,
    candyGuard,
    programs
  });
  const freezeAta = metaplex.tokens().pdas().associatedTokenAccount({
    mint: settings.mint,
    owner: freezeEscrow,
    programs
  });
  const systemProgram = metaplex.programs().getSystem(programs);
  const tokenProgram2 = metaplex.programs().getToken(programs);
  const associatedTokenProgram2 = metaplex.programs().getAssociatedToken(programs);
  const args = import_buffer11.Buffer.alloc(9);
  beet6.u8.write(args, 0, import_mpl_candy_guard13.FreezeInstruction.Initialize);
  beet6.u64.write(args, 1, routeSettings.period);
  return {
    arguments: args,
    remainingAccounts: [{
      isSigner: false,
      address: freezeEscrow,
      isWritable: true
    }, {
      isSigner: true,
      address: routeSettings.candyGuardAuthority,
      isWritable: false
    }, {
      isSigner: false,
      address: systemProgram.address,
      isWritable: false
    }, {
      isSigner: false,
      address: freezeAta,
      isWritable: true
    }, {
      isSigner: false,
      address: settings.mint,
      isWritable: false
    }, {
      isSigner: false,
      address: tokenProgram2.address,
      isWritable: false
    }, {
      isSigner: false,
      address: associatedTokenProgram2.address,
      isWritable: false
    }, {
      isSigner: false,
      address: settings.destinationAta,
      isWritable: true
    }]
  };
}
function thawRouteInstruction2({
  metaplex,
  settings,
  routeSettings,
  candyMachine,
  candyGuard,
  programs
}) {
  assert2(routeSettings.path === "thaw");
  const freezeEscrow = metaplex.candyMachines().pdas().freezeEscrow({
    destination: settings.destinationAta,
    candyMachine,
    candyGuard,
    programs
  });
  const nftAta = metaplex.tokens().pdas().associatedTokenAccount({
    mint: routeSettings.nftMint,
    owner: routeSettings.nftOwner,
    programs
  });
  const nftEdition = metaplex.nfts().pdas().masterEdition({
    mint: routeSettings.nftMint,
    programs
  });
  const tokenProgram2 = metaplex.programs().getToken(programs);
  const tokenMetadataProgram = metaplex.programs().getTokenMetadata(programs);
  const args = import_buffer11.Buffer.alloc(1);
  beet6.u8.write(args, 0, import_mpl_candy_guard13.FreezeInstruction.Thaw);
  return {
    arguments: args,
    remainingAccounts: [{
      isSigner: false,
      address: freezeEscrow,
      isWritable: true
    }, {
      isSigner: false,
      address: routeSettings.nftMint,
      isWritable: false
    }, {
      isSigner: false,
      address: routeSettings.nftOwner,
      isWritable: false
    }, {
      isSigner: false,
      address: nftAta,
      isWritable: true
    }, {
      isSigner: false,
      address: nftEdition,
      isWritable: false
    }, {
      isSigner: false,
      address: tokenProgram2.address,
      isWritable: false
    }, {
      isSigner: false,
      address: tokenMetadataProgram.address,
      isWritable: false
    }]
  };
}
function unlockFundsRouteInstruction2({
  metaplex,
  settings,
  routeSettings,
  candyMachine,
  candyGuard,
  programs
}) {
  assert2(routeSettings.path === "unlockFunds");
  const freezeEscrow = metaplex.candyMachines().pdas().freezeEscrow({
    destination: settings.destinationAta,
    candyMachine,
    candyGuard,
    programs
  });
  const freezeAta = metaplex.tokens().pdas().associatedTokenAccount({
    mint: settings.mint,
    owner: freezeEscrow,
    programs
  });
  const systemProgram = metaplex.programs().getSystem(programs);
  const tokenProgram2 = metaplex.programs().getToken(programs);
  const args = import_buffer11.Buffer.alloc(1);
  beet6.u8.write(args, 0, import_mpl_candy_guard13.FreezeInstruction.UnlockFunds);
  return {
    arguments: args,
    remainingAccounts: [{
      isSigner: false,
      address: freezeEscrow,
      isWritable: true
    }, {
      isSigner: true,
      address: routeSettings.candyGuardAuthority,
      isWritable: false
    }, {
      isSigner: false,
      address: freezeAta,
      isWritable: true
    }, {
      isSigner: false,
      address: settings.destinationAta,
      isWritable: true
    }, {
      isSigner: false,
      address: tokenProgram2.address,
      isWritable: false
    }, {
      isSigner: false,
      address: systemProgram.address,
      isWritable: false
    }]
  };
}

// ../../node_modules/@metaplex-foundation/js/dist/esm/plugins/candyMachineModule/guards/botTax.mjs
var import_mpl_candy_guard14 = __toESM(require_src2(), 1);
var botTaxGuardManifest = {
  name: "botTax",
  settingsBytes: 9,
  settingsSerializer: mapSerializer(createSerializerFromBeet(import_mpl_candy_guard14.botTaxBeet), (settings) => __spreadProps(__spreadValues({}, settings), {
    lamports: lamports(settings.lamports)
  }), (settings) => __spreadProps(__spreadValues({}, settings), {
    lamports: settings.lamports.basisPoints
  }))
};

// ../../node_modules/@metaplex-foundation/js/dist/esm/plugins/candyMachineModule/guards/solPayment.mjs
var import_buffer12 = __toESM(require_buffer2(), 1);
var import_mpl_candy_guard15 = __toESM(require_src2(), 1);
var solPaymentGuardManifest = {
  name: "solPayment",
  settingsBytes: 40,
  settingsSerializer: mapSerializer(createSerializerFromBeet(import_mpl_candy_guard15.solPaymentBeet), (settings) => __spreadProps(__spreadValues({}, settings), {
    amount: lamports(settings.lamports)
  }), (settings) => __spreadProps(__spreadValues({}, settings), {
    lamports: settings.amount.basisPoints
  })),
  mintSettingsParser: ({
    settings
  }) => {
    return {
      arguments: import_buffer12.Buffer.from([]),
      remainingAccounts: [{
        isSigner: false,
        address: settings.destination,
        isWritable: true
      }]
    };
  }
};

// ../../node_modules/@metaplex-foundation/js/dist/esm/plugins/candyMachineModule/guards/tokenPayment.mjs
var import_buffer13 = __toESM(require_buffer2(), 1);
var import_mpl_candy_guard16 = __toESM(require_src2(), 1);
var tokenPaymentGuardManifest = {
  name: "tokenPayment",
  settingsBytes: 72,
  settingsSerializer: mapSerializer(createSerializerFromBeet(import_mpl_candy_guard16.tokenPaymentBeet), (settings) => ({
    mint: settings.mint,
    amount: token(settings.amount),
    destinationAta: settings.destinationAta
  }), (settings) => ({
    mint: settings.mint,
    amount: settings.amount.basisPoints,
    destinationAta: settings.destinationAta
  })),
  mintSettingsParser: ({
    metaplex,
    settings,
    payer,
    programs
  }) => {
    const tokenAddress = metaplex.tokens().pdas().associatedTokenAccount({
      mint: settings.mint,
      owner: payer.publicKey,
      programs
    });
    return {
      arguments: import_buffer13.Buffer.from([]),
      remainingAccounts: [{
        isSigner: false,
        address: tokenAddress,
        isWritable: true
      }, {
        isSigner: false,
        address: settings.destinationAta,
        isWritable: true
      }]
    };
  }
};

// ../../node_modules/@metaplex-foundation/js/dist/esm/plugins/candyMachineModule/guards/startDate.mjs
var import_mpl_candy_guard17 = __toESM(require_src2(), 1);
var startDateGuardManifest = {
  name: "startDate",
  settingsBytes: 8,
  settingsSerializer: mapSerializer(createSerializerFromBeet(import_mpl_candy_guard17.startDateBeet), (settings) => ({
    date: toDateTime(settings.date)
  }), (settings) => settings)
};

// ../../node_modules/@metaplex-foundation/js/dist/esm/plugins/candyMachineModule/guards/thirdPartySigner.mjs
var import_buffer14 = __toESM(require_buffer2(), 1);
var import_mpl_candy_guard18 = __toESM(require_src2(), 1);
var thirdPartySignerGuardManifest = {
  name: "thirdPartySigner",
  settingsBytes: 32,
  settingsSerializer: createSerializerFromBeet(import_mpl_candy_guard18.thirdPartySignerBeet),
  mintSettingsParser: ({
    mintSettings
  }) => {
    if (!mintSettings) {
      throw new GuardMintSettingsMissingError("thirdPartySigner");
    }
    return {
      arguments: import_buffer14.Buffer.from([]),
      remainingAccounts: [{
        isSigner: true,
        address: mintSettings.signer,
        isWritable: true
      }]
    };
  }
};

// ../../node_modules/@metaplex-foundation/js/dist/esm/plugins/candyMachineModule/guards/tokenGate.mjs
var import_mpl_candy_guard19 = __toESM(require_src2(), 1);
var tokenGateGuardManifest = {
  name: "tokenGate",
  settingsBytes: 40,
  settingsSerializer: mapSerializer(createSerializerFromBeet(import_mpl_candy_guard19.tokenGateBeet), (settings) => __spreadProps(__spreadValues({}, settings), {
    amount: token(settings.amount)
  }), (settings) => __spreadProps(__spreadValues({}, settings), {
    amount: settings.amount.basisPoints
  })),
  mintSettingsParser: ({
    metaplex,
    settings,
    payer,
    programs
  }) => {
    const tokenAccount = metaplex.tokens().pdas().associatedTokenAccount({
      mint: settings.mint,
      owner: payer.publicKey,
      programs
    });
    return {
      arguments: Buffer.from([]),
      remainingAccounts: [{
        isSigner: false,
        address: tokenAccount,
        isWritable: false
      }]
    };
  }
};

// ../../node_modules/@metaplex-foundation/js/dist/esm/plugins/candyMachineModule/guards/gatekeeper.mjs
var import_buffer15 = __toESM(require_buffer2(), 1);
var import_mpl_candy_guard20 = __toESM(require_src2(), 1);
var gatekeeperGuardManifest = {
  name: "gatekeeper",
  settingsBytes: 33,
  settingsSerializer: mapSerializer(createSerializerFromBeet(import_mpl_candy_guard20.gatekeeperBeet), (settings) => __spreadProps(__spreadValues({}, settings), {
    network: settings.gatekeeperNetwork
  }), (settings) => __spreadProps(__spreadValues({}, settings), {
    gatekeeperNetwork: settings.network
  })),
  mintSettingsParser: ({
    metaplex,
    settings,
    mintSettings,
    payer,
    programs
  }) => {
    const gatewayProgram2 = metaplex.programs().getGateway(programs);
    const tokenAccount = mintSettings?.tokenAccount ?? Pda.find(gatewayProgram2.address, [payer.publicKey.toBuffer(), import_buffer15.Buffer.from("gateway"), import_buffer15.Buffer.from([0, 0, 0, 0, 0, 0, 0, 0]), settings.network.toBuffer()]);
    const remainingAccounts = [{
      isSigner: false,
      address: tokenAccount,
      isWritable: true
    }];
    if (settings.expireOnUse) {
      const expireAccount = Pda.find(gatewayProgram2.address, [settings.network.toBuffer(), import_buffer15.Buffer.from("expire")]);
      remainingAccounts.push({
        isSigner: false,
        address: gatewayProgram2.address,
        isWritable: false
      });
      remainingAccounts.push({
        isSigner: false,
        address: expireAccount,
        isWritable: false
      });
    }
    return {
      arguments: import_buffer15.Buffer.from([]),
      remainingAccounts
    };
  }
};

// ../../node_modules/@metaplex-foundation/js/dist/esm/plugins/candyMachineModule/guards/endDate.mjs
var import_mpl_candy_guard21 = __toESM(require_src2(), 1);
var endDateGuardManifest = {
  name: "endDate",
  settingsBytes: 8,
  settingsSerializer: mapSerializer(createSerializerFromBeet(import_mpl_candy_guard21.endDateBeet), (settings) => ({
    date: toDateTime(settings.date)
  }), (settings) => settings)
};

// ../../node_modules/@metaplex-foundation/js/dist/esm/plugins/candyMachineModule/guards/allowList.mjs
var import_buffer16 = __toESM(require_buffer2(), 1);
var beet7 = __toESM(require_beet(), 1);
var import_mpl_candy_guard22 = __toESM(require_src2(), 1);
var allowListGuardManifest = {
  name: "allowList",
  settingsBytes: 32,
  settingsSerializer: mapSerializer(createSerializerFromBeet(import_mpl_candy_guard22.allowListBeet), (settings) => ({
    merkleRoot: new Uint8Array(settings.merkleRoot)
  }), (settings) => ({
    merkleRoot: Array.from(settings.merkleRoot)
  })),
  mintSettingsParser: ({
    metaplex,
    settings,
    payer,
    candyMachine,
    candyGuard
  }) => {
    return {
      arguments: import_buffer16.Buffer.from([]),
      remainingAccounts: [{
        isSigner: false,
        isWritable: false,
        address: metaplex.candyMachines().pdas().merkleProof({
          merkleRoot: settings.merkleRoot,
          user: payer.publicKey,
          candyMachine,
          candyGuard
        })
      }]
    };
  },
  routeSettingsParser: ({
    metaplex,
    settings,
    routeSettings,
    programs,
    candyMachine,
    candyGuard,
    payer
  }) => {
    const proof = routeSettings.merkleProof;
    const vectorSize = import_buffer16.Buffer.alloc(4);
    beet7.u32.write(vectorSize, 0, proof.length);
    return {
      arguments: import_buffer16.Buffer.concat([vectorSize, ...proof]),
      remainingAccounts: [{
        isSigner: false,
        isWritable: true,
        address: metaplex.candyMachines().pdas().merkleProof({
          merkleRoot: settings.merkleRoot,
          user: payer.publicKey,
          candyMachine,
          candyGuard
        })
      }, {
        isSigner: false,
        isWritable: false,
        address: metaplex.programs().getSystem(programs).address
      }]
    };
  }
};

// ../../node_modules/@metaplex-foundation/js/dist/esm/plugins/candyMachineModule/guards/mintLimit.mjs
var import_buffer17 = __toESM(require_buffer2(), 1);
var import_mpl_candy_guard23 = __toESM(require_src2(), 1);
var mintLimitGuardManifest = {
  name: "mintLimit",
  settingsBytes: 3,
  settingsSerializer: createSerializerFromBeet(import_mpl_candy_guard23.mintLimitBeet),
  mintSettingsParser: ({
    metaplex,
    settings,
    payer,
    candyMachine,
    candyGuard,
    programs
  }) => {
    const counterPda = metaplex.candyMachines().pdas().mintLimitCounter({
      id: settings.id,
      user: payer.publicKey,
      candyMachine,
      candyGuard,
      programs
    });
    return {
      arguments: import_buffer17.Buffer.from([]),
      remainingAccounts: [{
        address: counterPda,
        isSigner: false,
        isWritable: true
      }]
    };
  }
};

// ../../node_modules/@metaplex-foundation/js/dist/esm/plugins/candyMachineModule/guards/nftPayment.mjs
var import_mpl_candy_guard24 = __toESM(require_src2(), 1);
var nftPaymentGuardManifest = {
  name: "nftPayment",
  settingsBytes: 64,
  settingsSerializer: createSerializerFromBeet(import_mpl_candy_guard24.nftPaymentBeet),
  mintSettingsParser: ({
    metaplex,
    settings,
    mintSettings,
    payer,
    programs
  }) => {
    if (!mintSettings) {
      throw new GuardMintSettingsMissingError("nftPayment");
    }
    const associatedTokenProgram2 = metaplex.programs().getAssociatedToken(programs);
    const nftTokenAccount = mintSettings.tokenAccount ?? metaplex.tokens().pdas().associatedTokenAccount({
      mint: mintSettings.mint,
      owner: payer.publicKey,
      programs
    });
    const nftMetadata = metaplex.nfts().pdas().metadata({
      mint: mintSettings.mint,
      programs
    });
    const destinationAta = metaplex.tokens().pdas().associatedTokenAccount({
      mint: mintSettings.mint,
      owner: settings.destination,
      programs
    });
    return {
      arguments: Buffer.from([]),
      remainingAccounts: [{
        isSigner: false,
        address: nftTokenAccount,
        isWritable: true
      }, {
        isSigner: false,
        address: nftMetadata,
        isWritable: true
      }, {
        isSigner: false,
        address: mintSettings.mint,
        isWritable: false
      }, {
        isSigner: false,
        address: settings.destination,
        isWritable: false
      }, {
        isSigner: false,
        address: destinationAta,
        isWritable: true
      }, {
        isSigner: false,
        address: associatedTokenProgram2.address,
        isWritable: false
      }]
    };
  }
};

// ../../node_modules/@metaplex-foundation/js/dist/esm/plugins/candyMachineModule/guards/redeemedAmount.mjs
var import_mpl_candy_guard25 = __toESM(require_src2(), 1);
var redeemedAmountGuardManifest = {
  name: "redeemedAmount",
  settingsBytes: 8,
  settingsSerializer: mapSerializer(createSerializerFromBeet(import_mpl_candy_guard25.redeemedAmountBeet), (settings) => ({
    maximum: toBigNumber(settings.maximum)
  }), (settings) => settings)
};

// ../../node_modules/@metaplex-foundation/js/dist/esm/plugins/candyMachineModule/guards/addressGate.mjs
var import_mpl_candy_guard26 = __toESM(require_src2(), 1);
var addressGateGuardManifest = {
  name: "addressGate",
  settingsBytes: 32,
  settingsSerializer: createSerializerFromBeet(import_mpl_candy_guard26.addressGateBeet)
};

// ../../node_modules/@metaplex-foundation/js/dist/esm/plugins/candyMachineModule/guards/nftGate.mjs
var import_mpl_candy_guard27 = __toESM(require_src2(), 1);
var nftGateGuardManifest = {
  name: "nftGate",
  settingsBytes: 32,
  settingsSerializer: createSerializerFromBeet(import_mpl_candy_guard27.nftGateBeet),
  mintSettingsParser: ({
    metaplex,
    mintSettings,
    payer,
    programs
  }) => {
    if (!mintSettings) {
      throw new GuardMintSettingsMissingError("nftGate");
    }
    const tokenAccount = mintSettings.tokenAccount ?? metaplex.tokens().pdas().associatedTokenAccount({
      mint: mintSettings.mint,
      owner: payer.publicKey,
      programs
    });
    const tokenMetadata = metaplex.nfts().pdas().metadata({
      mint: mintSettings.mint,
      programs
    });
    return {
      arguments: Buffer.from([]),
      remainingAccounts: [{
        isSigner: false,
        address: tokenAccount,
        isWritable: false
      }, {
        isSigner: false,
        address: tokenMetadata,
        isWritable: false
      }]
    };
  }
};

// ../../node_modules/@metaplex-foundation/js/dist/esm/plugins/candyMachineModule/guards/nftBurn.mjs
var import_mpl_candy_guard28 = __toESM(require_src2(), 1);
var nftBurnGuardManifest = {
  name: "nftBurn",
  settingsBytes: 32,
  settingsSerializer: createSerializerFromBeet(import_mpl_candy_guard28.nftBurnBeet),
  mintSettingsParser: ({
    metaplex,
    settings,
    mintSettings,
    payer,
    programs
  }) => {
    if (!mintSettings) {
      throw new GuardMintSettingsMissingError("nftBurn");
    }
    const tokenAccount = mintSettings.tokenAccount ?? metaplex.tokens().pdas().associatedTokenAccount({
      mint: mintSettings.mint,
      owner: payer.publicKey,
      programs
    });
    const tokenMetadata = metaplex.nfts().pdas().metadata({
      mint: mintSettings.mint,
      programs
    });
    const tokenEdition = metaplex.nfts().pdas().masterEdition({
      mint: mintSettings.mint,
      programs
    });
    const mintCollectionMetadata = metaplex.nfts().pdas().metadata({
      mint: settings.requiredCollection,
      programs
    });
    return {
      arguments: Buffer.from([]),
      remainingAccounts: [{
        isSigner: false,
        address: tokenAccount,
        isWritable: true
      }, {
        isSigner: false,
        address: tokenMetadata,
        isWritable: true
      }, {
        isSigner: false,
        address: tokenEdition,
        isWritable: true
      }, {
        isSigner: false,
        address: mintSettings.mint,
        isWritable: true
      }, {
        isSigner: false,
        address: mintCollectionMetadata,
        isWritable: true
      }]
    };
  }
};

// ../../node_modules/@metaplex-foundation/js/dist/esm/plugins/candyMachineModule/guards/tokenBurn.mjs
var import_mpl_candy_guard29 = __toESM(require_src2(), 1);
var tokenBurnGuardManifest = {
  name: "tokenBurn",
  settingsBytes: 40,
  settingsSerializer: mapSerializer(createSerializerFromBeet(import_mpl_candy_guard29.tokenBurnBeet), (settings) => __spreadProps(__spreadValues({}, settings), {
    amount: token(settings.amount)
  }), (settings) => __spreadProps(__spreadValues({}, settings), {
    amount: settings.amount.basisPoints
  })),
  mintSettingsParser: ({
    metaplex,
    settings,
    payer,
    programs
  }) => {
    const tokenAccount = metaplex.tokens().pdas().associatedTokenAccount({
      mint: settings.mint,
      owner: payer.publicKey,
      programs
    });
    return {
      arguments: Buffer.from([]),
      remainingAccounts: [{
        isSigner: false,
        address: tokenAccount,
        isWritable: true
      }, {
        isSigner: false,
        address: settings.mint,
        isWritable: true
      }]
    };
  }
};

// ../../node_modules/@metaplex-foundation/js/dist/esm/plugins/candyMachineModule/guards/programGate.mjs
var import_mpl_candy_guard30 = __toESM(require_src2(), 1);
var beet8 = __toESM(require_beet(), 1);
var MAXIMUM_SIZE = 5;
var SETTINGS_BYTES = 4 + MAXIMUM_SIZE * 32;
var programGateGuardManifest = {
  name: "programGate",
  settingsBytes: SETTINGS_BYTES,
  settingsSerializer: {
    description: import_mpl_candy_guard30.programGateBeet.description,
    serialize: (value) => {
      if (value.additional.length >= MAXIMUM_SIZE) {
        throw new MaximumOfFiveAdditionalProgramsError();
      }
      const fixedBeet = import_mpl_candy_guard30.programGateBeet.toFixedFromValue(value);
      const writer = new beet8.BeetWriter(fixedBeet.byteSize);
      writer.write(fixedBeet, value);
      const bufferFullSize = Buffer.alloc(SETTINGS_BYTES);
      bufferFullSize.fill(writer.buffer);
      return bufferFullSize;
    },
    deserialize: (buffer2, offset) => {
      const fixedBeet = import_mpl_candy_guard30.programGateBeet.toFixedFromData(buffer2, offset ?? 0);
      const reader = new beet8.BeetReader(buffer2, offset ?? 0);
      const value = reader.read(fixedBeet);
      return [value, reader.offset];
    }
  }
};

// ../../node_modules/@metaplex-foundation/js/dist/esm/plugins/candyMachineModule/plugin.mjs
var candyMachineModule = () => ({
  install(metaplex) {
    const client = new CandyMachineClient(metaplex);
    metaplex.candyMachines = () => client;
    metaplex.programs().register(candyMachineProgram);
    metaplex.programs().getCandyMachine = function(programs) {
      return this.get(candyMachineProgram.name, programs);
    };
    metaplex.programs().register(defaultCandyGuardProgram);
    metaplex.programs().getCandyGuard = function(programs) {
      return this.get(defaultCandyGuardProgram.name, programs);
    };
    metaplex.programs().register(gatewayProgram);
    metaplex.programs().getGateway = function(programs) {
      return this.get(gatewayProgram.name, programs);
    };
    client.guards().register(botTaxGuardManifest);
    client.guards().register(solPaymentGuardManifest);
    client.guards().register(tokenPaymentGuardManifest);
    client.guards().register(startDateGuardManifest);
    client.guards().register(thirdPartySignerGuardManifest);
    client.guards().register(tokenGateGuardManifest);
    client.guards().register(gatekeeperGuardManifest);
    client.guards().register(endDateGuardManifest);
    client.guards().register(allowListGuardManifest);
    client.guards().register(mintLimitGuardManifest);
    client.guards().register(nftPaymentGuardManifest);
    client.guards().register(redeemedAmountGuardManifest);
    client.guards().register(addressGateGuardManifest);
    client.guards().register(nftGateGuardManifest);
    client.guards().register(nftBurnGuardManifest);
    client.guards().register(tokenBurnGuardManifest);
    client.guards().register(freezeSolPaymentGuardManifest);
    client.guards().register(freezeTokenPaymentGuardManifest);
    client.guards().register(programGateGuardManifest);
    const op = metaplex.operations();
    op.register(callCandyGuardRouteOperation, callCandyGuardRouteOperationHandler);
    op.register(createCandyGuardOperation, createCandyGuardOperationHandler);
    op.register(createCandyMachineOperation, createCandyMachineOperationHandler);
    op.register(deleteCandyGuardOperation, deleteCandyGuardOperationHandler);
    op.register(deleteCandyMachineOperation, deleteCandyMachineOperationHandler);
    op.register(findCandyGuardByAddressOperation, findCandyGuardByAddressOperationHandler);
    op.register(findCandyGuardsByAuthorityOperation, findCandyGuardsByAuthorityOperationHandler);
    op.register(findCandyMachineByAddressOperation, findCandyMachineByAddressOperationHandler);
    op.register(insertCandyMachineItemsOperation, insertCandyMachineItemsOperationHandler);
    op.register(mintFromCandyMachineOperation, mintFromCandyMachineOperationHandler);
    op.register(unwrapCandyGuardOperation, unwrapCandyGuardOperationHandler);
    op.register(updateCandyGuardAuthorityOperation, updateCandyGuardAuthorityOperationHandler);
    op.register(updateCandyGuardOperation, updateCandyGuardOperationHandler);
    op.register(updateCandyMachineOperation, updateCandyMachineOperationHandler);
    op.register(wrapCandyGuardOperation, wrapCandyGuardOperationHandler);
  }
});

// ../../node_modules/@metaplex-foundation/js/dist/esm/plugins/auctionHouseModule/plugin.mjs
var import_mpl_auction_house14 = __toESM(require_mpl_auction_house(), 1);

// ../../node_modules/@metaplex-foundation/js/dist/esm/plugins/auctionHouseModule/operations/createAuctionHouse.mjs
var import_mpl_auction_house2 = __toESM(require_mpl_auction_house(), 1);

// ../../node_modules/@metaplex-foundation/js/dist/esm/plugins/auctionHouseModule/constants.mjs
var import_mpl_auction_house = __toESM(require_mpl_auction_house(), 1);
var AUCTIONEER_PRICE = toBigNumber("18446744073709551615");
var AUCTIONEER_ALL_SCOPES = [import_mpl_auction_house.AuthorityScope.Deposit, import_mpl_auction_house.AuthorityScope.Buy, import_mpl_auction_house.AuthorityScope.PublicBuy, import_mpl_auction_house.AuthorityScope.ExecuteSale, import_mpl_auction_house.AuthorityScope.Sell, import_mpl_auction_house.AuthorityScope.Cancel, import_mpl_auction_house.AuthorityScope.Withdraw];

// ../../node_modules/@metaplex-foundation/js/dist/esm/plugins/auctionHouseModule/operations/createAuctionHouse.mjs
var Key76 = "CreateAuctionHouseOperation";
var createAuctionHouseOperation = useOperation(Key76);
var createAuctionHouseOperationHandler = {
  handle(operation, metaplex, scope) {
    return __async(this, null, function* () {
      const builder = createAuctionHouseBuilder(metaplex, operation.input, scope);
      const confirmOptions = makeConfirmOptionsFinalizedOnMainnet(metaplex, scope.confirmOptions);
      const output = yield builder.sendAndConfirm(metaplex, confirmOptions);
      scope.throwIfCanceled();
      const auctionHouse = yield metaplex.auctionHouse().findByAddress({
        address: output.auctionHouseAddress,
        auctioneerAuthority: operation.input.auctioneerAuthority
      }, scope);
      return __spreadProps(__spreadValues({}, output), {
        auctionHouse
      });
    });
  }
};
var createAuctionHouseBuilder = (metaplex, params, options = {}) => {
  const {
    programs,
    payer = metaplex.rpc().getDefaultFeePayer()
  } = options;
  const canChangeSalePrice = params.canChangeSalePrice ?? false;
  const requiresSignOff = params.requiresSignOff ?? canChangeSalePrice;
  const authority = params.authority ?? metaplex.identity();
  const treasuryMint = params.treasuryMint ?? WRAPPED_SOL_MINT;
  const treasuryWithdrawalDestinationOwner = params.treasuryWithdrawalDestinationOwner ?? metaplex.identity().publicKey;
  const feeWithdrawalDestination = params.feeWithdrawalDestination ?? metaplex.identity().publicKey;
  if (params.auctioneerAuthority && !isSigner(authority)) {
    throw new ExpectedSignerError("authority", "PublicKey", "You are trying to delegate to an Auctioneer authority which requires the Auction House authority to sign a transaction. But you provided the Auction House authority as a Public Key.");
  }
  const auctionHouse = metaplex.auctionHouse().pdas().auctionHouse({
    creator: toPublicKey(authority),
    treasuryMint,
    programs
  });
  const auctionHouseFeeAccount = metaplex.auctionHouse().pdas().fee({
    auctionHouse,
    programs
  });
  const auctionHouseTreasury = metaplex.auctionHouse().pdas().treasury({
    auctionHouse,
    programs
  });
  const treasuryWithdrawalDestination = treasuryMint.equals(WRAPPED_SOL_MINT) ? treasuryWithdrawalDestinationOwner : metaplex.tokens().pdas().associatedTokenAccount({
    mint: treasuryMint,
    owner: treasuryWithdrawalDestinationOwner,
    programs
  });
  return TransactionBuilder.make().setFeePayer(payer).setContext({
    auctionHouseAddress: auctionHouse,
    auctionHouseFeeAccountAddress: auctionHouseFeeAccount,
    auctionHouseTreasuryAddress: auctionHouseTreasury,
    treasuryWithdrawalDestinationAddress: treasuryWithdrawalDestination
  }).add({
    instruction: (0, import_mpl_auction_house2.createCreateAuctionHouseInstruction)({
      treasuryMint,
      payer: payer.publicKey,
      authority: toPublicKey(authority),
      feeWithdrawalDestination,
      treasuryWithdrawalDestination,
      treasuryWithdrawalDestinationOwner,
      auctionHouse,
      auctionHouseFeeAccount,
      auctionHouseTreasury
    }, {
      bump: auctionHouse.bump,
      feePayerBump: auctionHouseFeeAccount.bump,
      treasuryBump: auctionHouseTreasury.bump,
      sellerFeeBasisPoints: params.sellerFeeBasisPoints,
      requiresSignOff,
      canChangeSalePrice
    }),
    signers: [payer],
    key: params.instructionKey ?? "createAuctionHouse"
  }).when(Boolean(params.auctioneerAuthority), (builder) => {
    const auctioneerAuthority = params.auctioneerAuthority;
    return builder.add({
      instruction: (0, import_mpl_auction_house2.createDelegateAuctioneerInstruction)({
        auctionHouse,
        authority: toPublicKey(authority),
        auctioneerAuthority,
        ahAuctioneerPda: metaplex.auctionHouse().pdas().auctioneer({
          auctionHouse,
          auctioneerAuthority,
          programs
        })
      }, {
        scopes: params.auctioneerScopes ?? AUCTIONEER_ALL_SCOPES
      }),
      signers: [authority],
      key: params.delegateAuctioneerInstructionKey ?? "delegateAuctioneer"
    });
  });
};

// ../../node_modules/@metaplex-foundation/js/dist/esm/plugins/auctionHouseModule/operations/createBid.mjs
var import_mpl_auction_house3 = __toESM(require_mpl_auction_house(), 1);
init_index_browser_esm();

// ../../node_modules/@metaplex-foundation/js/dist/esm/plugins/auctionHouseModule/errors.mjs
var AuctionHouseError = class extends MetaplexError {
  constructor(message, cause) {
    super(message, "plugin", "Auction House", cause);
    _defineProperty(this, "name", "AuctionHouseError");
  }
};
var TreasuryDestinationOwnerRequiredError = class extends AuctionHouseError {
  constructor() {
    const message = 'You are trying to update an Auction House which uses a custom token as a treasury. You have not provided the "treasuryWithdrawalDestinationOwner" because you do not wish to change it. However, the Auction House account does not keep track of that information so we cannot prefill that for you. Thus, if you wish to keep the same treasury withdrawal, you must provide it explicilty. Please provide the current "treasuryWithdrawalDestinationOwner" parameter so you can update the other fields.Note that we keep that parameter optional because no Associate Token Account is needed for Auction Houses whose treasury is the native SOL.';
    super(message);
    _defineProperty(this, "name", "TreasuryDestinationOwnerRequiredError");
  }
};
var AuctioneerAuthorityRequiredError = class extends AuctionHouseError {
  constructor() {
    const message = 'You are trying to use or fetch an Auction House which delegates to an Auctioneer authority but you have not provided the required "auctioneerAuthority" parameter. Please provide the "auctioneerAuthority" parameter so the SDK can figure out which Auctioneer instance to interact with. Note that we keep that parameter optional because no Auctioneer Authority is needed for Auction Houses that use native Auction House behavior.';
    super(message);
    _defineProperty(this, "name", "AuctioneerAuthorityRequiredError");
  }
};
var AuctioneerPartialSaleNotSupportedError = class extends AuctionHouseError {
  constructor() {
    const message = "You are trying to execute a partial sale, but partial orders are not supported in Auctioneer. Any Partial Buys must be executed against a sale listed through the Auction House Sale.";
    super(message);
    _defineProperty(this, "name", "AuctioneerPartialSaleNotSupportedError");
  }
};
var BidAndListingHaveDifferentAuctionHousesError = class extends AuctionHouseError {
  constructor() {
    const message = 'You are trying to use a Bid and a Listing from different Auction Houses. Please provide both Bid and Listing from the same Auction House. They should have the same "auctionHouse.address".';
    super(message);
    _defineProperty(this, "name", "BidAndListingHaveDifferentAuctionHousesError");
  }
};
var BidAndListingHaveDifferentMintsError = class extends AuctionHouseError {
  constructor() {
    const message = 'You are trying to execute a sale using a Bid and a Listing that have different mint addresses. Please provide a Bid and a Listing on the same asset in order to execute the sale. They should have the same "asset.address".';
    super(message);
    _defineProperty(this, "name", "BidAndListingHaveDifferentMintsError");
  }
};
var CanceledBidIsNotAllowedError = class extends AuctionHouseError {
  constructor() {
    const message = "You are trying to execute a sale using a canceled Bid. Please provide a Bid that is not cancelled in order to execute the sale.";
    super(message);
    _defineProperty(this, "name", "CanceledBidIsNotAllowedError");
  }
};
var CanceledListingIsNotAllowedError = class extends AuctionHouseError {
  constructor() {
    const message = "You are trying to execute a sale using a canceled Listing. Please provide a Listing that is not cancelld in order to execute the sale.";
    super(message);
    _defineProperty(this, "name", "CanceledListingIsNotAllowedError");
  }
};
var CreateListingRequiresSignerError = class extends AuctionHouseError {
  constructor() {
    const message = "You are trying to create a listing without providing a signer. Either a seller or authority must be a Signer.";
    super(message);
    _defineProperty(this, "name", "CreateListingRequiresSignerError");
  }
};
var WithdrawFromBuyerAccountRequiresSignerError = class extends AuctionHouseError {
  constructor() {
    const message = "You are trying to withdraw from buyer account without providing a signer. Either a buyer or authority must be a Signer.";
    super(message);
    _defineProperty(this, "name", "WithdrawFromBuyerAccountRequiresSignerError");
  }
};
var PartialPriceMismatchError = class extends AuctionHouseError {
  constructor(expected, actual) {
    const message = `The calculated partial price does not equal the partial price provided. Expected to receive ${formatAmount(expected)} per SFT but provided ${formatAmount(actual)} per SFT. The token price must equal the price it has in the listing. If executing a partial sale, divide the total price by the number of total tokens on sale and multiply it by the number of tokens you want to buy.`;
    super(message);
    _defineProperty(this, "name", "PartialPriceMismatchError");
  }
};
var FindAllSupportsOnlyThreeFiltersMaxError = class extends AuctionHouseError {
  constructor() {
    const message = "Solana filter allows only to provide four custom filters, one of the filters is internal so it is only possible to provide 3 custom filters. Please provide less filters to the find all query.";
    super(message);
    _defineProperty(this, "name", "FindAllSupportsOnlyThreeFiltersMaxError");
  }
};

// ../../node_modules/@metaplex-foundation/js/dist/esm/plugins/auctionHouseModule/operations/createBid.mjs
var Key77 = "CreateBidOperation";
var createBidOperation = useOperation(Key77);
var createBidOperationHandler = {
  handle(operation, metaplex, scope) {
    return __async(this, null, function* () {
      const {
        auctionHouse
      } = operation.input;
      const builder = yield createBidBuilder(metaplex, operation.input, scope);
      const confirmOptions = makeConfirmOptionsFinalizedOnMainnet(metaplex, scope.confirmOptions);
      const output = yield builder.sendAndConfirm(metaplex, confirmOptions);
      scope.throwIfCanceled();
      if (output.receipt) {
        const bid = yield metaplex.auctionHouse().findBidByReceipt({
          auctionHouse,
          receiptAddress: output.receipt
        }, scope);
        return __spreadValues({
          bid
        }, output);
      }
      scope.throwIfCanceled();
      const lazyBid = {
        model: "bid",
        lazy: true,
        auctionHouse,
        tradeStateAddress: output.buyerTradeState,
        bookkeeperAddress: output.bookkeeper,
        tokenAddress: output.tokenAccount,
        buyerAddress: output.buyer,
        metadataAddress: output.metadata,
        receiptAddress: output.receipt,
        purchaseReceiptAddress: null,
        isPublic: Boolean(output.tokenAccount),
        price: output.price,
        tokens: output.tokens.basisPoints,
        createdAt: now(),
        canceledAt: null
      };
      return __spreadValues({
        bid: yield metaplex.auctionHouse().loadBid({
          lazyBid
        }, scope)
      }, output);
    });
  }
};
var createBidBuilder = (_0, _1, ..._2) => __async(void 0, [_0, _1, ..._2], function* (metaplex, params, options = {}) {
  const {
    programs,
    payer = metaplex.rpc().getDefaultFeePayer()
  } = options;
  const {
    auctionHouse
  } = params;
  const tokens = params.tokens ?? token(1);
  const priceBasisPoint = params.price?.basisPoints ?? 0;
  const price = auctionHouse.isNative ? lamports(priceBasisPoint) : amount(priceBasisPoint, auctionHouse.treasuryMint.currency);
  if (auctionHouse.hasAuctioneer && !params.auctioneerAuthority) {
    throw new AuctioneerAuthorityRequiredError();
  }
  const buyer = params.buyer ?? metaplex.identity();
  const authority = params.authority ?? auctionHouse.authorityAddress;
  const metadata = metaplex.nfts().pdas().metadata({
    mint: params.mintAccount,
    programs
  });
  const paymentAccount = auctionHouse.isNative ? toPublicKey(buyer) : metaplex.tokens().pdas().associatedTokenAccount({
    mint: auctionHouse.treasuryMint.address,
    owner: toPublicKey(buyer),
    programs
  });
  const escrowPayment = metaplex.auctionHouse().pdas().buyerEscrow({
    auctionHouse: auctionHouse.address,
    buyer: toPublicKey(buyer),
    programs
  });
  const tokenAccount = params.tokenAccount ?? (params.seller ? metaplex.tokens().pdas().associatedTokenAccount({
    mint: params.mintAccount,
    owner: params.seller,
    programs
  }) : null);
  const buyerTokenAccount = metaplex.tokens().pdas().associatedTokenAccount({
    mint: params.mintAccount,
    owner: toPublicKey(buyer),
    programs
  });
  const buyerTradeState = metaplex.auctionHouse().pdas().tradeState({
    auctionHouse: auctionHouse.address,
    wallet: toPublicKey(buyer),
    treasuryMint: auctionHouse.treasuryMint.address,
    tokenMint: params.mintAccount,
    price: price.basisPoints,
    tokenSize: tokens.basisPoints,
    tokenAccount,
    programs
  });
  const accounts = {
    wallet: toPublicKey(buyer),
    paymentAccount,
    transferAuthority: toPublicKey(buyer),
    treasuryMint: auctionHouse.treasuryMint.address,
    metadata,
    escrowPaymentAccount: escrowPayment,
    authority: toPublicKey(authority),
    auctionHouse: auctionHouse.address,
    auctionHouseFeeAccount: auctionHouse.feeAccountAddress,
    buyerTradeState
  };
  const args = {
    tradeStateBump: buyerTradeState.bump,
    escrowPaymentBump: escrowPayment.bump,
    buyerPrice: price.basisPoints,
    tokenSize: tokens.basisPoints
  };
  let buyInstruction = tokenAccount ? (0, import_mpl_auction_house3.createBuyInstruction)(__spreadProps(__spreadValues({}, accounts), {
    tokenAccount
  }), args) : (0, import_mpl_auction_house3.createPublicBuyInstruction)(__spreadProps(__spreadValues({}, accounts), {
    tokenAccount: buyerTokenAccount
  }), args);
  if (params.auctioneerAuthority) {
    const ahAuctioneerPda = metaplex.auctionHouse().pdas().auctioneer({
      auctionHouse: auctionHouse.address,
      auctioneerAuthority: params.auctioneerAuthority.publicKey,
      programs
    });
    const accountsWithAuctioneer = __spreadProps(__spreadValues({}, accounts), {
      auctioneerAuthority: params.auctioneerAuthority.publicKey,
      ahAuctioneerPda
    });
    buyInstruction = tokenAccount ? (0, import_mpl_auction_house3.createAuctioneerBuyInstruction)(__spreadProps(__spreadValues({}, accountsWithAuctioneer), {
      tokenAccount
    }), args) : (0, import_mpl_auction_house3.createAuctioneerPublicBuyInstruction)(__spreadProps(__spreadValues({}, accountsWithAuctioneer), {
      tokenAccount: buyerTokenAccount
    }), args);
  }
  const buySigners = [buyer, authority, params.auctioneerAuthority].filter(isSigner);
  buySigners.forEach((signer) => {
    const signerKeyIndex = buyInstruction.keys.findIndex(({
      pubkey
    }) => pubkey.equals(signer.publicKey));
    buyInstruction.keys[signerKeyIndex].isSigner = true;
  });
  const shouldPrintReceipt = (params.printReceipt ?? true) && !params.auctioneerAuthority;
  const bookkeeper = params.bookkeeper ?? metaplex.identity();
  const receipt = metaplex.auctionHouse().pdas().bidReceipt({
    tradeState: buyerTradeState,
    programs
  });
  const builder = TransactionBuilder.make().setFeePayer(payer).setContext({
    buyerTradeState,
    tokenAccount,
    metadata,
    buyer: toPublicKey(buyer),
    receipt: shouldPrintReceipt ? receipt : null,
    bookkeeper: shouldPrintReceipt ? bookkeeper.publicKey : null,
    price,
    tokens
  });
  if (!tokenAccount) {
    const account = yield metaplex.rpc().getAccount(buyerTokenAccount);
    if (!account.exists) {
      builder.add(yield metaplex.tokens().builders().createToken({
        mint: params.mintAccount,
        owner: toPublicKey(buyer)
      }));
    }
  }
  return builder.add({
    instruction: buyInstruction,
    signers: buySigners,
    key: "buy"
  }).when(shouldPrintReceipt, (builder2) => builder2.add({
    instruction: (0, import_mpl_auction_house3.createPrintBidReceiptInstruction)({
      receipt,
      bookkeeper: bookkeeper.publicKey,
      instruction: SYSVAR_INSTRUCTIONS_PUBKEY
    }, {
      receiptBump: receipt.bump
    }),
    signers: [bookkeeper],
    key: "printBidReceipt"
  }));
});

// ../../node_modules/@metaplex-foundation/js/dist/esm/plugins/auctionHouseModule/operations/createListing.mjs
var import_mpl_auction_house4 = __toESM(require_mpl_auction_house(), 1);
init_index_browser_esm();
var Key78 = "CreateListingOperation";
var createListingOperation = useOperation(Key78);
var createListingOperationHandler = {
  handle(operation, metaplex, scope) {
    return __async(this, null, function* () {
      const {
        auctionHouse
      } = operation.input;
      const builder = createListingBuilder(metaplex, operation.input, scope);
      const confirmOptions = makeConfirmOptionsFinalizedOnMainnet(metaplex, scope.confirmOptions);
      const output = yield builder.sendAndConfirm(metaplex, confirmOptions);
      scope.throwIfCanceled();
      if (output.receipt) {
        const listing = yield metaplex.auctionHouse().findListingByReceipt({
          receiptAddress: output.receipt,
          auctionHouse
        }, scope);
        return __spreadValues({
          listing
        }, output);
      }
      scope.throwIfCanceled();
      const lazyListing = {
        model: "listing",
        lazy: true,
        auctionHouse,
        tradeStateAddress: output.sellerTradeState,
        bookkeeperAddress: output.bookkeeper,
        sellerAddress: output.seller,
        metadataAddress: output.metadata,
        receiptAddress: output.receipt,
        purchaseReceiptAddress: null,
        price: output.price,
        tokens: output.tokens.basisPoints,
        createdAt: now(),
        canceledAt: null
      };
      return __spreadValues({
        listing: yield metaplex.auctionHouse().loadListing({
          lazyListing
        }, scope)
      }, output);
    });
  }
};
var createListingBuilder = (metaplex, params, options = {}) => {
  const {
    programs,
    payer = metaplex.rpc().getDefaultFeePayer()
  } = options;
  const {
    auctionHouse,
    auctioneerAuthority,
    mintAccount,
    tokens = token(1),
    seller = metaplex.identity(),
    authority = auctionHouse.authorityAddress
  } = params;
  const priceBasisPoint = auctioneerAuthority ? AUCTIONEER_PRICE : params.price?.basisPoints ?? 0;
  const price = auctionHouse.isNative ? lamports(priceBasisPoint) : amount(priceBasisPoint, auctionHouse.treasuryMint.currency);
  if (auctionHouse.hasAuctioneer && !auctioneerAuthority) {
    throw new AuctioneerAuthorityRequiredError();
  }
  if (!isSigner(seller) && !isSigner(authority)) {
    throw new CreateListingRequiresSignerError();
  }
  const metadata = metaplex.nfts().pdas().metadata({
    mint: mintAccount,
    programs
  });
  const tokenAccount = params.tokenAccount ?? metaplex.tokens().pdas().associatedTokenAccount({
    mint: mintAccount,
    owner: toPublicKey(seller),
    programs
  });
  const sellerTradeState = metaplex.auctionHouse().pdas().tradeState({
    auctionHouse: auctionHouse.address,
    wallet: toPublicKey(seller),
    treasuryMint: auctionHouse.treasuryMint.address,
    tokenMint: mintAccount,
    price: price.basisPoints,
    tokenSize: tokens.basisPoints,
    tokenAccount,
    programs
  });
  const freeSellerTradeState = metaplex.auctionHouse().pdas().tradeState({
    auctionHouse: auctionHouse.address,
    wallet: toPublicKey(seller),
    treasuryMint: auctionHouse.treasuryMint.address,
    tokenMint: mintAccount,
    price: lamports(0).basisPoints,
    tokenSize: tokens.basisPoints,
    tokenAccount,
    programs
  });
  const programAsSigner = metaplex.auctionHouse().pdas().programAsSigner({
    programs
  });
  const accounts = {
    wallet: toPublicKey(seller),
    tokenAccount,
    metadata,
    authority: toPublicKey(authority),
    auctionHouse: auctionHouse.address,
    auctionHouseFeeAccount: auctionHouse.feeAccountAddress,
    sellerTradeState,
    freeSellerTradeState,
    programAsSigner
  };
  const args = {
    tradeStateBump: sellerTradeState.bump,
    freeTradeStateBump: freeSellerTradeState.bump,
    programAsSignerBump: programAsSigner.bump,
    buyerPrice: price.basisPoints,
    tokenSize: tokens.basisPoints
  };
  let sellInstruction = (0, import_mpl_auction_house4.createSellInstruction)(accounts, args);
  if (auctioneerAuthority) {
    sellInstruction = (0, import_mpl_auction_house4.createAuctioneerSellInstruction)(__spreadProps(__spreadValues({}, accounts), {
      auctioneerAuthority: auctioneerAuthority.publicKey,
      ahAuctioneerPda: metaplex.auctionHouse().pdas().auctioneer({
        auctionHouse: auctionHouse.address,
        auctioneerAuthority: auctioneerAuthority.publicKey,
        programs
      })
    }), args);
  }
  const signer = isSigner(seller) ? seller : authority;
  const sellSigners = [signer, auctioneerAuthority].filter(isSigner);
  const signerKeyIndex = sellInstruction.keys.findIndex((key) => key.pubkey.equals(signer.publicKey));
  sellInstruction.keys[signerKeyIndex].isSigner = true;
  if (sellInstruction.keys[signerKeyIndex].pubkey.equals(toPublicKey(seller))) {
    sellInstruction.keys[signerKeyIndex].isWritable = true;
  }
  const shouldPrintReceipt = (params.printReceipt ?? true) && !auctioneerAuthority;
  const bookkeeper = params.bookkeeper ?? metaplex.identity();
  const receipt = metaplex.auctionHouse().pdas().listingReceipt({
    tradeState: sellerTradeState,
    programs
  });
  return TransactionBuilder.make().setFeePayer(payer).setContext({
    sellerTradeState,
    freeSellerTradeState,
    tokenAccount,
    metadata,
    seller: toPublicKey(seller),
    receipt: shouldPrintReceipt ? receipt : null,
    bookkeeper: shouldPrintReceipt ? bookkeeper.publicKey : null,
    price,
    tokens
  }).add({
    instruction: sellInstruction,
    signers: sellSigners,
    key: "sell"
  }).when(shouldPrintReceipt, (builder) => builder.add({
    instruction: (0, import_mpl_auction_house4.createPrintListingReceiptInstruction)({
      receipt,
      bookkeeper: bookkeeper.publicKey,
      instruction: SYSVAR_INSTRUCTIONS_PUBKEY
    }, {
      receiptBump: receipt.bump
    }),
    signers: [bookkeeper],
    key: "printListingReceipt"
  }));
};

// ../../node_modules/@metaplex-foundation/js/dist/esm/plugins/auctionHouseModule/operations/executeSale.mjs
var import_mpl_auction_house5 = __toESM(require_mpl_auction_house(), 1);
init_index_browser_esm();
var Key79 = "ExecuteSaleOperation";
var executeSaleOperation = useOperation(Key79);
var executeSaleOperationHandler = {
  handle(operation, metaplex, scope) {
    return __async(this, null, function* () {
      const {
        auctionHouse
      } = operation.input;
      const output = yield executeSaleBuilder(metaplex, operation.input, scope).sendAndConfirm(metaplex, scope.confirmOptions);
      scope.throwIfCanceled();
      if (output.receipt) {
        const purchase = yield metaplex.auctionHouse().findPurchaseByReceipt({
          auctionHouse,
          receiptAddress: output.receipt
        }, scope);
        return __spreadValues({
          purchase
        }, output);
      }
      const lazyPurchase = {
        model: "purchase",
        lazy: true,
        auctionHouse: operation.input.auctionHouse,
        buyerAddress: output.buyer,
        sellerAddress: output.seller,
        metadataAddress: output.metadata,
        bookkeeperAddress: output.bookkeeper,
        receiptAddress: output.receipt,
        price: output.price,
        tokens: output.tokens.basisPoints,
        createdAt: now()
      };
      return __spreadValues({
        purchase: yield metaplex.auctionHouse().loadPurchase({
          lazyPurchase
        }, scope)
      }, output);
    });
  }
};
var executeSaleBuilder = (metaplex, params, options = {}) => {
  const {
    programs,
    payer = metaplex.rpc().getDefaultFeePayer()
  } = options;
  const {
    auctionHouse,
    listing,
    bid,
    auctioneerAuthority
  } = params;
  const {
    sellerAddress,
    asset
  } = listing;
  const {
    buyerAddress
  } = bid;
  const {
    hasAuctioneer,
    isNative,
    treasuryMint,
    address: auctionHouseAddress,
    authorityAddress,
    feeAccountAddress,
    treasuryAccountAddress
  } = auctionHouse;
  const isPartialSale = bid.tokens.basisPoints < listing.tokens.basisPoints;
  const {
    tokens,
    price
  } = isPartialSale ? listing : bid;
  const {
    price: buyerPrice,
    tokens: buyerTokensSize
  } = bid;
  if (!listing.auctionHouse.address.equals(bid.auctionHouse.address)) {
    throw new BidAndListingHaveDifferentAuctionHousesError();
  }
  if (!listing.asset.address.equals(bid.asset.address)) {
    throw new BidAndListingHaveDifferentMintsError();
  }
  if (bid.canceledAt) {
    throw new CanceledBidIsNotAllowedError();
  }
  if (listing.canceledAt) {
    throw new CanceledListingIsNotAllowedError();
  }
  if (hasAuctioneer && !auctioneerAuthority) {
    throw new AuctioneerAuthorityRequiredError();
  }
  if (isPartialSale && hasAuctioneer) {
    throw new AuctioneerPartialSaleNotSupportedError();
  }
  if (isPartialSale) {
    const listingPricePerToken = price.basisPoints.div(tokens.basisPoints);
    const buyerPricePerToken = buyerPrice.basisPoints.div(buyerTokensSize.basisPoints);
    if (!listingPricePerToken.eq(buyerPricePerToken)) {
      throw new PartialPriceMismatchError(auctionHouse.isNative ? lamports(listingPricePerToken) : amount(listingPricePerToken, auctionHouse.treasuryMint.currency), auctionHouse.isNative ? lamports(buyerPricePerToken) : amount(buyerPricePerToken, auctionHouse.treasuryMint.currency));
    }
  }
  const sellerPaymentReceiptAccount = isNative ? sellerAddress : metaplex.tokens().pdas().associatedTokenAccount({
    mint: treasuryMint.address,
    owner: sellerAddress,
    programs
  });
  const buyerReceiptTokenAccount = metaplex.tokens().pdas().associatedTokenAccount({
    mint: asset.address,
    owner: buyerAddress,
    programs
  });
  const escrowPayment = metaplex.auctionHouse().pdas().buyerEscrow({
    auctionHouse: auctionHouseAddress,
    buyer: buyerAddress,
    programs
  });
  const freeTradeState = metaplex.auctionHouse().pdas().tradeState({
    auctionHouse: auctionHouseAddress,
    wallet: sellerAddress,
    treasuryMint: treasuryMint.address,
    tokenMint: asset.address,
    price: lamports(0).basisPoints,
    tokenSize: tokens.basisPoints,
    tokenAccount: asset.token.address,
    programs
  });
  const programAsSigner = metaplex.auctionHouse().pdas().programAsSigner();
  const accounts = {
    buyer: buyerAddress,
    seller: sellerAddress,
    tokenAccount: asset.token.address,
    tokenMint: asset.address,
    metadata: asset.metadataAddress,
    treasuryMint: treasuryMint.address,
    escrowPaymentAccount: escrowPayment,
    sellerPaymentReceiptAccount,
    buyerReceiptTokenAccount,
    authority: authorityAddress,
    auctionHouse: auctionHouseAddress,
    auctionHouseFeeAccount: feeAccountAddress,
    auctionHouseTreasury: treasuryAccountAddress,
    buyerTradeState: bid.tradeStateAddress,
    sellerTradeState: listing.tradeStateAddress,
    freeTradeState,
    programAsSigner
  };
  const args = {
    freeTradeStateBump: freeTradeState.bump,
    escrowPaymentBump: escrowPayment.bump,
    programAsSignerBump: programAsSigner.bump,
    buyerPrice: price.basisPoints,
    tokenSize: tokens.basisPoints
  };
  const partialSaleArgs = __spreadProps(__spreadValues({}, args), {
    partialOrderSize: bid.tokens.basisPoints,
    partialOrderPrice: bid.price.basisPoints
  });
  let executeSaleInstruction = isPartialSale ? (0, import_mpl_auction_house5.createExecutePartialSaleInstruction)(accounts, partialSaleArgs) : (0, import_mpl_auction_house5.createExecuteSaleInstruction)(accounts, args);
  if (auctioneerAuthority) {
    const auctioneerAccounts = __spreadProps(__spreadValues({}, accounts), {
      auctioneerAuthority: auctioneerAuthority.publicKey,
      ahAuctioneerPda: metaplex.auctionHouse().pdas().auctioneer({
        auctionHouse: auctionHouse.address,
        auctioneerAuthority: auctioneerAuthority.publicKey,
        programs
      })
    });
    executeSaleInstruction = (0, import_mpl_auction_house5.createAuctioneerExecuteSaleInstruction)(auctioneerAccounts, args);
  }
  asset.creators.forEach(({
    address
  }) => {
    executeSaleInstruction.keys.push({
      pubkey: address,
      isWritable: true,
      isSigner: false
    });
    if (!isNative) {
      executeSaleInstruction.keys.push({
        pubkey: metaplex.tokens().pdas().associatedTokenAccount({
          mint: treasuryMint.address,
          owner: address,
          programs
        }),
        isWritable: true,
        isSigner: false
      });
    }
  });
  const executeSaleSigners = [auctioneerAuthority].filter(isSigner);
  const shouldPrintReceipt = (params.printReceipt ?? true) && Boolean(listing.receiptAddress && bid.receiptAddress && !isPartialSale);
  const bookkeeper = params.bookkeeper ?? metaplex.identity();
  const purchaseReceipt = metaplex.auctionHouse().pdas().purchaseReceipt({
    listingTradeState: listing.tradeStateAddress,
    bidTradeState: bid.tradeStateAddress,
    programs
  });
  return TransactionBuilder.make().setFeePayer(payer).setContext({
    sellerTradeState: listing.tradeStateAddress,
    buyerTradeState: bid.tradeStateAddress,
    buyer: buyerAddress,
    seller: sellerAddress,
    metadata: asset.metadataAddress,
    bookkeeper: shouldPrintReceipt ? bookkeeper.publicKey : null,
    receipt: shouldPrintReceipt ? purchaseReceipt : null,
    price,
    tokens
  }).add({
    instruction: executeSaleInstruction,
    signers: executeSaleSigners,
    key: params.instructionKey ?? "executeSale"
  }).when(shouldPrintReceipt, (builder) => builder.add({
    instruction: (0, import_mpl_auction_house5.createPrintPurchaseReceiptInstruction)({
      purchaseReceipt,
      listingReceipt: listing.receiptAddress,
      bidReceipt: bid.receiptAddress,
      bookkeeper: bookkeeper.publicKey,
      instruction: SYSVAR_INSTRUCTIONS_PUBKEY
    }, {
      purchaseReceiptBump: purchaseReceipt.bump
    }),
    signers: [bookkeeper],
    key: "printPurchaseReceipt"
  }));
};

// ../../node_modules/@metaplex-foundation/js/dist/esm/plugins/auctionHouseModule/operations/updateAuctionHouse.mjs
var import_mpl_auction_house6 = __toESM(require_mpl_auction_house(), 1);
var import_lodash4 = __toESM(require_lodash(), 1);

// ../../node_modules/@metaplex-foundation/js/dist/esm/plugins/auctionHouseModule/models/AuctionHouse.mjs
var isAuctionHouse = (value) => typeof value === "object" && value.model === "auctionHouse";
function assertAuctionHouse(value) {
  assert2(isAuctionHouse(value), `Expected AuctionHouse type`);
}
var isAuctioneerAuctionHouse = (value) => isAuctionHouse(value) && value.hasAuctioneer;
function assertAuctioneerAuctionHouse(value) {
  assert2(isAuctioneerAuctionHouse(value), `Expected AuctioneerAuctionHouse type`);
}
var toAuctionHouse = (auctionHouseAccount, treasuryMint, auctioneerAccount) => {
  if (auctionHouseAccount.data.hasAuctioneer) {
    assert2(!!auctioneerAccount, "Auctioneer account is required when hasAuctioneer is true");
    assert2(!!auctioneerAccount && auctioneerAccount.data.auctionHouse.equals(auctionHouseAccount.publicKey), "Auctioneer account does not match the AuctionHouse account");
  }
  return __spreadValues({
    model: "auctionHouse",
    address: new Pda(auctionHouseAccount.publicKey, auctionHouseAccount.data.bump),
    creatorAddress: auctionHouseAccount.data.creator,
    authorityAddress: auctionHouseAccount.data.authority,
    treasuryMint,
    feeAccountAddress: new Pda(auctionHouseAccount.data.auctionHouseFeeAccount, auctionHouseAccount.data.feePayerBump),
    treasuryAccountAddress: new Pda(auctionHouseAccount.data.auctionHouseTreasury, auctionHouseAccount.data.treasuryBump),
    feeWithdrawalDestinationAddress: auctionHouseAccount.data.feeWithdrawalDestination,
    treasuryWithdrawalDestinationAddress: auctionHouseAccount.data.treasuryWithdrawalDestination,
    sellerFeeBasisPoints: auctionHouseAccount.data.sellerFeeBasisPoints,
    requiresSignOff: auctionHouseAccount.data.requiresSignOff,
    canChangeSalePrice: auctionHouseAccount.data.canChangeSalePrice,
    isNative: treasuryMint.isWrappedSol,
    scopes: auctionHouseAccount.data.scopes.reduce((acc, isAllowed, index) => isAllowed ? [...acc, index] : acc, [])
  }, auctionHouseAccount.data.hasAuctioneer && auctioneerAccount ? {
    hasAuctioneer: true,
    auctioneer: {
      address: auctioneerAccount.publicKey,
      authority: auctioneerAccount.data.auctioneerAuthority
    }
  } : {
    hasAuctioneer: false
  });
};

// ../../node_modules/@metaplex-foundation/js/dist/esm/plugins/auctionHouseModule/operations/updateAuctionHouse.mjs
var Key80 = "UpdateAuctionHouseOperation";
var updateAuctionHouseOperation = useOperation(Key80);
var updateAuctionHouseOperationHandler = {
  handle(operation, metaplex, scope) {
    return __async(this, null, function* () {
      const {
        auctionHouse,
        auctioneerAuthority
      } = operation.input;
      const builder = updateAuctionHouseBuilder(metaplex, operation.input, scope);
      if (builder.isEmpty()) {
        throw new NoInstructionsToSendError(Key80);
      }
      const output = yield builder.sendAndConfirm(metaplex, scope.confirmOptions);
      const currentAuctioneerAuthority = auctionHouse.hasAuctioneer ? auctionHouse.auctioneer.authority : void 0;
      const updatedAuctionHouse = yield metaplex.auctionHouse().findByAddress({
        address: auctionHouse.address,
        auctioneerAuthority: auctioneerAuthority ?? currentAuctioneerAuthority
      }, scope);
      return __spreadProps(__spreadValues({}, output), {
        auctionHouse: updatedAuctionHouse
      });
    });
  }
};
var updateAuctionHouseBuilder = (metaplex, params, options = {}) => {
  const {
    programs,
    payer = metaplex.rpc().getDefaultFeePayer()
  } = options;
  const authority = params.authority ?? metaplex.identity();
  const {
    auctionHouse
  } = params;
  let treasuryWithdrawalDestinationOwner;
  let treasuryWithdrawalDestination;
  if (auctionHouse.isNative) {
    treasuryWithdrawalDestinationOwner = params.treasuryWithdrawalDestinationOwner ?? auctionHouse.treasuryWithdrawalDestinationAddress;
    treasuryWithdrawalDestination = treasuryWithdrawalDestinationOwner;
  } else if (params.treasuryWithdrawalDestinationOwner) {
    treasuryWithdrawalDestinationOwner = params.treasuryWithdrawalDestinationOwner;
    treasuryWithdrawalDestination = metaplex.tokens().pdas().associatedTokenAccount({
      mint: auctionHouse.treasuryMint.address,
      owner: treasuryWithdrawalDestinationOwner,
      programs
    });
  } else {
    throw new TreasuryDestinationOwnerRequiredError();
  }
  const originalData = {
    authority: auctionHouse.authorityAddress,
    feeWithdrawalDestination: auctionHouse.feeWithdrawalDestinationAddress,
    treasuryWithdrawalDestination: auctionHouse.treasuryWithdrawalDestinationAddress,
    sellerFeeBasisPoints: auctionHouse.sellerFeeBasisPoints,
    requiresSignOff: auctionHouse.requiresSignOff,
    canChangeSalePrice: auctionHouse.canChangeSalePrice
  };
  const updatedData = {
    authority: params.newAuthority ?? originalData.authority,
    feeWithdrawalDestination: params.feeWithdrawalDestination ?? originalData.feeWithdrawalDestination,
    treasuryWithdrawalDestination,
    sellerFeeBasisPoints: params.sellerFeeBasisPoints ?? originalData.sellerFeeBasisPoints,
    requiresSignOff: params.requiresSignOff ?? originalData.requiresSignOff,
    canChangeSalePrice: params.canChangeSalePrice ?? originalData.canChangeSalePrice
  };
  const shouldSendUpdateInstruction = !(0, import_lodash4.default)(originalData, updatedData);
  const shouldAddAuctioneerAuthority = !auctionHouse.hasAuctioneer && !!params.auctioneerAuthority;
  const shouldUpdateAuctioneerAuthority = auctionHouse.hasAuctioneer && !!params.auctioneerAuthority && !params.auctioneerAuthority.equals(auctionHouse.auctioneer.authority);
  const shouldUpdateAuctioneerScopes = auctionHouse.hasAuctioneer && !!params.auctioneerScopes && !(0, import_lodash4.default)(params.auctioneerScopes.sort(), auctionHouse.scopes.sort());
  const shouldDelegateAuctioneer = shouldAddAuctioneerAuthority;
  const shouldUpdateAuctioneer = shouldUpdateAuctioneerAuthority || shouldUpdateAuctioneerScopes;
  return TransactionBuilder.make().setFeePayer(payer).when(shouldSendUpdateInstruction, (builder) => builder.add({
    instruction: (0, import_mpl_auction_house6.createUpdateAuctionHouseInstruction)({
      treasuryMint: auctionHouse.treasuryMint.address,
      payer: payer.publicKey,
      authority: authority.publicKey,
      newAuthority: updatedData.authority,
      feeWithdrawalDestination: updatedData.feeWithdrawalDestination,
      treasuryWithdrawalDestination,
      treasuryWithdrawalDestinationOwner,
      auctionHouse: auctionHouse.address
    }, {
      sellerFeeBasisPoints: params.sellerFeeBasisPoints ?? null,
      requiresSignOff: params.requiresSignOff ?? null,
      canChangeSalePrice: params.canChangeSalePrice ?? null
    }),
    signers: [payer, authority],
    key: params.instructionKey ?? "updateAuctionHouse"
  })).when(shouldDelegateAuctioneer, (builder) => {
    const auctioneerAuthority = params.auctioneerAuthority;
    const defaultScopes = auctionHouse.hasAuctioneer ? auctionHouse.scopes : AUCTIONEER_ALL_SCOPES;
    return builder.add({
      instruction: (0, import_mpl_auction_house6.createDelegateAuctioneerInstruction)({
        auctionHouse: auctionHouse.address,
        authority: authority.publicKey,
        auctioneerAuthority,
        ahAuctioneerPda: metaplex.auctionHouse().pdas().auctioneer({
          auctionHouse: auctionHouse.address,
          auctioneerAuthority,
          programs
        })
      }, {
        scopes: params.auctioneerScopes ?? defaultScopes
      }),
      signers: [authority],
      key: params.delegateAuctioneerInstructionKey ?? "delegateAuctioneer"
    });
  }).when(shouldUpdateAuctioneer, (builder) => {
    assertAuctioneerAuctionHouse(auctionHouse);
    const auctioneerAuthority = params.auctioneerAuthority ?? auctionHouse.auctioneer.authority;
    return builder.add({
      instruction: (0, import_mpl_auction_house6.createUpdateAuctioneerInstruction)({
        auctionHouse: auctionHouse.address,
        authority: authority.publicKey,
        auctioneerAuthority,
        ahAuctioneerPda: metaplex.auctionHouse().pdas().auctioneer({
          auctionHouse: auctionHouse.address,
          auctioneerAuthority,
          programs
        })
      }, {
        scopes: params.auctioneerScopes ?? auctionHouse.scopes
      }),
      signers: [authority],
      key: params.updateAuctioneerInstructionKey ?? "updateAuctioneer"
    });
  });
};

// ../../node_modules/@metaplex-foundation/js/dist/esm/plugins/auctionHouseModule/operations/directBuy.mjs
var Key81 = "DirectBuyOperation";
var directBuyOperation = useOperation(Key81);
var directBuyOperationHandler = {
  handle: (operation, metaplex, scope) => __async(void 0, null, function* () {
    const builder = yield directBuyBuilder(metaplex, operation.input, scope);
    scope.throwIfCanceled();
    return builder.sendAndConfirm(metaplex, scope.confirmOptions);
  })
};
var directBuyBuilder = (_0, _1, ..._2) => __async(void 0, [_0, _1, ..._2], function* (metaplex, params, options = {}) {
  const {
    programs,
    payer = metaplex.rpc().getDefaultFeePayer()
  } = options;
  const {
    auctionHouse,
    auctioneerAuthority,
    listing,
    price = listing.price,
    buyer = metaplex.identity(),
    authority = auctionHouse.authorityAddress,
    bookkeeper = metaplex.identity(),
    createBidInstructionKey,
    executeSaleInstructionKey
  } = params;
  const {
    tokens,
    asset,
    sellerAddress,
    receiptAddress
  } = listing;
  const printReceipt = (params.printReceipt ?? true) && Boolean(receiptAddress);
  if (auctionHouse.hasAuctioneer && !auctioneerAuthority) {
    throw new AuctioneerAuthorityRequiredError();
  }
  const bidBuilder = yield metaplex.auctionHouse().builders().bid({
    auctionHouse,
    auctioneerAuthority,
    authority,
    tokens,
    price,
    mintAccount: asset.mint.address,
    seller: sellerAddress,
    buyer,
    printReceipt,
    bookkeeper,
    instructionKey: createBidInstructionKey
  }, {
    programs,
    payer
  });
  const {
    receipt,
    buyerTradeState
  } = bidBuilder.getContext();
  const bid = {
    model: "bid",
    lazy: false,
    auctionHouse,
    asset,
    tradeStateAddress: buyerTradeState,
    bookkeeperAddress: bookkeeper.publicKey,
    buyerAddress: buyer.publicKey,
    receiptAddress: receipt,
    purchaseReceiptAddress: null,
    price,
    tokens,
    canceledAt: null,
    createdAt: now(),
    isPublic: false
  };
  const saleBuilder = metaplex.auctionHouse().builders().executeSale({
    auctionHouse,
    auctioneerAuthority,
    bid,
    listing,
    printReceipt,
    bookkeeper,
    instructionKey: executeSaleInstructionKey
  }, {
    programs,
    payer
  });
  const {
    receipt: purchaseReceiptAddress
  } = saleBuilder.getContext();
  const buyerTokenAccount = metaplex.tokens().pdas().associatedTokenAccount({
    mint: asset.address,
    owner: toPublicKey(buyer),
    programs
  });
  const purchasedAsset = __spreadProps(__spreadValues({}, asset), {
    token: __spreadProps(__spreadValues({}, asset.token), {
      address: buyerTokenAccount,
      ownerAddress: toPublicKey(buyer)
    })
  });
  const purchase = {
    auctionHouse,
    model: "purchase",
    lazy: false,
    buyerAddress: toPublicKey(buyer),
    sellerAddress,
    asset: purchasedAsset,
    bookkeeperAddress: toPublicKey(bookkeeper),
    receiptAddress: purchaseReceiptAddress,
    price: listing.price,
    tokens,
    createdAt: now()
  };
  return TransactionBuilder.make().setContext({
    bid,
    purchase
  }).add(bidBuilder).add(saleBuilder);
});

// ../../node_modules/@metaplex-foundation/js/dist/esm/plugins/auctionHouseModule/operations/cancelBid.mjs
var import_mpl_auction_house7 = __toESM(require_mpl_auction_house(), 1);
init_index_browser_esm();
var Key82 = "CancelBidOperation";
var cancelBidOperation = useOperation(Key82);
var cancelBidOperationHandler = {
  handle: (operation, metaplex, scope) => __async(void 0, null, function* () {
    return cancelBidBuilder(metaplex, operation.input, scope).sendAndConfirm(metaplex, scope.confirmOptions);
  })
};
var cancelBidBuilder = (metaplex, params, options = {}) => {
  const {
    programs,
    payer = metaplex.rpc().getDefaultFeePayer()
  } = options;
  const {
    auctionHouse,
    auctioneerAuthority,
    bid
  } = params;
  const {
    asset,
    buyerAddress,
    tradeStateAddress,
    price,
    receiptAddress,
    tokens,
    isPublic
  } = bid;
  const {
    authorityAddress,
    address: auctionHouseAddress,
    feeAccountAddress,
    hasAuctioneer
  } = auctionHouse;
  if (hasAuctioneer && !auctioneerAuthority) {
    throw new AuctioneerAuthorityRequiredError();
  }
  const tokenAccount = isPublic ? metaplex.tokens().pdas().associatedTokenAccount({
    mint: asset.mint.address,
    owner: toPublicKey(buyerAddress),
    programs
  }) : asset.token.address;
  const accounts = {
    wallet: buyerAddress,
    tokenAccount,
    tokenMint: asset.address,
    authority: authorityAddress,
    auctionHouse: auctionHouseAddress,
    auctionHouseFeeAccount: feeAccountAddress,
    tradeState: tradeStateAddress
  };
  const args = {
    buyerPrice: price.basisPoints,
    tokenSize: tokens.basisPoints
  };
  let cancelBidInstruction = (0, import_mpl_auction_house7.createCancelInstruction)(accounts, args);
  if (auctioneerAuthority) {
    cancelBidInstruction = (0, import_mpl_auction_house7.createAuctioneerCancelInstruction)(__spreadProps(__spreadValues({}, accounts), {
      auctioneerAuthority: auctioneerAuthority.publicKey,
      ahAuctioneerPda: metaplex.auctionHouse().pdas().auctioneer({
        auctionHouse: auctionHouseAddress,
        auctioneerAuthority: auctioneerAuthority.publicKey,
        programs
      })
    }), args);
  }
  const cancelSigners = [auctioneerAuthority].filter(isSigner);
  return TransactionBuilder.make().setFeePayer(payer).add({
    instruction: cancelBidInstruction,
    signers: cancelSigners,
    key: params.instructionKey ?? "cancelBid"
  }).when(Boolean(receiptAddress), (builder) => builder.add({
    instruction: (0, import_mpl_auction_house7.createCancelBidReceiptInstruction)({
      receipt: receiptAddress,
      instruction: SYSVAR_INSTRUCTIONS_PUBKEY
    }),
    signers: [],
    key: "cancelBidReceipt"
  }));
};

// ../../node_modules/@metaplex-foundation/js/dist/esm/plugins/auctionHouseModule/operations/cancelListing.mjs
var import_mpl_auction_house8 = __toESM(require_mpl_auction_house(), 1);
init_index_browser_esm();
var Key83 = "CancelListingOperation";
var cancelListingOperation = useOperation(Key83);
var cancelListingOperationHandler = {
  handle: (operation, metaplex, scope) => __async(void 0, null, function* () {
    return cancelListingBuilder(metaplex, operation.input, scope).sendAndConfirm(metaplex, scope.confirmOptions);
  })
};
var cancelListingBuilder = (metaplex, params, options = {}) => {
  const {
    programs,
    payer = metaplex.rpc().getDefaultFeePayer()
  } = options;
  const {
    auctionHouse,
    auctioneerAuthority,
    listing
  } = params;
  const {
    asset,
    sellerAddress,
    receiptAddress,
    tradeStateAddress,
    price,
    tokens
  } = listing;
  const {
    address: auctionHouseAddress,
    authorityAddress,
    feeAccountAddress,
    hasAuctioneer
  } = auctionHouse;
  if (hasAuctioneer && !auctioneerAuthority) {
    throw new AuctioneerAuthorityRequiredError();
  }
  const buyerPrice = hasAuctioneer ? AUCTIONEER_PRICE : price.basisPoints;
  const accounts = {
    wallet: sellerAddress,
    tokenAccount: asset.token.address,
    tokenMint: asset.address,
    authority: authorityAddress,
    auctionHouse: auctionHouseAddress,
    auctionHouseFeeAccount: feeAccountAddress,
    tradeState: tradeStateAddress
  };
  const args = {
    buyerPrice,
    tokenSize: tokens.basisPoints
  };
  let cancelListingInstruction = (0, import_mpl_auction_house8.createCancelInstruction)(accounts, args);
  if (auctioneerAuthority) {
    cancelListingInstruction = (0, import_mpl_auction_house8.createAuctioneerCancelInstruction)(__spreadProps(__spreadValues({}, accounts), {
      auctioneerAuthority: auctioneerAuthority.publicKey,
      ahAuctioneerPda: metaplex.auctionHouse().pdas().auctioneer({
        auctionHouse: auctionHouseAddress,
        auctioneerAuthority: auctioneerAuthority.publicKey,
        programs
      })
    }), args);
  }
  const cancelSigners = [auctioneerAuthority].filter(isSigner);
  return TransactionBuilder.make().setFeePayer(payer).add({
    instruction: cancelListingInstruction,
    signers: cancelSigners,
    key: params.instructionKey ?? "cancelListing"
  }).when(Boolean(receiptAddress), (builder) => builder.add({
    instruction: (0, import_mpl_auction_house8.createCancelListingReceiptInstruction)({
      receipt: receiptAddress,
      instruction: SYSVAR_INSTRUCTIONS_PUBKEY
    }),
    signers: [],
    key: "cancelListingReceipt"
  }));
};

// ../../node_modules/@metaplex-foundation/js/dist/esm/plugins/auctionHouseModule/operations/depositToBuyerAccount.mjs
var import_mpl_auction_house9 = __toESM(require_mpl_auction_house(), 1);
var Key84 = "DepositToBuyerAccountOperation";
var depositToBuyerAccountOperation = useOperation(Key84);
var depositToBuyerAccountOperationHandler = {
  handle: (operation, metaplex, scope) => __async(void 0, null, function* () {
    return depositToBuyerAccountBuilder(metaplex, operation.input, scope).sendAndConfirm(metaplex, scope.confirmOptions);
  })
};
var depositToBuyerAccountBuilder = (metaplex, params, options = {}) => {
  const {
    programs,
    payer = metaplex.rpc().getDefaultFeePayer()
  } = options;
  const {
    auctionHouse,
    auctioneerAuthority,
    amount: amount2,
    instructionKey,
    buyer = metaplex.identity()
  } = params;
  if (auctionHouse.hasAuctioneer && !auctioneerAuthority) {
    throw new AuctioneerAuthorityRequiredError();
  }
  const paymentAccount = auctionHouse.isNative ? toPublicKey(buyer) : metaplex.tokens().pdas().associatedTokenAccount({
    mint: auctionHouse.treasuryMint.address,
    owner: toPublicKey(buyer),
    programs
  });
  const escrowPayment = metaplex.auctionHouse().pdas().buyerEscrow({
    auctionHouse: auctionHouse.address,
    buyer: toPublicKey(buyer),
    programs
  });
  const accounts = {
    wallet: toPublicKey(buyer),
    paymentAccount,
    transferAuthority: toPublicKey(buyer),
    escrowPaymentAccount: escrowPayment,
    treasuryMint: auctionHouse.treasuryMint.address,
    authority: auctionHouse.authorityAddress,
    auctionHouse: auctionHouse.address,
    auctionHouseFeeAccount: auctionHouse.feeAccountAddress
  };
  const args = {
    escrowPaymentBump: escrowPayment.bump,
    amount: amount2.basisPoints
  };
  let depositInstruction = (0, import_mpl_auction_house9.createDepositInstruction)(accounts, args);
  if (auctioneerAuthority) {
    const ahAuctioneerPda = metaplex.auctionHouse().pdas().auctioneer({
      auctionHouse: auctionHouse.address,
      auctioneerAuthority: auctioneerAuthority.publicKey,
      programs
    });
    const accountsWithAuctioneer = __spreadProps(__spreadValues({}, accounts), {
      auctioneerAuthority: auctioneerAuthority.publicKey,
      ahAuctioneerPda
    });
    depositInstruction = (0, import_mpl_auction_house9.createAuctioneerDepositInstruction)(__spreadValues({}, accountsWithAuctioneer), args);
  }
  const depositSigners = [buyer, auctioneerAuthority].filter(isSigner);
  return TransactionBuilder.make().setFeePayer(payer).add({
    instruction: depositInstruction,
    signers: depositSigners,
    key: instructionKey ?? "depositToBuyerAccount"
  });
};

// ../../node_modules/@metaplex-foundation/js/dist/esm/plugins/auctionHouseModule/models/Bid.mjs
var isBid = (value) => typeof value === "object" && value.model === "bid" && !value.lazy;
function assertBid(value) {
  assert2(isBid(value), `Expected Bid type`);
}
var toBid = (account, auctionHouse, asset) => {
  const lazyBid = toLazyBid(account, auctionHouse);
  return __spreadValues(__spreadProps(__spreadValues({}, lazyBid), {
    model: "bid",
    lazy: false
  }), "token" in asset ? {
    asset,
    tokens: amount(lazyBid.tokens, asset.mint.currency),
    isPublic: false
  } : {
    asset,
    tokens: amount(lazyBid.tokens, asset.mint.currency),
    isPublic: true
  });
};
var isPrivateBid = (value) => typeof value === "object" && value.model === "bid" && !value.isPublic;
var isLazyBid = (value) => typeof value === "object" && value.model === "bid" && value.lazy;
function assertLazyBid(value) {
  assert2(isLazyBid(value), `Expected LazyBid type`);
}
var toLazyBid = (account, auctionHouse) => {
  return {
    model: "bid",
    lazy: true,
    auctionHouse,
    tradeStateAddress: new Pda(account.data.tradeState, account.data.tradeStateBump),
    bookkeeperAddress: account.data.bookkeeper,
    buyerAddress: account.data.buyer,
    metadataAddress: account.data.metadata,
    tokenAddress: account.data.tokenAccount,
    receiptAddress: new Pda(account.publicKey, account.data.bump),
    purchaseReceiptAddress: account.data.purchaseReceipt,
    isPublic: Boolean(account.data.tokenAccount),
    // Data.
    price: auctionHouse.isNative ? lamports(account.data.price) : amount(account.data.price, auctionHouse.treasuryMint.currency),
    tokens: toBigNumber(account.data.tokenSize),
    createdAt: toDateTime(account.data.createdAt),
    canceledAt: toOptionDateTime(account.data.canceledAt)
  };
};

// ../../node_modules/@metaplex-foundation/js/dist/esm/plugins/auctionHouseModule/operations/directSell.mjs
var Key85 = "DirectSellOperation";
var directSellOperation = useOperation(Key85);
var directSellOperationHandler = {
  handle: (operation, metaplex, scope) => __async(void 0, null, function* () {
    const builder = yield directSellBuilder(metaplex, operation.input, scope);
    scope.throwIfCanceled();
    return builder.sendAndConfirm(metaplex, scope.confirmOptions);
  })
};
var directSellBuilder = (_0, _1, ..._2) => __async(void 0, [_0, _1, ..._2], function* (metaplex, params, options = {}) {
  const {
    programs,
    payer = metaplex.rpc().getDefaultFeePayer()
  } = options;
  const {
    auctionHouse,
    auctioneerAuthority,
    bid,
    seller = metaplex.identity(),
    authority = auctionHouse.authorityAddress,
    bookkeeper = metaplex.identity(),
    createListingInstructionKey,
    executeSaleInstructionKey
  } = params;
  const {
    hasAuctioneer
  } = auctionHouse;
  const {
    tokens,
    price,
    buyerAddress
  } = bid;
  const printReceipt = (params.printReceipt ?? true) && Boolean(bid.receiptAddress);
  if (hasAuctioneer && !auctioneerAuthority) {
    throw new AuctioneerAuthorityRequiredError();
  }
  const asset = isPrivateBid(bid) ? bid.asset : __spreadProps(__spreadValues({}, bid.asset), {
    token: params.sellerToken
  });
  const listingBuilder = metaplex.auctionHouse().builders().list({
    mintAccount: asset.mint.address,
    price,
    auctionHouse,
    auctioneerAuthority,
    seller,
    authority,
    tokenAccount: asset.token.address,
    tokens,
    printReceipt,
    bookkeeper,
    instructionKey: createListingInstructionKey
  }, {
    programs,
    payer
  });
  const {
    receipt,
    sellerTradeState
  } = listingBuilder.getContext();
  const listing = {
    model: "listing",
    lazy: false,
    auctionHouse,
    asset,
    tradeStateAddress: sellerTradeState,
    bookkeeperAddress: toPublicKey(bookkeeper),
    sellerAddress: toPublicKey(seller),
    receiptAddress: receipt,
    purchaseReceiptAddress: null,
    price,
    tokens,
    createdAt: now(),
    canceledAt: null
  };
  const saleBuilder = metaplex.auctionHouse().builders().executeSale({
    auctionHouse,
    auctioneerAuthority,
    bid,
    listing,
    printReceipt,
    bookkeeper,
    instructionKey: executeSaleInstructionKey
  }, {
    programs,
    payer
  });
  const {
    receipt: receiptAddress
  } = saleBuilder.getContext();
  const buyerTokenAccount = metaplex.tokens().pdas().associatedTokenAccount({
    mint: asset.address,
    owner: buyerAddress,
    programs
  });
  const purchasedAsset = __spreadProps(__spreadValues({}, asset), {
    token: __spreadProps(__spreadValues({}, asset.token), {
      address: buyerTokenAccount,
      ownerAddress: buyerAddress
    })
  });
  const purchase = {
    auctionHouse,
    model: "purchase",
    lazy: false,
    asset: purchasedAsset,
    buyerAddress,
    sellerAddress: toPublicKey(seller),
    bookkeeperAddress: toPublicKey(bookkeeper),
    receiptAddress,
    price: bid.price,
    tokens,
    createdAt: now()
  };
  return TransactionBuilder.make().setFeePayer(payer).setContext({
    listing,
    purchase
  }).add(listingBuilder).add(saleBuilder);
});

// ../../node_modules/@metaplex-foundation/js/dist/esm/plugins/auctionHouseModule/operations/withdrawFromBuyerAccount.mjs
var import_mpl_auction_house10 = __toESM(require_mpl_auction_house(), 1);
var Key86 = "WithdrawFromBuyerAccountOperation";
var withdrawFromBuyerAccountOperation = useOperation(Key86);
var withdrawFromBuyerAccountOperationHandler = {
  handle: (operation, metaplex, scope) => __async(void 0, null, function* () {
    return withdrawFromBuyerAccountBuilder(metaplex, operation.input, scope).sendAndConfirm(metaplex, scope.confirmOptions);
  })
};
var withdrawFromBuyerAccountBuilder = (metaplex, params, options = {}) => {
  const {
    programs,
    payer = metaplex.rpc().getDefaultFeePayer()
  } = options;
  const {
    auctionHouse,
    auctioneerAuthority,
    amount: amount2
  } = params;
  if (auctionHouse.hasAuctioneer && !params.auctioneerAuthority) {
    throw new AuctioneerAuthorityRequiredError();
  }
  const amountBasisPoint = amount2.basisPoints;
  const buyer = params.buyer ?? metaplex.identity();
  const authority = params.authority ?? auctionHouse.authorityAddress;
  if (!isSigner(buyer) && !isSigner(authority)) {
    throw new WithdrawFromBuyerAccountRequiresSignerError();
  }
  const escrowPayment = metaplex.auctionHouse().pdas().buyerEscrow({
    auctionHouse: auctionHouse.address,
    buyer: toPublicKey(buyer),
    programs
  });
  const accounts = {
    wallet: toPublicKey(buyer),
    receiptAccount: toPublicKey(buyer),
    escrowPaymentAccount: escrowPayment,
    treasuryMint: auctionHouse.treasuryMint.address,
    authority: toPublicKey(authority),
    auctionHouse: auctionHouse.address,
    auctionHouseFeeAccount: auctionHouse.feeAccountAddress
  };
  const args = {
    escrowPaymentBump: escrowPayment.bump,
    amount: amountBasisPoint
  };
  let withdrawInstruction = (0, import_mpl_auction_house10.createWithdrawInstruction)(accounts, args);
  if (auctioneerAuthority) {
    const ahAuctioneerPda = metaplex.auctionHouse().pdas().auctioneer({
      auctionHouse: auctionHouse.address,
      auctioneerAuthority: auctioneerAuthority.publicKey,
      programs
    });
    const accountsWithAuctioneer = __spreadProps(__spreadValues({}, accounts), {
      auctioneerAuthority: auctioneerAuthority.publicKey,
      ahAuctioneerPda
    });
    withdrawInstruction = (0, import_mpl_auction_house10.createAuctioneerWithdrawInstruction)(accountsWithAuctioneer, args);
  }
  const signer = isSigner(buyer) ? buyer : authority;
  const withdrawSigners = [signer, params.auctioneerAuthority].filter(isSigner);
  const signerKeyIndex = withdrawInstruction.keys.findIndex((key) => key.pubkey.equals(signer.publicKey));
  withdrawInstruction.keys[signerKeyIndex].isSigner = true;
  return TransactionBuilder.make().setFeePayer(payer).add({
    instruction: withdrawInstruction,
    signers: withdrawSigners,
    key: params.instructionKey ?? "withdrawFromBuyerAccount"
  });
};

// ../../node_modules/@metaplex-foundation/js/dist/esm/plugins/auctionHouseModule/AuctionHouseBuildersClient.mjs
var AuctionHouseBuildersClient = class {
  constructor(metaplex) {
    this.metaplex = metaplex;
  }
  /** {@inheritDoc createBidBuilder} */
  bid(input, options) {
    return createBidBuilder(this.metaplex, input, options);
  }
  /** {@inheritDoc directBuyBuilder} */
  buy(input, options) {
    return directBuyBuilder(this.metaplex, input, options);
  }
  /** {@inheritDoc cancelBidBuilder} */
  cancelBid(input, options) {
    return cancelBidBuilder(this.metaplex, input, options);
  }
  /** {@inheritDoc cancelListingBuilder} */
  cancelListing(input, options) {
    return cancelListingBuilder(this.metaplex, input, options);
  }
  /** {@inheritDoc createAuctionHouseBuilder} */
  createAuctionHouse(input, options) {
    return createAuctionHouseBuilder(this.metaplex, input, options);
  }
  /** {@inheritDoc depositToBuyerAccountBuilder} */
  depositToBuyerAccount(input, options) {
    return depositToBuyerAccountBuilder(this.metaplex, input, options);
  }
  /** {@inheritDoc executeSaleBuilder} */
  executeSale(input, options) {
    return executeSaleBuilder(this.metaplex, input, options);
  }
  /** {@inheritDoc createListingBuilder} */
  list(input, options) {
    return createListingBuilder(this.metaplex, input, options);
  }
  /** {@inheritDoc directSellBuilder} */
  sell(input, options) {
    return directSellBuilder(this.metaplex, input, options);
  }
  /** {@inheritDoc updateAuctionHouseBuilder} */
  updateAuctionHouse(input, options) {
    return updateAuctionHouseBuilder(this.metaplex, input, options);
  }
  /** {@inheritDoc withdrawFromBuyerAccountBuilder} */
  withdrawFromBuyerAccount(input, options) {
    return withdrawFromBuyerAccountBuilder(this.metaplex, input, options);
  }
};

// ../../node_modules/@metaplex-foundation/js/dist/esm/plugins/auctionHouseModule/AuctionHousePdasClient.mjs
var import_buffer18 = __toESM(require_buffer2(), 1);
var AuctionHousePdasClient = class {
  constructor(metaplex) {
    this.metaplex = metaplex;
  }
  /** Finds the Auction House PDA for a creator and treasury tuple. */
  auctionHouse(input) {
    const programId = this.programId(input.programs);
    return Pda.find(programId, [import_buffer18.Buffer.from("auction_house", "utf8"), input.creator.toBuffer(), input.treasuryMint.toBuffer()]);
  }
  /** Finds the Auctioneer PDA of an Auction House. */
  auctioneer(input) {
    const programId = this.programId(input.programs);
    return Pda.find(programId, [import_buffer18.Buffer.from("auctioneer", "utf8"), input.auctionHouse.toBuffer(), input.auctioneerAuthority.toBuffer()]);
  }
  /**
   * Finds the PDA of the Auction House Program
   * itself used to sign transaction.
   */
  programAsSigner(input) {
    const programId = this.programId(input?.programs);
    return Pda.find(programId, [import_buffer18.Buffer.from("auction_house", "utf8"), import_buffer18.Buffer.from("signer", "utf8")]);
  }
  /** Finds the PDA of an Auction House's fee account. */
  fee(input) {
    const programId = this.programId(input.programs);
    return Pda.find(programId, [import_buffer18.Buffer.from("auction_house", "utf8"), input.auctionHouse.toBuffer(), import_buffer18.Buffer.from("fee_payer", "utf8")]);
  }
  /** Finds the PDA of an Auction House's treasury account. */
  treasury(input) {
    const programId = this.programId(input.programs);
    return Pda.find(programId, [import_buffer18.Buffer.from("auction_house", "utf8"), input.auctionHouse.toBuffer(), import_buffer18.Buffer.from("treasury", "utf8")]);
  }
  /** Finds the PDA of a buyer's escrow account. */
  buyerEscrow(input) {
    const programId = this.programId(input.programs);
    return Pda.find(programId, [import_buffer18.Buffer.from("auction_house", "utf8"), input.auctionHouse.toBuffer(), input.buyer.toBuffer()]);
  }
  /** Finds the trade state PDA of a bid or listing. */
  tradeState(input) {
    const programId = this.programId(input.programs);
    return Pda.find(programId, [import_buffer18.Buffer.from("auction_house", "utf8"), input.wallet.toBuffer(), input.auctionHouse.toBuffer(), ...input.tokenAccount ? [input.tokenAccount.toBuffer()] : [], input.treasuryMint.toBuffer(), input.tokenMint.toBuffer(), input.price.toArrayLike(import_buffer18.Buffer, "le", 8), input.tokenSize.toArrayLike(import_buffer18.Buffer, "le", 8)]);
  }
  /** Finds the receipt PDA of a Listing trade state. */
  listingReceipt(input) {
    const programId = this.programId(input.programs);
    return Pda.find(programId, [import_buffer18.Buffer.from("listing_receipt", "utf8"), input.tradeState.toBuffer()]);
  }
  /** Finds the receipt PDA of a Bid trade state. */
  bidReceipt(input) {
    const programId = this.programId(input.programs);
    return Pda.find(programId, [import_buffer18.Buffer.from("bid_receipt", "utf8"), input.tradeState.toBuffer()]);
  }
  /** Finds the receipt PDA of a Purchase. */
  purchaseReceipt(input) {
    const programId = this.programId(input.programs);
    return Pda.find(programId, [import_buffer18.Buffer.from("purchase_receipt", "utf8"), input.listingTradeState.toBuffer(), input.bidTradeState.toBuffer()]);
  }
  programId(programs) {
    return this.metaplex.programs().getAuctionHouse(programs).address;
  }
};

// ../../node_modules/@metaplex-foundation/js/dist/esm/plugins/auctionHouseModule/accounts.mjs
var import_mpl_auction_house11 = __toESM(require_mpl_auction_house(), 1);
var parseAuctioneerAccount = getAccountParsingFunction(import_mpl_auction_house11.Auctioneer);
var toAuctioneerAccount = getAccountParsingAndAssertingFunction(import_mpl_auction_house11.Auctioneer);
var parseAuctionHouseAccount = getAccountParsingFunction(import_mpl_auction_house11.AuctionHouse);
var toAuctionHouseAccount = getAccountParsingAndAssertingFunction(import_mpl_auction_house11.AuctionHouse);
var parseListingReceiptAccount = getAccountParsingFunction(import_mpl_auction_house11.ListingReceipt);
var toListingReceiptAccount = getAccountParsingAndAssertingFunction(import_mpl_auction_house11.ListingReceipt);
var parseBidReceiptAccount = getAccountParsingFunction(import_mpl_auction_house11.BidReceipt);
var toBidReceiptAccount = getAccountParsingAndAssertingFunction(import_mpl_auction_house11.BidReceipt);
var parsePurchaseReceiptAccount = getAccountParsingFunction(import_mpl_auction_house11.PurchaseReceipt);
var toPurchaseReceiptAccount = getAccountParsingAndAssertingFunction(import_mpl_auction_house11.PurchaseReceipt);

// ../../node_modules/@metaplex-foundation/js/dist/esm/plugins/auctionHouseModule/operations/findAuctionHouseByAddress.mjs
var Key87 = "FindAuctionHouseByAddressOperation";
var findAuctionHouseByAddressOperation = useOperation(Key87);
var findAuctionHouseByAddressOperationHandler = {
  handle: (operation, metaplex, scope) => __async(void 0, null, function* () {
    const {
      programs,
      commitment
    } = scope;
    const {
      address,
      auctioneerAuthority
    } = operation.input;
    const auctioneerPda = auctioneerAuthority ? metaplex.auctionHouse().pdas().auctioneer({
      auctionHouse: address,
      auctioneerAuthority,
      programs
    }) : void 0;
    const accountsToFetch = [address, auctioneerPda].filter((account) => !!account);
    const accounts = yield metaplex.rpc().getMultipleAccounts(accountsToFetch, commitment);
    scope.throwIfCanceled();
    const auctionHouseAccount = toAuctionHouseAccount(accounts[0]);
    const mintModel = yield metaplex.tokens().findMintByAddress({
      address: auctionHouseAccount.data.treasuryMint
    }, scope);
    scope.throwIfCanceled();
    if (!auctionHouseAccount.data.hasAuctioneer) {
      return toAuctionHouse(auctionHouseAccount, mintModel);
    }
    if (!accounts[1] || !accounts[1].exists) {
      throw new AuctioneerAuthorityRequiredError();
    }
    const auctioneerAccount = toAuctioneerAccount(accounts[1]);
    return toAuctionHouse(auctionHouseAccount, mintModel, auctioneerAccount);
  })
};

// ../../node_modules/@metaplex-foundation/js/dist/esm/plugins/auctionHouseModule/operations/findAuctionHouseByCreatorAndMint.mjs
var Key88 = "FindAuctionHouseByCreatorAndMintOperation";
var findAuctionHouseByCreatorAndMintOperation = useOperation(Key88);
var findAuctionHouseByCreatorAndMintOperationHandler = {
  handle: (operation, metaplex, scope) => __async(void 0, null, function* () {
    const {
      creator,
      treasuryMint
    } = operation.input;
    return metaplex.auctionHouse().findByAddress(__spreadValues({
      address: metaplex.auctionHouse().pdas().auctionHouse({
        creator,
        treasuryMint,
        programs: scope.programs
      })
    }, operation.input), scope);
  })
};

// ../../node_modules/@metaplex-foundation/js/dist/esm/plugins/auctionHouseModule/operations/findBidByReceipt.mjs
var Key89 = "FindBidByReceiptOperation";
var findBidByReceiptOperation = useOperation(Key89);
var findBidByReceiptOperationHandler = {
  handle: (operation, metaplex, scope) => __async(void 0, null, function* () {
    const {
      receiptAddress,
      auctionHouse
    } = operation.input;
    const account = toBidReceiptAccount(yield metaplex.rpc().getAccount(receiptAddress, scope.commitment));
    scope.throwIfCanceled();
    const lazyBid = toLazyBid(account, auctionHouse);
    return metaplex.auctionHouse().loadBid(__spreadValues({
      lazyBid
    }, operation.input), scope);
  })
};

// ../../node_modules/@metaplex-foundation/js/dist/esm/plugins/auctionHouseModule/operations/findBidByTradeState.mjs
var Key90 = "FindBidByTradeStateOperation";
var findBidByTradeStateOperation = useOperation(Key90);
var findBidByTradeStateOperationHandler = {
  handle: (operation, metaplex, scope) => __async(void 0, null, function* () {
    const {
      tradeStateAddress
    } = operation.input;
    const receiptAddress = metaplex.auctionHouse().pdas().bidReceipt({
      tradeState: tradeStateAddress,
      programs: scope.programs
    });
    return metaplex.auctionHouse().findBidByReceipt(__spreadValues({
      receiptAddress
    }, operation.input), scope);
  })
};

// ../../node_modules/@metaplex-foundation/js/dist/esm/plugins/auctionHouseModule/gpaBuilders/BidReceiptGpaBuilder.mjs
init_index_browser_esm();
var bidReceiptDiscriminator = [186, 150, 141, 135, 59, 122, 39, 99];
var PUBLIC_KEY_LENGTH = PublicKey.default.toBytes().byteLength;
var TRADE_STATE = bidReceiptDiscriminator.length;
var BOOKKEEPER = TRADE_STATE + PUBLIC_KEY_LENGTH;
var AUCTION_HOUSE = BOOKKEEPER + PUBLIC_KEY_LENGTH;
var BUYER = AUCTION_HOUSE + PUBLIC_KEY_LENGTH;
var METADATA = BUYER + PUBLIC_KEY_LENGTH;
var BidReceiptGpaBuilder = class extends GpaBuilder {
  whereDiscriminator(discrimator) {
    return this.where(0, Buffer.from(discrimator));
  }
  bidReceiptAccounts() {
    return this.whereDiscriminator(bidReceiptDiscriminator);
  }
  whereAuctionHouse(auctionHouseAddress) {
    return this.bidReceiptAccounts().where(AUCTION_HOUSE, auctionHouseAddress);
  }
  whereBuyer(buyerAddress) {
    return this.where(BUYER, buyerAddress);
  }
  whereMetadata(metadataAddress) {
    return this.where(METADATA, metadataAddress);
  }
};

// ../../node_modules/@metaplex-foundation/js/dist/esm/plugins/auctionHouseModule/operations/findBids.mjs
var Key91 = "FindBidsOperation";
var findBidsOperation = useOperation(Key91);
var findBidsOperationHandler = {
  handle: (operation, metaplex, scope) => __async(void 0, null, function* () {
    const {
      programs,
      commitment
    } = scope;
    const {
      auctionHouse,
      buyer,
      metadata,
      mint
    } = operation.input;
    const auctionHouseProgram = metaplex.programs().getAuctionHouse(programs);
    let bidQuery = new BidReceiptGpaBuilder(metaplex, auctionHouseProgram.address).mergeConfig({
      commitment
    }).whereAuctionHouse(auctionHouse.address);
    if (buyer) {
      bidQuery = bidQuery.whereBuyer(buyer);
    }
    if (metadata && !mint) {
      bidQuery = bidQuery.whereMetadata(metadata);
    }
    if (mint) {
      bidQuery = bidQuery.whereMetadata(metaplex.nfts().pdas().metadata({
        mint,
        programs
      }));
    }
    scope.throwIfCanceled();
    return bidQuery.getAndMap((account) => toLazyBid(toBidReceiptAccount(account), auctionHouse));
  })
};

// ../../node_modules/@metaplex-foundation/js/dist/esm/plugins/auctionHouseModule/operations/findListingByTradeState.mjs
var Key92 = "FindListingByTradeStateOperation";
var findListingByTradeStateOperation = useOperation(Key92);
var findListingByTradeStateOperationHandler = {
  handle: (operation, metaplex, scope) => __async(void 0, null, function* () {
    const {
      tradeStateAddress
    } = operation.input;
    const receiptAddress = metaplex.auctionHouse().pdas().listingReceipt({
      tradeState: tradeStateAddress,
      programs: scope.programs
    });
    return metaplex.auctionHouse().findListingByReceipt(__spreadValues({
      receiptAddress
    }, operation.input), scope);
  })
};

// ../../node_modules/@metaplex-foundation/js/dist/esm/plugins/auctionHouseModule/models/Listing.mjs
var isListing = (value) => typeof value === "object" && value.model === "listing" && !value.lazy;
function assertListing(value) {
  assert2(isListing(value), `Expected Listing type`);
}
var toListing = (account, auctionHouse, asset) => {
  const lazyListing = toLazyListing(account, auctionHouse);
  return __spreadProps(__spreadValues({}, lazyListing), {
    model: "listing",
    lazy: false,
    asset,
    tokens: amount(lazyListing.tokens, asset.mint.currency)
  });
};
var isLazyListing = (value) => typeof value === "object" && value.model === "listing" && value.lazy;
function assertLazyListing(value) {
  assert2(isLazyListing(value), `Expected LazyListing type`);
}
var toLazyListing = (account, auctionHouse) => {
  return {
    model: "listing",
    lazy: true,
    auctionHouse,
    tradeStateAddress: new Pda(account.data.tradeState, account.data.tradeStateBump),
    bookkeeperAddress: account.data.bookkeeper,
    sellerAddress: account.data.seller,
    metadataAddress: account.data.metadata,
    receiptAddress: new Pda(account.publicKey, account.data.bump),
    purchaseReceiptAddress: account.data.purchaseReceipt,
    // Data.
    price: auctionHouse.isNative ? lamports(account.data.price) : amount(account.data.price, auctionHouse.treasuryMint.currency),
    tokens: toBigNumber(account.data.tokenSize),
    createdAt: toDateTime(account.data.createdAt),
    canceledAt: toOptionDateTime(account.data.canceledAt)
  };
};

// ../../node_modules/@metaplex-foundation/js/dist/esm/plugins/auctionHouseModule/operations/findListingByReceipt.mjs
var Key93 = "FindListingByReceiptOperation";
var findListingByReceiptOperation = useOperation(Key93);
var findListingByReceiptOperationHandler = {
  handle: (operation, metaplex, scope) => __async(void 0, null, function* () {
    const {
      receiptAddress,
      auctionHouse
    } = operation.input;
    const account = toListingReceiptAccount(yield metaplex.rpc().getAccount(receiptAddress, scope.commitment));
    scope.throwIfCanceled();
    const lazyListing = toLazyListing(account, auctionHouse);
    return metaplex.auctionHouse().loadListing(__spreadValues({
      lazyListing
    }, operation.input), scope);
  })
};

// ../../node_modules/@metaplex-foundation/js/dist/esm/plugins/auctionHouseModule/gpaBuilders/ListingReceiptGpaBuilder.mjs
init_index_browser_esm();
var listingReceiptDiscriminator = [240, 71, 225, 94, 200, 75, 84, 231];
var PUBLIC_KEY_LENGTH2 = PublicKey.default.toBytes().byteLength;
var TRADE_STATE2 = listingReceiptDiscriminator.length;
var BOOKKEEPER2 = TRADE_STATE2 + PUBLIC_KEY_LENGTH2;
var AUCTION_HOUSE2 = BOOKKEEPER2 + PUBLIC_KEY_LENGTH2;
var SELLER = AUCTION_HOUSE2 + PUBLIC_KEY_LENGTH2;
var METADATA2 = SELLER + PUBLIC_KEY_LENGTH2;
var ListingReceiptGpaBuilder = class extends GpaBuilder {
  whereDiscriminator(discrimator) {
    return this.where(0, Buffer.from(discrimator));
  }
  listingReceiptAccounts() {
    return this.whereDiscriminator(listingReceiptDiscriminator);
  }
  whereAuctionHouse(auctionHouseAddress) {
    return this.listingReceiptAccounts().where(AUCTION_HOUSE2, auctionHouseAddress);
  }
  whereSeller(sellerAddress) {
    return this.where(SELLER, sellerAddress);
  }
  whereMetadata(metadataAddress) {
    return this.where(METADATA2, metadataAddress);
  }
};

// ../../node_modules/@metaplex-foundation/js/dist/esm/plugins/auctionHouseModule/operations/findListings.mjs
var Key94 = "FindListingsOperation";
var findListingsOperation = useOperation(Key94);
var findListingsOperationHandler = {
  handle: (operation, metaplex, scope) => __async(void 0, null, function* () {
    const {
      commitment,
      programs
    } = scope;
    const {
      auctionHouse,
      seller,
      metadata,
      mint
    } = operation.input;
    const auctionHouseProgram = metaplex.programs().getAuctionHouse(programs);
    let listingQuery = new ListingReceiptGpaBuilder(metaplex, auctionHouseProgram.address).mergeConfig({
      commitment
    }).whereAuctionHouse(auctionHouse.address);
    if (seller) {
      listingQuery = listingQuery.whereSeller(seller);
    }
    if (metadata && !mint) {
      listingQuery = listingQuery.whereMetadata(metadata);
    }
    if (mint) {
      listingQuery = listingQuery.whereMetadata(metaplex.nfts().pdas().metadata({
        mint,
        programs
      }));
    }
    scope.throwIfCanceled();
    return listingQuery.getAndMap((account) => toLazyListing(toListingReceiptAccount(account), auctionHouse));
  })
};

// ../../node_modules/@metaplex-foundation/js/dist/esm/plugins/auctionHouseModule/operations/findPurchaseByTradeState.mjs
var Key95 = "FindPurchaseByTradeStateOperation";
var findPurchaseByTradeStateOperation = useOperation(Key95);
var findPurchaseByTradeStateOperationHandler = {
  handle: (operation, metaplex, scope) => __async(void 0, null, function* () {
    const {
      sellerTradeState,
      buyerTradeState
    } = operation.input;
    const receiptAddress = metaplex.auctionHouse().pdas().purchaseReceipt({
      listingTradeState: sellerTradeState,
      bidTradeState: buyerTradeState,
      programs: scope.programs
    });
    return metaplex.auctionHouse().findPurchaseByReceipt(__spreadValues({
      receiptAddress
    }, operation.input), scope);
  })
};

// ../../node_modules/@metaplex-foundation/js/dist/esm/plugins/auctionHouseModule/models/Purchase.mjs
var isPurchase = (value) => typeof value === "object" && value.model === "purchase" && !value.lazy;
function assertPurchase(value) {
  assert2(isPurchase(value), `Expected Purchase type`);
}
var toPurchase = (account, auctionHouseModel, asset) => {
  const lazyPurchase = toLazyPurchase(account, auctionHouseModel);
  return __spreadProps(__spreadValues({}, lazyPurchase), {
    model: "purchase",
    lazy: false,
    asset,
    tokens: amount(lazyPurchase.tokens, asset.mint.currency)
  });
};
var isLazyPurchase = (value) => typeof value === "object" && value.model === "purchase" && value.lazy;
function assertLazyPurchase(value) {
  assert2(isLazyPurchase(value), `Expected LazyPurchase type`);
}
var toLazyPurchase = (account, auctionHouseModel) => {
  return {
    model: "purchase",
    lazy: true,
    auctionHouse: auctionHouseModel,
    buyerAddress: account.data.buyer,
    sellerAddress: account.data.seller,
    metadataAddress: account.data.metadata,
    bookkeeperAddress: account.data.bookkeeper,
    receiptAddress: account.publicKey,
    price: auctionHouseModel.isNative ? lamports(account.data.price) : amount(account.data.price, auctionHouseModel.treasuryMint.currency),
    tokens: toBigNumber(account.data.tokenSize),
    createdAt: toDateTime(account.data.createdAt)
  };
};

// ../../node_modules/@metaplex-foundation/js/dist/esm/plugins/auctionHouseModule/operations/findPurchaseByReceipt.mjs
var Key96 = "FindPurchaseByReceiptOperation";
var findPurchaseByReceiptOperation = useOperation(Key96);
var findPurchaseByReceiptOperationHandler = {
  handle: (operation, metaplex, scope) => __async(void 0, null, function* () {
    const {
      receiptAddress,
      auctionHouse
    } = operation.input;
    const account = toPurchaseReceiptAccount(yield metaplex.rpc().getAccount(receiptAddress, scope.commitment));
    scope.throwIfCanceled();
    const lazyPurchase = toLazyPurchase(account, auctionHouse);
    return metaplex.auctionHouse().loadPurchase(__spreadValues({
      lazyPurchase
    }, operation.input), scope);
  })
};

// ../../node_modules/@metaplex-foundation/js/dist/esm/plugins/auctionHouseModule/gpaBuilders/PurchaseReceiptGpaBuilder.mjs
init_index_browser_esm();
var purchaseReceiptDiscriminator = [79, 127, 222, 137, 154, 131, 150, 134];
var PUBLIC_KEY_LENGTH3 = PublicKey.default.toBytes().byteLength;
var BOOKKEEPER3 = purchaseReceiptDiscriminator.length;
var BUYER2 = BOOKKEEPER3 + PUBLIC_KEY_LENGTH3;
var SELLER2 = BUYER2 + PUBLIC_KEY_LENGTH3;
var AUCTION_HOUSE3 = SELLER2 + PUBLIC_KEY_LENGTH3;
var METADATA3 = AUCTION_HOUSE3 + PUBLIC_KEY_LENGTH3;
var PurchaseReceiptGpaBuilder = class extends GpaBuilder {
  whereDiscriminator(discrimator) {
    return this.where(0, Buffer.from(discrimator));
  }
  purchaseReceiptAccounts() {
    return this.whereDiscriminator(purchaseReceiptDiscriminator);
  }
  whereAuctionHouse(auctionHouseAddress) {
    return this.purchaseReceiptAccounts().where(AUCTION_HOUSE3, auctionHouseAddress);
  }
  whereBuyer(buyerAddress) {
    return this.where(BUYER2, buyerAddress);
  }
  whereSeller(sellerAddress) {
    return this.where(SELLER2, sellerAddress);
  }
  whereMetadata(metadataAddress) {
    return this.where(METADATA3, metadataAddress);
  }
};

// ../../node_modules/@metaplex-foundation/js/dist/esm/plugins/auctionHouseModule/operations/findPurchases.mjs
var Key97 = "FindPurchasesOperation";
var findPurchasesOperation = useOperation(Key97);
var findPurchasesOperationHandler = {
  handle: (operation, metaplex, scope) => __async(void 0, null, function* () {
    const {
      programs,
      commitment
    } = scope;
    const {
      auctionHouse,
      buyer,
      seller,
      metadata,
      mint
    } = operation.input;
    const auctionHouseProgram = metaplex.programs().getAuctionHouse(programs);
    let purchaseQuery = new PurchaseReceiptGpaBuilder(metaplex, auctionHouseProgram.address).mergeConfig({
      commitment
    }).whereAuctionHouse(auctionHouse.address);
    if (Object.keys(operation.input).length > 3) {
      throw new FindAllSupportsOnlyThreeFiltersMaxError();
    }
    if (buyer) {
      purchaseQuery = purchaseQuery.whereBuyer(buyer);
    }
    if (seller) {
      purchaseQuery = purchaseQuery.whereSeller(seller);
    }
    if (metadata && !mint) {
      purchaseQuery = purchaseQuery.whereMetadata(metadata);
    }
    if (mint) {
      purchaseQuery = purchaseQuery.whereMetadata(metaplex.nfts().pdas().metadata({
        mint,
        programs
      }));
    }
    scope.throwIfCanceled();
    return purchaseQuery.getAndMap((account) => toLazyPurchase(toPurchaseReceiptAccount(account), auctionHouse));
  })
};

// ../../node_modules/@metaplex-foundation/js/dist/esm/plugins/auctionHouseModule/operations/getBuyerBalance.mjs
var Key98 = "GetBuyerBalanceOperation";
var getBuyerBalanceOperation = useOperation(Key98);
var getBuyerBalanceOperationHandler = {
  handle: (operation, metaplex, scope) => __async(void 0, null, function* () {
    const {
      auctionHouse,
      buyerAddress
    } = operation.input;
    const buyerEscrow = metaplex.auctionHouse().pdas().buyerEscrow({
      auctionHouse,
      buyer: buyerAddress,
      programs: scope.programs
    });
    return metaplex.rpc().getBalance(buyerEscrow, scope.commitment);
  })
};

// ../../node_modules/@metaplex-foundation/js/dist/esm/plugins/auctionHouseModule/operations/loadBid.mjs
var Key99 = "LoadBidOperation";
var loadBidOperation = useOperation(Key99);
var loadBidOperationHandler = {
  handle: (operation, metaplex, scope) => __async(void 0, null, function* () {
    const {
      lazyBid,
      loadJsonMetadata = true
    } = operation.input;
    const bid = __spreadProps(__spreadValues({}, lazyBid), {
      model: "bid",
      lazy: false
    });
    if (lazyBid.tokenAddress) {
      const asset2 = yield metaplex.nfts().findByToken({
        token: lazyBid.tokenAddress,
        loadJsonMetadata
      }, scope);
      scope.throwIfCanceled();
      assertNftOrSftWithToken(asset2);
      assert2(asset2.metadataAddress.equals(lazyBid.metadataAddress), `Asset metadata address must be ${lazyBid.metadataAddress}`);
      return __spreadProps(__spreadValues({}, bid), {
        isPublic: false,
        asset: asset2,
        tokens: amount(lazyBid.tokens, asset2.mint.currency)
      });
    }
    const asset = yield metaplex.nfts().findByMetadata({
      metadata: lazyBid.metadataAddress,
      loadJsonMetadata
    }, scope);
    scope.throwIfCanceled();
    return __spreadProps(__spreadValues({}, bid), {
      isPublic: true,
      asset,
      tokens: amount(lazyBid.tokens, asset.mint.currency)
    });
  })
};

// ../../node_modules/@metaplex-foundation/js/dist/esm/plugins/auctionHouseModule/operations/loadListing.mjs
var Key100 = "LoadListingOperation";
var loadListingOperation = useOperation(Key100);
var loadListingOperationHandler = {
  handle: (operation, metaplex, scope) => __async(void 0, null, function* () {
    const {
      lazyListing,
      loadJsonMetadata = true
    } = operation.input;
    const asset = yield metaplex.nfts().findByMetadata({
      metadata: lazyListing.metadataAddress,
      tokenOwner: lazyListing.sellerAddress,
      loadJsonMetadata
    }, scope);
    assertNftOrSftWithToken(asset);
    return __spreadProps(__spreadValues({}, lazyListing), {
      model: "listing",
      lazy: false,
      asset,
      tokens: amount(lazyListing.tokens, asset.mint.currency)
    });
  })
};

// ../../node_modules/@metaplex-foundation/js/dist/esm/plugins/auctionHouseModule/operations/loadPurchase.mjs
var Key101 = "LoadPurchaseOperation";
var loadPurchaseOperation = useOperation(Key101);
var loadPurchaseOperationHandler = {
  handle: (operation, metaplex, scope) => __async(void 0, null, function* () {
    const {
      lazyPurchase,
      loadJsonMetadata = true
    } = operation.input;
    const asset = yield metaplex.nfts().findByMetadata({
      metadata: lazyPurchase.metadataAddress,
      tokenOwner: lazyPurchase.buyerAddress,
      loadJsonMetadata
    }, scope);
    assertNftOrSftWithToken(asset);
    return __spreadProps(__spreadValues({}, lazyPurchase), {
      lazy: false,
      isPublic: false,
      asset,
      tokens: amount(lazyPurchase.tokens, asset.mint.currency)
    });
  })
};

// ../../node_modules/@metaplex-foundation/js/dist/esm/plugins/auctionHouseModule/operations/withdrawFromFeeAccount.mjs
var import_mpl_auction_house12 = __toESM(require_mpl_auction_house(), 1);
var Key102 = "WithdrawFromFeeAccountOperation";
var withdrawFromFeeAccountOperation = useOperation(Key102);
var withdrawFromFeeAccountOperationHandler = {
  handle: (operation, metaplex, scope) => __async(void 0, null, function* () {
    return withdrawFromFeeAccountBuilder(metaplex, operation.input, scope).sendAndConfirm(metaplex, scope.confirmOptions);
  })
};
var withdrawFromFeeAccountBuilder = (metaplex, params, options = {}) => {
  const {
    payer = metaplex.rpc().getDefaultFeePayer()
  } = options;
  const {
    auctionHouse,
    amount: amount2,
    instructionKey,
    authority = metaplex.identity()
  } = params;
  const accounts = {
    authority: auctionHouse.authorityAddress,
    feeWithdrawalDestination: auctionHouse.feeWithdrawalDestinationAddress,
    auctionHouse: auctionHouse.address,
    auctionHouseFeeAccount: auctionHouse.feeAccountAddress
  };
  const withdrawFromFeeInstruction = (0, import_mpl_auction_house12.createWithdrawFromFeeInstruction)(accounts, {
    amount: amount2.basisPoints
  });
  return TransactionBuilder.make().setFeePayer(payer).add({
    instruction: withdrawFromFeeInstruction,
    signers: [authority],
    key: instructionKey ?? "withdrawFromFeeAccount"
  });
};

// ../../node_modules/@metaplex-foundation/js/dist/esm/plugins/auctionHouseModule/operations/withdrawFromTreasuryAccount.mjs
var import_mpl_auction_house13 = __toESM(require_mpl_auction_house(), 1);
var Key103 = "WithdrawFromTreasuryAccountOperation";
var withdrawFromTreasuryAccountOperation = useOperation(Key103);
var withdrawFromTreasuryAccountOperationHandler = {
  handle: (operation, metaplex, scope) => __async(void 0, null, function* () {
    return withdrawFromTreasuryAccountBuilder(metaplex, operation.input, scope).sendAndConfirm(metaplex, scope.confirmOptions);
  })
};
var withdrawFromTreasuryAccountBuilder = (metaplex, params, options = {}) => {
  const {
    programs,
    payer = metaplex.rpc().getDefaultFeePayer()
  } = options;
  const {
    auctionHouse,
    amount: amount2,
    instructionKey,
    authority = metaplex.identity()
  } = params;
  const auctionHouseTreasury = metaplex.auctionHouse().pdas().treasury({
    auctionHouse: auctionHouse.address,
    programs
  });
  const accounts = {
    treasuryMint: auctionHouse.treasuryMint.address,
    authority: auctionHouse.authorityAddress,
    treasuryWithdrawalDestination: auctionHouse.treasuryWithdrawalDestinationAddress,
    auctionHouseTreasury,
    auctionHouse: auctionHouse.address
  };
  const withdrawFromTreasuryInstruction = (0, import_mpl_auction_house13.createWithdrawFromTreasuryInstruction)(accounts, {
    amount: amount2.basisPoints
  });
  return TransactionBuilder.make().setFeePayer(payer).add({
    instruction: withdrawFromTreasuryInstruction,
    signers: [authority],
    key: instructionKey ?? "withdrawFromTreasuryAccount"
  });
};

// ../../node_modules/@metaplex-foundation/js/dist/esm/plugins/auctionHouseModule/AuctionHouseClient.mjs
var AuctionHouseClient = class {
  constructor(metaplex) {
    this.metaplex = metaplex;
  }
  /**
   * You may use the `builders()` client to access the
   * underlying Transaction Builders of this module.
   *
   * ```ts
   * const buildersClient = metaplex.auctions().builders();
   * ```
   */
  builders() {
    return new AuctionHouseBuildersClient(this.metaplex);
  }
  /**
   * You may use the `pdas()` client to build PDAs related to this module.
   *
   * ```ts
   * const pdasClient = metaplex.auctionHouse().pdas();
   * ```
   */
  pdas() {
    return new AuctionHousePdasClient(this.metaplex);
  }
  /** {@inheritDoc createBidOperation} */
  bid(input, options) {
    return this.metaplex.operations().execute(createBidOperation(input), options);
  }
  /** {@inheritDoc directBuyOperation} */
  buy(input, options) {
    return this.metaplex.operations().execute(directBuyOperation(input), options);
  }
  /** {@inheritDoc cancelBidOperation} */
  cancelBid(input, options) {
    return this.metaplex.operations().execute(cancelBidOperation(input), options);
  }
  /** {@inheritDoc cancelListingOperation} */
  cancelListing(input, options) {
    return this.metaplex.operations().execute(cancelListingOperation(input), options);
  }
  /** {@inheritDoc createAuctionHouseOperation} */
  create(input, options) {
    return this.metaplex.operations().execute(createAuctionHouseOperation(input), options);
  }
  /** {@inheritDoc depositToBuyerAccountOperation} */
  depositToBuyerAccount(input, options) {
    return this.metaplex.operations().execute(depositToBuyerAccountOperation(input), options);
  }
  /** {@inheritDoc executeSaleOperation} */
  executeSale(input, options) {
    return this.metaplex.operations().execute(executeSaleOperation(input), options);
  }
  /** {@inheritDoc findAuctionHouseByAddressOperation} */
  findByAddress(input, options) {
    return this.metaplex.operations().execute(findAuctionHouseByAddressOperation(input), options);
  }
  /** {@inheritDoc findAuctionHouseByCreatorAndMintOperation} */
  findByCreatorAndMint(input, options) {
    return this.metaplex.operations().execute(findAuctionHouseByCreatorAndMintOperation(input), options);
  }
  /** {@inheritDoc findBidByReceiptOperation} */
  findBidByReceipt(input, options) {
    return this.metaplex.operations().execute(findBidByReceiptOperation(input), options);
  }
  /** {@inheritDoc findBidByTradeStateOperation} */
  findBidByTradeState(input, options) {
    return this.metaplex.operations().execute(findBidByTradeStateOperation(input), options);
  }
  /** {@inheritDoc findBidsOperation} */
  findBids(input, options) {
    return this.metaplex.operations().execute(findBidsOperation(input), options);
  }
  /** {@inheritDoc findListingByTradeStateOperation} */
  findListingByTradeState(input, options) {
    return this.metaplex.operations().execute(findListingByTradeStateOperation(input), options);
  }
  /** {@inheritDoc findListingByReceiptOperation} */
  findListingByReceipt(input, options) {
    return this.metaplex.operations().execute(findListingByReceiptOperation(input), options);
  }
  /** {@inheritDoc findListingsOperation} */
  findListings(input, options) {
    return this.metaplex.operations().execute(findListingsOperation(input), options);
  }
  /** {@inheritDoc findPurchaseByTradeStateOperation} */
  findPurchaseByTradeState(input, options) {
    return this.metaplex.operations().execute(findPurchaseByTradeStateOperation(input), options);
  }
  /** {@inheritDoc findPurchaseByReceiptOperation} */
  findPurchaseByReceipt(input, options) {
    return this.metaplex.operations().execute(findPurchaseByReceiptOperation(input), options);
  }
  /** {@inheritDoc findPurchasesOperation} */
  findPurchases(input, options) {
    return this.metaplex.operations().execute(findPurchasesOperation(input), options);
  }
  /** {@inheritDoc getBuyerBalanceOperation} */
  getBuyerBalance(input, options) {
    return this.metaplex.operations().execute(getBuyerBalanceOperation(input), options);
  }
  /** {@inheritDoc createListingOperation} */
  list(input, options) {
    return this.metaplex.operations().execute(createListingOperation(input), options);
  }
  /** {@inheritDoc loadBidOperation} */
  loadBid(input, options) {
    return this.metaplex.operations().execute(loadBidOperation(input), options);
  }
  /** {@inheritDoc loadListingOperation} */
  loadListing(input, options) {
    return this.metaplex.operations().execute(loadListingOperation(input), options);
  }
  /** {@inheritDoc loadPurchaseOperation} */
  loadPurchase(input, options) {
    return this.metaplex.operations().execute(loadPurchaseOperation(input), options);
  }
  /** {@inheritDoc directSellOperation} */
  sell(input, options) {
    return this.metaplex.operations().execute(directSellOperation(input), options);
  }
  /** {@inheritDoc updateAuctionHouseOperation} */
  update(input, options) {
    return this.metaplex.operations().execute(updateAuctionHouseOperation(input), options);
  }
  /** {@inheritDoc withdrawFromBuyerAccountOperation} */
  withdrawFromBuyerAccount(input, options) {
    return this.metaplex.operations().execute(withdrawFromBuyerAccountOperation(input), options);
  }
  /** {@inheritDoc withdrawFromFeeAccountOperation} */
  withdrawFromFeeAccount(input, options) {
    return this.metaplex.operations().execute(withdrawFromFeeAccountOperation(input), options);
  }
  /** {@inheritDoc withdrawFromTreasuryAccountOperation} */
  withdrawFromTreasuryAccount(input, options) {
    return this.metaplex.operations().execute(withdrawFromTreasuryAccountOperation(input), options);
  }
};

// ../../node_modules/@metaplex-foundation/js/dist/esm/plugins/auctionHouseModule/plugin.mjs
var auctionHouseModule = () => ({
  install(metaplex) {
    const auctionHouseProgram = {
      name: "AuctionHouseProgram",
      address: import_mpl_auction_house14.PROGRAM_ID,
      errorResolver: (error2) => import_mpl_auction_house14.cusper.errorFromProgramLogs(error2.logs, false)
    };
    metaplex.programs().register(auctionHouseProgram);
    metaplex.programs().getAuctionHouse = function(programs) {
      return this.get(auctionHouseProgram.name, programs);
    };
    const op = metaplex.operations();
    op.register(cancelBidOperation, cancelBidOperationHandler);
    op.register(cancelListingOperation, cancelListingOperationHandler);
    op.register(createAuctionHouseOperation, createAuctionHouseOperationHandler);
    op.register(createBidOperation, createBidOperationHandler);
    op.register(createListingOperation, createListingOperationHandler);
    op.register(depositToBuyerAccountOperation, depositToBuyerAccountOperationHandler);
    op.register(directBuyOperation, directBuyOperationHandler);
    op.register(directSellOperation, directSellOperationHandler);
    op.register(executeSaleOperation, executeSaleOperationHandler);
    op.register(findAuctionHouseByAddressOperation, findAuctionHouseByAddressOperationHandler);
    op.register(findAuctionHouseByCreatorAndMintOperation, findAuctionHouseByCreatorAndMintOperationHandler);
    op.register(findBidByReceiptOperation, findBidByReceiptOperationHandler);
    op.register(findBidByTradeStateOperation, findBidByTradeStateOperationHandler);
    op.register(findBidsOperation, findBidsOperationHandler);
    op.register(findListingByReceiptOperation, findListingByReceiptOperationHandler);
    op.register(findListingByTradeStateOperation, findListingByTradeStateOperationHandler);
    op.register(findListingsOperation, findListingsOperationHandler);
    op.register(findPurchaseByReceiptOperation, findPurchaseByReceiptOperationHandler);
    op.register(findPurchaseByTradeStateOperation, findPurchaseByTradeStateOperationHandler);
    op.register(findPurchasesOperation, findPurchasesOperationHandler);
    op.register(getBuyerBalanceOperation, getBuyerBalanceOperationHandler);
    op.register(loadBidOperation, loadBidOperationHandler);
    op.register(loadListingOperation, loadListingOperationHandler);
    op.register(loadPurchaseOperation, loadPurchaseOperationHandler);
    op.register(updateAuctionHouseOperation, updateAuctionHouseOperationHandler);
    op.register(withdrawFromBuyerAccountOperation, withdrawFromBuyerAccountOperationHandler);
    op.register(withdrawFromFeeAccountOperation, withdrawFromFeeAccountOperationHandler);
    op.register(withdrawFromTreasuryAccountOperation, withdrawFromTreasuryAccountOperationHandler);
    metaplex.auctionHouse = function() {
      return new AuctionHouseClient(this);
    };
  }
});

// ../../node_modules/@metaplex-foundation/js/dist/esm/plugins/corePlugins/plugin.mjs
var corePlugins = () => ({
  install(metaplex) {
    metaplex.use(identityModule());
    metaplex.use(storageModule());
    metaplex.use(rpcModule());
    metaplex.use(operationModule());
    metaplex.use(programModule());
    metaplex.use(utilsModule());
    metaplex.use(guestIdentity());
    metaplex.use(irysStorage());
    metaplex.use(systemModule());
    metaplex.use(tokenModule());
    metaplex.use(nftModule());
    metaplex.use(candyMachineV2Module());
    metaplex.use(candyMachineModule());
    metaplex.use(auctionHouseModule());
  }
});

// ../../node_modules/@metaplex-foundation/js/dist/esm/Metaplex.mjs
var Metaplex = class {
  /** The connection object from Solana's SDK. */
  /** The cluster in which the connection endpoint belongs to. */
  constructor(connection, options = {}) {
    this.connection = connection;
    this.cluster = options.cluster ?? resolveClusterFromConnection(connection);
    this.use(corePlugins());
  }
  static make(connection, options = {}) {
    return new this(connection, options);
  }
  use(plugin) {
    plugin.install(this);
    return this;
  }
};

// ../../node_modules/@metaplex-foundation/js/dist/esm/plugins/derivedIdentity/DerivedIdentityClient.mjs
var import_buffer19 = __toESM(require_buffer2(), 1);
init_sha512();
init_index_browser_esm();

// ../../node_modules/@metaplex-foundation/js/dist/esm/plugins/derivedIdentity/errors.mjs
var DerivedIdentityError = class extends MetaplexError {
  constructor(message, cause) {
    super(message, "plugin", "Derived Identity", cause);
    _defineProperty(this, "name", "DerivedIdentityError");
  }
};
var UninitializedDerivedIdentityError = class extends DerivedIdentityError {
  constructor() {
    const message = 'The derived identity module has not been initialized. Before using the derived identity, you must provide a message that will be used to derived a Keypair from the current identity. You may do that by calling "metaplex.derivedIdentity().deriveFrom(message)".';
    super(message);
  }
};

// ../../node_modules/@metaplex-foundation/js/dist/esm/plugins/derivedIdentity/DerivedIdentityClient.mjs
var DerivedIdentityClient = class {
  constructor(metaplex) {
    _defineProperty(this, "originalSigner", null);
    _defineProperty(this, "derivedKeypair", null);
    this.metaplex = metaplex;
  }
  get publicKey() {
    this.assertInitialized();
    return this.derivedKeypair.publicKey;
  }
  get secretKey() {
    this.assertInitialized();
    return this.derivedKeypair.secretKey;
  }
  get originalPublicKey() {
    this.assertInitialized();
    return this.originalSigner.publicKey;
  }
  deriveFrom(message, originalSigner) {
    return __async(this, null, function* () {
      this.originalSigner = originalSigner ?? this.metaplex.identity().driver();
      const signature = yield this.originalSigner.signMessage(import_buffer19.Buffer.from(message));
      const seeds = sha512(signature).slice(0, 32);
      this.derivedKeypair = Keypair.fromSeed(seeds);
    });
  }
  fund(amount2) {
    this.assertInitialized();
    return this.metaplex.system().transferSol({
      from: this.originalSigner,
      to: this.derivedKeypair.publicKey,
      amount: amount2
    }, {
      payer: this.originalSigner
    });
  }
  withdraw(amount2) {
    this.assertInitialized();
    return this.metaplex.system().transferSol({
      from: this.derivedKeypair,
      to: this.originalSigner.publicKey,
      amount: amount2
    }, {
      payer: this.derivedKeypair
    });
  }
  withdrawAll() {
    return __async(this, null, function* () {
      this.assertInitialized();
      const balance = yield this.metaplex.rpc().getBalance(this.derivedKeypair.publicKey);
      const transactionFee = this.metaplex.utils().estimateTransactionFee();
      return this.withdraw(subtractAmounts(balance, transactionFee));
    });
  }
  close() {
    this.originalSigner = null;
    this.derivedKeypair = null;
  }
  signMessage(message) {
    return __async(this, null, function* () {
      return sync.sign(message, this.secretKey);
    });
  }
  signTransaction(transaction) {
    return __async(this, null, function* () {
      transaction.partialSign(this);
      return transaction;
    });
  }
  signAllTransactions(transactions) {
    return __async(this, null, function* () {
      return Promise.all(transactions.map((transaction) => this.signTransaction(transaction)));
    });
  }
  verifyMessage(message, signature) {
    return sync.verify(message, signature, this.publicKey.toBytes());
  }
  equals(that) {
    if (isSigner(that)) {
      that = that.publicKey;
    }
    return this.publicKey.equals(that);
  }
  assertInitialized() {
    if (this.derivedKeypair === null || this.originalSigner === null) {
      throw new UninitializedDerivedIdentityError();
    }
  }
};

// ../../node_modules/@metaplex-foundation/js/dist/esm/plugins/derivedIdentity/plugin.mjs
var derivedIdentity = () => ({
  install(metaplex) {
    const derivedIdentityClient = new DerivedIdentityClient(metaplex);
    metaplex.derivedIdentity = () => derivedIdentityClient;
  }
});

// ../../node_modules/@metaplex-foundation/js/dist/esm/plugins/keypairIdentity/plugin.mjs
var keypairIdentity = (keypair) => ({
  install(metaplex) {
    metaplex.identity().setDriver(new KeypairIdentityDriver(keypair));
  }
});

// ../../node_modules/@metaplex-foundation/js/dist/esm/plugins/mockStorage/MockStorageDriver.mjs
var DEFAULT_BASE_URL = "https://mockstorage.example.com/";
var DEFAULT_COST_PER_BYTE = 1;
var MockStorageDriver = class {
  constructor(options) {
    _defineProperty(this, "cache", {});
    this.baseUrl = options?.baseUrl ?? DEFAULT_BASE_URL;
    this.costPerByte = toBigNumber(options?.costPerByte != null ? options?.costPerByte : DEFAULT_COST_PER_BYTE);
  }
  getUploadPrice(bytes) {
    return __async(this, null, function* () {
      return lamports(this.costPerByte.muln(bytes));
    });
  }
  upload(file) {
    return __async(this, null, function* () {
      const uri = `${this.baseUrl}${file.uniqueName}`;
      this.cache[uri] = file;
      return uri;
    });
  }
  download(uri) {
    return __async(this, null, function* () {
      const file = this.cache[uri];
      if (!file) {
        throw new AssetNotFoundError(uri);
      }
      return file;
    });
  }
};

// ../../node_modules/@metaplex-foundation/js/dist/esm/plugins/mockStorage/plugin.mjs
var mockStorage = (options) => ({
  install(metaplex) {
    metaplex.storage().setDriver(new MockStorageDriver(options));
  }
});

// ../../node_modules/@metaplex-foundation/js/dist/esm/plugins/nftModule/pdas.mjs
var import_buffer20 = __toESM(require_buffer2(), 1);
var import_mpl_token_metadata32 = __toESM(require_mpl_token_metadata(), 1);
var findMetadataPda = (mint, programId = import_mpl_token_metadata32.PROGRAM_ID) => {
  return Pda.find(programId, [import_buffer20.Buffer.from("metadata", "utf8"), programId.toBuffer(), mint.toBuffer()]);
};
var findMasterEditionV2Pda = (mint, programId = import_mpl_token_metadata32.PROGRAM_ID) => {
  return Pda.find(programId, [import_buffer20.Buffer.from("metadata", "utf8"), programId.toBuffer(), mint.toBuffer(), import_buffer20.Buffer.from("edition", "utf8")]);
};
var findEditionPda = (mint, programId = import_mpl_token_metadata32.PROGRAM_ID) => {
  return Pda.find(programId, [import_buffer20.Buffer.from("metadata", "utf8"), programId.toBuffer(), mint.toBuffer(), import_buffer20.Buffer.from("edition", "utf8")]);
};
var findEditionMarkerPda = (mint, edition, programId = import_mpl_token_metadata32.PROGRAM_ID) => {
  return Pda.find(programId, [import_buffer20.Buffer.from("metadata", "utf8"), programId.toBuffer(), mint.toBuffer(), import_buffer20.Buffer.from("edition", "utf8"), import_buffer20.Buffer.from(edition.div(toBigNumber(248)).toString())]);
};
var findCollectionAuthorityRecordPda = (mint, collectionAuthority, programId = import_mpl_token_metadata32.PROGRAM_ID) => {
  return Pda.find(programId, [import_buffer20.Buffer.from("metadata", "utf8"), programId.toBuffer(), mint.toBuffer(), import_buffer20.Buffer.from("collection_authority", "utf8"), collectionAuthority.toBuffer()]);
};
var findUseAuthorityRecordPda = (mint, useAuthority, programId = import_mpl_token_metadata32.PROGRAM_ID) => {
  return Pda.find(programId, [import_buffer20.Buffer.from("metadata", "utf8"), programId.toBuffer(), mint.toBuffer(), import_buffer20.Buffer.from("user", "utf8"), useAuthority.toBuffer()]);
};
var findProgramAsBurnerPda = (programId = import_mpl_token_metadata32.PROGRAM_ID) => {
  return Pda.find(programId, [import_buffer20.Buffer.from("metadata", "utf8"), programId.toBuffer(), import_buffer20.Buffer.from("burn", "utf8")]);
};

// ../../node_modules/@metaplex-foundation/js/dist/esm/plugins/walletAdapterIdentity/WalletAdapterIdentityDriver.mjs
var WalletAdapterIdentityDriver = class {
  constructor(walletAdapter) {
    this.walletAdapter = walletAdapter;
  }
  get publicKey() {
    if (!this.walletAdapter.publicKey) {
      throw new UninitializedWalletAdapterError();
    }
    return this.walletAdapter.publicKey;
  }
  signMessage(message) {
    return __async(this, null, function* () {
      if (this.walletAdapter.signMessage === void 0) {
        throw new OperationNotSupportedByWalletAdapterError("signMessage");
      }
      return this.walletAdapter.signMessage(message);
    });
  }
  signTransaction(transaction) {
    return __async(this, null, function* () {
      if (this.walletAdapter.signTransaction === void 0) {
        throw new OperationNotSupportedByWalletAdapterError("signTransaction");
      }
      return this.walletAdapter.signTransaction(transaction);
    });
  }
  signAllTransactions(transactions) {
    return __async(this, null, function* () {
      if (this.walletAdapter.signAllTransactions === void 0) {
        throw new OperationNotSupportedByWalletAdapterError("signAllTransactions");
      }
      return this.walletAdapter.signAllTransactions(transactions);
    });
  }
};

// ../../node_modules/@metaplex-foundation/js/dist/esm/plugins/walletAdapterIdentity/plugin.mjs
var walletAdapterIdentity = (walletAdapter) => ({
  install(metaplex) {
    metaplex.identity().setDriver(new WalletAdapterIdentityDriver(walletAdapter));
  }
});

// ../../node_modules/@metaplex-foundation/js/dist/esm/index.mjs
init_index_browser_esm();

// ../../node_modules/@metaplex-foundation/js/dist/esm/utils/log.mjs
var import_debug = __toESM(require_browser2(), 1);
var logErrorDebug = (0, import_debug.default)("mp-sdk:error");
var logInfoDebug = (0, import_debug.default)("mp-sdk:info");
var logDebug = (0, import_debug.default)("mp-sdk:debug");
var logTrace = (0, import_debug.default)("mp-sdk:trace");
var logError = logErrorDebug.enabled ? logErrorDebug : console.error.bind(console);
var logInfo = logInfoDebug.enabled ? logInfoDebug : console.log.bind(console);

// ../../node_modules/@metaplex-foundation/js/dist/esm/utils/merkle.mjs
var import_merkletreejs = __toESM(require_dist(), 1);
init_sha3();
var getMerkleTree = (data) => {
  return new import_merkletreejs.MerkleTree(data.map(keccak_256), keccak_256, {
    sortPairs: true
  });
};
var getMerkleRoot = (data) => {
  return getMerkleTree(data).getRoot();
};
var getMerkleProof = (data, leaf, index) => {
  return getMerkleTree(data).getProof(Buffer.from(keccak_256(leaf)), index).map((proofItem) => proofItem.data);
};
var getMerkleProofAtIndex = (data, index) => {
  return getMerkleProof(data, data[index], index);
};

// ../../node_modules/@metaplex-foundation/js/dist/esm/utils/Task.mjs
var import_eventemitter32 = __toESM(require_eventemitter3(), 1);
var Task = class {
  constructor(callback, children = [], context = {}) {
    _defineProperty(this, "status", "pending");
    _defineProperty(this, "result", void 0);
    _defineProperty(this, "error", void 0);
    this.callback = callback;
    this.children = children;
    this.context = context;
    this.eventEmitter = new import_eventemitter32.default.EventEmitter();
  }
  run() {
    return __async(this, arguments, function* (options = {}, ...inputs) {
      if (this.isRunning()) {
        throw new TaskIsAlreadyRunningError();
      }
      if (this.isPending() || (options.force ?? false)) {
        return this.forceRun(options, ...inputs);
      }
      if (this.isSuccessful()) {
        return this.getResult();
      }
      throw this.getError();
    });
  }
  forceRun() {
    return __async(this, arguments, function* (options = {}, ...inputs) {
      const disposable = new Disposable(options.signal ?? new AbortController().signal);
      disposable.onCancel((cancelError) => {
        this.setStatus("canceled");
        this.error = cancelError;
      });
      return disposable.run((scope) => __async(this, null, function* () {
        const {
          isCanceled,
          throwIfCanceled
        } = scope;
        try {
          this.setStatus("running");
          this.result = void 0;
          this.error = void 0;
          this.result = yield Promise.resolve(this.callback(scope, ...inputs));
          throwIfCanceled();
          this.setStatus("successful");
          return this.result;
        } catch (newError) {
          this.error = newError;
          this.result = void 0;
          this.setStatus(isCanceled() ? "canceled" : "failed");
          throw this.error;
        }
      }));
    });
  }
  loadWith(preloadedResult) {
    this.setStatus("successful");
    this.result = preloadedResult;
    this.error = void 0;
    return this;
  }
  reset() {
    this.setStatus("pending");
    this.result = void 0;
    this.error = void 0;
    return this;
  }
  setChildren(children) {
    this.children = children;
    return this;
  }
  getChildren() {
    return this.children;
  }
  getDescendants() {
    return this.children.flatMap((child) => [child, ...child.getDescendants()]);
  }
  setContext(context) {
    this.context = context;
    return this;
  }
  getContext() {
    return this.context;
  }
  getStatus() {
    return this.status;
  }
  getResult() {
    return this.result;
  }
  getError() {
    return this.error;
  }
  isPending() {
    return this.status === "pending";
  }
  isRunning() {
    return this.status === "running";
  }
  isCompleted() {
    return this.status !== "pending" && this.status !== "running";
  }
  isSuccessful() {
    return this.status === "successful";
  }
  isFailed() {
    return this.status === "failed";
  }
  isCanceled() {
    return this.status === "canceled";
  }
  onStatusChange(callback) {
    this.eventEmitter.on("statusChange", callback);
    return this;
  }
  onStatusChangeTo(status, callback) {
    return this.onStatusChange((newStatus) => status === newStatus ? callback() : void 0);
  }
  onSuccess(callback) {
    return this.onStatusChangeTo("successful", callback);
  }
  onFailure(callback) {
    return this.onStatusChangeTo("failed", callback);
  }
  onCancel(callback) {
    return this.onStatusChangeTo("canceled", callback);
  }
  setStatus(newStatus) {
    if (this.status === newStatus)
      return;
    this.status = newStatus;
    this.eventEmitter.emit("statusChange", newStatus);
  }
};
export {
  AccountNotFoundError,
  AssertionError2 as AssertionError,
  AssetNotFoundError,
  AssetUploadFailedError,
  AuctionHouseBuildersClient,
  AuctionHouseClient,
  AuctionHouseError,
  AuctionHousePdasClient,
  AuctioneerAuthorityRequiredError,
  AuctioneerPartialSaleNotSupportedError,
  BidAndListingHaveDifferentAuctionHousesError,
  BidAndListingHaveDifferentMintsError,
  CanceledBidIsNotAllowedError,
  CanceledListingIsNotAllowedError,
  CandyGuardRequiredOnCandyMachineError,
  CandyMachineBotTaxError,
  CandyMachineBuildersClient,
  CandyMachineCannotAddAmountError,
  CandyMachineClient,
  CandyMachineGuardsClient,
  CandyMachineIsFullError,
  CandyMachineItemTextTooLongError,
  CandyMachinePdasClient,
  CandyMachineV2AddItemConstraintsViolatedError,
  CandyMachineV2BotTaxError,
  CandyMachineV2CannotAddAmountError,
  CandyMachineV2EndedError,
  CandyMachineV2Error,
  CandyMachineV2GpaBuilder,
  CandyMachineV2IsEmptyError,
  CandyMachineV2IsFullError,
  CandyMachineV2NotLiveError,
  CandyMachineV2Program,
  CandyMachineV3Error,
  CandyMachinesV2BuildersClient,
  CandyMachinesV2Client,
  CreateListingRequiresSignerError,
  CurrencyMismatchError,
  DelegateRoleRequiredDataError,
  DerivedIdentityClient,
  DerivedIdentityError,
  Disposable,
  DriverNotProvidedError,
  ExpectedSignerError,
  FailedToConfirmTransactionError,
  FailedToConfirmTransactionWithResponseError,
  FailedToConnectToIrysAddressError,
  FailedToDeserializeDataError,
  FailedToInitializeIrysError,
  FailedToSendTransactionError,
  FailedToSerializeDataError,
  FindAllSupportsOnlyThreeFiltersMaxError,
  GmaBuilder,
  GpaBuilder,
  GuardGroupLabelTooLongError,
  GuardGroupRequiredError,
  GuardMintSettingsMissingError,
  GuardNotEnabledError,
  GuardRouteNotSupportedError,
  GuestIdentityDriver,
  IdentityClient,
  InsertItemsToCandyMachineV2OperationHandler,
  InvalidJsonStringError,
  InvalidJsonVariableError,
  IrysError,
  IrysStorageDriver,
  IrysWithdrawError,
  KeypairIdentityDriver,
  MaximumOfFiveAdditionalProgramsError,
  MetadataV1GpaBuilder,
  Metaplex,
  MetaplexError,
  MintAuthorityMustBeSignerToMintInitialSupplyError,
  MintGpaBuilder,
  MintOwnerMustBeMintPayerError,
  MissingInputDataError,
  NftBuildersClient,
  NftClient,
  NftError,
  NftPdasClient,
  NoInstructionsToSendError,
  NotYetImplementedError,
  OperationClient,
  OperationHandlerMissingError,
  OperationNotSupportedByWalletAdapterError,
  OperationUnauthorizedForGuestsError,
  ParentCollectionMissingError,
  ParsedProgramError,
  PartialPriceMismatchError,
  Pda,
  ProgramClient,
  ProgramError,
  ProgramNotRecognizedError,
  PublicKey,
  ReadApiConnection,
  ReadApiError,
  RpcClient,
  RpcError,
  SOL,
  SdkError,
  SelectedGuardGroupDoesNotExistError,
  StorageClient,
  SystemBuildersClient,
  SystemClient,
  Task,
  TaskIsAlreadyRunningError,
  TokenAndMintDoNotMatchError,
  TokenBuildersClient,
  TokenClient,
  TokenError,
  TokenGpaBuilder,
  TokenMetadataGpaBuilder,
  TokenPdasClient,
  TransactionBuilder,
  TreasuryDestinationOwnerRequiredError,
  USD,
  UnexpectedAccountError,
  UnexpectedCurrencyError,
  UnexpectedTypeError,
  UninitializedDerivedIdentityError,
  UninitializedWalletAdapterError,
  UnknownProgramError,
  UnreachableCaseError,
  UnrecognizePathForRouteInstructionError,
  UnregisteredCandyGuardError,
  UtilsClient,
  WRAPPED_SOL_MINT,
  WalletAdapterIdentityDriver,
  WithdrawFromBuyerAccountRequiresSignerError,
  _removeDoubleDefault,
  absoluteAmount,
  addAmounts,
  addressGateGuardManifest,
  allowListGuardManifest,
  amount,
  approveNftCollectionAuthorityBuilder,
  approveNftCollectionAuthorityOperation,
  approveNftCollectionAuthorityOperationHandler,
  approveNftDelegateBuilder,
  approveNftDelegateOperation,
  approveNftDelegateOperationHandler,
  approveNftUseAuthorityBuilder,
  approveNftUseAuthorityOperation,
  approveNftUseAuthorityOperationHandler,
  approveTokenDelegateAuthorityBuilder,
  approveTokenDelegateAuthorityOperation,
  approveTokenDelegateAuthorityOperationHandler,
  assert2 as assert,
  assertAccountExists,
  assertAuctionHouse,
  assertAuctioneerAuctionHouse,
  assertBid,
  assertBigNumber,
  assertCandyGuard,
  assertCandyGuardProgram,
  assertCandyMachine,
  assertCandyMachineV2,
  assertCurrency,
  assertDateTime,
  assertLazyBid,
  assertLazyListing,
  assertLazyPurchase,
  assertListing,
  assertMetadata,
  assertMint,
  assertModel,
  assertNft,
  assertNftEdition,
  assertNftOrSftWithToken,
  assertNftOriginalEdition,
  assertNftPrintEdition,
  assertNftWithToken,
  assertObjectHasDefinedKeys,
  assertPurchase,
  assertSameCurrencies,
  assertSft,
  assertSftWithToken,
  assertSol,
  assertToken,
  assertTokenWithMint,
  associatedTokenProgram,
  auctionHouseModule,
  botTaxGuardManifest,
  callCandyGuardRouteBuilder,
  callCandyGuardRouteOperation,
  callCandyGuardRouteOperationHandler,
  cancelBidBuilder,
  cancelBidOperation,
  cancelBidOperationHandler,
  cancelListingBuilder,
  cancelListingOperation,
  cancelListingOperationHandler,
  candyMachineModule,
  candyMachineProgram,
  candyMachineV2Module,
  chunk,
  compareAmounts,
  corePlugins,
  countCandyMachineV2Items,
  createAccountBuilder,
  createAccountOperation,
  createAccountOperationHandler,
  createAuctionHouseBuilder,
  createAuctionHouseOperation,
  createAuctionHouseOperationHandler,
  createBidBuilder,
  createBidOperation,
  createBidOperationHandler,
  createCandyGuardBuilder,
  createCandyGuardOperation,
  createCandyGuardOperationHandler,
  createCandyMachineBuilder,
  createCandyMachineOperation,
  createCandyMachineOperationHandler,
  createCandyMachineV2Builder,
  createCandyMachineV2Operation,
  createCandyMachineV2OperationHandler,
  createCompressedNftBuilder,
  createCompressedNftOperation,
  createCompressedNftOperationHandler,
  createListingBuilder,
  createListingOperation,
  createListingOperationHandler,
  createMintBuilder,
  createMintOperation,
  createMintOperationHandler,
  createNftBuilder,
  createNftOperation,
  createNftOperationHandler,
  createSerializerFromBeet,
  createSerializerFromSolitaType,
  createSftBuilder,
  createSftOperation,
  createSftOperationHandler,
  createTokenBuilder,
  createTokenIfMissingBuilder,
  createTokenOperation,
  createTokenOperationHandler,
  createTokenWithMintBuilder,
  createTokenWithMintOperation,
  createTokenWithMintOperationHandler,
  defaultCandyGuardNames,
  defaultCandyGuardProgram,
  deleteCandyGuardBuilder,
  deleteCandyGuardOperation,
  deleteCandyGuardOperationHandler,
  deleteCandyMachineBuilder,
  deleteCandyMachineOperation,
  deleteCandyMachineOperationHandler,
  deleteCandyMachineV2Builder,
  deleteCandyMachineV2Operation,
  deleteCandyMachineV2OperationHandler,
  deleteNftBuilder,
  deleteNftOperation,
  deleteNftOperationHandler,
  depositToBuyerAccountBuilder,
  depositToBuyerAccountOperation,
  depositToBuyerAccountOperationHandler,
  derivedIdentity,
  deserialize,
  deserializeAccount,
  deserializeFeatureFlags,
  directBuyBuilder,
  directBuyOperation,
  directBuyOperationHandler,
  directSellBuilder,
  directSellOperation,
  directSellOperationHandler,
  divideAmount,
  emptyDefaultCandyGuardSettings,
  endDateGuardManifest,
  executeSaleBuilder,
  executeSaleOperation,
  executeSaleOperationHandler,
  findAuctionHouseByAddressOperation,
  findAuctionHouseByAddressOperationHandler,
  findAuctionHouseByCreatorAndMintOperation,
  findAuctionHouseByCreatorAndMintOperationHandler,
  findBidByReceiptOperation,
  findBidByReceiptOperationHandler,
  findBidByTradeStateOperation,
  findBidByTradeStateOperationHandler,
  findBidsOperation,
  findBidsOperationHandler,
  findCandyGuardByAddressOperation,
  findCandyGuardByAddressOperationHandler,
  findCandyGuardsByAuthorityOperation,
  findCandyGuardsByAuthorityOperationHandler,
  findCandyMachineByAddressOperation,
  findCandyMachineByAddressOperationHandler,
  findCandyMachineV2ByAddressOperation,
  findCandyMachineV2ByAddressOperationHandler,
  findCandyMachineV2CollectionPda,
  findCandyMachineV2CreatorPda,
  findCandyMachinesV2ByPublicKeyFieldOperation,
  findCandyMachinesV2ByPublicKeyFieldOperationHandler,
  findCollectionAuthorityRecordPda,
  findEditionMarkerPda,
  findEditionPda,
  findListingByReceiptOperation,
  findListingByReceiptOperationHandler,
  findListingByTradeStateOperation,
  findListingByTradeStateOperationHandler,
  findListingsOperation,
  findListingsOperationHandler,
  findMasterEditionV2Pda,
  findMetadataPda,
  findMintByAddressOperation,
  findMintByAddressOperationHandler,
  findMintedNftsByCandyMachineV2Operation,
  findMintedNftsByCandyMachineV2OperationHandler,
  findNftByAssetIdOperation,
  findNftByAssetIdOperationHandler,
  findNftByMetadataOperation,
  findNftByMetadataOperationHandler,
  findNftByMintOperation,
  findNftByMintOperationHandler,
  findNftByTokenOperation,
  findNftByTokenOperationHandler,
  findNftsByCreatorOperation,
  findNftsByCreatorOperationHandler,
  findNftsByMintListOperation,
  findNftsByMintListOperationHandler,
  findNftsByOwnerOperation,
  findNftsByOwnerOperationHandler,
  findNftsByUpdateAuthorityOperation,
  findNftsByUpdateAuthorityOperationHandler,
  findProgramAsBurnerPda,
  findPurchaseByReceiptOperation,
  findPurchaseByReceiptOperationHandler,
  findPurchaseByTradeStateOperation,
  findPurchaseByTradeStateOperationHandler,
  findPurchasesOperation,
  findPurchasesOperationHandler,
  findTokenByAddressOperation,
  findTokenByAddressOperationHandler,
  findTokenWithMintByAddressOperation,
  findTokenWithMintByAddressOperationHandler,
  findTokenWithMintByMintOperation,
  findTokenWithMintByMintOperationHandler,
  findUseAuthorityRecordPda,
  formatAmount,
  formatDateTime,
  freezeDelegatedNftBuilder,
  freezeDelegatedNftOperation,
  freezeDelegatedNftOperationHandler,
  freezeSolPaymentGuardManifest,
  freezeTokenPaymentGuardManifest,
  freezeTokensBuilder,
  freezeTokensOperation,
  freezeTokensOperationHandler,
  gatekeeperGuardManifest,
  gatewayProgram,
  getAccountParsingAndAssertingFunction,
  getAccountParsingFunction,
  getAssetsFromJsonMetadata,
  getBrowserFileFromMetaplexFile,
  getBuyerBalanceOperation,
  getBuyerBalanceOperationHandler,
  getBytesFromMetaplexFiles,
  getCandyMachineSize,
  getCandyMachineV2AccountSizeFromData,
  getCandyMachineV2UuidFromAddress,
  getContentType,
  getDefaultDelegateArgs,
  getExtension,
  getMerkleProof,
  getMerkleProofAtIndex,
  getMerkleRoot,
  getMerkleTree,
  getMetadataDelegateRole,
  getMetadataDelegateRoleSeed,
  getSignerFromTokenMetadataAuthority,
  getSignerHistogram,
  getTokenDelegateRole,
  guestIdentity,
  identityModule,
  insertCandyMachineItemsBuilder,
  insertCandyMachineItemsOperation,
  insertCandyMachineItemsOperationHandler,
  insertItemsToCandyMachineV2Builder,
  insertItemsToCandyMachineV2Operation,
  irysStorage,
  isAuctionHouse,
  isAuctioneerAuctionHouse,
  isBid,
  isBigNumber,
  isCandyGuard,
  isCandyGuardProgram,
  isCandyMachine,
  isCandyMachineV2,
  isDateTime,
  isEqualToAmount,
  isErrorWithLogs,
  isGreaterThanAmount,
  isGreaterThanOrEqualToAmount,
  isIdentitySigner,
  isKeypairSigner,
  isLazyBid,
  isLazyListing,
  isLazyPurchase,
  isLessThanAmount,
  isLessThanOrEqualToAmount,
  isListing,
  isMetadata,
  isMetaplexFile,
  isMint,
  isModel,
  isNegativeAmount,
  isNft,
  isNftEdition,
  isNftOriginalEdition,
  isNftPrintEdition,
  isNftWithToken,
  isNonFungible,
  isOriginalEditionAccount,
  isPositiveAmount,
  isPrintEditionAccount,
  isPrivateBid,
  isProgrammable,
  isPurchase,
  isSft,
  isSftWithToken,
  isSigner,
  isSol,
  isToken,
  isTokenWithMint,
  isZeroAmount,
  isirysStorageDriver,
  keypairIdentity,
  lamports,
  loadBidOperation,
  loadBidOperationHandler,
  loadListingOperation,
  loadListingOperationHandler,
  loadMetadataOperation,
  loadMetadataOperationHandler,
  loadPurchaseOperation,
  loadPurchaseOperationHandler,
  lockNftBuilder,
  lockNftOperation,
  lockNftOperationHandler,
  logDebug,
  logError,
  logErrorDebug,
  logInfo,
  logInfoDebug,
  logTrace,
  makeConfirmOptionsFinalizedOnMainnet,
  mapSerializer,
  migrateToSizedCollectionNftBuilder,
  migrateToSizedCollectionNftOperation,
  migrateToSizedCollectionNftOperationHandler,
  mintCandyMachineV2Builder,
  mintCandyMachineV2Operation,
  mintCandyMachineV2OperationHandler,
  mintFromCandyMachineBuilder,
  mintFromCandyMachineOperation,
  mintFromCandyMachineOperationHandler,
  mintLimitGuardManifest,
  mintNftBuilder,
  mintNftOperation,
  mintNftOperationHandler,
  mintTokensBuilder,
  mintTokensOperation,
  mintTokensOperationHandler,
  mockStorage,
  multiplyAmount,
  nftBurnGuardManifest,
  nftGateGuardManifest,
  nftModule,
  nftPaymentGuardManifest,
  now,
  operationModule,
  padEmptyChars,
  parseAuctionHouseAccount,
  parseAuctioneerAccount,
  parseBidReceiptAccount,
  parseCandyMachineV2Account,
  parseCandyMachineV2CollectionAccount,
  parseCandyMachineV2Items,
  parseListingReceiptAccount,
  parseMetadataAccount,
  parseMetaplexFileContent,
  parseMintAccount,
  parseOriginalEditionAccount,
  parseOriginalOrPrintEditionAccount,
  parsePrintEditionAccount,
  parsePurchaseReceiptAccount,
  parseTokenAccount,
  parseTokenMetadataAuthorization,
  parseTokenMetadataDelegateInput,
  prepareTransferCompressedNftBuilder,
  printNewEditionBuilder,
  printNewEditionOperation,
  printNewEditionOperationHandler,
  programGateGuardManifest,
  programModule,
  randomStr,
  redeemedAmountGuardManifest,
  removeEmptyChars,
  removeUndefinedAttributes,
  replaceAssetsWithUris,
  resolveClusterFromConnection,
  resolveClusterFromEndpoint,
  revokeNftCollectionAuthorityBuilder,
  revokeNftCollectionAuthorityOperation,
  revokeNftCollectionAuthorityOperationHandler,
  revokeNftDelegateBuilder,
  revokeNftDelegateOperation,
  revokeNftDelegateOperationHandler,
  revokeNftUseAuthorityBuilder,
  revokeNftUseAuthorityOperation,
  revokeNftUseAuthorityOperationHandler,
  revokeTokenDelegateAuthorityBuilder,
  revokeTokenDelegateAuthorityOperation,
  revokeTokenDelegateAuthorityOperationHandler,
  rpcModule,
  sameAmounts,
  sameCurrencies,
  sendTokensBuilder,
  sendTokensOperation,
  sendTokensOperationHandler,
  serialize,
  serializeDiscriminator,
  serializeFeatureFlags,
  sol,
  solPaymentGuardManifest,
  startDateGuardManifest,
  storageModule,
  subtractAmounts,
  systemModule,
  thawDelegatedNftBuilder,
  thawDelegatedNftOperation,
  thawDelegatedNftOperationHandler,
  thawTokensBuilder,
  thawTokensOperation,
  thawTokensOperationHandler,
  thirdPartySignerGuardManifest,
  toAccountInfo,
  toAuctionHouse,
  toAuctionHouseAccount,
  toAuctioneerAccount,
  toBid,
  toBidReceiptAccount,
  toBigNumber,
  toCandyGuard,
  toCandyMachine,
  toCandyMachineData,
  toCandyMachineV2,
  toCandyMachineV2Account,
  toCandyMachineV2CollectionAccount,
  toCandyMachineV2Configs,
  toCandyMachineV2InstructionData,
  toDateTime,
  toLazyBid,
  toLazyListing,
  toLazyPurchase,
  toListing,
  toListingReceiptAccount,
  toMetadata,
  toMetadataAccount,
  toMetadataFromReadApiAsset,
  toMetaplexFile,
  toMetaplexFileFromBrowser,
  toMetaplexFileFromJson,
  toMint,
  toMintAccount,
  toMintAddress,
  toMintFromReadApiAsset,
  toNft,
  toNftEdition,
  toNftEditionFromReadApiAsset,
  toNftOriginalEdition,
  toNftPrintEdition,
  toNftWithToken,
  toOptionBigNumber,
  toOptionDateTime,
  toOriginalEditionAccount,
  toOriginalOrPrintEditionAccount,
  toPrintEditionAccount,
  toPublicKey,
  toPurchase,
  toPurchaseReceiptAccount,
  toSft,
  toSftWithToken,
  toToken,
  toTokenAccount,
  toTokenWithMint,
  token,
  tokenBurnGuardManifest,
  tokenGateGuardManifest,
  tokenModule,
  tokenPaymentGuardManifest,
  tokenProgram,
  transferCompressedNftBuilder,
  transferCompressedNftOperation,
  transferCompressedNftOperationHandler,
  transferNftBuilder,
  transferNftOperation,
  transferNftOperationHandler,
  transferSolBuilder,
  transferSolOperation,
  transferSolOperationHandler,
  tryOr,
  tryOrNull,
  unlockNftBuilder,
  unlockNftOperation,
  unlockNftOperationHandler,
  unverifyNftCollectionBuilder,
  unverifyNftCollectionOperation,
  unverifyNftCollectionOperationHandler,
  unverifyNftCreatorBuilder,
  unverifyNftCreatorOperation,
  unverifyNftCreatorOperationHandler,
  unwrapCandyGuardBuilder,
  unwrapCandyGuardOperation,
  unwrapCandyGuardOperationHandler,
  updateAuctionHouseBuilder,
  updateAuctionHouseOperation,
  updateAuctionHouseOperationHandler,
  updateCandyGuardBuilder,
  updateCandyGuardOperation,
  updateCandyGuardOperationHandler,
  updateCandyMachineBuilder,
  updateCandyMachineOperation,
  updateCandyMachineOperationHandler,
  updateCandyMachineV2Builder,
  updateCandyMachineV2Operation,
  updateCandyMachineV2OperationHandler,
  updateNftBuilder,
  updateNftOperation,
  updateNftOperationHandler,
  uploadMetadataOperation,
  uploadMetadataOperationHandler,
  usd,
  useNftBuilder,
  useNftOperation,
  useNftOperationHandler,
  useOperation,
  utilsModule,
  verifyNftCollectionBuilder,
  verifyNftCollectionOperation,
  verifyNftCollectionOperationHandler,
  verifyNftCreatorBuilder,
  verifyNftCreatorOperation,
  verifyNftCreatorOperationHandler,
  walk,
  walletAdapterIdentity,
  withdrawFromBuyerAccountBuilder,
  withdrawFromBuyerAccountOperation,
  withdrawFromBuyerAccountOperationHandler,
  withdrawFromFeeAccountBuilder,
  withdrawFromFeeAccountOperation,
  withdrawFromFeeAccountOperationHandler,
  withdrawFromTreasuryAccountBuilder,
  withdrawFromTreasuryAccountOperation,
  withdrawFromTreasuryAccountOperationHandler,
  wrapCandyGuardBuilder,
  wrapCandyGuardOperation,
  wrapCandyGuardOperationHandler,
  zipMap
};
/*! Bundled license information:

buffer/index.js:
  (*!
   * The buffer module from node.js, for the browser.
   *
   * @author   Feross Aboukhadijeh <https://feross.org>
   * @license  MIT
   *)

@solana/spl-token/lib/index.browser.esm.js:
  (*! ieee754. BSD-3-Clause License. Feross Aboukhadijeh <https://feross.org/opensource> *)
  (*!
   * The buffer module from node.js, for the browser.
   *
   * @author   Feross Aboukhadijeh <https://feross.org>
   * @license  MIT
   *)

crypto-js/ripemd160.js:
  (** @preserve
  	(c) 2012 by Cédric Mesnil. All rights reserved.
  
  	Redistribution and use in source and binary forms, with or without modification, are permitted provided that the following conditions are met:
  
  	    - Redistributions of source code must retain the above copyright notice, this list of conditions and the following disclaimer.
  	    - Redistributions in binary form must reproduce the above copyright notice, this list of conditions and the following disclaimer in the documentation and/or other materials provided with the distribution.
  
  	THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
  	*)

crypto-js/mode-ctr-gladman.js:
  (** @preserve
   * Counter block mode compatible with  Dr Brian Gladman fileenc.c
   * derived from CryptoJS.mode.CTR
   * Jan Hruby jhruby.web@gmail.com
   *)
*/
//# sourceMappingURL=@metaplex-foundation_js.js.map

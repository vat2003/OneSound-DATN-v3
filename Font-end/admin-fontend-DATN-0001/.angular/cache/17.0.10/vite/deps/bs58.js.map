{
  "version": 3,
  "sources": ["../../../../../node_modules/base-x/src/index.js", "../../../../../node_modules/bs58/index.js"],
  "sourcesContent": ["'use strict'\r\n// base-x encoding / decoding\r\n// Copyright (c) 2018 base-x contributors\r\n// Copyright (c) 2014-2018 The Bitcoin Core developers (base58.cpp)\r\n// Distributed under the MIT software license, see the accompanying\r\n// file LICENSE or http://www.opensource.org/licenses/mit-license.php.\r\nfunction base (ALPHABET) {\r\n  if (ALPHABET.length >= 255) { throw new TypeError('Alphabet too long') }\r\n  var BASE_MAP = new Uint8Array(256)\r\n  for (var j = 0; j < BASE_MAP.length; j++) {\r\n    BASE_MAP[j] = 255\r\n  }\r\n  for (var i = 0; i < ALPHABET.length; i++) {\r\n    var x = ALPHABET.charAt(i)\r\n    var xc = x.charCodeAt(0)\r\n    if (BASE_MAP[xc] !== 255) { throw new TypeError(x + ' is ambiguous') }\r\n    BASE_MAP[xc] = i\r\n  }\r\n  var BASE = ALPHABET.length\r\n  var LEADER = ALPHABET.charAt(0)\r\n  var FACTOR = Math.log(BASE) / Math.log(256) // log(BASE) / log(256), rounded up\r\n  var iFACTOR = Math.log(256) / Math.log(BASE) // log(256) / log(BASE), rounded up\r\n  function encode (source) {\r\n    if (source instanceof Uint8Array) {\r\n    } else if (ArrayBuffer.isView(source)) {\r\n      source = new Uint8Array(source.buffer, source.byteOffset, source.byteLength)\r\n    } else if (Array.isArray(source)) {\r\n      source = Uint8Array.from(source)\r\n    }\r\n    if (!(source instanceof Uint8Array)) { throw new TypeError('Expected Uint8Array') }\r\n    if (source.length === 0) { return '' }\r\n        // Skip & count leading zeroes.\r\n    var zeroes = 0\r\n    var length = 0\r\n    var pbegin = 0\r\n    var pend = source.length\r\n    while (pbegin !== pend && source[pbegin] === 0) {\r\n      pbegin++\r\n      zeroes++\r\n    }\r\n        // Allocate enough space in big-endian base58 representation.\r\n    var size = ((pend - pbegin) * iFACTOR + 1) >>> 0\r\n    var b58 = new Uint8Array(size)\r\n        // Process the bytes.\r\n    while (pbegin !== pend) {\r\n      var carry = source[pbegin]\r\n            // Apply \"b58 = b58 * 256 + ch\".\r\n      var i = 0\r\n      for (var it1 = size - 1; (carry !== 0 || i < length) && (it1 !== -1); it1--, i++) {\r\n        carry += (256 * b58[it1]) >>> 0\r\n        b58[it1] = (carry % BASE) >>> 0\r\n        carry = (carry / BASE) >>> 0\r\n      }\r\n      if (carry !== 0) { throw new Error('Non-zero carry') }\r\n      length = i\r\n      pbegin++\r\n    }\r\n        // Skip leading zeroes in base58 result.\r\n    var it2 = size - length\r\n    while (it2 !== size && b58[it2] === 0) {\r\n      it2++\r\n    }\r\n        // Translate the result into a string.\r\n    var str = LEADER.repeat(zeroes)\r\n    for (; it2 < size; ++it2) { str += ALPHABET.charAt(b58[it2]) }\r\n    return str\r\n  }\r\n  function decodeUnsafe (source) {\r\n    if (typeof source !== 'string') { throw new TypeError('Expected String') }\r\n    if (source.length === 0) { return new Uint8Array() }\r\n    var psz = 0\r\n        // Skip and count leading '1's.\r\n    var zeroes = 0\r\n    var length = 0\r\n    while (source[psz] === LEADER) {\r\n      zeroes++\r\n      psz++\r\n    }\r\n        // Allocate enough space in big-endian base256 representation.\r\n    var size = (((source.length - psz) * FACTOR) + 1) >>> 0 // log(58) / log(256), rounded up.\r\n    var b256 = new Uint8Array(size)\r\n        // Process the characters.\r\n    while (source[psz]) {\r\n            // Decode character\r\n      var carry = BASE_MAP[source.charCodeAt(psz)]\r\n            // Invalid character\r\n      if (carry === 255) { return }\r\n      var i = 0\r\n      for (var it3 = size - 1; (carry !== 0 || i < length) && (it3 !== -1); it3--, i++) {\r\n        carry += (BASE * b256[it3]) >>> 0\r\n        b256[it3] = (carry % 256) >>> 0\r\n        carry = (carry / 256) >>> 0\r\n      }\r\n      if (carry !== 0) { throw new Error('Non-zero carry') }\r\n      length = i\r\n      psz++\r\n    }\r\n        // Skip leading zeroes in b256.\r\n    var it4 = size - length\r\n    while (it4 !== size && b256[it4] === 0) {\r\n      it4++\r\n    }\r\n    var vch = new Uint8Array(zeroes + (size - it4))\r\n    var j = zeroes\r\n    while (it4 !== size) {\r\n      vch[j++] = b256[it4++]\r\n    }\r\n    return vch\r\n  }\r\n  function decode (string) {\r\n    var buffer = decodeUnsafe(string)\r\n    if (buffer) { return buffer }\r\n    throw new Error('Non-base' + BASE + ' character')\r\n  }\r\n  return {\r\n    encode: encode,\r\n    decodeUnsafe: decodeUnsafe,\r\n    decode: decode\r\n  }\r\n}\r\nmodule.exports = base\r\n", "const basex = require('base-x')\r\nconst ALPHABET = '123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz'\r\n\r\nmodule.exports = basex(ALPHABET)\r\n"],
  "mappings": "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",
  "names": ["i", "j"]
}

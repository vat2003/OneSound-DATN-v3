import { Component, Input, Output, EventEmitter, ChangeDetectionStrategy } from '@angular/core';
import { BehaviorSubject, Subscription } from 'rxjs';
import { map } from 'rxjs/operators';
import { SHARE_BUTTONS } from 'ngx-sharebuttons';
import * as i0 from "@angular/core";
import * as i1 from "ngx-sharebuttons";
import * as i2 from "ngx-sharebuttons/button";
import * as i3 from "@angular/common";
import * as i4 from "./expand-button";
class ShareButtons {
    constructor(_share) {
        this._share = _share;
        this._state$ = new BehaviorSubject({
            includedButtons: [],
            excludedButtons: [],
            userButtons: [],
            selectedButtons: [],
            expanded: true,
            shownCount: Object.keys(SHARE_BUTTONS).length
        });
        this._configSub$ = Subscription.EMPTY;
        this.theme = this._share.config.theme;
        /** Sets the fb messenger redirect url to enable sharing on Messenger desktop */
        this.redirectUrl = this._share.config.redirectUrl;
        /** Show buttons icons */
        this.showIcon = true;
        /** Show buttons text */
        this.showText = false;
        /** Share dialog opened event */
        this.opened = new EventEmitter();
        /** Share dialog closed event */
        this.closed = new EventEmitter();
    }
    ngOnInit() {
        this.state$ = this._state$.pipe(map((state) => {
            // Use component include buttons, otherwise fallback to the global include buttons
            const includedButtons = state.includedButtons && state.includedButtons.length ? state.includedButtons : state.userButtons;
            const userButtons = state.excludedButtons ? includedButtons.filter((btn) => state.excludedButtons.indexOf(btn) < 0) : includedButtons;
            const selectedButtons = userButtons.slice(0, state.expanded ? userButtons.length : state.shownCount);
            return {
                userButtons,
                selectedButtons,
                expanded: state.expanded,
                shownCount: state.shownCount,
                moreIcon: state.moreIcon,
                lessIcon: state.lessIcon,
                moreAriaLabel: state.moreAriaLabel,
                lessAriaLabel: state.lessAriaLabel
            };
        }));
        // Subscribe to share buttons config changes, This updates the component whenever a new button is added
        this._configSub$ = this._share.config$.subscribe((config) => {
            // Use global include buttons, otherwise fallback to all buttons
            const includedButtons = config.include.length ? config.include : Object.keys(SHARE_BUTTONS);
            const userButtons = includedButtons.filter((btn) => config.exclude.indexOf(btn) < 0);
            this.updateState({
                userButtons,
                expanded: false,
                moreIcon: config.moreButtonIcon,
                lessIcon: config.lessButtonIcon,
                moreAriaLabel: config.moreButtonAriaLabel,
                lessAriaLabel: config.lessButtonAriaLabel
            });
        });
    }
    ngOnChanges(changes) {
        const shouldUpdate = (changes['include'] && changes['include'].currentValue !== changes['include'].previousValue) ||
            (changes['exclude'] && changes['exclude'].currentValue !== changes['exclude'].previousValue) ||
            (changes['show'] && changes['show'].currentValue !== changes['show'].previousValue);
        if (shouldUpdate) {
            this.updateState({
                includedButtons: this.include,
                excludedButtons: this.exclude,
                shownCount: this.show
            });
        }
    }
    ngOnDestroy() {
        this._configSub$.unsubscribe();
        this._state$.complete();
    }
    updateState(state) {
        this._state$.next({ ...this._state$.value, ...state });
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "16.0.2", ngImport: i0, type: ShareButtons, deps: [{ token: i1.ShareService }], target: i0.ɵɵFactoryTarget.Component }); }
    static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "16.0.2", type: ShareButtons, selector: "share-buttons", inputs: { theme: "theme", include: "include", exclude: "exclude", show: "show", url: "url", title: "title", description: "description", image: "image", tags: "tags", redirectUrl: "redirectUrl", autoSetMeta: "autoSetMeta", showIcon: "showIcon", showText: "showText", disabled: "disabled" }, outputs: { opened: "opened", closed: "closed" }, usesOnChanges: true, ngImport: i0, template: "<div *ngIf=\"state$ | async; let state\" class=\"sb-group sb-{{theme}}\">\r\n  <share-button *ngFor=\"let button of state.selectedButtons\"\r\n                [button]=\"button\"\r\n                [theme]=\"theme\"\r\n                [url]=\"url\"\r\n                [title]=\"title\"\r\n                [description]=\"description\"\r\n                [image]=\"image\"\r\n                [tags]=\"tags\"\r\n                [redirectUrl]=\"redirectUrl\"\r\n                [autoSetMeta]=\"autoSetMeta\"\r\n                [showIcon]=\"showIcon\"\r\n                [showText]=\"showText\"\r\n                (opened)=\"opened.emit($event)\"\r\n                (closed)=\"closed.emit($event)\"\r\n                [disabled]=\"disabled\">\r\n  </share-button>\r\n  <expand-button *ngIf=\"state.shownCount < state.userButtons.length\"\r\n                 class=\"sb-button sb-{{theme}}\"\r\n                 [expanded]=\"state.expanded\"\r\n                 [moreIcon]=\"state.moreIcon\"\r\n                 [lessIcon]=\"state.lessIcon\"\r\n                 [moreAriaLabel]=\"state.moreAriaLabel\"\r\n                 [lessAriaLabel]=\"state.lessAriaLabel\"\r\n                 (toggle)=\"updateState({expanded: $event})\">\r\n  </expand-button>\r\n</div>\r\n", styles: [":host{display:inherit}.sb-group,.sb-button{display:inline-flex;align-items:flex-start}.sb-group{flex-wrap:wrap}\n"], dependencies: [{ kind: "component", type: i2.ShareButton, selector: "share-button", inputs: ["button", "url", "title", "description", "image", "tags", "redirectUrl", "autoSetMeta", "showIcon", "showText", "text", "icon", "theme", "disabled"], outputs: ["opened", "closed"] }, { kind: "directive", type: i3.NgForOf, selector: "[ngFor][ngForOf]", inputs: ["ngForOf", "ngForTrackBy", "ngForTemplate"] }, { kind: "directive", type: i3.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { kind: "component", type: i4.ExpandButton, selector: "expand-button", inputs: ["moreIcon", "lessIcon", "expanded", "moreAriaLabel", "lessAriaLabel"], outputs: ["toggle"] }, { kind: "pipe", type: i3.AsyncPipe, name: "async" }], changeDetection: i0.ChangeDetectionStrategy.OnPush }); }
}
export { ShareButtons };
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "16.0.2", ngImport: i0, type: ShareButtons, decorators: [{
            type: Component,
            args: [{ selector: 'share-buttons', changeDetection: ChangeDetectionStrategy.OnPush, template: "<div *ngIf=\"state$ | async; let state\" class=\"sb-group sb-{{theme}}\">\r\n  <share-button *ngFor=\"let button of state.selectedButtons\"\r\n                [button]=\"button\"\r\n                [theme]=\"theme\"\r\n                [url]=\"url\"\r\n                [title]=\"title\"\r\n                [description]=\"description\"\r\n                [image]=\"image\"\r\n                [tags]=\"tags\"\r\n                [redirectUrl]=\"redirectUrl\"\r\n                [autoSetMeta]=\"autoSetMeta\"\r\n                [showIcon]=\"showIcon\"\r\n                [showText]=\"showText\"\r\n                (opened)=\"opened.emit($event)\"\r\n                (closed)=\"closed.emit($event)\"\r\n                [disabled]=\"disabled\">\r\n  </share-button>\r\n  <expand-button *ngIf=\"state.shownCount < state.userButtons.length\"\r\n                 class=\"sb-button sb-{{theme}}\"\r\n                 [expanded]=\"state.expanded\"\r\n                 [moreIcon]=\"state.moreIcon\"\r\n                 [lessIcon]=\"state.lessIcon\"\r\n                 [moreAriaLabel]=\"state.moreAriaLabel\"\r\n                 [lessAriaLabel]=\"state.lessAriaLabel\"\r\n                 (toggle)=\"updateState({expanded: $event})\">\r\n  </expand-button>\r\n</div>\r\n", styles: [":host{display:inherit}.sb-group,.sb-button{display:inline-flex;align-items:flex-start}.sb-group{flex-wrap:wrap}\n"] }]
        }], ctorParameters: function () { return [{ type: i1.ShareService }]; }, propDecorators: { theme: [{
                type: Input
            }], include: [{
                type: Input
            }], exclude: [{
                type: Input
            }], show: [{
                type: Input
            }], url: [{
                type: Input
            }], title: [{
                type: Input
            }], description: [{
                type: Input
            }], image: [{
                type: Input
            }], tags: [{
                type: Input
            }], redirectUrl: [{
                type: Input
            }], autoSetMeta: [{
                type: Input
            }], showIcon: [{
                type: Input
            }], showText: [{
                type: Input
            }], disabled: [{
                type: Input
            }], opened: [{
                type: Output
            }], closed: [{
                type: Output
            }] } });
//# sourceMappingURL=data:application/json;base64,
import { NgModule } from '@angular/core';
import { faFacebookF, faFacebookMessenger, faLine, faLinkedinIn, faMix, faPinterestP, faRedditAlien, faTelegramPlane, faTumblr, faTwitter, faViber, faVk, faWhatsapp, faXing } from '@fortawesome/free-brands-svg-icons';
import { faCheck, faEllipsisH, faEnvelope, faExclamation, faLink, faMinus, faPrint, faSms } from '@fortawesome/free-solid-svg-icons';
import { FontAwesomeModule } from '@fortawesome/angular-fontawesome';
import * as i0 from "@angular/core";
import * as i1 from "@fortawesome/angular-fontawesome";
const shareIcons = [
    faFacebookF, faTwitter, faLinkedinIn, faPinterestP, faRedditAlien, faTumblr,
    faWhatsapp, faViber, faVk, faFacebookMessenger, faTelegramPlane, faMix, faXing, faSms,
    faEnvelope, faCheck, faPrint, faExclamation, faLink, faEllipsisH, faMinus, faLine
];
class ShareIconsModule {
    constructor(iconLibrary) {
        iconLibrary.addIcons(...shareIcons);
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "16.0.2", ngImport: i0, type: ShareIconsModule, deps: [{ token: i1.FaIconLibrary }], target: i0.ɵɵFactoryTarget.NgModule }); }
    static { this.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: "14.0.0", version: "16.0.2", ngImport: i0, type: ShareIconsModule, imports: [FontAwesomeModule] }); }
    static { this.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "16.0.2", ngImport: i0, type: ShareIconsModule, imports: [FontAwesomeModule] }); }
}
export { ShareIconsModule };
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "16.0.2", ngImport: i0, type: ShareIconsModule, decorators: [{
            type: NgModule,
            args: [{
                    imports: [
                        FontAwesomeModule,
                    ]
                }]
        }], ctorParameters: function () { return [{ type: i1.FaIconLibrary }]; } });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2hhcmUtaWNvbnMubW9kdWxlLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vcHJvamVjdHMvbmd4LXNoYXJlYnV0dG9ucy9pY29ucy9zcmMvc2hhcmUtaWNvbnMubW9kdWxlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFBRSxRQUFRLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFDekMsT0FBTyxFQUNMLFdBQVcsRUFBRSxtQkFBbUIsRUFBRSxNQUFNLEVBQUUsWUFBWSxFQUFFLEtBQUssRUFBRSxZQUFZLEVBQzNFLGFBQWEsRUFBRSxlQUFlLEVBQUUsUUFBUSxFQUFFLFNBQVMsRUFBRSxPQUFPLEVBQUUsSUFBSSxFQUFFLFVBQVUsRUFBRSxNQUFNLEVBQ3ZGLE1BQU0sb0NBQW9DLENBQUM7QUFDNUMsT0FBTyxFQUFFLE9BQU8sRUFBRSxXQUFXLEVBQUUsVUFBVSxFQUFFLGFBQWEsRUFBRSxNQUFNLEVBQUUsT0FBTyxFQUFFLE9BQU8sRUFBRSxLQUFLLEVBQUUsTUFBTSxtQ0FBbUMsQ0FBQztBQUVySSxPQUFPLEVBQWlCLGlCQUFpQixFQUFFLE1BQU0sa0NBQWtDLENBQUM7OztBQUdwRixNQUFNLFVBQVUsR0FBcUI7SUFDbkMsV0FBVyxFQUFFLFNBQVMsRUFBRSxZQUFZLEVBQUUsWUFBWSxFQUFFLGFBQWEsRUFBRSxRQUFRO0lBQzNFLFVBQVUsRUFBRSxPQUFPLEVBQUUsSUFBSSxFQUFFLG1CQUFtQixFQUFFLGVBQWUsRUFBRSxLQUFLLEVBQUUsTUFBTSxFQUFFLEtBQUs7SUFDckYsVUFBVSxFQUFFLE9BQU8sRUFBRSxPQUFPLEVBQUUsYUFBYSxFQUFFLE1BQU0sRUFBRSxXQUFXLEVBQUUsT0FBTyxFQUFFLE1BQU07Q0FDbEYsQ0FBQztBQUVGLE1BS2EsZ0JBQWdCO0lBQzNCLFlBQVksV0FBMEI7UUFDcEMsV0FBVyxDQUFDLFFBQVEsQ0FBQyxHQUFHLFVBQVUsQ0FBQyxDQUFDO0lBQ3RDLENBQUM7OEdBSFUsZ0JBQWdCOytHQUFoQixnQkFBZ0IsWUFIekIsaUJBQWlCOytHQUdSLGdCQUFnQixZQUh6QixpQkFBaUI7O1NBR1IsZ0JBQWdCOzJGQUFoQixnQkFBZ0I7a0JBTDVCLFFBQVE7bUJBQUM7b0JBQ1IsT0FBTyxFQUFFO3dCQUNQLGlCQUFpQjtxQkFDbEI7aUJBQ0YiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBOZ01vZHVsZSB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xyXG5pbXBvcnQge1xyXG4gIGZhRmFjZWJvb2tGLCBmYUZhY2Vib29rTWVzc2VuZ2VyLCBmYUxpbmUsIGZhTGlua2VkaW5JbiwgZmFNaXgsIGZhUGludGVyZXN0UCxcclxuICBmYVJlZGRpdEFsaWVuLCBmYVRlbGVncmFtUGxhbmUsIGZhVHVtYmxyLCBmYVR3aXR0ZXIsIGZhVmliZXIsIGZhVmssIGZhV2hhdHNhcHAsIGZhWGluZ1xyXG59IGZyb20gJ0Bmb3J0YXdlc29tZS9mcmVlLWJyYW5kcy1zdmctaWNvbnMnO1xyXG5pbXBvcnQgeyBmYUNoZWNrLCBmYUVsbGlwc2lzSCwgZmFFbnZlbG9wZSwgZmFFeGNsYW1hdGlvbiwgZmFMaW5rLCBmYU1pbnVzLCBmYVByaW50LCBmYVNtcyB9IGZyb20gJ0Bmb3J0YXdlc29tZS9mcmVlLXNvbGlkLXN2Zy1pY29ucyc7XHJcblxyXG5pbXBvcnQgeyBGYUljb25MaWJyYXJ5LCBGb250QXdlc29tZU1vZHVsZSB9IGZyb20gJ0Bmb3J0YXdlc29tZS9hbmd1bGFyLWZvbnRhd2Vzb21lJztcclxuaW1wb3J0IHsgSWNvbkRlZmluaXRpb24gfSBmcm9tICdAZm9ydGF3ZXNvbWUvZm9udGF3ZXNvbWUtc3ZnLWNvcmUnO1xyXG5cclxuY29uc3Qgc2hhcmVJY29uczogSWNvbkRlZmluaXRpb25bXSA9IFtcclxuICBmYUZhY2Vib29rRiwgZmFUd2l0dGVyLCBmYUxpbmtlZGluSW4sIGZhUGludGVyZXN0UCwgZmFSZWRkaXRBbGllbiwgZmFUdW1ibHIsXHJcbiAgZmFXaGF0c2FwcCwgZmFWaWJlciwgZmFWaywgZmFGYWNlYm9va01lc3NlbmdlciwgZmFUZWxlZ3JhbVBsYW5lLCBmYU1peCwgZmFYaW5nLCBmYVNtcyxcclxuICBmYUVudmVsb3BlLCBmYUNoZWNrLCBmYVByaW50LCBmYUV4Y2xhbWF0aW9uLCBmYUxpbmssIGZhRWxsaXBzaXNILCBmYU1pbnVzLCBmYUxpbmVcclxuXTtcclxuXHJcbkBOZ01vZHVsZSh7XHJcbiAgaW1wb3J0czogW1xyXG4gICAgRm9udEF3ZXNvbWVNb2R1bGUsXHJcbiAgXVxyXG59KVxyXG5leHBvcnQgY2xhc3MgU2hhcmVJY29uc01vZHVsZSB7XHJcbiAgY29uc3RydWN0b3IoaWNvbkxpYnJhcnk6IEZhSWNvbkxpYnJhcnkpIHtcclxuICAgIGljb25MaWJyYXJ5LmFkZEljb25zKC4uLnNoYXJlSWNvbnMpO1xyXG4gIH1cclxufVxyXG4iXX0=
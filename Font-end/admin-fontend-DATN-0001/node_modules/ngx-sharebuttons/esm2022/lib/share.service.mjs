import { Inject, Injectable, Optional } from '@angular/core';
import { DOCUMENT } from '@angular/common';
import { BehaviorSubject } from 'rxjs';
import { SHARE_BUTTONS_CONFIG, SharerMethod } from './share.models';
import { SHARE_BUTTONS } from './share.defaults';
import { mergeDeep } from './utils';
import * as i0 from "@angular/core";
class ShareService {
    constructor(config, _document) {
        this._document = _document;
        /** Global config that applies on all share buttons in the app */
        this.config = {
            sharerMethod: SharerMethod.Anchor,
            sharerTarget: '_blank',
            windowObj: this._document.defaultView,
            windowFuncName: 'open',
            prop: SHARE_BUTTONS,
            theme: 'default',
            include: [],
            exclude: [],
            autoSetMeta: true,
            windowWidth: 800,
            windowHeight: 500,
            moreButtonIcon: 'ellipsis-h',
            lessButtonIcon: 'minus',
            moreButtonAriaLabel: 'Show more share buttons',
            lessButtonAriaLabel: 'Show less share buttons'
        };
        /** Stream that emits when config changes */
        this.config$ = new BehaviorSubject(this.config);
        if (config) {
            this.setConfig(config);
        }
    }
    /**
     * Share buttons properties, used to get the text, color and icon of each button.
     */
    get prop() {
        return this.config.prop;
    }
    get windowSize() {
        return `width=${this.config.windowWidth}, height=${this.config.windowHeight}`;
    }
    setConfig(config) {
        this.config = mergeDeep(this.config, config);
        this.config$.next(this.config);
    }
    addButton(name, props) {
        this.setConfig({
            prop: {
                [name]: props
            }
        });
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "16.0.2", ngImport: i0, type: ShareService, deps: [{ token: SHARE_BUTTONS_CONFIG, optional: true }, { token: DOCUMENT }], target: i0.ɵɵFactoryTarget.Injectable }); }
    static { this.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "16.0.2", ngImport: i0, type: ShareService, providedIn: 'root' }); }
}
export { ShareService };
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "16.0.2", ngImport: i0, type: ShareService, decorators: [{
            type: Injectable,
            args: [{
                    providedIn: 'root'
                }]
        }], ctorParameters: function () { return [{ type: undefined, decorators: [{
                    type: Optional
                }, {
                    type: Inject,
                    args: [SHARE_BUTTONS_CONFIG]
                }] }, { type: undefined, decorators: [{
                    type: Inject,
                    args: [DOCUMENT]
                }] }]; } });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2hhcmUuc2VydmljZS5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL3Byb2plY3RzL25neC1zaGFyZWJ1dHRvbnMvc3JjL2xpYi9zaGFyZS5zZXJ2aWNlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFBRSxNQUFNLEVBQUUsVUFBVSxFQUFFLFFBQVEsRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUM3RCxPQUFPLEVBQUUsUUFBUSxFQUFFLE1BQU0saUJBQWlCLENBQUM7QUFDM0MsT0FBTyxFQUFFLGVBQWUsRUFBRSxNQUFNLE1BQU0sQ0FBQztBQUN2QyxPQUFPLEVBQWdCLG9CQUFvQixFQUFzQixZQUFZLEVBQUUsTUFBTSxnQkFBZ0IsQ0FBQztBQUN0RyxPQUFPLEVBQUUsYUFBYSxFQUFFLE1BQU0sa0JBQWtCLENBQUM7QUFDakQsT0FBTyxFQUFFLFNBQVMsRUFBRSxNQUFNLFNBQVMsQ0FBQzs7QUFFcEMsTUFHYSxZQUFZO0lBd0J2QixZQUFzRCxNQUEwQixFQUE0QixTQUFjO1FBQWQsY0FBUyxHQUFULFNBQVMsQ0FBSztRQXRCMUgsaUVBQWlFO1FBQ2pFLFdBQU0sR0FBdUI7WUFDM0IsWUFBWSxFQUFFLFlBQVksQ0FBQyxNQUFNO1lBQ2pDLFlBQVksRUFBRSxRQUFRO1lBQ3RCLFNBQVMsRUFBRSxJQUFJLENBQUMsU0FBUyxDQUFDLFdBQVc7WUFDckMsY0FBYyxFQUFFLE1BQU07WUFDdEIsSUFBSSxFQUFFLGFBQWE7WUFDbkIsS0FBSyxFQUFFLFNBQVM7WUFDaEIsT0FBTyxFQUFFLEVBQUU7WUFDWCxPQUFPLEVBQUUsRUFBRTtZQUNYLFdBQVcsRUFBRSxJQUFJO1lBQ2pCLFdBQVcsRUFBRSxHQUFHO1lBQ2hCLFlBQVksRUFBRSxHQUFHO1lBQ2pCLGNBQWMsRUFBRSxZQUFZO1lBQzVCLGNBQWMsRUFBRSxPQUFPO1lBQ3ZCLG1CQUFtQixFQUFFLHlCQUF5QjtZQUM5QyxtQkFBbUIsRUFBRSx5QkFBeUI7U0FDL0MsQ0FBQztRQUVGLDRDQUE0QztRQUM1QyxZQUFPLEdBQUcsSUFBSSxlQUFlLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxDQUFDO1FBR3pDLElBQUksTUFBTSxFQUFFO1lBQ1YsSUFBSSxDQUFDLFNBQVMsQ0FBQyxNQUFNLENBQUMsQ0FBQztTQUN4QjtJQUNILENBQUM7SUFFRDs7T0FFRztJQUNILElBQUksSUFBSTtRQUNOLE9BQU8sSUFBSSxDQUFDLE1BQU0sQ0FBQyxJQUFJLENBQUM7SUFDMUIsQ0FBQztJQUVELElBQUksVUFBVTtRQUNaLE9BQU8sU0FBVSxJQUFJLENBQUMsTUFBTSxDQUFDLFdBQVksWUFBYSxJQUFJLENBQUMsTUFBTSxDQUFDLFlBQWEsRUFBRSxDQUFDO0lBQ3BGLENBQUM7SUFFRCxTQUFTLENBQUMsTUFBMEI7UUFDbEMsSUFBSSxDQUFDLE1BQU0sR0FBRyxTQUFTLENBQUMsSUFBSSxDQUFDLE1BQU0sRUFBRSxNQUFNLENBQUMsQ0FBQztRQUM3QyxJQUFJLENBQUMsT0FBTyxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLENBQUM7SUFDakMsQ0FBQztJQUVELFNBQVMsQ0FBQyxJQUFZLEVBQUUsS0FBbUI7UUFDekMsSUFBSSxDQUFDLFNBQVMsQ0FBQztZQUNiLElBQUksRUFBRTtnQkFDSixDQUFDLElBQUksQ0FBQyxFQUFFLEtBQUs7YUFDZDtTQUNGLENBQUMsQ0FBQztJQUNMLENBQUM7OEdBcERVLFlBQVksa0JBd0JTLG9CQUFvQiw2QkFBc0MsUUFBUTtrSEF4QnZGLFlBQVksY0FGWCxNQUFNOztTQUVQLFlBQVk7MkZBQVosWUFBWTtrQkFIeEIsVUFBVTttQkFBQztvQkFDVixVQUFVLEVBQUUsTUFBTTtpQkFDbkI7OzBCQXlCYyxRQUFROzswQkFBSSxNQUFNOzJCQUFDLG9CQUFvQjs7MEJBQStCLE1BQU07MkJBQUMsUUFBUSIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEluamVjdCwgSW5qZWN0YWJsZSwgT3B0aW9uYWwgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcclxuaW1wb3J0IHsgRE9DVU1FTlQgfSBmcm9tICdAYW5ndWxhci9jb21tb24nO1xyXG5pbXBvcnQgeyBCZWhhdmlvclN1YmplY3QgfSBmcm9tICdyeGpzJztcclxuaW1wb3J0IHsgSVNoYXJlQnV0dG9uLCBTSEFSRV9CVVRUT05TX0NPTkZJRywgU2hhcmVCdXR0b25zQ29uZmlnLCBTaGFyZXJNZXRob2QgfSBmcm9tICcuL3NoYXJlLm1vZGVscyc7XHJcbmltcG9ydCB7IFNIQVJFX0JVVFRPTlMgfSBmcm9tICcuL3NoYXJlLmRlZmF1bHRzJztcclxuaW1wb3J0IHsgbWVyZ2VEZWVwIH0gZnJvbSAnLi91dGlscyc7XHJcblxyXG5ASW5qZWN0YWJsZSh7XHJcbiAgcHJvdmlkZWRJbjogJ3Jvb3QnXHJcbn0pXHJcbmV4cG9ydCBjbGFzcyBTaGFyZVNlcnZpY2Uge1xyXG5cclxuICAvKiogR2xvYmFsIGNvbmZpZyB0aGF0IGFwcGxpZXMgb24gYWxsIHNoYXJlIGJ1dHRvbnMgaW4gdGhlIGFwcCAqL1xyXG4gIGNvbmZpZzogU2hhcmVCdXR0b25zQ29uZmlnID0ge1xyXG4gICAgc2hhcmVyTWV0aG9kOiBTaGFyZXJNZXRob2QuQW5jaG9yLFxyXG4gICAgc2hhcmVyVGFyZ2V0OiAnX2JsYW5rJyxcclxuICAgIHdpbmRvd09iajogdGhpcy5fZG9jdW1lbnQuZGVmYXVsdFZpZXcsXHJcbiAgICB3aW5kb3dGdW5jTmFtZTogJ29wZW4nLFxyXG4gICAgcHJvcDogU0hBUkVfQlVUVE9OUyxcclxuICAgIHRoZW1lOiAnZGVmYXVsdCcsXHJcbiAgICBpbmNsdWRlOiBbXSxcclxuICAgIGV4Y2x1ZGU6IFtdLFxyXG4gICAgYXV0b1NldE1ldGE6IHRydWUsXHJcbiAgICB3aW5kb3dXaWR0aDogODAwLFxyXG4gICAgd2luZG93SGVpZ2h0OiA1MDAsXHJcbiAgICBtb3JlQnV0dG9uSWNvbjogJ2VsbGlwc2lzLWgnLFxyXG4gICAgbGVzc0J1dHRvbkljb246ICdtaW51cycsXHJcbiAgICBtb3JlQnV0dG9uQXJpYUxhYmVsOiAnU2hvdyBtb3JlIHNoYXJlIGJ1dHRvbnMnLFxyXG4gICAgbGVzc0J1dHRvbkFyaWFMYWJlbDogJ1Nob3cgbGVzcyBzaGFyZSBidXR0b25zJ1xyXG4gIH07XHJcblxyXG4gIC8qKiBTdHJlYW0gdGhhdCBlbWl0cyB3aGVuIGNvbmZpZyBjaGFuZ2VzICovXHJcbiAgY29uZmlnJCA9IG5ldyBCZWhhdmlvclN1YmplY3QodGhpcy5jb25maWcpO1xyXG5cclxuICBjb25zdHJ1Y3RvcihAT3B0aW9uYWwoKSBASW5qZWN0KFNIQVJFX0JVVFRPTlNfQ09ORklHKSBjb25maWc6IFNoYXJlQnV0dG9uc0NvbmZpZywgQEluamVjdChET0NVTUVOVCkgcHJpdmF0ZSBfZG9jdW1lbnQ6IGFueSkge1xyXG4gICAgaWYgKGNvbmZpZykge1xyXG4gICAgICB0aGlzLnNldENvbmZpZyhjb25maWcpO1xyXG4gICAgfVxyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICogU2hhcmUgYnV0dG9ucyBwcm9wZXJ0aWVzLCB1c2VkIHRvIGdldCB0aGUgdGV4dCwgY29sb3IgYW5kIGljb24gb2YgZWFjaCBidXR0b24uXHJcbiAgICovXHJcbiAgZ2V0IHByb3AoKSB7XHJcbiAgICByZXR1cm4gdGhpcy5jb25maWcucHJvcDtcclxuICB9XHJcblxyXG4gIGdldCB3aW5kb3dTaXplKCkge1xyXG4gICAgcmV0dXJuIGB3aWR0aD0keyB0aGlzLmNvbmZpZy53aW5kb3dXaWR0aCB9LCBoZWlnaHQ9JHsgdGhpcy5jb25maWcud2luZG93SGVpZ2h0IH1gO1xyXG4gIH1cclxuXHJcbiAgc2V0Q29uZmlnKGNvbmZpZzogU2hhcmVCdXR0b25zQ29uZmlnKSB7XHJcbiAgICB0aGlzLmNvbmZpZyA9IG1lcmdlRGVlcCh0aGlzLmNvbmZpZywgY29uZmlnKTtcclxuICAgIHRoaXMuY29uZmlnJC5uZXh0KHRoaXMuY29uZmlnKTtcclxuICB9XHJcblxyXG4gIGFkZEJ1dHRvbihuYW1lOiBzdHJpbmcsIHByb3BzOiBJU2hhcmVCdXR0b24pIHtcclxuICAgIHRoaXMuc2V0Q29uZmlnKHtcclxuICAgICAgcHJvcDoge1xyXG4gICAgICAgIFtuYW1lXTogcHJvcHNcclxuICAgICAgfVxyXG4gICAgfSk7XHJcbiAgfVxyXG5cclxufVxyXG4iXX0=
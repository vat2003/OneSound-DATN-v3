import { Observable, of } from 'rxjs';
import { delay, take, tap } from 'rxjs/operators';
/**
 * Simple object check.
 */
function isObject(item) {
    return (item && typeof item === 'object' && !Array.isArray(item));
}
/**
 * Deep merge two objects.
 */
export function mergeDeep(target, ...sources) {
    if (!sources.length) {
        return target;
    }
    const source = sources.shift();
    if (isObject(target) && isObject(source)) {
        for (const key in source) {
            if (isObject(source[key])) {
                if (!target[key]) {
                    Object.assign(target, { [key]: {} });
                }
                mergeDeep(target[key], source[key]);
            }
            else {
                Object.assign(target, { [key]: source[key] });
            }
        }
    }
    return mergeDeep(target, ...sources);
}
/** Returns a valid URL or falls back to current URL */
export function getValidUrl(url, fallbackUrl) {
    if (url) {
        const r = /(http|https):\/\/(\w+:{0,1}\w*@)?(\S+)(:[0-9]+)?(\/|\/([\w#!:.?+=&%@!\-\/]))?/;
        if (r.test(url)) {
            return url;
        }
        console.warn(`[ShareButtons]: Sharing link '${url}' is invalid!`);
    }
    return fallbackUrl;
}
export function printPage() {
    return new Observable((sub) => document.defaultView.print());
}
export function copyToClipboard({ params, data, clipboard, updater }) {
    return of(null).pipe(tap(() => {
        clipboard.copy(params.url);
        // Disable copy button
        updater.next({ icon: data.successIcon, text: data.successText, disabled: true });
    }), delay(data.delay), tap(() => updater.next({ icon: data.icon, text: data.text, disabled: false })), take(1));
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidXRpbHMuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi9wcm9qZWN0cy9uZ3gtc2hhcmVidXR0b25zL3NyYy9saWIvdXRpbHMudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUFFLFVBQVUsRUFBRSxFQUFFLEVBQWMsTUFBTSxNQUFNLENBQUM7QUFDbEQsT0FBTyxFQUFFLEtBQUssRUFBRSxJQUFJLEVBQUUsR0FBRyxFQUFFLE1BQU0sZ0JBQWdCLENBQUM7QUFHbEQ7O0dBRUc7QUFDSCxTQUFTLFFBQVEsQ0FBQyxJQUFJO0lBQ3BCLE9BQU8sQ0FBQyxJQUFJLElBQUksT0FBTyxJQUFJLEtBQUssUUFBUSxJQUFJLENBQUMsS0FBSyxDQUFDLE9BQU8sQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDO0FBQ3BFLENBQUM7QUFFRDs7R0FFRztBQUNILE1BQU0sVUFBVSxTQUFTLENBQUMsTUFBTSxFQUFFLEdBQUcsT0FBTztJQUMxQyxJQUFJLENBQUMsT0FBTyxDQUFDLE1BQU0sRUFBRTtRQUNuQixPQUFPLE1BQU0sQ0FBQztLQUNmO0lBQ0QsTUFBTSxNQUFNLEdBQUcsT0FBTyxDQUFDLEtBQUssRUFBRSxDQUFDO0lBRS9CLElBQUksUUFBUSxDQUFDLE1BQU0sQ0FBQyxJQUFJLFFBQVEsQ0FBQyxNQUFNLENBQUMsRUFBRTtRQUN4QyxLQUFLLE1BQU0sR0FBRyxJQUFJLE1BQU0sRUFBRTtZQUN4QixJQUFJLFFBQVEsQ0FBQyxNQUFNLENBQUMsR0FBRyxDQUFDLENBQUMsRUFBRTtnQkFDekIsSUFBSSxDQUFDLE1BQU0sQ0FBQyxHQUFHLENBQUMsRUFBRTtvQkFDaEIsTUFBTSxDQUFDLE1BQU0sQ0FBQyxNQUFNLEVBQUUsRUFBQyxDQUFDLEdBQUcsQ0FBQyxFQUFFLEVBQUUsRUFBQyxDQUFDLENBQUM7aUJBQ3BDO2dCQUNELFNBQVMsQ0FBQyxNQUFNLENBQUMsR0FBRyxDQUFDLEVBQUUsTUFBTSxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUM7YUFDckM7aUJBQU07Z0JBQ0wsTUFBTSxDQUFDLE1BQU0sQ0FBQyxNQUFNLEVBQUUsRUFBQyxDQUFDLEdBQUcsQ0FBQyxFQUFFLE1BQU0sQ0FBQyxHQUFHLENBQUMsRUFBQyxDQUFDLENBQUM7YUFDN0M7U0FDRjtLQUNGO0lBRUQsT0FBTyxTQUFTLENBQUMsTUFBTSxFQUFFLEdBQUcsT0FBTyxDQUFDLENBQUM7QUFDdkMsQ0FBQztBQUVELHVEQUF1RDtBQUN2RCxNQUFNLFVBQVUsV0FBVyxDQUFDLEdBQVcsRUFBRSxXQUFtQjtJQUMxRCxJQUFJLEdBQUcsRUFBRTtRQUNQLE1BQU0sQ0FBQyxHQUFHLCtFQUErRSxDQUFDO1FBQzFGLElBQUksQ0FBQyxDQUFDLElBQUksQ0FBQyxHQUFHLENBQUMsRUFBRTtZQUNmLE9BQU8sR0FBRyxDQUFDO1NBQ1o7UUFDRCxPQUFPLENBQUMsSUFBSSxDQUFDLGlDQUFrQyxHQUFJLGVBQWUsQ0FBQyxDQUFDO0tBQ3JFO0lBQ0QsT0FBTyxXQUFXLENBQUM7QUFDckIsQ0FBQztBQUVELE1BQU0sVUFBVSxTQUFTO0lBQ3ZCLE9BQU8sSUFBSSxVQUFVLENBQUMsQ0FBQyxHQUFvQixFQUFFLEVBQUUsQ0FBQyxRQUFRLENBQUMsV0FBVyxDQUFDLEtBQUssRUFBRSxDQUFDLENBQUM7QUFDaEYsQ0FBQztBQUVELE1BQU0sVUFBVSxlQUFlLENBQUMsRUFBQyxNQUFNLEVBQUUsSUFBSSxFQUFFLFNBQVMsRUFBRSxPQUFPLEVBQStDO0lBQzlHLE9BQU8sRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLElBQUksQ0FDbEIsR0FBRyxDQUFDLEdBQUcsRUFBRTtRQUNQLFNBQVMsQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLEdBQUcsQ0FBQyxDQUFDO1FBQzNCLHNCQUFzQjtRQUN0QixPQUFPLENBQUMsSUFBSSxDQUFDLEVBQUMsSUFBSSxFQUFFLElBQUksQ0FBQyxXQUFXLEVBQUUsSUFBSSxFQUFFLElBQUksQ0FBQyxXQUFXLEVBQUUsUUFBUSxFQUFFLElBQUksRUFBQyxDQUFDLENBQUM7SUFDakYsQ0FBQyxDQUFDLEVBQ0YsS0FBSyxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsRUFDakIsR0FBRyxDQUFDLEdBQUcsRUFBRSxDQUFDLE9BQU8sQ0FBQyxJQUFJLENBQUMsRUFBQyxJQUFJLEVBQUUsSUFBSSxDQUFDLElBQUksRUFBRSxJQUFJLEVBQUUsSUFBSSxDQUFDLElBQUksRUFBRSxRQUFRLEVBQUUsS0FBSyxFQUFDLENBQUMsQ0FBQyxFQUM1RSxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQ1IsQ0FBQztBQUNKLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBPYnNlcnZhYmxlLCBvZiwgU3Vic2NyaWJlciB9IGZyb20gJ3J4anMnO1xyXG5pbXBvcnQgeyBkZWxheSwgdGFrZSwgdGFwIH0gZnJvbSAncnhqcy9vcGVyYXRvcnMnO1xyXG5pbXBvcnQgeyBTaGFyZUJ1dHRvbkZ1bmNBcmdzIH0gZnJvbSAnLi9zaGFyZS5tb2RlbHMnO1xyXG5cclxuLyoqXHJcbiAqIFNpbXBsZSBvYmplY3QgY2hlY2suXHJcbiAqL1xyXG5mdW5jdGlvbiBpc09iamVjdChpdGVtKTogYm9vbGVhbiB7XHJcbiAgcmV0dXJuIChpdGVtICYmIHR5cGVvZiBpdGVtID09PSAnb2JqZWN0JyAmJiAhQXJyYXkuaXNBcnJheShpdGVtKSk7XHJcbn1cclxuXHJcbi8qKlxyXG4gKiBEZWVwIG1lcmdlIHR3byBvYmplY3RzLlxyXG4gKi9cclxuZXhwb3J0IGZ1bmN0aW9uIG1lcmdlRGVlcCh0YXJnZXQsIC4uLnNvdXJjZXMpIHtcclxuICBpZiAoIXNvdXJjZXMubGVuZ3RoKSB7XHJcbiAgICByZXR1cm4gdGFyZ2V0O1xyXG4gIH1cclxuICBjb25zdCBzb3VyY2UgPSBzb3VyY2VzLnNoaWZ0KCk7XHJcblxyXG4gIGlmIChpc09iamVjdCh0YXJnZXQpICYmIGlzT2JqZWN0KHNvdXJjZSkpIHtcclxuICAgIGZvciAoY29uc3Qga2V5IGluIHNvdXJjZSkge1xyXG4gICAgICBpZiAoaXNPYmplY3Qoc291cmNlW2tleV0pKSB7XHJcbiAgICAgICAgaWYgKCF0YXJnZXRba2V5XSkge1xyXG4gICAgICAgICAgT2JqZWN0LmFzc2lnbih0YXJnZXQsIHtba2V5XToge319KTtcclxuICAgICAgICB9XHJcbiAgICAgICAgbWVyZ2VEZWVwKHRhcmdldFtrZXldLCBzb3VyY2Vba2V5XSk7XHJcbiAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgT2JqZWN0LmFzc2lnbih0YXJnZXQsIHtba2V5XTogc291cmNlW2tleV19KTtcclxuICAgICAgfVxyXG4gICAgfVxyXG4gIH1cclxuXHJcbiAgcmV0dXJuIG1lcmdlRGVlcCh0YXJnZXQsIC4uLnNvdXJjZXMpO1xyXG59XHJcblxyXG4vKiogUmV0dXJucyBhIHZhbGlkIFVSTCBvciBmYWxscyBiYWNrIHRvIGN1cnJlbnQgVVJMICovXHJcbmV4cG9ydCBmdW5jdGlvbiBnZXRWYWxpZFVybCh1cmw6IHN0cmluZywgZmFsbGJhY2tVcmw6IHN0cmluZyk6IHN0cmluZyB7XHJcbiAgaWYgKHVybCkge1xyXG4gICAgY29uc3QgciA9IC8oaHR0cHxodHRwcyk6XFwvXFwvKFxcdys6ezAsMX1cXHcqQCk/KFxcUyspKDpbMC05XSspPyhcXC98XFwvKFtcXHcjITouPys9JiVAIVxcLVxcL10pKT8vO1xyXG4gICAgaWYgKHIudGVzdCh1cmwpKSB7XHJcbiAgICAgIHJldHVybiB1cmw7XHJcbiAgICB9XHJcbiAgICBjb25zb2xlLndhcm4oYFtTaGFyZUJ1dHRvbnNdOiBTaGFyaW5nIGxpbmsgJyR7IHVybCB9JyBpcyBpbnZhbGlkIWApO1xyXG4gIH1cclxuICByZXR1cm4gZmFsbGJhY2tVcmw7XHJcbn1cclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBwcmludFBhZ2UoKTogT2JzZXJ2YWJsZTx2b2lkPiB7XHJcbiAgcmV0dXJuIG5ldyBPYnNlcnZhYmxlKChzdWI6IFN1YnNjcmliZXI8YW55PikgPT4gZG9jdW1lbnQuZGVmYXVsdFZpZXcucHJpbnQoKSk7XHJcbn1cclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBjb3B5VG9DbGlwYm9hcmQoe3BhcmFtcywgZGF0YSwgY2xpcGJvYXJkLCB1cGRhdGVyfTogU2hhcmVCdXR0b25GdW5jQXJnczxDb3B5VG9DbGlwYm9hcmREYXRhQXJncz4pOiBPYnNlcnZhYmxlPHZvaWQ+IHtcclxuICByZXR1cm4gb2YobnVsbCkucGlwZShcclxuICAgIHRhcCgoKSA9PiB7XHJcbiAgICAgIGNsaXBib2FyZC5jb3B5KHBhcmFtcy51cmwpO1xyXG4gICAgICAvLyBEaXNhYmxlIGNvcHkgYnV0dG9uXHJcbiAgICAgIHVwZGF0ZXIubmV4dCh7aWNvbjogZGF0YS5zdWNjZXNzSWNvbiwgdGV4dDogZGF0YS5zdWNjZXNzVGV4dCwgZGlzYWJsZWQ6IHRydWV9KTtcclxuICAgIH0pLFxyXG4gICAgZGVsYXkoZGF0YS5kZWxheSksXHJcbiAgICB0YXAoKCkgPT4gdXBkYXRlci5uZXh0KHtpY29uOiBkYXRhLmljb24sIHRleHQ6IGRhdGEudGV4dCwgZGlzYWJsZWQ6IGZhbHNlfSkpLFxyXG4gICAgdGFrZSgxKVxyXG4gICk7XHJcbn1cclxuXHJcbmludGVyZmFjZSBDb3B5VG9DbGlwYm9hcmREYXRhQXJncyB7XHJcbiAgZGVsYXk6IG51bWJlcjtcclxuICB0ZXh0OiBzdHJpbmc7XHJcbiAgaWNvbjogc3RyaW5nW107XHJcbiAgc3VjY2Vzc1RleHQ6IHN0cmluZztcclxuICBzdWNjZXNzSWNvbjogc3RyaW5nW107XHJcbn1cclxuIl19